# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BotAbortStatement',
    'BotAbortStatementMessage',
    'BotAliasConversationLogs',
    'BotAliasConversationLogsLogSetting',
    'BotClarificationPrompt',
    'BotClarificationPromptMessage',
    'BotIntent',
    'IntentConclusionStatement',
    'IntentConclusionStatementMessage',
    'IntentConfirmationPrompt',
    'IntentConfirmationPromptMessage',
    'IntentDialogCodeHook',
    'IntentFollowUpPrompt',
    'IntentFollowUpPromptPrompt',
    'IntentFollowUpPromptPromptMessage',
    'IntentFollowUpPromptRejectionStatement',
    'IntentFollowUpPromptRejectionStatementMessage',
    'IntentFulfillmentActivity',
    'IntentFulfillmentActivityCodeHook',
    'IntentRejectionStatement',
    'IntentRejectionStatementMessage',
    'IntentSlot',
    'IntentSlotValueElicitationPrompt',
    'IntentSlotValueElicitationPromptMessage',
    'SlotTypeEnumerationValue',
    'V2modelsBotDataPrivacy',
    'V2modelsBotLocaleTimeouts',
    'V2modelsBotLocaleVoiceSettings',
    'V2modelsBotMember',
    'V2modelsBotTimeouts',
    'V2modelsBotVersionLocaleSpecification',
    'V2modelsBotVersionTimeouts',
    'V2modelsIntentClosingSetting',
    'V2modelsIntentClosingSettingClosingResponse',
    'V2modelsIntentClosingSettingClosingResponseMessageGroup',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessage',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariation',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentClosingSettingConditional',
    'V2modelsIntentClosingSettingConditionalConditionalBranch',
    'V2modelsIntentClosingSettingConditionalConditionalBranchCondition',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStep',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponse',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentClosingSettingConditionalDefaultBranch',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStep',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponse',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentClosingSettingNextStep',
    'V2modelsIntentClosingSettingNextStepDialogAction',
    'V2modelsIntentClosingSettingNextStepIntent',
    'V2modelsIntentClosingSettingNextStepIntentSlot',
    'V2modelsIntentClosingSettingNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSetting',
    'V2modelsIntentConfirmationSettingCodeHook',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditional',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingConfirmationNextStep',
    'V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntent',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingConfirmationResponse',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroup',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditional',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingDeclinationNextStep',
    'V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntent',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingDeclinationResponse',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroup',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingElicitationCodeHook',
    'V2modelsIntentConfirmationSettingFailureConditional',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingFailureNextStep',
    'V2modelsIntentConfirmationSettingFailureNextStepDialogAction',
    'V2modelsIntentConfirmationSettingFailureNextStepIntent',
    'V2modelsIntentConfirmationSettingFailureNextStepIntentSlot',
    'V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue',
    'V2modelsIntentConfirmationSettingFailureResponse',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroup',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingPromptSpecification',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroup',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayload',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessage',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessage',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayload',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessage',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessage',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification',
    'V2modelsIntentDialogCodeHook',
    'V2modelsIntentFulfillmentCodeHook',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntent',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroup',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSetting',
    'V2modelsIntentInitialResponseSettingCodeHook',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingConditional',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranch',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntent',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranch',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntent',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingInitialResponse',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroup',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayload',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessage',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessage',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayload',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessage',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessage',
    'V2modelsIntentInitialResponseSettingNextStep',
    'V2modelsIntentInitialResponseSettingNextStepDialogAction',
    'V2modelsIntentInitialResponseSettingNextStepIntent',
    'V2modelsIntentInitialResponseSettingNextStepIntentSlot',
    'V2modelsIntentInitialResponseSettingNextStepIntentSlotValue',
    'V2modelsIntentInputContext',
    'V2modelsIntentKendraConfiguration',
    'V2modelsIntentOutputContext',
    'V2modelsIntentSampleUtterance',
    'V2modelsIntentSlotPriority',
    'V2modelsIntentTimeouts',
    'V2modelsSlotMultipleValuesSetting',
    'V2modelsSlotObfuscationSetting',
    'V2modelsSlotTimeouts',
    'V2modelsSlotTypeCompositeSlotTypeSetting',
    'V2modelsSlotTypeExternalSourceSetting',
    'V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSetting',
    'V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource',
    'V2modelsSlotTypeSlotTypeValues',
    'V2modelsSlotTypeSlotTypeValuesSynonym',
    'V2modelsSlotTypeTimeouts',
    'V2modelsSlotTypeValueSelectionSetting',
    'V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting',
    'V2modelsSlotTypeValueSelectionSettingRegexFilter',
    'V2modelsSlotValueElicitationSetting',
    'V2modelsSlotValueElicitationSettingDefaultValueSpecification',
    'V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList',
    'V2modelsSlotValueElicitationSettingPromptSpecification',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroup',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessage',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessage',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessage',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessage',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification',
    'V2modelsSlotValueElicitationSettingSampleUtterance',
    'V2modelsSlotValueElicitationSettingSlotResolutionSetting',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecification',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroup',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroup',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroup',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButton',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButton',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessage',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessage',
    'GetSlotTypeEnumerationValueResult',
]

@pulumi.output_type
class BotAbortStatement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "responseCard":
            suggest = "response_card"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAbortStatement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAbortStatement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAbortStatement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 messages: Sequence['outputs.BotAbortStatementMessage'],
                 response_card: Optional[str] = None):
        """
        :param Sequence['BotAbortStatementMessageArgs'] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html).
        """
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.BotAbortStatementMessage']:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html).
        """
        return pulumi.get(self, "response_card")


@pulumi.output_type
class BotAbortStatementMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "groupNumber":
            suggest = "group_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAbortStatementMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAbortStatementMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAbortStatementMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 group_number: Optional[int] = None):
        """
        :param str content: The text of the message.
        :param str content_type: The content type of the message string.
        :param int group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The text of the message.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[int]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
        return pulumi.get(self, "group_number")


@pulumi.output_type
class BotAliasConversationLogs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iamRoleArn":
            suggest = "iam_role_arn"
        elif key == "logSettings":
            suggest = "log_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasConversationLogs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasConversationLogs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasConversationLogs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iam_role_arn: str,
                 log_settings: Optional[Sequence['outputs.BotAliasConversationLogsLogSetting']] = None):
        """
        :param str iam_role_arn: The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
        :param Sequence['BotAliasConversationLogsLogSettingArgs'] log_settings: The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
        """
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        if log_settings is not None:
            pulumi.set(__self__, "log_settings", log_settings)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
        """
        return pulumi.get(self, "iam_role_arn")

    @property
    @pulumi.getter(name="logSettings")
    def log_settings(self) -> Optional[Sequence['outputs.BotAliasConversationLogsLogSetting']]:
        """
        The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
        """
        return pulumi.get(self, "log_settings")


@pulumi.output_type
class BotAliasConversationLogsLogSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logType":
            suggest = "log_type"
        elif key == "resourceArn":
            suggest = "resource_arn"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"
        elif key == "resourcePrefix":
            suggest = "resource_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasConversationLogsLogSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasConversationLogsLogSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasConversationLogsLogSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 log_type: str,
                 resource_arn: str,
                 kms_key_arn: Optional[str] = None,
                 resource_prefix: Optional[str] = None):
        """
        :param str destination: The destination where logs are delivered. Options are `CLOUDWATCH_LOGS` or `S3`.
        :param str log_type: The type of logging that is enabled. Options are `AUDIO` or `TEXT`.
        :param str resource_arn: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
        :param str kms_key_arn: The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when `destination` is set to `S3`. Must be between 20 and 2048 characters in length.
        :param str resource_prefix: The prefix of the S3 object key for `AUDIO` logs or the log stream name for `TEXT` logs.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "resource_arn", resource_arn)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if resource_prefix is not None:
            pulumi.set(__self__, "resource_prefix", resource_prefix)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        The destination where logs are delivered. Options are `CLOUDWATCH_LOGS` or `S3`.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        The type of logging that is enabled. Options are `AUDIO` or `TEXT`.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
        """
        return pulumi.get(self, "resource_arn")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when `destination` is set to `S3`. Must be between 20 and 2048 characters in length.
        """
        return pulumi.get(self, "kms_key_arn")

    @property
    @pulumi.getter(name="resourcePrefix")
    def resource_prefix(self) -> Optional[str]:
        """
        The prefix of the S3 object key for `AUDIO` logs or the log stream name for `TEXT` logs.
        """
        return pulumi.get(self, "resource_prefix")


@pulumi.output_type
class BotClarificationPrompt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAttempts":
            suggest = "max_attempts"
        elif key == "responseCard":
            suggest = "response_card"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotClarificationPrompt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotClarificationPrompt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotClarificationPrompt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_attempts: int,
                 messages: Sequence['outputs.BotClarificationPromptMessage'],
                 response_card: Optional[str] = None):
        """
        :param int max_attempts: The number of times to prompt the user for information.
        :param Sequence['BotClarificationPromptMessageArgs'] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html).
        """
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> int:
        """
        The number of times to prompt the user for information.
        """
        return pulumi.get(self, "max_attempts")

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.BotClarificationPromptMessage']:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html).
        """
        return pulumi.get(self, "response_card")


@pulumi.output_type
class BotClarificationPromptMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "groupNumber":
            suggest = "group_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotClarificationPromptMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotClarificationPromptMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotClarificationPromptMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 group_number: Optional[int] = None):
        """
        :param str content: The text of the message.
        :param str content_type: The content type of the message string.
        :param int group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The text of the message.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[int]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
        return pulumi.get(self, "group_number")


@pulumi.output_type
class BotIntent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intentName":
            suggest = "intent_name"
        elif key == "intentVersion":
            suggest = "intent_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotIntent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotIntent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotIntent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 intent_name: str,
                 intent_version: str):
        """
        :param str intent_name: The name of the intent. Must be less than or equal to 100 characters in length.
        :param str intent_version: The version of the intent. Must be less than or equal to 64 characters in length.
        """
        pulumi.set(__self__, "intent_name", intent_name)
        pulumi.set(__self__, "intent_version", intent_version)

    @property
    @pulumi.getter(name="intentName")
    def intent_name(self) -> str:
        """
        The name of the intent. Must be less than or equal to 100 characters in length.
        """
        return pulumi.get(self, "intent_name")

    @property
    @pulumi.getter(name="intentVersion")
    def intent_version(self) -> str:
        """
        The version of the intent. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "intent_version")


@pulumi.output_type
class IntentConclusionStatement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "responseCard":
            suggest = "response_card"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentConclusionStatement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentConclusionStatement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentConclusionStatement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 messages: Sequence['outputs.IntentConclusionStatementMessage'],
                 response_card: Optional[str] = None):
        """
        :param Sequence['IntentConclusionStatementMessageArgs'] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message. Must contain between 1 and 15 messages.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.IntentConclusionStatementMessage']:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message. Must contain between 1 and 15 messages.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")


@pulumi.output_type
class IntentConclusionStatementMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "groupNumber":
            suggest = "group_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentConclusionStatementMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentConclusionStatementMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentConclusionStatementMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 group_number: Optional[int] = None):
        """
        :param str content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param str content_type: The content type of the message string.
        :param int group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[int]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")


@pulumi.output_type
class IntentConfirmationPrompt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAttempts":
            suggest = "max_attempts"
        elif key == "responseCard":
            suggest = "response_card"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentConfirmationPrompt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentConfirmationPrompt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentConfirmationPrompt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_attempts: int,
                 messages: Sequence['outputs.IntentConfirmationPromptMessage'],
                 response_card: Optional[str] = None):
        """
        :param int max_attempts: The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        :param Sequence['IntentConfirmationPromptMessageArgs'] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message. Must contain between 1 and 15 messages.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> int:
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "max_attempts")

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.IntentConfirmationPromptMessage']:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message. Must contain between 1 and 15 messages.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")


@pulumi.output_type
class IntentConfirmationPromptMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "groupNumber":
            suggest = "group_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentConfirmationPromptMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentConfirmationPromptMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentConfirmationPromptMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 group_number: Optional[int] = None):
        """
        :param str content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param str content_type: The content type of the message string.
        :param int group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[int]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")


@pulumi.output_type
class IntentDialogCodeHook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "messageVersion":
            suggest = "message_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentDialogCodeHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentDialogCodeHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentDialogCodeHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message_version: str,
                 uri: str):
        """
        :param str message_version: The version of the request-response that you want Amazon Lex to use
               to invoke your Lambda function. For more information, see
               [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        :param str uri: The Amazon Resource Name (ARN) of the Lambda function.
        """
        pulumi.set(__self__, "message_version", message_version)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="messageVersion")
    def message_version(self) -> str:
        """
        The version of the request-response that you want Amazon Lex to use
        to invoke your Lambda function. For more information, see
        [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        """
        return pulumi.get(self, "message_version")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The Amazon Resource Name (ARN) of the Lambda function.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class IntentFollowUpPrompt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rejectionStatement":
            suggest = "rejection_statement"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentFollowUpPrompt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentFollowUpPrompt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentFollowUpPrompt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prompt: 'outputs.IntentFollowUpPromptPrompt',
                 rejection_statement: 'outputs.IntentFollowUpPromptRejectionStatement'):
        """
        :param 'IntentFollowUpPromptPromptArgs' prompt: Prompts for information from the user. Attributes are documented under prompt.
        :param 'IntentFollowUpPromptRejectionStatementArgs' rejection_statement: If the user answers "no" to the question defined in the prompt field,
               Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
               documented below under statement.
        """
        pulumi.set(__self__, "prompt", prompt)
        pulumi.set(__self__, "rejection_statement", rejection_statement)

    @property
    @pulumi.getter
    def prompt(self) -> 'outputs.IntentFollowUpPromptPrompt':
        """
        Prompts for information from the user. Attributes are documented under prompt.
        """
        return pulumi.get(self, "prompt")

    @property
    @pulumi.getter(name="rejectionStatement")
    def rejection_statement(self) -> 'outputs.IntentFollowUpPromptRejectionStatement':
        """
        If the user answers "no" to the question defined in the prompt field,
        Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
        documented below under statement.
        """
        return pulumi.get(self, "rejection_statement")


@pulumi.output_type
class IntentFollowUpPromptPrompt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAttempts":
            suggest = "max_attempts"
        elif key == "responseCard":
            suggest = "response_card"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentFollowUpPromptPrompt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentFollowUpPromptPrompt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentFollowUpPromptPrompt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_attempts: int,
                 messages: Sequence['outputs.IntentFollowUpPromptPromptMessage'],
                 response_card: Optional[str] = None):
        """
        :param int max_attempts: The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        :param Sequence['IntentFollowUpPromptPromptMessageArgs'] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message. Must contain between 1 and 15 messages.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> int:
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "max_attempts")

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.IntentFollowUpPromptPromptMessage']:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message. Must contain between 1 and 15 messages.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")


@pulumi.output_type
class IntentFollowUpPromptPromptMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "groupNumber":
            suggest = "group_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentFollowUpPromptPromptMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentFollowUpPromptPromptMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentFollowUpPromptPromptMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 group_number: Optional[int] = None):
        """
        :param str content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param str content_type: The content type of the message string.
        :param int group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[int]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")


@pulumi.output_type
class IntentFollowUpPromptRejectionStatement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "responseCard":
            suggest = "response_card"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentFollowUpPromptRejectionStatement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentFollowUpPromptRejectionStatement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentFollowUpPromptRejectionStatement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 messages: Sequence['outputs.IntentFollowUpPromptRejectionStatementMessage'],
                 response_card: Optional[str] = None):
        """
        :param Sequence['IntentFollowUpPromptRejectionStatementMessageArgs'] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message. Must contain between 1 and 15 messages.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.IntentFollowUpPromptRejectionStatementMessage']:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message. Must contain between 1 and 15 messages.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")


@pulumi.output_type
class IntentFollowUpPromptRejectionStatementMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "groupNumber":
            suggest = "group_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentFollowUpPromptRejectionStatementMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentFollowUpPromptRejectionStatementMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentFollowUpPromptRejectionStatementMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 group_number: Optional[int] = None):
        """
        :param str content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param str content_type: The content type of the message string.
        :param int group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[int]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")


@pulumi.output_type
class IntentFulfillmentActivity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeHook":
            suggest = "code_hook"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentFulfillmentActivity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentFulfillmentActivity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentFulfillmentActivity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 code_hook: Optional['outputs.IntentFulfillmentActivityCodeHook'] = None):
        """
        :param str type: How the intent should be fulfilled, either by running a Lambda function or by
               returning the slot data to the client application. Type can be either `ReturnIntent` or `CodeHook`, as documented [here](https://docs.aws.amazon.com/lex/latest/dg/API_FulfillmentActivity.html).
        :param 'IntentFulfillmentActivityCodeHookArgs' code_hook: A description of the Lambda function that is run to fulfill the intent.
               Required if type is CodeHook. Attributes are documented under code_hook.
        """
        pulumi.set(__self__, "type", type)
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        How the intent should be fulfilled, either by running a Lambda function or by
        returning the slot data to the client application. Type can be either `ReturnIntent` or `CodeHook`, as documented [here](https://docs.aws.amazon.com/lex/latest/dg/API_FulfillmentActivity.html).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional['outputs.IntentFulfillmentActivityCodeHook']:
        """
        A description of the Lambda function that is run to fulfill the intent.
        Required if type is CodeHook. Attributes are documented under code_hook.
        """
        return pulumi.get(self, "code_hook")


@pulumi.output_type
class IntentFulfillmentActivityCodeHook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "messageVersion":
            suggest = "message_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentFulfillmentActivityCodeHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentFulfillmentActivityCodeHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentFulfillmentActivityCodeHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message_version: str,
                 uri: str):
        """
        :param str message_version: The version of the request-response that you want Amazon Lex to use
               to invoke your Lambda function. For more information, see
               [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        :param str uri: The Amazon Resource Name (ARN) of the Lambda function.
        """
        pulumi.set(__self__, "message_version", message_version)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="messageVersion")
    def message_version(self) -> str:
        """
        The version of the request-response that you want Amazon Lex to use
        to invoke your Lambda function. For more information, see
        [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        """
        return pulumi.get(self, "message_version")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The Amazon Resource Name (ARN) of the Lambda function.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class IntentRejectionStatement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "responseCard":
            suggest = "response_card"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentRejectionStatement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentRejectionStatement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentRejectionStatement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 messages: Sequence['outputs.IntentRejectionStatementMessage'],
                 response_card: Optional[str] = None):
        """
        :param Sequence['IntentRejectionStatementMessageArgs'] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message. Must contain between 1 and 15 messages.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.IntentRejectionStatementMessage']:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message. Must contain between 1 and 15 messages.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")


@pulumi.output_type
class IntentRejectionStatementMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "groupNumber":
            suggest = "group_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentRejectionStatementMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentRejectionStatementMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentRejectionStatementMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 group_number: Optional[int] = None):
        """
        :param str content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param str content_type: The content type of the message string.
        :param int group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[int]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")


@pulumi.output_type
class IntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotConstraint":
            suggest = "slot_constraint"
        elif key == "slotType":
            suggest = "slot_type"
        elif key == "responseCard":
            suggest = "response_card"
        elif key == "sampleUtterances":
            suggest = "sample_utterances"
        elif key == "slotTypeVersion":
            suggest = "slot_type_version"
        elif key == "valueElicitationPrompt":
            suggest = "value_elicitation_prompt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 slot_constraint: str,
                 slot_type: str,
                 description: Optional[str] = None,
                 priority: Optional[int] = None,
                 response_card: Optional[str] = None,
                 sample_utterances: Optional[Sequence[str]] = None,
                 slot_type_version: Optional[str] = None,
                 value_elicitation_prompt: Optional['outputs.IntentSlotValueElicitationPrompt'] = None):
        """
        :param str name: The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
        :param str slot_constraint: Specifies whether the slot is required or optional.
        :param str slot_type: The type of the slot, either a custom slot type that you defined or one of
               the built-in slot types. Must be less than or equal to 100 characters in length.
        :param str description: A description of the bot. Must be less than or equal to 200 characters in length.
        :param int priority: Directs Lex the order in which to elicit this slot value from the user.
               For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
               the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
               values is arbitrary. Must be between 1 and 100.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        :param Sequence[str] sample_utterances: If you know a specific pattern with which users might respond to
               an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
               is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        :param str slot_type_version: The version of the slot type. Must be less than or equal to 64 characters in length.
        :param 'IntentSlotValueElicitationPromptArgs' value_elicitation_prompt: The prompt that Amazon Lex uses to elicit the slot value
               from the user. Attributes are documented under prompt.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slot_constraint", slot_constraint)
        pulumi.set(__self__, "slot_type", slot_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)
        if sample_utterances is not None:
            pulumi.set(__self__, "sample_utterances", sample_utterances)
        if slot_type_version is not None:
            pulumi.set(__self__, "slot_type_version", slot_type_version)
        if value_elicitation_prompt is not None:
            pulumi.set(__self__, "value_elicitation_prompt", value_elicitation_prompt)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="slotConstraint")
    def slot_constraint(self) -> str:
        """
        Specifies whether the slot is required or optional.
        """
        return pulumi.get(self, "slot_constraint")

    @property
    @pulumi.getter(name="slotType")
    def slot_type(self) -> str:
        """
        The type of the slot, either a custom slot type that you defined or one of
        the built-in slot types. Must be less than or equal to 100 characters in length.
        """
        return pulumi.get(self, "slot_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the bot. Must be less than or equal to 200 characters in length.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Directs Lex the order in which to elicit this slot value from the user.
        For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
        the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
        values is arbitrary. Must be between 1 and 100.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")

    @property
    @pulumi.getter(name="sampleUtterances")
    def sample_utterances(self) -> Optional[Sequence[str]]:
        """
        If you know a specific pattern with which users might respond to
        an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
        is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        """
        return pulumi.get(self, "sample_utterances")

    @property
    @pulumi.getter(name="slotTypeVersion")
    def slot_type_version(self) -> Optional[str]:
        """
        The version of the slot type. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "slot_type_version")

    @property
    @pulumi.getter(name="valueElicitationPrompt")
    def value_elicitation_prompt(self) -> Optional['outputs.IntentSlotValueElicitationPrompt']:
        """
        The prompt that Amazon Lex uses to elicit the slot value
        from the user. Attributes are documented under prompt.
        """
        return pulumi.get(self, "value_elicitation_prompt")


@pulumi.output_type
class IntentSlotValueElicitationPrompt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAttempts":
            suggest = "max_attempts"
        elif key == "responseCard":
            suggest = "response_card"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentSlotValueElicitationPrompt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentSlotValueElicitationPrompt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentSlotValueElicitationPrompt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_attempts: int,
                 messages: Sequence['outputs.IntentSlotValueElicitationPromptMessage'],
                 response_card: Optional[str] = None):
        """
        :param int max_attempts: The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        :param Sequence['IntentSlotValueElicitationPromptMessageArgs'] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message. Must contain between 1 and 15 messages.
        :param str response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> int:
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "max_attempts")

    @property
    @pulumi.getter
    def messages(self) -> Sequence['outputs.IntentSlotValueElicitationPromptMessage']:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message. Must contain between 1 and 15 messages.
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[str]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")


@pulumi.output_type
class IntentSlotValueElicitationPromptMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "groupNumber":
            suggest = "group_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntentSlotValueElicitationPromptMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntentSlotValueElicitationPromptMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntentSlotValueElicitationPromptMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 group_number: Optional[int] = None):
        """
        :param str content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param str content_type: The content type of the message string.
        :param int group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[int]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")


@pulumi.output_type
class SlotTypeEnumerationValue(dict):
    def __init__(__self__, *,
                 value: str,
                 synonyms: Optional[Sequence[str]] = None):
        """
        :param str value: The value of the slot type. Must be less than or equal to 140 characters in length.
        :param Sequence[str] synonyms: Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
        """
        pulumi.set(__self__, "value", value)
        if synonyms is not None:
            pulumi.set(__self__, "synonyms", synonyms)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the slot type. Must be less than or equal to 140 characters in length.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[Sequence[str]]:
        """
        Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
        """
        return pulumi.get(self, "synonyms")


@pulumi.output_type
class V2modelsBotDataPrivacy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "childDirected":
            suggest = "child_directed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsBotDataPrivacy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsBotDataPrivacy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsBotDataPrivacy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 child_directed: bool):
        """
        :param bool child_directed: (Required) -  For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field.
        """
        pulumi.set(__self__, "child_directed", child_directed)

    @property
    @pulumi.getter(name="childDirected")
    def child_directed(self) -> bool:
        """
        (Required) -  For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field.
        """
        return pulumi.get(self, "child_directed")


@pulumi.output_type
class V2modelsBotLocaleTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class V2modelsBotLocaleVoiceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "voiceId":
            suggest = "voice_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsBotLocaleVoiceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsBotLocaleVoiceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsBotLocaleVoiceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 voice_id: str,
                 engine: Optional[str] = None):
        """
        :param str voice_id: Identifier of the Amazon Polly voice to use.
        :param str engine: Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. Valid values are `standard` and `neural`. If not specified, the default is `standard`.
        """
        pulumi.set(__self__, "voice_id", voice_id)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)

    @property
    @pulumi.getter(name="voiceId")
    def voice_id(self) -> str:
        """
        Identifier of the Amazon Polly voice to use.
        """
        return pulumi.get(self, "voice_id")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        """
        Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. Valid values are `standard` and `neural`. If not specified, the default is `standard`.
        """
        return pulumi.get(self, "engine")


@pulumi.output_type
class V2modelsBotMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aliasId":
            suggest = "alias_id"
        elif key == "aliasName":
            suggest = "alias_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsBotMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsBotMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsBotMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alias_id: str,
                 alias_name: str,
                 id: str,
                 name: str,
                 version: str):
        """
        :param str alias_id: (Required) - Alias ID of a bot that is a member of this network of bots.
        :param str alias_name: (Required) - Alias name of a bot that is a member of this network of bots.
        :param str id: (Required) - Unique ID of a bot that is a member of this network of bots.
        :param str name: Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
        :param str version: (Required) - Version of a bot that is a member of this network of bots.
        """
        pulumi.set(__self__, "alias_id", alias_id)
        pulumi.set(__self__, "alias_name", alias_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="aliasId")
    def alias_id(self) -> str:
        """
        (Required) - Alias ID of a bot that is a member of this network of bots.
        """
        return pulumi.get(self, "alias_id")

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> str:
        """
        (Required) - Alias name of a bot that is a member of this network of bots.
        """
        return pulumi.get(self, "alias_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (Required) - Unique ID of a bot that is a member of this network of bots.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        (Required) - Version of a bot that is a member of this network of bots.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class V2modelsBotTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class V2modelsBotVersionLocaleSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceBotVersion":
            suggest = "source_bot_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsBotVersionLocaleSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsBotVersionLocaleSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsBotVersionLocaleSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_bot_version: str):
        pulumi.set(__self__, "source_bot_version", source_bot_version)

    @property
    @pulumi.getter(name="sourceBotVersion")
    def source_bot_version(self) -> str:
        return pulumi.get(self, "source_bot_version")


@pulumi.output_type
class V2modelsBotVersionTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")


@pulumi.output_type
class V2modelsIntentClosingSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "closingResponse":
            suggest = "closing_response"
        elif key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 closing_response: Optional['outputs.V2modelsIntentClosingSettingClosingResponse'] = None,
                 conditional: Optional['outputs.V2modelsIntentClosingSettingConditional'] = None,
                 next_step: Optional['outputs.V2modelsIntentClosingSettingNextStep'] = None):
        """
        :param bool active: Whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
        :param 'V2modelsIntentClosingSettingClosingResponseArgs' closing_response: Configuration block for response that Amazon Lex sends to the user when the intent is complete. See `closing_response`.
        :param 'V2modelsIntentClosingSettingConditionalArgs' conditional: Configuration block for list of conditional branches associated with the intent's closing response. These branches are executed when the `next_step` attribute is set to `EvalutateConditional`. See `conditional`.
        :param 'V2modelsIntentClosingSettingNextStepArgs' next_step: Next step that the bot executes after playing the intent's closing response. See `next_step`.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if closing_response is not None:
            pulumi.set(__self__, "closing_response", closing_response)
        if conditional is not None:
            pulumi.set(__self__, "conditional", conditional)
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="closingResponse")
    def closing_response(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponse']:
        """
        Configuration block for response that Amazon Lex sends to the user when the intent is complete. See `closing_response`.
        """
        return pulumi.get(self, "closing_response")

    @property
    @pulumi.getter
    def conditional(self) -> Optional['outputs.V2modelsIntentClosingSettingConditional']:
        """
        Configuration block for list of conditional branches associated with the intent's closing response. These branches are executed when the `next_step` attribute is set to `EvalutateConditional`. See `conditional`.
        """
        return pulumi.get(self, "conditional")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentClosingSettingNextStep']:
        """
        Next step that the bot executes after playing the intent's closing response. See `next_step`.
        """
        return pulumi.get(self, "next_step")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingClosingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingClosingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingClosingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentClosingSettingClosingResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingClosingResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingClosingResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingClosingResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingClosingResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingClosingResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingClosingResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentClosingSettingConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentClosingSettingConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentClosingSettingConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentClosingSettingConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentClosingSettingConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentClosingSettingNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentClosingSettingNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentClosingSettingNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentClosingSettingNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentClosingSettingNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentClosingSettingNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentClosingSettingNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentClosingSettingNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentClosingSettingNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentClosingSettingNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentClosingSettingNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentClosingSettingNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentClosingSettingNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentClosingSettingNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentClosingSettingNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentClosingSettingNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentClosingSettingNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentClosingSettingNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentClosingSettingNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "promptSpecification":
            suggest = "prompt_specification"
        elif key == "codeHook":
            suggest = "code_hook"
        elif key == "confirmationConditional":
            suggest = "confirmation_conditional"
        elif key == "confirmationNextStep":
            suggest = "confirmation_next_step"
        elif key == "confirmationResponse":
            suggest = "confirmation_response"
        elif key == "declinationConditional":
            suggest = "declination_conditional"
        elif key == "declinationNextStep":
            suggest = "declination_next_step"
        elif key == "declinationResponse":
            suggest = "declination_response"
        elif key == "elicitationCodeHook":
            suggest = "elicitation_code_hook"
        elif key == "failureConditional":
            suggest = "failure_conditional"
        elif key == "failureNextStep":
            suggest = "failure_next_step"
        elif key == "failureResponse":
            suggest = "failure_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prompt_specification: 'outputs.V2modelsIntentConfirmationSettingPromptSpecification',
                 active: Optional[bool] = None,
                 code_hook: Optional['outputs.V2modelsIntentConfirmationSettingCodeHook'] = None,
                 confirmation_conditional: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditional'] = None,
                 confirmation_next_step: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationNextStep'] = None,
                 confirmation_response: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponse'] = None,
                 declination_conditional: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditional'] = None,
                 declination_next_step: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationNextStep'] = None,
                 declination_response: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponse'] = None,
                 elicitation_code_hook: Optional['outputs.V2modelsIntentConfirmationSettingElicitationCodeHook'] = None,
                 failure_conditional: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditional'] = None,
                 failure_next_step: Optional['outputs.V2modelsIntentConfirmationSettingFailureNextStep'] = None,
                 failure_response: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationArgs' prompt_specification: Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
        :param bool active: Whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
        :param 'V2modelsIntentConfirmationSettingCodeHookArgs' code_hook: Configuration block for the intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalArgs' confirmation_conditional: Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
        :param 'V2modelsIntentConfirmationSettingConfirmationNextStepArgs' confirmation_next_step: Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseArgs' confirmation_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalArgs' declination_conditional: Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
        :param 'V2modelsIntentConfirmationSettingDeclinationNextStepArgs' declination_next_step: Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseArgs' declination_response: Configuration block for when the user answers "no" to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
        :param 'V2modelsIntentConfirmationSettingElicitationCodeHookArgs' elicitation_code_hook: Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalArgs' failure_conditional: Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
        :param 'V2modelsIntentConfirmationSettingFailureNextStepArgs' failure_next_step: Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
        :param 'V2modelsIntentConfirmationSettingFailureResponseArgs' failure_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        pulumi.set(__self__, "prompt_specification", prompt_specification)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)
        if confirmation_conditional is not None:
            pulumi.set(__self__, "confirmation_conditional", confirmation_conditional)
        if confirmation_next_step is not None:
            pulumi.set(__self__, "confirmation_next_step", confirmation_next_step)
        if confirmation_response is not None:
            pulumi.set(__self__, "confirmation_response", confirmation_response)
        if declination_conditional is not None:
            pulumi.set(__self__, "declination_conditional", declination_conditional)
        if declination_next_step is not None:
            pulumi.set(__self__, "declination_next_step", declination_next_step)
        if declination_response is not None:
            pulumi.set(__self__, "declination_response", declination_response)
        if elicitation_code_hook is not None:
            pulumi.set(__self__, "elicitation_code_hook", elicitation_code_hook)
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)

    @property
    @pulumi.getter(name="promptSpecification")
    def prompt_specification(self) -> 'outputs.V2modelsIntentConfirmationSettingPromptSpecification':
        """
        Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
        """
        return pulumi.get(self, "prompt_specification")

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHook']:
        """
        Configuration block for the intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
        """
        return pulumi.get(self, "code_hook")

    @property
    @pulumi.getter(name="confirmationConditional")
    def confirmation_conditional(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditional']:
        """
        Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
        """
        return pulumi.get(self, "confirmation_conditional")

    @property
    @pulumi.getter(name="confirmationNextStep")
    def confirmation_next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationNextStep']:
        """
        Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
        """
        return pulumi.get(self, "confirmation_next_step")

    @property
    @pulumi.getter(name="confirmationResponse")
    def confirmation_response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
        """
        return pulumi.get(self, "confirmation_response")

    @property
    @pulumi.getter(name="declinationConditional")
    def declination_conditional(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditional']:
        """
        Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
        """
        return pulumi.get(self, "declination_conditional")

    @property
    @pulumi.getter(name="declinationNextStep")
    def declination_next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationNextStep']:
        """
        Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
        """
        return pulumi.get(self, "declination_next_step")

    @property
    @pulumi.getter(name="declinationResponse")
    def declination_response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponse']:
        """
        Configuration block for when the user answers "no" to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
        """
        return pulumi.get(self, "declination_response")

    @property
    @pulumi.getter(name="elicitationCodeHook")
    def elicitation_code_hook(self) -> Optional['outputs.V2modelsIntentConfirmationSettingElicitationCodeHook']:
        """
        Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
        """
        return pulumi.get(self, "elicitation_code_hook")

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditional']:
        """
        Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
        """
        return pulumi.get(self, "failure_conditional")

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureNextStep']:
        """
        Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
        """
        return pulumi.get(self, "failure_next_step")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        return pulumi.get(self, "failure_response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCodeHookInvocation":
            suggest = "enable_code_hook_invocation"
        elif key == "postCodeHookSpecification":
            suggest = "post_code_hook_specification"
        elif key == "invocationLabel":
            suggest = "invocation_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 enable_code_hook_invocation: bool,
                 post_code_hook_specification: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification',
                 invocation_label: Optional[str] = None):
        """
        :param bool active: Whether a dialog code hook is used when the intent is activated.
        :param bool enable_code_hook_invocation: Whether a Lambda function should be invoked for the dialog.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgs' post_code_hook_specification: Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        :param str invocation_label: Label that indicates the dialog step from which the dialog code hook is happening.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "enable_code_hook_invocation", enable_code_hook_invocation)
        pulumi.set(__self__, "post_code_hook_specification", post_code_hook_specification)
        if invocation_label is not None:
            pulumi.set(__self__, "invocation_label", invocation_label)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a dialog code hook is used when the intent is activated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="enableCodeHookInvocation")
    def enable_code_hook_invocation(self) -> bool:
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        return pulumi.get(self, "enable_code_hook_invocation")

    @property
    @pulumi.getter(name="postCodeHookSpecification")
    def post_code_hook_specification(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification':
        """
        Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        """
        return pulumi.get(self, "post_code_hook_specification")

    @property
    @pulumi.getter(name="invocationLabel")
    def invocation_label(self) -> Optional[str]:
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
        return pulumi.get(self, "invocation_label")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureConditional":
            suggest = "failure_conditional"
        elif key == "failureNextStep":
            suggest = "failure_next_step"
        elif key == "failureResponse":
            suggest = "failure_response"
        elif key == "successConditional":
            suggest = "success_conditional"
        elif key == "successNextStep":
            suggest = "success_next_step"
        elif key == "successResponse":
            suggest = "success_response"
        elif key == "timeoutConditional":
            suggest = "timeout_conditional"
        elif key == "timeoutNextStep":
            suggest = "timeout_next_step"
        elif key == "timeoutResponse":
            suggest = "timeout_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_conditional: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional'] = None,
                 failure_next_step: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep'] = None,
                 failure_response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse'] = None,
                 success_conditional: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional'] = None,
                 success_next_step: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep'] = None,
                 success_response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse'] = None,
                 timeout_conditional: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional'] = None,
                 timeout_next_step: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep'] = None,
                 timeout_response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs' failure_conditional: Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs' failure_next_step: Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgs' failure_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs' success_conditional: Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs' success_next_step: Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs' success_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs' timeout_conditional: Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs' timeout_next_step: Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs' timeout_response: Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if success_conditional is not None:
            pulumi.set(__self__, "success_conditional", success_conditional)
        if success_next_step is not None:
            pulumi.set(__self__, "success_next_step", success_next_step)
        if success_response is not None:
            pulumi.set(__self__, "success_response", success_response)
        if timeout_conditional is not None:
            pulumi.set(__self__, "timeout_conditional", timeout_conditional)
        if timeout_next_step is not None:
            pulumi.set(__self__, "timeout_next_step", timeout_next_step)
        if timeout_response is not None:
            pulumi.set(__self__, "timeout_response", timeout_response)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional']:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        """
        return pulumi.get(self, "failure_conditional")

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep']:
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        """
        return pulumi.get(self, "failure_next_step")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="successConditional")
    def success_conditional(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional']:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        return pulumi.get(self, "success_conditional")

    @property
    @pulumi.getter(name="successNextStep")
    def success_next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep']:
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        return pulumi.get(self, "success_next_step")

    @property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        return pulumi.get(self, "success_response")

    @property
    @pulumi.getter(name="timeoutConditional")
    def timeout_conditional(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional']:
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        return pulumi.get(self, "timeout_conditional")

    @property
    @pulumi.getter(name="timeoutNextStep")
    def timeout_next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep']:
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        return pulumi.get(self, "timeout_next_step")

    @property
    @pulumi.getter(name="timeoutResponse")
    def timeout_response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        return pulumi.get(self, "timeout_response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingElicitationCodeHook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCodeHookInvocation":
            suggest = "enable_code_hook_invocation"
        elif key == "invocationLabel":
            suggest = "invocation_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingElicitationCodeHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingElicitationCodeHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingElicitationCodeHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_code_hook_invocation: Optional[bool] = None,
                 invocation_label: Optional[str] = None):
        """
        :param bool enable_code_hook_invocation: Whether a Lambda function should be invoked for the dialog.
        :param str invocation_label: Label that indicates the dialog step from which the dialog code hook is happening.
        """
        if enable_code_hook_invocation is not None:
            pulumi.set(__self__, "enable_code_hook_invocation", enable_code_hook_invocation)
        if invocation_label is not None:
            pulumi.set(__self__, "invocation_label", invocation_label)

    @property
    @pulumi.getter(name="enableCodeHookInvocation")
    def enable_code_hook_invocation(self) -> Optional[bool]:
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        return pulumi.get(self, "enable_code_hook_invocation")

    @property
    @pulumi.getter(name="invocationLabel")
    def invocation_label(self) -> Optional[str]:
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
        return pulumi.get(self, "invocation_label")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentConfirmationSettingFailureNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentConfirmationSettingFailureNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentConfirmationSettingFailureNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRetries":
            suggest = "max_retries"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"
        elif key == "messageSelectionStrategy":
            suggest = "message_selection_strategy"
        elif key == "promptAttemptsSpecifications":
            suggest = "prompt_attempts_specifications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_retries: int,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroup']] = None,
                 message_selection_strategy: Optional[str] = None,
                 prompt_attempts_specifications: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification']] = None):
        """
        :param int max_retries: Maximum number of times the bot tries to elicit a response from the user using this prompt.
        :param bool allow_interrupt: Whether the user can interrupt a speech prompt from the bot.
        :param Sequence['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgs'] message_groups: Configuration block for messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime. See `message_group`.
        :param str message_selection_strategy: How a message is selected from a message group among retries. Valid values are `Random` and `Ordered`.
        :param Sequence['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgs'] prompt_attempts_specifications: Configuration block for advanced settings on each attempt of the prompt. See `prompt_attempts_specification`.
        """
        pulumi.set(__self__, "max_retries", max_retries)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)
        if message_selection_strategy is not None:
            pulumi.set(__self__, "message_selection_strategy", message_selection_strategy)
        if prompt_attempts_specifications is not None:
            pulumi.set(__self__, "prompt_attempts_specifications", prompt_attempts_specifications)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> int:
        """
        Maximum number of times the bot tries to elicit a response from the user using this prompt.
        """
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech prompt from the bot.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroup']]:
        """
        Configuration block for messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @property
    @pulumi.getter(name="messageSelectionStrategy")
    def message_selection_strategy(self) -> Optional[str]:
        """
        How a message is selected from a message group among retries. Valid values are `Random` and `Ordered`.
        """
        return pulumi.get(self, "message_selection_strategy")

    @property
    @pulumi.getter(name="promptAttemptsSpecifications")
    def prompt_attempts_specifications(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification']]:
        """
        Configuration block for advanced settings on each attempt of the prompt. See `prompt_attempts_specification`.
        """
        return pulumi.get(self, "prompt_attempts_specifications")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedInputTypes":
            suggest = "allowed_input_types"
        elif key == "mapBlockKey":
            suggest = "map_block_key"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "audioAndDtmfInputSpecification":
            suggest = "audio_and_dtmf_input_specification"
        elif key == "textInputSpecification":
            suggest = "text_input_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_input_types: 'outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes',
                 map_block_key: str,
                 allow_interrupt: Optional[bool] = None,
                 audio_and_dtmf_input_specification: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification'] = None,
                 text_input_specification: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification'] = None):
        """
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs' allowed_input_types: Configuration block for the allowed input types of the prompt attempt. See `allowed_input_types`.
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param bool allow_interrupt: Whether the user can interrupt a speech prompt attempt from the bot.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs' audio_and_dtmf_input_specification: Configuration block for settings on audio and DTMF input. See `audio_and_dtmf_input_specification`.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs' text_input_specification: Configuration block for the settings on text input. See `text_input_specification`.
        """
        pulumi.set(__self__, "allowed_input_types", allowed_input_types)
        pulumi.set(__self__, "map_block_key", map_block_key)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if audio_and_dtmf_input_specification is not None:
            pulumi.set(__self__, "audio_and_dtmf_input_specification", audio_and_dtmf_input_specification)
        if text_input_specification is not None:
            pulumi.set(__self__, "text_input_specification", text_input_specification)

    @property
    @pulumi.getter(name="allowedInputTypes")
    def allowed_input_types(self) -> 'outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes':
        """
        Configuration block for the allowed input types of the prompt attempt. See `allowed_input_types`.
        """
        return pulumi.get(self, "allowed_input_types")

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech prompt attempt from the bot.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="audioAndDtmfInputSpecification")
    def audio_and_dtmf_input_specification(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification']:
        """
        Configuration block for settings on audio and DTMF input. See `audio_and_dtmf_input_specification`.
        """
        return pulumi.get(self, "audio_and_dtmf_input_specification")

    @property
    @pulumi.getter(name="textInputSpecification")
    def text_input_specification(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification']:
        """
        Configuration block for the settings on text input. See `text_input_specification`.
        """
        return pulumi.get(self, "text_input_specification")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAudioInput":
            suggest = "allow_audio_input"
        elif key == "allowDtmfInput":
            suggest = "allow_dtmf_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_audio_input: bool,
                 allow_dtmf_input: bool):
        """
        :param bool allow_audio_input: Whether audio input is allowed.
        :param bool allow_dtmf_input: Whether DTMF input is allowed.
        """
        pulumi.set(__self__, "allow_audio_input", allow_audio_input)
        pulumi.set(__self__, "allow_dtmf_input", allow_dtmf_input)

    @property
    @pulumi.getter(name="allowAudioInput")
    def allow_audio_input(self) -> bool:
        """
        Whether audio input is allowed.
        """
        return pulumi.get(self, "allow_audio_input")

    @property
    @pulumi.getter(name="allowDtmfInput")
    def allow_dtmf_input(self) -> bool:
        """
        Whether DTMF input is allowed.
        """
        return pulumi.get(self, "allow_dtmf_input")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeoutMs":
            suggest = "start_timeout_ms"
        elif key == "audioSpecification":
            suggest = "audio_specification"
        elif key == "dtmfSpecification":
            suggest = "dtmf_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_timeout_ms: int,
                 audio_specification: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification'] = None,
                 dtmf_specification: Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification'] = None):
        """
        :param int start_timeout_ms: Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs' audio_specification: Configuration block for the settings on audio input. See `audio_specification`.
        :param 'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs' dtmf_specification: Configuration block for the settings on DTMF input. See `dtmf_specification`.
        """
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)
        if audio_specification is not None:
            pulumi.set(__self__, "audio_specification", audio_specification)
        if dtmf_specification is not None:
            pulumi.set(__self__, "dtmf_specification", dtmf_specification)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> int:
        """
        Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
        """
        return pulumi.get(self, "start_timeout_ms")

    @property
    @pulumi.getter(name="audioSpecification")
    def audio_specification(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification']:
        """
        Configuration block for the settings on audio input. See `audio_specification`.
        """
        return pulumi.get(self, "audio_specification")

    @property
    @pulumi.getter(name="dtmfSpecification")
    def dtmf_specification(self) -> Optional['outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification']:
        """
        Configuration block for the settings on DTMF input. See `dtmf_specification`.
        """
        return pulumi.get(self, "dtmf_specification")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeoutMs":
            suggest = "end_timeout_ms"
        elif key == "maxLengthMs":
            suggest = "max_length_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_timeout_ms: int,
                 max_length_ms: int):
        """
        :param int end_timeout_ms: Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
        :param int max_length_ms: Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
        """
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length_ms", max_length_ms)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> int:
        """
        Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
        """
        return pulumi.get(self, "end_timeout_ms")

    @property
    @pulumi.getter(name="maxLengthMs")
    def max_length_ms(self) -> int:
        """
        Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
        """
        return pulumi.get(self, "max_length_ms")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deletionCharacter":
            suggest = "deletion_character"
        elif key == "endCharacter":
            suggest = "end_character"
        elif key == "endTimeoutMs":
            suggest = "end_timeout_ms"
        elif key == "maxLength":
            suggest = "max_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deletion_character: str,
                 end_character: str,
                 end_timeout_ms: int,
                 max_length: int):
        """
        :param str deletion_character: DTMF character that clears the accumulated DTMF digits and immediately ends the input.
        :param str end_character: DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
        :param int end_timeout_ms: How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
        :param int max_length: Maximum number of DTMF digits allowed in an utterance.
        """
        pulumi.set(__self__, "deletion_character", deletion_character)
        pulumi.set(__self__, "end_character", end_character)
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length", max_length)

    @property
    @pulumi.getter(name="deletionCharacter")
    def deletion_character(self) -> str:
        """
        DTMF character that clears the accumulated DTMF digits and immediately ends the input.
        """
        return pulumi.get(self, "deletion_character")

    @property
    @pulumi.getter(name="endCharacter")
    def end_character(self) -> str:
        """
        DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
        """
        return pulumi.get(self, "end_character")

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> int:
        """
        How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
        """
        return pulumi.get(self, "end_timeout_ms")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> int:
        """
        Maximum number of DTMF digits allowed in an utterance.
        """
        return pulumi.get(self, "max_length")


@pulumi.output_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeoutMs":
            suggest = "start_timeout_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_timeout_ms: int):
        """
        :param int start_timeout_ms: Time for which a bot waits before re-prompting a customer for text input.
        """
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> int:
        """
        Time for which a bot waits before re-prompting a customer for text input.
        """
        return pulumi.get(self, "start_timeout_ms")


@pulumi.output_type
class V2modelsIntentDialogCodeHook(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: Enables the dialog code hook so that it processes user requests.
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enables the dialog code hook so that it processes user requests.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fulfillmentUpdatesSpecification":
            suggest = "fulfillment_updates_specification"
        elif key == "postFulfillmentStatusSpecification":
            suggest = "post_fulfillment_status_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 active: Optional[bool] = None,
                 fulfillment_updates_specification: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification'] = None,
                 post_fulfillment_status_specification: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification'] = None):
        """
        :param bool enabled: Whether a Lambda function should be invoked to fulfill a specific intent.
        :param bool active: Whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgs' fulfillment_updates_specification: Configuration block for settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations. See `fulfillment_updates_specification`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgs' post_fulfillment_status_specification: Configuration block for settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations. See `post_fulfillment_status_specification`.
        """
        pulumi.set(__self__, "enabled", enabled)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if fulfillment_updates_specification is not None:
            pulumi.set(__self__, "fulfillment_updates_specification", fulfillment_updates_specification)
        if post_fulfillment_status_specification is not None:
            pulumi.set(__self__, "post_fulfillment_status_specification", post_fulfillment_status_specification)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether a Lambda function should be invoked to fulfill a specific intent.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="fulfillmentUpdatesSpecification")
    def fulfillment_updates_specification(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification']:
        """
        Configuration block for settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations. See `fulfillment_updates_specification`.
        """
        return pulumi.get(self, "fulfillment_updates_specification")

    @property
    @pulumi.getter(name="postFulfillmentStatusSpecification")
    def post_fulfillment_status_specification(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification']:
        """
        Configuration block for settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations. See `post_fulfillment_status_specification`.
        """
        return pulumi.get(self, "post_fulfillment_status_specification")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startResponse":
            suggest = "start_response"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"
        elif key == "updateResponse":
            suggest = "update_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 start_response: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse'] = None,
                 timeout_in_seconds: Optional[int] = None,
                 update_response: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse'] = None):
        """
        :param bool active: Whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the active field is set to true, the `start_response`, `update_response`, and `timeout_in_seconds` fields are required.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgs' start_response: Configuration block for the message sent to users when the fulfillment Lambda functions starts running.
        :param int timeout_in_seconds: Length of time that the fulfillment Lambda function should run before it times out.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgs' update_response: Configuration block for messages sent periodically to the user while the fulfillment Lambda function is running.
        """
        pulumi.set(__self__, "active", active)
        if start_response is not None:
            pulumi.set(__self__, "start_response", start_response)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if update_response is not None:
            pulumi.set(__self__, "update_response", update_response)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the active field is set to true, the `start_response`, `update_response`, and `timeout_in_seconds` fields are required.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="startResponse")
    def start_response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse']:
        """
        Configuration block for the message sent to users when the fulfillment Lambda functions starts running.
        """
        return pulumi.get(self, "start_response")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        """
        Length of time that the fulfillment Lambda function should run before it times out.
        """
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="updateResponse")
    def update_response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse']:
        """
        Configuration block for messages sent periodically to the user while the fulfillment Lambda function is running.
        """
        return pulumi.get(self, "update_response")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "delayInSeconds":
            suggest = "delay_in_seconds"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 delay_in_seconds: Optional[int] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt the start message while it is playing.
        :param int delay_in_seconds: Delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
        :param Sequence['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgs'] message_groups: Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if delay_in_seconds is not None:
            pulumi.set(__self__, "delay_in_seconds", delay_in_seconds)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt the start message while it is playing.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="delayInSeconds")
    def delay_in_seconds(self) -> Optional[int]:
        """
        Delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
        """
        return pulumi.get(self, "delay_in_seconds")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroup']]:
        """
        Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "frequencyInSeconds":
            suggest = "frequency_in_seconds"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frequency_in_seconds: int,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroup']] = None):
        """
        :param int frequency_in_seconds: Frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
        :param bool allow_interrupt: Whether the user can interrupt the start message while it is playing.
        :param Sequence['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgs'] message_groups: Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
        pulumi.set(__self__, "frequency_in_seconds", frequency_in_seconds)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="frequencyInSeconds")
    def frequency_in_seconds(self) -> int:
        """
        Frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
        """
        return pulumi.get(self, "frequency_in_seconds")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt the start message while it is playing.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroup']]:
        """
        Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureConditional":
            suggest = "failure_conditional"
        elif key == "failureNextStep":
            suggest = "failure_next_step"
        elif key == "failureResponse":
            suggest = "failure_response"
        elif key == "successConditional":
            suggest = "success_conditional"
        elif key == "successNextStep":
            suggest = "success_next_step"
        elif key == "successResponse":
            suggest = "success_response"
        elif key == "timeoutConditional":
            suggest = "timeout_conditional"
        elif key == "timeoutNextStep":
            suggest = "timeout_next_step"
        elif key == "timeoutResponse":
            suggest = "timeout_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_conditional: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional'] = None,
                 failure_next_step: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep'] = None,
                 failure_response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse'] = None,
                 success_conditional: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional'] = None,
                 success_next_step: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep'] = None,
                 success_response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse'] = None,
                 timeout_conditional: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional'] = None,
                 timeout_next_step: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep'] = None,
                 timeout_response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgs' failure_conditional: Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_conditional`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgs' failure_next_step: Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgs' failure_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgs' success_conditional: Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgs' success_next_step: Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgs' success_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgs' timeout_conditional: Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgs' timeout_next_step: Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgs' timeout_response: Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if success_conditional is not None:
            pulumi.set(__self__, "success_conditional", success_conditional)
        if success_next_step is not None:
            pulumi.set(__self__, "success_next_step", success_next_step)
        if success_response is not None:
            pulumi.set(__self__, "success_response", success_response)
        if timeout_conditional is not None:
            pulumi.set(__self__, "timeout_conditional", timeout_conditional)
        if timeout_next_step is not None:
            pulumi.set(__self__, "timeout_next_step", timeout_next_step)
        if timeout_response is not None:
            pulumi.set(__self__, "timeout_response", timeout_response)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional']:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_conditional`.
        """
        return pulumi.get(self, "failure_conditional")

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep']:
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_next_step`.
        """
        return pulumi.get(self, "failure_next_step")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="successConditional")
    def success_conditional(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional']:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        return pulumi.get(self, "success_conditional")

    @property
    @pulumi.getter(name="successNextStep")
    def success_next_step(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep']:
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        return pulumi.get(self, "success_next_step")

    @property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        return pulumi.get(self, "success_response")

    @property
    @pulumi.getter(name="timeoutConditional")
    def timeout_conditional(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional']:
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        return pulumi.get(self, "timeout_conditional")

    @property
    @pulumi.getter(name="timeoutNextStep")
    def timeout_next_step(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep']:
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        return pulumi.get(self, "timeout_next_step")

    @property
    @pulumi.getter(name="timeoutResponse")
    def timeout_response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        return pulumi.get(self, "timeout_response")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeHook":
            suggest = "code_hook"
        elif key == "initialResponse":
            suggest = "initial_response"
        elif key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_hook: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHook'] = None,
                 conditional: Optional['outputs.V2modelsIntentInitialResponseSettingConditional'] = None,
                 initial_response: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponse'] = None,
                 next_step: Optional['outputs.V2modelsIntentInitialResponseSettingNextStep'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookArgs' code_hook: Configuration block for the dialog code hook that is called by Amazon Lex at a step of the conversation. See `code_hook`.
        :param 'V2modelsIntentInitialResponseSettingConditionalArgs' conditional: Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `conditional`.
        :param 'V2modelsIntentInitialResponseSettingInitialResponseArgs' initial_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `initial_response`.
        :param 'V2modelsIntentInitialResponseSettingNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        """
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)
        if conditional is not None:
            pulumi.set(__self__, "conditional", conditional)
        if initial_response is not None:
            pulumi.set(__self__, "initial_response", initial_response)
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHook']:
        """
        Configuration block for the dialog code hook that is called by Amazon Lex at a step of the conversation. See `code_hook`.
        """
        return pulumi.get(self, "code_hook")

    @property
    @pulumi.getter
    def conditional(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditional']:
        """
        Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `conditional`.
        """
        return pulumi.get(self, "conditional")

    @property
    @pulumi.getter(name="initialResponse")
    def initial_response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `initial_response`.
        """
        return pulumi.get(self, "initial_response")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCodeHookInvocation":
            suggest = "enable_code_hook_invocation"
        elif key == "postCodeHookSpecification":
            suggest = "post_code_hook_specification"
        elif key == "invocationLabel":
            suggest = "invocation_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 enable_code_hook_invocation: bool,
                 post_code_hook_specification: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification',
                 invocation_label: Optional[str] = None):
        """
        :param bool active: Whether a dialog code hook is used when the intent is activated.
        :param bool enable_code_hook_invocation: Whether a Lambda function should be invoked for the dialog.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgs' post_code_hook_specification: Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        :param str invocation_label: Label that indicates the dialog step from which the dialog code hook is happening.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "enable_code_hook_invocation", enable_code_hook_invocation)
        pulumi.set(__self__, "post_code_hook_specification", post_code_hook_specification)
        if invocation_label is not None:
            pulumi.set(__self__, "invocation_label", invocation_label)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a dialog code hook is used when the intent is activated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="enableCodeHookInvocation")
    def enable_code_hook_invocation(self) -> bool:
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        return pulumi.get(self, "enable_code_hook_invocation")

    @property
    @pulumi.getter(name="postCodeHookSpecification")
    def post_code_hook_specification(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification':
        """
        Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        """
        return pulumi.get(self, "post_code_hook_specification")

    @property
    @pulumi.getter(name="invocationLabel")
    def invocation_label(self) -> Optional[str]:
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
        return pulumi.get(self, "invocation_label")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureConditional":
            suggest = "failure_conditional"
        elif key == "failureNextStep":
            suggest = "failure_next_step"
        elif key == "failureResponse":
            suggest = "failure_response"
        elif key == "successConditional":
            suggest = "success_conditional"
        elif key == "successNextStep":
            suggest = "success_next_step"
        elif key == "successResponse":
            suggest = "success_response"
        elif key == "timeoutConditional":
            suggest = "timeout_conditional"
        elif key == "timeoutNextStep":
            suggest = "timeout_next_step"
        elif key == "timeoutResponse":
            suggest = "timeout_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_conditional: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional'] = None,
                 failure_next_step: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep'] = None,
                 failure_response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse'] = None,
                 success_conditional: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional'] = None,
                 success_next_step: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep'] = None,
                 success_response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse'] = None,
                 timeout_conditional: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional'] = None,
                 timeout_next_step: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep'] = None,
                 timeout_response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs' failure_conditional: Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs' failure_next_step: Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgs' failure_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs' success_conditional: Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs' success_next_step: Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs' success_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs' timeout_conditional: Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs' timeout_next_step: Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs' timeout_response: Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if success_conditional is not None:
            pulumi.set(__self__, "success_conditional", success_conditional)
        if success_next_step is not None:
            pulumi.set(__self__, "success_next_step", success_next_step)
        if success_response is not None:
            pulumi.set(__self__, "success_response", success_response)
        if timeout_conditional is not None:
            pulumi.set(__self__, "timeout_conditional", timeout_conditional)
        if timeout_next_step is not None:
            pulumi.set(__self__, "timeout_next_step", timeout_next_step)
        if timeout_response is not None:
            pulumi.set(__self__, "timeout_response", timeout_response)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional']:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        """
        return pulumi.get(self, "failure_conditional")

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep']:
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        """
        return pulumi.get(self, "failure_next_step")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="successConditional")
    def success_conditional(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional']:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        return pulumi.get(self, "success_conditional")

    @property
    @pulumi.getter(name="successNextStep")
    def success_next_step(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep']:
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        return pulumi.get(self, "success_next_step")

    @property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse']:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        return pulumi.get(self, "success_response")

    @property
    @pulumi.getter(name="timeoutConditional")
    def timeout_conditional(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional']:
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        return pulumi.get(self, "timeout_conditional")

    @property
    @pulumi.getter(name="timeoutNextStep")
    def timeout_next_step(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep']:
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        return pulumi.get(self, "timeout_next_step")

    @property
    @pulumi.getter(name="timeoutResponse")
    def timeout_response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        return pulumi.get(self, "timeout_response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditional(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "conditionalBranches":
            suggest = "conditional_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditional. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditional.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditional.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 default_branch: 'outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranch',
                 conditional_branches: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranch']] = None):
        """
        :param bool active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgs' default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgs'] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranch':
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranch']]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition',
                 name: str,
                 next_step: 'outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep',
                 response: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgs' condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param str name: Name of the branch.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition':
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep':
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: str):
        """
        :param str expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> str:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep'] = None,
                 response: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgs' next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgs' response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse']:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingInitialResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroup']] = None):
        """
        :param bool allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param Sequence['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgs'] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroup']]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation']] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgs' message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param Sequence['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgs'] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage':
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation']]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayload'] = None,
                 image_response_card: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessage'] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgs' custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgs' image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgs' plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param 'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgs' ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayload']:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard']:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessage']:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessage']:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayload(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        """
        :param str title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param Sequence['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgs'] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param str image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param str subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButton']]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        """
        :param str text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param str value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingNextStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingNextStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingNextStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingNextStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.V2modelsIntentInitialResponseSettingNextStepDialogAction'] = None,
                 intent: Optional['outputs.V2modelsIntentInitialResponseSettingNextStepIntent'] = None,
                 session_attributes: Optional[Mapping[str, str]] = None):
        """
        :param 'V2modelsIntentInitialResponseSettingNextStepDialogActionArgs' dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param 'V2modelsIntentInitialResponseSettingNextStepIntentArgs' intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param Mapping[str, str] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingNextStepDialogAction']:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingNextStepIntent']:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingNextStepDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingNextStepDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingNextStepDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingNextStepDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 slot_to_elicit: Optional[str] = None,
                 suppress_next_message: Optional[bool] = None):
        """
        :param str type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param str slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param bool suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[str]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[bool]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingNextStepIntent(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 slots: Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingNextStepIntentSlot']] = None):
        """
        :param str name: Name of the intent.
        :param Sequence['V2modelsIntentInitialResponseSettingNextStepIntentSlotArgs'] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.V2modelsIntentInitialResponseSettingNextStepIntentSlot']]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingNextStepIntentSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapBlockKey":
            suggest = "map_block_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingNextStepIntentSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingNextStepIntentSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingNextStepIntentSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_block_key: str,
                 shape: Optional[str] = None,
                 value: Optional['outputs.V2modelsIntentInitialResponseSettingNextStepIntentSlotValue'] = None):
        """
        :param str map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param str shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param 'V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgs' value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.V2modelsIntentInitialResponseSettingNextStepIntentSlotValue']:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsIntentInitialResponseSettingNextStepIntentSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentInitialResponseSettingNextStepIntentSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentInitialResponseSettingNextStepIntentSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentInitialResponseSettingNextStepIntentSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[str] = None):
        """
        :param str interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[str]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class V2modelsIntentInputContext(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Name of the context.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the context.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class V2modelsIntentKendraConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kendraIndex":
            suggest = "kendra_index"
        elif key == "queryFilterString":
            suggest = "query_filter_string"
        elif key == "queryFilterStringEnabled":
            suggest = "query_filter_string_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentKendraConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentKendraConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentKendraConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kendra_index: str,
                 query_filter_string: Optional[str] = None,
                 query_filter_string_enabled: Optional[bool] = None):
        """
        :param str kendra_index: ARN of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        :param str query_filter_string: Query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html).
        :param bool query_filter_string_enabled: Whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
        """
        pulumi.set(__self__, "kendra_index", kendra_index)
        if query_filter_string is not None:
            pulumi.set(__self__, "query_filter_string", query_filter_string)
        if query_filter_string_enabled is not None:
            pulumi.set(__self__, "query_filter_string_enabled", query_filter_string_enabled)

    @property
    @pulumi.getter(name="kendraIndex")
    def kendra_index(self) -> str:
        """
        ARN of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        """
        return pulumi.get(self, "kendra_index")

    @property
    @pulumi.getter(name="queryFilterString")
    def query_filter_string(self) -> Optional[str]:
        """
        Query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html).
        """
        return pulumi.get(self, "query_filter_string")

    @property
    @pulumi.getter(name="queryFilterStringEnabled")
    def query_filter_string_enabled(self) -> Optional[bool]:
        """
        Whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
        """
        return pulumi.get(self, "query_filter_string_enabled")


@pulumi.output_type
class V2modelsIntentOutputContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeToLiveInSeconds":
            suggest = "time_to_live_in_seconds"
        elif key == "turnsToLive":
            suggest = "turns_to_live"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentOutputContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentOutputContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentOutputContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 time_to_live_in_seconds: int,
                 turns_to_live: int):
        """
        :param str name: Name of the output context.
        :param int time_to_live_in_seconds: Amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.
        :param int turns_to_live: Number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        pulumi.set(__self__, "turns_to_live", turns_to_live)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the output context.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> int:
        """
        Amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.
        """
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter(name="turnsToLive")
    def turns_to_live(self) -> int:
        """
        Number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.
        """
        return pulumi.get(self, "turns_to_live")


@pulumi.output_type
class V2modelsIntentSampleUtterance(dict):
    def __init__(__self__, *,
                 utterance: str):
        """
        :param str utterance: Sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
        pulumi.set(__self__, "utterance", utterance)

    @property
    @pulumi.getter
    def utterance(self) -> str:
        """
        Sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
        return pulumi.get(self, "utterance")


@pulumi.output_type
class V2modelsIntentSlotPriority(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotId":
            suggest = "slot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsIntentSlotPriority. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsIntentSlotPriority.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsIntentSlotPriority.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 priority: int,
                 slot_id: str):
        """
        :param int priority: Priority that Amazon Lex should apply to the slot.
        :param str slot_id: Unique identifier of the slot.
        """
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "slot_id", slot_id)

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority that Amazon Lex should apply to the slot.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="slotId")
    def slot_id(self) -> str:
        """
        Unique identifier of the slot.
        """
        return pulumi.get(self, "slot_id")


@pulumi.output_type
class V2modelsIntentTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class V2modelsSlotMultipleValuesSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowMultipleValues":
            suggest = "allow_multiple_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotMultipleValuesSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotMultipleValuesSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotMultipleValuesSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_multiple_values: Optional[bool] = None):
        """
        :param bool allow_multiple_values: Whether a slot can return multiple values. When `true`, the slot may return more than one value in a response. When `false`, the slot returns only a single value. Multi-value slots are only available in the `en-US` locale.
        """
        if allow_multiple_values is not None:
            pulumi.set(__self__, "allow_multiple_values", allow_multiple_values)

    @property
    @pulumi.getter(name="allowMultipleValues")
    def allow_multiple_values(self) -> Optional[bool]:
        """
        Whether a slot can return multiple values. When `true`, the slot may return more than one value in a response. When `false`, the slot returns only a single value. Multi-value slots are only available in the `en-US` locale.
        """
        return pulumi.get(self, "allow_multiple_values")


@pulumi.output_type
class V2modelsSlotObfuscationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "obfuscationSettingType":
            suggest = "obfuscation_setting_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotObfuscationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotObfuscationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotObfuscationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 obfuscation_setting_type: str):
        """
        :param str obfuscation_setting_type: Whether Amazon Lex obscures slot values in conversation logs. Valid values are `DefaultObfuscation` and `None`.
        """
        pulumi.set(__self__, "obfuscation_setting_type", obfuscation_setting_type)

    @property
    @pulumi.getter(name="obfuscationSettingType")
    def obfuscation_setting_type(self) -> str:
        """
        Whether Amazon Lex obscures slot values in conversation logs. Valid values are `DefaultObfuscation` and `None`.
        """
        return pulumi.get(self, "obfuscation_setting_type")


@pulumi.output_type
class V2modelsSlotTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class V2modelsSlotTypeCompositeSlotTypeSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subSlots":
            suggest = "sub_slots"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotTypeCompositeSlotTypeSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotTypeCompositeSlotTypeSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotTypeCompositeSlotTypeSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sub_slots: Sequence[Any]):
        """
        :param Sequence[Any] sub_slots: Subslots in the composite slot. Contains filtered or unexported fields. See [`sub_slot_type_composition` argument reference] below.
        """
        pulumi.set(__self__, "sub_slots", sub_slots)

    @property
    @pulumi.getter(name="subSlots")
    def sub_slots(self) -> Sequence[Any]:
        """
        Subslots in the composite slot. Contains filtered or unexported fields. See [`sub_slot_type_composition` argument reference] below.
        """
        return pulumi.get(self, "sub_slots")


@pulumi.output_type
class V2modelsSlotTypeExternalSourceSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grammarSlotTypeSetting":
            suggest = "grammar_slot_type_setting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotTypeExternalSourceSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotTypeExternalSourceSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotTypeExternalSourceSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grammar_slot_type_setting: Optional['outputs.V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSetting'] = None):
        """
        :param 'V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgs' grammar_slot_type_setting: Settings required for a slot type based on a grammar that you provide. See `grammar_slot_type_setting` argument reference below.
        """
        if grammar_slot_type_setting is not None:
            pulumi.set(__self__, "grammar_slot_type_setting", grammar_slot_type_setting)

    @property
    @pulumi.getter(name="grammarSlotTypeSetting")
    def grammar_slot_type_setting(self) -> Optional['outputs.V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSetting']:
        """
        Settings required for a slot type based on a grammar that you provide. See `grammar_slot_type_setting` argument reference below.
        """
        return pulumi.get(self, "grammar_slot_type_setting")


@pulumi.output_type
class V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSetting(dict):
    def __init__(__self__, *,
                 source: Optional['outputs.V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource'] = None):
        """
        :param 'V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgs' source: Source of the grammar used to create the slot type. See `grammar_slot_type_source` argument reference below.
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource']:
        """
        Source of the grammar used to create the slot type. See `grammar_slot_type_source` argument reference below.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyArn":
            suggest = "kms_key_arn"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3ObjectKey":
            suggest = "s3_object_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_arn: str,
                 s3_bucket_name: str,
                 s3_object_key: str):
        """
        :param str kms_key_arn: KMS key required to decrypt the contents of the grammar, if any.
        :param str s3_bucket_name: Name of the Amazon S3 bucket that contains the grammar source.
        :param str s3_object_key: Path to the grammar in the Amazon S3 bucket.
        """
        pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_object_key", s3_object_key)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> str:
        """
        KMS key required to decrypt the contents of the grammar, if any.
        """
        return pulumi.get(self, "kms_key_arn")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        """
        Name of the Amazon S3 bucket that contains the grammar source.
        """
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3ObjectKey")
    def s3_object_key(self) -> str:
        """
        Path to the grammar in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_object_key")


@pulumi.output_type
class V2modelsSlotTypeSlotTypeValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotTypeValues":
            suggest = "slot_type_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotTypeSlotTypeValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotTypeSlotTypeValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotTypeSlotTypeValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 slot_type_values: Sequence[Any],
                 synonyms: Optional[Sequence['outputs.V2modelsSlotTypeSlotTypeValuesSynonym']] = None):
        """
        :param Sequence[Any] slot_type_values: List of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot. See `slot_type_values` argument reference below.
        :param Sequence['V2modelsSlotTypeSlotTypeValuesSynonymArgs'] synonyms: Additional values related to the slot type entry. See `sample_value` argument reference below.
        """
        pulumi.set(__self__, "slot_type_values", slot_type_values)
        if synonyms is not None:
            pulumi.set(__self__, "synonyms", synonyms)

    @property
    @pulumi.getter(name="slotTypeValues")
    def slot_type_values(self) -> Sequence[Any]:
        """
        List of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot. See `slot_type_values` argument reference below.
        """
        return pulumi.get(self, "slot_type_values")

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[Sequence['outputs.V2modelsSlotTypeSlotTypeValuesSynonym']]:
        """
        Additional values related to the slot type entry. See `sample_value` argument reference below.
        """
        return pulumi.get(self, "synonyms")


@pulumi.output_type
class V2modelsSlotTypeSlotTypeValuesSynonym(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: Value that can be used for a slot type.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value that can be used for a slot type.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotTypeTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class V2modelsSlotTypeValueSelectionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resolutionStrategy":
            suggest = "resolution_strategy"
        elif key == "advancedRecognitionSettings":
            suggest = "advanced_recognition_settings"
        elif key == "regexFilters":
            suggest = "regex_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotTypeValueSelectionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotTypeValueSelectionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotTypeValueSelectionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resolution_strategy: str,
                 advanced_recognition_settings: Optional[Sequence['outputs.V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting']] = None,
                 regex_filters: Optional[Sequence['outputs.V2modelsSlotTypeValueSelectionSettingRegexFilter']] = None):
        """
        :param str resolution_strategy: Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don't specify the valueSelectionStrategy , the default is `ORIGINAL_VALUE`. Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
        :param Sequence['V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs'] advanced_recognition_settings: Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances. See [`advanced_recognition_setting` argument reference] below.
        :param Sequence['V2modelsSlotTypeValueSelectionSettingRegexFilterArgs'] regex_filters: Used to validate the value of the slot. See [`regex_filter` argument reference] below.
        """
        pulumi.set(__self__, "resolution_strategy", resolution_strategy)
        if advanced_recognition_settings is not None:
            pulumi.set(__self__, "advanced_recognition_settings", advanced_recognition_settings)
        if regex_filters is not None:
            pulumi.set(__self__, "regex_filters", regex_filters)

    @property
    @pulumi.getter(name="resolutionStrategy")
    def resolution_strategy(self) -> str:
        """
        Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don't specify the valueSelectionStrategy , the default is `ORIGINAL_VALUE`. Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
        """
        return pulumi.get(self, "resolution_strategy")

    @property
    @pulumi.getter(name="advancedRecognitionSettings")
    def advanced_recognition_settings(self) -> Optional[Sequence['outputs.V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting']]:
        """
        Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances. See [`advanced_recognition_setting` argument reference] below.
        """
        return pulumi.get(self, "advanced_recognition_settings")

    @property
    @pulumi.getter(name="regexFilters")
    def regex_filters(self) -> Optional[Sequence['outputs.V2modelsSlotTypeValueSelectionSettingRegexFilter']]:
        """
        Used to validate the value of the slot. See [`regex_filter` argument reference] below.
        """
        return pulumi.get(self, "regex_filters")


@pulumi.output_type
class V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioRecognitionSetting":
            suggest = "audio_recognition_setting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_recognition_setting: Optional[str] = None):
        if audio_recognition_setting is not None:
            pulumi.set(__self__, "audio_recognition_setting", audio_recognition_setting)

    @property
    @pulumi.getter(name="audioRecognitionSetting")
    def audio_recognition_setting(self) -> Optional[str]:
        return pulumi.get(self, "audio_recognition_setting")


@pulumi.output_type
class V2modelsSlotTypeValueSelectionSettingRegexFilter(dict):
    def __init__(__self__, *,
                 pattern: str):
        """
        :param str pattern: Used to validate the value of a slot. Use a standard regular expression. Amazon Lex supports the following characters in the regular expression: A-Z, a-z, 0-9, Unicode characters ("\\⁠u").
               Represent Unicode characters with four digits, for example "\\⁠u0041" or "\\⁠u005A". The following regular expression operators are not supported: Infinite repeaters: *, +, or {x,} with no upper bound, wild card (.)
        """
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        Used to validate the value of a slot. Use a standard regular expression. Amazon Lex supports the following characters in the regular expression: A-Z, a-z, 0-9, Unicode characters ("\\⁠u").
        Represent Unicode characters with four digits, for example "\\⁠u0041" or "\\⁠u005A". The following regular expression operators are not supported: Infinite repeaters: *, +, or {x,} with no upper bound, wild card (.)
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class V2modelsSlotValueElicitationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "promptSpecification":
            suggest = "prompt_specification"
        elif key == "slotConstraint":
            suggest = "slot_constraint"
        elif key == "defaultValueSpecifications":
            suggest = "default_value_specifications"
        elif key == "sampleUtterances":
            suggest = "sample_utterances"
        elif key == "slotResolutionSettings":
            suggest = "slot_resolution_settings"
        elif key == "waitAndContinueSpecifications":
            suggest = "wait_and_continue_specifications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prompt_specification: 'outputs.V2modelsSlotValueElicitationSettingPromptSpecification',
                 slot_constraint: str,
                 default_value_specifications: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingDefaultValueSpecification']] = None,
                 sample_utterances: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingSampleUtterance']] = None,
                 slot_resolution_settings: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingSlotResolutionSetting']] = None,
                 wait_and_continue_specifications: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecification']] = None):
        pulumi.set(__self__, "prompt_specification", prompt_specification)
        pulumi.set(__self__, "slot_constraint", slot_constraint)
        if default_value_specifications is not None:
            pulumi.set(__self__, "default_value_specifications", default_value_specifications)
        if sample_utterances is not None:
            pulumi.set(__self__, "sample_utterances", sample_utterances)
        if slot_resolution_settings is not None:
            pulumi.set(__self__, "slot_resolution_settings", slot_resolution_settings)
        if wait_and_continue_specifications is not None:
            pulumi.set(__self__, "wait_and_continue_specifications", wait_and_continue_specifications)

    @property
    @pulumi.getter(name="promptSpecification")
    def prompt_specification(self) -> 'outputs.V2modelsSlotValueElicitationSettingPromptSpecification':
        return pulumi.get(self, "prompt_specification")

    @property
    @pulumi.getter(name="slotConstraint")
    def slot_constraint(self) -> str:
        return pulumi.get(self, "slot_constraint")

    @property
    @pulumi.getter(name="defaultValueSpecifications")
    def default_value_specifications(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingDefaultValueSpecification']]:
        return pulumi.get(self, "default_value_specifications")

    @property
    @pulumi.getter(name="sampleUtterances")
    def sample_utterances(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingSampleUtterance']]:
        return pulumi.get(self, "sample_utterances")

    @property
    @pulumi.getter(name="slotResolutionSettings")
    def slot_resolution_settings(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingSlotResolutionSetting']]:
        return pulumi.get(self, "slot_resolution_settings")

    @property
    @pulumi.getter(name="waitAndContinueSpecifications")
    def wait_and_continue_specifications(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecification']]:
        return pulumi.get(self, "wait_and_continue_specifications")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingDefaultValueSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValueLists":
            suggest = "default_value_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingDefaultValueSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingDefaultValueSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingDefaultValueSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value_lists: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList']] = None):
        if default_value_lists is not None:
            pulumi.set(__self__, "default_value_lists", default_value_lists)

    @property
    @pulumi.getter(name="defaultValueLists")
    def default_value_lists(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList']]:
        return pulumi.get(self, "default_value_lists")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: str):
        pulumi.set(__self__, "default_value", default_value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRetries":
            suggest = "max_retries"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"
        elif key == "messageSelectionStrategy":
            suggest = "message_selection_strategy"
        elif key == "promptAttemptsSpecifications":
            suggest = "prompt_attempts_specifications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_retries: int,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroup']] = None,
                 message_selection_strategy: Optional[str] = None,
                 prompt_attempts_specifications: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification']] = None):
        pulumi.set(__self__, "max_retries", max_retries)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)
        if message_selection_strategy is not None:
            pulumi.set(__self__, "message_selection_strategy", message_selection_strategy)
        if prompt_attempts_specifications is not None:
            pulumi.set(__self__, "prompt_attempts_specifications", prompt_attempts_specifications)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> int:
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroup']]:
        return pulumi.get(self, "message_groups")

    @property
    @pulumi.getter(name="messageSelectionStrategy")
    def message_selection_strategy(self) -> Optional[str]:
        return pulumi.get(self, "message_selection_strategy")

    @property
    @pulumi.getter(name="promptAttemptsSpecifications")
    def prompt_attempts_specifications(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification']]:
        return pulumi.get(self, "prompt_attempts_specifications")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation']] = None):
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage':
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation']]:
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayloads":
            suggest = "custom_payloads"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payloads: Sequence[Any],
                 image_response_card: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessage'] = None):
        pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Sequence[Any]:
        return pulumi.get(self, "custom_payloads")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayloads":
            suggest = "custom_payloads"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payloads: Sequence[Any],
                 image_response_card: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessage'] = None):
        pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Sequence[Any]:
        return pulumi.get(self, "custom_payloads")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedInputTypes":
            suggest = "allowed_input_types"
        elif key == "mapBlockKey":
            suggest = "map_block_key"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "audioAndDtmfInputSpecification":
            suggest = "audio_and_dtmf_input_specification"
        elif key == "textInputSpecification":
            suggest = "text_input_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_input_types: 'outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes',
                 map_block_key: str,
                 allow_interrupt: Optional[bool] = None,
                 audio_and_dtmf_input_specification: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification'] = None,
                 text_input_specification: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification'] = None):
        pulumi.set(__self__, "allowed_input_types", allowed_input_types)
        pulumi.set(__self__, "map_block_key", map_block_key)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if audio_and_dtmf_input_specification is not None:
            pulumi.set(__self__, "audio_and_dtmf_input_specification", audio_and_dtmf_input_specification)
        if text_input_specification is not None:
            pulumi.set(__self__, "text_input_specification", text_input_specification)

    @property
    @pulumi.getter(name="allowedInputTypes")
    def allowed_input_types(self) -> 'outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes':
        return pulumi.get(self, "allowed_input_types")

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> str:
        return pulumi.get(self, "map_block_key")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="audioAndDtmfInputSpecification")
    def audio_and_dtmf_input_specification(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification']:
        return pulumi.get(self, "audio_and_dtmf_input_specification")

    @property
    @pulumi.getter(name="textInputSpecification")
    def text_input_specification(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification']:
        return pulumi.get(self, "text_input_specification")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAudioInput":
            suggest = "allow_audio_input"
        elif key == "allowDtmfInput":
            suggest = "allow_dtmf_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_audio_input: bool,
                 allow_dtmf_input: bool):
        pulumi.set(__self__, "allow_audio_input", allow_audio_input)
        pulumi.set(__self__, "allow_dtmf_input", allow_dtmf_input)

    @property
    @pulumi.getter(name="allowAudioInput")
    def allow_audio_input(self) -> bool:
        return pulumi.get(self, "allow_audio_input")

    @property
    @pulumi.getter(name="allowDtmfInput")
    def allow_dtmf_input(self) -> bool:
        return pulumi.get(self, "allow_dtmf_input")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeoutMs":
            suggest = "start_timeout_ms"
        elif key == "audioSpecification":
            suggest = "audio_specification"
        elif key == "dtmfSpecification":
            suggest = "dtmf_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_timeout_ms: int,
                 audio_specification: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification'] = None,
                 dtmf_specification: Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification'] = None):
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)
        if audio_specification is not None:
            pulumi.set(__self__, "audio_specification", audio_specification)
        if dtmf_specification is not None:
            pulumi.set(__self__, "dtmf_specification", dtmf_specification)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> int:
        return pulumi.get(self, "start_timeout_ms")

    @property
    @pulumi.getter(name="audioSpecification")
    def audio_specification(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification']:
        return pulumi.get(self, "audio_specification")

    @property
    @pulumi.getter(name="dtmfSpecification")
    def dtmf_specification(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification']:
        return pulumi.get(self, "dtmf_specification")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeoutMs":
            suggest = "end_timeout_ms"
        elif key == "maxLengthMs":
            suggest = "max_length_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_timeout_ms: int,
                 max_length_ms: int):
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length_ms", max_length_ms)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> int:
        return pulumi.get(self, "end_timeout_ms")

    @property
    @pulumi.getter(name="maxLengthMs")
    def max_length_ms(self) -> int:
        return pulumi.get(self, "max_length_ms")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deletionCharacter":
            suggest = "deletion_character"
        elif key == "endCharacter":
            suggest = "end_character"
        elif key == "endTimeoutMs":
            suggest = "end_timeout_ms"
        elif key == "maxLength":
            suggest = "max_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deletion_character: str,
                 end_character: str,
                 end_timeout_ms: int,
                 max_length: int):
        pulumi.set(__self__, "deletion_character", deletion_character)
        pulumi.set(__self__, "end_character", end_character)
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length", max_length)

    @property
    @pulumi.getter(name="deletionCharacter")
    def deletion_character(self) -> str:
        return pulumi.get(self, "deletion_character")

    @property
    @pulumi.getter(name="endCharacter")
    def end_character(self) -> str:
        return pulumi.get(self, "end_character")

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> int:
        return pulumi.get(self, "end_timeout_ms")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> int:
        return pulumi.get(self, "max_length")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeoutMs":
            suggest = "start_timeout_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_timeout_ms: int):
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> int:
        return pulumi.get(self, "start_timeout_ms")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingSampleUtterance(dict):
    def __init__(__self__, *,
                 utterance: str):
        pulumi.set(__self__, "utterance", utterance)

    @property
    @pulumi.getter
    def utterance(self) -> str:
        return pulumi.get(self, "utterance")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingSlotResolutionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotResolutionStrategy":
            suggest = "slot_resolution_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingSlotResolutionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingSlotResolutionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingSlotResolutionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 slot_resolution_strategy: str):
        pulumi.set(__self__, "slot_resolution_strategy", slot_resolution_strategy)

    @property
    @pulumi.getter(name="slotResolutionStrategy")
    def slot_resolution_strategy(self) -> str:
        return pulumi.get(self, "slot_resolution_strategy")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continueResponses":
            suggest = "continue_responses"
        elif key == "stillWaitingResponses":
            suggest = "still_waiting_responses"
        elif key == "waitingResponses":
            suggest = "waiting_responses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 continue_responses: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse']] = None,
                 still_waiting_responses: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse']] = None,
                 waiting_responses: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse']] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if continue_responses is not None:
            pulumi.set(__self__, "continue_responses", continue_responses)
        if still_waiting_responses is not None:
            pulumi.set(__self__, "still_waiting_responses", still_waiting_responses)
        if waiting_responses is not None:
            pulumi.set(__self__, "waiting_responses", waiting_responses)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="continueResponses")
    def continue_responses(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse']]:
        return pulumi.get(self, "continue_responses")

    @property
    @pulumi.getter(name="stillWaitingResponses")
    def still_waiting_responses(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse']]:
        return pulumi.get(self, "still_waiting_responses")

    @property
    @pulumi.getter(name="waitingResponses")
    def waiting_responses(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse']]:
        return pulumi.get(self, "waiting_responses")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroup']] = None):
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroup']]:
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation']] = None):
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage':
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation']]:
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayloads":
            suggest = "custom_payloads"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payloads: Sequence[Any],
                 image_response_card: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessage'] = None):
        pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Sequence[Any]:
        return pulumi.get(self, "custom_payloads")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayloads":
            suggest = "custom_payloads"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payloads: Sequence[Any],
                 image_response_card: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessage'] = None):
        pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Sequence[Any]:
        return pulumi.get(self, "custom_payloads")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "frequencyInSeconds":
            suggest = "frequency_in_seconds"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frequency_in_seconds: int,
                 timeout_in_seconds: int,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroup']] = None):
        pulumi.set(__self__, "frequency_in_seconds", frequency_in_seconds)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="frequencyInSeconds")
    def frequency_in_seconds(self) -> int:
        return pulumi.get(self, "frequency_in_seconds")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> int:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroup']]:
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation']] = None):
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage':
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation']]:
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayloads":
            suggest = "custom_payloads"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payloads: Sequence[Any],
                 image_response_card: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessage'] = None):
        pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Sequence[Any]:
        return pulumi.get(self, "custom_payloads")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayloads":
            suggest = "custom_payloads"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payloads: Sequence[Any],
                 image_response_card: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessage'] = None):
        pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Sequence[Any]:
        return pulumi.get(self, "custom_payloads")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageGroups":
            suggest = "message_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_interrupt: Optional[bool] = None,
                 message_groups: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroup']] = None):
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[bool]:
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroup']]:
        return pulumi.get(self, "message_groups")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage',
                 variations: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation']] = None):
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage':
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation']]:
        return pulumi.get(self, "variations")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayloads":
            suggest = "custom_payloads"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payloads: Sequence[Any],
                 image_response_card: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessage'] = None):
        pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Sequence[Any]:
        return pulumi.get(self, "custom_payloads")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayloads":
            suggest = "custom_payloads"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payloads: Sequence[Any],
                 image_response_card: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessage'] = None):
        pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Sequence[Any]:
        return pulumi.get(self, "custom_payloads")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: str,
                 buttons: Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButton']] = None,
                 image_url: Optional[str] = None,
                 subtitle: Optional[str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButton(dict):
    def __init__(__self__, *,
                 text: str,
                 value: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessage(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSlotTypeEnumerationValueResult(dict):
    def __init__(__self__, *,
                 synonyms: Sequence[str],
                 value: str):
        pulumi.set(__self__, "synonyms", synonyms)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def synonyms(self) -> Sequence[str]:
        return pulumi.get(self, "synonyms")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


