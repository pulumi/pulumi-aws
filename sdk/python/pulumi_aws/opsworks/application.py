# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Application(pulumi.CustomResource):
    """
    Provides an OpsWorks application resource.
    """
    def __init__(__self__, __name__, __opts__=None, app_sources=None, auto_bundle_on_deploy=None, aws_flow_ruby_settings=None, data_source_arn=None, data_source_database_name=None, data_source_type=None, description=None, document_root=None, domains=None, enable_ssl=None, environments=None, name=None, rails_env=None, short_name=None, ssl_configurations=None, stack_id=None, type=None):
        """Create a Application resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['appSources'] = app_sources

        __props__['autoBundleOnDeploy'] = auto_bundle_on_deploy

        __props__['awsFlowRubySettings'] = aws_flow_ruby_settings

        __props__['dataSourceArn'] = data_source_arn

        __props__['dataSourceDatabaseName'] = data_source_database_name

        __props__['dataSourceType'] = data_source_type

        __props__['description'] = description

        __props__['documentRoot'] = document_root

        __props__['domains'] = domains

        __props__['enableSsl'] = enable_ssl

        __props__['environments'] = environments

        __props__['name'] = name

        __props__['railsEnv'] = rails_env

        __props__['shortName'] = short_name

        __props__['sslConfigurations'] = ssl_configurations

        if not stack_id:
            raise TypeError('Missing required property stack_id')
        __props__['stackId'] = stack_id

        if not type:
            raise TypeError('Missing required property type')
        __props__['type'] = type

        super(Application, __self__).__init__(
            'aws:opsworks/application:Application',
            __name__,
            __props__,
            __opts__)

