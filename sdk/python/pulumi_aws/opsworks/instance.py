# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Instance(pulumi.CustomResource):
    """
    Provides an OpsWorks instance resource.
    """
    def __init__(__self__, __name__, __opts__=None, agent_version=None, ami_id=None, architecture=None, auto_scaling_type=None, availability_zone=None, created_at=None, delete_ebs=None, delete_eip=None, ebs_block_devices=None, ebs_optimized=None, ecs_cluster_arn=None, elastic_ip=None, ephemeral_block_devices=None, hostname=None, infrastructure_class=None, install_updates_on_boot=None, instance_profile_arn=None, instance_type=None, last_service_error_id=None, layer_ids=None, os=None, platform=None, private_dns=None, private_ip=None, public_dns=None, public_ip=None, registered_by=None, reported_agent_version=None, reported_os_family=None, reported_os_name=None, reported_os_version=None, root_block_devices=None, root_device_type=None, root_device_volume_id=None, security_group_ids=None, ssh_host_dsa_key_fingerprint=None, ssh_host_rsa_key_fingerprint=None, ssh_key_name=None, stack_id=None, state=None, status=None, subnet_id=None, tenancy=None, virtualization_type=None):
        """Create a Instance resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['agentVersion'] = agent_version

        __props__['amiId'] = ami_id

        __props__['architecture'] = architecture

        __props__['autoScalingType'] = auto_scaling_type

        __props__['availabilityZone'] = availability_zone

        __props__['createdAt'] = created_at

        __props__['deleteEbs'] = delete_ebs

        __props__['deleteEip'] = delete_eip

        __props__['ebsBlockDevices'] = ebs_block_devices

        __props__['ebsOptimized'] = ebs_optimized

        __props__['ecsClusterArn'] = ecs_cluster_arn

        __props__['elasticIp'] = elastic_ip

        __props__['ephemeralBlockDevices'] = ephemeral_block_devices

        __props__['hostname'] = hostname

        __props__['infrastructureClass'] = infrastructure_class

        __props__['installUpdatesOnBoot'] = install_updates_on_boot

        __props__['instanceProfileArn'] = instance_profile_arn

        __props__['instanceType'] = instance_type

        __props__['lastServiceErrorId'] = last_service_error_id

        if not layer_ids:
            raise TypeError('Missing required property layer_ids')
        __props__['layerIds'] = layer_ids

        __props__['os'] = os

        __props__['platform'] = platform

        __props__['privateDns'] = private_dns

        __props__['privateIp'] = private_ip

        __props__['publicDns'] = public_dns

        __props__['publicIp'] = public_ip

        __props__['registeredBy'] = registered_by

        __props__['reportedAgentVersion'] = reported_agent_version

        __props__['reportedOsFamily'] = reported_os_family

        __props__['reportedOsName'] = reported_os_name

        __props__['reportedOsVersion'] = reported_os_version

        __props__['rootBlockDevices'] = root_block_devices

        __props__['rootDeviceType'] = root_device_type

        __props__['rootDeviceVolumeId'] = root_device_volume_id

        __props__['securityGroupIds'] = security_group_ids

        __props__['sshHostDsaKeyFingerprint'] = ssh_host_dsa_key_fingerprint

        __props__['sshHostRsaKeyFingerprint'] = ssh_host_rsa_key_fingerprint

        __props__['sshKeyName'] = ssh_key_name

        if not stack_id:
            raise TypeError('Missing required property stack_id')
        __props__['stackId'] = stack_id

        __props__['state'] = state

        __props__['status'] = status

        __props__['subnetId'] = subnet_id

        __props__['tenancy'] = tenancy

        __props__['virtualizationType'] = virtualization_type

        __props__['ec2_instance_id'] = None

        super(Instance, __self__).__init__(
            'aws:opsworks/instance:Instance',
            __name__,
            __props__,
            __opts__)

