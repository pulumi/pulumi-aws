# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'GetImagePipelineResult',
    'AwaitableGetImagePipelineResult',
    'get_image_pipeline',
]

@pulumi.output_type
class GetImagePipelineResult:
    """
    A collection of values returned by getImagePipeline.
    """
    def __init__(__self__, arn=None, date_created=None, date_last_run=None, date_next_run=None, date_updated=None, description=None, distribution_configuration_arn=None, enhanced_image_metadata_enabled=None, id=None, image_recipe_arn=None, image_tests_configurations=None, infrastructure_configuration_arn=None, name=None, platform=None, schedules=None, status=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if date_last_run and not isinstance(date_last_run, str):
            raise TypeError("Expected argument 'date_last_run' to be a str")
        pulumi.set(__self__, "date_last_run", date_last_run)
        if date_next_run and not isinstance(date_next_run, str):
            raise TypeError("Expected argument 'date_next_run' to be a str")
        pulumi.set(__self__, "date_next_run", date_next_run)
        if date_updated and not isinstance(date_updated, str):
            raise TypeError("Expected argument 'date_updated' to be a str")
        pulumi.set(__self__, "date_updated", date_updated)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if distribution_configuration_arn and not isinstance(distribution_configuration_arn, str):
            raise TypeError("Expected argument 'distribution_configuration_arn' to be a str")
        pulumi.set(__self__, "distribution_configuration_arn", distribution_configuration_arn)
        if enhanced_image_metadata_enabled and not isinstance(enhanced_image_metadata_enabled, bool):
            raise TypeError("Expected argument 'enhanced_image_metadata_enabled' to be a bool")
        pulumi.set(__self__, "enhanced_image_metadata_enabled", enhanced_image_metadata_enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_recipe_arn and not isinstance(image_recipe_arn, str):
            raise TypeError("Expected argument 'image_recipe_arn' to be a str")
        pulumi.set(__self__, "image_recipe_arn", image_recipe_arn)
        if image_tests_configurations and not isinstance(image_tests_configurations, list):
            raise TypeError("Expected argument 'image_tests_configurations' to be a list")
        pulumi.set(__self__, "image_tests_configurations", image_tests_configurations)
        if infrastructure_configuration_arn and not isinstance(infrastructure_configuration_arn, str):
            raise TypeError("Expected argument 'infrastructure_configuration_arn' to be a str")
        pulumi.set(__self__, "infrastructure_configuration_arn", infrastructure_configuration_arn)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if platform and not isinstance(platform, str):
            raise TypeError("Expected argument 'platform' to be a str")
        pulumi.set(__self__, "platform", platform)
        if schedules and not isinstance(schedules, list):
            raise TypeError("Expected argument 'schedules' to be a list")
        pulumi.set(__self__, "schedules", schedules)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        Date the image pipeline was created.
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="dateLastRun")
    def date_last_run(self) -> str:
        """
        Date the image pipeline was last run.
        """
        return pulumi.get(self, "date_last_run")

    @property
    @pulumi.getter(name="dateNextRun")
    def date_next_run(self) -> str:
        """
        Date the image pipeline will run next.
        """
        return pulumi.get(self, "date_next_run")

    @property
    @pulumi.getter(name="dateUpdated")
    def date_updated(self) -> str:
        """
        Date the image pipeline was updated.
        """
        return pulumi.get(self, "date_updated")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the image pipeline.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributionConfigurationArn")
    def distribution_configuration_arn(self) -> str:
        """
        Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
        """
        return pulumi.get(self, "distribution_configuration_arn")

    @property
    @pulumi.getter(name="enhancedImageMetadataEnabled")
    def enhanced_image_metadata_enabled(self) -> bool:
        """
        Whether additional information about the image being created is collected.
        """
        return pulumi.get(self, "enhanced_image_metadata_enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageRecipeArn")
    def image_recipe_arn(self) -> str:
        """
        Amazon Resource Name (ARN) of the Image Builder Infrastructure Recipe.
        """
        return pulumi.get(self, "image_recipe_arn")

    @property
    @pulumi.getter(name="imageTestsConfigurations")
    def image_tests_configurations(self) -> Sequence['outputs.GetImagePipelineImageTestsConfigurationResult']:
        """
        List of an object with image tests configuration.
        """
        return pulumi.get(self, "image_tests_configurations")

    @property
    @pulumi.getter(name="infrastructureConfigurationArn")
    def infrastructure_configuration_arn(self) -> str:
        """
        Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
        """
        return pulumi.get(self, "infrastructure_configuration_arn")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the image pipeline.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        Platform of the image pipeline.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetImagePipelineScheduleResult']:
        """
        List of an object with schedule settings.
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the image pipeline.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        Key-value map of resource tags for the image pipeline.
        """
        return pulumi.get(self, "tags")


class AwaitableGetImagePipelineResult(GetImagePipelineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImagePipelineResult(
            arn=self.arn,
            date_created=self.date_created,
            date_last_run=self.date_last_run,
            date_next_run=self.date_next_run,
            date_updated=self.date_updated,
            description=self.description,
            distribution_configuration_arn=self.distribution_configuration_arn,
            enhanced_image_metadata_enabled=self.enhanced_image_metadata_enabled,
            id=self.id,
            image_recipe_arn=self.image_recipe_arn,
            image_tests_configurations=self.image_tests_configurations,
            infrastructure_configuration_arn=self.infrastructure_configuration_arn,
            name=self.name,
            platform=self.platform,
            schedules=self.schedules,
            status=self.status,
            tags=self.tags)


def get_image_pipeline(arn: Optional[str] = None,
                       tags: Optional[Mapping[str, str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImagePipelineResult:
    """
    Provides details about an Image Builder Image Pipeline.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.imagebuilder.get_image_pipeline(arn="arn:aws:imagebuilder:us-west-2:aws:image-pipeline/example")
    ```


    :param str arn: Amazon Resource Name (ARN) of the image pipeline.
    :param Mapping[str, str] tags: Key-value map of resource tags for the image pipeline.
    """
    __args__ = dict()
    __args__['arn'] = arn
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws:imagebuilder/getImagePipeline:getImagePipeline', __args__, opts=opts, typ=GetImagePipelineResult).value

    return AwaitableGetImagePipelineResult(
        arn=__ret__.arn,
        date_created=__ret__.date_created,
        date_last_run=__ret__.date_last_run,
        date_next_run=__ret__.date_next_run,
        date_updated=__ret__.date_updated,
        description=__ret__.description,
        distribution_configuration_arn=__ret__.distribution_configuration_arn,
        enhanced_image_metadata_enabled=__ret__.enhanced_image_metadata_enabled,
        id=__ret__.id,
        image_recipe_arn=__ret__.image_recipe_arn,
        image_tests_configurations=__ret__.image_tests_configurations,
        infrastructure_configuration_arn=__ret__.infrastructure_configuration_arn,
        name=__ret__.name,
        platform=__ret__.platform,
        schedules=__ret__.schedules,
        status=__ret__.status,
        tags=__ret__.tags)
