# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BotAssociationLexBot',
    'HoursOfOperationConfig',
    'HoursOfOperationConfigEndTime',
    'HoursOfOperationConfigStartTime',
    'InstanceStorageConfigStorageConfig',
    'InstanceStorageConfigStorageConfigKinesisFirehoseConfig',
    'InstanceStorageConfigStorageConfigKinesisStreamConfig',
    'InstanceStorageConfigStorageConfigKinesisVideoStreamConfig',
    'InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig',
    'InstanceStorageConfigStorageConfigS3Config',
    'InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig',
    'PhoneNumberStatus',
    'QueueOutboundCallerConfig',
    'QuickConnectQuickConnectConfig',
    'QuickConnectQuickConnectConfigPhoneConfig',
    'QuickConnectQuickConnectConfigQueueConfig',
    'QuickConnectQuickConnectConfigUserConfig',
    'RoutingProfileMediaConcurrency',
    'RoutingProfileQueueConfig',
    'UserHierarchyGroupHierarchyPath',
    'UserHierarchyGroupHierarchyPathLevelFife',
    'UserHierarchyGroupHierarchyPathLevelFour',
    'UserHierarchyGroupHierarchyPathLevelOne',
    'UserHierarchyGroupHierarchyPathLevelThree',
    'UserHierarchyGroupHierarchyPathLevelTwo',
    'UserHierarchyStructureHierarchyStructure',
    'UserHierarchyStructureHierarchyStructureLevelFive',
    'UserHierarchyStructureHierarchyStructureLevelFour',
    'UserHierarchyStructureHierarchyStructureLevelOne',
    'UserHierarchyStructureHierarchyStructureLevelThree',
    'UserHierarchyStructureHierarchyStructureLevelTwo',
    'UserIdentityInfo',
    'UserPhoneConfig',
    'GetBotAssociationLexBotResult',
    'GetHoursOfOperationConfigResult',
    'GetHoursOfOperationConfigEndTimeResult',
    'GetHoursOfOperationConfigStartTimeResult',
    'GetInstanceStorageConfigStorageConfigResult',
    'GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigResult',
    'GetInstanceStorageConfigStorageConfigKinesisStreamConfigResult',
    'GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigResult',
    'GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigResult',
    'GetInstanceStorageConfigStorageConfigS3ConfigResult',
    'GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigResult',
    'GetQueueOutboundCallerConfigResult',
    'GetQuickConnectQuickConnectConfigResult',
    'GetQuickConnectQuickConnectConfigPhoneConfigResult',
    'GetQuickConnectQuickConnectConfigQueueConfigResult',
    'GetQuickConnectQuickConnectConfigUserConfigResult',
    'GetRoutingProfileMediaConcurrencyResult',
    'GetRoutingProfileQueueConfigResult',
    'GetUserHierarchyGroupHierarchyPathResult',
    'GetUserHierarchyGroupHierarchyPathLevelFifeResult',
    'GetUserHierarchyGroupHierarchyPathLevelFourResult',
    'GetUserHierarchyGroupHierarchyPathLevelOneResult',
    'GetUserHierarchyGroupHierarchyPathLevelThreeResult',
    'GetUserHierarchyGroupHierarchyPathLevelTwoResult',
    'GetUserHierarchyStructureHierarchyStructureResult',
    'GetUserHierarchyStructureHierarchyStructureLevelFifeResult',
    'GetUserHierarchyStructureHierarchyStructureLevelFourResult',
    'GetUserHierarchyStructureHierarchyStructureLevelOneResult',
    'GetUserHierarchyStructureHierarchyStructureLevelThreeResult',
    'GetUserHierarchyStructureHierarchyStructureLevelTwoResult',
    'GetUserIdentityInfoResult',
    'GetUserPhoneConfigResult',
]

@pulumi.output_type
class BotAssociationLexBot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lexRegion":
            suggest = "lex_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAssociationLexBot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAssociationLexBot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAssociationLexBot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 lex_region: Optional[str] = None):
        """
        :param str name: The name of the Amazon Lex (V1) bot.
        :param str lex_region: The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
        """
        pulumi.set(__self__, "name", name)
        if lex_region is not None:
            pulumi.set(__self__, "lex_region", lex_region)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Amazon Lex (V1) bot.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="lexRegion")
    def lex_region(self) -> Optional[str]:
        """
        The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
        """
        return pulumi.get(self, "lex_region")


@pulumi.output_type
class HoursOfOperationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HoursOfOperationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HoursOfOperationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HoursOfOperationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: str,
                 end_time: 'outputs.HoursOfOperationConfigEndTime',
                 start_time: 'outputs.HoursOfOperationConfigStartTime'):
        """
        :param str day: Specifies the day that the hours of operation applies to.
        :param 'HoursOfOperationConfigEndTimeArgs' end_time: A end time block specifies the time that your contact center closes. The `end_time` is documented below.
        :param 'HoursOfOperationConfigStartTimeArgs' start_time: A start time block specifies the time that your contact center opens. The `start_time` is documented below.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> str:
        """
        Specifies the day that the hours of operation applies to.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> 'outputs.HoursOfOperationConfigEndTime':
        """
        A end time block specifies the time that your contact center closes. The `end_time` is documented below.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> 'outputs.HoursOfOperationConfigStartTime':
        """
        A start time block specifies the time that your contact center opens. The `start_time` is documented below.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class HoursOfOperationConfigEndTime(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        """
        :param int hours: Specifies the hour of closing.
        :param int minutes: Specifies the minute of closing.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        Specifies the hour of closing.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        Specifies the minute of closing.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class HoursOfOperationConfigStartTime(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        """
        :param int hours: Specifies the hour of opening.
        :param int minutes: Specifies the minute of opening.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        Specifies the hour of opening.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        Specifies the minute of opening.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class InstanceStorageConfigStorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageType":
            suggest = "storage_type"
        elif key == "kinesisFirehoseConfig":
            suggest = "kinesis_firehose_config"
        elif key == "kinesisStreamConfig":
            suggest = "kinesis_stream_config"
        elif key == "kinesisVideoStreamConfig":
            suggest = "kinesis_video_stream_config"
        elif key == "s3Config":
            suggest = "s3_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_type: str,
                 kinesis_firehose_config: Optional['outputs.InstanceStorageConfigStorageConfigKinesisFirehoseConfig'] = None,
                 kinesis_stream_config: Optional['outputs.InstanceStorageConfigStorageConfigKinesisStreamConfig'] = None,
                 kinesis_video_stream_config: Optional['outputs.InstanceStorageConfigStorageConfigKinesisVideoStreamConfig'] = None,
                 s3_config: Optional['outputs.InstanceStorageConfigStorageConfigS3Config'] = None):
        """
        :param str storage_type: A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
        :param 'InstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs' kinesis_firehose_config: A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
        :param 'InstanceStorageConfigStorageConfigKinesisStreamConfigArgs' kinesis_stream_config: A block that specifies the configuration of the Kinesis data stream. Documented below.
        :param 'InstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs' kinesis_video_stream_config: A block that specifies the configuration of the Kinesis video stream. Documented below.
        :param 'InstanceStorageConfigStorageConfigS3ConfigArgs' s3_config: A block that specifies the configuration of S3 Bucket. Documented below.
        """
        pulumi.set(__self__, "storage_type", storage_type)
        if kinesis_firehose_config is not None:
            pulumi.set(__self__, "kinesis_firehose_config", kinesis_firehose_config)
        if kinesis_stream_config is not None:
            pulumi.set(__self__, "kinesis_stream_config", kinesis_stream_config)
        if kinesis_video_stream_config is not None:
            pulumi.set(__self__, "kinesis_video_stream_config", kinesis_video_stream_config)
        if s3_config is not None:
            pulumi.set(__self__, "s3_config", s3_config)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="kinesisFirehoseConfig")
    def kinesis_firehose_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigKinesisFirehoseConfig']:
        """
        A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
        """
        return pulumi.get(self, "kinesis_firehose_config")

    @property
    @pulumi.getter(name="kinesisStreamConfig")
    def kinesis_stream_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigKinesisStreamConfig']:
        """
        A block that specifies the configuration of the Kinesis data stream. Documented below.
        """
        return pulumi.get(self, "kinesis_stream_config")

    @property
    @pulumi.getter(name="kinesisVideoStreamConfig")
    def kinesis_video_stream_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigKinesisVideoStreamConfig']:
        """
        A block that specifies the configuration of the Kinesis video stream. Documented below.
        """
        return pulumi.get(self, "kinesis_video_stream_config")

    @property
    @pulumi.getter(name="s3Config")
    def s3_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigS3Config']:
        """
        A block that specifies the configuration of S3 Bucket. Documented below.
        """
        return pulumi.get(self, "s3_config")


@pulumi.output_type
class InstanceStorageConfigStorageConfigKinesisFirehoseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firehoseArn":
            suggest = "firehose_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigKinesisFirehoseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigKinesisFirehoseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigKinesisFirehoseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 firehose_arn: str):
        """
        :param str firehose_arn: The Amazon Resource Name (ARN) of the delivery stream.
        """
        pulumi.set(__self__, "firehose_arn", firehose_arn)

    @property
    @pulumi.getter(name="firehoseArn")
    def firehose_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the delivery stream.
        """
        return pulumi.get(self, "firehose_arn")


@pulumi.output_type
class InstanceStorageConfigStorageConfigKinesisStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigKinesisStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigKinesisStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigKinesisStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_arn: str):
        """
        :param str stream_arn: The Amazon Resource Name (ARN) of the data stream.
        """
        pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the data stream.
        """
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class InstanceStorageConfigStorageConfigKinesisVideoStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionConfig":
            suggest = "encryption_config"
        elif key == "retentionPeriodHours":
            suggest = "retention_period_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigKinesisVideoStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigKinesisVideoStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigKinesisVideoStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_config: 'outputs.InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig',
                 prefix: str,
                 retention_period_hours: int):
        """
        :param 'InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs' encryption_config: The encryption configuration. Documented below.
        :param str prefix: The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
        :param int retention_period_hours: The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0`, indicates that the stream does not persist data.
        """
        pulumi.set(__self__, "encryption_config", encryption_config)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "retention_period_hours", retention_period_hours)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> 'outputs.InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig':
        """
        The encryption configuration. Documented below.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="retentionPeriodHours")
    def retention_period_hours(self) -> int:
        """
        The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0`, indicates that the stream does not persist data.
        """
        return pulumi.get(self, "retention_period_hours")


@pulumi.output_type
class InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: str,
                 key_id: str):
        """
        :param str encryption_type: The type of encryption. Valid Values: `KMS`.
        :param str key_id: The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
        """
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        """
        The type of encryption. Valid Values: `KMS`.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        """
        The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
        """
        return pulumi.get(self, "key_id")


@pulumi.output_type
class InstanceStorageConfigStorageConfigS3Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "bucketPrefix":
            suggest = "bucket_prefix"
        elif key == "encryptionConfig":
            suggest = "encryption_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigS3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigS3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigS3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_prefix: str,
                 encryption_config: Optional['outputs.InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig'] = None):
        """
        :param str bucket_name: The S3 bucket name.
        :param str bucket_prefix: The S3 bucket prefix.
        :param 'InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs' encryption_config: The encryption configuration. Documented below.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The S3 bucket name.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> str:
        """
        The S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig']:
        """
        The encryption configuration. Documented below.
        """
        return pulumi.get(self, "encryption_config")


@pulumi.output_type
class InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: str,
                 key_id: str):
        """
        :param str encryption_type: The type of encryption. Valid Values: `KMS`.
        :param str key_id: The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
        """
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        """
        The type of encryption. Valid Values: `KMS`.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        """
        The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
        """
        return pulumi.get(self, "key_id")


@pulumi.output_type
class PhoneNumberStatus(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str message: The status message.
        :param str status: The status of the phone number. Valid Values: `CLAIMED` | `IN_PROGRESS` | `FAILED`.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        The status message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the phone number. Valid Values: `CLAIMED` | `IN_PROGRESS` | `FAILED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class QueueOutboundCallerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outboundCallerIdName":
            suggest = "outbound_caller_id_name"
        elif key == "outboundCallerIdNumberId":
            suggest = "outbound_caller_id_number_id"
        elif key == "outboundFlowId":
            suggest = "outbound_flow_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueOutboundCallerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueOutboundCallerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueOutboundCallerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 outbound_caller_id_name: Optional[str] = None,
                 outbound_caller_id_number_id: Optional[str] = None,
                 outbound_flow_id: Optional[str] = None):
        """
        :param str outbound_caller_id_name: Specifies the caller ID name.
        :param str outbound_caller_id_number_id: Specifies the caller ID number.
        :param str outbound_flow_id: Specifies outbound whisper flow to be used during an outbound call.
        """
        if outbound_caller_id_name is not None:
            pulumi.set(__self__, "outbound_caller_id_name", outbound_caller_id_name)
        if outbound_caller_id_number_id is not None:
            pulumi.set(__self__, "outbound_caller_id_number_id", outbound_caller_id_number_id)
        if outbound_flow_id is not None:
            pulumi.set(__self__, "outbound_flow_id", outbound_flow_id)

    @property
    @pulumi.getter(name="outboundCallerIdName")
    def outbound_caller_id_name(self) -> Optional[str]:
        """
        Specifies the caller ID name.
        """
        return pulumi.get(self, "outbound_caller_id_name")

    @property
    @pulumi.getter(name="outboundCallerIdNumberId")
    def outbound_caller_id_number_id(self) -> Optional[str]:
        """
        Specifies the caller ID number.
        """
        return pulumi.get(self, "outbound_caller_id_number_id")

    @property
    @pulumi.getter(name="outboundFlowId")
    def outbound_flow_id(self) -> Optional[str]:
        """
        Specifies outbound whisper flow to be used during an outbound call.
        """
        return pulumi.get(self, "outbound_flow_id")


@pulumi.output_type
class QuickConnectQuickConnectConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quickConnectType":
            suggest = "quick_connect_type"
        elif key == "phoneConfigs":
            suggest = "phone_configs"
        elif key == "queueConfigs":
            suggest = "queue_configs"
        elif key == "userConfigs":
            suggest = "user_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quick_connect_type: str,
                 phone_configs: Optional[Sequence['outputs.QuickConnectQuickConnectConfigPhoneConfig']] = None,
                 queue_configs: Optional[Sequence['outputs.QuickConnectQuickConnectConfigQueueConfig']] = None,
                 user_configs: Optional[Sequence['outputs.QuickConnectQuickConnectConfigUserConfig']] = None):
        """
        :param str quick_connect_type: Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
        :param Sequence['QuickConnectQuickConnectConfigPhoneConfigArgs'] phone_configs: Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
        :param Sequence['QuickConnectQuickConnectConfigQueueConfigArgs'] queue_configs: Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
        :param Sequence['QuickConnectQuickConnectConfigUserConfigArgs'] user_configs: Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
        """
        pulumi.set(__self__, "quick_connect_type", quick_connect_type)
        if phone_configs is not None:
            pulumi.set(__self__, "phone_configs", phone_configs)
        if queue_configs is not None:
            pulumi.set(__self__, "queue_configs", queue_configs)
        if user_configs is not None:
            pulumi.set(__self__, "user_configs", user_configs)

    @property
    @pulumi.getter(name="quickConnectType")
    def quick_connect_type(self) -> str:
        """
        Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
        """
        return pulumi.get(self, "quick_connect_type")

    @property
    @pulumi.getter(name="phoneConfigs")
    def phone_configs(self) -> Optional[Sequence['outputs.QuickConnectQuickConnectConfigPhoneConfig']]:
        """
        Specifies the phone configuration of the Quick Connect. This is required only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
        """
        return pulumi.get(self, "phone_configs")

    @property
    @pulumi.getter(name="queueConfigs")
    def queue_configs(self) -> Optional[Sequence['outputs.QuickConnectQuickConnectConfigQueueConfig']]:
        """
        Specifies the queue configuration of the Quick Connect. This is required only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
        """
        return pulumi.get(self, "queue_configs")

    @property
    @pulumi.getter(name="userConfigs")
    def user_configs(self) -> Optional[Sequence['outputs.QuickConnectQuickConnectConfigUserConfig']]:
        """
        Specifies the user configuration of the Quick Connect. This is required only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
        """
        return pulumi.get(self, "user_configs")


@pulumi.output_type
class QuickConnectQuickConnectConfigPhoneConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQuickConnectConfigPhoneConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQuickConnectConfigPhoneConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQuickConnectConfigPhoneConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_number: str):
        """
        :param str phone_number: Specifies the phone number in in E.164 format.
        """
        pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        Specifies the phone number in in E.164 format.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class QuickConnectQuickConnectConfigQueueConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowId":
            suggest = "contact_flow_id"
        elif key == "queueId":
            suggest = "queue_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQuickConnectConfigQueueConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQuickConnectConfigQueueConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQuickConnectConfigQueueConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_id: str,
                 queue_id: str):
        """
        :param str contact_flow_id: Specifies the identifier of the contact flow.
        :param str queue_id: Specifies the identifier for the queue.
        """
        pulumi.set(__self__, "contact_flow_id", contact_flow_id)
        pulumi.set(__self__, "queue_id", queue_id)

    @property
    @pulumi.getter(name="contactFlowId")
    def contact_flow_id(self) -> str:
        """
        Specifies the identifier of the contact flow.
        """
        return pulumi.get(self, "contact_flow_id")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        """
        Specifies the identifier for the queue.
        """
        return pulumi.get(self, "queue_id")


@pulumi.output_type
class QuickConnectQuickConnectConfigUserConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowId":
            suggest = "contact_flow_id"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQuickConnectConfigUserConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQuickConnectConfigUserConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQuickConnectConfigUserConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_id: str,
                 user_id: str):
        """
        :param str contact_flow_id: Specifies the identifier of the contact flow.
        :param str user_id: Specifies the identifier for the user.
        """
        pulumi.set(__self__, "contact_flow_id", contact_flow_id)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="contactFlowId")
    def contact_flow_id(self) -> str:
        """
        Specifies the identifier of the contact flow.
        """
        return pulumi.get(self, "contact_flow_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        Specifies the identifier for the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class RoutingProfileMediaConcurrency(dict):
    def __init__(__self__, *,
                 channel: str,
                 concurrency: int):
        """
        :param str channel: Specifies the channels that agents can handle in the Contact Control Panel (CCP). Valid values are `VOICE`, `CHAT`, `TASK`.
        :param int concurrency: Specifies the number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "concurrency", concurrency)

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        Specifies the channels that agents can handle in the Contact Control Panel (CCP). Valid values are `VOICE`, `CHAT`, `TASK`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def concurrency(self) -> int:
        """
        Specifies the number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
        """
        return pulumi.get(self, "concurrency")


@pulumi.output_type
class RoutingProfileQueueConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueId":
            suggest = "queue_id"
        elif key == "queueArn":
            suggest = "queue_arn"
        elif key == "queueName":
            suggest = "queue_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileQueueConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileQueueConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileQueueConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: str,
                 delay: int,
                 priority: int,
                 queue_id: str,
                 queue_arn: Optional[str] = None,
                 queue_name: Optional[str] = None):
        """
        :param str channel: Specifies the channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
        :param int delay: Specifies the delay, in seconds, that a contact should be in the queue before they are routed to an available agent
        :param int priority: Specifies the order in which contacts are to be handled for the queue.
        :param str queue_id: Specifies the identifier for the queue.
        :param str queue_arn: ARN for the queue.
        :param str queue_name: Name for the queue.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "queue_id", queue_id)
        if queue_arn is not None:
            pulumi.set(__self__, "queue_arn", queue_arn)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        Specifies the channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def delay(self) -> int:
        """
        Specifies the delay, in seconds, that a contact should be in the queue before they are routed to an available agent
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Specifies the order in which contacts are to be handled for the queue.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        """
        Specifies the identifier for the queue.
        """
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> Optional[str]:
        """
        ARN for the queue.
        """
        return pulumi.get(self, "queue_arn")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        """
        Name for the queue.
        """
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "levelFives":
            suggest = "level_fives"
        elif key == "levelFours":
            suggest = "level_fours"
        elif key == "levelOnes":
            suggest = "level_ones"
        elif key == "levelThrees":
            suggest = "level_threes"
        elif key == "levelTwos":
            suggest = "level_twos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserHierarchyGroupHierarchyPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserHierarchyGroupHierarchyPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserHierarchyGroupHierarchyPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level_fives: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelFife']] = None,
                 level_fours: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelFour']] = None,
                 level_ones: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelOne']] = None,
                 level_threes: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelThree']] = None,
                 level_twos: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelTwo']] = None):
        """
        :param Sequence['UserHierarchyGroupHierarchyPathLevelFifeArgs'] level_fives: A block that defines the details of level five. The level block is documented below.
        :param Sequence['UserHierarchyGroupHierarchyPathLevelFourArgs'] level_fours: A block that defines the details of level four. The level block is documented below.
        :param Sequence['UserHierarchyGroupHierarchyPathLevelOneArgs'] level_ones: A block that defines the details of level one. The level block is documented below.
        :param Sequence['UserHierarchyGroupHierarchyPathLevelThreeArgs'] level_threes: A block that defines the details of level three. The level block is documented below.
        :param Sequence['UserHierarchyGroupHierarchyPathLevelTwoArgs'] level_twos: A block that defines the details of level two. The level block is documented below.
        """
        if level_fives is not None:
            pulumi.set(__self__, "level_fives", level_fives)
        if level_fours is not None:
            pulumi.set(__self__, "level_fours", level_fours)
        if level_ones is not None:
            pulumi.set(__self__, "level_ones", level_ones)
        if level_threes is not None:
            pulumi.set(__self__, "level_threes", level_threes)
        if level_twos is not None:
            pulumi.set(__self__, "level_twos", level_twos)

    @property
    @pulumi.getter(name="levelFives")
    def level_fives(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelFife']]:
        """
        A block that defines the details of level five. The level block is documented below.
        """
        return pulumi.get(self, "level_fives")

    @property
    @pulumi.getter(name="levelFours")
    def level_fours(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelFour']]:
        """
        A block that defines the details of level four. The level block is documented below.
        """
        return pulumi.get(self, "level_fours")

    @property
    @pulumi.getter(name="levelOnes")
    def level_ones(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelOne']]:
        """
        A block that defines the details of level one. The level block is documented below.
        """
        return pulumi.get(self, "level_ones")

    @property
    @pulumi.getter(name="levelThrees")
    def level_threes(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelThree']]:
        """
        A block that defines the details of level three. The level block is documented below.
        """
        return pulumi.get(self, "level_threes")

    @property
    @pulumi.getter(name="levelTwos")
    def level_twos(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelTwo']]:
        """
        A block that defines the details of level two. The level block is documented below.
        """
        return pulumi.get(self, "level_twos")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelFife(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: The name of the user hierarchy group. Must not be more than 100 characters.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the user hierarchy group. Must not be more than 100 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelFour(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: The name of the user hierarchy group. Must not be more than 100 characters.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the user hierarchy group. Must not be more than 100 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelOne(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: The name of the user hierarchy group. Must not be more than 100 characters.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the user hierarchy group. Must not be more than 100 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelThree(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: The name of the user hierarchy group. Must not be more than 100 characters.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the user hierarchy group. Must not be more than 100 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelTwo(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: The name of the user hierarchy group. Must not be more than 100 characters.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the user hierarchy group. Must not be more than 100 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "levelFive":
            suggest = "level_five"
        elif key == "levelFour":
            suggest = "level_four"
        elif key == "levelOne":
            suggest = "level_one"
        elif key == "levelThree":
            suggest = "level_three"
        elif key == "levelTwo":
            suggest = "level_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserHierarchyStructureHierarchyStructure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserHierarchyStructureHierarchyStructure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserHierarchyStructureHierarchyStructure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level_five: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelFive'] = None,
                 level_four: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelFour'] = None,
                 level_one: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelOne'] = None,
                 level_three: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelThree'] = None,
                 level_two: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelTwo'] = None):
        """
        :param 'UserHierarchyStructureHierarchyStructureLevelFiveArgs' level_five: A block that defines the details of level five. The level block is documented below.
               
               Each level block supports the following arguments:
        :param 'UserHierarchyStructureHierarchyStructureLevelFourArgs' level_four: A block that defines the details of level four. The level block is documented below.
        :param 'UserHierarchyStructureHierarchyStructureLevelOneArgs' level_one: A block that defines the details of level one. The level block is documented below.
        :param 'UserHierarchyStructureHierarchyStructureLevelThreeArgs' level_three: A block that defines the details of level three. The level block is documented below.
        :param 'UserHierarchyStructureHierarchyStructureLevelTwoArgs' level_two: A block that defines the details of level two. The level block is documented below.
        """
        if level_five is not None:
            pulumi.set(__self__, "level_five", level_five)
        if level_four is not None:
            pulumi.set(__self__, "level_four", level_four)
        if level_one is not None:
            pulumi.set(__self__, "level_one", level_one)
        if level_three is not None:
            pulumi.set(__self__, "level_three", level_three)
        if level_two is not None:
            pulumi.set(__self__, "level_two", level_two)

    @property
    @pulumi.getter(name="levelFive")
    def level_five(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelFive']:
        """
        A block that defines the details of level five. The level block is documented below.

        Each level block supports the following arguments:
        """
        return pulumi.get(self, "level_five")

    @property
    @pulumi.getter(name="levelFour")
    def level_four(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelFour']:
        """
        A block that defines the details of level four. The level block is documented below.
        """
        return pulumi.get(self, "level_four")

    @property
    @pulumi.getter(name="levelOne")
    def level_one(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelOne']:
        """
        A block that defines the details of level one. The level block is documented below.
        """
        return pulumi.get(self, "level_one")

    @property
    @pulumi.getter(name="levelThree")
    def level_three(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelThree']:
        """
        A block that defines the details of level three. The level block is documented below.
        """
        return pulumi.get(self, "level_three")

    @property
    @pulumi.getter(name="levelTwo")
    def level_two(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelTwo']:
        """
        A block that defines the details of level two. The level block is documented below.
        """
        return pulumi.get(self, "level_two")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelFive(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str name: The name of the user hierarchy level. Must not be more than 50 characters.
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelFour(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str name: The name of the user hierarchy level. Must not be more than 50 characters.
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelOne(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str name: The name of the user hierarchy level. Must not be more than 50 characters.
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelThree(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str name: The name of the user hierarchy level. Must not be more than 50 characters.
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelTwo(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str name: The name of the user hierarchy level. Must not be more than 50 characters.
        :param str arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class UserIdentityInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None):
        """
        :param str email: The email address. If you are using SAML for identity management and include this parameter, an error is returned. Note that updates to the `email` is supported. From the [UpdateUserIdentityInfo API documentation](https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdateUserIdentityInfo.html) it is strongly recommended to limit who has the ability to invoke `UpdateUserIdentityInfo`. Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker's email address, and then reset the password through email. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
        :param str first_name: The first name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
        :param str last_name: The last name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        The email address. If you are using SAML for identity management and include this parameter, an error is returned. Note that updates to the `email` is supported. From the [UpdateUserIdentityInfo API documentation](https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdateUserIdentityInfo.html) it is strongly recommended to limit who has the ability to invoke `UpdateUserIdentityInfo`. Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker's email address, and then reset the password through email. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        """
        The first name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        """
        The last name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
        """
        return pulumi.get(self, "last_name")


@pulumi.output_type
class UserPhoneConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneType":
            suggest = "phone_type"
        elif key == "afterContactWorkTimeLimit":
            suggest = "after_contact_work_time_limit"
        elif key == "autoAccept":
            suggest = "auto_accept"
        elif key == "deskPhoneNumber":
            suggest = "desk_phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPhoneConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPhoneConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPhoneConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_type: str,
                 after_contact_work_time_limit: Optional[int] = None,
                 auto_accept: Optional[bool] = None,
                 desk_phone_number: Optional[str] = None):
        """
        :param str phone_type: The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
        :param int after_contact_work_time_limit: The After Call Work (ACW) timeout setting, in seconds. Minimum value of 0.
        :param bool auto_accept: When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
        :param str desk_phone_number: The phone number for the user's desk phone. Required if `phone_type` is set as `DESK_PHONE`.
        """
        pulumi.set(__self__, "phone_type", phone_type)
        if after_contact_work_time_limit is not None:
            pulumi.set(__self__, "after_contact_work_time_limit", after_contact_work_time_limit)
        if auto_accept is not None:
            pulumi.set(__self__, "auto_accept", auto_accept)
        if desk_phone_number is not None:
            pulumi.set(__self__, "desk_phone_number", desk_phone_number)

    @property
    @pulumi.getter(name="phoneType")
    def phone_type(self) -> str:
        """
        The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
        """
        return pulumi.get(self, "phone_type")

    @property
    @pulumi.getter(name="afterContactWorkTimeLimit")
    def after_contact_work_time_limit(self) -> Optional[int]:
        """
        The After Call Work (ACW) timeout setting, in seconds. Minimum value of 0.
        """
        return pulumi.get(self, "after_contact_work_time_limit")

    @property
    @pulumi.getter(name="autoAccept")
    def auto_accept(self) -> Optional[bool]:
        """
        When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
        """
        return pulumi.get(self, "auto_accept")

    @property
    @pulumi.getter(name="deskPhoneNumber")
    def desk_phone_number(self) -> Optional[str]:
        """
        The phone number for the user's desk phone. Required if `phone_type` is set as `DESK_PHONE`.
        """
        return pulumi.get(self, "desk_phone_number")


@pulumi.output_type
class GetBotAssociationLexBotResult(dict):
    def __init__(__self__, *,
                 lex_region: str,
                 name: str):
        """
        :param str lex_region: Region that the Amazon Lex (V1) bot was created in.
        :param str name: Name of the Amazon Lex (V1) bot.
        """
        pulumi.set(__self__, "lex_region", lex_region)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lexRegion")
    def lex_region(self) -> str:
        """
        Region that the Amazon Lex (V1) bot was created in.
        """
        return pulumi.get(self, "lex_region")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Amazon Lex (V1) bot.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetHoursOfOperationConfigResult(dict):
    def __init__(__self__, *,
                 day: str,
                 end_times: Sequence['outputs.GetHoursOfOperationConfigEndTimeResult'],
                 start_times: Sequence['outputs.GetHoursOfOperationConfigStartTimeResult']):
        """
        :param str day: Day that the hours of operation applies to.
        :param Sequence['GetHoursOfOperationConfigEndTimeArgs'] end_times: End time block specifies the time that your contact center closes. The `end_time` is documented below.
        :param Sequence['GetHoursOfOperationConfigStartTimeArgs'] start_times: Start time block specifies the time that your contact center opens. The `start_time` is documented below.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end_times", end_times)
        pulumi.set(__self__, "start_times", start_times)

    @property
    @pulumi.getter
    def day(self) -> str:
        """
        Day that the hours of operation applies to.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="endTimes")
    def end_times(self) -> Sequence['outputs.GetHoursOfOperationConfigEndTimeResult']:
        """
        End time block specifies the time that your contact center closes. The `end_time` is documented below.
        """
        return pulumi.get(self, "end_times")

    @property
    @pulumi.getter(name="startTimes")
    def start_times(self) -> Sequence['outputs.GetHoursOfOperationConfigStartTimeResult']:
        """
        Start time block specifies the time that your contact center opens. The `start_time` is documented below.
        """
        return pulumi.get(self, "start_times")


@pulumi.output_type
class GetHoursOfOperationConfigEndTimeResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        """
        :param int hours: Hour of opening.
        :param int minutes: Minute of opening.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        Hour of opening.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        Minute of opening.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetHoursOfOperationConfigStartTimeResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        """
        :param int hours: Hour of opening.
        :param int minutes: Minute of opening.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        Hour of opening.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        Minute of opening.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigResult(dict):
    def __init__(__self__, *,
                 kinesis_firehose_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigResult'],
                 kinesis_stream_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisStreamConfigResult'],
                 kinesis_video_stream_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigResult'],
                 s3_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigS3ConfigResult'],
                 storage_type: str):
        """
        :param Sequence['GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs'] kinesis_firehose_configs: A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
        :param Sequence['GetInstanceStorageConfigStorageConfigKinesisStreamConfigArgs'] kinesis_stream_configs: A block that specifies the configuration of the Kinesis data stream. Documented below.
        :param Sequence['GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs'] kinesis_video_stream_configs: A block that specifies the configuration of the Kinesis video stream. Documented below.
        :param Sequence['GetInstanceStorageConfigStorageConfigS3ConfigArgs'] s3_configs: A block that specifies the configuration of S3 Bucket. Documented below.
        :param str storage_type: A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
        """
        pulumi.set(__self__, "kinesis_firehose_configs", kinesis_firehose_configs)
        pulumi.set(__self__, "kinesis_stream_configs", kinesis_stream_configs)
        pulumi.set(__self__, "kinesis_video_stream_configs", kinesis_video_stream_configs)
        pulumi.set(__self__, "s3_configs", s3_configs)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter(name="kinesisFirehoseConfigs")
    def kinesis_firehose_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigResult']:
        """
        A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
        """
        return pulumi.get(self, "kinesis_firehose_configs")

    @property
    @pulumi.getter(name="kinesisStreamConfigs")
    def kinesis_stream_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisStreamConfigResult']:
        """
        A block that specifies the configuration of the Kinesis data stream. Documented below.
        """
        return pulumi.get(self, "kinesis_stream_configs")

    @property
    @pulumi.getter(name="kinesisVideoStreamConfigs")
    def kinesis_video_stream_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigResult']:
        """
        A block that specifies the configuration of the Kinesis video stream. Documented below.
        """
        return pulumi.get(self, "kinesis_video_stream_configs")

    @property
    @pulumi.getter(name="s3Configs")
    def s3_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigS3ConfigResult']:
        """
        A block that specifies the configuration of S3 Bucket. Documented below.
        """
        return pulumi.get(self, "s3_configs")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigResult(dict):
    def __init__(__self__, *,
                 firehose_arn: str):
        """
        :param str firehose_arn: The Amazon Resource Name (ARN) of the delivery stream.
        """
        pulumi.set(__self__, "firehose_arn", firehose_arn)

    @property
    @pulumi.getter(name="firehoseArn")
    def firehose_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the delivery stream.
        """
        return pulumi.get(self, "firehose_arn")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigKinesisStreamConfigResult(dict):
    def __init__(__self__, *,
                 stream_arn: str):
        """
        :param str stream_arn: The Amazon Resource Name (ARN) of the data stream.
        """
        pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the data stream.
        """
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigResult(dict):
    def __init__(__self__, *,
                 encryption_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigResult'],
                 prefix: str,
                 retention_period_hours: int):
        """
        :param Sequence['GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs'] encryption_configs: The encryption configuration. Documented below.
        :param str prefix: The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
        :param int retention_period_hours: The number of hours to retain the data in a data store associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0` indicates that the stream does not persist data.
        """
        pulumi.set(__self__, "encryption_configs", encryption_configs)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "retention_period_hours", retention_period_hours)

    @property
    @pulumi.getter(name="encryptionConfigs")
    def encryption_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigResult']:
        """
        The encryption configuration. Documented below.
        """
        return pulumi.get(self, "encryption_configs")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="retentionPeriodHours")
    def retention_period_hours(self) -> int:
        """
        The number of hours to retain the data in a data store associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0` indicates that the stream does not persist data.
        """
        return pulumi.get(self, "retention_period_hours")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigResult(dict):
    def __init__(__self__, *,
                 encryption_type: str,
                 key_id: str):
        """
        :param str encryption_type: The type of encryption. Valid Values: `KMS`.
        :param str key_id: The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
        """
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        """
        The type of encryption. Valid Values: `KMS`.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        """
        The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
        """
        return pulumi.get(self, "key_id")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigS3ConfigResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_prefix: str,
                 encryption_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigResult']):
        """
        :param str bucket_name: The S3 bucket name.
        :param str bucket_prefix: The S3 bucket prefix.
        :param Sequence['GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs'] encryption_configs: The encryption configuration. Documented below.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        pulumi.set(__self__, "encryption_configs", encryption_configs)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The S3 bucket name.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> str:
        """
        The S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter(name="encryptionConfigs")
    def encryption_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigResult']:
        """
        The encryption configuration. Documented below.
        """
        return pulumi.get(self, "encryption_configs")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigResult(dict):
    def __init__(__self__, *,
                 encryption_type: str,
                 key_id: str):
        """
        :param str encryption_type: The type of encryption. Valid Values: `KMS`.
        :param str key_id: The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
        """
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        """
        The type of encryption. Valid Values: `KMS`.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        """
        The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
        """
        return pulumi.get(self, "key_id")


@pulumi.output_type
class GetQueueOutboundCallerConfigResult(dict):
    def __init__(__self__, *,
                 outbound_caller_id_name: str,
                 outbound_caller_id_number_id: str,
                 outbound_flow_id: str):
        """
        :param str outbound_caller_id_name: Specifies the caller ID name.
        :param str outbound_caller_id_number_id: Specifies the caller ID number.
        :param str outbound_flow_id: Outbound whisper flow to be used during an outbound call.
        """
        pulumi.set(__self__, "outbound_caller_id_name", outbound_caller_id_name)
        pulumi.set(__self__, "outbound_caller_id_number_id", outbound_caller_id_number_id)
        pulumi.set(__self__, "outbound_flow_id", outbound_flow_id)

    @property
    @pulumi.getter(name="outboundCallerIdName")
    def outbound_caller_id_name(self) -> str:
        """
        Specifies the caller ID name.
        """
        return pulumi.get(self, "outbound_caller_id_name")

    @property
    @pulumi.getter(name="outboundCallerIdNumberId")
    def outbound_caller_id_number_id(self) -> str:
        """
        Specifies the caller ID number.
        """
        return pulumi.get(self, "outbound_caller_id_number_id")

    @property
    @pulumi.getter(name="outboundFlowId")
    def outbound_flow_id(self) -> str:
        """
        Outbound whisper flow to be used during an outbound call.
        """
        return pulumi.get(self, "outbound_flow_id")


@pulumi.output_type
class GetQuickConnectQuickConnectConfigResult(dict):
    def __init__(__self__, *,
                 phone_configs: Sequence['outputs.GetQuickConnectQuickConnectConfigPhoneConfigResult'],
                 queue_configs: Sequence['outputs.GetQuickConnectQuickConnectConfigQueueConfigResult'],
                 quick_connect_type: str,
                 user_configs: Sequence['outputs.GetQuickConnectQuickConnectConfigUserConfigResult']):
        """
        :param Sequence['GetQuickConnectQuickConnectConfigPhoneConfigArgs'] phone_configs: Phone configuration of the Quick Connect. This is returned only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
        :param Sequence['GetQuickConnectQuickConnectConfigQueueConfigArgs'] queue_configs: Queue configuration of the Quick Connect. This is returned only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
        :param str quick_connect_type: Configuration type of the Quick Connect. Valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
        :param Sequence['GetQuickConnectQuickConnectConfigUserConfigArgs'] user_configs: User configuration of the Quick Connect. This is returned only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
        """
        pulumi.set(__self__, "phone_configs", phone_configs)
        pulumi.set(__self__, "queue_configs", queue_configs)
        pulumi.set(__self__, "quick_connect_type", quick_connect_type)
        pulumi.set(__self__, "user_configs", user_configs)

    @property
    @pulumi.getter(name="phoneConfigs")
    def phone_configs(self) -> Sequence['outputs.GetQuickConnectQuickConnectConfigPhoneConfigResult']:
        """
        Phone configuration of the Quick Connect. This is returned only if `quick_connect_type` is `PHONE_NUMBER`. The `phone_config` block is documented below.
        """
        return pulumi.get(self, "phone_configs")

    @property
    @pulumi.getter(name="queueConfigs")
    def queue_configs(self) -> Sequence['outputs.GetQuickConnectQuickConnectConfigQueueConfigResult']:
        """
        Queue configuration of the Quick Connect. This is returned only if `quick_connect_type` is `QUEUE`. The `queue_config` block is documented below.
        """
        return pulumi.get(self, "queue_configs")

    @property
    @pulumi.getter(name="quickConnectType")
    def quick_connect_type(self) -> str:
        """
        Configuration type of the Quick Connect. Valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
        """
        return pulumi.get(self, "quick_connect_type")

    @property
    @pulumi.getter(name="userConfigs")
    def user_configs(self) -> Sequence['outputs.GetQuickConnectQuickConnectConfigUserConfigResult']:
        """
        User configuration of the Quick Connect. This is returned only if `quick_connect_type` is `USER`. The `user_config` block is documented below.
        """
        return pulumi.get(self, "user_configs")


@pulumi.output_type
class GetQuickConnectQuickConnectConfigPhoneConfigResult(dict):
    def __init__(__self__, *,
                 phone_number: str):
        """
        :param str phone_number: Phone number in in E.164 format.
        """
        pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        """
        Phone number in in E.164 format.
        """
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class GetQuickConnectQuickConnectConfigQueueConfigResult(dict):
    def __init__(__self__, *,
                 contact_flow_id: str,
                 queue_id: str):
        """
        :param str contact_flow_id: Identifier of the contact flow.
        :param str queue_id: Identifier for the queue.
        """
        pulumi.set(__self__, "contact_flow_id", contact_flow_id)
        pulumi.set(__self__, "queue_id", queue_id)

    @property
    @pulumi.getter(name="contactFlowId")
    def contact_flow_id(self) -> str:
        """
        Identifier of the contact flow.
        """
        return pulumi.get(self, "contact_flow_id")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        """
        Identifier for the queue.
        """
        return pulumi.get(self, "queue_id")


@pulumi.output_type
class GetQuickConnectQuickConnectConfigUserConfigResult(dict):
    def __init__(__self__, *,
                 contact_flow_id: str,
                 user_id: str):
        """
        :param str contact_flow_id: Identifier of the contact flow.
        :param str user_id: Identifier for the user.
        """
        pulumi.set(__self__, "contact_flow_id", contact_flow_id)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="contactFlowId")
    def contact_flow_id(self) -> str:
        """
        Identifier of the contact flow.
        """
        return pulumi.get(self, "contact_flow_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        Identifier for the user.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetRoutingProfileMediaConcurrencyResult(dict):
    def __init__(__self__, *,
                 channel: str,
                 concurrency: int):
        """
        :param str channel: Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
        :param int concurrency: Number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "concurrency", concurrency)

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def concurrency(self) -> int:
        """
        Number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
        """
        return pulumi.get(self, "concurrency")


@pulumi.output_type
class GetRoutingProfileQueueConfigResult(dict):
    def __init__(__self__, *,
                 channel: str,
                 delay: int,
                 priority: int,
                 queue_arn: str,
                 queue_id: str,
                 queue_name: str):
        """
        :param str channel: Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
        :param int delay: Delay, in seconds, that a contact should be in the queue before they are routed to an available agent
        :param int priority: Order in which contacts are to be handled for the queue.
        :param str queue_arn: ARN for the queue.
        :param str queue_id: Identifier for the queue.
        :param str queue_name: Name for the queue.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "queue_arn", queue_arn)
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "queue_name", queue_name)

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def delay(self) -> int:
        """
        Delay, in seconds, that a contact should be in the queue before they are routed to an available agent
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Order in which contacts are to be handled for the queue.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> str:
        """
        ARN for the queue.
        """
        return pulumi.get(self, "queue_arn")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        """
        Identifier for the queue.
        """
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        """
        Name for the queue.
        """
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathResult(dict):
    def __init__(__self__, *,
                 level_fives: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelFifeResult'],
                 level_fours: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelFourResult'],
                 level_ones: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelOneResult'],
                 level_threes: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelThreeResult'],
                 level_twos: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelTwoResult']):
        """
        :param Sequence['GetUserHierarchyGroupHierarchyPathLevelFifeArgs'] level_fives: Details of level five. See below.
        :param Sequence['GetUserHierarchyGroupHierarchyPathLevelFourArgs'] level_fours: Details of level four. See below.
        :param Sequence['GetUserHierarchyGroupHierarchyPathLevelOneArgs'] level_ones: Details of level one. See below.
        :param Sequence['GetUserHierarchyGroupHierarchyPathLevelThreeArgs'] level_threes: Details of level three. See below.
        :param Sequence['GetUserHierarchyGroupHierarchyPathLevelTwoArgs'] level_twos: Details of level two. See below.
        """
        pulumi.set(__self__, "level_fives", level_fives)
        pulumi.set(__self__, "level_fours", level_fours)
        pulumi.set(__self__, "level_ones", level_ones)
        pulumi.set(__self__, "level_threes", level_threes)
        pulumi.set(__self__, "level_twos", level_twos)

    @property
    @pulumi.getter(name="levelFives")
    def level_fives(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelFifeResult']:
        """
        Details of level five. See below.
        """
        return pulumi.get(self, "level_fives")

    @property
    @pulumi.getter(name="levelFours")
    def level_fours(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelFourResult']:
        """
        Details of level four. See below.
        """
        return pulumi.get(self, "level_fours")

    @property
    @pulumi.getter(name="levelOnes")
    def level_ones(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelOneResult']:
        """
        Details of level one. See below.
        """
        return pulumi.get(self, "level_ones")

    @property
    @pulumi.getter(name="levelThrees")
    def level_threes(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelThreeResult']:
        """
        Details of level three. See below.
        """
        return pulumi.get(self, "level_threes")

    @property
    @pulumi.getter(name="levelTwos")
    def level_twos(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelTwoResult']:
        """
        Details of level two. See below.
        """
        return pulumi.get(self, "level_twos")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelFifeResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: Returns information on a specific hierarchy group by name
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Returns information on a specific hierarchy group by name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelFourResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: Returns information on a specific hierarchy group by name
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Returns information on a specific hierarchy group by name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelOneResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: Returns information on a specific hierarchy group by name
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Returns information on a specific hierarchy group by name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelThreeResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: Returns information on a specific hierarchy group by name
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Returns information on a specific hierarchy group by name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelTwoResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy group.
        :param str id: The identifier of the hierarchy group.
        :param str name: Returns information on a specific hierarchy group by name
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Returns information on a specific hierarchy group by name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureResult(dict):
    def __init__(__self__, *,
                 level_fives: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelFifeResult'],
                 level_fours: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelFourResult'],
                 level_ones: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelOneResult'],
                 level_threes: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelThreeResult'],
                 level_twos: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelTwoResult']):
        """
        :param Sequence['GetUserHierarchyStructureHierarchyStructureLevelFifeArgs'] level_fives: Details of level five. See below.
        :param Sequence['GetUserHierarchyStructureHierarchyStructureLevelFourArgs'] level_fours: Details of level four. See below.
        :param Sequence['GetUserHierarchyStructureHierarchyStructureLevelOneArgs'] level_ones: Details of level one. See below.
        :param Sequence['GetUserHierarchyStructureHierarchyStructureLevelThreeArgs'] level_threes: Details of level three. See below.
        :param Sequence['GetUserHierarchyStructureHierarchyStructureLevelTwoArgs'] level_twos: Details of level two. See below.
        """
        pulumi.set(__self__, "level_fives", level_fives)
        pulumi.set(__self__, "level_fours", level_fours)
        pulumi.set(__self__, "level_ones", level_ones)
        pulumi.set(__self__, "level_threes", level_threes)
        pulumi.set(__self__, "level_twos", level_twos)

    @property
    @pulumi.getter(name="levelFives")
    def level_fives(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelFifeResult']:
        """
        Details of level five. See below.
        """
        return pulumi.get(self, "level_fives")

    @property
    @pulumi.getter(name="levelFours")
    def level_fours(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelFourResult']:
        """
        Details of level four. See below.
        """
        return pulumi.get(self, "level_fours")

    @property
    @pulumi.getter(name="levelOnes")
    def level_ones(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelOneResult']:
        """
        Details of level one. See below.
        """
        return pulumi.get(self, "level_ones")

    @property
    @pulumi.getter(name="levelThrees")
    def level_threes(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelThreeResult']:
        """
        Details of level three. See below.
        """
        return pulumi.get(self, "level_threes")

    @property
    @pulumi.getter(name="levelTwos")
    def level_twos(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelTwoResult']:
        """
        Details of level two. See below.
        """
        return pulumi.get(self, "level_twos")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelFifeResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        :param str name: Name of the user hierarchy level. Must not be more than 50 characters.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelFourResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        :param str name: Name of the user hierarchy level. Must not be more than 50 characters.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelOneResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        :param str name: Name of the user hierarchy level. Must not be more than 50 characters.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelThreeResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        :param str name: Name of the user hierarchy level. Must not be more than 50 characters.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelTwoResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        """
        :param str arn: ARN of the hierarchy level.
        :param str id: The identifier of the hierarchy level.
        :param str name: Name of the user hierarchy level. Must not be more than 50 characters.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the hierarchy level.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the user hierarchy level. Must not be more than 50 characters.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserIdentityInfoResult(dict):
    def __init__(__self__, *,
                 email: str,
                 first_name: str,
                 last_name: str):
        """
        :param str email: The email address.
        :param str first_name: The first name.
        :param str last_name: The last name.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        """
        The first name.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        """
        The last name.
        """
        return pulumi.get(self, "last_name")


@pulumi.output_type
class GetUserPhoneConfigResult(dict):
    def __init__(__self__, *,
                 after_contact_work_time_limit: int,
                 auto_accept: bool,
                 desk_phone_number: str,
                 phone_type: str):
        """
        :param int after_contact_work_time_limit: The After Call Work (ACW) timeout setting, in seconds.
        :param bool auto_accept: When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
        :param str desk_phone_number: The phone number for the user's desk phone.
        :param str phone_type: The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
        """
        pulumi.set(__self__, "after_contact_work_time_limit", after_contact_work_time_limit)
        pulumi.set(__self__, "auto_accept", auto_accept)
        pulumi.set(__self__, "desk_phone_number", desk_phone_number)
        pulumi.set(__self__, "phone_type", phone_type)

    @property
    @pulumi.getter(name="afterContactWorkTimeLimit")
    def after_contact_work_time_limit(self) -> int:
        """
        The After Call Work (ACW) timeout setting, in seconds.
        """
        return pulumi.get(self, "after_contact_work_time_limit")

    @property
    @pulumi.getter(name="autoAccept")
    def auto_accept(self) -> bool:
        """
        When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
        """
        return pulumi.get(self, "auto_accept")

    @property
    @pulumi.getter(name="deskPhoneNumber")
    def desk_phone_number(self) -> str:
        """
        The phone number for the user's desk phone.
        """
        return pulumi.get(self, "desk_phone_number")

    @property
    @pulumi.getter(name="phoneType")
    def phone_type(self) -> str:
        """
        The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
        """
        return pulumi.get(self, "phone_type")


