# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BotAssociationLexBot',
    'HoursOfOperationConfig',
    'HoursOfOperationConfigEndTime',
    'HoursOfOperationConfigStartTime',
    'InstanceStorageConfigStorageConfig',
    'InstanceStorageConfigStorageConfigKinesisFirehoseConfig',
    'InstanceStorageConfigStorageConfigKinesisStreamConfig',
    'InstanceStorageConfigStorageConfigKinesisVideoStreamConfig',
    'InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig',
    'InstanceStorageConfigStorageConfigS3Config',
    'InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig',
    'PhoneNumberStatus',
    'QueueOutboundCallerConfig',
    'QuickConnectQuickConnectConfig',
    'QuickConnectQuickConnectConfigPhoneConfig',
    'QuickConnectQuickConnectConfigQueueConfig',
    'QuickConnectQuickConnectConfigUserConfig',
    'RoutingProfileMediaConcurrency',
    'RoutingProfileQueueConfig',
    'RoutingProfileQueueConfigsAssociated',
    'UserHierarchyGroupHierarchyPath',
    'UserHierarchyGroupHierarchyPathLevelFife',
    'UserHierarchyGroupHierarchyPathLevelFour',
    'UserHierarchyGroupHierarchyPathLevelOne',
    'UserHierarchyGroupHierarchyPathLevelThree',
    'UserHierarchyGroupHierarchyPathLevelTwo',
    'UserHierarchyStructureHierarchyStructure',
    'UserHierarchyStructureHierarchyStructureLevelFive',
    'UserHierarchyStructureHierarchyStructureLevelFour',
    'UserHierarchyStructureHierarchyStructureLevelOne',
    'UserHierarchyStructureHierarchyStructureLevelThree',
    'UserHierarchyStructureHierarchyStructureLevelTwo',
    'UserIdentityInfo',
    'UserPhoneConfig',
    'GetBotAssociationLexBotResult',
    'GetHoursOfOperationConfigResult',
    'GetHoursOfOperationConfigEndTimeResult',
    'GetHoursOfOperationConfigStartTimeResult',
    'GetInstanceStorageConfigStorageConfigResult',
    'GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigResult',
    'GetInstanceStorageConfigStorageConfigKinesisStreamConfigResult',
    'GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigResult',
    'GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigResult',
    'GetInstanceStorageConfigStorageConfigS3ConfigResult',
    'GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigResult',
    'GetQueueOutboundCallerConfigResult',
    'GetQuickConnectQuickConnectConfigResult',
    'GetQuickConnectQuickConnectConfigPhoneConfigResult',
    'GetQuickConnectQuickConnectConfigQueueConfigResult',
    'GetQuickConnectQuickConnectConfigUserConfigResult',
    'GetRoutingProfileMediaConcurrencyResult',
    'GetRoutingProfileQueueConfigResult',
    'GetUserHierarchyGroupHierarchyPathResult',
    'GetUserHierarchyGroupHierarchyPathLevelFifeResult',
    'GetUserHierarchyGroupHierarchyPathLevelFourResult',
    'GetUserHierarchyGroupHierarchyPathLevelOneResult',
    'GetUserHierarchyGroupHierarchyPathLevelThreeResult',
    'GetUserHierarchyGroupHierarchyPathLevelTwoResult',
    'GetUserHierarchyStructureHierarchyStructureResult',
    'GetUserHierarchyStructureHierarchyStructureLevelFifeResult',
    'GetUserHierarchyStructureHierarchyStructureLevelFourResult',
    'GetUserHierarchyStructureHierarchyStructureLevelOneResult',
    'GetUserHierarchyStructureHierarchyStructureLevelThreeResult',
    'GetUserHierarchyStructureHierarchyStructureLevelTwoResult',
]

@pulumi.output_type
class BotAssociationLexBot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lexRegion":
            suggest = "lex_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAssociationLexBot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAssociationLexBot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAssociationLexBot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 lex_region: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if lex_region is not None:
            pulumi.set(__self__, "lex_region", lex_region)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="lexRegion")
    def lex_region(self) -> Optional[str]:
        return pulumi.get(self, "lex_region")


@pulumi.output_type
class HoursOfOperationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HoursOfOperationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HoursOfOperationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HoursOfOperationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: str,
                 end_time: 'outputs.HoursOfOperationConfigEndTime',
                 start_time: 'outputs.HoursOfOperationConfigStartTime'):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> 'outputs.HoursOfOperationConfigEndTime':
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> 'outputs.HoursOfOperationConfigStartTime':
        return pulumi.get(self, "start_time")


@pulumi.output_type
class HoursOfOperationConfigEndTime(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class HoursOfOperationConfigStartTime(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class InstanceStorageConfigStorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageType":
            suggest = "storage_type"
        elif key == "kinesisFirehoseConfig":
            suggest = "kinesis_firehose_config"
        elif key == "kinesisStreamConfig":
            suggest = "kinesis_stream_config"
        elif key == "kinesisVideoStreamConfig":
            suggest = "kinesis_video_stream_config"
        elif key == "s3Config":
            suggest = "s3_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_type: str,
                 kinesis_firehose_config: Optional['outputs.InstanceStorageConfigStorageConfigKinesisFirehoseConfig'] = None,
                 kinesis_stream_config: Optional['outputs.InstanceStorageConfigStorageConfigKinesisStreamConfig'] = None,
                 kinesis_video_stream_config: Optional['outputs.InstanceStorageConfigStorageConfigKinesisVideoStreamConfig'] = None,
                 s3_config: Optional['outputs.InstanceStorageConfigStorageConfigS3Config'] = None):
        pulumi.set(__self__, "storage_type", storage_type)
        if kinesis_firehose_config is not None:
            pulumi.set(__self__, "kinesis_firehose_config", kinesis_firehose_config)
        if kinesis_stream_config is not None:
            pulumi.set(__self__, "kinesis_stream_config", kinesis_stream_config)
        if kinesis_video_stream_config is not None:
            pulumi.set(__self__, "kinesis_video_stream_config", kinesis_video_stream_config)
        if s3_config is not None:
            pulumi.set(__self__, "s3_config", s3_config)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="kinesisFirehoseConfig")
    def kinesis_firehose_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigKinesisFirehoseConfig']:
        return pulumi.get(self, "kinesis_firehose_config")

    @property
    @pulumi.getter(name="kinesisStreamConfig")
    def kinesis_stream_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigKinesisStreamConfig']:
        return pulumi.get(self, "kinesis_stream_config")

    @property
    @pulumi.getter(name="kinesisVideoStreamConfig")
    def kinesis_video_stream_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigKinesisVideoStreamConfig']:
        return pulumi.get(self, "kinesis_video_stream_config")

    @property
    @pulumi.getter(name="s3Config")
    def s3_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigS3Config']:
        return pulumi.get(self, "s3_config")


@pulumi.output_type
class InstanceStorageConfigStorageConfigKinesisFirehoseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firehoseArn":
            suggest = "firehose_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigKinesisFirehoseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigKinesisFirehoseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigKinesisFirehoseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 firehose_arn: str):
        pulumi.set(__self__, "firehose_arn", firehose_arn)

    @property
    @pulumi.getter(name="firehoseArn")
    def firehose_arn(self) -> str:
        return pulumi.get(self, "firehose_arn")


@pulumi.output_type
class InstanceStorageConfigStorageConfigKinesisStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigKinesisStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigKinesisStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigKinesisStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_arn: str):
        pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class InstanceStorageConfigStorageConfigKinesisVideoStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionConfig":
            suggest = "encryption_config"
        elif key == "retentionPeriodHours":
            suggest = "retention_period_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigKinesisVideoStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigKinesisVideoStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigKinesisVideoStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_config: 'outputs.InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig',
                 prefix: str,
                 retention_period_hours: int):
        pulumi.set(__self__, "encryption_config", encryption_config)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "retention_period_hours", retention_period_hours)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> 'outputs.InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig':
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="retentionPeriodHours")
    def retention_period_hours(self) -> int:
        return pulumi.get(self, "retention_period_hours")


@pulumi.output_type
class InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: str,
                 key_id: str):
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")


@pulumi.output_type
class InstanceStorageConfigStorageConfigS3Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "bucketPrefix":
            suggest = "bucket_prefix"
        elif key == "encryptionConfig":
            suggest = "encryption_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigS3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigS3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigS3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_prefix: str,
                 encryption_config: Optional['outputs.InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig'] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> str:
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional['outputs.InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig']:
        return pulumi.get(self, "encryption_config")


@pulumi.output_type
class InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: str,
                 key_id: str):
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")


@pulumi.output_type
class PhoneNumberStatus(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class QueueOutboundCallerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outboundCallerIdName":
            suggest = "outbound_caller_id_name"
        elif key == "outboundCallerIdNumberId":
            suggest = "outbound_caller_id_number_id"
        elif key == "outboundFlowId":
            suggest = "outbound_flow_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueOutboundCallerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueOutboundCallerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueOutboundCallerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 outbound_caller_id_name: Optional[str] = None,
                 outbound_caller_id_number_id: Optional[str] = None,
                 outbound_flow_id: Optional[str] = None):
        if outbound_caller_id_name is not None:
            pulumi.set(__self__, "outbound_caller_id_name", outbound_caller_id_name)
        if outbound_caller_id_number_id is not None:
            pulumi.set(__self__, "outbound_caller_id_number_id", outbound_caller_id_number_id)
        if outbound_flow_id is not None:
            pulumi.set(__self__, "outbound_flow_id", outbound_flow_id)

    @property
    @pulumi.getter(name="outboundCallerIdName")
    def outbound_caller_id_name(self) -> Optional[str]:
        return pulumi.get(self, "outbound_caller_id_name")

    @property
    @pulumi.getter(name="outboundCallerIdNumberId")
    def outbound_caller_id_number_id(self) -> Optional[str]:
        return pulumi.get(self, "outbound_caller_id_number_id")

    @property
    @pulumi.getter(name="outboundFlowId")
    def outbound_flow_id(self) -> Optional[str]:
        return pulumi.get(self, "outbound_flow_id")


@pulumi.output_type
class QuickConnectQuickConnectConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quickConnectType":
            suggest = "quick_connect_type"
        elif key == "phoneConfigs":
            suggest = "phone_configs"
        elif key == "queueConfigs":
            suggest = "queue_configs"
        elif key == "userConfigs":
            suggest = "user_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quick_connect_type: str,
                 phone_configs: Optional[Sequence['outputs.QuickConnectQuickConnectConfigPhoneConfig']] = None,
                 queue_configs: Optional[Sequence['outputs.QuickConnectQuickConnectConfigQueueConfig']] = None,
                 user_configs: Optional[Sequence['outputs.QuickConnectQuickConnectConfigUserConfig']] = None):
        pulumi.set(__self__, "quick_connect_type", quick_connect_type)
        if phone_configs is not None:
            pulumi.set(__self__, "phone_configs", phone_configs)
        if queue_configs is not None:
            pulumi.set(__self__, "queue_configs", queue_configs)
        if user_configs is not None:
            pulumi.set(__self__, "user_configs", user_configs)

    @property
    @pulumi.getter(name="quickConnectType")
    def quick_connect_type(self) -> str:
        return pulumi.get(self, "quick_connect_type")

    @property
    @pulumi.getter(name="phoneConfigs")
    def phone_configs(self) -> Optional[Sequence['outputs.QuickConnectQuickConnectConfigPhoneConfig']]:
        return pulumi.get(self, "phone_configs")

    @property
    @pulumi.getter(name="queueConfigs")
    def queue_configs(self) -> Optional[Sequence['outputs.QuickConnectQuickConnectConfigQueueConfig']]:
        return pulumi.get(self, "queue_configs")

    @property
    @pulumi.getter(name="userConfigs")
    def user_configs(self) -> Optional[Sequence['outputs.QuickConnectQuickConnectConfigUserConfig']]:
        return pulumi.get(self, "user_configs")


@pulumi.output_type
class QuickConnectQuickConnectConfigPhoneConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQuickConnectConfigPhoneConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQuickConnectConfigPhoneConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQuickConnectConfigPhoneConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_number: str):
        pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class QuickConnectQuickConnectConfigQueueConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowId":
            suggest = "contact_flow_id"
        elif key == "queueId":
            suggest = "queue_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQuickConnectConfigQueueConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQuickConnectConfigQueueConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQuickConnectConfigQueueConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_id: str,
                 queue_id: str):
        pulumi.set(__self__, "contact_flow_id", contact_flow_id)
        pulumi.set(__self__, "queue_id", queue_id)

    @property
    @pulumi.getter(name="contactFlowId")
    def contact_flow_id(self) -> str:
        return pulumi.get(self, "contact_flow_id")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")


@pulumi.output_type
class QuickConnectQuickConnectConfigUserConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowId":
            suggest = "contact_flow_id"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQuickConnectConfigUserConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQuickConnectConfigUserConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQuickConnectConfigUserConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_id: str,
                 user_id: str):
        pulumi.set(__self__, "contact_flow_id", contact_flow_id)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="contactFlowId")
    def contact_flow_id(self) -> str:
        return pulumi.get(self, "contact_flow_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class RoutingProfileMediaConcurrency(dict):
    def __init__(__self__, *,
                 channel: str,
                 concurrency: int):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "concurrency", concurrency)

    @property
    @pulumi.getter
    def channel(self) -> str:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def concurrency(self) -> int:
        return pulumi.get(self, "concurrency")


@pulumi.output_type
class RoutingProfileQueueConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueId":
            suggest = "queue_id"
        elif key == "queueArn":
            suggest = "queue_arn"
        elif key == "queueName":
            suggest = "queue_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileQueueConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileQueueConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileQueueConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: str,
                 delay: int,
                 priority: int,
                 queue_id: str,
                 queue_arn: Optional[str] = None,
                 queue_name: Optional[str] = None):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "queue_id", queue_id)
        if queue_arn is not None:
            pulumi.set(__self__, "queue_arn", queue_arn)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)

    @property
    @pulumi.getter
    def channel(self) -> str:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def delay(self) -> int:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> Optional[str]:
        return pulumi.get(self, "queue_arn")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class RoutingProfileQueueConfigsAssociated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueArn":
            suggest = "queue_arn"
        elif key == "queueId":
            suggest = "queue_id"
        elif key == "queueName":
            suggest = "queue_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileQueueConfigsAssociated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileQueueConfigsAssociated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileQueueConfigsAssociated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: Optional[str] = None,
                 delay: Optional[int] = None,
                 priority: Optional[int] = None,
                 queue_arn: Optional[str] = None,
                 queue_id: Optional[str] = None,
                 queue_name: Optional[str] = None):
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if queue_arn is not None:
            pulumi.set(__self__, "queue_arn", queue_arn)
        if queue_id is not None:
            pulumi.set(__self__, "queue_id", queue_id)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)

    @property
    @pulumi.getter
    def channel(self) -> Optional[str]:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def delay(self) -> Optional[int]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> Optional[str]:
        return pulumi.get(self, "queue_arn")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> Optional[str]:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "levelFives":
            suggest = "level_fives"
        elif key == "levelFours":
            suggest = "level_fours"
        elif key == "levelOnes":
            suggest = "level_ones"
        elif key == "levelThrees":
            suggest = "level_threes"
        elif key == "levelTwos":
            suggest = "level_twos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserHierarchyGroupHierarchyPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserHierarchyGroupHierarchyPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserHierarchyGroupHierarchyPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level_fives: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelFife']] = None,
                 level_fours: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelFour']] = None,
                 level_ones: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelOne']] = None,
                 level_threes: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelThree']] = None,
                 level_twos: Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelTwo']] = None):
        if level_fives is not None:
            pulumi.set(__self__, "level_fives", level_fives)
        if level_fours is not None:
            pulumi.set(__self__, "level_fours", level_fours)
        if level_ones is not None:
            pulumi.set(__self__, "level_ones", level_ones)
        if level_threes is not None:
            pulumi.set(__self__, "level_threes", level_threes)
        if level_twos is not None:
            pulumi.set(__self__, "level_twos", level_twos)

    @property
    @pulumi.getter(name="levelFives")
    def level_fives(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelFife']]:
        return pulumi.get(self, "level_fives")

    @property
    @pulumi.getter(name="levelFours")
    def level_fours(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelFour']]:
        return pulumi.get(self, "level_fours")

    @property
    @pulumi.getter(name="levelOnes")
    def level_ones(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelOne']]:
        return pulumi.get(self, "level_ones")

    @property
    @pulumi.getter(name="levelThrees")
    def level_threes(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelThree']]:
        return pulumi.get(self, "level_threes")

    @property
    @pulumi.getter(name="levelTwos")
    def level_twos(self) -> Optional[Sequence['outputs.UserHierarchyGroupHierarchyPathLevelTwo']]:
        return pulumi.get(self, "level_twos")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelFife(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelFour(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelOne(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelThree(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyGroupHierarchyPathLevelTwo(dict):
    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "levelFive":
            suggest = "level_five"
        elif key == "levelFour":
            suggest = "level_four"
        elif key == "levelOne":
            suggest = "level_one"
        elif key == "levelThree":
            suggest = "level_three"
        elif key == "levelTwo":
            suggest = "level_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserHierarchyStructureHierarchyStructure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserHierarchyStructureHierarchyStructure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserHierarchyStructureHierarchyStructure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level_five: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelFive'] = None,
                 level_four: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelFour'] = None,
                 level_one: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelOne'] = None,
                 level_three: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelThree'] = None,
                 level_two: Optional['outputs.UserHierarchyStructureHierarchyStructureLevelTwo'] = None):
        if level_five is not None:
            pulumi.set(__self__, "level_five", level_five)
        if level_four is not None:
            pulumi.set(__self__, "level_four", level_four)
        if level_one is not None:
            pulumi.set(__self__, "level_one", level_one)
        if level_three is not None:
            pulumi.set(__self__, "level_three", level_three)
        if level_two is not None:
            pulumi.set(__self__, "level_two", level_two)

    @property
    @pulumi.getter(name="levelFive")
    def level_five(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelFive']:
        return pulumi.get(self, "level_five")

    @property
    @pulumi.getter(name="levelFour")
    def level_four(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelFour']:
        return pulumi.get(self, "level_four")

    @property
    @pulumi.getter(name="levelOne")
    def level_one(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelOne']:
        return pulumi.get(self, "level_one")

    @property
    @pulumi.getter(name="levelThree")
    def level_three(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelThree']:
        return pulumi.get(self, "level_three")

    @property
    @pulumi.getter(name="levelTwo")
    def level_two(self) -> Optional['outputs.UserHierarchyStructureHierarchyStructureLevelTwo']:
        return pulumi.get(self, "level_two")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelFive(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelFour(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelOne(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelThree(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class UserHierarchyStructureHierarchyStructureLevelTwo(dict):
    def __init__(__self__, *,
                 name: str,
                 arn: Optional[str] = None,
                 id: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class UserIdentityInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")


@pulumi.output_type
class UserPhoneConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneType":
            suggest = "phone_type"
        elif key == "afterContactWorkTimeLimit":
            suggest = "after_contact_work_time_limit"
        elif key == "autoAccept":
            suggest = "auto_accept"
        elif key == "deskPhoneNumber":
            suggest = "desk_phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPhoneConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPhoneConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPhoneConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_type: str,
                 after_contact_work_time_limit: Optional[int] = None,
                 auto_accept: Optional[bool] = None,
                 desk_phone_number: Optional[str] = None):
        pulumi.set(__self__, "phone_type", phone_type)
        if after_contact_work_time_limit is not None:
            pulumi.set(__self__, "after_contact_work_time_limit", after_contact_work_time_limit)
        if auto_accept is not None:
            pulumi.set(__self__, "auto_accept", auto_accept)
        if desk_phone_number is not None:
            pulumi.set(__self__, "desk_phone_number", desk_phone_number)

    @property
    @pulumi.getter(name="phoneType")
    def phone_type(self) -> str:
        return pulumi.get(self, "phone_type")

    @property
    @pulumi.getter(name="afterContactWorkTimeLimit")
    def after_contact_work_time_limit(self) -> Optional[int]:
        return pulumi.get(self, "after_contact_work_time_limit")

    @property
    @pulumi.getter(name="autoAccept")
    def auto_accept(self) -> Optional[bool]:
        return pulumi.get(self, "auto_accept")

    @property
    @pulumi.getter(name="deskPhoneNumber")
    def desk_phone_number(self) -> Optional[str]:
        return pulumi.get(self, "desk_phone_number")


@pulumi.output_type
class GetBotAssociationLexBotResult(dict):
    def __init__(__self__, *,
                 lex_region: str,
                 name: str):
        pulumi.set(__self__, "lex_region", lex_region)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lexRegion")
    def lex_region(self) -> str:
        return pulumi.get(self, "lex_region")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetHoursOfOperationConfigResult(dict):
    def __init__(__self__, *,
                 day: str,
                 end_times: Sequence['outputs.GetHoursOfOperationConfigEndTimeResult'],
                 start_times: Sequence['outputs.GetHoursOfOperationConfigStartTimeResult']):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end_times", end_times)
        pulumi.set(__self__, "start_times", start_times)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="endTimes")
    def end_times(self) -> Sequence['outputs.GetHoursOfOperationConfigEndTimeResult']:
        return pulumi.get(self, "end_times")

    @property
    @pulumi.getter(name="startTimes")
    def start_times(self) -> Sequence['outputs.GetHoursOfOperationConfigStartTimeResult']:
        return pulumi.get(self, "start_times")


@pulumi.output_type
class GetHoursOfOperationConfigEndTimeResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetHoursOfOperationConfigStartTimeResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigResult(dict):
    def __init__(__self__, *,
                 kinesis_firehose_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigResult'],
                 kinesis_stream_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisStreamConfigResult'],
                 kinesis_video_stream_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigResult'],
                 s3_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigS3ConfigResult'],
                 storage_type: str):
        pulumi.set(__self__, "kinesis_firehose_configs", kinesis_firehose_configs)
        pulumi.set(__self__, "kinesis_stream_configs", kinesis_stream_configs)
        pulumi.set(__self__, "kinesis_video_stream_configs", kinesis_video_stream_configs)
        pulumi.set(__self__, "s3_configs", s3_configs)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter(name="kinesisFirehoseConfigs")
    def kinesis_firehose_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigResult']:
        return pulumi.get(self, "kinesis_firehose_configs")

    @property
    @pulumi.getter(name="kinesisStreamConfigs")
    def kinesis_stream_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisStreamConfigResult']:
        return pulumi.get(self, "kinesis_stream_configs")

    @property
    @pulumi.getter(name="kinesisVideoStreamConfigs")
    def kinesis_video_stream_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigResult']:
        return pulumi.get(self, "kinesis_video_stream_configs")

    @property
    @pulumi.getter(name="s3Configs")
    def s3_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigS3ConfigResult']:
        return pulumi.get(self, "s3_configs")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigResult(dict):
    def __init__(__self__, *,
                 firehose_arn: str):
        pulumi.set(__self__, "firehose_arn", firehose_arn)

    @property
    @pulumi.getter(name="firehoseArn")
    def firehose_arn(self) -> str:
        return pulumi.get(self, "firehose_arn")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigKinesisStreamConfigResult(dict):
    def __init__(__self__, *,
                 stream_arn: str):
        pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigResult(dict):
    def __init__(__self__, *,
                 encryption_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigResult'],
                 prefix: str,
                 retention_period_hours: int):
        pulumi.set(__self__, "encryption_configs", encryption_configs)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "retention_period_hours", retention_period_hours)

    @property
    @pulumi.getter(name="encryptionConfigs")
    def encryption_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigResult']:
        return pulumi.get(self, "encryption_configs")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="retentionPeriodHours")
    def retention_period_hours(self) -> int:
        return pulumi.get(self, "retention_period_hours")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigResult(dict):
    def __init__(__self__, *,
                 encryption_type: str,
                 key_id: str):
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigS3ConfigResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_prefix: str,
                 encryption_configs: Sequence['outputs.GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigResult']):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        pulumi.set(__self__, "encryption_configs", encryption_configs)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> str:
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter(name="encryptionConfigs")
    def encryption_configs(self) -> Sequence['outputs.GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigResult']:
        return pulumi.get(self, "encryption_configs")


@pulumi.output_type
class GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigResult(dict):
    def __init__(__self__, *,
                 encryption_type: str,
                 key_id: str):
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")


@pulumi.output_type
class GetQueueOutboundCallerConfigResult(dict):
    def __init__(__self__, *,
                 outbound_caller_id_name: str,
                 outbound_caller_id_number_id: str,
                 outbound_flow_id: str):
        pulumi.set(__self__, "outbound_caller_id_name", outbound_caller_id_name)
        pulumi.set(__self__, "outbound_caller_id_number_id", outbound_caller_id_number_id)
        pulumi.set(__self__, "outbound_flow_id", outbound_flow_id)

    @property
    @pulumi.getter(name="outboundCallerIdName")
    def outbound_caller_id_name(self) -> str:
        return pulumi.get(self, "outbound_caller_id_name")

    @property
    @pulumi.getter(name="outboundCallerIdNumberId")
    def outbound_caller_id_number_id(self) -> str:
        return pulumi.get(self, "outbound_caller_id_number_id")

    @property
    @pulumi.getter(name="outboundFlowId")
    def outbound_flow_id(self) -> str:
        return pulumi.get(self, "outbound_flow_id")


@pulumi.output_type
class GetQuickConnectQuickConnectConfigResult(dict):
    def __init__(__self__, *,
                 phone_configs: Sequence['outputs.GetQuickConnectQuickConnectConfigPhoneConfigResult'],
                 queue_configs: Sequence['outputs.GetQuickConnectQuickConnectConfigQueueConfigResult'],
                 quick_connect_type: str,
                 user_configs: Sequence['outputs.GetQuickConnectQuickConnectConfigUserConfigResult']):
        pulumi.set(__self__, "phone_configs", phone_configs)
        pulumi.set(__self__, "queue_configs", queue_configs)
        pulumi.set(__self__, "quick_connect_type", quick_connect_type)
        pulumi.set(__self__, "user_configs", user_configs)

    @property
    @pulumi.getter(name="phoneConfigs")
    def phone_configs(self) -> Sequence['outputs.GetQuickConnectQuickConnectConfigPhoneConfigResult']:
        return pulumi.get(self, "phone_configs")

    @property
    @pulumi.getter(name="queueConfigs")
    def queue_configs(self) -> Sequence['outputs.GetQuickConnectQuickConnectConfigQueueConfigResult']:
        return pulumi.get(self, "queue_configs")

    @property
    @pulumi.getter(name="quickConnectType")
    def quick_connect_type(self) -> str:
        return pulumi.get(self, "quick_connect_type")

    @property
    @pulumi.getter(name="userConfigs")
    def user_configs(self) -> Sequence['outputs.GetQuickConnectQuickConnectConfigUserConfigResult']:
        return pulumi.get(self, "user_configs")


@pulumi.output_type
class GetQuickConnectQuickConnectConfigPhoneConfigResult(dict):
    def __init__(__self__, *,
                 phone_number: str):
        pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class GetQuickConnectQuickConnectConfigQueueConfigResult(dict):
    def __init__(__self__, *,
                 contact_flow_id: str,
                 queue_id: str):
        pulumi.set(__self__, "contact_flow_id", contact_flow_id)
        pulumi.set(__self__, "queue_id", queue_id)

    @property
    @pulumi.getter(name="contactFlowId")
    def contact_flow_id(self) -> str:
        return pulumi.get(self, "contact_flow_id")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")


@pulumi.output_type
class GetQuickConnectQuickConnectConfigUserConfigResult(dict):
    def __init__(__self__, *,
                 contact_flow_id: str,
                 user_id: str):
        pulumi.set(__self__, "contact_flow_id", contact_flow_id)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="contactFlowId")
    def contact_flow_id(self) -> str:
        return pulumi.get(self, "contact_flow_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetRoutingProfileMediaConcurrencyResult(dict):
    def __init__(__self__, *,
                 channel: str,
                 concurrency: int):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "concurrency", concurrency)

    @property
    @pulumi.getter
    def channel(self) -> str:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def concurrency(self) -> int:
        return pulumi.get(self, "concurrency")


@pulumi.output_type
class GetRoutingProfileQueueConfigResult(dict):
    def __init__(__self__, *,
                 channel: str,
                 delay: int,
                 priority: int,
                 queue_arn: str,
                 queue_id: str,
                 queue_name: str):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "queue_arn", queue_arn)
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "queue_name", queue_name)

    @property
    @pulumi.getter
    def channel(self) -> str:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def delay(self) -> int:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> str:
        return pulumi.get(self, "queue_arn")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathResult(dict):
    def __init__(__self__, *,
                 level_fives: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelFifeResult'],
                 level_fours: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelFourResult'],
                 level_ones: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelOneResult'],
                 level_threes: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelThreeResult'],
                 level_twos: Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelTwoResult']):
        pulumi.set(__self__, "level_fives", level_fives)
        pulumi.set(__self__, "level_fours", level_fours)
        pulumi.set(__self__, "level_ones", level_ones)
        pulumi.set(__self__, "level_threes", level_threes)
        pulumi.set(__self__, "level_twos", level_twos)

    @property
    @pulumi.getter(name="levelFives")
    def level_fives(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelFifeResult']:
        return pulumi.get(self, "level_fives")

    @property
    @pulumi.getter(name="levelFours")
    def level_fours(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelFourResult']:
        return pulumi.get(self, "level_fours")

    @property
    @pulumi.getter(name="levelOnes")
    def level_ones(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelOneResult']:
        return pulumi.get(self, "level_ones")

    @property
    @pulumi.getter(name="levelThrees")
    def level_threes(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelThreeResult']:
        return pulumi.get(self, "level_threes")

    @property
    @pulumi.getter(name="levelTwos")
    def level_twos(self) -> Sequence['outputs.GetUserHierarchyGroupHierarchyPathLevelTwoResult']:
        return pulumi.get(self, "level_twos")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelFifeResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelFourResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelOneResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelThreeResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyGroupHierarchyPathLevelTwoResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureResult(dict):
    def __init__(__self__, *,
                 level_fives: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelFifeResult'],
                 level_fours: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelFourResult'],
                 level_ones: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelOneResult'],
                 level_threes: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelThreeResult'],
                 level_twos: Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelTwoResult']):
        pulumi.set(__self__, "level_fives", level_fives)
        pulumi.set(__self__, "level_fours", level_fours)
        pulumi.set(__self__, "level_ones", level_ones)
        pulumi.set(__self__, "level_threes", level_threes)
        pulumi.set(__self__, "level_twos", level_twos)

    @property
    @pulumi.getter(name="levelFives")
    def level_fives(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelFifeResult']:
        return pulumi.get(self, "level_fives")

    @property
    @pulumi.getter(name="levelFours")
    def level_fours(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelFourResult']:
        return pulumi.get(self, "level_fours")

    @property
    @pulumi.getter(name="levelOnes")
    def level_ones(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelOneResult']:
        return pulumi.get(self, "level_ones")

    @property
    @pulumi.getter(name="levelThrees")
    def level_threes(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelThreeResult']:
        return pulumi.get(self, "level_threes")

    @property
    @pulumi.getter(name="levelTwos")
    def level_twos(self) -> Sequence['outputs.GetUserHierarchyStructureHierarchyStructureLevelTwoResult']:
        return pulumi.get(self, "level_twos")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelFifeResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelFourResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelOneResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelThreeResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserHierarchyStructureHierarchyStructureLevelTwoResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 id: str,
                 name: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


