# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkPeeringConnectionsResult',
    'AwaitableGetNetworkPeeringConnectionsResult',
    'get_network_peering_connections',
    'get_network_peering_connections_output',
]

@pulumi.output_type
class GetNetworkPeeringConnectionsResult:
    """
    A collection of values returned by getNetworkPeeringConnections.
    """
    def __init__(__self__, id=None, odb_peering_connections=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if odb_peering_connections and not isinstance(odb_peering_connections, list):
            raise TypeError("Expected argument 'odb_peering_connections' to be a list")
        pulumi.set(__self__, "odb_peering_connections", odb_peering_connections)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="odbPeeringConnections")
    def odb_peering_connections(self) -> Optional[Sequence['outputs.GetNetworkPeeringConnectionsOdbPeeringConnectionResult']]:
        """
        The list of ODB peering connections. A summary of an ODB peering connection.
        """
        return pulumi.get(self, "odb_peering_connections")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetNetworkPeeringConnectionsResult(GetNetworkPeeringConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkPeeringConnectionsResult(
            id=self.id,
            odb_peering_connections=self.odb_peering_connections,
            region=self.region)


def get_network_peering_connections(odb_peering_connections: Optional[Sequence[Union['GetNetworkPeeringConnectionsOdbPeeringConnectionArgs', 'GetNetworkPeeringConnectionsOdbPeeringConnectionArgsDict']]] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkPeeringConnectionsResult:
    """
    Data source for retrieving all oracle database network peering resource in Oracle Database@AWS.

    You can find out more about Oracle Database@AWS from [User Guide](https://docs.aws.amazon.com/odb/latest/UserGuide/what-is-odb.html).

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.odb.get_network_peering_connections()
    ```


    :param Sequence[Union['GetNetworkPeeringConnectionsOdbPeeringConnectionArgs', 'GetNetworkPeeringConnectionsOdbPeeringConnectionArgsDict']] odb_peering_connections: The list of ODB peering connections. A summary of an ODB peering connection.
    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    """
    __args__ = dict()
    __args__['odbPeeringConnections'] = odb_peering_connections
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:odb/getNetworkPeeringConnections:getNetworkPeeringConnections', __args__, opts=opts, typ=GetNetworkPeeringConnectionsResult).value

    return AwaitableGetNetworkPeeringConnectionsResult(
        id=pulumi.get(__ret__, 'id'),
        odb_peering_connections=pulumi.get(__ret__, 'odb_peering_connections'),
        region=pulumi.get(__ret__, 'region'))
def get_network_peering_connections_output(odb_peering_connections: Optional[pulumi.Input[Optional[Sequence[Union['GetNetworkPeeringConnectionsOdbPeeringConnectionArgs', 'GetNetworkPeeringConnectionsOdbPeeringConnectionArgsDict']]]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkPeeringConnectionsResult]:
    """
    Data source for retrieving all oracle database network peering resource in Oracle Database@AWS.

    You can find out more about Oracle Database@AWS from [User Guide](https://docs.aws.amazon.com/odb/latest/UserGuide/what-is-odb.html).

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.odb.get_network_peering_connections()
    ```


    :param Sequence[Union['GetNetworkPeeringConnectionsOdbPeeringConnectionArgs', 'GetNetworkPeeringConnectionsOdbPeeringConnectionArgsDict']] odb_peering_connections: The list of ODB peering connections. A summary of an ODB peering connection.
    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    """
    __args__ = dict()
    __args__['odbPeeringConnections'] = odb_peering_connections
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws:odb/getNetworkPeeringConnections:getNetworkPeeringConnections', __args__, opts=opts, typ=GetNetworkPeeringConnectionsResult)
    return __ret__.apply(lambda __response__: GetNetworkPeeringConnectionsResult(
        id=pulumi.get(__response__, 'id'),
        odb_peering_connections=pulumi.get(__response__, 'odb_peering_connections'),
        region=pulumi.get(__response__, 'region')))
