# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCloudAutonomousVmClusterResult',
    'AwaitableGetCloudAutonomousVmClusterResult',
    'get_cloud_autonomous_vm_cluster',
    'get_cloud_autonomous_vm_cluster_output',
]

@pulumi.output_type
class GetCloudAutonomousVmClusterResult:
    """
    A collection of values returned by getCloudAutonomousVmCluster.
    """
    def __init__(__self__, arn=None, autonomous_data_storage_percentage=None, autonomous_data_storage_size_in_tbs=None, available_autonomous_data_storage_size_in_tbs=None, available_container_databases=None, available_cpus=None, cloud_exadata_infrastructure_id=None, compute_model=None, cpu_core_count=None, cpu_core_count_per_node=None, cpu_percentage=None, created_at=None, data_storage_size_in_gbs=None, data_storage_size_in_tbs=None, db_servers=None, description=None, display_name=None, domain=None, exadata_storage_in_tbs_lowest_scaled_value=None, hostname=None, id=None, is_mtls_enabled_vm_cluster=None, license_model=None, maintenance_windows=None, max_acds_lowest_scaled_value=None, memory_per_oracle_compute_unit_in_gbs=None, memory_size_in_gbs=None, node_count=None, non_provisionable_autonomous_container_databases=None, oci_resource_anchor_name=None, oci_url=None, ocid=None, odb_network_id=None, odb_node_storage_size_in_gbs=None, percent_progress=None, provisionable_autonomous_container_databases=None, provisioned_autonomous_container_databases=None, provisioned_cpus=None, reclaimable_cpus=None, region=None, reserved_cpus=None, scan_listener_port_non_tls=None, scan_listener_port_tls=None, shape=None, status=None, status_reason=None, tags=None, time_database_ssl_certificate_expires=None, time_ords_certificate_expires=None, time_zone=None, total_container_databases=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if autonomous_data_storage_percentage and not isinstance(autonomous_data_storage_percentage, float):
            raise TypeError("Expected argument 'autonomous_data_storage_percentage' to be a float")
        pulumi.set(__self__, "autonomous_data_storage_percentage", autonomous_data_storage_percentage)
        if autonomous_data_storage_size_in_tbs and not isinstance(autonomous_data_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'autonomous_data_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "autonomous_data_storage_size_in_tbs", autonomous_data_storage_size_in_tbs)
        if available_autonomous_data_storage_size_in_tbs and not isinstance(available_autonomous_data_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'available_autonomous_data_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "available_autonomous_data_storage_size_in_tbs", available_autonomous_data_storage_size_in_tbs)
        if available_container_databases and not isinstance(available_container_databases, int):
            raise TypeError("Expected argument 'available_container_databases' to be a int")
        pulumi.set(__self__, "available_container_databases", available_container_databases)
        if available_cpus and not isinstance(available_cpus, float):
            raise TypeError("Expected argument 'available_cpus' to be a float")
        pulumi.set(__self__, "available_cpus", available_cpus)
        if cloud_exadata_infrastructure_id and not isinstance(cloud_exadata_infrastructure_id, str):
            raise TypeError("Expected argument 'cloud_exadata_infrastructure_id' to be a str")
        pulumi.set(__self__, "cloud_exadata_infrastructure_id", cloud_exadata_infrastructure_id)
        if compute_model and not isinstance(compute_model, str):
            raise TypeError("Expected argument 'compute_model' to be a str")
        pulumi.set(__self__, "compute_model", compute_model)
        if cpu_core_count and not isinstance(cpu_core_count, int):
            raise TypeError("Expected argument 'cpu_core_count' to be a int")
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if cpu_core_count_per_node and not isinstance(cpu_core_count_per_node, int):
            raise TypeError("Expected argument 'cpu_core_count_per_node' to be a int")
        pulumi.set(__self__, "cpu_core_count_per_node", cpu_core_count_per_node)
        if cpu_percentage and not isinstance(cpu_percentage, float):
            raise TypeError("Expected argument 'cpu_percentage' to be a float")
        pulumi.set(__self__, "cpu_percentage", cpu_percentage)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if data_storage_size_in_gbs and not isinstance(data_storage_size_in_gbs, float):
            raise TypeError("Expected argument 'data_storage_size_in_gbs' to be a float")
        pulumi.set(__self__, "data_storage_size_in_gbs", data_storage_size_in_gbs)
        if data_storage_size_in_tbs and not isinstance(data_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'data_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "data_storage_size_in_tbs", data_storage_size_in_tbs)
        if db_servers and not isinstance(db_servers, list):
            raise TypeError("Expected argument 'db_servers' to be a list")
        pulumi.set(__self__, "db_servers", db_servers)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if exadata_storage_in_tbs_lowest_scaled_value and not isinstance(exadata_storage_in_tbs_lowest_scaled_value, float):
            raise TypeError("Expected argument 'exadata_storage_in_tbs_lowest_scaled_value' to be a float")
        pulumi.set(__self__, "exadata_storage_in_tbs_lowest_scaled_value", exadata_storage_in_tbs_lowest_scaled_value)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_mtls_enabled_vm_cluster and not isinstance(is_mtls_enabled_vm_cluster, bool):
            raise TypeError("Expected argument 'is_mtls_enabled_vm_cluster' to be a bool")
        pulumi.set(__self__, "is_mtls_enabled_vm_cluster", is_mtls_enabled_vm_cluster)
        if license_model and not isinstance(license_model, str):
            raise TypeError("Expected argument 'license_model' to be a str")
        pulumi.set(__self__, "license_model", license_model)
        if maintenance_windows and not isinstance(maintenance_windows, list):
            raise TypeError("Expected argument 'maintenance_windows' to be a list")
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        if max_acds_lowest_scaled_value and not isinstance(max_acds_lowest_scaled_value, int):
            raise TypeError("Expected argument 'max_acds_lowest_scaled_value' to be a int")
        pulumi.set(__self__, "max_acds_lowest_scaled_value", max_acds_lowest_scaled_value)
        if memory_per_oracle_compute_unit_in_gbs and not isinstance(memory_per_oracle_compute_unit_in_gbs, int):
            raise TypeError("Expected argument 'memory_per_oracle_compute_unit_in_gbs' to be a int")
        pulumi.set(__self__, "memory_per_oracle_compute_unit_in_gbs", memory_per_oracle_compute_unit_in_gbs)
        if memory_size_in_gbs and not isinstance(memory_size_in_gbs, int):
            raise TypeError("Expected argument 'memory_size_in_gbs' to be a int")
        pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if non_provisionable_autonomous_container_databases and not isinstance(non_provisionable_autonomous_container_databases, int):
            raise TypeError("Expected argument 'non_provisionable_autonomous_container_databases' to be a int")
        pulumi.set(__self__, "non_provisionable_autonomous_container_databases", non_provisionable_autonomous_container_databases)
        if oci_resource_anchor_name and not isinstance(oci_resource_anchor_name, str):
            raise TypeError("Expected argument 'oci_resource_anchor_name' to be a str")
        pulumi.set(__self__, "oci_resource_anchor_name", oci_resource_anchor_name)
        if oci_url and not isinstance(oci_url, str):
            raise TypeError("Expected argument 'oci_url' to be a str")
        pulumi.set(__self__, "oci_url", oci_url)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if odb_network_id and not isinstance(odb_network_id, str):
            raise TypeError("Expected argument 'odb_network_id' to be a str")
        pulumi.set(__self__, "odb_network_id", odb_network_id)
        if odb_node_storage_size_in_gbs and not isinstance(odb_node_storage_size_in_gbs, int):
            raise TypeError("Expected argument 'odb_node_storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "odb_node_storage_size_in_gbs", odb_node_storage_size_in_gbs)
        if percent_progress and not isinstance(percent_progress, float):
            raise TypeError("Expected argument 'percent_progress' to be a float")
        pulumi.set(__self__, "percent_progress", percent_progress)
        if provisionable_autonomous_container_databases and not isinstance(provisionable_autonomous_container_databases, int):
            raise TypeError("Expected argument 'provisionable_autonomous_container_databases' to be a int")
        pulumi.set(__self__, "provisionable_autonomous_container_databases", provisionable_autonomous_container_databases)
        if provisioned_autonomous_container_databases and not isinstance(provisioned_autonomous_container_databases, int):
            raise TypeError("Expected argument 'provisioned_autonomous_container_databases' to be a int")
        pulumi.set(__self__, "provisioned_autonomous_container_databases", provisioned_autonomous_container_databases)
        if provisioned_cpus and not isinstance(provisioned_cpus, float):
            raise TypeError("Expected argument 'provisioned_cpus' to be a float")
        pulumi.set(__self__, "provisioned_cpus", provisioned_cpus)
        if reclaimable_cpus and not isinstance(reclaimable_cpus, float):
            raise TypeError("Expected argument 'reclaimable_cpus' to be a float")
        pulumi.set(__self__, "reclaimable_cpus", reclaimable_cpus)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if reserved_cpus and not isinstance(reserved_cpus, float):
            raise TypeError("Expected argument 'reserved_cpus' to be a float")
        pulumi.set(__self__, "reserved_cpus", reserved_cpus)
        if scan_listener_port_non_tls and not isinstance(scan_listener_port_non_tls, int):
            raise TypeError("Expected argument 'scan_listener_port_non_tls' to be a int")
        pulumi.set(__self__, "scan_listener_port_non_tls", scan_listener_port_non_tls)
        if scan_listener_port_tls and not isinstance(scan_listener_port_tls, int):
            raise TypeError("Expected argument 'scan_listener_port_tls' to be a int")
        pulumi.set(__self__, "scan_listener_port_tls", scan_listener_port_tls)
        if shape and not isinstance(shape, str):
            raise TypeError("Expected argument 'shape' to be a str")
        pulumi.set(__self__, "shape", shape)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reason and not isinstance(status_reason, str):
            raise TypeError("Expected argument 'status_reason' to be a str")
        pulumi.set(__self__, "status_reason", status_reason)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if time_database_ssl_certificate_expires and not isinstance(time_database_ssl_certificate_expires, str):
            raise TypeError("Expected argument 'time_database_ssl_certificate_expires' to be a str")
        pulumi.set(__self__, "time_database_ssl_certificate_expires", time_database_ssl_certificate_expires)
        if time_ords_certificate_expires and not isinstance(time_ords_certificate_expires, str):
            raise TypeError("Expected argument 'time_ords_certificate_expires' to be a str")
        pulumi.set(__self__, "time_ords_certificate_expires", time_ords_certificate_expires)
        if time_zone and not isinstance(time_zone, str):
            raise TypeError("Expected argument 'time_zone' to be a str")
        pulumi.set(__self__, "time_zone", time_zone)
        if total_container_databases and not isinstance(total_container_databases, int):
            raise TypeError("Expected argument 'total_container_databases' to be a int")
        pulumi.set(__self__, "total_container_databases", total_container_databases)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        The Amazon Resource Name (ARN) for the Exadata infrastructure.
        """
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="autonomousDataStoragePercentage")
    def autonomous_data_storage_percentage(self) -> _builtins.float:
        """
        The percentage of data storage currently in use for Autonomous Databases in the Autonomous VM cluster.
        """
        return pulumi.get(self, "autonomous_data_storage_percentage")

    @_builtins.property
    @pulumi.getter(name="autonomousDataStorageSizeInTbs")
    def autonomous_data_storage_size_in_tbs(self) -> _builtins.float:
        """
        The data storage size allocated for Autonomous Databases in the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "autonomous_data_storage_size_in_tbs")

    @_builtins.property
    @pulumi.getter(name="availableAutonomousDataStorageSizeInTbs")
    def available_autonomous_data_storage_size_in_tbs(self) -> _builtins.float:
        """
        The available data storage space for Autonomous Databases in the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "available_autonomous_data_storage_size_in_tbs")

    @_builtins.property
    @pulumi.getter(name="availableContainerDatabases")
    def available_container_databases(self) -> _builtins.int:
        """
        The number of Autonomous CDBs that you can create with the currently available storage.
        """
        return pulumi.get(self, "available_container_databases")

    @_builtins.property
    @pulumi.getter(name="availableCpus")
    def available_cpus(self) -> _builtins.float:
        """
        The number of CPU cores available for allocation to Autonomous Databases.
        """
        return pulumi.get(self, "available_cpus")

    @_builtins.property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> _builtins.str:
        """
        Cloud exadata infrastructure id associated with this cloud autonomous VM cluster.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @_builtins.property
    @pulumi.getter(name="computeModel")
    def compute_model(self) -> _builtins.str:
        """
        The compute model of the Autonomous VM cluster: ECPU or OCPU.
        """
        return pulumi.get(self, "compute_model")

    @_builtins.property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> _builtins.int:
        """
        The total number of CPU cores in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_core_count")

    @_builtins.property
    @pulumi.getter(name="cpuCoreCountPerNode")
    def cpu_core_count_per_node(self) -> _builtins.int:
        """
        The number of CPU cores enabled per node in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_core_count_per_node")

    @_builtins.property
    @pulumi.getter(name="cpuPercentage")
    def cpu_percentage(self) -> _builtins.float:
        """
        he percentage of total CPU cores currently in use in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_percentage")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The date and time when the Autonomous VM cluster was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataStorageSizeInGbs")
    def data_storage_size_in_gbs(self) -> _builtins.float:
        """
        The total data storage allocated to the Autonomous VM cluster, in GB.
        """
        return pulumi.get(self, "data_storage_size_in_gbs")

    @_builtins.property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> _builtins.float:
        """
        The total data storage allocated to the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @_builtins.property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> Sequence[_builtins.str]:
        """
        The list of database servers associated with the Autonomous VM cluster.
        """
        return pulumi.get(self, "db_servers")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The user-provided description of the Autonomous VM cluster.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the Autonomous VM cluster.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        The domain name of the Autonomous VM cluster.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="exadataStorageInTbsLowestScaledValue")
    def exadata_storage_in_tbs_lowest_scaled_value(self) -> _builtins.float:
        """
        The minimum value to which you can scale down the Exadata storage, in TB.
        """
        return pulumi.get(self, "exadata_storage_in_tbs_lowest_scaled_value")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        The hostname of the Autonomous VM cluster.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isMtlsEnabledVmCluster")
    def is_mtls_enabled_vm_cluster(self) -> _builtins.bool:
        """
        Indicates whether mutual TLS (mTLS) authentication is enabled for the Autonomous VM cluster.
        """
        return pulumi.get(self, "is_mtls_enabled_vm_cluster")

    @_builtins.property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> _builtins.str:
        """
        The Oracle license model that applies to the Autonomous VM cluster. Valid values are LICENSE_INCLUDED or BRING_YOUR_OWN_LICENSE.
        """
        return pulumi.get(self, "license_model")

    @_builtins.property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetCloudAutonomousVmClusterMaintenanceWindowResult']:
        """
        The maintenance window for the Autonomous VM cluster.
        """
        return pulumi.get(self, "maintenance_windows")

    @_builtins.property
    @pulumi.getter(name="maxAcdsLowestScaledValue")
    def max_acds_lowest_scaled_value(self) -> _builtins.int:
        """
        The minimum value to which you can scale down the maximum number of Autonomous CDBs.
        """
        return pulumi.get(self, "max_acds_lowest_scaled_value")

    @_builtins.property
    @pulumi.getter(name="memoryPerOracleComputeUnitInGbs")
    def memory_per_oracle_compute_unit_in_gbs(self) -> _builtins.int:
        """
        The amount of memory allocated per Oracle Compute Unit, in GB.
        """
        return pulumi.get(self, "memory_per_oracle_compute_unit_in_gbs")

    @_builtins.property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> _builtins.int:
        """
        The total amount of memory allocated to the Autonomous VM cluster, in gigabytes (GB).
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @_builtins.property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> _builtins.int:
        """
        The number of database server nodes in the Autonomous VM cluster.
        """
        return pulumi.get(self, "node_count")

    @_builtins.property
    @pulumi.getter(name="nonProvisionableAutonomousContainerDatabases")
    def non_provisionable_autonomous_container_databases(self) -> _builtins.int:
        """
        The number of Autonomous CDBs that can't be provisioned because of resource  constraints.
        """
        return pulumi.get(self, "non_provisionable_autonomous_container_databases")

    @_builtins.property
    @pulumi.getter(name="ociResourceAnchorName")
    def oci_resource_anchor_name(self) -> _builtins.str:
        """
        The name of the OCI resource anchor associated with this Autonomous VM cluster.
        """
        return pulumi.get(self, "oci_resource_anchor_name")

    @_builtins.property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> _builtins.str:
        """
        The URL for accessing the OCI console page for this Autonomous VM cluster.
        """
        return pulumi.get(self, "oci_url")

    @_builtins.property
    @pulumi.getter
    def ocid(self) -> _builtins.str:
        """
        The Oracle Cloud Identifier (OCID) of the Autonomous VM cluster.
        """
        return pulumi.get(self, "ocid")

    @_builtins.property
    @pulumi.getter(name="odbNetworkId")
    def odb_network_id(self) -> _builtins.str:
        """
        The unique identifier of the ODB network associated with this Autonomous VM cluster.
        """
        return pulumi.get(self, "odb_network_id")

    @_builtins.property
    @pulumi.getter(name="odbNodeStorageSizeInGbs")
    def odb_node_storage_size_in_gbs(self) -> _builtins.int:
        """
        The local node storage allocated to the Autonomous VM cluster, in gigabytes (GB).
        """
        return pulumi.get(self, "odb_node_storage_size_in_gbs")

    @_builtins.property
    @pulumi.getter(name="percentProgress")
    def percent_progress(self) -> _builtins.float:
        """
        The progress of the current operation on the Autonomous VM cluster, as a percentage.
        """
        return pulumi.get(self, "percent_progress")

    @_builtins.property
    @pulumi.getter(name="provisionableAutonomousContainerDatabases")
    def provisionable_autonomous_container_databases(self) -> _builtins.int:
        """
        The number of Autonomous CDBs that can be provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisionable_autonomous_container_databases")

    @_builtins.property
    @pulumi.getter(name="provisionedAutonomousContainerDatabases")
    def provisioned_autonomous_container_databases(self) -> _builtins.int:
        """
        The number of Autonomous CDBs currently provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisioned_autonomous_container_databases")

    @_builtins.property
    @pulumi.getter(name="provisionedCpus")
    def provisioned_cpus(self) -> _builtins.float:
        """
        The number of CPU cores currently provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisioned_cpus")

    @_builtins.property
    @pulumi.getter(name="reclaimableCpus")
    def reclaimable_cpus(self) -> _builtins.float:
        """
        The number of CPU cores that can be reclaimed from terminated or scaled-down Autonomous Databases.
        """
        return pulumi.get(self, "reclaimable_cpus")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reservedCpus")
    def reserved_cpus(self) -> _builtins.float:
        """
        The number of CPU cores reserved for system operations and redundancy.
        """
        return pulumi.get(self, "reserved_cpus")

    @_builtins.property
    @pulumi.getter(name="scanListenerPortNonTls")
    def scan_listener_port_non_tls(self) -> _builtins.int:
        """
        The SCAN listener port for non-TLS (TCP) protocol. The default is 1521.
        """
        return pulumi.get(self, "scan_listener_port_non_tls")

    @_builtins.property
    @pulumi.getter(name="scanListenerPortTls")
    def scan_listener_port_tls(self) -> _builtins.int:
        """
        The SCAN listener port for TLS (TCP) protocol. The default is 2484.
        """
        return pulumi.get(self, "scan_listener_port_tls")

    @_builtins.property
    @pulumi.getter
    def shape(self) -> _builtins.str:
        """
        The shape of the Exadata infrastructure for the Autonomous VM cluster.
        """
        return pulumi.get(self, "shape")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the Autonomous VM cluster.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> _builtins.str:
        """
        Additional information about the current status of the Autonomous VM cluster.
        """
        return pulumi.get(self, "status_reason")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        A map of tags to assign to the exadata infrastructure. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="timeDatabaseSslCertificateExpires")
    def time_database_ssl_certificate_expires(self) -> _builtins.str:
        """
        The expiration date and time of the database SSL certificate.
        """
        return pulumi.get(self, "time_database_ssl_certificate_expires")

    @_builtins.property
    @pulumi.getter(name="timeOrdsCertificateExpires")
    def time_ords_certificate_expires(self) -> _builtins.str:
        """
        The expiration date and time of the Oracle REST Data Services (ORDS)certificate.
        """
        return pulumi.get(self, "time_ords_certificate_expires")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The time zone of the Autonomous VM cluster.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter(name="totalContainerDatabases")
    def total_container_databases(self) -> _builtins.int:
        """
        The total number of Autonomous Container Databases that can be created with the allocated local storage.
        """
        return pulumi.get(self, "total_container_databases")


class AwaitableGetCloudAutonomousVmClusterResult(GetCloudAutonomousVmClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudAutonomousVmClusterResult(
            arn=self.arn,
            autonomous_data_storage_percentage=self.autonomous_data_storage_percentage,
            autonomous_data_storage_size_in_tbs=self.autonomous_data_storage_size_in_tbs,
            available_autonomous_data_storage_size_in_tbs=self.available_autonomous_data_storage_size_in_tbs,
            available_container_databases=self.available_container_databases,
            available_cpus=self.available_cpus,
            cloud_exadata_infrastructure_id=self.cloud_exadata_infrastructure_id,
            compute_model=self.compute_model,
            cpu_core_count=self.cpu_core_count,
            cpu_core_count_per_node=self.cpu_core_count_per_node,
            cpu_percentage=self.cpu_percentage,
            created_at=self.created_at,
            data_storage_size_in_gbs=self.data_storage_size_in_gbs,
            data_storage_size_in_tbs=self.data_storage_size_in_tbs,
            db_servers=self.db_servers,
            description=self.description,
            display_name=self.display_name,
            domain=self.domain,
            exadata_storage_in_tbs_lowest_scaled_value=self.exadata_storage_in_tbs_lowest_scaled_value,
            hostname=self.hostname,
            id=self.id,
            is_mtls_enabled_vm_cluster=self.is_mtls_enabled_vm_cluster,
            license_model=self.license_model,
            maintenance_windows=self.maintenance_windows,
            max_acds_lowest_scaled_value=self.max_acds_lowest_scaled_value,
            memory_per_oracle_compute_unit_in_gbs=self.memory_per_oracle_compute_unit_in_gbs,
            memory_size_in_gbs=self.memory_size_in_gbs,
            node_count=self.node_count,
            non_provisionable_autonomous_container_databases=self.non_provisionable_autonomous_container_databases,
            oci_resource_anchor_name=self.oci_resource_anchor_name,
            oci_url=self.oci_url,
            ocid=self.ocid,
            odb_network_id=self.odb_network_id,
            odb_node_storage_size_in_gbs=self.odb_node_storage_size_in_gbs,
            percent_progress=self.percent_progress,
            provisionable_autonomous_container_databases=self.provisionable_autonomous_container_databases,
            provisioned_autonomous_container_databases=self.provisioned_autonomous_container_databases,
            provisioned_cpus=self.provisioned_cpus,
            reclaimable_cpus=self.reclaimable_cpus,
            region=self.region,
            reserved_cpus=self.reserved_cpus,
            scan_listener_port_non_tls=self.scan_listener_port_non_tls,
            scan_listener_port_tls=self.scan_listener_port_tls,
            shape=self.shape,
            status=self.status,
            status_reason=self.status_reason,
            tags=self.tags,
            time_database_ssl_certificate_expires=self.time_database_ssl_certificate_expires,
            time_ords_certificate_expires=self.time_ords_certificate_expires,
            time_zone=self.time_zone,
            total_container_databases=self.total_container_databases)


def get_cloud_autonomous_vm_cluster(id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudAutonomousVmClusterResult:
    """
    Data source for managing cloud autonomous vm cluster resource in AWS for Oracle Database@AWS.

    You can find out more about Oracle Database@AWS from [User Guide](https://docs.aws.amazon.com/odb/latest/UserGuide/what-is-odb.html).

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.odb.get_cloud_autonomous_vm_cluster(id="example")
    ```


    :param _builtins.str id: The unique identifier of the cloud autonomous vm cluster.
    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:odb/getCloudAutonomousVmCluster:getCloudAutonomousVmCluster', __args__, opts=opts, typ=GetCloudAutonomousVmClusterResult).value

    return AwaitableGetCloudAutonomousVmClusterResult(
        arn=pulumi.get(__ret__, 'arn'),
        autonomous_data_storage_percentage=pulumi.get(__ret__, 'autonomous_data_storage_percentage'),
        autonomous_data_storage_size_in_tbs=pulumi.get(__ret__, 'autonomous_data_storage_size_in_tbs'),
        available_autonomous_data_storage_size_in_tbs=pulumi.get(__ret__, 'available_autonomous_data_storage_size_in_tbs'),
        available_container_databases=pulumi.get(__ret__, 'available_container_databases'),
        available_cpus=pulumi.get(__ret__, 'available_cpus'),
        cloud_exadata_infrastructure_id=pulumi.get(__ret__, 'cloud_exadata_infrastructure_id'),
        compute_model=pulumi.get(__ret__, 'compute_model'),
        cpu_core_count=pulumi.get(__ret__, 'cpu_core_count'),
        cpu_core_count_per_node=pulumi.get(__ret__, 'cpu_core_count_per_node'),
        cpu_percentage=pulumi.get(__ret__, 'cpu_percentage'),
        created_at=pulumi.get(__ret__, 'created_at'),
        data_storage_size_in_gbs=pulumi.get(__ret__, 'data_storage_size_in_gbs'),
        data_storage_size_in_tbs=pulumi.get(__ret__, 'data_storage_size_in_tbs'),
        db_servers=pulumi.get(__ret__, 'db_servers'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        domain=pulumi.get(__ret__, 'domain'),
        exadata_storage_in_tbs_lowest_scaled_value=pulumi.get(__ret__, 'exadata_storage_in_tbs_lowest_scaled_value'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        is_mtls_enabled_vm_cluster=pulumi.get(__ret__, 'is_mtls_enabled_vm_cluster'),
        license_model=pulumi.get(__ret__, 'license_model'),
        maintenance_windows=pulumi.get(__ret__, 'maintenance_windows'),
        max_acds_lowest_scaled_value=pulumi.get(__ret__, 'max_acds_lowest_scaled_value'),
        memory_per_oracle_compute_unit_in_gbs=pulumi.get(__ret__, 'memory_per_oracle_compute_unit_in_gbs'),
        memory_size_in_gbs=pulumi.get(__ret__, 'memory_size_in_gbs'),
        node_count=pulumi.get(__ret__, 'node_count'),
        non_provisionable_autonomous_container_databases=pulumi.get(__ret__, 'non_provisionable_autonomous_container_databases'),
        oci_resource_anchor_name=pulumi.get(__ret__, 'oci_resource_anchor_name'),
        oci_url=pulumi.get(__ret__, 'oci_url'),
        ocid=pulumi.get(__ret__, 'ocid'),
        odb_network_id=pulumi.get(__ret__, 'odb_network_id'),
        odb_node_storage_size_in_gbs=pulumi.get(__ret__, 'odb_node_storage_size_in_gbs'),
        percent_progress=pulumi.get(__ret__, 'percent_progress'),
        provisionable_autonomous_container_databases=pulumi.get(__ret__, 'provisionable_autonomous_container_databases'),
        provisioned_autonomous_container_databases=pulumi.get(__ret__, 'provisioned_autonomous_container_databases'),
        provisioned_cpus=pulumi.get(__ret__, 'provisioned_cpus'),
        reclaimable_cpus=pulumi.get(__ret__, 'reclaimable_cpus'),
        region=pulumi.get(__ret__, 'region'),
        reserved_cpus=pulumi.get(__ret__, 'reserved_cpus'),
        scan_listener_port_non_tls=pulumi.get(__ret__, 'scan_listener_port_non_tls'),
        scan_listener_port_tls=pulumi.get(__ret__, 'scan_listener_port_tls'),
        shape=pulumi.get(__ret__, 'shape'),
        status=pulumi.get(__ret__, 'status'),
        status_reason=pulumi.get(__ret__, 'status_reason'),
        tags=pulumi.get(__ret__, 'tags'),
        time_database_ssl_certificate_expires=pulumi.get(__ret__, 'time_database_ssl_certificate_expires'),
        time_ords_certificate_expires=pulumi.get(__ret__, 'time_ords_certificate_expires'),
        time_zone=pulumi.get(__ret__, 'time_zone'),
        total_container_databases=pulumi.get(__ret__, 'total_container_databases'))
def get_cloud_autonomous_vm_cluster_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudAutonomousVmClusterResult]:
    """
    Data source for managing cloud autonomous vm cluster resource in AWS for Oracle Database@AWS.

    You can find out more about Oracle Database@AWS from [User Guide](https://docs.aws.amazon.com/odb/latest/UserGuide/what-is-odb.html).

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.odb.get_cloud_autonomous_vm_cluster(id="example")
    ```


    :param _builtins.str id: The unique identifier of the cloud autonomous vm cluster.
    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws:odb/getCloudAutonomousVmCluster:getCloudAutonomousVmCluster', __args__, opts=opts, typ=GetCloudAutonomousVmClusterResult)
    return __ret__.apply(lambda __response__: GetCloudAutonomousVmClusterResult(
        arn=pulumi.get(__response__, 'arn'),
        autonomous_data_storage_percentage=pulumi.get(__response__, 'autonomous_data_storage_percentage'),
        autonomous_data_storage_size_in_tbs=pulumi.get(__response__, 'autonomous_data_storage_size_in_tbs'),
        available_autonomous_data_storage_size_in_tbs=pulumi.get(__response__, 'available_autonomous_data_storage_size_in_tbs'),
        available_container_databases=pulumi.get(__response__, 'available_container_databases'),
        available_cpus=pulumi.get(__response__, 'available_cpus'),
        cloud_exadata_infrastructure_id=pulumi.get(__response__, 'cloud_exadata_infrastructure_id'),
        compute_model=pulumi.get(__response__, 'compute_model'),
        cpu_core_count=pulumi.get(__response__, 'cpu_core_count'),
        cpu_core_count_per_node=pulumi.get(__response__, 'cpu_core_count_per_node'),
        cpu_percentage=pulumi.get(__response__, 'cpu_percentage'),
        created_at=pulumi.get(__response__, 'created_at'),
        data_storage_size_in_gbs=pulumi.get(__response__, 'data_storage_size_in_gbs'),
        data_storage_size_in_tbs=pulumi.get(__response__, 'data_storage_size_in_tbs'),
        db_servers=pulumi.get(__response__, 'db_servers'),
        description=pulumi.get(__response__, 'description'),
        display_name=pulumi.get(__response__, 'display_name'),
        domain=pulumi.get(__response__, 'domain'),
        exadata_storage_in_tbs_lowest_scaled_value=pulumi.get(__response__, 'exadata_storage_in_tbs_lowest_scaled_value'),
        hostname=pulumi.get(__response__, 'hostname'),
        id=pulumi.get(__response__, 'id'),
        is_mtls_enabled_vm_cluster=pulumi.get(__response__, 'is_mtls_enabled_vm_cluster'),
        license_model=pulumi.get(__response__, 'license_model'),
        maintenance_windows=pulumi.get(__response__, 'maintenance_windows'),
        max_acds_lowest_scaled_value=pulumi.get(__response__, 'max_acds_lowest_scaled_value'),
        memory_per_oracle_compute_unit_in_gbs=pulumi.get(__response__, 'memory_per_oracle_compute_unit_in_gbs'),
        memory_size_in_gbs=pulumi.get(__response__, 'memory_size_in_gbs'),
        node_count=pulumi.get(__response__, 'node_count'),
        non_provisionable_autonomous_container_databases=pulumi.get(__response__, 'non_provisionable_autonomous_container_databases'),
        oci_resource_anchor_name=pulumi.get(__response__, 'oci_resource_anchor_name'),
        oci_url=pulumi.get(__response__, 'oci_url'),
        ocid=pulumi.get(__response__, 'ocid'),
        odb_network_id=pulumi.get(__response__, 'odb_network_id'),
        odb_node_storage_size_in_gbs=pulumi.get(__response__, 'odb_node_storage_size_in_gbs'),
        percent_progress=pulumi.get(__response__, 'percent_progress'),
        provisionable_autonomous_container_databases=pulumi.get(__response__, 'provisionable_autonomous_container_databases'),
        provisioned_autonomous_container_databases=pulumi.get(__response__, 'provisioned_autonomous_container_databases'),
        provisioned_cpus=pulumi.get(__response__, 'provisioned_cpus'),
        reclaimable_cpus=pulumi.get(__response__, 'reclaimable_cpus'),
        region=pulumi.get(__response__, 'region'),
        reserved_cpus=pulumi.get(__response__, 'reserved_cpus'),
        scan_listener_port_non_tls=pulumi.get(__response__, 'scan_listener_port_non_tls'),
        scan_listener_port_tls=pulumi.get(__response__, 'scan_listener_port_tls'),
        shape=pulumi.get(__response__, 'shape'),
        status=pulumi.get(__response__, 'status'),
        status_reason=pulumi.get(__response__, 'status_reason'),
        tags=pulumi.get(__response__, 'tags'),
        time_database_ssl_certificate_expires=pulumi.get(__response__, 'time_database_ssl_certificate_expires'),
        time_ords_certificate_expires=pulumi.get(__response__, 'time_ords_certificate_expires'),
        time_zone=pulumi.get(__response__, 'time_zone'),
        total_container_databases=pulumi.get(__response__, 'total_container_databases')))
