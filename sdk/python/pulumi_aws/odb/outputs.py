# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CloudAutonomousVmClusterMaintenanceWindow',
    'CloudAutonomousVmClusterMaintenanceWindowDaysOfWeek',
    'CloudAutonomousVmClusterMaintenanceWindowMonth',
    'CloudAutonomousVmClusterTimeouts',
    'CloudExadataInfrastructureCustomerContactsToSendToOci',
    'CloudExadataInfrastructureMaintenanceWindow',
    'CloudExadataInfrastructureMaintenanceWindowDaysOfWeek',
    'CloudExadataInfrastructureMaintenanceWindowMonth',
    'CloudExadataInfrastructureTimeouts',
    'CloudVmClusterDataCollectionOptions',
    'CloudVmClusterIormConfigCach',
    'CloudVmClusterIormConfigCachDbPlan',
    'CloudVmClusterTimeouts',
    'NetworkManagedService',
    'NetworkManagedServiceManagedS3BackupAccess',
    'NetworkManagedServiceS3Access',
    'NetworkManagedServiceServiceNetworkEndpoint',
    'NetworkManagedServiceZeroEtlAccess',
    'NetworkOciDnsForwardingConfig',
    'NetworkPeeringConnectionTimeouts',
    'NetworkTimeouts',
    'GetCloudAutonomousVmClusterMaintenanceWindowResult',
    'GetCloudAutonomousVmClusterMaintenanceWindowDaysOfWeekResult',
    'GetCloudAutonomousVmClusterMaintenanceWindowMonthResult',
    'GetCloudExadataInfrastructureCustomerContactsToSendToOciResult',
    'GetCloudExadataInfrastructureMaintenanceWindowResult',
    'GetCloudExadataInfrastructureMaintenanceWindowDaysOfWeekResult',
    'GetCloudExadataInfrastructureMaintenanceWindowMonthResult',
    'GetCloudVmClusterDataCollectionOptionResult',
    'GetCloudVmClusterIormConfigCachResult',
    'GetCloudVmClusterIormConfigCachDbPlanResult',
    'GetNetworkManagedServiceResult',
    'GetNetworkManagedServiceManagedS3BackupAccessResult',
    'GetNetworkManagedServiceS3AccessResult',
    'GetNetworkManagedServiceServiceNetworkEndpointResult',
    'GetNetworkManagedServiceZeroTlAccessResult',
    'GetNetworkOciDnsForwardingConfigResult',
]

@pulumi.output_type
class CloudAutonomousVmClusterMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "hoursOfDays":
            suggest = "hours_of_days"
        elif key == "leadTimeInWeeks":
            suggest = "lead_time_in_weeks"
        elif key == "weeksOfMonths":
            suggest = "weeks_of_months"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAutonomousVmClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAutonomousVmClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAutonomousVmClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preference: _builtins.str,
                 days_of_weeks: Optional[Sequence['outputs.CloudAutonomousVmClusterMaintenanceWindowDaysOfWeek']] = None,
                 hours_of_days: Optional[Sequence[_builtins.int]] = None,
                 lead_time_in_weeks: Optional[_builtins.int] = None,
                 months: Optional[Sequence['outputs.CloudAutonomousVmClusterMaintenanceWindowMonth']] = None,
                 weeks_of_months: Optional[Sequence[_builtins.int]] = None):
        """
        :param _builtins.str preference: The preference for the maintenance window scheduling.
        :param Sequence['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekArgs'] days_of_weeks: The days of the week when maintenance can be performed.
        :param Sequence[_builtins.int] hours_of_days: The hours of the day when maintenance can be performed.
        :param _builtins.int lead_time_in_weeks: The lead time in weeks before the maintenance window.
        :param Sequence['CloudAutonomousVmClusterMaintenanceWindowMonthArgs'] months: The months when maintenance can be performed.
        :param Sequence[_builtins.int] weeks_of_months: Indicates whether to skip release updates during maintenance.
        """
        pulumi.set(__self__, "preference", preference)
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if hours_of_days is not None:
            pulumi.set(__self__, "hours_of_days", hours_of_days)
        if lead_time_in_weeks is not None:
            pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if weeks_of_months is not None:
            pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.str:
        """
        The preference for the maintenance window scheduling.
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[Sequence['outputs.CloudAutonomousVmClusterMaintenanceWindowDaysOfWeek']]:
        """
        The days of the week when maintenance can be performed.
        """
        return pulumi.get(self, "days_of_weeks")

    @_builtins.property
    @pulumi.getter(name="hoursOfDays")
    def hours_of_days(self) -> Optional[Sequence[_builtins.int]]:
        """
        The hours of the day when maintenance can be performed.
        """
        return pulumi.get(self, "hours_of_days")

    @_builtins.property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> Optional[_builtins.int]:
        """
        The lead time in weeks before the maintenance window.
        """
        return pulumi.get(self, "lead_time_in_weeks")

    @_builtins.property
    @pulumi.getter
    def months(self) -> Optional[Sequence['outputs.CloudAutonomousVmClusterMaintenanceWindowMonth']]:
        """
        The months when maintenance can be performed.
        """
        return pulumi.get(self, "months")

    @_builtins.property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Optional[Sequence[_builtins.int]]:
        """
        Indicates whether to skip release updates during maintenance.
        """
        return pulumi.get(self, "weeks_of_months")


@pulumi.output_type
class CloudAutonomousVmClusterMaintenanceWindowDaysOfWeek(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class CloudAutonomousVmClusterMaintenanceWindowMonth(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class CloudAutonomousVmClusterTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class CloudExadataInfrastructureCustomerContactsToSendToOci(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        return pulumi.get(self, "email")


@pulumi.output_type
class CloudExadataInfrastructureMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customActionTimeoutInMins":
            suggest = "custom_action_timeout_in_mins"
        elif key == "isCustomActionTimeoutEnabled":
            suggest = "is_custom_action_timeout_enabled"
        elif key == "patchingMode":
            suggest = "patching_mode"
        elif key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "hoursOfDays":
            suggest = "hours_of_days"
        elif key == "leadTimeInWeeks":
            suggest = "lead_time_in_weeks"
        elif key == "weeksOfMonths":
            suggest = "weeks_of_months"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudExadataInfrastructureMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudExadataInfrastructureMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudExadataInfrastructureMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_action_timeout_in_mins: _builtins.int,
                 is_custom_action_timeout_enabled: _builtins.bool,
                 patching_mode: _builtins.str,
                 preference: _builtins.str,
                 days_of_weeks: Optional[Sequence['outputs.CloudExadataInfrastructureMaintenanceWindowDaysOfWeek']] = None,
                 hours_of_days: Optional[Sequence[_builtins.int]] = None,
                 lead_time_in_weeks: Optional[_builtins.int] = None,
                 months: Optional[Sequence['outputs.CloudExadataInfrastructureMaintenanceWindowMonth']] = None,
                 weeks_of_months: Optional[Sequence[_builtins.int]] = None):
        """
        :param _builtins.int custom_action_timeout_in_mins: The custom action timeout in minutes for the maintenance window.
        :param _builtins.bool is_custom_action_timeout_enabled: ndicates whether custom action timeout is enabled for the maintenance window.
        :param _builtins.str patching_mode: The patching mode for the maintenance window.
        :param _builtins.str preference: The preference for the maintenance window scheduling.
        :param Sequence['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekArgs'] days_of_weeks: The days of the week when maintenance can be performed.
        :param Sequence[_builtins.int] hours_of_days: The hours of the day when maintenance can be performed.
        :param _builtins.int lead_time_in_weeks: The lead time in weeks before the maintenance window.
        :param Sequence['CloudExadataInfrastructureMaintenanceWindowMonthArgs'] months: The months when maintenance can be performed.
        :param Sequence[_builtins.int] weeks_of_months: The weeks of the month when maintenance can be performed.
        """
        pulumi.set(__self__, "custom_action_timeout_in_mins", custom_action_timeout_in_mins)
        pulumi.set(__self__, "is_custom_action_timeout_enabled", is_custom_action_timeout_enabled)
        pulumi.set(__self__, "patching_mode", patching_mode)
        pulumi.set(__self__, "preference", preference)
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if hours_of_days is not None:
            pulumi.set(__self__, "hours_of_days", hours_of_days)
        if lead_time_in_weeks is not None:
            pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if weeks_of_months is not None:
            pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @_builtins.property
    @pulumi.getter(name="customActionTimeoutInMins")
    def custom_action_timeout_in_mins(self) -> _builtins.int:
        """
        The custom action timeout in minutes for the maintenance window.
        """
        return pulumi.get(self, "custom_action_timeout_in_mins")

    @_builtins.property
    @pulumi.getter(name="isCustomActionTimeoutEnabled")
    def is_custom_action_timeout_enabled(self) -> _builtins.bool:
        """
        ndicates whether custom action timeout is enabled for the maintenance window.
        """
        return pulumi.get(self, "is_custom_action_timeout_enabled")

    @_builtins.property
    @pulumi.getter(name="patchingMode")
    def patching_mode(self) -> _builtins.str:
        """
        The patching mode for the maintenance window.
        """
        return pulumi.get(self, "patching_mode")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.str:
        """
        The preference for the maintenance window scheduling.
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[Sequence['outputs.CloudExadataInfrastructureMaintenanceWindowDaysOfWeek']]:
        """
        The days of the week when maintenance can be performed.
        """
        return pulumi.get(self, "days_of_weeks")

    @_builtins.property
    @pulumi.getter(name="hoursOfDays")
    def hours_of_days(self) -> Optional[Sequence[_builtins.int]]:
        """
        The hours of the day when maintenance can be performed.
        """
        return pulumi.get(self, "hours_of_days")

    @_builtins.property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> Optional[_builtins.int]:
        """
        The lead time in weeks before the maintenance window.
        """
        return pulumi.get(self, "lead_time_in_weeks")

    @_builtins.property
    @pulumi.getter
    def months(self) -> Optional[Sequence['outputs.CloudExadataInfrastructureMaintenanceWindowMonth']]:
        """
        The months when maintenance can be performed.
        """
        return pulumi.get(self, "months")

    @_builtins.property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Optional[Sequence[_builtins.int]]:
        """
        The weeks of the month when maintenance can be performed.
        """
        return pulumi.get(self, "weeks_of_months")


@pulumi.output_type
class CloudExadataInfrastructureMaintenanceWindowDaysOfWeek(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class CloudExadataInfrastructureMaintenanceWindowMonth(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class CloudExadataInfrastructureTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class CloudVmClusterDataCollectionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDiagnosticsEventsEnabled":
            suggest = "is_diagnostics_events_enabled"
        elif key == "isHealthMonitoringEnabled":
            suggest = "is_health_monitoring_enabled"
        elif key == "isIncidentLogsEnabled":
            suggest = "is_incident_logs_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudVmClusterDataCollectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudVmClusterDataCollectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudVmClusterDataCollectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_diagnostics_events_enabled: _builtins.bool,
                 is_health_monitoring_enabled: _builtins.bool,
                 is_incident_logs_enabled: _builtins.bool):
        pulumi.set(__self__, "is_diagnostics_events_enabled", is_diagnostics_events_enabled)
        pulumi.set(__self__, "is_health_monitoring_enabled", is_health_monitoring_enabled)
        pulumi.set(__self__, "is_incident_logs_enabled", is_incident_logs_enabled)

    @_builtins.property
    @pulumi.getter(name="isDiagnosticsEventsEnabled")
    def is_diagnostics_events_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_diagnostics_events_enabled")

    @_builtins.property
    @pulumi.getter(name="isHealthMonitoringEnabled")
    def is_health_monitoring_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_health_monitoring_enabled")

    @_builtins.property
    @pulumi.getter(name="isIncidentLogsEnabled")
    def is_incident_logs_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_incident_logs_enabled")


@pulumi.output_type
class CloudVmClusterIormConfigCach(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbPlans":
            suggest = "db_plans"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "lifecycleState":
            suggest = "lifecycle_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudVmClusterIormConfigCach. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudVmClusterIormConfigCach.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudVmClusterIormConfigCach.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_plans: Sequence['outputs.CloudVmClusterIormConfigCachDbPlan'],
                 lifecycle_details: _builtins.str,
                 lifecycle_state: _builtins.str,
                 objective: _builtins.str):
        pulumi.set(__self__, "db_plans", db_plans)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        pulumi.set(__self__, "objective", objective)

    @_builtins.property
    @pulumi.getter(name="dbPlans")
    def db_plans(self) -> Sequence['outputs.CloudVmClusterIormConfigCachDbPlan']:
        return pulumi.get(self, "db_plans")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def objective(self) -> _builtins.str:
        return pulumi.get(self, "objective")


@pulumi.output_type
class CloudVmClusterIormConfigCachDbPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"
        elif key == "flashCacheLimit":
            suggest = "flash_cache_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudVmClusterIormConfigCachDbPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudVmClusterIormConfigCachDbPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudVmClusterIormConfigCachDbPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: _builtins.str,
                 flash_cache_limit: _builtins.str,
                 share: _builtins.int):
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "flash_cache_limit", flash_cache_limit)
        pulumi.set(__self__, "share", share)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter(name="flashCacheLimit")
    def flash_cache_limit(self) -> _builtins.str:
        return pulumi.get(self, "flash_cache_limit")

    @_builtins.property
    @pulumi.getter
    def share(self) -> _builtins.int:
        return pulumi.get(self, "share")


@pulumi.output_type
class CloudVmClusterTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class NetworkManagedService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedS3BackupAccesses":
            suggest = "managed_s3_backup_accesses"
        elif key == "managedServiceIpv4Cidrs":
            suggest = "managed_service_ipv4_cidrs"
        elif key == "resourceGatewayArn":
            suggest = "resource_gateway_arn"
        elif key == "s3Accesses":
            suggest = "s3_accesses"
        elif key == "serviceNetworkArn":
            suggest = "service_network_arn"
        elif key == "serviceNetworkEndpoints":
            suggest = "service_network_endpoints"
        elif key == "zeroEtlAccesses":
            suggest = "zero_etl_accesses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkManagedService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkManagedService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkManagedService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_s3_backup_accesses: Sequence['outputs.NetworkManagedServiceManagedS3BackupAccess'],
                 managed_service_ipv4_cidrs: Sequence[_builtins.str],
                 resource_gateway_arn: _builtins.str,
                 s3_accesses: Sequence['outputs.NetworkManagedServiceS3Access'],
                 service_network_arn: _builtins.str,
                 service_network_endpoints: Sequence['outputs.NetworkManagedServiceServiceNetworkEndpoint'],
                 zero_etl_accesses: Sequence['outputs.NetworkManagedServiceZeroEtlAccess']):
        """
        :param Sequence['NetworkManagedServiceS3AccessArgs'] s3_accesses: Specifies the configuration for Amazon S3 access from the ODB network.
        :param Sequence['NetworkManagedServiceZeroEtlAccessArgs'] zero_etl_accesses: Specifies the configuration for Zero-ETL access from the ODB network.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "managed_s3_backup_accesses", managed_s3_backup_accesses)
        pulumi.set(__self__, "managed_service_ipv4_cidrs", managed_service_ipv4_cidrs)
        pulumi.set(__self__, "resource_gateway_arn", resource_gateway_arn)
        pulumi.set(__self__, "s3_accesses", s3_accesses)
        pulumi.set(__self__, "service_network_arn", service_network_arn)
        pulumi.set(__self__, "service_network_endpoints", service_network_endpoints)
        pulumi.set(__self__, "zero_etl_accesses", zero_etl_accesses)

    @_builtins.property
    @pulumi.getter(name="managedS3BackupAccesses")
    def managed_s3_backup_accesses(self) -> Sequence['outputs.NetworkManagedServiceManagedS3BackupAccess']:
        return pulumi.get(self, "managed_s3_backup_accesses")

    @_builtins.property
    @pulumi.getter(name="managedServiceIpv4Cidrs")
    def managed_service_ipv4_cidrs(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "managed_service_ipv4_cidrs")

    @_builtins.property
    @pulumi.getter(name="resourceGatewayArn")
    def resource_gateway_arn(self) -> _builtins.str:
        return pulumi.get(self, "resource_gateway_arn")

    @_builtins.property
    @pulumi.getter(name="s3Accesses")
    def s3_accesses(self) -> Sequence['outputs.NetworkManagedServiceS3Access']:
        """
        Specifies the configuration for Amazon S3 access from the ODB network.
        """
        return pulumi.get(self, "s3_accesses")

    @_builtins.property
    @pulumi.getter(name="serviceNetworkArn")
    def service_network_arn(self) -> _builtins.str:
        return pulumi.get(self, "service_network_arn")

    @_builtins.property
    @pulumi.getter(name="serviceNetworkEndpoints")
    def service_network_endpoints(self) -> Sequence['outputs.NetworkManagedServiceServiceNetworkEndpoint']:
        return pulumi.get(self, "service_network_endpoints")

    @_builtins.property
    @pulumi.getter(name="zeroEtlAccesses")
    def zero_etl_accesses(self) -> Sequence['outputs.NetworkManagedServiceZeroEtlAccess']:
        """
        Specifies the configuration for Zero-ETL access from the ODB network.

        The following arguments are optional:
        """
        return pulumi.get(self, "zero_etl_accesses")


@pulumi.output_type
class NetworkManagedServiceManagedS3BackupAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Addresses":
            suggest = "ipv4_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkManagedServiceManagedS3BackupAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkManagedServiceManagedS3BackupAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkManagedServiceManagedS3BackupAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_addresses: Sequence[_builtins.str],
                 status: _builtins.str):
        """
        :param _builtins.str status: The status of the network resource.
        """
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ipv4_addresses")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the network resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NetworkManagedServiceS3Access(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "ipv4Addresses":
            suggest = "ipv4_addresses"
        elif key == "s3PolicyDocument":
            suggest = "s3_policy_document"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkManagedServiceS3Access. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkManagedServiceS3Access.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkManagedServiceS3Access.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: _builtins.str,
                 ipv4_addresses: Sequence[_builtins.str],
                 s3_policy_document: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str s3_policy_document: Specifies the endpoint policy for Amazon S3 access from the ODB network.
        :param _builtins.str status: The status of the network resource.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        pulumi.set(__self__, "s3_policy_document", s3_policy_document)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ipv4_addresses")

    @_builtins.property
    @pulumi.getter(name="s3PolicyDocument")
    def s3_policy_document(self) -> _builtins.str:
        """
        Specifies the endpoint policy for Amazon S3 access from the ODB network.
        """
        return pulumi.get(self, "s3_policy_document")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the network resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NetworkManagedServiceServiceNetworkEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcEndpointId":
            suggest = "vpc_endpoint_id"
        elif key == "vpcEndpointType":
            suggest = "vpc_endpoint_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkManagedServiceServiceNetworkEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkManagedServiceServiceNetworkEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkManagedServiceServiceNetworkEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_endpoint_id: _builtins.str,
                 vpc_endpoint_type: _builtins.str):
        pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)
        pulumi.set(__self__, "vpc_endpoint_type", vpc_endpoint_type)

    @_builtins.property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="vpcEndpointType")
    def vpc_endpoint_type(self) -> _builtins.str:
        return pulumi.get(self, "vpc_endpoint_type")


@pulumi.output_type
class NetworkManagedServiceZeroEtlAccess(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str status: The status of the network resource.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the network resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NetworkOciDnsForwardingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "ociDnsListenerIp":
            suggest = "oci_dns_listener_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkOciDnsForwardingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkOciDnsForwardingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkOciDnsForwardingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: _builtins.str,
                 oci_dns_listener_ip: _builtins.str):
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "oci_dns_listener_ip", oci_dns_listener_ip)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="ociDnsListenerIp")
    def oci_dns_listener_ip(self) -> _builtins.str:
        return pulumi.get(self, "oci_dns_listener_ip")


@pulumi.output_type
class NetworkPeeringConnectionTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class NetworkTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class GetCloudAutonomousVmClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 days_of_weeks: Sequence['outputs.GetCloudAutonomousVmClusterMaintenanceWindowDaysOfWeekResult'],
                 hours_of_days: Sequence[_builtins.int],
                 lead_time_in_weeks: _builtins.int,
                 months: Sequence['outputs.GetCloudAutonomousVmClusterMaintenanceWindowMonthResult'],
                 preference: _builtins.str,
                 weeks_of_months: Sequence[_builtins.int]):
        pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        pulumi.set(__self__, "hours_of_days", hours_of_days)
        pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        pulumi.set(__self__, "months", months)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @_builtins.property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Sequence['outputs.GetCloudAutonomousVmClusterMaintenanceWindowDaysOfWeekResult']:
        return pulumi.get(self, "days_of_weeks")

    @_builtins.property
    @pulumi.getter(name="hoursOfDays")
    def hours_of_days(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "hours_of_days")

    @_builtins.property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> _builtins.int:
        return pulumi.get(self, "lead_time_in_weeks")

    @_builtins.property
    @pulumi.getter
    def months(self) -> Sequence['outputs.GetCloudAutonomousVmClusterMaintenanceWindowMonthResult']:
        return pulumi.get(self, "months")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.str:
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "weeks_of_months")


@pulumi.output_type
class GetCloudAutonomousVmClusterMaintenanceWindowDaysOfWeekResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAutonomousVmClusterMaintenanceWindowMonthResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudExadataInfrastructureCustomerContactsToSendToOciResult(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        return pulumi.get(self, "email")


@pulumi.output_type
class GetCloudExadataInfrastructureMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 custom_action_timeout_in_mins: _builtins.int,
                 days_of_weeks: Sequence['outputs.GetCloudExadataInfrastructureMaintenanceWindowDaysOfWeekResult'],
                 hours_of_days: Sequence[_builtins.int],
                 is_custom_action_timeout_enabled: _builtins.bool,
                 lead_time_in_weeks: _builtins.int,
                 months: Sequence['outputs.GetCloudExadataInfrastructureMaintenanceWindowMonthResult'],
                 patching_mode: _builtins.str,
                 preference: _builtins.str,
                 weeks_of_months: Sequence[_builtins.int]):
        pulumi.set(__self__, "custom_action_timeout_in_mins", custom_action_timeout_in_mins)
        pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        pulumi.set(__self__, "hours_of_days", hours_of_days)
        pulumi.set(__self__, "is_custom_action_timeout_enabled", is_custom_action_timeout_enabled)
        pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        pulumi.set(__self__, "months", months)
        pulumi.set(__self__, "patching_mode", patching_mode)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @_builtins.property
    @pulumi.getter(name="customActionTimeoutInMins")
    def custom_action_timeout_in_mins(self) -> _builtins.int:
        return pulumi.get(self, "custom_action_timeout_in_mins")

    @_builtins.property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Sequence['outputs.GetCloudExadataInfrastructureMaintenanceWindowDaysOfWeekResult']:
        return pulumi.get(self, "days_of_weeks")

    @_builtins.property
    @pulumi.getter(name="hoursOfDays")
    def hours_of_days(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "hours_of_days")

    @_builtins.property
    @pulumi.getter(name="isCustomActionTimeoutEnabled")
    def is_custom_action_timeout_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_custom_action_timeout_enabled")

    @_builtins.property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> _builtins.int:
        return pulumi.get(self, "lead_time_in_weeks")

    @_builtins.property
    @pulumi.getter
    def months(self) -> Sequence['outputs.GetCloudExadataInfrastructureMaintenanceWindowMonthResult']:
        return pulumi.get(self, "months")

    @_builtins.property
    @pulumi.getter(name="patchingMode")
    def patching_mode(self) -> _builtins.str:
        return pulumi.get(self, "patching_mode")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.str:
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "weeks_of_months")


@pulumi.output_type
class GetCloudExadataInfrastructureMaintenanceWindowDaysOfWeekResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudExadataInfrastructureMaintenanceWindowMonthResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudVmClusterDataCollectionOptionResult(dict):
    def __init__(__self__, *,
                 is_diagnostics_events_enabled: _builtins.bool,
                 is_health_monitoring_enabled: _builtins.bool,
                 is_incident_logs_enabled: _builtins.bool):
        pulumi.set(__self__, "is_diagnostics_events_enabled", is_diagnostics_events_enabled)
        pulumi.set(__self__, "is_health_monitoring_enabled", is_health_monitoring_enabled)
        pulumi.set(__self__, "is_incident_logs_enabled", is_incident_logs_enabled)

    @_builtins.property
    @pulumi.getter(name="isDiagnosticsEventsEnabled")
    def is_diagnostics_events_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_diagnostics_events_enabled")

    @_builtins.property
    @pulumi.getter(name="isHealthMonitoringEnabled")
    def is_health_monitoring_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_health_monitoring_enabled")

    @_builtins.property
    @pulumi.getter(name="isIncidentLogsEnabled")
    def is_incident_logs_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "is_incident_logs_enabled")


@pulumi.output_type
class GetCloudVmClusterIormConfigCachResult(dict):
    def __init__(__self__, *,
                 db_plans: Sequence['outputs.GetCloudVmClusterIormConfigCachDbPlanResult'],
                 lifecycle_details: _builtins.str,
                 lifecycle_state: _builtins.str,
                 objective: _builtins.str):
        pulumi.set(__self__, "db_plans", db_plans)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        pulumi.set(__self__, "objective", objective)

    @_builtins.property
    @pulumi.getter(name="dbPlans")
    def db_plans(self) -> Sequence['outputs.GetCloudVmClusterIormConfigCachDbPlanResult']:
        return pulumi.get(self, "db_plans")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def objective(self) -> _builtins.str:
        return pulumi.get(self, "objective")


@pulumi.output_type
class GetCloudVmClusterIormConfigCachDbPlanResult(dict):
    def __init__(__self__, *,
                 db_name: _builtins.str,
                 flash_cache_limit: _builtins.str,
                 share: _builtins.int):
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "flash_cache_limit", flash_cache_limit)
        pulumi.set(__self__, "share", share)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter(name="flashCacheLimit")
    def flash_cache_limit(self) -> _builtins.str:
        return pulumi.get(self, "flash_cache_limit")

    @_builtins.property
    @pulumi.getter
    def share(self) -> _builtins.int:
        return pulumi.get(self, "share")


@pulumi.output_type
class GetNetworkManagedServiceResult(dict):
    def __init__(__self__, *,
                 managed_s3_backup_accesses: Sequence['outputs.GetNetworkManagedServiceManagedS3BackupAccessResult'],
                 managed_service_ipv4_cidrs: Sequence[_builtins.str],
                 resource_gateway_arn: _builtins.str,
                 s3_accesses: Sequence['outputs.GetNetworkManagedServiceS3AccessResult'],
                 service_network_arn: _builtins.str,
                 service_network_endpoints: Sequence['outputs.GetNetworkManagedServiceServiceNetworkEndpointResult'],
                 zero_tl_accesses: Sequence['outputs.GetNetworkManagedServiceZeroTlAccessResult']):
        pulumi.set(__self__, "managed_s3_backup_accesses", managed_s3_backup_accesses)
        pulumi.set(__self__, "managed_service_ipv4_cidrs", managed_service_ipv4_cidrs)
        pulumi.set(__self__, "resource_gateway_arn", resource_gateway_arn)
        pulumi.set(__self__, "s3_accesses", s3_accesses)
        pulumi.set(__self__, "service_network_arn", service_network_arn)
        pulumi.set(__self__, "service_network_endpoints", service_network_endpoints)
        pulumi.set(__self__, "zero_tl_accesses", zero_tl_accesses)

    @_builtins.property
    @pulumi.getter(name="managedS3BackupAccesses")
    def managed_s3_backup_accesses(self) -> Sequence['outputs.GetNetworkManagedServiceManagedS3BackupAccessResult']:
        return pulumi.get(self, "managed_s3_backup_accesses")

    @_builtins.property
    @pulumi.getter(name="managedServiceIpv4Cidrs")
    def managed_service_ipv4_cidrs(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "managed_service_ipv4_cidrs")

    @_builtins.property
    @pulumi.getter(name="resourceGatewayArn")
    def resource_gateway_arn(self) -> _builtins.str:
        return pulumi.get(self, "resource_gateway_arn")

    @_builtins.property
    @pulumi.getter(name="s3Accesses")
    def s3_accesses(self) -> Sequence['outputs.GetNetworkManagedServiceS3AccessResult']:
        return pulumi.get(self, "s3_accesses")

    @_builtins.property
    @pulumi.getter(name="serviceNetworkArn")
    def service_network_arn(self) -> _builtins.str:
        return pulumi.get(self, "service_network_arn")

    @_builtins.property
    @pulumi.getter(name="serviceNetworkEndpoints")
    def service_network_endpoints(self) -> Sequence['outputs.GetNetworkManagedServiceServiceNetworkEndpointResult']:
        return pulumi.get(self, "service_network_endpoints")

    @_builtins.property
    @pulumi.getter(name="zeroTlAccesses")
    def zero_tl_accesses(self) -> Sequence['outputs.GetNetworkManagedServiceZeroTlAccessResult']:
        return pulumi.get(self, "zero_tl_accesses")


@pulumi.output_type
class GetNetworkManagedServiceManagedS3BackupAccessResult(dict):
    def __init__(__self__, *,
                 ipv4_addresses: Sequence[_builtins.str],
                 status: _builtins.str):
        """
        :param _builtins.str status: The status of the network resource.
        """
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ipv4_addresses")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the network resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNetworkManagedServiceS3AccessResult(dict):
    def __init__(__self__, *,
                 domain_name: _builtins.str,
                 ipv4_addresses: Sequence[_builtins.str],
                 s3_policy_document: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str status: The status of the network resource.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        pulumi.set(__self__, "s3_policy_document", s3_policy_document)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ipv4_addresses")

    @_builtins.property
    @pulumi.getter(name="s3PolicyDocument")
    def s3_policy_document(self) -> _builtins.str:
        return pulumi.get(self, "s3_policy_document")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the network resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNetworkManagedServiceServiceNetworkEndpointResult(dict):
    def __init__(__self__, *,
                 vpc_endpoint_id: _builtins.str,
                 vpc_endpoint_type: _builtins.str):
        pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)
        pulumi.set(__self__, "vpc_endpoint_type", vpc_endpoint_type)

    @_builtins.property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="vpcEndpointType")
    def vpc_endpoint_type(self) -> _builtins.str:
        return pulumi.get(self, "vpc_endpoint_type")


@pulumi.output_type
class GetNetworkManagedServiceZeroTlAccessResult(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str status: The status of the network resource.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the network resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetNetworkOciDnsForwardingConfigResult(dict):
    def __init__(__self__, *,
                 domain_name: _builtins.str,
                 oci_dns_listener_ip: _builtins.str):
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "oci_dns_listener_ip", oci_dns_listener_ip)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="ociDnsListenerIp")
    def oci_dns_listener_ip(self) -> _builtins.str:
        return pulumi.get(self, "oci_dns_listener_ip")


