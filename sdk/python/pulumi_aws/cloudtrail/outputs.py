# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'EventDataStoreAdvancedEventSelector',
    'EventDataStoreAdvancedEventSelectorFieldSelector',
    'TrailAdvancedEventSelector',
    'TrailAdvancedEventSelectorFieldSelector',
    'TrailEventSelector',
    'TrailEventSelectorDataResource',
    'TrailInsightSelector',
]

@pulumi.output_type
class EventDataStoreAdvancedEventSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldSelectors":
            suggest = "field_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDataStoreAdvancedEventSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDataStoreAdvancedEventSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDataStoreAdvancedEventSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_selectors: Optional[Sequence['outputs.EventDataStoreAdvancedEventSelectorFieldSelector']] = None,
                 name: Optional[str] = None):
        if field_selectors is not None:
            pulumi.set(__self__, "field_selectors", field_selectors)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="fieldSelectors")
    def field_selectors(self) -> Optional[Sequence['outputs.EventDataStoreAdvancedEventSelectorFieldSelector']]:
        return pulumi.get(self, "field_selectors")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class EventDataStoreAdvancedEventSelectorFieldSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endsWiths":
            suggest = "ends_withs"
        elif key == "notEndsWiths":
            suggest = "not_ends_withs"
        elif key == "notEquals":
            suggest = "not_equals"
        elif key == "notStartsWiths":
            suggest = "not_starts_withs"
        elif key == "startsWiths":
            suggest = "starts_withs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDataStoreAdvancedEventSelectorFieldSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDataStoreAdvancedEventSelectorFieldSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDataStoreAdvancedEventSelectorFieldSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ends_withs: Optional[Sequence[str]] = None,
                 equals: Optional[Sequence[str]] = None,
                 field: Optional[str] = None,
                 not_ends_withs: Optional[Sequence[str]] = None,
                 not_equals: Optional[Sequence[str]] = None,
                 not_starts_withs: Optional[Sequence[str]] = None,
                 starts_withs: Optional[Sequence[str]] = None):
        if ends_withs is not None:
            pulumi.set(__self__, "ends_withs", ends_withs)
        if equals is not None:
            pulumi.set(__self__, "equals", equals)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if not_ends_withs is not None:
            pulumi.set(__self__, "not_ends_withs", not_ends_withs)
        if not_equals is not None:
            pulumi.set(__self__, "not_equals", not_equals)
        if not_starts_withs is not None:
            pulumi.set(__self__, "not_starts_withs", not_starts_withs)
        if starts_withs is not None:
            pulumi.set(__self__, "starts_withs", starts_withs)

    @property
    @pulumi.getter(name="endsWiths")
    def ends_withs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ends_withs")

    @property
    @pulumi.getter
    def equals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "equals")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="notEndsWiths")
    def not_ends_withs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "not_ends_withs")

    @property
    @pulumi.getter(name="notEquals")
    def not_equals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "not_equals")

    @property
    @pulumi.getter(name="notStartsWiths")
    def not_starts_withs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "not_starts_withs")

    @property
    @pulumi.getter(name="startsWiths")
    def starts_withs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "starts_withs")


@pulumi.output_type
class TrailAdvancedEventSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldSelectors":
            suggest = "field_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrailAdvancedEventSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrailAdvancedEventSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrailAdvancedEventSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_selectors: Sequence['outputs.TrailAdvancedEventSelectorFieldSelector'],
                 name: Optional[str] = None):
        pulumi.set(__self__, "field_selectors", field_selectors)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="fieldSelectors")
    def field_selectors(self) -> Sequence['outputs.TrailAdvancedEventSelectorFieldSelector']:
        return pulumi.get(self, "field_selectors")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class TrailAdvancedEventSelectorFieldSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endsWiths":
            suggest = "ends_withs"
        elif key == "notEndsWiths":
            suggest = "not_ends_withs"
        elif key == "notEquals":
            suggest = "not_equals"
        elif key == "notStartsWiths":
            suggest = "not_starts_withs"
        elif key == "startsWiths":
            suggest = "starts_withs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrailAdvancedEventSelectorFieldSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrailAdvancedEventSelectorFieldSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrailAdvancedEventSelectorFieldSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field: str,
                 ends_withs: Optional[Sequence[str]] = None,
                 equals: Optional[Sequence[str]] = None,
                 not_ends_withs: Optional[Sequence[str]] = None,
                 not_equals: Optional[Sequence[str]] = None,
                 not_starts_withs: Optional[Sequence[str]] = None,
                 starts_withs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "field", field)
        if ends_withs is not None:
            pulumi.set(__self__, "ends_withs", ends_withs)
        if equals is not None:
            pulumi.set(__self__, "equals", equals)
        if not_ends_withs is not None:
            pulumi.set(__self__, "not_ends_withs", not_ends_withs)
        if not_equals is not None:
            pulumi.set(__self__, "not_equals", not_equals)
        if not_starts_withs is not None:
            pulumi.set(__self__, "not_starts_withs", not_starts_withs)
        if starts_withs is not None:
            pulumi.set(__self__, "starts_withs", starts_withs)

    @property
    @pulumi.getter
    def field(self) -> str:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="endsWiths")
    def ends_withs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ends_withs")

    @property
    @pulumi.getter
    def equals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "equals")

    @property
    @pulumi.getter(name="notEndsWiths")
    def not_ends_withs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "not_ends_withs")

    @property
    @pulumi.getter(name="notEquals")
    def not_equals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "not_equals")

    @property
    @pulumi.getter(name="notStartsWiths")
    def not_starts_withs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "not_starts_withs")

    @property
    @pulumi.getter(name="startsWiths")
    def starts_withs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "starts_withs")


@pulumi.output_type
class TrailEventSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataResources":
            suggest = "data_resources"
        elif key == "excludeManagementEventSources":
            suggest = "exclude_management_event_sources"
        elif key == "includeManagementEvents":
            suggest = "include_management_events"
        elif key == "readWriteType":
            suggest = "read_write_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrailEventSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrailEventSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrailEventSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_resources: Optional[Sequence['outputs.TrailEventSelectorDataResource']] = None,
                 exclude_management_event_sources: Optional[Sequence[str]] = None,
                 include_management_events: Optional[bool] = None,
                 read_write_type: Optional[str] = None):
        if data_resources is not None:
            pulumi.set(__self__, "data_resources", data_resources)
        if exclude_management_event_sources is not None:
            pulumi.set(__self__, "exclude_management_event_sources", exclude_management_event_sources)
        if include_management_events is not None:
            pulumi.set(__self__, "include_management_events", include_management_events)
        if read_write_type is not None:
            pulumi.set(__self__, "read_write_type", read_write_type)

    @property
    @pulumi.getter(name="dataResources")
    def data_resources(self) -> Optional[Sequence['outputs.TrailEventSelectorDataResource']]:
        return pulumi.get(self, "data_resources")

    @property
    @pulumi.getter(name="excludeManagementEventSources")
    def exclude_management_event_sources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_management_event_sources")

    @property
    @pulumi.getter(name="includeManagementEvents")
    def include_management_events(self) -> Optional[bool]:
        return pulumi.get(self, "include_management_events")

    @property
    @pulumi.getter(name="readWriteType")
    def read_write_type(self) -> Optional[str]:
        return pulumi.get(self, "read_write_type")


@pulumi.output_type
class TrailEventSelectorDataResource(dict):
    def __init__(__self__, *,
                 type: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class TrailInsightSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightType":
            suggest = "insight_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrailInsightSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrailInsightSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrailInsightSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insight_type: str):
        pulumi.set(__self__, "insight_type", insight_type)

    @property
    @pulumi.getter(name="insightType")
    def insight_type(self) -> str:
        return pulumi.get(self, "insight_type")


