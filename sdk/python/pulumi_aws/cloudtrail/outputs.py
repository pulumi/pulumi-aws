# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'EventDataStoreAdvancedEventSelector',
    'EventDataStoreAdvancedEventSelectorFieldSelector',
    'TrailAdvancedEventSelector',
    'TrailAdvancedEventSelectorFieldSelector',
    'TrailEventSelector',
    'TrailEventSelectorDataResource',
    'TrailInsightSelector',
]

@pulumi.output_type
class EventDataStoreAdvancedEventSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldSelectors":
            suggest = "field_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDataStoreAdvancedEventSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDataStoreAdvancedEventSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDataStoreAdvancedEventSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_selectors: Optional[Sequence['outputs.EventDataStoreAdvancedEventSelectorFieldSelector']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['EventDataStoreAdvancedEventSelectorFieldSelectorArgs'] field_selectors: Specifies the selector statements in an advanced event selector. Fields documented below.
        :param str name: Specifies the name of the advanced event selector.
        """
        EventDataStoreAdvancedEventSelector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_selectors=field_selectors,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_selectors: Optional[Sequence['outputs.EventDataStoreAdvancedEventSelectorFieldSelector']] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if field_selectors is None and 'fieldSelectors' in kwargs:
            field_selectors = kwargs['fieldSelectors']

        if field_selectors is not None:
            _setter("field_selectors", field_selectors)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="fieldSelectors")
    def field_selectors(self) -> Optional[Sequence['outputs.EventDataStoreAdvancedEventSelectorFieldSelector']]:
        """
        Specifies the selector statements in an advanced event selector. Fields documented below.
        """
        return pulumi.get(self, "field_selectors")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the name of the advanced event selector.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EventDataStoreAdvancedEventSelectorFieldSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endsWiths":
            suggest = "ends_withs"
        elif key == "notEndsWiths":
            suggest = "not_ends_withs"
        elif key == "notEquals":
            suggest = "not_equals"
        elif key == "notStartsWiths":
            suggest = "not_starts_withs"
        elif key == "startsWiths":
            suggest = "starts_withs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDataStoreAdvancedEventSelectorFieldSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDataStoreAdvancedEventSelectorFieldSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDataStoreAdvancedEventSelectorFieldSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ends_withs: Optional[Sequence[str]] = None,
                 equals: Optional[Sequence[str]] = None,
                 field: Optional[str] = None,
                 not_ends_withs: Optional[Sequence[str]] = None,
                 not_equals: Optional[Sequence[str]] = None,
                 not_starts_withs: Optional[Sequence[str]] = None,
                 starts_withs: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ends_withs: A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
        :param Sequence[str] equals: A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
        :param str field: Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
        :param Sequence[str] not_ends_withs: A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
        :param Sequence[str] not_equals: A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
        :param Sequence[str] not_starts_withs: A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
        :param Sequence[str] starts_withs: A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
        """
        EventDataStoreAdvancedEventSelectorFieldSelector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ends_withs=ends_withs,
            equals=equals,
            field=field,
            not_ends_withs=not_ends_withs,
            not_equals=not_equals,
            not_starts_withs=not_starts_withs,
            starts_withs=starts_withs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ends_withs: Optional[Sequence[str]] = None,
             equals: Optional[Sequence[str]] = None,
             field: Optional[str] = None,
             not_ends_withs: Optional[Sequence[str]] = None,
             not_equals: Optional[Sequence[str]] = None,
             not_starts_withs: Optional[Sequence[str]] = None,
             starts_withs: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ends_withs is None and 'endsWiths' in kwargs:
            ends_withs = kwargs['endsWiths']
        if not_ends_withs is None and 'notEndsWiths' in kwargs:
            not_ends_withs = kwargs['notEndsWiths']
        if not_equals is None and 'notEquals' in kwargs:
            not_equals = kwargs['notEquals']
        if not_starts_withs is None and 'notStartsWiths' in kwargs:
            not_starts_withs = kwargs['notStartsWiths']
        if starts_withs is None and 'startsWiths' in kwargs:
            starts_withs = kwargs['startsWiths']

        if ends_withs is not None:
            _setter("ends_withs", ends_withs)
        if equals is not None:
            _setter("equals", equals)
        if field is not None:
            _setter("field", field)
        if not_ends_withs is not None:
            _setter("not_ends_withs", not_ends_withs)
        if not_equals is not None:
            _setter("not_equals", not_equals)
        if not_starts_withs is not None:
            _setter("not_starts_withs", not_starts_withs)
        if starts_withs is not None:
            _setter("starts_withs", starts_withs)

    @property
    @pulumi.getter(name="endsWiths")
    def ends_withs(self) -> Optional[Sequence[str]]:
        """
        A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "ends_withs")

    @property
    @pulumi.getter
    def equals(self) -> Optional[Sequence[str]]:
        """
        A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
        """
        return pulumi.get(self, "equals")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="notEndsWiths")
    def not_ends_withs(self) -> Optional[Sequence[str]]:
        """
        A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "not_ends_withs")

    @property
    @pulumi.getter(name="notEquals")
    def not_equals(self) -> Optional[Sequence[str]]:
        """
        A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "not_equals")

    @property
    @pulumi.getter(name="notStartsWiths")
    def not_starts_withs(self) -> Optional[Sequence[str]]:
        """
        A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "not_starts_withs")

    @property
    @pulumi.getter(name="startsWiths")
    def starts_withs(self) -> Optional[Sequence[str]]:
        """
        A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "starts_withs")


@pulumi.output_type
class TrailAdvancedEventSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldSelectors":
            suggest = "field_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrailAdvancedEventSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrailAdvancedEventSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrailAdvancedEventSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_selectors: Sequence['outputs.TrailAdvancedEventSelectorFieldSelector'],
                 name: Optional[str] = None):
        """
        :param Sequence['TrailAdvancedEventSelectorFieldSelectorArgs'] field_selectors: Specifies the selector statements in an advanced event selector. Fields documented below.
        :param str name: Name of the trail.
        """
        TrailAdvancedEventSelector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_selectors=field_selectors,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_selectors: Optional[Sequence['outputs.TrailAdvancedEventSelectorFieldSelector']] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if field_selectors is None and 'fieldSelectors' in kwargs:
            field_selectors = kwargs['fieldSelectors']
        if field_selectors is None:
            raise TypeError("Missing 'field_selectors' argument")

        _setter("field_selectors", field_selectors)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="fieldSelectors")
    def field_selectors(self) -> Sequence['outputs.TrailAdvancedEventSelectorFieldSelector']:
        """
        Specifies the selector statements in an advanced event selector. Fields documented below.
        """
        return pulumi.get(self, "field_selectors")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the trail.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TrailAdvancedEventSelectorFieldSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endsWiths":
            suggest = "ends_withs"
        elif key == "notEndsWiths":
            suggest = "not_ends_withs"
        elif key == "notEquals":
            suggest = "not_equals"
        elif key == "notStartsWiths":
            suggest = "not_starts_withs"
        elif key == "startsWiths":
            suggest = "starts_withs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrailAdvancedEventSelectorFieldSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrailAdvancedEventSelectorFieldSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrailAdvancedEventSelectorFieldSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field: str,
                 ends_withs: Optional[Sequence[str]] = None,
                 equals: Optional[Sequence[str]] = None,
                 not_ends_withs: Optional[Sequence[str]] = None,
                 not_equals: Optional[Sequence[str]] = None,
                 not_starts_withs: Optional[Sequence[str]] = None,
                 starts_withs: Optional[Sequence[str]] = None):
        """
        :param str field: Field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
        :param Sequence[str] ends_withs: A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
        :param Sequence[str] equals: A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
        :param Sequence[str] not_ends_withs: A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
        :param Sequence[str] not_equals: A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
        :param Sequence[str] not_starts_withs: A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
        :param Sequence[str] starts_withs: A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
        """
        TrailAdvancedEventSelectorFieldSelector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field=field,
            ends_withs=ends_withs,
            equals=equals,
            not_ends_withs=not_ends_withs,
            not_equals=not_equals,
            not_starts_withs=not_starts_withs,
            starts_withs=starts_withs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field: Optional[str] = None,
             ends_withs: Optional[Sequence[str]] = None,
             equals: Optional[Sequence[str]] = None,
             not_ends_withs: Optional[Sequence[str]] = None,
             not_equals: Optional[Sequence[str]] = None,
             not_starts_withs: Optional[Sequence[str]] = None,
             starts_withs: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if field is None:
            raise TypeError("Missing 'field' argument")
        if ends_withs is None and 'endsWiths' in kwargs:
            ends_withs = kwargs['endsWiths']
        if not_ends_withs is None and 'notEndsWiths' in kwargs:
            not_ends_withs = kwargs['notEndsWiths']
        if not_equals is None and 'notEquals' in kwargs:
            not_equals = kwargs['notEquals']
        if not_starts_withs is None and 'notStartsWiths' in kwargs:
            not_starts_withs = kwargs['notStartsWiths']
        if starts_withs is None and 'startsWiths' in kwargs:
            starts_withs = kwargs['startsWiths']

        _setter("field", field)
        if ends_withs is not None:
            _setter("ends_withs", ends_withs)
        if equals is not None:
            _setter("equals", equals)
        if not_ends_withs is not None:
            _setter("not_ends_withs", not_ends_withs)
        if not_equals is not None:
            _setter("not_equals", not_equals)
        if not_starts_withs is not None:
            _setter("not_starts_withs", not_starts_withs)
        if starts_withs is not None:
            _setter("starts_withs", starts_withs)

    @property
    @pulumi.getter
    def field(self) -> str:
        """
        Field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="endsWiths")
    def ends_withs(self) -> Optional[Sequence[str]]:
        """
        A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "ends_withs")

    @property
    @pulumi.getter
    def equals(self) -> Optional[Sequence[str]]:
        """
        A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
        """
        return pulumi.get(self, "equals")

    @property
    @pulumi.getter(name="notEndsWiths")
    def not_ends_withs(self) -> Optional[Sequence[str]]:
        """
        A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "not_ends_withs")

    @property
    @pulumi.getter(name="notEquals")
    def not_equals(self) -> Optional[Sequence[str]]:
        """
        A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "not_equals")

    @property
    @pulumi.getter(name="notStartsWiths")
    def not_starts_withs(self) -> Optional[Sequence[str]]:
        """
        A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "not_starts_withs")

    @property
    @pulumi.getter(name="startsWiths")
    def starts_withs(self) -> Optional[Sequence[str]]:
        """
        A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
        """
        return pulumi.get(self, "starts_withs")


@pulumi.output_type
class TrailEventSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataResources":
            suggest = "data_resources"
        elif key == "excludeManagementEventSources":
            suggest = "exclude_management_event_sources"
        elif key == "includeManagementEvents":
            suggest = "include_management_events"
        elif key == "readWriteType":
            suggest = "read_write_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrailEventSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrailEventSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrailEventSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_resources: Optional[Sequence['outputs.TrailEventSelectorDataResource']] = None,
                 exclude_management_event_sources: Optional[Sequence[str]] = None,
                 include_management_events: Optional[bool] = None,
                 read_write_type: Optional[str] = None):
        """
        :param Sequence['TrailEventSelectorDataResourceArgs'] data_resources: Configuration block for data events. See details below.
        :param Sequence[str] exclude_management_event_sources: A set of event sources to exclude. Valid values include: `kms.amazonaws.com` and `rdsdata.amazonaws.com`. `include_management_events` must be set to`true` to allow this.
        :param bool include_management_events: Whether to include management events for your trail. Defaults to `true`.
        :param str read_write_type: Type of events to log. Valid values are `ReadOnly`, `WriteOnly`, `All`. Default value is `All`.
        """
        TrailEventSelector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_resources=data_resources,
            exclude_management_event_sources=exclude_management_event_sources,
            include_management_events=include_management_events,
            read_write_type=read_write_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_resources: Optional[Sequence['outputs.TrailEventSelectorDataResource']] = None,
             exclude_management_event_sources: Optional[Sequence[str]] = None,
             include_management_events: Optional[bool] = None,
             read_write_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if data_resources is None and 'dataResources' in kwargs:
            data_resources = kwargs['dataResources']
        if exclude_management_event_sources is None and 'excludeManagementEventSources' in kwargs:
            exclude_management_event_sources = kwargs['excludeManagementEventSources']
        if include_management_events is None and 'includeManagementEvents' in kwargs:
            include_management_events = kwargs['includeManagementEvents']
        if read_write_type is None and 'readWriteType' in kwargs:
            read_write_type = kwargs['readWriteType']

        if data_resources is not None:
            _setter("data_resources", data_resources)
        if exclude_management_event_sources is not None:
            _setter("exclude_management_event_sources", exclude_management_event_sources)
        if include_management_events is not None:
            _setter("include_management_events", include_management_events)
        if read_write_type is not None:
            _setter("read_write_type", read_write_type)

    @property
    @pulumi.getter(name="dataResources")
    def data_resources(self) -> Optional[Sequence['outputs.TrailEventSelectorDataResource']]:
        """
        Configuration block for data events. See details below.
        """
        return pulumi.get(self, "data_resources")

    @property
    @pulumi.getter(name="excludeManagementEventSources")
    def exclude_management_event_sources(self) -> Optional[Sequence[str]]:
        """
        A set of event sources to exclude. Valid values include: `kms.amazonaws.com` and `rdsdata.amazonaws.com`. `include_management_events` must be set to`true` to allow this.
        """
        return pulumi.get(self, "exclude_management_event_sources")

    @property
    @pulumi.getter(name="includeManagementEvents")
    def include_management_events(self) -> Optional[bool]:
        """
        Whether to include management events for your trail. Defaults to `true`.
        """
        return pulumi.get(self, "include_management_events")

    @property
    @pulumi.getter(name="readWriteType")
    def read_write_type(self) -> Optional[str]:
        """
        Type of events to log. Valid values are `ReadOnly`, `WriteOnly`, `All`. Default value is `All`.
        """
        return pulumi.get(self, "read_write_type")


@pulumi.output_type
class TrailEventSelectorDataResource(dict):
    def __init__(__self__, *,
                 type: str,
                 values: Sequence[str]):
        """
        :param str type: Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
        :param Sequence[str] values: List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued `type`. For example, `arn:aws:s3:::<bucket name>/` for all objects in a bucket, `arn:aws:s3:::<bucket name>/key` for specific objects, `arn:aws:lambda` for all lambda events within an account, `arn:aws:lambda:<region>:<account number>:function:<function name>` for a specific Lambda function, `arn:aws:dynamodb` for all DDB events for all tables within an account, or `arn:aws:dynamodb:<region>:<account number>:table/<table name>` for a specific DynamoDB table.
        """
        TrailEventSelectorDataResource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("type", type)
        _setter("values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued `type`. For example, `arn:aws:s3:::<bucket name>/` for all objects in a bucket, `arn:aws:s3:::<bucket name>/key` for specific objects, `arn:aws:lambda` for all lambda events within an account, `arn:aws:lambda:<region>:<account number>:function:<function name>` for a specific Lambda function, `arn:aws:dynamodb` for all DDB events for all tables within an account, or `arn:aws:dynamodb:<region>:<account number>:table/<table name>` for a specific DynamoDB table.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class TrailInsightSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightType":
            suggest = "insight_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrailInsightSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrailInsightSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrailInsightSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insight_type: str):
        """
        :param str insight_type: Type of insights to log on a trail. Valid values are: `ApiCallRateInsight` and `ApiErrorRateInsight`.
        """
        TrailInsightSelector._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            insight_type=insight_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             insight_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if insight_type is None and 'insightType' in kwargs:
            insight_type = kwargs['insightType']
        if insight_type is None:
            raise TypeError("Missing 'insight_type' argument")

        _setter("insight_type", insight_type)

    @property
    @pulumi.getter(name="insightType")
    def insight_type(self) -> str:
        """
        Type of insights to log on a trail. Valid values are: `ApiCallRateInsight` and `ApiErrorRateInsight`.
        """
        return pulumi.get(self, "insight_type")


