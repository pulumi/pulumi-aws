# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Certificate(pulumi.CustomResource):
    active: pulumi.Output[bool]
    """
    Boolean flag to indicate if the certificate should be active
    """
    arn: pulumi.Output[str]
    """
    The ARN of the created AWS IoT certificate
    """
    csr: pulumi.Output[str]
    """
    The certificate signing request. Review the
    [IoT API Reference Guide] (http://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
    for more information on creating a certificate from a certificate signing request (CSR).
    """
    def __init__(__self__, __name__, __opts__=None, active=None, csr=None):
        """
        Creates and manages an AWS IoT certificate.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[bool] active: Boolean flag to indicate if the certificate should be active
        :param pulumi.Input[str] csr: The certificate signing request. Review the
               [IoT API Reference Guide] (http://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
               for more information on creating a certificate from a certificate signing request (CSR).
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not active:
            raise TypeError('Missing required property active')
        __props__['active'] = active

        if not csr:
            raise TypeError('Missing required property csr')
        __props__['csr'] = csr

        __props__['arn'] = None

        super(Certificate, __self__).__init__(
            'aws:iot/certificate:Certificate',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

