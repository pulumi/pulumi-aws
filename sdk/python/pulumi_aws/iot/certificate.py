# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Certificate(pulumi.CustomResource):
    """
    Creates and manages an AWS IoT certificate.
    """
    def __init__(__self__, __name__, __opts__=None, active=None, csr=None):
        """Create a Certificate resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not active:
            raise TypeError('Missing required property active')
        elif not isinstance(active, bool):
            raise TypeError('Expected property active to be a bool')
        __self__.active = active
        """
        Boolean flag to indicate if the certificate should be active
        """
        __props__['active'] = active

        if not csr:
            raise TypeError('Missing required property csr')
        elif not isinstance(csr, basestring):
            raise TypeError('Expected property csr to be a basestring')
        __self__.csr = csr
        """
        The certificate signing request. Review the
        [IoT API Reference Guide] (http://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
        for more information on creating a certificate from a certificate signing request (CSR).
        """
        __props__['csr'] = csr

        __self__.arn = pulumi.runtime.UNKNOWN
        """
        The ARN of the created AWS IoT certificate
        """

        super(Certificate, __self__).__init__(
            'aws:iot/certificate:Certificate',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'active' in outs:
            self.active = outs['active']
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'csr' in outs:
            self.csr = outs['csr']
