# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class ThingType(pulumi.CustomResource):
    """
    Creates and manages an AWS IoT Thing Type.
    """
    def __init__(__self__, __name__, __opts__=None, deprecated=None, name=None, properties=None):
        """Create a ThingType resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if deprecated and not isinstance(deprecated, bool):
            raise TypeError('Expected property deprecated to be a bool')
        __self__.deprecated = deprecated
        """
        Whether the thing type is deprecated. If true, no new things could be associated with this type.
        """
        __props__['deprecated'] = deprecated

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the thing type.
        """
        __props__['name'] = name

        if properties and not isinstance(properties, dict):
            raise TypeError('Expected property properties to be a dict')
        __self__.properties = properties
        __props__['properties'] = properties

        __self__.arn = pulumi.runtime.UNKNOWN
        """
        The ARN of the created AWS IoT Thing Type.
        """

        super(ThingType, __self__).__init__(
            'aws:iot/thingType:ThingType',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'deprecated' in outs:
            self.deprecated = outs['deprecated']
        if 'name' in outs:
            self.name = outs['name']
        if 'properties' in outs:
            self.properties = outs['properties']
