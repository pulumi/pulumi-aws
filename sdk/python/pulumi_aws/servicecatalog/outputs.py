# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProductProvisioningArtifactParameters',
    'ProvisionedProductOutput',
    'ProvisionedProductProvisioningParameter',
    'ProvisionedProductStackSetProvisioningPreferences',
    'ServiceActionDefinition',
    'GetLaunchPathsSummaryResult',
    'GetLaunchPathsSummaryConstraintSummaryResult',
    'GetPortfolioConstraintsDetailResult',
]

@pulumi.output_type
class ProductProvisioningArtifactParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableTemplateValidation":
            suggest = "disable_template_validation"
        elif key == "templatePhysicalId":
            suggest = "template_physical_id"
        elif key == "templateUrl":
            suggest = "template_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProductProvisioningArtifactParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProductProvisioningArtifactParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProductProvisioningArtifactParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 disable_template_validation: Optional[bool] = None,
                 name: Optional[str] = None,
                 template_physical_id: Optional[str] = None,
                 template_url: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_template_validation is not None:
            pulumi.set(__self__, "disable_template_validation", disable_template_validation)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if template_physical_id is not None:
            pulumi.set(__self__, "template_physical_id", template_physical_id)
        if template_url is not None:
            pulumi.set(__self__, "template_url", template_url)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableTemplateValidation")
    def disable_template_validation(self) -> Optional[bool]:
        return pulumi.get(self, "disable_template_validation")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templatePhysicalId")
    def template_physical_id(self) -> Optional[str]:
        return pulumi.get(self, "template_physical_id")

    @property
    @pulumi.getter(name="templateUrl")
    def template_url(self) -> Optional[str]:
        return pulumi.get(self, "template_url")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProvisionedProductOutput(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProvisionedProductProvisioningParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usePreviousValue":
            suggest = "use_previous_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionedProductProvisioningParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionedProductProvisioningParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionedProductProvisioningParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 use_previous_value: Optional[bool] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        if use_previous_value is not None:
            pulumi.set(__self__, "use_previous_value", use_previous_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="usePreviousValue")
    def use_previous_value(self) -> Optional[bool]:
        return pulumi.get(self, "use_previous_value")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProvisionedProductStackSetProvisioningPreferences(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureToleranceCount":
            suggest = "failure_tolerance_count"
        elif key == "failureTolerancePercentage":
            suggest = "failure_tolerance_percentage"
        elif key == "maxConcurrencyCount":
            suggest = "max_concurrency_count"
        elif key == "maxConcurrencyPercentage":
            suggest = "max_concurrency_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionedProductStackSetProvisioningPreferences. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionedProductStackSetProvisioningPreferences.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionedProductStackSetProvisioningPreferences.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accounts: Optional[Sequence[str]] = None,
                 failure_tolerance_count: Optional[int] = None,
                 failure_tolerance_percentage: Optional[int] = None,
                 max_concurrency_count: Optional[int] = None,
                 max_concurrency_percentage: Optional[int] = None,
                 regions: Optional[Sequence[str]] = None):
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if failure_tolerance_count is not None:
            pulumi.set(__self__, "failure_tolerance_count", failure_tolerance_count)
        if failure_tolerance_percentage is not None:
            pulumi.set(__self__, "failure_tolerance_percentage", failure_tolerance_percentage)
        if max_concurrency_count is not None:
            pulumi.set(__self__, "max_concurrency_count", max_concurrency_count)
        if max_concurrency_percentage is not None:
            pulumi.set(__self__, "max_concurrency_percentage", max_concurrency_percentage)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter
    def accounts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="failureToleranceCount")
    def failure_tolerance_count(self) -> Optional[int]:
        return pulumi.get(self, "failure_tolerance_count")

    @property
    @pulumi.getter(name="failureTolerancePercentage")
    def failure_tolerance_percentage(self) -> Optional[int]:
        return pulumi.get(self, "failure_tolerance_percentage")

    @property
    @pulumi.getter(name="maxConcurrencyCount")
    def max_concurrency_count(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrency_count")

    @property
    @pulumi.getter(name="maxConcurrencyPercentage")
    def max_concurrency_percentage(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrency_percentage")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")


@pulumi.output_type
class ServiceActionDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assumeRole":
            suggest = "assume_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceActionDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceActionDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceActionDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 version: str,
                 assume_role: Optional[str] = None,
                 parameters: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[str]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLaunchPathsSummaryResult(dict):
    def __init__(__self__, *,
                 constraint_summaries: Sequence['outputs.GetLaunchPathsSummaryConstraintSummaryResult'],
                 name: str,
                 path_id: str,
                 tags: Mapping[str, str]):
        pulumi.set(__self__, "constraint_summaries", constraint_summaries)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path_id", path_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="constraintSummaries")
    def constraint_summaries(self) -> Sequence['outputs.GetLaunchPathsSummaryConstraintSummaryResult']:
        return pulumi.get(self, "constraint_summaries")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathId")
    def path_id(self) -> str:
        return pulumi.get(self, "path_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetLaunchPathsSummaryConstraintSummaryResult(dict):
    def __init__(__self__, *,
                 description: str,
                 type: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPortfolioConstraintsDetailResult(dict):
    def __init__(__self__, *,
                 constraint_id: str,
                 description: str,
                 owner: str,
                 portfolio_id: str,
                 product_id: str,
                 type: str):
        pulumi.set(__self__, "constraint_id", constraint_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "portfolio_id", portfolio_id)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="constraintId")
    def constraint_id(self) -> str:
        return pulumi.get(self, "constraint_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="portfolioId")
    def portfolio_id(self) -> str:
        return pulumi.get(self, "portfolio_id")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


