# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ConfigurationSetDeliveryOptions',
    'ConfigurationSetReputationOptions',
    'ConfigurationSetSendingOptions',
    'ConfigurationSetSuppressionOptions',
    'ConfigurationSetTrackingOptions',
    'GetDedicatedIpPoolDedicatedIpResult',
]

@pulumi.output_type
class ConfigurationSetDeliveryOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendingPoolName":
            suggest = "sending_pool_name"
        elif key == "tlsPolicy":
            suggest = "tls_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetDeliveryOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetDeliveryOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetDeliveryOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sending_pool_name: Optional[str] = None,
                 tls_policy: Optional[str] = None):
        """
        :param str sending_pool_name: The name of the dedicated IP pool to associate with the configuration set.
        :param str tls_policy: Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Valid values: `REQUIRE`, `OPTIONAL`.
        """
        if sending_pool_name is not None:
            pulumi.set(__self__, "sending_pool_name", sending_pool_name)
        if tls_policy is not None:
            pulumi.set(__self__, "tls_policy", tls_policy)

    @property
    @pulumi.getter(name="sendingPoolName")
    def sending_pool_name(self) -> Optional[str]:
        """
        The name of the dedicated IP pool to associate with the configuration set.
        """
        return pulumi.get(self, "sending_pool_name")

    @property
    @pulumi.getter(name="tlsPolicy")
    def tls_policy(self) -> Optional[str]:
        """
        Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Valid values: `REQUIRE`, `OPTIONAL`.
        """
        return pulumi.get(self, "tls_policy")


@pulumi.output_type
class ConfigurationSetReputationOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastFreshStart":
            suggest = "last_fresh_start"
        elif key == "reputationMetricsEnabled":
            suggest = "reputation_metrics_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetReputationOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetReputationOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetReputationOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_fresh_start: Optional[str] = None,
                 reputation_metrics_enabled: Optional[bool] = None):
        """
        :param str last_fresh_start: The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        :param bool reputation_metrics_enabled: If `true`, tracking of reputation metrics is enabled for the configuration set. If `false`, tracking of reputation metrics is disabled for the configuration set.
        """
        if last_fresh_start is not None:
            pulumi.set(__self__, "last_fresh_start", last_fresh_start)
        if reputation_metrics_enabled is not None:
            pulumi.set(__self__, "reputation_metrics_enabled", reputation_metrics_enabled)

    @property
    @pulumi.getter(name="lastFreshStart")
    def last_fresh_start(self) -> Optional[str]:
        """
        The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        """
        return pulumi.get(self, "last_fresh_start")

    @property
    @pulumi.getter(name="reputationMetricsEnabled")
    def reputation_metrics_enabled(self) -> Optional[bool]:
        """
        If `true`, tracking of reputation metrics is enabled for the configuration set. If `false`, tracking of reputation metrics is disabled for the configuration set.
        """
        return pulumi.get(self, "reputation_metrics_enabled")


@pulumi.output_type
class ConfigurationSetSendingOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendingEnabled":
            suggest = "sending_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetSendingOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetSendingOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetSendingOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sending_enabled: Optional[bool] = None):
        """
        :param bool sending_enabled: If `true`, email sending is enabled for the configuration set. If `false`, email sending is disabled for the configuration set.
        """
        if sending_enabled is not None:
            pulumi.set(__self__, "sending_enabled", sending_enabled)

    @property
    @pulumi.getter(name="sendingEnabled")
    def sending_enabled(self) -> Optional[bool]:
        """
        If `true`, email sending is enabled for the configuration set. If `false`, email sending is disabled for the configuration set.
        """
        return pulumi.get(self, "sending_enabled")


@pulumi.output_type
class ConfigurationSetSuppressionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "suppressedReasons":
            suggest = "suppressed_reasons"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetSuppressionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetSuppressionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetSuppressionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 suppressed_reasons: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] suppressed_reasons: A list that contains the reasons that email addresses are automatically added to the suppression list for your account. Valid values: `BOUNCE`, `COMPLAINT`.
        """
        if suppressed_reasons is not None:
            pulumi.set(__self__, "suppressed_reasons", suppressed_reasons)

    @property
    @pulumi.getter(name="suppressedReasons")
    def suppressed_reasons(self) -> Optional[Sequence[str]]:
        """
        A list that contains the reasons that email addresses are automatically added to the suppression list for your account. Valid values: `BOUNCE`, `COMPLAINT`.
        """
        return pulumi.get(self, "suppressed_reasons")


@pulumi.output_type
class ConfigurationSetTrackingOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customRedirectDomain":
            suggest = "custom_redirect_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetTrackingOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetTrackingOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetTrackingOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_redirect_domain: str):
        """
        :param str custom_redirect_domain: The domain to use for tracking open and click events.
        """
        pulumi.set(__self__, "custom_redirect_domain", custom_redirect_domain)

    @property
    @pulumi.getter(name="customRedirectDomain")
    def custom_redirect_domain(self) -> str:
        """
        The domain to use for tracking open and click events.
        """
        return pulumi.get(self, "custom_redirect_domain")


@pulumi.output_type
class GetDedicatedIpPoolDedicatedIpResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 warmup_percentage: int,
                 warmup_status: str):
        """
        :param str ip: IPv4 address.
        :param int warmup_percentage: Indicates how complete the dedicated IP warm-up process is. When this value equals `1`, the address has completed the warm-up process and is ready for use.
        :param str warmup_status: The warm-up status of a dedicated IP address. Valid values: `IN_PROGRESS`, `DONE`.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "warmup_percentage", warmup_percentage)
        pulumi.set(__self__, "warmup_status", warmup_status)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IPv4 address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="warmupPercentage")
    def warmup_percentage(self) -> int:
        """
        Indicates how complete the dedicated IP warm-up process is. When this value equals `1`, the address has completed the warm-up process and is ready for use.
        """
        return pulumi.get(self, "warmup_percentage")

    @property
    @pulumi.getter(name="warmupStatus")
    def warmup_status(self) -> str:
        """
        The warm-up status of a dedicated IP address. Valid values: `IN_PROGRESS`, `DONE`.
        """
        return pulumi.get(self, "warmup_status")


