# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccountVdmAttributesDashboardAttributes',
    'AccountVdmAttributesGuardianAttributes',
    'ConfigurationSetDeliveryOptions',
    'ConfigurationSetEventDestinationEventDestination',
    'ConfigurationSetEventDestinationEventDestinationCloudWatchDestination',
    'ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationDimensionConfiguration',
    'ConfigurationSetEventDestinationEventDestinationKinesisFirehoseDestination',
    'ConfigurationSetEventDestinationEventDestinationPinpointDestination',
    'ConfigurationSetEventDestinationEventDestinationSnsDestination',
    'ConfigurationSetReputationOptions',
    'ConfigurationSetSendingOptions',
    'ConfigurationSetSuppressionOptions',
    'ConfigurationSetTrackingOptions',
    'ConfigurationSetVdmOptions',
    'ConfigurationSetVdmOptionsDashboardOptions',
    'ConfigurationSetVdmOptionsGuardianOptions',
    'ContactListTopic',
    'EmailIdentityDkimSigningAttributes',
    'GetConfigurationSetDeliveryOptionResult',
    'GetConfigurationSetReputationOptionResult',
    'GetConfigurationSetSendingOptionResult',
    'GetConfigurationSetSuppressionOptionResult',
    'GetConfigurationSetTrackingOptionResult',
    'GetConfigurationSetVdmOptionResult',
    'GetConfigurationSetVdmOptionDashboardOptionResult',
    'GetConfigurationSetVdmOptionGuardianOptionResult',
    'GetDedicatedIpPoolDedicatedIpResult',
    'GetEmailIdentityDkimSigningAttributeResult',
]

@pulumi.output_type
class AccountVdmAttributesDashboardAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engagementMetrics":
            suggest = "engagement_metrics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountVdmAttributesDashboardAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountVdmAttributesDashboardAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountVdmAttributesDashboardAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engagement_metrics: Optional[str] = None):
        """
        :param str engagement_metrics: Specifies the status of your VDM engagement metrics collection. Valid values: `ENABLED`, `DISABLED`.
        """
        if engagement_metrics is not None:
            pulumi.set(__self__, "engagement_metrics", engagement_metrics)

    @property
    @pulumi.getter(name="engagementMetrics")
    def engagement_metrics(self) -> Optional[str]:
        """
        Specifies the status of your VDM engagement metrics collection. Valid values: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "engagement_metrics")


@pulumi.output_type
class AccountVdmAttributesGuardianAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optimizedSharedDelivery":
            suggest = "optimized_shared_delivery"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountVdmAttributesGuardianAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountVdmAttributesGuardianAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountVdmAttributesGuardianAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optimized_shared_delivery: Optional[str] = None):
        """
        :param str optimized_shared_delivery: Specifies the status of your VDM optimized shared delivery. Valid values: `ENABLED`, `DISABLED`.
        """
        if optimized_shared_delivery is not None:
            pulumi.set(__self__, "optimized_shared_delivery", optimized_shared_delivery)

    @property
    @pulumi.getter(name="optimizedSharedDelivery")
    def optimized_shared_delivery(self) -> Optional[str]:
        """
        Specifies the status of your VDM optimized shared delivery. Valid values: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "optimized_shared_delivery")


@pulumi.output_type
class ConfigurationSetDeliveryOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendingPoolName":
            suggest = "sending_pool_name"
        elif key == "tlsPolicy":
            suggest = "tls_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetDeliveryOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetDeliveryOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetDeliveryOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sending_pool_name: Optional[str] = None,
                 tls_policy: Optional[str] = None):
        """
        :param str sending_pool_name: The name of the dedicated IP pool to associate with the configuration set.
        :param str tls_policy: Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Valid values: `REQUIRE`, `OPTIONAL`.
        """
        if sending_pool_name is not None:
            pulumi.set(__self__, "sending_pool_name", sending_pool_name)
        if tls_policy is not None:
            pulumi.set(__self__, "tls_policy", tls_policy)

    @property
    @pulumi.getter(name="sendingPoolName")
    def sending_pool_name(self) -> Optional[str]:
        """
        The name of the dedicated IP pool to associate with the configuration set.
        """
        return pulumi.get(self, "sending_pool_name")

    @property
    @pulumi.getter(name="tlsPolicy")
    def tls_policy(self) -> Optional[str]:
        """
        Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Valid values: `REQUIRE`, `OPTIONAL`.
        """
        return pulumi.get(self, "tls_policy")


@pulumi.output_type
class ConfigurationSetEventDestinationEventDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchingEventTypes":
            suggest = "matching_event_types"
        elif key == "cloudWatchDestination":
            suggest = "cloud_watch_destination"
        elif key == "kinesisFirehoseDestination":
            suggest = "kinesis_firehose_destination"
        elif key == "pinpointDestination":
            suggest = "pinpoint_destination"
        elif key == "snsDestination":
            suggest = "sns_destination"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetEventDestinationEventDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetEventDestinationEventDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetEventDestinationEventDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 matching_event_types: Sequence[str],
                 cloud_watch_destination: Optional['outputs.ConfigurationSetEventDestinationEventDestinationCloudWatchDestination'] = None,
                 enabled: Optional[bool] = None,
                 kinesis_firehose_destination: Optional['outputs.ConfigurationSetEventDestinationEventDestinationKinesisFirehoseDestination'] = None,
                 pinpoint_destination: Optional['outputs.ConfigurationSetEventDestinationEventDestinationPinpointDestination'] = None,
                 sns_destination: Optional['outputs.ConfigurationSetEventDestinationEventDestinationSnsDestination'] = None):
        """
        :param Sequence[str] matching_event_types: An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: `SEND`, `REJECT`, `BOUNCE`, `COMPLAINT`, `DELIVERY`, `OPEN`, `CLICK`, `RENDERING_FAILURE`, `DELIVERY_DELAY`, `SUBSCRIPTION`.
               
               The following arguments are optional:
        :param 'ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationArgs' cloud_watch_destination: An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination below
        :param bool enabled: When the event destination is enabled, the specified event types are sent to the destinations. Default: `false`.
        :param 'ConfigurationSetEventDestinationEventDestinationKinesisFirehoseDestinationArgs' kinesis_firehose_destination: An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination below.
        :param 'ConfigurationSetEventDestinationEventDestinationPinpointDestinationArgs' pinpoint_destination: An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination below.
        :param 'ConfigurationSetEventDestinationEventDestinationSnsDestinationArgs' sns_destination: An object that defines an Amazon SNS destination for email events. See sns_destination below.
        """
        pulumi.set(__self__, "matching_event_types", matching_event_types)
        if cloud_watch_destination is not None:
            pulumi.set(__self__, "cloud_watch_destination", cloud_watch_destination)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kinesis_firehose_destination is not None:
            pulumi.set(__self__, "kinesis_firehose_destination", kinesis_firehose_destination)
        if pinpoint_destination is not None:
            pulumi.set(__self__, "pinpoint_destination", pinpoint_destination)
        if sns_destination is not None:
            pulumi.set(__self__, "sns_destination", sns_destination)

    @property
    @pulumi.getter(name="matchingEventTypes")
    def matching_event_types(self) -> Sequence[str]:
        """
        An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: `SEND`, `REJECT`, `BOUNCE`, `COMPLAINT`, `DELIVERY`, `OPEN`, `CLICK`, `RENDERING_FAILURE`, `DELIVERY_DELAY`, `SUBSCRIPTION`.

        The following arguments are optional:
        """
        return pulumi.get(self, "matching_event_types")

    @property
    @pulumi.getter(name="cloudWatchDestination")
    def cloud_watch_destination(self) -> Optional['outputs.ConfigurationSetEventDestinationEventDestinationCloudWatchDestination']:
        """
        An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination below
        """
        return pulumi.get(self, "cloud_watch_destination")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        When the event destination is enabled, the specified event types are sent to the destinations. Default: `false`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="kinesisFirehoseDestination")
    def kinesis_firehose_destination(self) -> Optional['outputs.ConfigurationSetEventDestinationEventDestinationKinesisFirehoseDestination']:
        """
        An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination below.
        """
        return pulumi.get(self, "kinesis_firehose_destination")

    @property
    @pulumi.getter(name="pinpointDestination")
    def pinpoint_destination(self) -> Optional['outputs.ConfigurationSetEventDestinationEventDestinationPinpointDestination']:
        """
        An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination below.
        """
        return pulumi.get(self, "pinpoint_destination")

    @property
    @pulumi.getter(name="snsDestination")
    def sns_destination(self) -> Optional['outputs.ConfigurationSetEventDestinationEventDestinationSnsDestination']:
        """
        An object that defines an Amazon SNS destination for email events. See sns_destination below.
        """
        return pulumi.get(self, "sns_destination")


@pulumi.output_type
class ConfigurationSetEventDestinationEventDestinationCloudWatchDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionConfigurations":
            suggest = "dimension_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetEventDestinationEventDestinationCloudWatchDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetEventDestinationEventDestinationCloudWatchDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetEventDestinationEventDestinationCloudWatchDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimension_configurations: Sequence['outputs.ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationDimensionConfiguration']):
        """
        :param Sequence['ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationDimensionConfigurationArgs'] dimension_configurations: An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See dimension_configuration below.
        """
        pulumi.set(__self__, "dimension_configurations", dimension_configurations)

    @property
    @pulumi.getter(name="dimensionConfigurations")
    def dimension_configurations(self) -> Sequence['outputs.ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationDimensionConfiguration']:
        """
        An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See dimension_configuration below.
        """
        return pulumi.get(self, "dimension_configurations")


@pulumi.output_type
class ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationDimensionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultDimensionValue":
            suggest = "default_dimension_value"
        elif key == "dimensionName":
            suggest = "dimension_name"
        elif key == "dimensionValueSource":
            suggest = "dimension_value_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationDimensionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationDimensionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetEventDestinationEventDestinationCloudWatchDestinationDimensionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_dimension_value: str,
                 dimension_name: str,
                 dimension_value_source: str):
        """
        :param str default_dimension_value: The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email.
        :param str dimension_name: The name of an Amazon CloudWatch dimension associated with an email sending metric.
        :param str dimension_value_source: The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: `MESSAGE_TAG`, `EMAIL_HEADER`, `LINK_TAG`.
        """
        pulumi.set(__self__, "default_dimension_value", default_dimension_value)
        pulumi.set(__self__, "dimension_name", dimension_name)
        pulumi.set(__self__, "dimension_value_source", dimension_value_source)

    @property
    @pulumi.getter(name="defaultDimensionValue")
    def default_dimension_value(self) -> str:
        """
        The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email.
        """
        return pulumi.get(self, "default_dimension_value")

    @property
    @pulumi.getter(name="dimensionName")
    def dimension_name(self) -> str:
        """
        The name of an Amazon CloudWatch dimension associated with an email sending metric.
        """
        return pulumi.get(self, "dimension_name")

    @property
    @pulumi.getter(name="dimensionValueSource")
    def dimension_value_source(self) -> str:
        """
        The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: `MESSAGE_TAG`, `EMAIL_HEADER`, `LINK_TAG`.
        """
        return pulumi.get(self, "dimension_value_source")


@pulumi.output_type
class ConfigurationSetEventDestinationEventDestinationKinesisFirehoseDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deliveryStreamArn":
            suggest = "delivery_stream_arn"
        elif key == "iamRoleArn":
            suggest = "iam_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetEventDestinationEventDestinationKinesisFirehoseDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetEventDestinationEventDestinationKinesisFirehoseDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetEventDestinationEventDestinationKinesisFirehoseDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delivery_stream_arn: str,
                 iam_role_arn: str):
        """
        :param str delivery_stream_arn: The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.
        :param str iam_role_arn: The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.
        """
        pulumi.set(__self__, "delivery_stream_arn", delivery_stream_arn)
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)

    @property
    @pulumi.getter(name="deliveryStreamArn")
    def delivery_stream_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.
        """
        return pulumi.get(self, "delivery_stream_arn")

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.
        """
        return pulumi.get(self, "iam_role_arn")


@pulumi.output_type
class ConfigurationSetEventDestinationEventDestinationPinpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationArn":
            suggest = "application_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetEventDestinationEventDestinationPinpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetEventDestinationEventDestinationPinpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetEventDestinationEventDestinationPinpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_arn: str):
        pulumi.set(__self__, "application_arn", application_arn)

    @property
    @pulumi.getter(name="applicationArn")
    def application_arn(self) -> str:
        return pulumi.get(self, "application_arn")


@pulumi.output_type
class ConfigurationSetEventDestinationEventDestinationSnsDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicArn":
            suggest = "topic_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetEventDestinationEventDestinationSnsDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetEventDestinationEventDestinationSnsDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetEventDestinationEventDestinationSnsDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_arn: str):
        """
        :param str topic_arn: The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to.
        """
        pulumi.set(__self__, "topic_arn", topic_arn)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to.
        """
        return pulumi.get(self, "topic_arn")


@pulumi.output_type
class ConfigurationSetReputationOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastFreshStart":
            suggest = "last_fresh_start"
        elif key == "reputationMetricsEnabled":
            suggest = "reputation_metrics_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetReputationOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetReputationOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetReputationOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_fresh_start: Optional[str] = None,
                 reputation_metrics_enabled: Optional[bool] = None):
        """
        :param str last_fresh_start: The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        :param bool reputation_metrics_enabled: If `true`, tracking of reputation metrics is enabled for the configuration set. If `false`, tracking of reputation metrics is disabled for the configuration set.
        """
        if last_fresh_start is not None:
            pulumi.set(__self__, "last_fresh_start", last_fresh_start)
        if reputation_metrics_enabled is not None:
            pulumi.set(__self__, "reputation_metrics_enabled", reputation_metrics_enabled)

    @property
    @pulumi.getter(name="lastFreshStart")
    def last_fresh_start(self) -> Optional[str]:
        """
        The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        """
        return pulumi.get(self, "last_fresh_start")

    @property
    @pulumi.getter(name="reputationMetricsEnabled")
    def reputation_metrics_enabled(self) -> Optional[bool]:
        """
        If `true`, tracking of reputation metrics is enabled for the configuration set. If `false`, tracking of reputation metrics is disabled for the configuration set.
        """
        return pulumi.get(self, "reputation_metrics_enabled")


@pulumi.output_type
class ConfigurationSetSendingOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendingEnabled":
            suggest = "sending_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetSendingOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetSendingOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetSendingOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sending_enabled: Optional[bool] = None):
        """
        :param bool sending_enabled: If `true`, email sending is enabled for the configuration set. If `false`, email sending is disabled for the configuration set.
        """
        if sending_enabled is not None:
            pulumi.set(__self__, "sending_enabled", sending_enabled)

    @property
    @pulumi.getter(name="sendingEnabled")
    def sending_enabled(self) -> Optional[bool]:
        """
        If `true`, email sending is enabled for the configuration set. If `false`, email sending is disabled for the configuration set.
        """
        return pulumi.get(self, "sending_enabled")


@pulumi.output_type
class ConfigurationSetSuppressionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "suppressedReasons":
            suggest = "suppressed_reasons"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetSuppressionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetSuppressionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetSuppressionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 suppressed_reasons: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] suppressed_reasons: A list that contains the reasons that email addresses are automatically added to the suppression list for your account. Valid values: `BOUNCE`, `COMPLAINT`.
        """
        if suppressed_reasons is not None:
            pulumi.set(__self__, "suppressed_reasons", suppressed_reasons)

    @property
    @pulumi.getter(name="suppressedReasons")
    def suppressed_reasons(self) -> Optional[Sequence[str]]:
        """
        A list that contains the reasons that email addresses are automatically added to the suppression list for your account. Valid values: `BOUNCE`, `COMPLAINT`.
        """
        return pulumi.get(self, "suppressed_reasons")


@pulumi.output_type
class ConfigurationSetTrackingOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customRedirectDomain":
            suggest = "custom_redirect_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetTrackingOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetTrackingOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetTrackingOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_redirect_domain: str):
        """
        :param str custom_redirect_domain: The domain to use for tracking open and click events.
        """
        pulumi.set(__self__, "custom_redirect_domain", custom_redirect_domain)

    @property
    @pulumi.getter(name="customRedirectDomain")
    def custom_redirect_domain(self) -> str:
        """
        The domain to use for tracking open and click events.
        """
        return pulumi.get(self, "custom_redirect_domain")


@pulumi.output_type
class ConfigurationSetVdmOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dashboardOptions":
            suggest = "dashboard_options"
        elif key == "guardianOptions":
            suggest = "guardian_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetVdmOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetVdmOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetVdmOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dashboard_options: Optional['outputs.ConfigurationSetVdmOptionsDashboardOptions'] = None,
                 guardian_options: Optional['outputs.ConfigurationSetVdmOptionsGuardianOptions'] = None):
        """
        :param 'ConfigurationSetVdmOptionsDashboardOptionsArgs' dashboard_options: Specifies additional settings for your VDM configuration as applicable to the Dashboard.
        :param 'ConfigurationSetVdmOptionsGuardianOptionsArgs' guardian_options: Specifies additional settings for your VDM configuration as applicable to the Guardian.
        """
        if dashboard_options is not None:
            pulumi.set(__self__, "dashboard_options", dashboard_options)
        if guardian_options is not None:
            pulumi.set(__self__, "guardian_options", guardian_options)

    @property
    @pulumi.getter(name="dashboardOptions")
    def dashboard_options(self) -> Optional['outputs.ConfigurationSetVdmOptionsDashboardOptions']:
        """
        Specifies additional settings for your VDM configuration as applicable to the Dashboard.
        """
        return pulumi.get(self, "dashboard_options")

    @property
    @pulumi.getter(name="guardianOptions")
    def guardian_options(self) -> Optional['outputs.ConfigurationSetVdmOptionsGuardianOptions']:
        """
        Specifies additional settings for your VDM configuration as applicable to the Guardian.
        """
        return pulumi.get(self, "guardian_options")


@pulumi.output_type
class ConfigurationSetVdmOptionsDashboardOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engagementMetrics":
            suggest = "engagement_metrics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetVdmOptionsDashboardOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetVdmOptionsDashboardOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetVdmOptionsDashboardOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engagement_metrics: Optional[str] = None):
        """
        :param str engagement_metrics: Specifies the status of your VDM engagement metrics collection. Valid values: `ENABLED`, `DISABLED`.
        """
        if engagement_metrics is not None:
            pulumi.set(__self__, "engagement_metrics", engagement_metrics)

    @property
    @pulumi.getter(name="engagementMetrics")
    def engagement_metrics(self) -> Optional[str]:
        """
        Specifies the status of your VDM engagement metrics collection. Valid values: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "engagement_metrics")


@pulumi.output_type
class ConfigurationSetVdmOptionsGuardianOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optimizedSharedDelivery":
            suggest = "optimized_shared_delivery"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetVdmOptionsGuardianOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetVdmOptionsGuardianOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetVdmOptionsGuardianOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optimized_shared_delivery: Optional[str] = None):
        """
        :param str optimized_shared_delivery: Specifies the status of your VDM optimized shared delivery. Valid values: `ENABLED`, `DISABLED`.
        """
        if optimized_shared_delivery is not None:
            pulumi.set(__self__, "optimized_shared_delivery", optimized_shared_delivery)

    @property
    @pulumi.getter(name="optimizedSharedDelivery")
    def optimized_shared_delivery(self) -> Optional[str]:
        """
        Specifies the status of your VDM optimized shared delivery. Valid values: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "optimized_shared_delivery")


@pulumi.output_type
class ContactListTopic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultSubscriptionStatus":
            suggest = "default_subscription_status"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactListTopic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactListTopic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactListTopic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_subscription_status: str,
                 display_name: str,
                 topic_name: str,
                 description: Optional[str] = None):
        """
        :param str default_subscription_status: The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
        :param str display_name: The name of the topic the contact will see.
        :param str topic_name: The name of the topic.
               
               The following arguments are optional:
        :param str description: A description of what the topic is about, which the contact will see.
        """
        pulumi.set(__self__, "default_subscription_status", default_subscription_status)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "topic_name", topic_name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="defaultSubscriptionStatus")
    def default_subscription_status(self) -> str:
        """
        The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
        """
        return pulumi.get(self, "default_subscription_status")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the topic the contact will see.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        """
        The name of the topic.

        The following arguments are optional:
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of what the topic is about, which the contact will see.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class EmailIdentityDkimSigningAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentSigningKeyLength":
            suggest = "current_signing_key_length"
        elif key == "domainSigningPrivateKey":
            suggest = "domain_signing_private_key"
        elif key == "domainSigningSelector":
            suggest = "domain_signing_selector"
        elif key == "lastKeyGenerationTimestamp":
            suggest = "last_key_generation_timestamp"
        elif key == "nextSigningKeyLength":
            suggest = "next_signing_key_length"
        elif key == "signingAttributesOrigin":
            suggest = "signing_attributes_origin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailIdentityDkimSigningAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailIdentityDkimSigningAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailIdentityDkimSigningAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_signing_key_length: Optional[str] = None,
                 domain_signing_private_key: Optional[str] = None,
                 domain_signing_selector: Optional[str] = None,
                 last_key_generation_timestamp: Optional[str] = None,
                 next_signing_key_length: Optional[str] = None,
                 signing_attributes_origin: Optional[str] = None,
                 status: Optional[str] = None,
                 tokens: Optional[Sequence[str]] = None):
        """
        :param str current_signing_key_length: [Easy DKIM] The key length of the DKIM key pair in use.
        :param str domain_signing_private_key: [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.
               
               > **NOTE:** You have to delete the first and last lines ('-----BEGIN PRIVATE KEY-----' and '-----END PRIVATE KEY-----', respectively) of the generated private key. Additionally, you have to remove the line breaks in the generated private key. The resulting value is a string of characters with no spaces or line breaks.
        :param str domain_signing_selector: [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
        :param str last_key_generation_timestamp: [Easy DKIM] The last time a key pair was generated for this identity.
        :param str next_signing_key_length: [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day. Valid values: `RSA_1024_BIT`, `RSA_2048_BIT`.
        :param str signing_attributes_origin: A string that indicates how DKIM was configured for the identity. `AWS_SES` indicates that DKIM was configured for the identity by using Easy DKIM. `EXTERNAL` indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).
        :param str status: Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. See the [AWS SES API v2 Reference](https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_DkimAttributes.html#SES-Type-DkimAttributes-Status) for supported statuses.
        :param Sequence[str] tokens: If you used Easy DKIM to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.
        """
        if current_signing_key_length is not None:
            pulumi.set(__self__, "current_signing_key_length", current_signing_key_length)
        if domain_signing_private_key is not None:
            pulumi.set(__self__, "domain_signing_private_key", domain_signing_private_key)
        if domain_signing_selector is not None:
            pulumi.set(__self__, "domain_signing_selector", domain_signing_selector)
        if last_key_generation_timestamp is not None:
            pulumi.set(__self__, "last_key_generation_timestamp", last_key_generation_timestamp)
        if next_signing_key_length is not None:
            pulumi.set(__self__, "next_signing_key_length", next_signing_key_length)
        if signing_attributes_origin is not None:
            pulumi.set(__self__, "signing_attributes_origin", signing_attributes_origin)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tokens is not None:
            pulumi.set(__self__, "tokens", tokens)

    @property
    @pulumi.getter(name="currentSigningKeyLength")
    def current_signing_key_length(self) -> Optional[str]:
        """
        [Easy DKIM] The key length of the DKIM key pair in use.
        """
        return pulumi.get(self, "current_signing_key_length")

    @property
    @pulumi.getter(name="domainSigningPrivateKey")
    def domain_signing_private_key(self) -> Optional[str]:
        """
        [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.

        > **NOTE:** You have to delete the first and last lines ('-----BEGIN PRIVATE KEY-----' and '-----END PRIVATE KEY-----', respectively) of the generated private key. Additionally, you have to remove the line breaks in the generated private key. The resulting value is a string of characters with no spaces or line breaks.
        """
        return pulumi.get(self, "domain_signing_private_key")

    @property
    @pulumi.getter(name="domainSigningSelector")
    def domain_signing_selector(self) -> Optional[str]:
        """
        [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
        """
        return pulumi.get(self, "domain_signing_selector")

    @property
    @pulumi.getter(name="lastKeyGenerationTimestamp")
    def last_key_generation_timestamp(self) -> Optional[str]:
        """
        [Easy DKIM] The last time a key pair was generated for this identity.
        """
        return pulumi.get(self, "last_key_generation_timestamp")

    @property
    @pulumi.getter(name="nextSigningKeyLength")
    def next_signing_key_length(self) -> Optional[str]:
        """
        [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day. Valid values: `RSA_1024_BIT`, `RSA_2048_BIT`.
        """
        return pulumi.get(self, "next_signing_key_length")

    @property
    @pulumi.getter(name="signingAttributesOrigin")
    def signing_attributes_origin(self) -> Optional[str]:
        """
        A string that indicates how DKIM was configured for the identity. `AWS_SES` indicates that DKIM was configured for the identity by using Easy DKIM. `EXTERNAL` indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).
        """
        return pulumi.get(self, "signing_attributes_origin")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. See the [AWS SES API v2 Reference](https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_DkimAttributes.html#SES-Type-DkimAttributes-Status) for supported statuses.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tokens(self) -> Optional[Sequence[str]]:
        """
        If you used Easy DKIM to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.
        """
        return pulumi.get(self, "tokens")


@pulumi.output_type
class GetConfigurationSetDeliveryOptionResult(dict):
    def __init__(__self__, *,
                 sending_pool_name: str,
                 tls_policy: str):
        """
        :param str sending_pool_name: The name of the dedicated IP pool to associate with the configuration set.
        :param str tls_policy: Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
        """
        pulumi.set(__self__, "sending_pool_name", sending_pool_name)
        pulumi.set(__self__, "tls_policy", tls_policy)

    @property
    @pulumi.getter(name="sendingPoolName")
    def sending_pool_name(self) -> str:
        """
        The name of the dedicated IP pool to associate with the configuration set.
        """
        return pulumi.get(self, "sending_pool_name")

    @property
    @pulumi.getter(name="tlsPolicy")
    def tls_policy(self) -> str:
        """
        Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
        """
        return pulumi.get(self, "tls_policy")


@pulumi.output_type
class GetConfigurationSetReputationOptionResult(dict):
    def __init__(__self__, *,
                 last_fresh_start: str,
                 reputation_metrics_enabled: bool):
        """
        :param str last_fresh_start: The date and time (in Unix time) when the reputation metrics were last given a fresh start.
        :param bool reputation_metrics_enabled: Specifies whether tracking of reputation metrics is enabled.
        """
        pulumi.set(__self__, "last_fresh_start", last_fresh_start)
        pulumi.set(__self__, "reputation_metrics_enabled", reputation_metrics_enabled)

    @property
    @pulumi.getter(name="lastFreshStart")
    def last_fresh_start(self) -> str:
        """
        The date and time (in Unix time) when the reputation metrics were last given a fresh start.
        """
        return pulumi.get(self, "last_fresh_start")

    @property
    @pulumi.getter(name="reputationMetricsEnabled")
    def reputation_metrics_enabled(self) -> bool:
        """
        Specifies whether tracking of reputation metrics is enabled.
        """
        return pulumi.get(self, "reputation_metrics_enabled")


@pulumi.output_type
class GetConfigurationSetSendingOptionResult(dict):
    def __init__(__self__, *,
                 sending_enabled: bool):
        """
        :param bool sending_enabled: Specifies whether email sending is enabled.
        """
        pulumi.set(__self__, "sending_enabled", sending_enabled)

    @property
    @pulumi.getter(name="sendingEnabled")
    def sending_enabled(self) -> bool:
        """
        Specifies whether email sending is enabled.
        """
        return pulumi.get(self, "sending_enabled")


@pulumi.output_type
class GetConfigurationSetSuppressionOptionResult(dict):
    def __init__(__self__, *,
                 suppressed_reasons: Sequence[str]):
        """
        :param Sequence[str] suppressed_reasons: A list that contains the reasons that email addresses are automatically added to the suppression list for your account.
        """
        pulumi.set(__self__, "suppressed_reasons", suppressed_reasons)

    @property
    @pulumi.getter(name="suppressedReasons")
    def suppressed_reasons(self) -> Sequence[str]:
        """
        A list that contains the reasons that email addresses are automatically added to the suppression list for your account.
        """
        return pulumi.get(self, "suppressed_reasons")


@pulumi.output_type
class GetConfigurationSetTrackingOptionResult(dict):
    def __init__(__self__, *,
                 custom_redirect_domain: str):
        """
        :param str custom_redirect_domain: The domain to use for tracking open and click events.
        """
        pulumi.set(__self__, "custom_redirect_domain", custom_redirect_domain)

    @property
    @pulumi.getter(name="customRedirectDomain")
    def custom_redirect_domain(self) -> str:
        """
        The domain to use for tracking open and click events.
        """
        return pulumi.get(self, "custom_redirect_domain")


@pulumi.output_type
class GetConfigurationSetVdmOptionResult(dict):
    def __init__(__self__, *,
                 dashboard_options: Sequence['outputs.GetConfigurationSetVdmOptionDashboardOptionResult'],
                 guardian_options: Sequence['outputs.GetConfigurationSetVdmOptionGuardianOptionResult']):
        """
        :param Sequence['GetConfigurationSetVdmOptionDashboardOptionArgs'] dashboard_options: Specifies additional settings for your VDM configuration as applicable to the Dashboard.
        :param Sequence['GetConfigurationSetVdmOptionGuardianOptionArgs'] guardian_options: Specifies additional settings for your VDM configuration as applicable to the Guardian.
        """
        pulumi.set(__self__, "dashboard_options", dashboard_options)
        pulumi.set(__self__, "guardian_options", guardian_options)

    @property
    @pulumi.getter(name="dashboardOptions")
    def dashboard_options(self) -> Sequence['outputs.GetConfigurationSetVdmOptionDashboardOptionResult']:
        """
        Specifies additional settings for your VDM configuration as applicable to the Dashboard.
        """
        return pulumi.get(self, "dashboard_options")

    @property
    @pulumi.getter(name="guardianOptions")
    def guardian_options(self) -> Sequence['outputs.GetConfigurationSetVdmOptionGuardianOptionResult']:
        """
        Specifies additional settings for your VDM configuration as applicable to the Guardian.
        """
        return pulumi.get(self, "guardian_options")


@pulumi.output_type
class GetConfigurationSetVdmOptionDashboardOptionResult(dict):
    def __init__(__self__, *,
                 engagement_metrics: str):
        """
        :param str engagement_metrics: Specifies the status of your VDM engagement metrics collection.
        """
        pulumi.set(__self__, "engagement_metrics", engagement_metrics)

    @property
    @pulumi.getter(name="engagementMetrics")
    def engagement_metrics(self) -> str:
        """
        Specifies the status of your VDM engagement metrics collection.
        """
        return pulumi.get(self, "engagement_metrics")


@pulumi.output_type
class GetConfigurationSetVdmOptionGuardianOptionResult(dict):
    def __init__(__self__, *,
                 optimized_shared_delivery: str):
        """
        :param str optimized_shared_delivery: Specifies the status of your VDM optimized shared delivery.
        """
        pulumi.set(__self__, "optimized_shared_delivery", optimized_shared_delivery)

    @property
    @pulumi.getter(name="optimizedSharedDelivery")
    def optimized_shared_delivery(self) -> str:
        """
        Specifies the status of your VDM optimized shared delivery.
        """
        return pulumi.get(self, "optimized_shared_delivery")


@pulumi.output_type
class GetDedicatedIpPoolDedicatedIpResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 warmup_percentage: int,
                 warmup_status: str):
        """
        :param str ip: IPv4 address.
        :param int warmup_percentage: Indicates how complete the dedicated IP warm-up process is. When this value equals `1`, the address has completed the warm-up process and is ready for use.
        :param str warmup_status: The warm-up status of a dedicated IP address. Valid values: `IN_PROGRESS`, `DONE`.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "warmup_percentage", warmup_percentage)
        pulumi.set(__self__, "warmup_status", warmup_status)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IPv4 address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="warmupPercentage")
    def warmup_percentage(self) -> int:
        """
        Indicates how complete the dedicated IP warm-up process is. When this value equals `1`, the address has completed the warm-up process and is ready for use.
        """
        return pulumi.get(self, "warmup_percentage")

    @property
    @pulumi.getter(name="warmupStatus")
    def warmup_status(self) -> str:
        """
        The warm-up status of a dedicated IP address. Valid values: `IN_PROGRESS`, `DONE`.
        """
        return pulumi.get(self, "warmup_status")


@pulumi.output_type
class GetEmailIdentityDkimSigningAttributeResult(dict):
    def __init__(__self__, *,
                 current_signing_key_length: str,
                 domain_signing_private_key: str,
                 domain_signing_selector: str,
                 last_key_generation_timestamp: str,
                 next_signing_key_length: str,
                 signing_attributes_origin: str,
                 status: str,
                 tokens: Sequence[str]):
        """
        :param str current_signing_key_length: [Easy DKIM] The key length of the DKIM key pair in use.
        :param str last_key_generation_timestamp: [Easy DKIM] The last time a key pair was generated for this identity.
        :param str next_signing_key_length: [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        :param str signing_attributes_origin: A string that indicates how DKIM was configured for the identity. `AWS_SES` indicates that DKIM was configured for the identity by using Easy DKIM. `EXTERNAL` indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).
        :param str status: Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. See the [AWS SES API v2 Reference](https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_DkimAttributes.html#SES-Type-DkimAttributes-Status) for supported statuses.
        :param Sequence[str] tokens: If you used Easy DKIM to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.
        """
        pulumi.set(__self__, "current_signing_key_length", current_signing_key_length)
        pulumi.set(__self__, "domain_signing_private_key", domain_signing_private_key)
        pulumi.set(__self__, "domain_signing_selector", domain_signing_selector)
        pulumi.set(__self__, "last_key_generation_timestamp", last_key_generation_timestamp)
        pulumi.set(__self__, "next_signing_key_length", next_signing_key_length)
        pulumi.set(__self__, "signing_attributes_origin", signing_attributes_origin)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tokens", tokens)

    @property
    @pulumi.getter(name="currentSigningKeyLength")
    def current_signing_key_length(self) -> str:
        """
        [Easy DKIM] The key length of the DKIM key pair in use.
        """
        return pulumi.get(self, "current_signing_key_length")

    @property
    @pulumi.getter(name="domainSigningPrivateKey")
    def domain_signing_private_key(self) -> str:
        return pulumi.get(self, "domain_signing_private_key")

    @property
    @pulumi.getter(name="domainSigningSelector")
    def domain_signing_selector(self) -> str:
        return pulumi.get(self, "domain_signing_selector")

    @property
    @pulumi.getter(name="lastKeyGenerationTimestamp")
    def last_key_generation_timestamp(self) -> str:
        """
        [Easy DKIM] The last time a key pair was generated for this identity.
        """
        return pulumi.get(self, "last_key_generation_timestamp")

    @property
    @pulumi.getter(name="nextSigningKeyLength")
    def next_signing_key_length(self) -> str:
        """
        [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        """
        return pulumi.get(self, "next_signing_key_length")

    @property
    @pulumi.getter(name="signingAttributesOrigin")
    def signing_attributes_origin(self) -> str:
        """
        A string that indicates how DKIM was configured for the identity. `AWS_SES` indicates that DKIM was configured for the identity by using Easy DKIM. `EXTERNAL` indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).
        """
        return pulumi.get(self, "signing_attributes_origin")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. See the [AWS SES API v2 Reference](https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_DkimAttributes.html#SES-Type-DkimAttributes-Status) for supported statuses.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tokens(self) -> Sequence[str]:
        """
        If you used Easy DKIM to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.
        """
        return pulumi.get(self, "tokens")


