# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DatabaseAclConfiguration',
    'DatabaseEncryptionConfiguration',
    'WorkgroupConfiguration',
    'WorkgroupConfigurationEngineVersion',
    'WorkgroupConfigurationResultConfiguration',
    'WorkgroupConfigurationResultConfigurationAclConfiguration',
    'WorkgroupConfigurationResultConfigurationEncryptionConfiguration',
]

@pulumi.output_type
class DatabaseAclConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3AclOption":
            suggest = "s3_acl_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseAclConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseAclConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseAclConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_acl_option: str):
        pulumi.set(__self__, "s3_acl_option", s3_acl_option)

    @property
    @pulumi.getter(name="s3AclOption")
    def s3_acl_option(self) -> str:
        return pulumi.get(self, "s3_acl_option")


@pulumi.output_type
class DatabaseEncryptionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionOption":
            suggest = "encryption_option"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseEncryptionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseEncryptionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseEncryptionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_option: str,
                 kms_key: Optional[str] = None):
        pulumi.set(__self__, "encryption_option", encryption_option)
        if kms_key is not None:
            pulumi.set(__self__, "kms_key", kms_key)

    @property
    @pulumi.getter(name="encryptionOption")
    def encryption_option(self) -> str:
        return pulumi.get(self, "encryption_option")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")


@pulumi.output_type
class WorkgroupConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bytesScannedCutoffPerQuery":
            suggest = "bytes_scanned_cutoff_per_query"
        elif key == "enforceWorkgroupConfiguration":
            suggest = "enforce_workgroup_configuration"
        elif key == "engineVersion":
            suggest = "engine_version"
        elif key == "executionRole":
            suggest = "execution_role"
        elif key == "publishCloudwatchMetricsEnabled":
            suggest = "publish_cloudwatch_metrics_enabled"
        elif key == "requesterPaysEnabled":
            suggest = "requester_pays_enabled"
        elif key == "resultConfiguration":
            suggest = "result_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkgroupConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkgroupConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkgroupConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bytes_scanned_cutoff_per_query: Optional[int] = None,
                 enforce_workgroup_configuration: Optional[bool] = None,
                 engine_version: Optional['outputs.WorkgroupConfigurationEngineVersion'] = None,
                 execution_role: Optional[str] = None,
                 publish_cloudwatch_metrics_enabled: Optional[bool] = None,
                 requester_pays_enabled: Optional[bool] = None,
                 result_configuration: Optional['outputs.WorkgroupConfigurationResultConfiguration'] = None):
        if bytes_scanned_cutoff_per_query is not None:
            pulumi.set(__self__, "bytes_scanned_cutoff_per_query", bytes_scanned_cutoff_per_query)
        if enforce_workgroup_configuration is not None:
            pulumi.set(__self__, "enforce_workgroup_configuration", enforce_workgroup_configuration)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if publish_cloudwatch_metrics_enabled is not None:
            pulumi.set(__self__, "publish_cloudwatch_metrics_enabled", publish_cloudwatch_metrics_enabled)
        if requester_pays_enabled is not None:
            pulumi.set(__self__, "requester_pays_enabled", requester_pays_enabled)
        if result_configuration is not None:
            pulumi.set(__self__, "result_configuration", result_configuration)

    @property
    @pulumi.getter(name="bytesScannedCutoffPerQuery")
    def bytes_scanned_cutoff_per_query(self) -> Optional[int]:
        return pulumi.get(self, "bytes_scanned_cutoff_per_query")

    @property
    @pulumi.getter(name="enforceWorkgroupConfiguration")
    def enforce_workgroup_configuration(self) -> Optional[bool]:
        return pulumi.get(self, "enforce_workgroup_configuration")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional['outputs.WorkgroupConfigurationEngineVersion']:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[str]:
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="publishCloudwatchMetricsEnabled")
    def publish_cloudwatch_metrics_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "publish_cloudwatch_metrics_enabled")

    @property
    @pulumi.getter(name="requesterPaysEnabled")
    def requester_pays_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "requester_pays_enabled")

    @property
    @pulumi.getter(name="resultConfiguration")
    def result_configuration(self) -> Optional['outputs.WorkgroupConfigurationResultConfiguration']:
        return pulumi.get(self, "result_configuration")


@pulumi.output_type
class WorkgroupConfigurationEngineVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "effectiveEngineVersion":
            suggest = "effective_engine_version"
        elif key == "selectedEngineVersion":
            suggest = "selected_engine_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkgroupConfigurationEngineVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkgroupConfigurationEngineVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkgroupConfigurationEngineVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effective_engine_version: Optional[str] = None,
                 selected_engine_version: Optional[str] = None):
        if effective_engine_version is not None:
            pulumi.set(__self__, "effective_engine_version", effective_engine_version)
        if selected_engine_version is not None:
            pulumi.set(__self__, "selected_engine_version", selected_engine_version)

    @property
    @pulumi.getter(name="effectiveEngineVersion")
    def effective_engine_version(self) -> Optional[str]:
        return pulumi.get(self, "effective_engine_version")

    @property
    @pulumi.getter(name="selectedEngineVersion")
    def selected_engine_version(self) -> Optional[str]:
        return pulumi.get(self, "selected_engine_version")


@pulumi.output_type
class WorkgroupConfigurationResultConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclConfiguration":
            suggest = "acl_configuration"
        elif key == "encryptionConfiguration":
            suggest = "encryption_configuration"
        elif key == "expectedBucketOwner":
            suggest = "expected_bucket_owner"
        elif key == "outputLocation":
            suggest = "output_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkgroupConfigurationResultConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkgroupConfigurationResultConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkgroupConfigurationResultConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_configuration: Optional['outputs.WorkgroupConfigurationResultConfigurationAclConfiguration'] = None,
                 encryption_configuration: Optional['outputs.WorkgroupConfigurationResultConfigurationEncryptionConfiguration'] = None,
                 expected_bucket_owner: Optional[str] = None,
                 output_location: Optional[str] = None):
        if acl_configuration is not None:
            pulumi.set(__self__, "acl_configuration", acl_configuration)
        if encryption_configuration is not None:
            pulumi.set(__self__, "encryption_configuration", encryption_configuration)
        if expected_bucket_owner is not None:
            pulumi.set(__self__, "expected_bucket_owner", expected_bucket_owner)
        if output_location is not None:
            pulumi.set(__self__, "output_location", output_location)

    @property
    @pulumi.getter(name="aclConfiguration")
    def acl_configuration(self) -> Optional['outputs.WorkgroupConfigurationResultConfigurationAclConfiguration']:
        return pulumi.get(self, "acl_configuration")

    @property
    @pulumi.getter(name="encryptionConfiguration")
    def encryption_configuration(self) -> Optional['outputs.WorkgroupConfigurationResultConfigurationEncryptionConfiguration']:
        return pulumi.get(self, "encryption_configuration")

    @property
    @pulumi.getter(name="expectedBucketOwner")
    def expected_bucket_owner(self) -> Optional[str]:
        return pulumi.get(self, "expected_bucket_owner")

    @property
    @pulumi.getter(name="outputLocation")
    def output_location(self) -> Optional[str]:
        return pulumi.get(self, "output_location")


@pulumi.output_type
class WorkgroupConfigurationResultConfigurationAclConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3AclOption":
            suggest = "s3_acl_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkgroupConfigurationResultConfigurationAclConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkgroupConfigurationResultConfigurationAclConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkgroupConfigurationResultConfigurationAclConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_acl_option: str):
        pulumi.set(__self__, "s3_acl_option", s3_acl_option)

    @property
    @pulumi.getter(name="s3AclOption")
    def s3_acl_option(self) -> str:
        return pulumi.get(self, "s3_acl_option")


@pulumi.output_type
class WorkgroupConfigurationResultConfigurationEncryptionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionOption":
            suggest = "encryption_option"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkgroupConfigurationResultConfigurationEncryptionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkgroupConfigurationResultConfigurationEncryptionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkgroupConfigurationResultConfigurationEncryptionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_option: Optional[str] = None,
                 kms_key_arn: Optional[str] = None):
        if encryption_option is not None:
            pulumi.set(__self__, "encryption_option", encryption_option)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="encryptionOption")
    def encryption_option(self) -> Optional[str]:
        return pulumi.get(self, "encryption_option")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_arn")


