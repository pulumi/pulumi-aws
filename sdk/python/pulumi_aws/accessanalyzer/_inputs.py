# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AnalyzerConfigurationArgs',
    'AnalyzerConfigurationArgsDict',
    'AnalyzerConfigurationUnusedAccessArgs',
    'AnalyzerConfigurationUnusedAccessArgsDict',
    'ArchiveRuleFilterArgs',
    'ArchiveRuleFilterArgsDict',
]

MYPY = False

if not MYPY:
    class AnalyzerConfigurationArgsDict(TypedDict):
        unused_access: NotRequired[pulumi.Input['AnalyzerConfigurationUnusedAccessArgsDict']]
        """
        A block that specifies the configuration of an unused access analyzer for an AWS organization or account. Documented below
        """
elif False:
    AnalyzerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerConfigurationArgs:
    def __init__(__self__, *,
                 unused_access: Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']] = None):
        """
        :param pulumi.Input['AnalyzerConfigurationUnusedAccessArgs'] unused_access: A block that specifies the configuration of an unused access analyzer for an AWS organization or account. Documented below
        """
        if unused_access is not None:
            pulumi.set(__self__, "unused_access", unused_access)

    @property
    @pulumi.getter(name="unusedAccess")
    def unused_access(self) -> Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']]:
        """
        A block that specifies the configuration of an unused access analyzer for an AWS organization or account. Documented below
        """
        return pulumi.get(self, "unused_access")

    @unused_access.setter
    def unused_access(self, value: Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']]):
        pulumi.set(self, "unused_access", value)


if not MYPY:
    class AnalyzerConfigurationUnusedAccessArgsDict(TypedDict):
        unused_access_age: NotRequired[pulumi.Input[int]]
        """
        The specified access age in days for which to generate findings for unused access.
        """
elif False:
    AnalyzerConfigurationUnusedAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerConfigurationUnusedAccessArgs:
    def __init__(__self__, *,
                 unused_access_age: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] unused_access_age: The specified access age in days for which to generate findings for unused access.
        """
        if unused_access_age is not None:
            pulumi.set(__self__, "unused_access_age", unused_access_age)

    @property
    @pulumi.getter(name="unusedAccessAge")
    def unused_access_age(self) -> Optional[pulumi.Input[int]]:
        """
        The specified access age in days for which to generate findings for unused access.
        """
        return pulumi.get(self, "unused_access_age")

    @unused_access_age.setter
    def unused_access_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unused_access_age", value)


if not MYPY:
    class ArchiveRuleFilterArgsDict(TypedDict):
        criteria: pulumi.Input[str]
        """
        Filter criteria.
        """
        contains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Contains comparator.
        """
        eqs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Equals comparator.
        """
        exists: NotRequired[pulumi.Input[str]]
        """
        Boolean comparator.
        """
        neqs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Not Equals comparator.
        """
elif False:
    ArchiveRuleFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchiveRuleFilterArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input[str],
                 contains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eqs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exists: Optional[pulumi.Input[str]] = None,
                 neqs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] criteria: Filter criteria.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contains: Contains comparator.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] eqs: Equals comparator.
        :param pulumi.Input[str] exists: Boolean comparator.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] neqs: Not Equals comparator.
        """
        pulumi.set(__self__, "criteria", criteria)
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if eqs is not None:
            pulumi.set(__self__, "eqs", eqs)
        if exists is not None:
            pulumi.set(__self__, "exists", exists)
        if neqs is not None:
            pulumi.set(__self__, "neqs", neqs)

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Input[str]:
        """
        Filter criteria.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input[str]):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Contains comparator.
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def eqs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Equals comparator.
        """
        return pulumi.get(self, "eqs")

    @eqs.setter
    def eqs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "eqs", value)

    @property
    @pulumi.getter
    def exists(self) -> Optional[pulumi.Input[str]]:
        """
        Boolean comparator.
        """
        return pulumi.get(self, "exists")

    @exists.setter
    def exists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exists", value)

    @property
    @pulumi.getter
    def neqs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Not Equals comparator.
        """
        return pulumi.get(self, "neqs")

    @neqs.setter
    def neqs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "neqs", value)


