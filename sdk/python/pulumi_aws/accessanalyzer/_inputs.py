# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AnalyzerConfigurationArgs',
    'AnalyzerConfigurationArgsDict',
    'AnalyzerConfigurationUnusedAccessArgs',
    'AnalyzerConfigurationUnusedAccessArgsDict',
    'AnalyzerConfigurationUnusedAccessAnalysisRuleArgs',
    'AnalyzerConfigurationUnusedAccessAnalysisRuleArgsDict',
    'AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs',
    'AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgsDict',
    'ArchiveRuleFilterArgs',
    'ArchiveRuleFilterArgsDict',
]

MYPY = False

if not MYPY:
    class AnalyzerConfigurationArgsDict(TypedDict):
        unused_access: NotRequired[pulumi.Input['AnalyzerConfigurationUnusedAccessArgsDict']]
        """
        A block that specifies the configuration of an unused access analyzer for an AWS organization or account. Documented below
        """
elif False:
    AnalyzerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerConfigurationArgs:
    def __init__(__self__, *,
                 unused_access: Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']] = None):
        """
        :param pulumi.Input['AnalyzerConfigurationUnusedAccessArgs'] unused_access: A block that specifies the configuration of an unused access analyzer for an AWS organization or account. Documented below
        """
        if unused_access is not None:
            pulumi.set(__self__, "unused_access", unused_access)

    @property
    @pulumi.getter(name="unusedAccess")
    def unused_access(self) -> Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']]:
        """
        A block that specifies the configuration of an unused access analyzer for an AWS organization or account. Documented below
        """
        return pulumi.get(self, "unused_access")

    @unused_access.setter
    def unused_access(self, value: Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessArgs']]):
        pulumi.set(self, "unused_access", value)


if not MYPY:
    class AnalyzerConfigurationUnusedAccessArgsDict(TypedDict):
        analysis_rule: NotRequired[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleArgsDict']]
        """
        A block for analysis rules. Documented below
        """
        unused_access_age: NotRequired[pulumi.Input[builtins.int]]
        """
        The specified access age in days for which to generate findings for unused access.
        """
elif False:
    AnalyzerConfigurationUnusedAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerConfigurationUnusedAccessArgs:
    def __init__(__self__, *,
                 analysis_rule: Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleArgs']] = None,
                 unused_access_age: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleArgs'] analysis_rule: A block for analysis rules. Documented below
        :param pulumi.Input[builtins.int] unused_access_age: The specified access age in days for which to generate findings for unused access.
        """
        if analysis_rule is not None:
            pulumi.set(__self__, "analysis_rule", analysis_rule)
        if unused_access_age is not None:
            pulumi.set(__self__, "unused_access_age", unused_access_age)

    @property
    @pulumi.getter(name="analysisRule")
    def analysis_rule(self) -> Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleArgs']]:
        """
        A block for analysis rules. Documented below
        """
        return pulumi.get(self, "analysis_rule")

    @analysis_rule.setter
    def analysis_rule(self, value: Optional[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleArgs']]):
        pulumi.set(self, "analysis_rule", value)

    @property
    @pulumi.getter(name="unusedAccessAge")
    def unused_access_age(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The specified access age in days for which to generate findings for unused access.
        """
        return pulumi.get(self, "unused_access_age")

    @unused_access_age.setter
    def unused_access_age(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "unused_access_age", value)


if not MYPY:
    class AnalyzerConfigurationUnusedAccessAnalysisRuleArgsDict(TypedDict):
        exclusions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgsDict']]]]
        """
        A block for the analyzer rules containing criteria to exclude from analysis. Documented below
        """
elif False:
    AnalyzerConfigurationUnusedAccessAnalysisRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerConfigurationUnusedAccessAnalysisRuleArgs:
    def __init__(__self__, *,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs']]] exclusions: A block for the analyzer rules containing criteria to exclude from analysis. Documented below
        """
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs']]]]:
        """
        A block for the analyzer rules containing criteria to exclude from analysis. Documented below
        """
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs']]]]):
        pulumi.set(self, "exclusions", value)


if not MYPY:
    class AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgsDict(TypedDict):
        account_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        A list of account IDs to exclude from the analysis.
        """
        resource_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]]]
        """
        A list of key-value pairs for resource tags to exclude from the analysis.
        """
elif False:
    AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyzerConfigurationUnusedAccessAnalysisRuleExclusionArgs:
    def __init__(__self__, *,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] account_ids: A list of account IDs to exclude from the analysis.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]] resource_tags: A list of key-value pairs for resource tags to exclude from the analysis.
        """
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of account IDs to exclude from the analysis.
        """
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]]]:
        """
        A list of key-value pairs for resource tags to exclude from the analysis.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]]]):
        pulumi.set(self, "resource_tags", value)


if not MYPY:
    class ArchiveRuleFilterArgsDict(TypedDict):
        criteria: pulumi.Input[builtins.str]
        """
        Filter criteria.
        """
        contains: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Contains comparator.
        """
        eqs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Equals comparator.
        """
        exists: NotRequired[pulumi.Input[builtins.str]]
        """
        Boolean comparator.
        """
        neqs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Not Equals comparator.
        """
elif False:
    ArchiveRuleFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ArchiveRuleFilterArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input[builtins.str],
                 contains: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 eqs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 exists: Optional[pulumi.Input[builtins.str]] = None,
                 neqs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] criteria: Filter criteria.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] contains: Contains comparator.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] eqs: Equals comparator.
        :param pulumi.Input[builtins.str] exists: Boolean comparator.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] neqs: Not Equals comparator.
        """
        pulumi.set(__self__, "criteria", criteria)
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if eqs is not None:
            pulumi.set(__self__, "eqs", eqs)
        if exists is not None:
            pulumi.set(__self__, "exists", exists)
        if neqs is not None:
            pulumi.set(__self__, "neqs", neqs)

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Input[builtins.str]:
        """
        Filter criteria.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Contains comparator.
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def eqs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Equals comparator.
        """
        return pulumi.get(self, "eqs")

    @eqs.setter
    def eqs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "eqs", value)

    @property
    @pulumi.getter
    def exists(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Boolean comparator.
        """
        return pulumi.get(self, "exists")

    @exists.setter
    def exists(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exists", value)

    @property
    @pulumi.getter
    def neqs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Not Equals comparator.
        """
        return pulumi.get(self, "neqs")

    @neqs.setter
    def neqs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "neqs", value)


