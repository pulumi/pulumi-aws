# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetResourceShareResult:
    """
    A collection of values returned by getResourceShare.
    """
    def __init__(__self__, arn=None, filters=None, id=None, name=None, owning_account_id=None, resource_owner=None, status=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        __self__.arn = arn
        """
        The Amazon Resource Name (ARN) of the resource share.
        """
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        __self__.filters = filters
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if owning_account_id and not isinstance(owning_account_id, str):
            raise TypeError("Expected argument 'owning_account_id' to be a str")
        __self__.owning_account_id = owning_account_id
        """
        The ID of the AWS account that owns the resource share.
        """
        if resource_owner and not isinstance(resource_owner, str):
            raise TypeError("Expected argument 'resource_owner' to be a str")
        __self__.resource_owner = resource_owner
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        The Status of the RAM share.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        """
        The Tags attached to the RAM share
        """
class AwaitableGetResourceShareResult(GetResourceShareResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceShareResult(
            arn=self.arn,
            filters=self.filters,
            id=self.id,
            name=self.name,
            owning_account_id=self.owning_account_id,
            resource_owner=self.resource_owner,
            status=self.status,
            tags=self.tags)

def get_resource_share(filters=None,name=None,resource_owner=None,tags=None,opts=None):
    """
    `ram.ResourceShare` Retrieve information about a RAM Resource Share.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.ram.get_resource_share(name="example",
        resource_owner="SELF")
    ```
    ## Search by filters

    ```python
    import pulumi
    import pulumi_aws as aws

    tag_filter = aws.ram.get_resource_share(filters=[{
            "name": "NameOfTag",
            "values": ["exampleNameTagValue"],
        }],
        name="MyResourceName",
        resource_owner="SELF")
    ```


    :param list filters: A filter used to scope the list e.g. by tags. See [related docs] (https://docs.aws.amazon.com/ram/latest/APIReference/API_TagFilter.html).
    :param str name: The name of the tag key to filter on.
    :param str resource_owner: The owner of the resource share. Valid values are SELF or OTHER-ACCOUNTS
    :param dict tags: The Tags attached to the RAM share

    The **filters** object supports the following:

      * `name` (`str`) - The name of the tag key to filter on.
      * `values` (`list`) - The value of the tag key.
    """
    __args__ = dict()


    __args__['filters'] = filters
    __args__['name'] = name
    __args__['resourceOwner'] = resource_owner
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws:ram/getResourceShare:getResourceShare', __args__, opts=opts).value

    return AwaitableGetResourceShareResult(
        arn=__ret__.get('arn'),
        filters=__ret__.get('filters'),
        id=__ret__.get('id'),
        name=__ret__.get('name'),
        owning_account_id=__ret__.get('owningAccountId'),
        resource_owner=__ret__.get('resourceOwner'),
        status=__ret__.get('status'),
        tags=__ret__.get('tags'))
