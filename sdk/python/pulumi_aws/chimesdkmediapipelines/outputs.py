# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'MediaInsightsPipelineConfigurationElement',
    'MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration',
    'MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings',
    'MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration',
    'MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfiguration',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration',
]

@pulumi.output_type
class MediaInsightsPipelineConfigurationElement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "amazonTranscribeCallAnalyticsProcessorConfiguration":
            suggest = "amazon_transcribe_call_analytics_processor_configuration"
        elif key == "amazonTranscribeProcessorConfiguration":
            suggest = "amazon_transcribe_processor_configuration"
        elif key == "kinesisDataStreamSinkConfiguration":
            suggest = "kinesis_data_stream_sink_configuration"
        elif key == "lambdaFunctionSinkConfiguration":
            suggest = "lambda_function_sink_configuration"
        elif key == "s3RecordingSinkConfiguration":
            suggest = "s3_recording_sink_configuration"
        elif key == "snsTopicSinkConfiguration":
            suggest = "sns_topic_sink_configuration"
        elif key == "sqsQueueSinkConfiguration":
            suggest = "sqs_queue_sink_configuration"
        elif key == "voiceAnalyticsProcessorConfiguration":
            suggest = "voice_analytics_processor_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 amazon_transcribe_call_analytics_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration'] = None,
                 amazon_transcribe_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration'] = None,
                 kinesis_data_stream_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration'] = None,
                 lambda_function_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration'] = None,
                 s3_recording_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration'] = None,
                 sns_topic_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration'] = None,
                 sqs_queue_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration'] = None,
                 voice_analytics_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration'] = None):
        """
        :param str type: Element type.
        :param 'MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs' amazon_transcribe_call_analytics_processor_configuration: Configuration for Amazon Transcribe Call Analytics processor.
        :param 'MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs' amazon_transcribe_processor_configuration: Configuration for Amazon Transcribe processor.
        :param 'MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs' kinesis_data_stream_sink_configuration: Configuration for Kinesis Data Stream sink.
        :param 'MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs' lambda_function_sink_configuration: Configuration for Lambda Function sink.
        :param 'MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs' s3_recording_sink_configuration: Configuration for S3 recording sink.
        :param 'MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs' sns_topic_sink_configuration: Configuration for SNS Topic sink.
        :param 'MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs' sqs_queue_sink_configuration: Configuration for SQS Queue sink.
        :param 'MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs' voice_analytics_processor_configuration: Configuration for Voice analytics processor.
        """
        pulumi.set(__self__, "type", type)
        if amazon_transcribe_call_analytics_processor_configuration is not None:
            pulumi.set(__self__, "amazon_transcribe_call_analytics_processor_configuration", amazon_transcribe_call_analytics_processor_configuration)
        if amazon_transcribe_processor_configuration is not None:
            pulumi.set(__self__, "amazon_transcribe_processor_configuration", amazon_transcribe_processor_configuration)
        if kinesis_data_stream_sink_configuration is not None:
            pulumi.set(__self__, "kinesis_data_stream_sink_configuration", kinesis_data_stream_sink_configuration)
        if lambda_function_sink_configuration is not None:
            pulumi.set(__self__, "lambda_function_sink_configuration", lambda_function_sink_configuration)
        if s3_recording_sink_configuration is not None:
            pulumi.set(__self__, "s3_recording_sink_configuration", s3_recording_sink_configuration)
        if sns_topic_sink_configuration is not None:
            pulumi.set(__self__, "sns_topic_sink_configuration", sns_topic_sink_configuration)
        if sqs_queue_sink_configuration is not None:
            pulumi.set(__self__, "sqs_queue_sink_configuration", sqs_queue_sink_configuration)
        if voice_analytics_processor_configuration is not None:
            pulumi.set(__self__, "voice_analytics_processor_configuration", voice_analytics_processor_configuration)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Element type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="amazonTranscribeCallAnalyticsProcessorConfiguration")
    def amazon_transcribe_call_analytics_processor_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration']:
        """
        Configuration for Amazon Transcribe Call Analytics processor.
        """
        return pulumi.get(self, "amazon_transcribe_call_analytics_processor_configuration")

    @property
    @pulumi.getter(name="amazonTranscribeProcessorConfiguration")
    def amazon_transcribe_processor_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration']:
        """
        Configuration for Amazon Transcribe processor.
        """
        return pulumi.get(self, "amazon_transcribe_processor_configuration")

    @property
    @pulumi.getter(name="kinesisDataStreamSinkConfiguration")
    def kinesis_data_stream_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration']:
        """
        Configuration for Kinesis Data Stream sink.
        """
        return pulumi.get(self, "kinesis_data_stream_sink_configuration")

    @property
    @pulumi.getter(name="lambdaFunctionSinkConfiguration")
    def lambda_function_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration']:
        """
        Configuration for Lambda Function sink.
        """
        return pulumi.get(self, "lambda_function_sink_configuration")

    @property
    @pulumi.getter(name="s3RecordingSinkConfiguration")
    def s3_recording_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration']:
        """
        Configuration for S3 recording sink.
        """
        return pulumi.get(self, "s3_recording_sink_configuration")

    @property
    @pulumi.getter(name="snsTopicSinkConfiguration")
    def sns_topic_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration']:
        """
        Configuration for SNS Topic sink.
        """
        return pulumi.get(self, "sns_topic_sink_configuration")

    @property
    @pulumi.getter(name="sqsQueueSinkConfiguration")
    def sqs_queue_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration']:
        """
        Configuration for SQS Queue sink.
        """
        return pulumi.get(self, "sqs_queue_sink_configuration")

    @property
    @pulumi.getter(name="voiceAnalyticsProcessorConfiguration")
    def voice_analytics_processor_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration']:
        """
        Configuration for Voice analytics processor.
        """
        return pulumi.get(self, "voice_analytics_processor_configuration")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "languageCode":
            suggest = "language_code"
        elif key == "callAnalyticsStreamCategories":
            suggest = "call_analytics_stream_categories"
        elif key == "contentIdentificationType":
            suggest = "content_identification_type"
        elif key == "contentRedactionType":
            suggest = "content_redaction_type"
        elif key == "enablePartialResultsStabilization":
            suggest = "enable_partial_results_stabilization"
        elif key == "filterPartialResults":
            suggest = "filter_partial_results"
        elif key == "languageModelName":
            suggest = "language_model_name"
        elif key == "partialResultsStability":
            suggest = "partial_results_stability"
        elif key == "piiEntityTypes":
            suggest = "pii_entity_types"
        elif key == "postCallAnalyticsSettings":
            suggest = "post_call_analytics_settings"
        elif key == "vocabularyFilterMethod":
            suggest = "vocabulary_filter_method"
        elif key == "vocabularyFilterName":
            suggest = "vocabulary_filter_name"
        elif key == "vocabularyName":
            suggest = "vocabulary_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 language_code: str,
                 call_analytics_stream_categories: Optional[Sequence[str]] = None,
                 content_identification_type: Optional[str] = None,
                 content_redaction_type: Optional[str] = None,
                 enable_partial_results_stabilization: Optional[bool] = None,
                 filter_partial_results: Optional[bool] = None,
                 language_model_name: Optional[str] = None,
                 partial_results_stability: Optional[str] = None,
                 pii_entity_types: Optional[str] = None,
                 post_call_analytics_settings: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings'] = None,
                 vocabulary_filter_method: Optional[str] = None,
                 vocabulary_filter_name: Optional[str] = None,
                 vocabulary_name: Optional[str] = None):
        """
        :param str language_code: Language code for the transcription model.
        :param Sequence[str] call_analytics_stream_categories: Filter for category events to be delivered to insights target.
        :param str content_identification_type: Labels all personally identifiable information (PII) identified in Transcript events.
        :param str content_redaction_type: Redacts all personally identifiable information (PII) identified in Transcript events.
        :param bool enable_partial_results_stabilization: Enables partial result stabilization in Transcript events.
        :param bool filter_partial_results: Filters partial Utterance events from delivery to the insights target.
        :param str language_model_name: Name of custom language model for transcription.
        :param str partial_results_stability: Level of stability to use when partial results stabilization is enabled.
        :param str pii_entity_types: Types of personally identifiable information (PII) to redact from a Transcript event.
        :param 'MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs' post_call_analytics_settings: Settings for post call analytics.
        :param str vocabulary_filter_method: Method for applying a vocabulary filter to Transcript events.
        :param str vocabulary_filter_name: Name of the custom vocabulary filter to use when processing Transcript events.
        :param str vocabulary_name: Name of the custom vocabulary to use when processing Transcript events.
        """
        pulumi.set(__self__, "language_code", language_code)
        if call_analytics_stream_categories is not None:
            pulumi.set(__self__, "call_analytics_stream_categories", call_analytics_stream_categories)
        if content_identification_type is not None:
            pulumi.set(__self__, "content_identification_type", content_identification_type)
        if content_redaction_type is not None:
            pulumi.set(__self__, "content_redaction_type", content_redaction_type)
        if enable_partial_results_stabilization is not None:
            pulumi.set(__self__, "enable_partial_results_stabilization", enable_partial_results_stabilization)
        if filter_partial_results is not None:
            pulumi.set(__self__, "filter_partial_results", filter_partial_results)
        if language_model_name is not None:
            pulumi.set(__self__, "language_model_name", language_model_name)
        if partial_results_stability is not None:
            pulumi.set(__self__, "partial_results_stability", partial_results_stability)
        if pii_entity_types is not None:
            pulumi.set(__self__, "pii_entity_types", pii_entity_types)
        if post_call_analytics_settings is not None:
            pulumi.set(__self__, "post_call_analytics_settings", post_call_analytics_settings)
        if vocabulary_filter_method is not None:
            pulumi.set(__self__, "vocabulary_filter_method", vocabulary_filter_method)
        if vocabulary_filter_name is not None:
            pulumi.set(__self__, "vocabulary_filter_name", vocabulary_filter_name)
        if vocabulary_name is not None:
            pulumi.set(__self__, "vocabulary_name", vocabulary_name)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        """
        Language code for the transcription model.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="callAnalyticsStreamCategories")
    def call_analytics_stream_categories(self) -> Optional[Sequence[str]]:
        """
        Filter for category events to be delivered to insights target.
        """
        return pulumi.get(self, "call_analytics_stream_categories")

    @property
    @pulumi.getter(name="contentIdentificationType")
    def content_identification_type(self) -> Optional[str]:
        """
        Labels all personally identifiable information (PII) identified in Transcript events.
        """
        return pulumi.get(self, "content_identification_type")

    @property
    @pulumi.getter(name="contentRedactionType")
    def content_redaction_type(self) -> Optional[str]:
        """
        Redacts all personally identifiable information (PII) identified in Transcript events.
        """
        return pulumi.get(self, "content_redaction_type")

    @property
    @pulumi.getter(name="enablePartialResultsStabilization")
    def enable_partial_results_stabilization(self) -> Optional[bool]:
        """
        Enables partial result stabilization in Transcript events.
        """
        return pulumi.get(self, "enable_partial_results_stabilization")

    @property
    @pulumi.getter(name="filterPartialResults")
    def filter_partial_results(self) -> Optional[bool]:
        """
        Filters partial Utterance events from delivery to the insights target.
        """
        return pulumi.get(self, "filter_partial_results")

    @property
    @pulumi.getter(name="languageModelName")
    def language_model_name(self) -> Optional[str]:
        """
        Name of custom language model for transcription.
        """
        return pulumi.get(self, "language_model_name")

    @property
    @pulumi.getter(name="partialResultsStability")
    def partial_results_stability(self) -> Optional[str]:
        """
        Level of stability to use when partial results stabilization is enabled.
        """
        return pulumi.get(self, "partial_results_stability")

    @property
    @pulumi.getter(name="piiEntityTypes")
    def pii_entity_types(self) -> Optional[str]:
        """
        Types of personally identifiable information (PII) to redact from a Transcript event.
        """
        return pulumi.get(self, "pii_entity_types")

    @property
    @pulumi.getter(name="postCallAnalyticsSettings")
    def post_call_analytics_settings(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings']:
        """
        Settings for post call analytics.
        """
        return pulumi.get(self, "post_call_analytics_settings")

    @property
    @pulumi.getter(name="vocabularyFilterMethod")
    def vocabulary_filter_method(self) -> Optional[str]:
        """
        Method for applying a vocabulary filter to Transcript events.
        """
        return pulumi.get(self, "vocabulary_filter_method")

    @property
    @pulumi.getter(name="vocabularyFilterName")
    def vocabulary_filter_name(self) -> Optional[str]:
        """
        Name of the custom vocabulary filter to use when processing Transcript events.
        """
        return pulumi.get(self, "vocabulary_filter_name")

    @property
    @pulumi.getter(name="vocabularyName")
    def vocabulary_name(self) -> Optional[str]:
        """
        Name of the custom vocabulary to use when processing Transcript events.
        """
        return pulumi.get(self, "vocabulary_name")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAccessRoleArn":
            suggest = "data_access_role_arn"
        elif key == "outputLocation":
            suggest = "output_location"
        elif key == "contentRedactionOutput":
            suggest = "content_redaction_output"
        elif key == "outputEncryptionKmsKeyId":
            suggest = "output_encryption_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_access_role_arn: str,
                 output_location: str,
                 content_redaction_output: Optional[str] = None,
                 output_encryption_kms_key_id: Optional[str] = None):
        """
        :param str data_access_role_arn: ARN of the role used by AWS Transcribe to upload your post call analysis.
        :param str output_location: The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
        :param str content_redaction_output: Should output be redacted.
        :param str output_encryption_kms_key_id: ID of the KMS key used to encrypt the output.
        """
        pulumi.set(__self__, "data_access_role_arn", data_access_role_arn)
        pulumi.set(__self__, "output_location", output_location)
        if content_redaction_output is not None:
            pulumi.set(__self__, "content_redaction_output", content_redaction_output)
        if output_encryption_kms_key_id is not None:
            pulumi.set(__self__, "output_encryption_kms_key_id", output_encryption_kms_key_id)

    @property
    @pulumi.getter(name="dataAccessRoleArn")
    def data_access_role_arn(self) -> str:
        """
        ARN of the role used by AWS Transcribe to upload your post call analysis.
        """
        return pulumi.get(self, "data_access_role_arn")

    @property
    @pulumi.getter(name="outputLocation")
    def output_location(self) -> str:
        """
        The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
        """
        return pulumi.get(self, "output_location")

    @property
    @pulumi.getter(name="contentRedactionOutput")
    def content_redaction_output(self) -> Optional[str]:
        """
        Should output be redacted.
        """
        return pulumi.get(self, "content_redaction_output")

    @property
    @pulumi.getter(name="outputEncryptionKmsKeyId")
    def output_encryption_kms_key_id(self) -> Optional[str]:
        """
        ID of the KMS key used to encrypt the output.
        """
        return pulumi.get(self, "output_encryption_kms_key_id")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "languageCode":
            suggest = "language_code"
        elif key == "contentIdentificationType":
            suggest = "content_identification_type"
        elif key == "contentRedactionType":
            suggest = "content_redaction_type"
        elif key == "enablePartialResultsStabilization":
            suggest = "enable_partial_results_stabilization"
        elif key == "filterPartialResults":
            suggest = "filter_partial_results"
        elif key == "languageModelName":
            suggest = "language_model_name"
        elif key == "partialResultsStability":
            suggest = "partial_results_stability"
        elif key == "piiEntityTypes":
            suggest = "pii_entity_types"
        elif key == "showSpeakerLabel":
            suggest = "show_speaker_label"
        elif key == "vocabularyFilterMethod":
            suggest = "vocabulary_filter_method"
        elif key == "vocabularyFilterName":
            suggest = "vocabulary_filter_name"
        elif key == "vocabularyName":
            suggest = "vocabulary_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 language_code: str,
                 content_identification_type: Optional[str] = None,
                 content_redaction_type: Optional[str] = None,
                 enable_partial_results_stabilization: Optional[bool] = None,
                 filter_partial_results: Optional[bool] = None,
                 language_model_name: Optional[str] = None,
                 partial_results_stability: Optional[str] = None,
                 pii_entity_types: Optional[str] = None,
                 show_speaker_label: Optional[bool] = None,
                 vocabulary_filter_method: Optional[str] = None,
                 vocabulary_filter_name: Optional[str] = None,
                 vocabulary_name: Optional[str] = None):
        """
        :param str language_code: Language code for the transcription model.
        :param str content_identification_type: Labels all personally identifiable information (PII) identified in Transcript events.
        :param str content_redaction_type: Redacts all personally identifiable information (PII) identified in Transcript events.
        :param bool enable_partial_results_stabilization: Enables partial result stabilization in Transcript events.
        :param bool filter_partial_results: Filters partial Utterance events from delivery to the insights target.
        :param str language_model_name: Name of custom language model for transcription.
        :param str partial_results_stability: Level of stability to use when partial results stabilization is enabled.
        :param str pii_entity_types: Types of personally identifiable information (PII) to redact from a Transcript event.
        :param bool show_speaker_label: Enables speaker partitioning (diarization) in your Transcript events.
        :param str vocabulary_filter_method: Method for applying a vocabulary filter to Transcript events.
        :param str vocabulary_filter_name: Name of the custom vocabulary filter to use when processing Transcript events.
        :param str vocabulary_name: Name of the custom vocabulary to use when processing Transcript events.
        """
        pulumi.set(__self__, "language_code", language_code)
        if content_identification_type is not None:
            pulumi.set(__self__, "content_identification_type", content_identification_type)
        if content_redaction_type is not None:
            pulumi.set(__self__, "content_redaction_type", content_redaction_type)
        if enable_partial_results_stabilization is not None:
            pulumi.set(__self__, "enable_partial_results_stabilization", enable_partial_results_stabilization)
        if filter_partial_results is not None:
            pulumi.set(__self__, "filter_partial_results", filter_partial_results)
        if language_model_name is not None:
            pulumi.set(__self__, "language_model_name", language_model_name)
        if partial_results_stability is not None:
            pulumi.set(__self__, "partial_results_stability", partial_results_stability)
        if pii_entity_types is not None:
            pulumi.set(__self__, "pii_entity_types", pii_entity_types)
        if show_speaker_label is not None:
            pulumi.set(__self__, "show_speaker_label", show_speaker_label)
        if vocabulary_filter_method is not None:
            pulumi.set(__self__, "vocabulary_filter_method", vocabulary_filter_method)
        if vocabulary_filter_name is not None:
            pulumi.set(__self__, "vocabulary_filter_name", vocabulary_filter_name)
        if vocabulary_name is not None:
            pulumi.set(__self__, "vocabulary_name", vocabulary_name)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        """
        Language code for the transcription model.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="contentIdentificationType")
    def content_identification_type(self) -> Optional[str]:
        """
        Labels all personally identifiable information (PII) identified in Transcript events.
        """
        return pulumi.get(self, "content_identification_type")

    @property
    @pulumi.getter(name="contentRedactionType")
    def content_redaction_type(self) -> Optional[str]:
        """
        Redacts all personally identifiable information (PII) identified in Transcript events.
        """
        return pulumi.get(self, "content_redaction_type")

    @property
    @pulumi.getter(name="enablePartialResultsStabilization")
    def enable_partial_results_stabilization(self) -> Optional[bool]:
        """
        Enables partial result stabilization in Transcript events.
        """
        return pulumi.get(self, "enable_partial_results_stabilization")

    @property
    @pulumi.getter(name="filterPartialResults")
    def filter_partial_results(self) -> Optional[bool]:
        """
        Filters partial Utterance events from delivery to the insights target.
        """
        return pulumi.get(self, "filter_partial_results")

    @property
    @pulumi.getter(name="languageModelName")
    def language_model_name(self) -> Optional[str]:
        """
        Name of custom language model for transcription.
        """
        return pulumi.get(self, "language_model_name")

    @property
    @pulumi.getter(name="partialResultsStability")
    def partial_results_stability(self) -> Optional[str]:
        """
        Level of stability to use when partial results stabilization is enabled.
        """
        return pulumi.get(self, "partial_results_stability")

    @property
    @pulumi.getter(name="piiEntityTypes")
    def pii_entity_types(self) -> Optional[str]:
        """
        Types of personally identifiable information (PII) to redact from a Transcript event.
        """
        return pulumi.get(self, "pii_entity_types")

    @property
    @pulumi.getter(name="showSpeakerLabel")
    def show_speaker_label(self) -> Optional[bool]:
        """
        Enables speaker partitioning (diarization) in your Transcript events.
        """
        return pulumi.get(self, "show_speaker_label")

    @property
    @pulumi.getter(name="vocabularyFilterMethod")
    def vocabulary_filter_method(self) -> Optional[str]:
        """
        Method for applying a vocabulary filter to Transcript events.
        """
        return pulumi.get(self, "vocabulary_filter_method")

    @property
    @pulumi.getter(name="vocabularyFilterName")
    def vocabulary_filter_name(self) -> Optional[str]:
        """
        Name of the custom vocabulary filter to use when processing Transcript events.
        """
        return pulumi.get(self, "vocabulary_filter_name")

    @property
    @pulumi.getter(name="vocabularyName")
    def vocabulary_name(self) -> Optional[str]:
        """
        Name of the custom vocabulary to use when processing Transcript events.
        """
        return pulumi.get(self, "vocabulary_name")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightsTarget":
            suggest = "insights_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insights_target: str):
        """
        :param str insights_target: SQS queue to deliver results.
        """
        pulumi.set(__self__, "insights_target", insights_target)

    @property
    @pulumi.getter(name="insightsTarget")
    def insights_target(self) -> str:
        """
        SQS queue to deliver results.
        """
        return pulumi.get(self, "insights_target")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightsTarget":
            suggest = "insights_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insights_target: str):
        """
        :param str insights_target: SQS queue to deliver results.
        """
        pulumi.set(__self__, "insights_target", insights_target)

    @property
    @pulumi.getter(name="insightsTarget")
    def insights_target(self) -> str:
        """
        SQS queue to deliver results.
        """
        return pulumi.get(self, "insights_target")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        """
        :param str destination: S3 URI to deliver recordings.
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        """
        S3 URI to deliver recordings.
        """
        return pulumi.get(self, "destination")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightsTarget":
            suggest = "insights_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insights_target: str):
        """
        :param str insights_target: SQS queue to deliver results.
        """
        pulumi.set(__self__, "insights_target", insights_target)

    @property
    @pulumi.getter(name="insightsTarget")
    def insights_target(self) -> str:
        """
        SQS queue to deliver results.
        """
        return pulumi.get(self, "insights_target")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightsTarget":
            suggest = "insights_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insights_target: str):
        """
        :param str insights_target: SQS queue to deliver results.
        """
        pulumi.set(__self__, "insights_target", insights_target)

    @property
    @pulumi.getter(name="insightsTarget")
    def insights_target(self) -> str:
        """
        SQS queue to deliver results.
        """
        return pulumi.get(self, "insights_target")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "speakerSearchStatus":
            suggest = "speaker_search_status"
        elif key == "voiceToneAnalysisStatus":
            suggest = "voice_tone_analysis_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 speaker_search_status: str,
                 voice_tone_analysis_status: str):
        """
        :param str speaker_search_status: Enable speaker search.
        :param str voice_tone_analysis_status: Enable voice tone analysis.
        """
        pulumi.set(__self__, "speaker_search_status", speaker_search_status)
        pulumi.set(__self__, "voice_tone_analysis_status", voice_tone_analysis_status)

    @property
    @pulumi.getter(name="speakerSearchStatus")
    def speaker_search_status(self) -> str:
        """
        Enable speaker search.
        """
        return pulumi.get(self, "speaker_search_status")

    @property
    @pulumi.getter(name="voiceToneAnalysisStatus")
    def voice_tone_analysis_status(self) -> str:
        """
        Enable voice tone analysis.
        """
        return pulumi.get(self, "voice_tone_analysis_status")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfiguration(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule'],
                 disabled: Optional[bool] = None):
        """
        :param Sequence['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs'] rules: Collection of real time alert rules
        :param bool disabled: Disables real time alert rules.
        """
        pulumi.set(__self__, "rules", rules)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule']:
        """
        Collection of real time alert rules
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Disables real time alert rules.
        """
        return pulumi.get(self, "disabled")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "issueDetectionConfiguration":
            suggest = "issue_detection_configuration"
        elif key == "keywordMatchConfiguration":
            suggest = "keyword_match_configuration"
        elif key == "sentimentConfiguration":
            suggest = "sentiment_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 issue_detection_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration'] = None,
                 keyword_match_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration'] = None,
                 sentiment_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration'] = None):
        """
        :param str type: Element type.
        :param 'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs' issue_detection_configuration: Configuration for an issue detection rule.
        :param 'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs' keyword_match_configuration: Configuration for a keyword match rule.
        :param 'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs' sentiment_configuration: Configuration for a sentiment rule.
        """
        pulumi.set(__self__, "type", type)
        if issue_detection_configuration is not None:
            pulumi.set(__self__, "issue_detection_configuration", issue_detection_configuration)
        if keyword_match_configuration is not None:
            pulumi.set(__self__, "keyword_match_configuration", keyword_match_configuration)
        if sentiment_configuration is not None:
            pulumi.set(__self__, "sentiment_configuration", sentiment_configuration)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Element type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="issueDetectionConfiguration")
    def issue_detection_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration']:
        """
        Configuration for an issue detection rule.
        """
        return pulumi.get(self, "issue_detection_configuration")

    @property
    @pulumi.getter(name="keywordMatchConfiguration")
    def keyword_match_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration']:
        """
        Configuration for a keyword match rule.
        """
        return pulumi.get(self, "keyword_match_configuration")

    @property
    @pulumi.getter(name="sentimentConfiguration")
    def sentiment_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration']:
        """
        Configuration for a sentiment rule.
        """
        return pulumi.get(self, "sentiment_configuration")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: str):
        """
        :param str rule_name: Rule name.
        """
        pulumi.set(__self__, "rule_name", rule_name)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keywords: Sequence[str],
                 rule_name: str,
                 negate: Optional[bool] = None):
        """
        :param Sequence[str] keywords: Collection of keywords to match.
        :param str rule_name: Rule name.
        :param bool negate: Negate the rule.
        """
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "rule_name", rule_name)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[str]:
        """
        Collection of keywords to match.
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        Negate the rule.
        """
        return pulumi.get(self, "negate")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"
        elif key == "sentimentType":
            suggest = "sentiment_type"
        elif key == "timePeriod":
            suggest = "time_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: str,
                 sentiment_type: str,
                 time_period: int):
        """
        :param str rule_name: Rule name.
        :param str sentiment_type: Sentiment type to match.
        :param int time_period: Analysis interval.
        """
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "sentiment_type", sentiment_type)
        pulumi.set(__self__, "time_period", time_period)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="sentimentType")
    def sentiment_type(self) -> str:
        """
        Sentiment type to match.
        """
        return pulumi.get(self, "sentiment_type")

    @property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> int:
        """
        Analysis interval.
        """
        return pulumi.get(self, "time_period")


