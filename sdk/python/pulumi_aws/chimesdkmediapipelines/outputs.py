# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'MediaInsightsPipelineConfigurationElement',
    'MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration',
    'MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings',
    'MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration',
    'MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration',
    'MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfiguration',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration',
    'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration',
]

@pulumi.output_type
class MediaInsightsPipelineConfigurationElement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "amazonTranscribeCallAnalyticsProcessorConfiguration":
            suggest = "amazon_transcribe_call_analytics_processor_configuration"
        elif key == "amazonTranscribeProcessorConfiguration":
            suggest = "amazon_transcribe_processor_configuration"
        elif key == "kinesisDataStreamSinkConfiguration":
            suggest = "kinesis_data_stream_sink_configuration"
        elif key == "lambdaFunctionSinkConfiguration":
            suggest = "lambda_function_sink_configuration"
        elif key == "s3RecordingSinkConfiguration":
            suggest = "s3_recording_sink_configuration"
        elif key == "snsTopicSinkConfiguration":
            suggest = "sns_topic_sink_configuration"
        elif key == "sqsQueueSinkConfiguration":
            suggest = "sqs_queue_sink_configuration"
        elif key == "voiceAnalyticsProcessorConfiguration":
            suggest = "voice_analytics_processor_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 amazon_transcribe_call_analytics_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration'] = None,
                 amazon_transcribe_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration'] = None,
                 kinesis_data_stream_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration'] = None,
                 lambda_function_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration'] = None,
                 s3_recording_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration'] = None,
                 sns_topic_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration'] = None,
                 sqs_queue_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration'] = None,
                 voice_analytics_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration'] = None):
        """
        :param str type: Element type.
        :param 'MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs' amazon_transcribe_call_analytics_processor_configuration: Configuration for Amazon Transcribe Call Analytics processor.
        :param 'MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs' amazon_transcribe_processor_configuration: Configuration for Amazon Transcribe processor.
        :param 'MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs' kinesis_data_stream_sink_configuration: Configuration for Kinesis Data Stream sink.
        :param 'MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs' lambda_function_sink_configuration: Configuration for Lambda Function sink.
        :param 'MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs' s3_recording_sink_configuration: Configuration for S3 recording sink.
        :param 'MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs' sns_topic_sink_configuration: Configuration for SNS Topic sink.
        :param 'MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs' sqs_queue_sink_configuration: Configuration for SQS Queue sink.
        :param 'MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs' voice_analytics_processor_configuration: Configuration for Voice analytics processor.
        """
        MediaInsightsPipelineConfigurationElement._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            amazon_transcribe_call_analytics_processor_configuration=amazon_transcribe_call_analytics_processor_configuration,
            amazon_transcribe_processor_configuration=amazon_transcribe_processor_configuration,
            kinesis_data_stream_sink_configuration=kinesis_data_stream_sink_configuration,
            lambda_function_sink_configuration=lambda_function_sink_configuration,
            s3_recording_sink_configuration=s3_recording_sink_configuration,
            sns_topic_sink_configuration=sns_topic_sink_configuration,
            sqs_queue_sink_configuration=sqs_queue_sink_configuration,
            voice_analytics_processor_configuration=voice_analytics_processor_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             amazon_transcribe_call_analytics_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration'] = None,
             amazon_transcribe_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration'] = None,
             kinesis_data_stream_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration'] = None,
             lambda_function_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration'] = None,
             s3_recording_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration'] = None,
             sns_topic_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration'] = None,
             sqs_queue_sink_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration'] = None,
             voice_analytics_processor_configuration: Optional['outputs.MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if amazon_transcribe_call_analytics_processor_configuration is None and 'amazonTranscribeCallAnalyticsProcessorConfiguration' in kwargs:
            amazon_transcribe_call_analytics_processor_configuration = kwargs['amazonTranscribeCallAnalyticsProcessorConfiguration']
        if amazon_transcribe_processor_configuration is None and 'amazonTranscribeProcessorConfiguration' in kwargs:
            amazon_transcribe_processor_configuration = kwargs['amazonTranscribeProcessorConfiguration']
        if kinesis_data_stream_sink_configuration is None and 'kinesisDataStreamSinkConfiguration' in kwargs:
            kinesis_data_stream_sink_configuration = kwargs['kinesisDataStreamSinkConfiguration']
        if lambda_function_sink_configuration is None and 'lambdaFunctionSinkConfiguration' in kwargs:
            lambda_function_sink_configuration = kwargs['lambdaFunctionSinkConfiguration']
        if s3_recording_sink_configuration is None and 's3RecordingSinkConfiguration' in kwargs:
            s3_recording_sink_configuration = kwargs['s3RecordingSinkConfiguration']
        if sns_topic_sink_configuration is None and 'snsTopicSinkConfiguration' in kwargs:
            sns_topic_sink_configuration = kwargs['snsTopicSinkConfiguration']
        if sqs_queue_sink_configuration is None and 'sqsQueueSinkConfiguration' in kwargs:
            sqs_queue_sink_configuration = kwargs['sqsQueueSinkConfiguration']
        if voice_analytics_processor_configuration is None and 'voiceAnalyticsProcessorConfiguration' in kwargs:
            voice_analytics_processor_configuration = kwargs['voiceAnalyticsProcessorConfiguration']

        _setter("type", type)
        if amazon_transcribe_call_analytics_processor_configuration is not None:
            _setter("amazon_transcribe_call_analytics_processor_configuration", amazon_transcribe_call_analytics_processor_configuration)
        if amazon_transcribe_processor_configuration is not None:
            _setter("amazon_transcribe_processor_configuration", amazon_transcribe_processor_configuration)
        if kinesis_data_stream_sink_configuration is not None:
            _setter("kinesis_data_stream_sink_configuration", kinesis_data_stream_sink_configuration)
        if lambda_function_sink_configuration is not None:
            _setter("lambda_function_sink_configuration", lambda_function_sink_configuration)
        if s3_recording_sink_configuration is not None:
            _setter("s3_recording_sink_configuration", s3_recording_sink_configuration)
        if sns_topic_sink_configuration is not None:
            _setter("sns_topic_sink_configuration", sns_topic_sink_configuration)
        if sqs_queue_sink_configuration is not None:
            _setter("sqs_queue_sink_configuration", sqs_queue_sink_configuration)
        if voice_analytics_processor_configuration is not None:
            _setter("voice_analytics_processor_configuration", voice_analytics_processor_configuration)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Element type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="amazonTranscribeCallAnalyticsProcessorConfiguration")
    def amazon_transcribe_call_analytics_processor_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration']:
        """
        Configuration for Amazon Transcribe Call Analytics processor.
        """
        return pulumi.get(self, "amazon_transcribe_call_analytics_processor_configuration")

    @property
    @pulumi.getter(name="amazonTranscribeProcessorConfiguration")
    def amazon_transcribe_processor_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration']:
        """
        Configuration for Amazon Transcribe processor.
        """
        return pulumi.get(self, "amazon_transcribe_processor_configuration")

    @property
    @pulumi.getter(name="kinesisDataStreamSinkConfiguration")
    def kinesis_data_stream_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration']:
        """
        Configuration for Kinesis Data Stream sink.
        """
        return pulumi.get(self, "kinesis_data_stream_sink_configuration")

    @property
    @pulumi.getter(name="lambdaFunctionSinkConfiguration")
    def lambda_function_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration']:
        """
        Configuration for Lambda Function sink.
        """
        return pulumi.get(self, "lambda_function_sink_configuration")

    @property
    @pulumi.getter(name="s3RecordingSinkConfiguration")
    def s3_recording_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration']:
        """
        Configuration for S3 recording sink.
        """
        return pulumi.get(self, "s3_recording_sink_configuration")

    @property
    @pulumi.getter(name="snsTopicSinkConfiguration")
    def sns_topic_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration']:
        """
        Configuration for SNS Topic sink.
        """
        return pulumi.get(self, "sns_topic_sink_configuration")

    @property
    @pulumi.getter(name="sqsQueueSinkConfiguration")
    def sqs_queue_sink_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration']:
        """
        Configuration for SQS Queue sink.
        """
        return pulumi.get(self, "sqs_queue_sink_configuration")

    @property
    @pulumi.getter(name="voiceAnalyticsProcessorConfiguration")
    def voice_analytics_processor_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration']:
        """
        Configuration for Voice analytics processor.
        """
        return pulumi.get(self, "voice_analytics_processor_configuration")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "languageCode":
            suggest = "language_code"
        elif key == "callAnalyticsStreamCategories":
            suggest = "call_analytics_stream_categories"
        elif key == "contentIdentificationType":
            suggest = "content_identification_type"
        elif key == "contentRedactionType":
            suggest = "content_redaction_type"
        elif key == "enablePartialResultsStabilization":
            suggest = "enable_partial_results_stabilization"
        elif key == "filterPartialResults":
            suggest = "filter_partial_results"
        elif key == "languageModelName":
            suggest = "language_model_name"
        elif key == "partialResultsStability":
            suggest = "partial_results_stability"
        elif key == "piiEntityTypes":
            suggest = "pii_entity_types"
        elif key == "postCallAnalyticsSettings":
            suggest = "post_call_analytics_settings"
        elif key == "vocabularyFilterMethod":
            suggest = "vocabulary_filter_method"
        elif key == "vocabularyFilterName":
            suggest = "vocabulary_filter_name"
        elif key == "vocabularyName":
            suggest = "vocabulary_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 language_code: str,
                 call_analytics_stream_categories: Optional[Sequence[str]] = None,
                 content_identification_type: Optional[str] = None,
                 content_redaction_type: Optional[str] = None,
                 enable_partial_results_stabilization: Optional[bool] = None,
                 filter_partial_results: Optional[bool] = None,
                 language_model_name: Optional[str] = None,
                 partial_results_stability: Optional[str] = None,
                 pii_entity_types: Optional[str] = None,
                 post_call_analytics_settings: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings'] = None,
                 vocabulary_filter_method: Optional[str] = None,
                 vocabulary_filter_name: Optional[str] = None,
                 vocabulary_name: Optional[str] = None):
        """
        :param str language_code: Language code for the transcription model.
        :param Sequence[str] call_analytics_stream_categories: Filter for category events to be delivered to insights target.
        :param str content_identification_type: Labels all personally identifiable information (PII) identified in Transcript events.
        :param str content_redaction_type: Redacts all personally identifiable information (PII) identified in Transcript events.
        :param bool enable_partial_results_stabilization: Enables partial result stabilization in Transcript events.
        :param bool filter_partial_results: Filters partial Utterance events from delivery to the insights target.
        :param str language_model_name: Name of custom language model for transcription.
        :param str partial_results_stability: Level of stability to use when partial results stabilization is enabled.
        :param str pii_entity_types: Types of personally identifiable information (PII) to redact from a Transcript event.
        :param 'MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs' post_call_analytics_settings: Settings for post call analytics.
        :param str vocabulary_filter_method: Method for applying a vocabulary filter to Transcript events.
        :param str vocabulary_filter_name: Name of the custom vocabulary filter to use when processing Transcript events.
        :param str vocabulary_name: Name of the custom vocabulary to use when processing Transcript events.
        """
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            language_code=language_code,
            call_analytics_stream_categories=call_analytics_stream_categories,
            content_identification_type=content_identification_type,
            content_redaction_type=content_redaction_type,
            enable_partial_results_stabilization=enable_partial_results_stabilization,
            filter_partial_results=filter_partial_results,
            language_model_name=language_model_name,
            partial_results_stability=partial_results_stability,
            pii_entity_types=pii_entity_types,
            post_call_analytics_settings=post_call_analytics_settings,
            vocabulary_filter_method=vocabulary_filter_method,
            vocabulary_filter_name=vocabulary_filter_name,
            vocabulary_name=vocabulary_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             language_code: Optional[str] = None,
             call_analytics_stream_categories: Optional[Sequence[str]] = None,
             content_identification_type: Optional[str] = None,
             content_redaction_type: Optional[str] = None,
             enable_partial_results_stabilization: Optional[bool] = None,
             filter_partial_results: Optional[bool] = None,
             language_model_name: Optional[str] = None,
             partial_results_stability: Optional[str] = None,
             pii_entity_types: Optional[str] = None,
             post_call_analytics_settings: Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings'] = None,
             vocabulary_filter_method: Optional[str] = None,
             vocabulary_filter_name: Optional[str] = None,
             vocabulary_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if language_code is None and 'languageCode' in kwargs:
            language_code = kwargs['languageCode']
        if language_code is None:
            raise TypeError("Missing 'language_code' argument")
        if call_analytics_stream_categories is None and 'callAnalyticsStreamCategories' in kwargs:
            call_analytics_stream_categories = kwargs['callAnalyticsStreamCategories']
        if content_identification_type is None and 'contentIdentificationType' in kwargs:
            content_identification_type = kwargs['contentIdentificationType']
        if content_redaction_type is None and 'contentRedactionType' in kwargs:
            content_redaction_type = kwargs['contentRedactionType']
        if enable_partial_results_stabilization is None and 'enablePartialResultsStabilization' in kwargs:
            enable_partial_results_stabilization = kwargs['enablePartialResultsStabilization']
        if filter_partial_results is None and 'filterPartialResults' in kwargs:
            filter_partial_results = kwargs['filterPartialResults']
        if language_model_name is None and 'languageModelName' in kwargs:
            language_model_name = kwargs['languageModelName']
        if partial_results_stability is None and 'partialResultsStability' in kwargs:
            partial_results_stability = kwargs['partialResultsStability']
        if pii_entity_types is None and 'piiEntityTypes' in kwargs:
            pii_entity_types = kwargs['piiEntityTypes']
        if post_call_analytics_settings is None and 'postCallAnalyticsSettings' in kwargs:
            post_call_analytics_settings = kwargs['postCallAnalyticsSettings']
        if vocabulary_filter_method is None and 'vocabularyFilterMethod' in kwargs:
            vocabulary_filter_method = kwargs['vocabularyFilterMethod']
        if vocabulary_filter_name is None and 'vocabularyFilterName' in kwargs:
            vocabulary_filter_name = kwargs['vocabularyFilterName']
        if vocabulary_name is None and 'vocabularyName' in kwargs:
            vocabulary_name = kwargs['vocabularyName']

        _setter("language_code", language_code)
        if call_analytics_stream_categories is not None:
            _setter("call_analytics_stream_categories", call_analytics_stream_categories)
        if content_identification_type is not None:
            _setter("content_identification_type", content_identification_type)
        if content_redaction_type is not None:
            _setter("content_redaction_type", content_redaction_type)
        if enable_partial_results_stabilization is not None:
            _setter("enable_partial_results_stabilization", enable_partial_results_stabilization)
        if filter_partial_results is not None:
            _setter("filter_partial_results", filter_partial_results)
        if language_model_name is not None:
            _setter("language_model_name", language_model_name)
        if partial_results_stability is not None:
            _setter("partial_results_stability", partial_results_stability)
        if pii_entity_types is not None:
            _setter("pii_entity_types", pii_entity_types)
        if post_call_analytics_settings is not None:
            _setter("post_call_analytics_settings", post_call_analytics_settings)
        if vocabulary_filter_method is not None:
            _setter("vocabulary_filter_method", vocabulary_filter_method)
        if vocabulary_filter_name is not None:
            _setter("vocabulary_filter_name", vocabulary_filter_name)
        if vocabulary_name is not None:
            _setter("vocabulary_name", vocabulary_name)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        """
        Language code for the transcription model.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="callAnalyticsStreamCategories")
    def call_analytics_stream_categories(self) -> Optional[Sequence[str]]:
        """
        Filter for category events to be delivered to insights target.
        """
        return pulumi.get(self, "call_analytics_stream_categories")

    @property
    @pulumi.getter(name="contentIdentificationType")
    def content_identification_type(self) -> Optional[str]:
        """
        Labels all personally identifiable information (PII) identified in Transcript events.
        """
        return pulumi.get(self, "content_identification_type")

    @property
    @pulumi.getter(name="contentRedactionType")
    def content_redaction_type(self) -> Optional[str]:
        """
        Redacts all personally identifiable information (PII) identified in Transcript events.
        """
        return pulumi.get(self, "content_redaction_type")

    @property
    @pulumi.getter(name="enablePartialResultsStabilization")
    def enable_partial_results_stabilization(self) -> Optional[bool]:
        """
        Enables partial result stabilization in Transcript events.
        """
        return pulumi.get(self, "enable_partial_results_stabilization")

    @property
    @pulumi.getter(name="filterPartialResults")
    def filter_partial_results(self) -> Optional[bool]:
        """
        Filters partial Utterance events from delivery to the insights target.
        """
        return pulumi.get(self, "filter_partial_results")

    @property
    @pulumi.getter(name="languageModelName")
    def language_model_name(self) -> Optional[str]:
        """
        Name of custom language model for transcription.
        """
        return pulumi.get(self, "language_model_name")

    @property
    @pulumi.getter(name="partialResultsStability")
    def partial_results_stability(self) -> Optional[str]:
        """
        Level of stability to use when partial results stabilization is enabled.
        """
        return pulumi.get(self, "partial_results_stability")

    @property
    @pulumi.getter(name="piiEntityTypes")
    def pii_entity_types(self) -> Optional[str]:
        """
        Types of personally identifiable information (PII) to redact from a Transcript event.
        """
        return pulumi.get(self, "pii_entity_types")

    @property
    @pulumi.getter(name="postCallAnalyticsSettings")
    def post_call_analytics_settings(self) -> Optional['outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings']:
        """
        Settings for post call analytics.
        """
        return pulumi.get(self, "post_call_analytics_settings")

    @property
    @pulumi.getter(name="vocabularyFilterMethod")
    def vocabulary_filter_method(self) -> Optional[str]:
        """
        Method for applying a vocabulary filter to Transcript events.
        """
        return pulumi.get(self, "vocabulary_filter_method")

    @property
    @pulumi.getter(name="vocabularyFilterName")
    def vocabulary_filter_name(self) -> Optional[str]:
        """
        Name of the custom vocabulary filter to use when processing Transcript events.
        """
        return pulumi.get(self, "vocabulary_filter_name")

    @property
    @pulumi.getter(name="vocabularyName")
    def vocabulary_name(self) -> Optional[str]:
        """
        Name of the custom vocabulary to use when processing Transcript events.
        """
        return pulumi.get(self, "vocabulary_name")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAccessRoleArn":
            suggest = "data_access_role_arn"
        elif key == "outputLocation":
            suggest = "output_location"
        elif key == "contentRedactionOutput":
            suggest = "content_redaction_output"
        elif key == "outputEncryptionKmsKeyId":
            suggest = "output_encryption_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_access_role_arn: str,
                 output_location: str,
                 content_redaction_output: Optional[str] = None,
                 output_encryption_kms_key_id: Optional[str] = None):
        """
        :param str data_access_role_arn: ARN of the role used by AWS Transcribe to upload your post call analysis.
        :param str output_location: The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
        :param str content_redaction_output: Should output be redacted.
        :param str output_encryption_kms_key_id: ID of the KMS key used to encrypt the output.
        """
        MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_access_role_arn=data_access_role_arn,
            output_location=output_location,
            content_redaction_output=content_redaction_output,
            output_encryption_kms_key_id=output_encryption_kms_key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_access_role_arn: Optional[str] = None,
             output_location: Optional[str] = None,
             content_redaction_output: Optional[str] = None,
             output_encryption_kms_key_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if data_access_role_arn is None and 'dataAccessRoleArn' in kwargs:
            data_access_role_arn = kwargs['dataAccessRoleArn']
        if data_access_role_arn is None:
            raise TypeError("Missing 'data_access_role_arn' argument")
        if output_location is None and 'outputLocation' in kwargs:
            output_location = kwargs['outputLocation']
        if output_location is None:
            raise TypeError("Missing 'output_location' argument")
        if content_redaction_output is None and 'contentRedactionOutput' in kwargs:
            content_redaction_output = kwargs['contentRedactionOutput']
        if output_encryption_kms_key_id is None and 'outputEncryptionKmsKeyId' in kwargs:
            output_encryption_kms_key_id = kwargs['outputEncryptionKmsKeyId']

        _setter("data_access_role_arn", data_access_role_arn)
        _setter("output_location", output_location)
        if content_redaction_output is not None:
            _setter("content_redaction_output", content_redaction_output)
        if output_encryption_kms_key_id is not None:
            _setter("output_encryption_kms_key_id", output_encryption_kms_key_id)

    @property
    @pulumi.getter(name="dataAccessRoleArn")
    def data_access_role_arn(self) -> str:
        """
        ARN of the role used by AWS Transcribe to upload your post call analysis.
        """
        return pulumi.get(self, "data_access_role_arn")

    @property
    @pulumi.getter(name="outputLocation")
    def output_location(self) -> str:
        """
        The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
        """
        return pulumi.get(self, "output_location")

    @property
    @pulumi.getter(name="contentRedactionOutput")
    def content_redaction_output(self) -> Optional[str]:
        """
        Should output be redacted.
        """
        return pulumi.get(self, "content_redaction_output")

    @property
    @pulumi.getter(name="outputEncryptionKmsKeyId")
    def output_encryption_kms_key_id(self) -> Optional[str]:
        """
        ID of the KMS key used to encrypt the output.
        """
        return pulumi.get(self, "output_encryption_kms_key_id")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "languageCode":
            suggest = "language_code"
        elif key == "contentIdentificationType":
            suggest = "content_identification_type"
        elif key == "contentRedactionType":
            suggest = "content_redaction_type"
        elif key == "enablePartialResultsStabilization":
            suggest = "enable_partial_results_stabilization"
        elif key == "filterPartialResults":
            suggest = "filter_partial_results"
        elif key == "languageModelName":
            suggest = "language_model_name"
        elif key == "partialResultsStability":
            suggest = "partial_results_stability"
        elif key == "piiEntityTypes":
            suggest = "pii_entity_types"
        elif key == "showSpeakerLabel":
            suggest = "show_speaker_label"
        elif key == "vocabularyFilterMethod":
            suggest = "vocabulary_filter_method"
        elif key == "vocabularyFilterName":
            suggest = "vocabulary_filter_name"
        elif key == "vocabularyName":
            suggest = "vocabulary_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 language_code: str,
                 content_identification_type: Optional[str] = None,
                 content_redaction_type: Optional[str] = None,
                 enable_partial_results_stabilization: Optional[bool] = None,
                 filter_partial_results: Optional[bool] = None,
                 language_model_name: Optional[str] = None,
                 partial_results_stability: Optional[str] = None,
                 pii_entity_types: Optional[str] = None,
                 show_speaker_label: Optional[bool] = None,
                 vocabulary_filter_method: Optional[str] = None,
                 vocabulary_filter_name: Optional[str] = None,
                 vocabulary_name: Optional[str] = None):
        """
        :param str language_code: Language code for the transcription model.
        :param str content_identification_type: Labels all personally identifiable information (PII) identified in Transcript events.
        :param str content_redaction_type: Redacts all personally identifiable information (PII) identified in Transcript events.
        :param bool enable_partial_results_stabilization: Enables partial result stabilization in Transcript events.
        :param bool filter_partial_results: Filters partial Utterance events from delivery to the insights target.
        :param str language_model_name: Name of custom language model for transcription.
        :param str partial_results_stability: Level of stability to use when partial results stabilization is enabled.
        :param str pii_entity_types: Types of personally identifiable information (PII) to redact from a Transcript event.
        :param bool show_speaker_label: Enables speaker partitioning (diarization) in your Transcript events.
        :param str vocabulary_filter_method: Method for applying a vocabulary filter to Transcript events.
        :param str vocabulary_filter_name: Name of the custom vocabulary filter to use when processing Transcript events.
        :param str vocabulary_name: Name of the custom vocabulary to use when processing Transcript events.
        """
        MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            language_code=language_code,
            content_identification_type=content_identification_type,
            content_redaction_type=content_redaction_type,
            enable_partial_results_stabilization=enable_partial_results_stabilization,
            filter_partial_results=filter_partial_results,
            language_model_name=language_model_name,
            partial_results_stability=partial_results_stability,
            pii_entity_types=pii_entity_types,
            show_speaker_label=show_speaker_label,
            vocabulary_filter_method=vocabulary_filter_method,
            vocabulary_filter_name=vocabulary_filter_name,
            vocabulary_name=vocabulary_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             language_code: Optional[str] = None,
             content_identification_type: Optional[str] = None,
             content_redaction_type: Optional[str] = None,
             enable_partial_results_stabilization: Optional[bool] = None,
             filter_partial_results: Optional[bool] = None,
             language_model_name: Optional[str] = None,
             partial_results_stability: Optional[str] = None,
             pii_entity_types: Optional[str] = None,
             show_speaker_label: Optional[bool] = None,
             vocabulary_filter_method: Optional[str] = None,
             vocabulary_filter_name: Optional[str] = None,
             vocabulary_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if language_code is None and 'languageCode' in kwargs:
            language_code = kwargs['languageCode']
        if language_code is None:
            raise TypeError("Missing 'language_code' argument")
        if content_identification_type is None and 'contentIdentificationType' in kwargs:
            content_identification_type = kwargs['contentIdentificationType']
        if content_redaction_type is None and 'contentRedactionType' in kwargs:
            content_redaction_type = kwargs['contentRedactionType']
        if enable_partial_results_stabilization is None and 'enablePartialResultsStabilization' in kwargs:
            enable_partial_results_stabilization = kwargs['enablePartialResultsStabilization']
        if filter_partial_results is None and 'filterPartialResults' in kwargs:
            filter_partial_results = kwargs['filterPartialResults']
        if language_model_name is None and 'languageModelName' in kwargs:
            language_model_name = kwargs['languageModelName']
        if partial_results_stability is None and 'partialResultsStability' in kwargs:
            partial_results_stability = kwargs['partialResultsStability']
        if pii_entity_types is None and 'piiEntityTypes' in kwargs:
            pii_entity_types = kwargs['piiEntityTypes']
        if show_speaker_label is None and 'showSpeakerLabel' in kwargs:
            show_speaker_label = kwargs['showSpeakerLabel']
        if vocabulary_filter_method is None and 'vocabularyFilterMethod' in kwargs:
            vocabulary_filter_method = kwargs['vocabularyFilterMethod']
        if vocabulary_filter_name is None and 'vocabularyFilterName' in kwargs:
            vocabulary_filter_name = kwargs['vocabularyFilterName']
        if vocabulary_name is None and 'vocabularyName' in kwargs:
            vocabulary_name = kwargs['vocabularyName']

        _setter("language_code", language_code)
        if content_identification_type is not None:
            _setter("content_identification_type", content_identification_type)
        if content_redaction_type is not None:
            _setter("content_redaction_type", content_redaction_type)
        if enable_partial_results_stabilization is not None:
            _setter("enable_partial_results_stabilization", enable_partial_results_stabilization)
        if filter_partial_results is not None:
            _setter("filter_partial_results", filter_partial_results)
        if language_model_name is not None:
            _setter("language_model_name", language_model_name)
        if partial_results_stability is not None:
            _setter("partial_results_stability", partial_results_stability)
        if pii_entity_types is not None:
            _setter("pii_entity_types", pii_entity_types)
        if show_speaker_label is not None:
            _setter("show_speaker_label", show_speaker_label)
        if vocabulary_filter_method is not None:
            _setter("vocabulary_filter_method", vocabulary_filter_method)
        if vocabulary_filter_name is not None:
            _setter("vocabulary_filter_name", vocabulary_filter_name)
        if vocabulary_name is not None:
            _setter("vocabulary_name", vocabulary_name)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        """
        Language code for the transcription model.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="contentIdentificationType")
    def content_identification_type(self) -> Optional[str]:
        """
        Labels all personally identifiable information (PII) identified in Transcript events.
        """
        return pulumi.get(self, "content_identification_type")

    @property
    @pulumi.getter(name="contentRedactionType")
    def content_redaction_type(self) -> Optional[str]:
        """
        Redacts all personally identifiable information (PII) identified in Transcript events.
        """
        return pulumi.get(self, "content_redaction_type")

    @property
    @pulumi.getter(name="enablePartialResultsStabilization")
    def enable_partial_results_stabilization(self) -> Optional[bool]:
        """
        Enables partial result stabilization in Transcript events.
        """
        return pulumi.get(self, "enable_partial_results_stabilization")

    @property
    @pulumi.getter(name="filterPartialResults")
    def filter_partial_results(self) -> Optional[bool]:
        """
        Filters partial Utterance events from delivery to the insights target.
        """
        return pulumi.get(self, "filter_partial_results")

    @property
    @pulumi.getter(name="languageModelName")
    def language_model_name(self) -> Optional[str]:
        """
        Name of custom language model for transcription.
        """
        return pulumi.get(self, "language_model_name")

    @property
    @pulumi.getter(name="partialResultsStability")
    def partial_results_stability(self) -> Optional[str]:
        """
        Level of stability to use when partial results stabilization is enabled.
        """
        return pulumi.get(self, "partial_results_stability")

    @property
    @pulumi.getter(name="piiEntityTypes")
    def pii_entity_types(self) -> Optional[str]:
        """
        Types of personally identifiable information (PII) to redact from a Transcript event.
        """
        return pulumi.get(self, "pii_entity_types")

    @property
    @pulumi.getter(name="showSpeakerLabel")
    def show_speaker_label(self) -> Optional[bool]:
        """
        Enables speaker partitioning (diarization) in your Transcript events.
        """
        return pulumi.get(self, "show_speaker_label")

    @property
    @pulumi.getter(name="vocabularyFilterMethod")
    def vocabulary_filter_method(self) -> Optional[str]:
        """
        Method for applying a vocabulary filter to Transcript events.
        """
        return pulumi.get(self, "vocabulary_filter_method")

    @property
    @pulumi.getter(name="vocabularyFilterName")
    def vocabulary_filter_name(self) -> Optional[str]:
        """
        Name of the custom vocabulary filter to use when processing Transcript events.
        """
        return pulumi.get(self, "vocabulary_filter_name")

    @property
    @pulumi.getter(name="vocabularyName")
    def vocabulary_name(self) -> Optional[str]:
        """
        Name of the custom vocabulary to use when processing Transcript events.
        """
        return pulumi.get(self, "vocabulary_name")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightsTarget":
            suggest = "insights_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insights_target: str):
        """
        :param str insights_target: SQS queue to deliver results.
        """
        MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            insights_target=insights_target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             insights_target: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if insights_target is None and 'insightsTarget' in kwargs:
            insights_target = kwargs['insightsTarget']
        if insights_target is None:
            raise TypeError("Missing 'insights_target' argument")

        _setter("insights_target", insights_target)

    @property
    @pulumi.getter(name="insightsTarget")
    def insights_target(self) -> str:
        """
        SQS queue to deliver results.
        """
        return pulumi.get(self, "insights_target")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightsTarget":
            suggest = "insights_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insights_target: str):
        """
        :param str insights_target: SQS queue to deliver results.
        """
        MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            insights_target=insights_target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             insights_target: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if insights_target is None and 'insightsTarget' in kwargs:
            insights_target = kwargs['insightsTarget']
        if insights_target is None:
            raise TypeError("Missing 'insights_target' argument")

        _setter("insights_target", insights_target)

    @property
    @pulumi.getter(name="insightsTarget")
    def insights_target(self) -> str:
        """
        SQS queue to deliver results.
        """
        return pulumi.get(self, "insights_target")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        """
        :param str destination: S3 URI to deliver recordings.
        """
        MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        """
        S3 URI to deliver recordings.
        """
        return pulumi.get(self, "destination")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightsTarget":
            suggest = "insights_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insights_target: str):
        """
        :param str insights_target: SQS queue to deliver results.
        """
        MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            insights_target=insights_target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             insights_target: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if insights_target is None and 'insightsTarget' in kwargs:
            insights_target = kwargs['insightsTarget']
        if insights_target is None:
            raise TypeError("Missing 'insights_target' argument")

        _setter("insights_target", insights_target)

    @property
    @pulumi.getter(name="insightsTarget")
    def insights_target(self) -> str:
        """
        SQS queue to deliver results.
        """
        return pulumi.get(self, "insights_target")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insightsTarget":
            suggest = "insights_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insights_target: str):
        """
        :param str insights_target: SQS queue to deliver results.
        """
        MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            insights_target=insights_target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             insights_target: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if insights_target is None and 'insightsTarget' in kwargs:
            insights_target = kwargs['insightsTarget']
        if insights_target is None:
            raise TypeError("Missing 'insights_target' argument")

        _setter("insights_target", insights_target)

    @property
    @pulumi.getter(name="insightsTarget")
    def insights_target(self) -> str:
        """
        SQS queue to deliver results.
        """
        return pulumi.get(self, "insights_target")


@pulumi.output_type
class MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "speakerSearchStatus":
            suggest = "speaker_search_status"
        elif key == "voiceToneAnalysisStatus":
            suggest = "voice_tone_analysis_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 speaker_search_status: str,
                 voice_tone_analysis_status: str):
        """
        :param str speaker_search_status: Enable speaker search.
        :param str voice_tone_analysis_status: Enable voice tone analysis.
        """
        MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            speaker_search_status=speaker_search_status,
            voice_tone_analysis_status=voice_tone_analysis_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             speaker_search_status: Optional[str] = None,
             voice_tone_analysis_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if speaker_search_status is None and 'speakerSearchStatus' in kwargs:
            speaker_search_status = kwargs['speakerSearchStatus']
        if speaker_search_status is None:
            raise TypeError("Missing 'speaker_search_status' argument")
        if voice_tone_analysis_status is None and 'voiceToneAnalysisStatus' in kwargs:
            voice_tone_analysis_status = kwargs['voiceToneAnalysisStatus']
        if voice_tone_analysis_status is None:
            raise TypeError("Missing 'voice_tone_analysis_status' argument")

        _setter("speaker_search_status", speaker_search_status)
        _setter("voice_tone_analysis_status", voice_tone_analysis_status)

    @property
    @pulumi.getter(name="speakerSearchStatus")
    def speaker_search_status(self) -> str:
        """
        Enable speaker search.
        """
        return pulumi.get(self, "speaker_search_status")

    @property
    @pulumi.getter(name="voiceToneAnalysisStatus")
    def voice_tone_analysis_status(self) -> str:
        """
        Enable voice tone analysis.
        """
        return pulumi.get(self, "voice_tone_analysis_status")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfiguration(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule'],
                 disabled: Optional[bool] = None):
        """
        :param Sequence['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs'] rules: Collection of real time alert rules
        :param bool disabled: Disables real time alert rules.
        """
        MediaInsightsPipelineConfigurationRealTimeAlertConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rules=rules,
            disabled=disabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rules: Optional[Sequence['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule']] = None,
             disabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if rules is None:
            raise TypeError("Missing 'rules' argument")

        _setter("rules", rules)
        if disabled is not None:
            _setter("disabled", disabled)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule']:
        """
        Collection of real time alert rules
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Disables real time alert rules.
        """
        return pulumi.get(self, "disabled")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "issueDetectionConfiguration":
            suggest = "issue_detection_configuration"
        elif key == "keywordMatchConfiguration":
            suggest = "keyword_match_configuration"
        elif key == "sentimentConfiguration":
            suggest = "sentiment_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 issue_detection_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration'] = None,
                 keyword_match_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration'] = None,
                 sentiment_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration'] = None):
        """
        :param str type: Element type.
        :param 'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs' issue_detection_configuration: Configuration for an issue detection rule.
        :param 'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs' keyword_match_configuration: Configuration for a keyword match rule.
        :param 'MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs' sentiment_configuration: Configuration for a sentiment rule.
        """
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            issue_detection_configuration=issue_detection_configuration,
            keyword_match_configuration=keyword_match_configuration,
            sentiment_configuration=sentiment_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             issue_detection_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration'] = None,
             keyword_match_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration'] = None,
             sentiment_configuration: Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if issue_detection_configuration is None and 'issueDetectionConfiguration' in kwargs:
            issue_detection_configuration = kwargs['issueDetectionConfiguration']
        if keyword_match_configuration is None and 'keywordMatchConfiguration' in kwargs:
            keyword_match_configuration = kwargs['keywordMatchConfiguration']
        if sentiment_configuration is None and 'sentimentConfiguration' in kwargs:
            sentiment_configuration = kwargs['sentimentConfiguration']

        _setter("type", type)
        if issue_detection_configuration is not None:
            _setter("issue_detection_configuration", issue_detection_configuration)
        if keyword_match_configuration is not None:
            _setter("keyword_match_configuration", keyword_match_configuration)
        if sentiment_configuration is not None:
            _setter("sentiment_configuration", sentiment_configuration)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Element type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="issueDetectionConfiguration")
    def issue_detection_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration']:
        """
        Configuration for an issue detection rule.
        """
        return pulumi.get(self, "issue_detection_configuration")

    @property
    @pulumi.getter(name="keywordMatchConfiguration")
    def keyword_match_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration']:
        """
        Configuration for a keyword match rule.
        """
        return pulumi.get(self, "keyword_match_configuration")

    @property
    @pulumi.getter(name="sentimentConfiguration")
    def sentiment_configuration(self) -> Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration']:
        """
        Configuration for a sentiment rule.
        """
        return pulumi.get(self, "sentiment_configuration")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: str):
        """
        :param str rule_name: Rule name.
        """
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule_name=rule_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if rule_name is None and 'ruleName' in kwargs:
            rule_name = kwargs['ruleName']
        if rule_name is None:
            raise TypeError("Missing 'rule_name' argument")

        _setter("rule_name", rule_name)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keywords: Sequence[str],
                 rule_name: str,
                 negate: Optional[bool] = None):
        """
        :param Sequence[str] keywords: Collection of keywords to match.
        :param str rule_name: Rule name.
        :param bool negate: Negate the rule.
        """
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            keywords=keywords,
            rule_name=rule_name,
            negate=negate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             keywords: Optional[Sequence[str]] = None,
             rule_name: Optional[str] = None,
             negate: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if keywords is None:
            raise TypeError("Missing 'keywords' argument")
        if rule_name is None and 'ruleName' in kwargs:
            rule_name = kwargs['ruleName']
        if rule_name is None:
            raise TypeError("Missing 'rule_name' argument")

        _setter("keywords", keywords)
        _setter("rule_name", rule_name)
        if negate is not None:
            _setter("negate", negate)

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[str]:
        """
        Collection of keywords to match.
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        Negate the rule.
        """
        return pulumi.get(self, "negate")


@pulumi.output_type
class MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"
        elif key == "sentimentType":
            suggest = "sentiment_type"
        elif key == "timePeriod":
            suggest = "time_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: str,
                 sentiment_type: str,
                 time_period: int):
        """
        :param str rule_name: Rule name.
        :param str sentiment_type: Sentiment type to match.
        :param int time_period: Analysis interval.
        """
        MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule_name=rule_name,
            sentiment_type=sentiment_type,
            time_period=time_period,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule_name: Optional[str] = None,
             sentiment_type: Optional[str] = None,
             time_period: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if rule_name is None and 'ruleName' in kwargs:
            rule_name = kwargs['ruleName']
        if rule_name is None:
            raise TypeError("Missing 'rule_name' argument")
        if sentiment_type is None and 'sentimentType' in kwargs:
            sentiment_type = kwargs['sentimentType']
        if sentiment_type is None:
            raise TypeError("Missing 'sentiment_type' argument")
        if time_period is None and 'timePeriod' in kwargs:
            time_period = kwargs['timePeriod']
        if time_period is None:
            raise TypeError("Missing 'time_period' argument")

        _setter("rule_name", rule_name)
        _setter("sentiment_type", sentiment_type)
        _setter("time_period", time_period)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="sentimentType")
    def sentiment_type(self) -> str:
        """
        Sentiment type to match.
        """
        return pulumi.get(self, "sentiment_type")

    @property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> int:
        """
        Analysis interval.
        """
        return pulumi.get(self, "time_period")


