# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaInsightsPipelineConfigurationArgs', 'MediaInsightsPipelineConfiguration']

@pulumi.input_type
class MediaInsightsPipelineConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]],
                 resource_access_role_arn: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 real_time_alert_configuration: Optional[pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a MediaInsightsPipelineConfiguration resource.
        :param pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]] elements: Collection of processors and sinks to transform media and deliver data.
        :param pulumi.Input[str] resource_access_role_arn: ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs'] real_time_alert_configuration: Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of tags for the resource.
        """
        MediaInsightsPipelineConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            resource_access_role_arn=resource_access_role_arn,
            name=name,
            real_time_alert_configuration=real_time_alert_configuration,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: Optional[pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]]] = None,
             resource_access_role_arn: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             real_time_alert_configuration: Optional[pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']] = None,
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if elements is None:
            raise TypeError("Missing 'elements' argument")
        if resource_access_role_arn is None and 'resourceAccessRoleArn' in kwargs:
            resource_access_role_arn = kwargs['resourceAccessRoleArn']
        if resource_access_role_arn is None:
            raise TypeError("Missing 'resource_access_role_arn' argument")
        if real_time_alert_configuration is None and 'realTimeAlertConfiguration' in kwargs:
            real_time_alert_configuration = kwargs['realTimeAlertConfiguration']

        _setter("elements", elements)
        _setter("resource_access_role_arn", resource_access_role_arn)
        if name is not None:
            _setter("name", name)
        if real_time_alert_configuration is not None:
            _setter("real_time_alert_configuration", real_time_alert_configuration)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]]:
        """
        Collection of processors and sinks to transform media and deliver data.
        """
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="resourceAccessRoleArn")
    def resource_access_role_arn(self) -> pulumi.Input[str]:
        """
        ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
        """
        return pulumi.get(self, "resource_access_role_arn")

    @resource_access_role_arn.setter
    def resource_access_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_access_role_arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="realTimeAlertConfiguration")
    def real_time_alert_configuration(self) -> Optional[pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']]:
        """
        Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
        """
        return pulumi.get(self, "real_time_alert_configuration")

    @real_time_alert_configuration.setter
    def real_time_alert_configuration(self, value: Optional[pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']]):
        pulumi.set(self, "real_time_alert_configuration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of tags for the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _MediaInsightsPipelineConfigurationState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 elements: Optional[pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 real_time_alert_configuration: Optional[pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']] = None,
                 resource_access_role_arn: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering MediaInsightsPipelineConfiguration resources.
        :param pulumi.Input[str] arn: ARN of the Media Insights Pipeline Configuration.
        :param pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]] elements: Collection of processors and sinks to transform media and deliver data.
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs'] real_time_alert_configuration: Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
        :param pulumi.Input[str] resource_access_role_arn: ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of tags for the resource.
        """
        _MediaInsightsPipelineConfigurationState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            elements=elements,
            name=name,
            real_time_alert_configuration=real_time_alert_configuration,
            resource_access_role_arn=resource_access_role_arn,
            tags=tags,
            tags_all=tags_all,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: Optional[pulumi.Input[str]] = None,
             elements: Optional[pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             real_time_alert_configuration: Optional[pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']] = None,
             resource_access_role_arn: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if real_time_alert_configuration is None and 'realTimeAlertConfiguration' in kwargs:
            real_time_alert_configuration = kwargs['realTimeAlertConfiguration']
        if resource_access_role_arn is None and 'resourceAccessRoleArn' in kwargs:
            resource_access_role_arn = kwargs['resourceAccessRoleArn']
        if tags_all is None and 'tagsAll' in kwargs:
            tags_all = kwargs['tagsAll']

        if arn is not None:
            _setter("arn", arn)
        if elements is not None:
            _setter("elements", elements)
        if name is not None:
            _setter("name", name)
        if real_time_alert_configuration is not None:
            _setter("real_time_alert_configuration", real_time_alert_configuration)
        if resource_access_role_arn is not None:
            _setter("resource_access_role_arn", resource_access_role_arn)
        if tags is not None:
            _setter("tags", tags)
        if tags_all is not None:
            warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")
        if tags_all is not None:
            _setter("tags_all", tags_all)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of the Media Insights Pipeline Configuration.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def elements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]]]:
        """
        Collection of processors and sinks to transform media and deliver data.
        """
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MediaInsightsPipelineConfigurationElementArgs']]]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="realTimeAlertConfiguration")
    def real_time_alert_configuration(self) -> Optional[pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']]:
        """
        Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
        """
        return pulumi.get(self, "real_time_alert_configuration")

    @real_time_alert_configuration.setter
    def real_time_alert_configuration(self, value: Optional[pulumi.Input['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']]):
        pulumi.set(self, "real_time_alert_configuration", value)

    @property
    @pulumi.getter(name="resourceAccessRoleArn")
    def resource_access_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
        """
        return pulumi.get(self, "resource_access_role_arn")

    @resource_access_role_arn.setter
    def resource_access_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_access_role_arn", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of tags for the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)


class MediaInsightsPipelineConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 elements: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationElementArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 real_time_alert_configuration: Optional[pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']]] = None,
                 resource_access_role_arn: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Resource for managing an AWS Chime SDK Media Pipelines Media Insights Pipeline Configuration.
        Consult the [Call analytics developer guide](https://docs.aws.amazon.com/chime-sdk/latest/dg/call-analytics.html) for more detailed information about usage.

        ## Example Usage

        ## Import

        Using `pulumi import`, import Chime SDK Media Pipelines Media Insights Pipeline Configuration using the `id`. For example:

        ```sh
         $ pulumi import aws:chimesdkmediapipelines/mediaInsightsPipelineConfiguration:MediaInsightsPipelineConfiguration example abcdef123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationElementArgs']]]] elements: Collection of processors and sinks to transform media and deliver data.
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']] real_time_alert_configuration: Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
        :param pulumi.Input[str] resource_access_role_arn: ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of tags for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaInsightsPipelineConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for managing an AWS Chime SDK Media Pipelines Media Insights Pipeline Configuration.
        Consult the [Call analytics developer guide](https://docs.aws.amazon.com/chime-sdk/latest/dg/call-analytics.html) for more detailed information about usage.

        ## Example Usage

        ## Import

        Using `pulumi import`, import Chime SDK Media Pipelines Media Insights Pipeline Configuration using the `id`. For example:

        ```sh
         $ pulumi import aws:chimesdkmediapipelines/mediaInsightsPipelineConfiguration:MediaInsightsPipelineConfiguration example abcdef123456
        ```

        :param str resource_name: The name of the resource.
        :param MediaInsightsPipelineConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaInsightsPipelineConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            MediaInsightsPipelineConfigurationArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 elements: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationElementArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 real_time_alert_configuration: Optional[pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']]] = None,
                 resource_access_role_arn: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaInsightsPipelineConfigurationArgs.__new__(MediaInsightsPipelineConfigurationArgs)

            if elements is None and not opts.urn:
                raise TypeError("Missing required property 'elements'")
            __props__.__dict__["elements"] = elements
            __props__.__dict__["name"] = name
            real_time_alert_configuration = _utilities.configure(real_time_alert_configuration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs, True)
            __props__.__dict__["real_time_alert_configuration"] = real_time_alert_configuration
            if resource_access_role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'resource_access_role_arn'")
            __props__.__dict__["resource_access_role_arn"] = resource_access_role_arn
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["tags_all"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["tagsAll"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(MediaInsightsPipelineConfiguration, __self__).__init__(
            'aws:chimesdkmediapipelines/mediaInsightsPipelineConfiguration:MediaInsightsPipelineConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            elements: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationElementArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            real_time_alert_configuration: Optional[pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']]] = None,
            resource_access_role_arn: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'MediaInsightsPipelineConfiguration':
        """
        Get an existing MediaInsightsPipelineConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: ARN of the Media Insights Pipeline Configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationElementArgs']]]] elements: Collection of processors and sinks to transform media and deliver data.
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[pulumi.InputType['MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs']] real_time_alert_configuration: Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
        :param pulumi.Input[str] resource_access_role_arn: ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of tags for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaInsightsPipelineConfigurationState.__new__(_MediaInsightsPipelineConfigurationState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["elements"] = elements
        __props__.__dict__["name"] = name
        __props__.__dict__["real_time_alert_configuration"] = real_time_alert_configuration
        __props__.__dict__["resource_access_role_arn"] = resource_access_role_arn
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        return MediaInsightsPipelineConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        ARN of the Media Insights Pipeline Configuration.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Output[Sequence['outputs.MediaInsightsPipelineConfigurationElement']]:
        """
        Collection of processors and sinks to transform media and deliver data.
        """
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="realTimeAlertConfiguration")
    def real_time_alert_configuration(self) -> pulumi.Output[Optional['outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfiguration']]:
        """
        Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
        """
        return pulumi.get(self, "real_time_alert_configuration")

    @property
    @pulumi.getter(name="resourceAccessRoleArn")
    def resource_access_role_arn(self) -> pulumi.Output[str]:
        """
        ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
        """
        return pulumi.get(self, "resource_access_role_arn")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key-value map of tags for the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

