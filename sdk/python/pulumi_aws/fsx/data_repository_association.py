# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataRepositoryAssociationArgs', 'DataRepositoryAssociation']

@pulumi.input_type
class DataRepositoryAssociationArgs:
    def __init__(__self__, *,
                 data_repository_path: pulumi.Input[str],
                 file_system_id: pulumi.Input[str],
                 file_system_path: pulumi.Input[str],
                 batch_import_meta_data_on_create: Optional[pulumi.Input[bool]] = None,
                 delete_data_in_filesystem: Optional[pulumi.Input[bool]] = None,
                 imported_file_chunk_size: Optional[pulumi.Input[int]] = None,
                 s3: Optional[pulumi.Input['DataRepositoryAssociationS3Args']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DataRepositoryAssociation resource.
        """
        pulumi.set(__self__, "data_repository_path", data_repository_path)
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "file_system_path", file_system_path)
        if batch_import_meta_data_on_create is not None:
            pulumi.set(__self__, "batch_import_meta_data_on_create", batch_import_meta_data_on_create)
        if delete_data_in_filesystem is not None:
            pulumi.set(__self__, "delete_data_in_filesystem", delete_data_in_filesystem)
        if imported_file_chunk_size is not None:
            pulumi.set(__self__, "imported_file_chunk_size", imported_file_chunk_size)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="dataRepositoryPath")
    def data_repository_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_repository_path")

    @data_repository_path.setter
    def data_repository_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_repository_path", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_system_path")

    @file_system_path.setter
    def file_system_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system_path", value)

    @property
    @pulumi.getter(name="batchImportMetaDataOnCreate")
    def batch_import_meta_data_on_create(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "batch_import_meta_data_on_create")

    @batch_import_meta_data_on_create.setter
    def batch_import_meta_data_on_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "batch_import_meta_data_on_create", value)

    @property
    @pulumi.getter(name="deleteDataInFilesystem")
    def delete_data_in_filesystem(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_data_in_filesystem")

    @delete_data_in_filesystem.setter
    def delete_data_in_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_data_in_filesystem", value)

    @property
    @pulumi.getter(name="importedFileChunkSize")
    def imported_file_chunk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "imported_file_chunk_size")

    @imported_file_chunk_size.setter
    def imported_file_chunk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "imported_file_chunk_size", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['DataRepositoryAssociationS3Args']]:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['DataRepositoryAssociationS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DataRepositoryAssociationState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 association_id: Optional[pulumi.Input[str]] = None,
                 batch_import_meta_data_on_create: Optional[pulumi.Input[bool]] = None,
                 data_repository_path: Optional[pulumi.Input[str]] = None,
                 delete_data_in_filesystem: Optional[pulumi.Input[bool]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 file_system_path: Optional[pulumi.Input[str]] = None,
                 imported_file_chunk_size: Optional[pulumi.Input[int]] = None,
                 s3: Optional[pulumi.Input['DataRepositoryAssociationS3Args']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering DataRepositoryAssociation resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if association_id is not None:
            pulumi.set(__self__, "association_id", association_id)
        if batch_import_meta_data_on_create is not None:
            pulumi.set(__self__, "batch_import_meta_data_on_create", batch_import_meta_data_on_create)
        if data_repository_path is not None:
            pulumi.set(__self__, "data_repository_path", data_repository_path)
        if delete_data_in_filesystem is not None:
            pulumi.set(__self__, "delete_data_in_filesystem", delete_data_in_filesystem)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if file_system_path is not None:
            pulumi.set(__self__, "file_system_path", file_system_path)
        if imported_file_chunk_size is not None:
            pulumi.set(__self__, "imported_file_chunk_size", imported_file_chunk_size)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="associationId")
    def association_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "association_id")

    @association_id.setter
    def association_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_id", value)

    @property
    @pulumi.getter(name="batchImportMetaDataOnCreate")
    def batch_import_meta_data_on_create(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "batch_import_meta_data_on_create")

    @batch_import_meta_data_on_create.setter
    def batch_import_meta_data_on_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "batch_import_meta_data_on_create", value)

    @property
    @pulumi.getter(name="dataRepositoryPath")
    def data_repository_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_repository_path")

    @data_repository_path.setter
    def data_repository_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_repository_path", value)

    @property
    @pulumi.getter(name="deleteDataInFilesystem")
    def delete_data_in_filesystem(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_data_in_filesystem")

    @delete_data_in_filesystem.setter
    def delete_data_in_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_data_in_filesystem", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_system_path")

    @file_system_path.setter
    def file_system_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_path", value)

    @property
    @pulumi.getter(name="importedFileChunkSize")
    def imported_file_chunk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "imported_file_chunk_size")

    @imported_file_chunk_size.setter
    def imported_file_chunk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "imported_file_chunk_size", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['DataRepositoryAssociationS3Args']]:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['DataRepositoryAssociationS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)


class DataRepositoryAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 batch_import_meta_data_on_create: Optional[pulumi.Input[bool]] = None,
                 data_repository_path: Optional[pulumi.Input[str]] = None,
                 delete_data_in_filesystem: Optional[pulumi.Input[bool]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 file_system_path: Optional[pulumi.Input[str]] = None,
                 imported_file_chunk_size: Optional[pulumi.Input[int]] = None,
                 s3: Optional[pulumi.Input[pulumi.InputType['DataRepositoryAssociationS3Args']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a DataRepositoryAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataRepositoryAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DataRepositoryAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DataRepositoryAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataRepositoryAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 batch_import_meta_data_on_create: Optional[pulumi.Input[bool]] = None,
                 data_repository_path: Optional[pulumi.Input[str]] = None,
                 delete_data_in_filesystem: Optional[pulumi.Input[bool]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 file_system_path: Optional[pulumi.Input[str]] = None,
                 imported_file_chunk_size: Optional[pulumi.Input[int]] = None,
                 s3: Optional[pulumi.Input[pulumi.InputType['DataRepositoryAssociationS3Args']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataRepositoryAssociationArgs.__new__(DataRepositoryAssociationArgs)

            __props__.__dict__["batch_import_meta_data_on_create"] = batch_import_meta_data_on_create
            if data_repository_path is None and not opts.urn:
                raise TypeError("Missing required property 'data_repository_path'")
            __props__.__dict__["data_repository_path"] = data_repository_path
            __props__.__dict__["delete_data_in_filesystem"] = delete_data_in_filesystem
            if file_system_id is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_id'")
            __props__.__dict__["file_system_id"] = file_system_id
            if file_system_path is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_path'")
            __props__.__dict__["file_system_path"] = file_system_path
            __props__.__dict__["imported_file_chunk_size"] = imported_file_chunk_size
            __props__.__dict__["s3"] = s3
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["association_id"] = None
            __props__.__dict__["tags_all"] = None
        super(DataRepositoryAssociation, __self__).__init__(
            'aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            association_id: Optional[pulumi.Input[str]] = None,
            batch_import_meta_data_on_create: Optional[pulumi.Input[bool]] = None,
            data_repository_path: Optional[pulumi.Input[str]] = None,
            delete_data_in_filesystem: Optional[pulumi.Input[bool]] = None,
            file_system_id: Optional[pulumi.Input[str]] = None,
            file_system_path: Optional[pulumi.Input[str]] = None,
            imported_file_chunk_size: Optional[pulumi.Input[int]] = None,
            s3: Optional[pulumi.Input[pulumi.InputType['DataRepositoryAssociationS3Args']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'DataRepositoryAssociation':
        """
        Get an existing DataRepositoryAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataRepositoryAssociationState.__new__(_DataRepositoryAssociationState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["association_id"] = association_id
        __props__.__dict__["batch_import_meta_data_on_create"] = batch_import_meta_data_on_create
        __props__.__dict__["data_repository_path"] = data_repository_path
        __props__.__dict__["delete_data_in_filesystem"] = delete_data_in_filesystem
        __props__.__dict__["file_system_id"] = file_system_id
        __props__.__dict__["file_system_path"] = file_system_path
        __props__.__dict__["imported_file_chunk_size"] = imported_file_chunk_size
        __props__.__dict__["s3"] = s3
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        return DataRepositoryAssociation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="associationId")
    def association_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "association_id")

    @property
    @pulumi.getter(name="batchImportMetaDataOnCreate")
    def batch_import_meta_data_on_create(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "batch_import_meta_data_on_create")

    @property
    @pulumi.getter(name="dataRepositoryPath")
    def data_repository_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "data_repository_path")

    @property
    @pulumi.getter(name="deleteDataInFilesystem")
    def delete_data_in_filesystem(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "delete_data_in_filesystem")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_system_path")

    @property
    @pulumi.getter(name="importedFileChunkSize")
    def imported_file_chunk_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "imported_file_chunk_size")

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Output['outputs.DataRepositoryAssociationS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "tags_all")

