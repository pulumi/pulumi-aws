# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FileCacheArgs', 'FileCache']

@pulumi.input_type
class FileCacheArgs:
    def __init__(__self__, *,
                 file_cache_type: pulumi.Input[str],
                 file_cache_type_version: pulumi.Input[str],
                 storage_capacity: pulumi.Input[int],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 copy_tags_to_data_repository_associations: Optional[pulumi.Input[bool]] = None,
                 data_repository_associations: Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheDataRepositoryAssociationArgs']]]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 lustre_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheLustreConfigurationArgs']]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a FileCache resource.
        """
        pulumi.set(__self__, "file_cache_type", file_cache_type)
        pulumi.set(__self__, "file_cache_type_version", file_cache_type_version)
        pulumi.set(__self__, "storage_capacity", storage_capacity)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if copy_tags_to_data_repository_associations is not None:
            pulumi.set(__self__, "copy_tags_to_data_repository_associations", copy_tags_to_data_repository_associations)
        if data_repository_associations is not None:
            pulumi.set(__self__, "data_repository_associations", data_repository_associations)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if lustre_configurations is not None:
            pulumi.set(__self__, "lustre_configurations", lustre_configurations)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="fileCacheType")
    def file_cache_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_cache_type")

    @file_cache_type.setter
    def file_cache_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_cache_type", value)

    @property
    @pulumi.getter(name="fileCacheTypeVersion")
    def file_cache_type_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_cache_type_version")

    @file_cache_type_version.setter
    def file_cache_type_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_cache_type_version", value)

    @property
    @pulumi.getter(name="storageCapacity")
    def storage_capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "storage_capacity")

    @storage_capacity.setter
    def storage_capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_capacity", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="copyTagsToDataRepositoryAssociations")
    def copy_tags_to_data_repository_associations(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "copy_tags_to_data_repository_associations")

    @copy_tags_to_data_repository_associations.setter
    def copy_tags_to_data_repository_associations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "copy_tags_to_data_repository_associations", value)

    @property
    @pulumi.getter(name="dataRepositoryAssociations")
    def data_repository_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheDataRepositoryAssociationArgs']]]]:
        return pulumi.get(self, "data_repository_associations")

    @data_repository_associations.setter
    def data_repository_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheDataRepositoryAssociationArgs']]]]):
        pulumi.set(self, "data_repository_associations", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="lustreConfigurations")
    def lustre_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheLustreConfigurationArgs']]]]:
        return pulumi.get(self, "lustre_configurations")

    @lustre_configurations.setter
    def lustre_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheLustreConfigurationArgs']]]]):
        pulumi.set(self, "lustre_configurations", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _FileCacheState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 copy_tags_to_data_repository_associations: Optional[pulumi.Input[bool]] = None,
                 data_repository_association_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_repository_associations: Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheDataRepositoryAssociationArgs']]]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 file_cache_id: Optional[pulumi.Input[str]] = None,
                 file_cache_type: Optional[pulumi.Input[str]] = None,
                 file_cache_type_version: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 lustre_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheLustreConfigurationArgs']]]] = None,
                 network_interface_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_capacity: Optional[pulumi.Input[int]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FileCache resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if copy_tags_to_data_repository_associations is not None:
            pulumi.set(__self__, "copy_tags_to_data_repository_associations", copy_tags_to_data_repository_associations)
        if data_repository_association_ids is not None:
            pulumi.set(__self__, "data_repository_association_ids", data_repository_association_ids)
        if data_repository_associations is not None:
            pulumi.set(__self__, "data_repository_associations", data_repository_associations)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if file_cache_id is not None:
            pulumi.set(__self__, "file_cache_id", file_cache_id)
        if file_cache_type is not None:
            pulumi.set(__self__, "file_cache_type", file_cache_type)
        if file_cache_type_version is not None:
            pulumi.set(__self__, "file_cache_type_version", file_cache_type_version)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if lustre_configurations is not None:
            pulumi.set(__self__, "lustre_configurations", lustre_configurations)
        if network_interface_ids is not None:
            pulumi.set(__self__, "network_interface_ids", network_interface_ids)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if storage_capacity is not None:
            pulumi.set(__self__, "storage_capacity", storage_capacity)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="copyTagsToDataRepositoryAssociations")
    def copy_tags_to_data_repository_associations(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "copy_tags_to_data_repository_associations")

    @copy_tags_to_data_repository_associations.setter
    def copy_tags_to_data_repository_associations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "copy_tags_to_data_repository_associations", value)

    @property
    @pulumi.getter(name="dataRepositoryAssociationIds")
    def data_repository_association_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "data_repository_association_ids")

    @data_repository_association_ids.setter
    def data_repository_association_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "data_repository_association_ids", value)

    @property
    @pulumi.getter(name="dataRepositoryAssociations")
    def data_repository_associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheDataRepositoryAssociationArgs']]]]:
        return pulumi.get(self, "data_repository_associations")

    @data_repository_associations.setter
    def data_repository_associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheDataRepositoryAssociationArgs']]]]):
        pulumi.set(self, "data_repository_associations", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="fileCacheId")
    def file_cache_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_cache_id")

    @file_cache_id.setter
    def file_cache_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_cache_id", value)

    @property
    @pulumi.getter(name="fileCacheType")
    def file_cache_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_cache_type")

    @file_cache_type.setter
    def file_cache_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_cache_type", value)

    @property
    @pulumi.getter(name="fileCacheTypeVersion")
    def file_cache_type_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_cache_type_version")

    @file_cache_type_version.setter
    def file_cache_type_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_cache_type_version", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="lustreConfigurations")
    def lustre_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheLustreConfigurationArgs']]]]:
        return pulumi.get(self, "lustre_configurations")

    @lustre_configurations.setter
    def lustre_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileCacheLustreConfigurationArgs']]]]):
        pulumi.set(self, "lustre_configurations", value)

    @property
    @pulumi.getter(name="networkInterfaceIds")
    def network_interface_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "network_interface_ids")

    @network_interface_ids.setter
    def network_interface_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_interface_ids", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="storageCapacity")
    def storage_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage_capacity")

    @storage_capacity.setter
    def storage_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_capacity", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class FileCache(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 copy_tags_to_data_repository_associations: Optional[pulumi.Input[bool]] = None,
                 data_repository_associations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FileCacheDataRepositoryAssociationArgs']]]]] = None,
                 file_cache_type: Optional[pulumi.Input[str]] = None,
                 file_cache_type_version: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 lustre_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FileCacheLustreConfigurationArgs']]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_capacity: Optional[pulumi.Input[int]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a FileCache resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FileCacheArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FileCache resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FileCacheArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FileCacheArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 copy_tags_to_data_repository_associations: Optional[pulumi.Input[bool]] = None,
                 data_repository_associations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FileCacheDataRepositoryAssociationArgs']]]]] = None,
                 file_cache_type: Optional[pulumi.Input[str]] = None,
                 file_cache_type_version: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 lustre_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FileCacheLustreConfigurationArgs']]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_capacity: Optional[pulumi.Input[int]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FileCacheArgs.__new__(FileCacheArgs)

            __props__.__dict__["copy_tags_to_data_repository_associations"] = copy_tags_to_data_repository_associations
            __props__.__dict__["data_repository_associations"] = data_repository_associations
            if file_cache_type is None and not opts.urn:
                raise TypeError("Missing required property 'file_cache_type'")
            __props__.__dict__["file_cache_type"] = file_cache_type
            if file_cache_type_version is None and not opts.urn:
                raise TypeError("Missing required property 'file_cache_type_version'")
            __props__.__dict__["file_cache_type_version"] = file_cache_type_version
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["lustre_configurations"] = lustre_configurations
            __props__.__dict__["security_group_ids"] = security_group_ids
            if storage_capacity is None and not opts.urn:
                raise TypeError("Missing required property 'storage_capacity'")
            __props__.__dict__["storage_capacity"] = storage_capacity
            if subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_ids'")
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["data_repository_association_ids"] = None
            __props__.__dict__["dns_name"] = None
            __props__.__dict__["file_cache_id"] = None
            __props__.__dict__["network_interface_ids"] = None
            __props__.__dict__["owner_id"] = None
            __props__.__dict__["tags_all"] = None
            __props__.__dict__["vpc_id"] = None
        super(FileCache, __self__).__init__(
            'aws:fsx/fileCache:FileCache',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            copy_tags_to_data_repository_associations: Optional[pulumi.Input[bool]] = None,
            data_repository_association_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            data_repository_associations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FileCacheDataRepositoryAssociationArgs']]]]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            file_cache_id: Optional[pulumi.Input[str]] = None,
            file_cache_type: Optional[pulumi.Input[str]] = None,
            file_cache_type_version: Optional[pulumi.Input[str]] = None,
            kms_key_id: Optional[pulumi.Input[str]] = None,
            lustre_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FileCacheLustreConfigurationArgs']]]]] = None,
            network_interface_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            storage_capacity: Optional[pulumi.Input[int]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'FileCache':
        """
        Get an existing FileCache resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FileCacheState.__new__(_FileCacheState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["copy_tags_to_data_repository_associations"] = copy_tags_to_data_repository_associations
        __props__.__dict__["data_repository_association_ids"] = data_repository_association_ids
        __props__.__dict__["data_repository_associations"] = data_repository_associations
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["file_cache_id"] = file_cache_id
        __props__.__dict__["file_cache_type"] = file_cache_type
        __props__.__dict__["file_cache_type_version"] = file_cache_type_version
        __props__.__dict__["kms_key_id"] = kms_key_id
        __props__.__dict__["lustre_configurations"] = lustre_configurations
        __props__.__dict__["network_interface_ids"] = network_interface_ids
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["storage_capacity"] = storage_capacity
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["vpc_id"] = vpc_id
        return FileCache(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="copyTagsToDataRepositoryAssociations")
    def copy_tags_to_data_repository_associations(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "copy_tags_to_data_repository_associations")

    @property
    @pulumi.getter(name="dataRepositoryAssociationIds")
    def data_repository_association_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "data_repository_association_ids")

    @property
    @pulumi.getter(name="dataRepositoryAssociations")
    def data_repository_associations(self) -> pulumi.Output[Optional[Sequence['outputs.FileCacheDataRepositoryAssociation']]]:
        return pulumi.get(self, "data_repository_associations")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="fileCacheId")
    def file_cache_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_cache_id")

    @property
    @pulumi.getter(name="fileCacheType")
    def file_cache_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_cache_type")

    @property
    @pulumi.getter(name="fileCacheTypeVersion")
    def file_cache_type_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_cache_type_version")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="lustreConfigurations")
    def lustre_configurations(self) -> pulumi.Output[Optional[Sequence['outputs.FileCacheLustreConfiguration']]]:
        return pulumi.get(self, "lustre_configurations")

    @property
    @pulumi.getter(name="networkInterfaceIds")
    def network_interface_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "network_interface_ids")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="storageCapacity")
    def storage_capacity(self) -> pulumi.Output[int]:
        return pulumi.get(self, "storage_capacity")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vpc_id")

