# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class ConditionalForwader(pulumi.CustomResource):
    directory_id: pulumi.Output[str]
    """
    The id of directory.
    """
    dns_ips: pulumi.Output[list]
    """
    A list of forwarder IP addresses.
    """
    remote_domain_name: pulumi.Output[str]
    """
    The fully qualified domain name of the remote domain for which forwarders will be used.
    """
    def __init__(__self__, __name__, __opts__=None, directory_id=None, dns_ips=None, remote_domain_name=None):
        """
        Provides a conditional forwarder for managed Microsoft AD in AWS Directory Service.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] directory_id: The id of directory.
        :param pulumi.Input[list] dns_ips: A list of forwarder IP addresses.
        :param pulumi.Input[str] remote_domain_name: The fully qualified domain name of the remote domain for which forwarders will be used.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not directory_id:
            raise TypeError('Missing required property directory_id')
        __props__['directory_id'] = directory_id

        if not dns_ips:
            raise TypeError('Missing required property dns_ips')
        __props__['dns_ips'] = dns_ips

        if not remote_domain_name:
            raise TypeError('Missing required property remote_domain_name')
        __props__['remote_domain_name'] = remote_domain_name

        super(ConditionalForwader, __self__).__init__(
            'aws:directoryservice/conditionalForwader:ConditionalForwader',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

