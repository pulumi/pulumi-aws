# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ControlTowerControlParameterArgs',
    'ControlTowerControlParameterArgsDict',
    'LandingZoneDriftStatusArgs',
    'LandingZoneDriftStatusArgsDict',
]

MYPY = False

if not MYPY:
    class ControlTowerControlParameterArgsDict(TypedDict):
        key: pulumi.Input[builtins.str]
        """
        The name of the parameter.
        """
        value: pulumi.Input[builtins.str]
        """
        The value of the parameter.
        """
elif False:
    ControlTowerControlParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ControlTowerControlParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] key: The name of the parameter.
        :param pulumi.Input[builtins.str] value: The value of the parameter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        The name of the parameter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class LandingZoneDriftStatusArgsDict(TypedDict):
        status: NotRequired[pulumi.Input[builtins.str]]
        """
        The drift status of the landing zone.
        """
elif False:
    LandingZoneDriftStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LandingZoneDriftStatusArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] status: The drift status of the landing zone.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The drift status of the landing zone.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)


