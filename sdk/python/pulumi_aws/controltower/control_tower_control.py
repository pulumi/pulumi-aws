# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ControlTowerControlArgs', 'ControlTowerControl']

@pulumi.input_type
class ControlTowerControlArgs:
    def __init__(__self__, *,
                 control_identifier: pulumi.Input[str],
                 target_identifier: pulumi.Input[str]):
        """
        The set of arguments for constructing a ControlTowerControl resource.
        :param pulumi.Input[str] control_identifier: The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
        :param pulumi.Input[str] target_identifier: The ARN of the organizational unit.
        """
        pulumi.set(__self__, "control_identifier", control_identifier)
        pulumi.set(__self__, "target_identifier", target_identifier)

    @property
    @pulumi.getter(name="controlIdentifier")
    def control_identifier(self) -> pulumi.Input[str]:
        """
        The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
        """
        return pulumi.get(self, "control_identifier")

    @control_identifier.setter
    def control_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_identifier", value)

    @property
    @pulumi.getter(name="targetIdentifier")
    def target_identifier(self) -> pulumi.Input[str]:
        """
        The ARN of the organizational unit.
        """
        return pulumi.get(self, "target_identifier")

    @target_identifier.setter
    def target_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_identifier", value)


@pulumi.input_type
class _ControlTowerControlState:
    def __init__(__self__, *,
                 control_identifier: Optional[pulumi.Input[str]] = None,
                 target_identifier: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ControlTowerControl resources.
        :param pulumi.Input[str] control_identifier: The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
        :param pulumi.Input[str] target_identifier: The ARN of the organizational unit.
        """
        if control_identifier is not None:
            pulumi.set(__self__, "control_identifier", control_identifier)
        if target_identifier is not None:
            pulumi.set(__self__, "target_identifier", target_identifier)

    @property
    @pulumi.getter(name="controlIdentifier")
    def control_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
        """
        return pulumi.get(self, "control_identifier")

    @control_identifier.setter
    def control_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_identifier", value)

    @property
    @pulumi.getter(name="targetIdentifier")
    def target_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the organizational unit.
        """
        return pulumi.get(self, "target_identifier")

    @target_identifier.setter
    def target_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_identifier", value)


class ControlTowerControl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 control_identifier: Optional[pulumi.Input[str]] = None,
                 target_identifier: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Allows the application of pre-defined controls to organizational units. For more information on usage, please see the
        [AWS Control Tower User Guide](https://docs.aws.amazon.com/controltower/latest/userguide/enable-guardrails.html).

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] control_identifier: The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
        :param pulumi.Input[str] target_identifier: The ARN of the organizational unit.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ControlTowerControlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Allows the application of pre-defined controls to organizational units. For more information on usage, please see the
        [AWS Control Tower User Guide](https://docs.aws.amazon.com/controltower/latest/userguide/enable-guardrails.html).

        :param str resource_name: The name of the resource.
        :param ControlTowerControlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ControlTowerControlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 control_identifier: Optional[pulumi.Input[str]] = None,
                 target_identifier: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ControlTowerControlArgs.__new__(ControlTowerControlArgs)

            if control_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'control_identifier'")
            __props__.__dict__["control_identifier"] = control_identifier
            if target_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'target_identifier'")
            __props__.__dict__["target_identifier"] = target_identifier
        super(ControlTowerControl, __self__).__init__(
            'aws:controltower/controlTowerControl:ControlTowerControl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            control_identifier: Optional[pulumi.Input[str]] = None,
            target_identifier: Optional[pulumi.Input[str]] = None) -> 'ControlTowerControl':
        """
        Get an existing ControlTowerControl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] control_identifier: The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
        :param pulumi.Input[str] target_identifier: The ARN of the organizational unit.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ControlTowerControlState.__new__(_ControlTowerControlState)

        __props__.__dict__["control_identifier"] = control_identifier
        __props__.__dict__["target_identifier"] = target_identifier
        return ControlTowerControl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="controlIdentifier")
    def control_identifier(self) -> pulumi.Output[str]:
        """
        The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
        """
        return pulumi.get(self, "control_identifier")

    @property
    @pulumi.getter(name="targetIdentifier")
    def target_identifier(self) -> pulumi.Output[str]:
        """
        The ARN of the organizational unit.
        """
        return pulumi.get(self, "target_identifier")

