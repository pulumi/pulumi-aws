# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'StreamKinesisConfiguration',
]

@pulumi.output_type
class StreamKinesisConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamArn":
            suggest = "stream_arn"
        elif key == "aggregationEnabled":
            suggest = "aggregation_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamKinesisConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamKinesisConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamKinesisConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_arn: str,
                 aggregation_enabled: Optional[bool] = None):
        """
        :param str stream_arn: The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.
        :param bool aggregation_enabled: Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the number of records sent per API call. Default: `true`.
        """
        StreamKinesisConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_arn=stream_arn,
            aggregation_enabled=aggregation_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_arn: Optional[str] = None,
             aggregation_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if stream_arn is None and 'streamArn' in kwargs:
            stream_arn = kwargs['streamArn']
        if stream_arn is None:
            raise TypeError("Missing 'stream_arn' argument")
        if aggregation_enabled is None and 'aggregationEnabled' in kwargs:
            aggregation_enabled = kwargs['aggregationEnabled']

        _setter("stream_arn", stream_arn)
        if aggregation_enabled is not None:
            _setter("aggregation_enabled", aggregation_enabled)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.
        """
        return pulumi.get(self, "stream_arn")

    @property
    @pulumi.getter(name="aggregationEnabled")
    def aggregation_enabled(self) -> Optional[bool]:
        """
        Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the number of records sent per API call. Default: `true`.
        """
        return pulumi.get(self, "aggregation_enabled")


