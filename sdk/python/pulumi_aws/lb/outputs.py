# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ListenerDefaultAction',
    'ListenerDefaultActionAuthenticateCognito',
    'ListenerDefaultActionAuthenticateOidc',
    'ListenerDefaultActionFixedResponse',
    'ListenerDefaultActionForward',
    'ListenerDefaultActionForwardStickiness',
    'ListenerDefaultActionForwardTargetGroup',
    'ListenerDefaultActionRedirect',
    'ListenerRuleAction',
    'ListenerRuleActionAuthenticateCognito',
    'ListenerRuleActionAuthenticateOidc',
    'ListenerRuleActionFixedResponse',
    'ListenerRuleActionForward',
    'ListenerRuleActionForwardStickiness',
    'ListenerRuleActionForwardTargetGroup',
    'ListenerRuleActionRedirect',
    'ListenerRuleCondition',
    'ListenerRuleConditionHostHeader',
    'ListenerRuleConditionHttpHeader',
    'ListenerRuleConditionHttpRequestMethod',
    'ListenerRuleConditionPathPattern',
    'ListenerRuleConditionQueryString',
    'ListenerRuleConditionSourceIp',
    'LoadBalancerAccessLogs',
    'LoadBalancerSubnetMapping',
    'TargetGroupHealthCheck',
    'TargetGroupStickiness',
    'TargetGroupTargetFailover',
    'GetListenerDefaultActionResult',
    'GetListenerDefaultActionAuthenticateCognitoResult',
    'GetListenerDefaultActionAuthenticateOidcResult',
    'GetListenerDefaultActionFixedResponseResult',
    'GetListenerDefaultActionForwardResult',
    'GetListenerDefaultActionForwardStickinessResult',
    'GetListenerDefaultActionForwardTargetGroupResult',
    'GetListenerDefaultActionRedirectResult',
    'GetLoadBalancerAccessLogsResult',
    'GetLoadBalancerSubnetMappingResult',
    'GetTargetGroupHealthCheckResult',
    'GetTargetGroupStickinessResult',
]

@pulumi.output_type
class ListenerDefaultAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticateCognito":
            suggest = "authenticate_cognito"
        elif key == "authenticateOidc":
            suggest = "authenticate_oidc"
        elif key == "fixedResponse":
            suggest = "fixed_response"
        elif key == "targetGroupArn":
            suggest = "target_group_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerDefaultAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerDefaultAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerDefaultAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 authenticate_cognito: Optional['outputs.ListenerDefaultActionAuthenticateCognito'] = None,
                 authenticate_oidc: Optional['outputs.ListenerDefaultActionAuthenticateOidc'] = None,
                 fixed_response: Optional['outputs.ListenerDefaultActionFixedResponse'] = None,
                 forward: Optional['outputs.ListenerDefaultActionForward'] = None,
                 order: Optional[int] = None,
                 redirect: Optional['outputs.ListenerDefaultActionRedirect'] = None,
                 target_group_arn: Optional[str] = None):
        """
        :param str type: Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
               
               The following arguments are optional:
        :param 'ListenerDefaultActionAuthenticateCognitoArgs' authenticate_cognito: Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. Detailed below.
        :param 'ListenerDefaultActionAuthenticateOidcArgs' authenticate_oidc: Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. Detailed below.
        :param 'ListenerDefaultActionFixedResponseArgs' fixed_response: Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        :param 'ListenerDefaultActionForwardArgs' forward: Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`. Detailed below.
        :param int order: Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`.
        :param 'ListenerDefaultActionRedirectArgs' redirect: Configuration block for creating a redirect action. Required if `type` is `redirect`. Detailed below.
        :param str target_group_arn: ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
        ListenerDefaultAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            authenticate_cognito=authenticate_cognito,
            authenticate_oidc=authenticate_oidc,
            fixed_response=fixed_response,
            forward=forward,
            order=order,
            redirect=redirect,
            target_group_arn=target_group_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             authenticate_cognito: Optional['outputs.ListenerDefaultActionAuthenticateCognito'] = None,
             authenticate_oidc: Optional['outputs.ListenerDefaultActionAuthenticateOidc'] = None,
             fixed_response: Optional['outputs.ListenerDefaultActionFixedResponse'] = None,
             forward: Optional['outputs.ListenerDefaultActionForward'] = None,
             order: Optional[int] = None,
             redirect: Optional['outputs.ListenerDefaultActionRedirect'] = None,
             target_group_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if authenticate_cognito is None and 'authenticateCognito' in kwargs:
            authenticate_cognito = kwargs['authenticateCognito']
        if authenticate_oidc is None and 'authenticateOidc' in kwargs:
            authenticate_oidc = kwargs['authenticateOidc']
        if fixed_response is None and 'fixedResponse' in kwargs:
            fixed_response = kwargs['fixedResponse']
        if target_group_arn is None and 'targetGroupArn' in kwargs:
            target_group_arn = kwargs['targetGroupArn']

        _setter("type", type)
        if authenticate_cognito is not None:
            _setter("authenticate_cognito", authenticate_cognito)
        if authenticate_oidc is not None:
            _setter("authenticate_oidc", authenticate_oidc)
        if fixed_response is not None:
            _setter("fixed_response", fixed_response)
        if forward is not None:
            _setter("forward", forward)
        if order is not None:
            _setter("order", order)
        if redirect is not None:
            _setter("redirect", redirect)
        if target_group_arn is not None:
            _setter("target_group_arn", target_group_arn)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.

        The following arguments are optional:
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="authenticateCognito")
    def authenticate_cognito(self) -> Optional['outputs.ListenerDefaultActionAuthenticateCognito']:
        """
        Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. Detailed below.
        """
        return pulumi.get(self, "authenticate_cognito")

    @property
    @pulumi.getter(name="authenticateOidc")
    def authenticate_oidc(self) -> Optional['outputs.ListenerDefaultActionAuthenticateOidc']:
        """
        Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. Detailed below.
        """
        return pulumi.get(self, "authenticate_oidc")

    @property
    @pulumi.getter(name="fixedResponse")
    def fixed_response(self) -> Optional['outputs.ListenerDefaultActionFixedResponse']:
        """
        Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        """
        return pulumi.get(self, "fixed_response")

    @property
    @pulumi.getter
    def forward(self) -> Optional['outputs.ListenerDefaultActionForward']:
        """
        Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`. Detailed below.
        """
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        """
        Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.ListenerDefaultActionRedirect']:
        """
        Configuration block for creating a redirect action. Required if `type` is `redirect`. Detailed below.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> Optional[str]:
        """
        ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
        return pulumi.get(self, "target_group_arn")


@pulumi.output_type
class ListenerDefaultActionAuthenticateCognito(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userPoolArn":
            suggest = "user_pool_arn"
        elif key == "userPoolClientId":
            suggest = "user_pool_client_id"
        elif key == "userPoolDomain":
            suggest = "user_pool_domain"
        elif key == "authenticationRequestExtraParams":
            suggest = "authentication_request_extra_params"
        elif key == "onUnauthenticatedRequest":
            suggest = "on_unauthenticated_request"
        elif key == "sessionCookieName":
            suggest = "session_cookie_name"
        elif key == "sessionTimeout":
            suggest = "session_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerDefaultActionAuthenticateCognito. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerDefaultActionAuthenticateCognito.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerDefaultActionAuthenticateCognito.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_pool_arn: str,
                 user_pool_client_id: str,
                 user_pool_domain: str,
                 authentication_request_extra_params: Optional[Mapping[str, str]] = None,
                 on_unauthenticated_request: Optional[str] = None,
                 scope: Optional[str] = None,
                 session_cookie_name: Optional[str] = None,
                 session_timeout: Optional[int] = None):
        """
        :param str user_pool_arn: ARN of the Cognito user pool.
        :param str user_pool_client_id: ID of the Cognito user pool client.
        :param str user_pool_domain: Domain prefix or fully-qualified domain name of the Cognito user pool.
               
               The following arguments are optional:
        :param Mapping[str, str] authentication_request_extra_params: Query parameters to include in the redirect request to the authorization endpoint. Max: 10. Detailed below.
        :param str on_unauthenticated_request: Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
        :param str scope: Set of user claims to be requested from the IdP.
        :param str session_cookie_name: Name of the cookie used to maintain session information.
        :param int session_timeout: Maximum duration of the authentication session, in seconds.
        """
        ListenerDefaultActionAuthenticateCognito._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            user_pool_arn=user_pool_arn,
            user_pool_client_id=user_pool_client_id,
            user_pool_domain=user_pool_domain,
            authentication_request_extra_params=authentication_request_extra_params,
            on_unauthenticated_request=on_unauthenticated_request,
            scope=scope,
            session_cookie_name=session_cookie_name,
            session_timeout=session_timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             user_pool_arn: Optional[str] = None,
             user_pool_client_id: Optional[str] = None,
             user_pool_domain: Optional[str] = None,
             authentication_request_extra_params: Optional[Mapping[str, str]] = None,
             on_unauthenticated_request: Optional[str] = None,
             scope: Optional[str] = None,
             session_cookie_name: Optional[str] = None,
             session_timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if user_pool_arn is None and 'userPoolArn' in kwargs:
            user_pool_arn = kwargs['userPoolArn']
        if user_pool_arn is None:
            raise TypeError("Missing 'user_pool_arn' argument")
        if user_pool_client_id is None and 'userPoolClientId' in kwargs:
            user_pool_client_id = kwargs['userPoolClientId']
        if user_pool_client_id is None:
            raise TypeError("Missing 'user_pool_client_id' argument")
        if user_pool_domain is None and 'userPoolDomain' in kwargs:
            user_pool_domain = kwargs['userPoolDomain']
        if user_pool_domain is None:
            raise TypeError("Missing 'user_pool_domain' argument")
        if authentication_request_extra_params is None and 'authenticationRequestExtraParams' in kwargs:
            authentication_request_extra_params = kwargs['authenticationRequestExtraParams']
        if on_unauthenticated_request is None and 'onUnauthenticatedRequest' in kwargs:
            on_unauthenticated_request = kwargs['onUnauthenticatedRequest']
        if session_cookie_name is None and 'sessionCookieName' in kwargs:
            session_cookie_name = kwargs['sessionCookieName']
        if session_timeout is None and 'sessionTimeout' in kwargs:
            session_timeout = kwargs['sessionTimeout']

        _setter("user_pool_arn", user_pool_arn)
        _setter("user_pool_client_id", user_pool_client_id)
        _setter("user_pool_domain", user_pool_domain)
        if authentication_request_extra_params is not None:
            _setter("authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            _setter("on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            _setter("scope", scope)
        if session_cookie_name is not None:
            _setter("session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            _setter("session_timeout", session_timeout)

    @property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> str:
        """
        ARN of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_arn")

    @property
    @pulumi.getter(name="userPoolClientId")
    def user_pool_client_id(self) -> str:
        """
        ID of the Cognito user pool client.
        """
        return pulumi.get(self, "user_pool_client_id")

    @property
    @pulumi.getter(name="userPoolDomain")
    def user_pool_domain(self) -> str:
        """
        Domain prefix or fully-qualified domain name of the Cognito user pool.

        The following arguments are optional:
        """
        return pulumi.get(self, "user_pool_domain")

    @property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[Mapping[str, str]]:
        """
        Query parameters to include in the redirect request to the authorization endpoint. Max: 10. Detailed below.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[str]:
        """
        Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        Set of user claims to be requested from the IdP.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[str]:
        """
        Name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[int]:
        """
        Maximum duration of the authentication session, in seconds.
        """
        return pulumi.get(self, "session_timeout")


@pulumi.output_type
class ListenerDefaultActionAuthenticateOidc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "userInfoEndpoint":
            suggest = "user_info_endpoint"
        elif key == "authenticationRequestExtraParams":
            suggest = "authentication_request_extra_params"
        elif key == "onUnauthenticatedRequest":
            suggest = "on_unauthenticated_request"
        elif key == "sessionCookieName":
            suggest = "session_cookie_name"
        elif key == "sessionTimeout":
            suggest = "session_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerDefaultActionAuthenticateOidc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerDefaultActionAuthenticateOidc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerDefaultActionAuthenticateOidc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_endpoint: str,
                 client_id: str,
                 client_secret: str,
                 issuer: str,
                 token_endpoint: str,
                 user_info_endpoint: str,
                 authentication_request_extra_params: Optional[Mapping[str, str]] = None,
                 on_unauthenticated_request: Optional[str] = None,
                 scope: Optional[str] = None,
                 session_cookie_name: Optional[str] = None,
                 session_timeout: Optional[int] = None):
        """
        :param str authorization_endpoint: Authorization endpoint of the IdP.
        :param str client_id: OAuth 2.0 client identifier.
        :param str client_secret: OAuth 2.0 client secret.
        :param str issuer: OIDC issuer identifier of the IdP.
        :param str token_endpoint: Token endpoint of the IdP.
        :param str user_info_endpoint: User info endpoint of the IdP.
               
               The following arguments are optional:
        :param Mapping[str, str] authentication_request_extra_params: Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param str on_unauthenticated_request: Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param str scope: Set of user claims to be requested from the IdP.
        :param str session_cookie_name: Name of the cookie used to maintain session information.
        :param int session_timeout: Maximum duration of the authentication session, in seconds.
        """
        ListenerDefaultActionAuthenticateOidc._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorization_endpoint=authorization_endpoint,
            client_id=client_id,
            client_secret=client_secret,
            issuer=issuer,
            token_endpoint=token_endpoint,
            user_info_endpoint=user_info_endpoint,
            authentication_request_extra_params=authentication_request_extra_params,
            on_unauthenticated_request=on_unauthenticated_request,
            scope=scope,
            session_cookie_name=session_cookie_name,
            session_timeout=session_timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorization_endpoint: Optional[str] = None,
             client_id: Optional[str] = None,
             client_secret: Optional[str] = None,
             issuer: Optional[str] = None,
             token_endpoint: Optional[str] = None,
             user_info_endpoint: Optional[str] = None,
             authentication_request_extra_params: Optional[Mapping[str, str]] = None,
             on_unauthenticated_request: Optional[str] = None,
             scope: Optional[str] = None,
             session_cookie_name: Optional[str] = None,
             session_timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if authorization_endpoint is None and 'authorizationEndpoint' in kwargs:
            authorization_endpoint = kwargs['authorizationEndpoint']
        if authorization_endpoint is None:
            raise TypeError("Missing 'authorization_endpoint' argument")
        if client_id is None and 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if client_id is None:
            raise TypeError("Missing 'client_id' argument")
        if client_secret is None and 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if client_secret is None:
            raise TypeError("Missing 'client_secret' argument")
        if issuer is None:
            raise TypeError("Missing 'issuer' argument")
        if token_endpoint is None and 'tokenEndpoint' in kwargs:
            token_endpoint = kwargs['tokenEndpoint']
        if token_endpoint is None:
            raise TypeError("Missing 'token_endpoint' argument")
        if user_info_endpoint is None and 'userInfoEndpoint' in kwargs:
            user_info_endpoint = kwargs['userInfoEndpoint']
        if user_info_endpoint is None:
            raise TypeError("Missing 'user_info_endpoint' argument")
        if authentication_request_extra_params is None and 'authenticationRequestExtraParams' in kwargs:
            authentication_request_extra_params = kwargs['authenticationRequestExtraParams']
        if on_unauthenticated_request is None and 'onUnauthenticatedRequest' in kwargs:
            on_unauthenticated_request = kwargs['onUnauthenticatedRequest']
        if session_cookie_name is None and 'sessionCookieName' in kwargs:
            session_cookie_name = kwargs['sessionCookieName']
        if session_timeout is None and 'sessionTimeout' in kwargs:
            session_timeout = kwargs['sessionTimeout']

        _setter("authorization_endpoint", authorization_endpoint)
        _setter("client_id", client_id)
        _setter("client_secret", client_secret)
        _setter("issuer", issuer)
        _setter("token_endpoint", token_endpoint)
        _setter("user_info_endpoint", user_info_endpoint)
        if authentication_request_extra_params is not None:
            _setter("authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            _setter("on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            _setter("scope", scope)
        if session_cookie_name is not None:
            _setter("session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            _setter("session_timeout", session_timeout)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> str:
        """
        Authorization endpoint of the IdP.
        """
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        OAuth 2.0 client identifier.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        OAuth 2.0 client secret.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        OIDC issuer identifier of the IdP.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> str:
        """
        Token endpoint of the IdP.
        """
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> str:
        """
        User info endpoint of the IdP.

        The following arguments are optional:
        """
        return pulumi.get(self, "user_info_endpoint")

    @property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[Mapping[str, str]]:
        """
        Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[str]:
        """
        Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        Set of user claims to be requested from the IdP.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[str]:
        """
        Name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[int]:
        """
        Maximum duration of the authentication session, in seconds.
        """
        return pulumi.get(self, "session_timeout")


@pulumi.output_type
class ListenerDefaultActionFixedResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "messageBody":
            suggest = "message_body"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerDefaultActionFixedResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerDefaultActionFixedResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerDefaultActionFixedResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_type: str,
                 message_body: Optional[str] = None,
                 status_code: Optional[str] = None):
        """
        :param str content_type: Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
               
               The following arguments are optional:
        :param str message_body: Message body.
        :param str status_code: HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        ListenerDefaultActionFixedResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            message_body=message_body,
            status_code=status_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: Optional[str] = None,
             message_body: Optional[str] = None,
             status_code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_type is None and 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if content_type is None:
            raise TypeError("Missing 'content_type' argument")
        if message_body is None and 'messageBody' in kwargs:
            message_body = kwargs['messageBody']
        if status_code is None and 'statusCode' in kwargs:
            status_code = kwargs['statusCode']

        _setter("content_type", content_type)
        if message_body is not None:
            _setter("message_body", message_body)
        if status_code is not None:
            _setter("status_code", status_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.

        The following arguments are optional:
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[str]:
        """
        Message body.
        """
        return pulumi.get(self, "message_body")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[str]:
        """
        HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ListenerDefaultActionForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroups":
            suggest = "target_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerDefaultActionForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerDefaultActionForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerDefaultActionForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_groups: Sequence['outputs.ListenerDefaultActionForwardTargetGroup'],
                 stickiness: Optional['outputs.ListenerDefaultActionForwardStickiness'] = None):
        """
        :param Sequence['ListenerDefaultActionForwardTargetGroupArgs'] target_groups: Set of 1-5 target group blocks. Detailed below.
               
               The following arguments are optional:
        :param 'ListenerDefaultActionForwardStickinessArgs' stickiness: Configuration block for target group stickiness for the rule. Detailed below.
        """
        ListenerDefaultActionForward._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_groups=target_groups,
            stickiness=stickiness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_groups: Optional[Sequence['outputs.ListenerDefaultActionForwardTargetGroup']] = None,
             stickiness: Optional['outputs.ListenerDefaultActionForwardStickiness'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if target_groups is None and 'targetGroups' in kwargs:
            target_groups = kwargs['targetGroups']
        if target_groups is None:
            raise TypeError("Missing 'target_groups' argument")

        _setter("target_groups", target_groups)
        if stickiness is not None:
            _setter("stickiness", stickiness)

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Sequence['outputs.ListenerDefaultActionForwardTargetGroup']:
        """
        Set of 1-5 target group blocks. Detailed below.

        The following arguments are optional:
        """
        return pulumi.get(self, "target_groups")

    @property
    @pulumi.getter
    def stickiness(self) -> Optional['outputs.ListenerDefaultActionForwardStickiness']:
        """
        Configuration block for target group stickiness for the rule. Detailed below.
        """
        return pulumi.get(self, "stickiness")


@pulumi.output_type
class ListenerDefaultActionForwardStickiness(dict):
    def __init__(__self__, *,
                 duration: int,
                 enabled: Optional[bool] = None):
        """
        :param int duration: Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
               
               The following arguments are optional:
        :param bool enabled: Whether target group stickiness is enabled. Default is `false`.
        """
        ListenerDefaultActionForwardStickiness._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: Optional[int] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if duration is None:
            raise TypeError("Missing 'duration' argument")

        _setter("duration", duration)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def duration(self) -> int:
        """
        Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).

        The following arguments are optional:
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether target group stickiness is enabled. Default is `false`.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ListenerDefaultActionForwardTargetGroup(dict):
    def __init__(__self__, *,
                 arn: str,
                 weight: Optional[int] = None):
        """
        :param str arn: ARN of the target group.
               
               The following arguments are optional:
        :param int weight: Weight. The range is 0 to 999.
        """
        ListenerDefaultActionForwardTargetGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: Optional[str] = None,
             weight: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if arn is None:
            raise TypeError("Missing 'arn' argument")

        _setter("arn", arn)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the target group.

        The following arguments are optional:
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight. The range is 0 to 999.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ListenerDefaultActionRedirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerDefaultActionRedirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerDefaultActionRedirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerDefaultActionRedirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: str,
                 host: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None,
                 query: Optional[str] = None):
        """
        :param str status_code: HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
               
               The following arguments are optional:
        :param str host: Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        :param str path: Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        :param str port: Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        :param str protocol: Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        :param str query: Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        ListenerDefaultActionRedirect._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status_code=status_code,
            host=host,
            path=path,
            port=port,
            protocol=protocol,
            query=query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status_code: Optional[str] = None,
             host: Optional[str] = None,
             path: Optional[str] = None,
             port: Optional[str] = None,
             protocol: Optional[str] = None,
             query: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if status_code is None and 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if status_code is None:
            raise TypeError("Missing 'status_code' argument")

        _setter("status_code", status_code)
        if host is not None:
            _setter("host", host)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)
        if protocol is not None:
            _setter("protocol", protocol)
        if query is not None:
            _setter("query", query)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        """
        HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).

        The following arguments are optional:
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class ListenerRuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticateCognito":
            suggest = "authenticate_cognito"
        elif key == "authenticateOidc":
            suggest = "authenticate_oidc"
        elif key == "fixedResponse":
            suggest = "fixed_response"
        elif key == "targetGroupArn":
            suggest = "target_group_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerRuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerRuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerRuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 authenticate_cognito: Optional['outputs.ListenerRuleActionAuthenticateCognito'] = None,
                 authenticate_oidc: Optional['outputs.ListenerRuleActionAuthenticateOidc'] = None,
                 fixed_response: Optional['outputs.ListenerRuleActionFixedResponse'] = None,
                 forward: Optional['outputs.ListenerRuleActionForward'] = None,
                 order: Optional[int] = None,
                 redirect: Optional['outputs.ListenerRuleActionRedirect'] = None,
                 target_group_arn: Optional[str] = None):
        """
        :param str type: The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
        :param 'ListenerRuleActionAuthenticateCognitoArgs' authenticate_cognito: Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        :param 'ListenerRuleActionAuthenticateOidcArgs' authenticate_oidc: Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        :param 'ListenerRuleActionFixedResponseArgs' fixed_response: Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        :param 'ListenerRuleActionForwardArgs' forward: Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
        :param 'ListenerRuleActionRedirectArgs' redirect: Information for creating a redirect action. Required if `type` is `redirect`.
        :param str target_group_arn: The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
        ListenerRuleAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            authenticate_cognito=authenticate_cognito,
            authenticate_oidc=authenticate_oidc,
            fixed_response=fixed_response,
            forward=forward,
            order=order,
            redirect=redirect,
            target_group_arn=target_group_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             authenticate_cognito: Optional['outputs.ListenerRuleActionAuthenticateCognito'] = None,
             authenticate_oidc: Optional['outputs.ListenerRuleActionAuthenticateOidc'] = None,
             fixed_response: Optional['outputs.ListenerRuleActionFixedResponse'] = None,
             forward: Optional['outputs.ListenerRuleActionForward'] = None,
             order: Optional[int] = None,
             redirect: Optional['outputs.ListenerRuleActionRedirect'] = None,
             target_group_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if authenticate_cognito is None and 'authenticateCognito' in kwargs:
            authenticate_cognito = kwargs['authenticateCognito']
        if authenticate_oidc is None and 'authenticateOidc' in kwargs:
            authenticate_oidc = kwargs['authenticateOidc']
        if fixed_response is None and 'fixedResponse' in kwargs:
            fixed_response = kwargs['fixedResponse']
        if target_group_arn is None and 'targetGroupArn' in kwargs:
            target_group_arn = kwargs['targetGroupArn']

        _setter("type", type)
        if authenticate_cognito is not None:
            _setter("authenticate_cognito", authenticate_cognito)
        if authenticate_oidc is not None:
            _setter("authenticate_oidc", authenticate_oidc)
        if fixed_response is not None:
            _setter("fixed_response", fixed_response)
        if forward is not None:
            _setter("forward", forward)
        if order is not None:
            _setter("order", order)
        if redirect is not None:
            _setter("redirect", redirect)
        if target_group_arn is not None:
            _setter("target_group_arn", target_group_arn)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="authenticateCognito")
    def authenticate_cognito(self) -> Optional['outputs.ListenerRuleActionAuthenticateCognito']:
        """
        Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        """
        return pulumi.get(self, "authenticate_cognito")

    @property
    @pulumi.getter(name="authenticateOidc")
    def authenticate_oidc(self) -> Optional['outputs.ListenerRuleActionAuthenticateOidc']:
        """
        Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        """
        return pulumi.get(self, "authenticate_oidc")

    @property
    @pulumi.getter(name="fixedResponse")
    def fixed_response(self) -> Optional['outputs.ListenerRuleActionFixedResponse']:
        """
        Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        """
        return pulumi.get(self, "fixed_response")

    @property
    @pulumi.getter
    def forward(self) -> Optional['outputs.ListenerRuleActionForward']:
        """
        Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `target_group_arn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `target_group_arn`.
        """
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter
    def order(self) -> Optional[int]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.ListenerRuleActionRedirect']:
        """
        Information for creating a redirect action. Required if `type` is `redirect`.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> Optional[str]:
        """
        The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
        """
        return pulumi.get(self, "target_group_arn")


@pulumi.output_type
class ListenerRuleActionAuthenticateCognito(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userPoolArn":
            suggest = "user_pool_arn"
        elif key == "userPoolClientId":
            suggest = "user_pool_client_id"
        elif key == "userPoolDomain":
            suggest = "user_pool_domain"
        elif key == "authenticationRequestExtraParams":
            suggest = "authentication_request_extra_params"
        elif key == "onUnauthenticatedRequest":
            suggest = "on_unauthenticated_request"
        elif key == "sessionCookieName":
            suggest = "session_cookie_name"
        elif key == "sessionTimeout":
            suggest = "session_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerRuleActionAuthenticateCognito. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerRuleActionAuthenticateCognito.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerRuleActionAuthenticateCognito.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_pool_arn: str,
                 user_pool_client_id: str,
                 user_pool_domain: str,
                 authentication_request_extra_params: Optional[Mapping[str, str]] = None,
                 on_unauthenticated_request: Optional[str] = None,
                 scope: Optional[str] = None,
                 session_cookie_name: Optional[str] = None,
                 session_timeout: Optional[int] = None):
        """
        :param str user_pool_arn: The ARN of the Cognito user pool.
        :param str user_pool_client_id: The ID of the Cognito user pool client.
        :param str user_pool_domain: The domain prefix or fully-qualified domain name of the Cognito user pool.
        :param Mapping[str, str] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param str on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param str scope: The set of user claims to be requested from the IdP.
        :param str session_cookie_name: The name of the cookie used to maintain session information.
        :param int session_timeout: The maximum duration of the authentication session, in seconds.
        """
        ListenerRuleActionAuthenticateCognito._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            user_pool_arn=user_pool_arn,
            user_pool_client_id=user_pool_client_id,
            user_pool_domain=user_pool_domain,
            authentication_request_extra_params=authentication_request_extra_params,
            on_unauthenticated_request=on_unauthenticated_request,
            scope=scope,
            session_cookie_name=session_cookie_name,
            session_timeout=session_timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             user_pool_arn: Optional[str] = None,
             user_pool_client_id: Optional[str] = None,
             user_pool_domain: Optional[str] = None,
             authentication_request_extra_params: Optional[Mapping[str, str]] = None,
             on_unauthenticated_request: Optional[str] = None,
             scope: Optional[str] = None,
             session_cookie_name: Optional[str] = None,
             session_timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if user_pool_arn is None and 'userPoolArn' in kwargs:
            user_pool_arn = kwargs['userPoolArn']
        if user_pool_arn is None:
            raise TypeError("Missing 'user_pool_arn' argument")
        if user_pool_client_id is None and 'userPoolClientId' in kwargs:
            user_pool_client_id = kwargs['userPoolClientId']
        if user_pool_client_id is None:
            raise TypeError("Missing 'user_pool_client_id' argument")
        if user_pool_domain is None and 'userPoolDomain' in kwargs:
            user_pool_domain = kwargs['userPoolDomain']
        if user_pool_domain is None:
            raise TypeError("Missing 'user_pool_domain' argument")
        if authentication_request_extra_params is None and 'authenticationRequestExtraParams' in kwargs:
            authentication_request_extra_params = kwargs['authenticationRequestExtraParams']
        if on_unauthenticated_request is None and 'onUnauthenticatedRequest' in kwargs:
            on_unauthenticated_request = kwargs['onUnauthenticatedRequest']
        if session_cookie_name is None and 'sessionCookieName' in kwargs:
            session_cookie_name = kwargs['sessionCookieName']
        if session_timeout is None and 'sessionTimeout' in kwargs:
            session_timeout = kwargs['sessionTimeout']

        _setter("user_pool_arn", user_pool_arn)
        _setter("user_pool_client_id", user_pool_client_id)
        _setter("user_pool_domain", user_pool_domain)
        if authentication_request_extra_params is not None:
            _setter("authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            _setter("on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            _setter("scope", scope)
        if session_cookie_name is not None:
            _setter("session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            _setter("session_timeout", session_timeout)

    @property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> str:
        """
        The ARN of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_arn")

    @property
    @pulumi.getter(name="userPoolClientId")
    def user_pool_client_id(self) -> str:
        """
        The ID of the Cognito user pool client.
        """
        return pulumi.get(self, "user_pool_client_id")

    @property
    @pulumi.getter(name="userPoolDomain")
    def user_pool_domain(self) -> str:
        """
        The domain prefix or fully-qualified domain name of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_domain")

    @property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[Mapping[str, str]]:
        """
        The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[str]:
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The set of user claims to be requested from the IdP.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[str]:
        """
        The name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[int]:
        """
        The maximum duration of the authentication session, in seconds.
        """
        return pulumi.get(self, "session_timeout")


@pulumi.output_type
class ListenerRuleActionAuthenticateOidc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "userInfoEndpoint":
            suggest = "user_info_endpoint"
        elif key == "authenticationRequestExtraParams":
            suggest = "authentication_request_extra_params"
        elif key == "onUnauthenticatedRequest":
            suggest = "on_unauthenticated_request"
        elif key == "sessionCookieName":
            suggest = "session_cookie_name"
        elif key == "sessionTimeout":
            suggest = "session_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerRuleActionAuthenticateOidc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerRuleActionAuthenticateOidc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerRuleActionAuthenticateOidc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_endpoint: str,
                 client_id: str,
                 client_secret: str,
                 issuer: str,
                 token_endpoint: str,
                 user_info_endpoint: str,
                 authentication_request_extra_params: Optional[Mapping[str, str]] = None,
                 on_unauthenticated_request: Optional[str] = None,
                 scope: Optional[str] = None,
                 session_cookie_name: Optional[str] = None,
                 session_timeout: Optional[int] = None):
        """
        :param str authorization_endpoint: The authorization endpoint of the IdP.
        :param str client_id: The OAuth 2.0 client identifier.
        :param str client_secret: The OAuth 2.0 client secret.
        :param str issuer: The OIDC issuer identifier of the IdP.
        :param str token_endpoint: The token endpoint of the IdP.
        :param str user_info_endpoint: The user info endpoint of the IdP.
        :param Mapping[str, str] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param str on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param str scope: The set of user claims to be requested from the IdP.
        :param str session_cookie_name: The name of the cookie used to maintain session information.
        :param int session_timeout: The maximum duration of the authentication session, in seconds.
        """
        ListenerRuleActionAuthenticateOidc._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorization_endpoint=authorization_endpoint,
            client_id=client_id,
            client_secret=client_secret,
            issuer=issuer,
            token_endpoint=token_endpoint,
            user_info_endpoint=user_info_endpoint,
            authentication_request_extra_params=authentication_request_extra_params,
            on_unauthenticated_request=on_unauthenticated_request,
            scope=scope,
            session_cookie_name=session_cookie_name,
            session_timeout=session_timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorization_endpoint: Optional[str] = None,
             client_id: Optional[str] = None,
             client_secret: Optional[str] = None,
             issuer: Optional[str] = None,
             token_endpoint: Optional[str] = None,
             user_info_endpoint: Optional[str] = None,
             authentication_request_extra_params: Optional[Mapping[str, str]] = None,
             on_unauthenticated_request: Optional[str] = None,
             scope: Optional[str] = None,
             session_cookie_name: Optional[str] = None,
             session_timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if authorization_endpoint is None and 'authorizationEndpoint' in kwargs:
            authorization_endpoint = kwargs['authorizationEndpoint']
        if authorization_endpoint is None:
            raise TypeError("Missing 'authorization_endpoint' argument")
        if client_id is None and 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if client_id is None:
            raise TypeError("Missing 'client_id' argument")
        if client_secret is None and 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if client_secret is None:
            raise TypeError("Missing 'client_secret' argument")
        if issuer is None:
            raise TypeError("Missing 'issuer' argument")
        if token_endpoint is None and 'tokenEndpoint' in kwargs:
            token_endpoint = kwargs['tokenEndpoint']
        if token_endpoint is None:
            raise TypeError("Missing 'token_endpoint' argument")
        if user_info_endpoint is None and 'userInfoEndpoint' in kwargs:
            user_info_endpoint = kwargs['userInfoEndpoint']
        if user_info_endpoint is None:
            raise TypeError("Missing 'user_info_endpoint' argument")
        if authentication_request_extra_params is None and 'authenticationRequestExtraParams' in kwargs:
            authentication_request_extra_params = kwargs['authenticationRequestExtraParams']
        if on_unauthenticated_request is None and 'onUnauthenticatedRequest' in kwargs:
            on_unauthenticated_request = kwargs['onUnauthenticatedRequest']
        if session_cookie_name is None and 'sessionCookieName' in kwargs:
            session_cookie_name = kwargs['sessionCookieName']
        if session_timeout is None and 'sessionTimeout' in kwargs:
            session_timeout = kwargs['sessionTimeout']

        _setter("authorization_endpoint", authorization_endpoint)
        _setter("client_id", client_id)
        _setter("client_secret", client_secret)
        _setter("issuer", issuer)
        _setter("token_endpoint", token_endpoint)
        _setter("user_info_endpoint", user_info_endpoint)
        if authentication_request_extra_params is not None:
            _setter("authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            _setter("on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            _setter("scope", scope)
        if session_cookie_name is not None:
            _setter("session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            _setter("session_timeout", session_timeout)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> str:
        """
        The authorization endpoint of the IdP.
        """
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The OAuth 2.0 client identifier.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The OAuth 2.0 client secret.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        The OIDC issuer identifier of the IdP.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> str:
        """
        The token endpoint of the IdP.
        """
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> str:
        """
        The user info endpoint of the IdP.
        """
        return pulumi.get(self, "user_info_endpoint")

    @property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[Mapping[str, str]]:
        """
        The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[str]:
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The set of user claims to be requested from the IdP.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[str]:
        """
        The name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[int]:
        """
        The maximum duration of the authentication session, in seconds.
        """
        return pulumi.get(self, "session_timeout")


@pulumi.output_type
class ListenerRuleActionFixedResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "messageBody":
            suggest = "message_body"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerRuleActionFixedResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerRuleActionFixedResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerRuleActionFixedResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_type: str,
                 message_body: Optional[str] = None,
                 status_code: Optional[str] = None):
        """
        :param str content_type: The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
        :param str message_body: The message body.
        :param str status_code: The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        ListenerRuleActionFixedResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            message_body=message_body,
            status_code=status_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: Optional[str] = None,
             message_body: Optional[str] = None,
             status_code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_type is None and 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if content_type is None:
            raise TypeError("Missing 'content_type' argument")
        if message_body is None and 'messageBody' in kwargs:
            message_body = kwargs['messageBody']
        if status_code is None and 'statusCode' in kwargs:
            status_code = kwargs['statusCode']

        _setter("content_type", content_type)
        if message_body is not None:
            _setter("message_body", message_body)
        if status_code is not None:
            _setter("status_code", status_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[str]:
        """
        The message body.
        """
        return pulumi.get(self, "message_body")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[str]:
        """
        The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ListenerRuleActionForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroups":
            suggest = "target_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerRuleActionForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerRuleActionForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerRuleActionForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_groups: Sequence['outputs.ListenerRuleActionForwardTargetGroup'],
                 stickiness: Optional['outputs.ListenerRuleActionForwardStickiness'] = None):
        """
        :param Sequence['ListenerRuleActionForwardTargetGroupArgs'] target_groups: One or more target groups block.
        :param 'ListenerRuleActionForwardStickinessArgs' stickiness: The target group stickiness for the rule.
        """
        ListenerRuleActionForward._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_groups=target_groups,
            stickiness=stickiness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_groups: Optional[Sequence['outputs.ListenerRuleActionForwardTargetGroup']] = None,
             stickiness: Optional['outputs.ListenerRuleActionForwardStickiness'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if target_groups is None and 'targetGroups' in kwargs:
            target_groups = kwargs['targetGroups']
        if target_groups is None:
            raise TypeError("Missing 'target_groups' argument")

        _setter("target_groups", target_groups)
        if stickiness is not None:
            _setter("stickiness", stickiness)

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Sequence['outputs.ListenerRuleActionForwardTargetGroup']:
        """
        One or more target groups block.
        """
        return pulumi.get(self, "target_groups")

    @property
    @pulumi.getter
    def stickiness(self) -> Optional['outputs.ListenerRuleActionForwardStickiness']:
        """
        The target group stickiness for the rule.
        """
        return pulumi.get(self, "stickiness")


@pulumi.output_type
class ListenerRuleActionForwardStickiness(dict):
    def __init__(__self__, *,
                 duration: int,
                 enabled: Optional[bool] = None):
        """
        :param int duration: The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        :param bool enabled: Indicates whether target group stickiness is enabled.
        """
        ListenerRuleActionForwardStickiness._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: Optional[int] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if duration is None:
            raise TypeError("Missing 'duration' argument")

        _setter("duration", duration)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def duration(self) -> int:
        """
        The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Indicates whether target group stickiness is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ListenerRuleActionForwardTargetGroup(dict):
    def __init__(__self__, *,
                 arn: str,
                 weight: Optional[int] = None):
        """
        :param str arn: The Amazon Resource Name (ARN) of the target group.
        :param int weight: The weight. The range is 0 to 999.
        """
        ListenerRuleActionForwardTargetGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: Optional[str] = None,
             weight: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if arn is None:
            raise TypeError("Missing 'arn' argument")

        _setter("arn", arn)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the target group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        The weight. The range is 0 to 999.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ListenerRuleActionRedirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerRuleActionRedirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerRuleActionRedirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerRuleActionRedirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: str,
                 host: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None,
                 query: Optional[str] = None):
        """
        :param str status_code: The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
        :param str host: The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        :param str path: The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        :param str port: The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        :param str protocol: The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        :param str query: The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        ListenerRuleActionRedirect._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status_code=status_code,
            host=host,
            path=path,
            port=port,
            protocol=protocol,
            query=query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status_code: Optional[str] = None,
             host: Optional[str] = None,
             path: Optional[str] = None,
             port: Optional[str] = None,
             protocol: Optional[str] = None,
             query: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if status_code is None and 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if status_code is None:
            raise TypeError("Missing 'status_code' argument")

        _setter("status_code", status_code)
        if host is not None:
            _setter("host", host)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)
        if protocol is not None:
            _setter("protocol", protocol)
        if query is not None:
            _setter("query", query)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        """
        The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class ListenerRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostHeader":
            suggest = "host_header"
        elif key == "httpHeader":
            suggest = "http_header"
        elif key == "httpRequestMethod":
            suggest = "http_request_method"
        elif key == "pathPattern":
            suggest = "path_pattern"
        elif key == "queryStrings":
            suggest = "query_strings"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_header: Optional['outputs.ListenerRuleConditionHostHeader'] = None,
                 http_header: Optional['outputs.ListenerRuleConditionHttpHeader'] = None,
                 http_request_method: Optional['outputs.ListenerRuleConditionHttpRequestMethod'] = None,
                 path_pattern: Optional['outputs.ListenerRuleConditionPathPattern'] = None,
                 query_strings: Optional[Sequence['outputs.ListenerRuleConditionQueryString']] = None,
                 source_ip: Optional['outputs.ListenerRuleConditionSourceIp'] = None):
        """
        :param 'ListenerRuleConditionHostHeaderArgs' host_header: Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
        :param 'ListenerRuleConditionHttpHeaderArgs' http_header: HTTP headers to match. HTTP Header block fields documented below.
        :param 'ListenerRuleConditionHttpRequestMethodArgs' http_request_method: Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
        :param 'ListenerRuleConditionPathPatternArgs' path_pattern: Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
        :param Sequence['ListenerRuleConditionQueryStringArgs'] query_strings: Query strings to match. Query String block fields documented below.
        :param 'ListenerRuleConditionSourceIpArgs' source_ip: Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.
               
               > **NOTE::** Exactly one of `host_header`, `http_header`, `http_request_method`, `path_pattern`, `query_string` or `source_ip` must be set per condition.
        """
        ListenerRuleCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_header=host_header,
            http_header=http_header,
            http_request_method=http_request_method,
            path_pattern=path_pattern,
            query_strings=query_strings,
            source_ip=source_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_header: Optional['outputs.ListenerRuleConditionHostHeader'] = None,
             http_header: Optional['outputs.ListenerRuleConditionHttpHeader'] = None,
             http_request_method: Optional['outputs.ListenerRuleConditionHttpRequestMethod'] = None,
             path_pattern: Optional['outputs.ListenerRuleConditionPathPattern'] = None,
             query_strings: Optional[Sequence['outputs.ListenerRuleConditionQueryString']] = None,
             source_ip: Optional['outputs.ListenerRuleConditionSourceIp'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if host_header is None and 'hostHeader' in kwargs:
            host_header = kwargs['hostHeader']
        if http_header is None and 'httpHeader' in kwargs:
            http_header = kwargs['httpHeader']
        if http_request_method is None and 'httpRequestMethod' in kwargs:
            http_request_method = kwargs['httpRequestMethod']
        if path_pattern is None and 'pathPattern' in kwargs:
            path_pattern = kwargs['pathPattern']
        if query_strings is None and 'queryStrings' in kwargs:
            query_strings = kwargs['queryStrings']
        if source_ip is None and 'sourceIp' in kwargs:
            source_ip = kwargs['sourceIp']

        if host_header is not None:
            _setter("host_header", host_header)
        if http_header is not None:
            _setter("http_header", http_header)
        if http_request_method is not None:
            _setter("http_request_method", http_request_method)
        if path_pattern is not None:
            _setter("path_pattern", path_pattern)
        if query_strings is not None:
            _setter("query_strings", query_strings)
        if source_ip is not None:
            _setter("source_ip", source_ip)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional['outputs.ListenerRuleConditionHostHeader']:
        """
        Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="httpHeader")
    def http_header(self) -> Optional['outputs.ListenerRuleConditionHttpHeader']:
        """
        HTTP headers to match. HTTP Header block fields documented below.
        """
        return pulumi.get(self, "http_header")

    @property
    @pulumi.getter(name="httpRequestMethod")
    def http_request_method(self) -> Optional['outputs.ListenerRuleConditionHttpRequestMethod']:
        """
        Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
        """
        return pulumi.get(self, "http_request_method")

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> Optional['outputs.ListenerRuleConditionPathPattern']:
        """
        Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
        """
        return pulumi.get(self, "path_pattern")

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Optional[Sequence['outputs.ListenerRuleConditionQueryString']]:
        """
        Query strings to match. Query String block fields documented below.
        """
        return pulumi.get(self, "query_strings")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional['outputs.ListenerRuleConditionSourceIp']:
        """
        Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.

        > **NOTE::** Exactly one of `host_header`, `http_header`, `http_request_method`, `path_pattern`, `query_string` or `source_ip` must be set per condition.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class ListenerRuleConditionHostHeader(dict):
    def __init__(__self__, *,
                 values: Sequence[str]):
        """
        :param Sequence[str] values: List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        ListenerRuleConditionHostHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ListenerRuleConditionHttpHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaderName":
            suggest = "http_header_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerRuleConditionHttpHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerRuleConditionHttpHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerRuleConditionHttpHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_header_name: str,
                 values: Sequence[str]):
        """
        :param str http_header_name: Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
        :param Sequence[str] values: List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        ListenerRuleConditionHttpHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_header_name=http_header_name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_header_name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_header_name is None and 'httpHeaderName' in kwargs:
            http_header_name = kwargs['httpHeaderName']
        if http_header_name is None:
            raise TypeError("Missing 'http_header_name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("http_header_name", http_header_name)
        _setter("values", values)

    @property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> str:
        """
        Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
        """
        return pulumi.get(self, "http_header_name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ListenerRuleConditionHttpRequestMethod(dict):
    def __init__(__self__, *,
                 values: Sequence[str]):
        """
        :param Sequence[str] values: List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        ListenerRuleConditionHttpRequestMethod._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ListenerRuleConditionPathPattern(dict):
    def __init__(__self__, *,
                 values: Sequence[str]):
        """
        :param Sequence[str] values: List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        ListenerRuleConditionPathPattern._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ListenerRuleConditionQueryString(dict):
    def __init__(__self__, *,
                 value: str,
                 key: Optional[str] = None):
        """
        :param str value: Query string value pattern to match.
        :param str key: Query string key pattern to match.
        """
        ListenerRuleConditionQueryString._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
            key=key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             key: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("value", value)
        if key is not None:
            _setter("key", key)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Query string value pattern to match.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Query string key pattern to match.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ListenerRuleConditionSourceIp(dict):
    def __init__(__self__, *,
                 values: Sequence[str]):
        """
        :param Sequence[str] values: List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        ListenerRuleConditionSourceIp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class LoadBalancerAccessLogs(dict):
    def __init__(__self__, *,
                 bucket: str,
                 enabled: Optional[bool] = None,
                 prefix: Optional[str] = None):
        """
        :param str bucket: The S3 bucket name to store the logs in.
        :param bool enabled: Boolean to enable / disable `access_logs`. Defaults to `false`, even when `bucket` is specified.
        :param str prefix: The S3 bucket prefix. Logs are stored in the root if not configured.
        """
        LoadBalancerAccessLogs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            enabled=enabled,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             enabled: Optional[bool] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")

        _setter("bucket", bucket)
        if enabled is not None:
            _setter("enabled", enabled)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The S3 bucket name to store the logs in.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean to enable / disable `access_logs`. Defaults to `false`, even when `bucket` is specified.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The S3 bucket prefix. Logs are stored in the root if not configured.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class LoadBalancerSubnetMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "allocationId":
            suggest = "allocation_id"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "outpostId":
            suggest = "outpost_id"
        elif key == "privateIpv4Address":
            suggest = "private_ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerSubnetMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerSubnetMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerSubnetMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 allocation_id: Optional[str] = None,
                 ipv6_address: Optional[str] = None,
                 outpost_id: Optional[str] = None,
                 private_ipv4_address: Optional[str] = None):
        """
        :param str subnet_id: ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
        :param str allocation_id: The allocation ID of the Elastic IP address for an internet-facing load balancer.
        :param str ipv6_address: The IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
        :param str private_ipv4_address: The private IPv4 address for an internal load balancer.
        """
        LoadBalancerSubnetMapping._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subnet_id=subnet_id,
            allocation_id=allocation_id,
            ipv6_address=ipv6_address,
            outpost_id=outpost_id,
            private_ipv4_address=private_ipv4_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subnet_id: Optional[str] = None,
             allocation_id: Optional[str] = None,
             ipv6_address: Optional[str] = None,
             outpost_id: Optional[str] = None,
             private_ipv4_address: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")
        if allocation_id is None and 'allocationId' in kwargs:
            allocation_id = kwargs['allocationId']
        if ipv6_address is None and 'ipv6Address' in kwargs:
            ipv6_address = kwargs['ipv6Address']
        if outpost_id is None and 'outpostId' in kwargs:
            outpost_id = kwargs['outpostId']
        if private_ipv4_address is None and 'privateIpv4Address' in kwargs:
            private_ipv4_address = kwargs['privateIpv4Address']

        _setter("subnet_id", subnet_id)
        if allocation_id is not None:
            _setter("allocation_id", allocation_id)
        if ipv6_address is not None:
            _setter("ipv6_address", ipv6_address)
        if outpost_id is not None:
            _setter("outpost_id", outpost_id)
        if private_ipv4_address is not None:
            _setter("private_ipv4_address", private_ipv4_address)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> Optional[str]:
        """
        The allocation ID of the Elastic IP address for an internet-facing load balancer.
        """
        return pulumi.get(self, "allocation_id")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        The IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="outpostId")
    def outpost_id(self) -> Optional[str]:
        return pulumi.get(self, "outpost_id")

    @property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> Optional[str]:
        """
        The private IPv4 address for an internal load balancer.
        """
        return pulumi.get(self, "private_ipv4_address")


@pulumi.output_type
class TargetGroupHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetGroupHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetGroupHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetGroupHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 healthy_threshold: Optional[int] = None,
                 interval: Optional[int] = None,
                 matcher: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None,
                 timeout: Optional[int] = None,
                 unhealthy_threshold: Optional[int] = None):
        """
        :param bool enabled: Whether health checks are enabled. Defaults to `true`.
        :param int healthy_threshold: Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
        :param int interval: Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
        :param str matcher: Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s) or "0,12" for GRPC) or a range of values (for example, "200-299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
        :param str path: Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
        :param str port: The port the load balancer uses when performing health checks on targets. Default is traffic-port.
        :param str protocol: Protocol the load balancer uses when performing health checks on targets. Must be either `TCP`, `HTTP`, or `HTTPS`. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. Defaults to HTTP.
        :param int timeout: Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
        :param int unhealthy_threshold: Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
        """
        TargetGroupHealthCheck._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            healthy_threshold=healthy_threshold,
            interval=interval,
            matcher=matcher,
            path=path,
            port=port,
            protocol=protocol,
            timeout=timeout,
            unhealthy_threshold=unhealthy_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             healthy_threshold: Optional[int] = None,
             interval: Optional[int] = None,
             matcher: Optional[str] = None,
             path: Optional[str] = None,
             port: Optional[str] = None,
             protocol: Optional[str] = None,
             timeout: Optional[int] = None,
             unhealthy_threshold: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if healthy_threshold is None and 'healthyThreshold' in kwargs:
            healthy_threshold = kwargs['healthyThreshold']
        if unhealthy_threshold is None and 'unhealthyThreshold' in kwargs:
            unhealthy_threshold = kwargs['unhealthyThreshold']

        if enabled is not None:
            _setter("enabled", enabled)
        if healthy_threshold is not None:
            _setter("healthy_threshold", healthy_threshold)
        if interval is not None:
            _setter("interval", interval)
        if matcher is not None:
            _setter("matcher", matcher)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)
        if protocol is not None:
            _setter("protocol", protocol)
        if timeout is not None:
            _setter("timeout", timeout)
        if unhealthy_threshold is not None:
            _setter("unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether health checks are enabled. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
        """
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def matcher(self) -> Optional[str]:
        """
        Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s) or "0,12" for GRPC) or a range of values (for example, "200-299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
        """
        return pulumi.get(self, "matcher")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port the load balancer uses when performing health checks on targets. Default is traffic-port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol the load balancer uses when performing health checks on targets. Must be either `TCP`, `HTTP`, or `HTTPS`. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. Defaults to HTTP.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class TargetGroupStickiness(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieDuration":
            suggest = "cookie_duration"
        elif key == "cookieName":
            suggest = "cookie_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetGroupStickiness. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetGroupStickiness.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetGroupStickiness.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cookie_duration: Optional[int] = None,
                 cookie_name: Optional[str] = None,
                 enabled: Optional[bool] = None):
        """
        :param str type: The type of sticky sessions. The only current possible values are `lb_cookie`, `app_cookie` for ALBs, `source_ip` for NLBs, and `source_ip_dest_ip`, `source_ip_dest_ip_proto` for GWLBs.
        :param int cookie_duration: Only used when the type is `lb_cookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        :param str cookie_name: Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `app_cookie`.
        :param bool enabled: Boolean to enable / disable `stickiness`. Default is `true`.
        """
        TargetGroupStickiness._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            cookie_duration=cookie_duration,
            cookie_name=cookie_name,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             cookie_duration: Optional[int] = None,
             cookie_name: Optional[str] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if cookie_duration is None and 'cookieDuration' in kwargs:
            cookie_duration = kwargs['cookieDuration']
        if cookie_name is None and 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']

        _setter("type", type)
        if cookie_duration is not None:
            _setter("cookie_duration", cookie_duration)
        if cookie_name is not None:
            _setter("cookie_name", cookie_name)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of sticky sessions. The only current possible values are `lb_cookie`, `app_cookie` for ALBs, `source_ip` for NLBs, and `source_ip_dest_ip`, `source_ip_dest_ip_proto` for GWLBs.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cookieDuration")
    def cookie_duration(self) -> Optional[int]:
        """
        Only used when the type is `lb_cookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        """
        return pulumi.get(self, "cookie_duration")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        """
        Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `app_cookie`.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean to enable / disable `stickiness`. Default is `true`.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class TargetGroupTargetFailover(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "onDeregistration":
            suggest = "on_deregistration"
        elif key == "onUnhealthy":
            suggest = "on_unhealthy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetGroupTargetFailover. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetGroupTargetFailover.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetGroupTargetFailover.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 on_deregistration: str,
                 on_unhealthy: str):
        """
        :param str on_deregistration: Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_unhealthy`. Default: `no_rebalance`.
        :param str on_unhealthy: Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_deregistration`. Default: `no_rebalance`.
        """
        TargetGroupTargetFailover._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            on_deregistration=on_deregistration,
            on_unhealthy=on_unhealthy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             on_deregistration: Optional[str] = None,
             on_unhealthy: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if on_deregistration is None and 'onDeregistration' in kwargs:
            on_deregistration = kwargs['onDeregistration']
        if on_deregistration is None:
            raise TypeError("Missing 'on_deregistration' argument")
        if on_unhealthy is None and 'onUnhealthy' in kwargs:
            on_unhealthy = kwargs['onUnhealthy']
        if on_unhealthy is None:
            raise TypeError("Missing 'on_unhealthy' argument")

        _setter("on_deregistration", on_deregistration)
        _setter("on_unhealthy", on_unhealthy)

    @property
    @pulumi.getter(name="onDeregistration")
    def on_deregistration(self) -> str:
        """
        Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_unhealthy`. Default: `no_rebalance`.
        """
        return pulumi.get(self, "on_deregistration")

    @property
    @pulumi.getter(name="onUnhealthy")
    def on_unhealthy(self) -> str:
        """
        Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_deregistration`. Default: `no_rebalance`.
        """
        return pulumi.get(self, "on_unhealthy")


@pulumi.output_type
class GetListenerDefaultActionResult(dict):
    def __init__(__self__, *,
                 authenticate_cognitos: Sequence['outputs.GetListenerDefaultActionAuthenticateCognitoResult'],
                 authenticate_oidcs: Sequence['outputs.GetListenerDefaultActionAuthenticateOidcResult'],
                 fixed_responses: Sequence['outputs.GetListenerDefaultActionFixedResponseResult'],
                 forwards: Sequence['outputs.GetListenerDefaultActionForwardResult'],
                 order: int,
                 redirects: Sequence['outputs.GetListenerDefaultActionRedirectResult'],
                 target_group_arn: str,
                 type: str):
        GetListenerDefaultActionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authenticate_cognitos=authenticate_cognitos,
            authenticate_oidcs=authenticate_oidcs,
            fixed_responses=fixed_responses,
            forwards=forwards,
            order=order,
            redirects=redirects,
            target_group_arn=target_group_arn,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authenticate_cognitos: Optional[Sequence['outputs.GetListenerDefaultActionAuthenticateCognitoResult']] = None,
             authenticate_oidcs: Optional[Sequence['outputs.GetListenerDefaultActionAuthenticateOidcResult']] = None,
             fixed_responses: Optional[Sequence['outputs.GetListenerDefaultActionFixedResponseResult']] = None,
             forwards: Optional[Sequence['outputs.GetListenerDefaultActionForwardResult']] = None,
             order: Optional[int] = None,
             redirects: Optional[Sequence['outputs.GetListenerDefaultActionRedirectResult']] = None,
             target_group_arn: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if authenticate_cognitos is None and 'authenticateCognitos' in kwargs:
            authenticate_cognitos = kwargs['authenticateCognitos']
        if authenticate_cognitos is None:
            raise TypeError("Missing 'authenticate_cognitos' argument")
        if authenticate_oidcs is None and 'authenticateOidcs' in kwargs:
            authenticate_oidcs = kwargs['authenticateOidcs']
        if authenticate_oidcs is None:
            raise TypeError("Missing 'authenticate_oidcs' argument")
        if fixed_responses is None and 'fixedResponses' in kwargs:
            fixed_responses = kwargs['fixedResponses']
        if fixed_responses is None:
            raise TypeError("Missing 'fixed_responses' argument")
        if forwards is None:
            raise TypeError("Missing 'forwards' argument")
        if order is None:
            raise TypeError("Missing 'order' argument")
        if redirects is None:
            raise TypeError("Missing 'redirects' argument")
        if target_group_arn is None and 'targetGroupArn' in kwargs:
            target_group_arn = kwargs['targetGroupArn']
        if target_group_arn is None:
            raise TypeError("Missing 'target_group_arn' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("authenticate_cognitos", authenticate_cognitos)
        _setter("authenticate_oidcs", authenticate_oidcs)
        _setter("fixed_responses", fixed_responses)
        _setter("forwards", forwards)
        _setter("order", order)
        _setter("redirects", redirects)
        _setter("target_group_arn", target_group_arn)
        _setter("type", type)

    @property
    @pulumi.getter(name="authenticateCognitos")
    def authenticate_cognitos(self) -> Sequence['outputs.GetListenerDefaultActionAuthenticateCognitoResult']:
        return pulumi.get(self, "authenticate_cognitos")

    @property
    @pulumi.getter(name="authenticateOidcs")
    def authenticate_oidcs(self) -> Sequence['outputs.GetListenerDefaultActionAuthenticateOidcResult']:
        return pulumi.get(self, "authenticate_oidcs")

    @property
    @pulumi.getter(name="fixedResponses")
    def fixed_responses(self) -> Sequence['outputs.GetListenerDefaultActionFixedResponseResult']:
        return pulumi.get(self, "fixed_responses")

    @property
    @pulumi.getter
    def forwards(self) -> Sequence['outputs.GetListenerDefaultActionForwardResult']:
        return pulumi.get(self, "forwards")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def redirects(self) -> Sequence['outputs.GetListenerDefaultActionRedirectResult']:
        return pulumi.get(self, "redirects")

    @property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> str:
        return pulumi.get(self, "target_group_arn")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetListenerDefaultActionAuthenticateCognitoResult(dict):
    def __init__(__self__, *,
                 authentication_request_extra_params: Mapping[str, str],
                 on_unauthenticated_request: str,
                 scope: str,
                 session_cookie_name: str,
                 session_timeout: int,
                 user_pool_arn: str,
                 user_pool_client_id: str,
                 user_pool_domain: str):
        GetListenerDefaultActionAuthenticateCognitoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentication_request_extra_params=authentication_request_extra_params,
            on_unauthenticated_request=on_unauthenticated_request,
            scope=scope,
            session_cookie_name=session_cookie_name,
            session_timeout=session_timeout,
            user_pool_arn=user_pool_arn,
            user_pool_client_id=user_pool_client_id,
            user_pool_domain=user_pool_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentication_request_extra_params: Optional[Mapping[str, str]] = None,
             on_unauthenticated_request: Optional[str] = None,
             scope: Optional[str] = None,
             session_cookie_name: Optional[str] = None,
             session_timeout: Optional[int] = None,
             user_pool_arn: Optional[str] = None,
             user_pool_client_id: Optional[str] = None,
             user_pool_domain: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if authentication_request_extra_params is None and 'authenticationRequestExtraParams' in kwargs:
            authentication_request_extra_params = kwargs['authenticationRequestExtraParams']
        if authentication_request_extra_params is None:
            raise TypeError("Missing 'authentication_request_extra_params' argument")
        if on_unauthenticated_request is None and 'onUnauthenticatedRequest' in kwargs:
            on_unauthenticated_request = kwargs['onUnauthenticatedRequest']
        if on_unauthenticated_request is None:
            raise TypeError("Missing 'on_unauthenticated_request' argument")
        if scope is None:
            raise TypeError("Missing 'scope' argument")
        if session_cookie_name is None and 'sessionCookieName' in kwargs:
            session_cookie_name = kwargs['sessionCookieName']
        if session_cookie_name is None:
            raise TypeError("Missing 'session_cookie_name' argument")
        if session_timeout is None and 'sessionTimeout' in kwargs:
            session_timeout = kwargs['sessionTimeout']
        if session_timeout is None:
            raise TypeError("Missing 'session_timeout' argument")
        if user_pool_arn is None and 'userPoolArn' in kwargs:
            user_pool_arn = kwargs['userPoolArn']
        if user_pool_arn is None:
            raise TypeError("Missing 'user_pool_arn' argument")
        if user_pool_client_id is None and 'userPoolClientId' in kwargs:
            user_pool_client_id = kwargs['userPoolClientId']
        if user_pool_client_id is None:
            raise TypeError("Missing 'user_pool_client_id' argument")
        if user_pool_domain is None and 'userPoolDomain' in kwargs:
            user_pool_domain = kwargs['userPoolDomain']
        if user_pool_domain is None:
            raise TypeError("Missing 'user_pool_domain' argument")

        _setter("authentication_request_extra_params", authentication_request_extra_params)
        _setter("on_unauthenticated_request", on_unauthenticated_request)
        _setter("scope", scope)
        _setter("session_cookie_name", session_cookie_name)
        _setter("session_timeout", session_timeout)
        _setter("user_pool_arn", user_pool_arn)
        _setter("user_pool_client_id", user_pool_client_id)
        _setter("user_pool_domain", user_pool_domain)

    @property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Mapping[str, str]:
        return pulumi.get(self, "authentication_request_extra_params")

    @property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> str:
        return pulumi.get(self, "on_unauthenticated_request")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> str:
        return pulumi.get(self, "session_cookie_name")

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> int:
        return pulumi.get(self, "session_timeout")

    @property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> str:
        return pulumi.get(self, "user_pool_arn")

    @property
    @pulumi.getter(name="userPoolClientId")
    def user_pool_client_id(self) -> str:
        return pulumi.get(self, "user_pool_client_id")

    @property
    @pulumi.getter(name="userPoolDomain")
    def user_pool_domain(self) -> str:
        return pulumi.get(self, "user_pool_domain")


@pulumi.output_type
class GetListenerDefaultActionAuthenticateOidcResult(dict):
    def __init__(__self__, *,
                 authentication_request_extra_params: Mapping[str, str],
                 authorization_endpoint: str,
                 client_id: str,
                 client_secret: str,
                 issuer: str,
                 on_unauthenticated_request: str,
                 scope: str,
                 session_cookie_name: str,
                 session_timeout: int,
                 token_endpoint: str,
                 user_info_endpoint: str):
        GetListenerDefaultActionAuthenticateOidcResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentication_request_extra_params=authentication_request_extra_params,
            authorization_endpoint=authorization_endpoint,
            client_id=client_id,
            client_secret=client_secret,
            issuer=issuer,
            on_unauthenticated_request=on_unauthenticated_request,
            scope=scope,
            session_cookie_name=session_cookie_name,
            session_timeout=session_timeout,
            token_endpoint=token_endpoint,
            user_info_endpoint=user_info_endpoint,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentication_request_extra_params: Optional[Mapping[str, str]] = None,
             authorization_endpoint: Optional[str] = None,
             client_id: Optional[str] = None,
             client_secret: Optional[str] = None,
             issuer: Optional[str] = None,
             on_unauthenticated_request: Optional[str] = None,
             scope: Optional[str] = None,
             session_cookie_name: Optional[str] = None,
             session_timeout: Optional[int] = None,
             token_endpoint: Optional[str] = None,
             user_info_endpoint: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if authentication_request_extra_params is None and 'authenticationRequestExtraParams' in kwargs:
            authentication_request_extra_params = kwargs['authenticationRequestExtraParams']
        if authentication_request_extra_params is None:
            raise TypeError("Missing 'authentication_request_extra_params' argument")
        if authorization_endpoint is None and 'authorizationEndpoint' in kwargs:
            authorization_endpoint = kwargs['authorizationEndpoint']
        if authorization_endpoint is None:
            raise TypeError("Missing 'authorization_endpoint' argument")
        if client_id is None and 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if client_id is None:
            raise TypeError("Missing 'client_id' argument")
        if client_secret is None and 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if client_secret is None:
            raise TypeError("Missing 'client_secret' argument")
        if issuer is None:
            raise TypeError("Missing 'issuer' argument")
        if on_unauthenticated_request is None and 'onUnauthenticatedRequest' in kwargs:
            on_unauthenticated_request = kwargs['onUnauthenticatedRequest']
        if on_unauthenticated_request is None:
            raise TypeError("Missing 'on_unauthenticated_request' argument")
        if scope is None:
            raise TypeError("Missing 'scope' argument")
        if session_cookie_name is None and 'sessionCookieName' in kwargs:
            session_cookie_name = kwargs['sessionCookieName']
        if session_cookie_name is None:
            raise TypeError("Missing 'session_cookie_name' argument")
        if session_timeout is None and 'sessionTimeout' in kwargs:
            session_timeout = kwargs['sessionTimeout']
        if session_timeout is None:
            raise TypeError("Missing 'session_timeout' argument")
        if token_endpoint is None and 'tokenEndpoint' in kwargs:
            token_endpoint = kwargs['tokenEndpoint']
        if token_endpoint is None:
            raise TypeError("Missing 'token_endpoint' argument")
        if user_info_endpoint is None and 'userInfoEndpoint' in kwargs:
            user_info_endpoint = kwargs['userInfoEndpoint']
        if user_info_endpoint is None:
            raise TypeError("Missing 'user_info_endpoint' argument")

        _setter("authentication_request_extra_params", authentication_request_extra_params)
        _setter("authorization_endpoint", authorization_endpoint)
        _setter("client_id", client_id)
        _setter("client_secret", client_secret)
        _setter("issuer", issuer)
        _setter("on_unauthenticated_request", on_unauthenticated_request)
        _setter("scope", scope)
        _setter("session_cookie_name", session_cookie_name)
        _setter("session_timeout", session_timeout)
        _setter("token_endpoint", token_endpoint)
        _setter("user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Mapping[str, str]:
        return pulumi.get(self, "authentication_request_extra_params")

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> str:
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> str:
        return pulumi.get(self, "on_unauthenticated_request")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> str:
        return pulumi.get(self, "session_cookie_name")

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> int:
        return pulumi.get(self, "session_timeout")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> str:
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> str:
        return pulumi.get(self, "user_info_endpoint")


@pulumi.output_type
class GetListenerDefaultActionFixedResponseResult(dict):
    def __init__(__self__, *,
                 content_type: str,
                 message_body: str,
                 status_code: str):
        GetListenerDefaultActionFixedResponseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            message_body=message_body,
            status_code=status_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: Optional[str] = None,
             message_body: Optional[str] = None,
             status_code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_type is None and 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if content_type is None:
            raise TypeError("Missing 'content_type' argument")
        if message_body is None and 'messageBody' in kwargs:
            message_body = kwargs['messageBody']
        if message_body is None:
            raise TypeError("Missing 'message_body' argument")
        if status_code is None and 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if status_code is None:
            raise TypeError("Missing 'status_code' argument")

        _setter("content_type", content_type)
        _setter("message_body", message_body)
        _setter("status_code", status_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> str:
        return pulumi.get(self, "message_body")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetListenerDefaultActionForwardResult(dict):
    def __init__(__self__, *,
                 stickinesses: Sequence['outputs.GetListenerDefaultActionForwardStickinessResult'],
                 target_groups: Sequence['outputs.GetListenerDefaultActionForwardTargetGroupResult']):
        GetListenerDefaultActionForwardResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stickinesses=stickinesses,
            target_groups=target_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stickinesses: Optional[Sequence['outputs.GetListenerDefaultActionForwardStickinessResult']] = None,
             target_groups: Optional[Sequence['outputs.GetListenerDefaultActionForwardTargetGroupResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if stickinesses is None:
            raise TypeError("Missing 'stickinesses' argument")
        if target_groups is None and 'targetGroups' in kwargs:
            target_groups = kwargs['targetGroups']
        if target_groups is None:
            raise TypeError("Missing 'target_groups' argument")

        _setter("stickinesses", stickinesses)
        _setter("target_groups", target_groups)

    @property
    @pulumi.getter
    def stickinesses(self) -> Sequence['outputs.GetListenerDefaultActionForwardStickinessResult']:
        return pulumi.get(self, "stickinesses")

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Sequence['outputs.GetListenerDefaultActionForwardTargetGroupResult']:
        return pulumi.get(self, "target_groups")


@pulumi.output_type
class GetListenerDefaultActionForwardStickinessResult(dict):
    def __init__(__self__, *,
                 duration: int,
                 enabled: bool):
        GetListenerDefaultActionForwardStickinessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: Optional[int] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if duration is None:
            raise TypeError("Missing 'duration' argument")
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")

        _setter("duration", duration)
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetListenerDefaultActionForwardTargetGroupResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 weight: int):
        """
        :param str arn: ARN of the listener. Required if `load_balancer_arn` and `port` is not set.
        """
        GetListenerDefaultActionForwardTargetGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: Optional[str] = None,
             weight: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if arn is None:
            raise TypeError("Missing 'arn' argument")
        if weight is None:
            raise TypeError("Missing 'weight' argument")

        _setter("arn", arn)
        _setter("weight", weight)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the listener. Required if `load_balancer_arn` and `port` is not set.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetListenerDefaultActionRedirectResult(dict):
    def __init__(__self__, *,
                 host: str,
                 path: str,
                 port: str,
                 protocol: str,
                 query: str,
                 status_code: str):
        """
        :param str port: Port of the listener. Required if `arn` is not set.
        """
        GetListenerDefaultActionRedirectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host=host,
            path=path,
            port=port,
            protocol=protocol,
            query=query,
            status_code=status_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host: Optional[str] = None,
             path: Optional[str] = None,
             port: Optional[str] = None,
             protocol: Optional[str] = None,
             query: Optional[str] = None,
             status_code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if host is None:
            raise TypeError("Missing 'host' argument")
        if path is None:
            raise TypeError("Missing 'path' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")
        if protocol is None:
            raise TypeError("Missing 'protocol' argument")
        if query is None:
            raise TypeError("Missing 'query' argument")
        if status_code is None and 'statusCode' in kwargs:
            status_code = kwargs['statusCode']
        if status_code is None:
            raise TypeError("Missing 'status_code' argument")

        _setter("host", host)
        _setter("path", path)
        _setter("port", port)
        _setter("protocol", protocol)
        _setter("query", query)
        _setter("status_code", status_code)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Port of the listener. Required if `arn` is not set.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetLoadBalancerAccessLogsResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 enabled: bool,
                 prefix: str):
        GetLoadBalancerAccessLogsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            enabled=enabled,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             enabled: Optional[bool] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if prefix is None:
            raise TypeError("Missing 'prefix' argument")

        _setter("bucket", bucket)
        _setter("enabled", enabled)
        _setter("prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetLoadBalancerSubnetMappingResult(dict):
    def __init__(__self__, *,
                 allocation_id: str,
                 ipv6_address: str,
                 outpost_id: str,
                 private_ipv4_address: str,
                 subnet_id: str):
        GetLoadBalancerSubnetMappingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocation_id=allocation_id,
            ipv6_address=ipv6_address,
            outpost_id=outpost_id,
            private_ipv4_address=private_ipv4_address,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocation_id: Optional[str] = None,
             ipv6_address: Optional[str] = None,
             outpost_id: Optional[str] = None,
             private_ipv4_address: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if allocation_id is None and 'allocationId' in kwargs:
            allocation_id = kwargs['allocationId']
        if allocation_id is None:
            raise TypeError("Missing 'allocation_id' argument")
        if ipv6_address is None and 'ipv6Address' in kwargs:
            ipv6_address = kwargs['ipv6Address']
        if ipv6_address is None:
            raise TypeError("Missing 'ipv6_address' argument")
        if outpost_id is None and 'outpostId' in kwargs:
            outpost_id = kwargs['outpostId']
        if outpost_id is None:
            raise TypeError("Missing 'outpost_id' argument")
        if private_ipv4_address is None and 'privateIpv4Address' in kwargs:
            private_ipv4_address = kwargs['privateIpv4Address']
        if private_ipv4_address is None:
            raise TypeError("Missing 'private_ipv4_address' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("allocation_id", allocation_id)
        _setter("ipv6_address", ipv6_address)
        _setter("outpost_id", outpost_id)
        _setter("private_ipv4_address", private_ipv4_address)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> str:
        return pulumi.get(self, "allocation_id")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="outpostId")
    def outpost_id(self) -> str:
        return pulumi.get(self, "outpost_id")

    @property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> str:
        return pulumi.get(self, "private_ipv4_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetTargetGroupHealthCheckResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 healthy_threshold: int,
                 interval: int,
                 matcher: str,
                 path: str,
                 port: str,
                 protocol: str,
                 timeout: int,
                 unhealthy_threshold: int):
        GetTargetGroupHealthCheckResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            healthy_threshold=healthy_threshold,
            interval=interval,
            matcher=matcher,
            path=path,
            port=port,
            protocol=protocol,
            timeout=timeout,
            unhealthy_threshold=unhealthy_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             healthy_threshold: Optional[int] = None,
             interval: Optional[int] = None,
             matcher: Optional[str] = None,
             path: Optional[str] = None,
             port: Optional[str] = None,
             protocol: Optional[str] = None,
             timeout: Optional[int] = None,
             unhealthy_threshold: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if healthy_threshold is None and 'healthyThreshold' in kwargs:
            healthy_threshold = kwargs['healthyThreshold']
        if healthy_threshold is None:
            raise TypeError("Missing 'healthy_threshold' argument")
        if interval is None:
            raise TypeError("Missing 'interval' argument")
        if matcher is None:
            raise TypeError("Missing 'matcher' argument")
        if path is None:
            raise TypeError("Missing 'path' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")
        if protocol is None:
            raise TypeError("Missing 'protocol' argument")
        if timeout is None:
            raise TypeError("Missing 'timeout' argument")
        if unhealthy_threshold is None and 'unhealthyThreshold' in kwargs:
            unhealthy_threshold = kwargs['unhealthyThreshold']
        if unhealthy_threshold is None:
            raise TypeError("Missing 'unhealthy_threshold' argument")

        _setter("enabled", enabled)
        _setter("healthy_threshold", healthy_threshold)
        _setter("interval", interval)
        _setter("matcher", matcher)
        _setter("path", path)
        _setter("port", port)
        _setter("protocol", protocol)
        _setter("timeout", timeout)
        _setter("unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> int:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def matcher(self) -> str:
        return pulumi.get(self, "matcher")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> int:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetTargetGroupStickinessResult(dict):
    def __init__(__self__, *,
                 cookie_duration: int,
                 cookie_name: str,
                 enabled: bool,
                 type: str):
        GetTargetGroupStickinessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_duration=cookie_duration,
            cookie_name=cookie_name,
            enabled=enabled,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_duration: Optional[int] = None,
             cookie_name: Optional[str] = None,
             enabled: Optional[bool] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookie_duration is None and 'cookieDuration' in kwargs:
            cookie_duration = kwargs['cookieDuration']
        if cookie_duration is None:
            raise TypeError("Missing 'cookie_duration' argument")
        if cookie_name is None and 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if cookie_name is None:
            raise TypeError("Missing 'cookie_name' argument")
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("cookie_duration", cookie_duration)
        _setter("cookie_name", cookie_name)
        _setter("enabled", enabled)
        _setter("type", type)

    @property
    @pulumi.getter(name="cookieDuration")
    def cookie_duration(self) -> int:
        return pulumi.get(self, "cookie_duration")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> str:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


