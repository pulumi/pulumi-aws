# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ListenerDefaultActionArgs',
    'ListenerDefaultActionArgsDict',
    'ListenerDefaultActionAuthenticateCognitoArgs',
    'ListenerDefaultActionAuthenticateCognitoArgsDict',
    'ListenerDefaultActionAuthenticateOidcArgs',
    'ListenerDefaultActionAuthenticateOidcArgsDict',
    'ListenerDefaultActionFixedResponseArgs',
    'ListenerDefaultActionFixedResponseArgsDict',
    'ListenerDefaultActionForwardArgs',
    'ListenerDefaultActionForwardArgsDict',
    'ListenerDefaultActionForwardStickinessArgs',
    'ListenerDefaultActionForwardStickinessArgsDict',
    'ListenerDefaultActionForwardTargetGroupArgs',
    'ListenerDefaultActionForwardTargetGroupArgsDict',
    'ListenerDefaultActionRedirectArgs',
    'ListenerDefaultActionRedirectArgsDict',
    'ListenerMutualAuthenticationArgs',
    'ListenerMutualAuthenticationArgsDict',
    'ListenerRuleActionArgs',
    'ListenerRuleActionArgsDict',
    'ListenerRuleActionAuthenticateCognitoArgs',
    'ListenerRuleActionAuthenticateCognitoArgsDict',
    'ListenerRuleActionAuthenticateOidcArgs',
    'ListenerRuleActionAuthenticateOidcArgsDict',
    'ListenerRuleActionFixedResponseArgs',
    'ListenerRuleActionFixedResponseArgsDict',
    'ListenerRuleActionForwardArgs',
    'ListenerRuleActionForwardArgsDict',
    'ListenerRuleActionForwardStickinessArgs',
    'ListenerRuleActionForwardStickinessArgsDict',
    'ListenerRuleActionForwardTargetGroupArgs',
    'ListenerRuleActionForwardTargetGroupArgsDict',
    'ListenerRuleActionRedirectArgs',
    'ListenerRuleActionRedirectArgsDict',
    'ListenerRuleConditionArgs',
    'ListenerRuleConditionArgsDict',
    'ListenerRuleConditionHostHeaderArgs',
    'ListenerRuleConditionHostHeaderArgsDict',
    'ListenerRuleConditionHttpHeaderArgs',
    'ListenerRuleConditionHttpHeaderArgsDict',
    'ListenerRuleConditionHttpRequestMethodArgs',
    'ListenerRuleConditionHttpRequestMethodArgsDict',
    'ListenerRuleConditionPathPatternArgs',
    'ListenerRuleConditionPathPatternArgsDict',
    'ListenerRuleConditionQueryStringArgs',
    'ListenerRuleConditionQueryStringArgsDict',
    'ListenerRuleConditionSourceIpArgs',
    'ListenerRuleConditionSourceIpArgsDict',
    'LoadBalancerAccessLogsArgs',
    'LoadBalancerAccessLogsArgsDict',
    'LoadBalancerConnectionLogsArgs',
    'LoadBalancerConnectionLogsArgsDict',
    'LoadBalancerIpamPoolsArgs',
    'LoadBalancerIpamPoolsArgsDict',
    'LoadBalancerMinimumLoadBalancerCapacityArgs',
    'LoadBalancerMinimumLoadBalancerCapacityArgsDict',
    'LoadBalancerSubnetMappingArgs',
    'LoadBalancerSubnetMappingArgsDict',
    'TargetGroupHealthCheckArgs',
    'TargetGroupHealthCheckArgsDict',
    'TargetGroupStickinessArgs',
    'TargetGroupStickinessArgsDict',
    'TargetGroupTargetFailoverArgs',
    'TargetGroupTargetFailoverArgsDict',
    'TargetGroupTargetGroupHealthArgs',
    'TargetGroupTargetGroupHealthArgsDict',
    'TargetGroupTargetGroupHealthDnsFailoverArgs',
    'TargetGroupTargetGroupHealthDnsFailoverArgsDict',
    'TargetGroupTargetGroupHealthUnhealthyStateRoutingArgs',
    'TargetGroupTargetGroupHealthUnhealthyStateRoutingArgsDict',
    'TargetGroupTargetHealthStateArgs',
    'TargetGroupTargetHealthStateArgsDict',
    'GetListenerRuleActionArgs',
    'GetListenerRuleActionArgsDict',
    'GetListenerRuleActionAuthenticateCognitoArgs',
    'GetListenerRuleActionAuthenticateCognitoArgsDict',
    'GetListenerRuleActionAuthenticateOidcArgs',
    'GetListenerRuleActionAuthenticateOidcArgsDict',
    'GetListenerRuleActionFixedResponseArgs',
    'GetListenerRuleActionFixedResponseArgsDict',
    'GetListenerRuleActionForwardArgs',
    'GetListenerRuleActionForwardArgsDict',
    'GetListenerRuleActionForwardStickinessArgs',
    'GetListenerRuleActionForwardStickinessArgsDict',
    'GetListenerRuleActionForwardTargetGroupArgs',
    'GetListenerRuleActionForwardTargetGroupArgsDict',
    'GetListenerRuleActionRedirectArgs',
    'GetListenerRuleActionRedirectArgsDict',
    'GetListenerRuleConditionArgs',
    'GetListenerRuleConditionArgsDict',
    'GetListenerRuleConditionHostHeaderArgs',
    'GetListenerRuleConditionHostHeaderArgsDict',
    'GetListenerRuleConditionHttpHeaderArgs',
    'GetListenerRuleConditionHttpHeaderArgsDict',
    'GetListenerRuleConditionHttpRequestMethodArgs',
    'GetListenerRuleConditionHttpRequestMethodArgsDict',
    'GetListenerRuleConditionPathPatternArgs',
    'GetListenerRuleConditionPathPatternArgsDict',
    'GetListenerRuleConditionQueryStringArgs',
    'GetListenerRuleConditionQueryStringArgsDict',
    'GetListenerRuleConditionQueryStringValueArgs',
    'GetListenerRuleConditionQueryStringValueArgsDict',
    'GetListenerRuleConditionSourceIpArgs',
    'GetListenerRuleConditionSourceIpArgsDict',
]

MYPY = False

if not MYPY:
    class ListenerDefaultActionArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.

        The following arguments are optional:
        """
        authenticate_cognito: NotRequired[pulumi.Input['ListenerDefaultActionAuthenticateCognitoArgsDict']]
        """
        Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. See below.
        """
        authenticate_oidc: NotRequired[pulumi.Input['ListenerDefaultActionAuthenticateOidcArgsDict']]
        """
        Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. See below.
        """
        fixed_response: NotRequired[pulumi.Input['ListenerDefaultActionFixedResponseArgsDict']]
        """
        Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        """
        forward: NotRequired[pulumi.Input['ListenerDefaultActionForwardArgsDict']]
        """
        Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. See below.
        """
        order: NotRequired[pulumi.Input[_builtins.int]]
        """
        Order for the action. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`. Defaults to the position in the list of actions.
        """
        redirect: NotRequired[pulumi.Input['ListenerDefaultActionRedirectArgsDict']]
        """
        Configuration block for creating a redirect action. Required if `type` is `redirect`. See below.
        """
        target_group_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead. Can be specified with `forward` but ARNs must match.
        """
elif False:
    ListenerDefaultActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerDefaultActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 authenticate_cognito: Optional[pulumi.Input['ListenerDefaultActionAuthenticateCognitoArgs']] = None,
                 authenticate_oidc: Optional[pulumi.Input['ListenerDefaultActionAuthenticateOidcArgs']] = None,
                 fixed_response: Optional[pulumi.Input['ListenerDefaultActionFixedResponseArgs']] = None,
                 forward: Optional[pulumi.Input['ListenerDefaultActionForwardArgs']] = None,
                 order: Optional[pulumi.Input[_builtins.int]] = None,
                 redirect: Optional[pulumi.Input['ListenerDefaultActionRedirectArgs']] = None,
                 target_group_arn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
               
               The following arguments are optional:
        :param pulumi.Input['ListenerDefaultActionAuthenticateCognitoArgs'] authenticate_cognito: Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. See below.
        :param pulumi.Input['ListenerDefaultActionAuthenticateOidcArgs'] authenticate_oidc: Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. See below.
        :param pulumi.Input['ListenerDefaultActionFixedResponseArgs'] fixed_response: Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        :param pulumi.Input['ListenerDefaultActionForwardArgs'] forward: Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. See below.
        :param pulumi.Input[_builtins.int] order: Order for the action. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`. Defaults to the position in the list of actions.
        :param pulumi.Input['ListenerDefaultActionRedirectArgs'] redirect: Configuration block for creating a redirect action. Required if `type` is `redirect`. See below.
        :param pulumi.Input[_builtins.str] target_group_arn: ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead. Can be specified with `forward` but ARNs must match.
        """
        pulumi.set(__self__, "type", type)
        if authenticate_cognito is not None:
            pulumi.set(__self__, "authenticate_cognito", authenticate_cognito)
        if authenticate_oidc is not None:
            pulumi.set(__self__, "authenticate_oidc", authenticate_oidc)
        if fixed_response is not None:
            pulumi.set(__self__, "fixed_response", fixed_response)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if target_group_arn is not None:
            pulumi.set(__self__, "target_group_arn", target_group_arn)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.

        The following arguments are optional:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="authenticateCognito")
    def authenticate_cognito(self) -> Optional[pulumi.Input['ListenerDefaultActionAuthenticateCognitoArgs']]:
        """
        Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. See below.
        """
        return pulumi.get(self, "authenticate_cognito")

    @authenticate_cognito.setter
    def authenticate_cognito(self, value: Optional[pulumi.Input['ListenerDefaultActionAuthenticateCognitoArgs']]):
        pulumi.set(self, "authenticate_cognito", value)

    @_builtins.property
    @pulumi.getter(name="authenticateOidc")
    def authenticate_oidc(self) -> Optional[pulumi.Input['ListenerDefaultActionAuthenticateOidcArgs']]:
        """
        Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. See below.
        """
        return pulumi.get(self, "authenticate_oidc")

    @authenticate_oidc.setter
    def authenticate_oidc(self, value: Optional[pulumi.Input['ListenerDefaultActionAuthenticateOidcArgs']]):
        pulumi.set(self, "authenticate_oidc", value)

    @_builtins.property
    @pulumi.getter(name="fixedResponse")
    def fixed_response(self) -> Optional[pulumi.Input['ListenerDefaultActionFixedResponseArgs']]:
        """
        Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        """
        return pulumi.get(self, "fixed_response")

    @fixed_response.setter
    def fixed_response(self, value: Optional[pulumi.Input['ListenerDefaultActionFixedResponseArgs']]):
        pulumi.set(self, "fixed_response", value)

    @_builtins.property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input['ListenerDefaultActionForwardArgs']]:
        """
        Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. See below.
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input['ListenerDefaultActionForwardArgs']]):
        pulumi.set(self, "forward", value)

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Order for the action. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`. Defaults to the position in the list of actions.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['ListenerDefaultActionRedirectArgs']]:
        """
        Configuration block for creating a redirect action. Required if `type` is `redirect`. See below.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['ListenerDefaultActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @_builtins.property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead. Can be specified with `forward` but ARNs must match.
        """
        return pulumi.get(self, "target_group_arn")

    @target_group_arn.setter
    def target_group_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_group_arn", value)


if not MYPY:
    class ListenerDefaultActionAuthenticateCognitoArgsDict(TypedDict):
        user_pool_arn: pulumi.Input[_builtins.str]
        """
        ARN of the Cognito user pool.
        """
        user_pool_client_id: pulumi.Input[_builtins.str]
        """
        ID of the Cognito user pool client.
        """
        user_pool_domain: pulumi.Input[_builtins.str]
        """
        Domain prefix or fully-qualified domain name of the Cognito user pool.

        The following arguments are optional:
        """
        authentication_request_extra_params: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.
        """
        on_unauthenticated_request: NotRequired[pulumi.Input[_builtins.str]]
        """
        Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set of user claims to be requested from the IdP.
        """
        session_cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the cookie used to maintain session information.
        """
        session_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Maximum duration of the authentication session, in seconds.
        """
elif False:
    ListenerDefaultActionAuthenticateCognitoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerDefaultActionAuthenticateCognitoArgs:
    def __init__(__self__, *,
                 user_pool_arn: pulumi.Input[_builtins.str],
                 user_pool_client_id: pulumi.Input[_builtins.str],
                 user_pool_domain: pulumi.Input[_builtins.str],
                 authentication_request_extra_params: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 on_unauthenticated_request: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 session_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] user_pool_arn: ARN of the Cognito user pool.
        :param pulumi.Input[_builtins.str] user_pool_client_id: ID of the Cognito user pool client.
        :param pulumi.Input[_builtins.str] user_pool_domain: Domain prefix or fully-qualified domain name of the Cognito user pool.
               
               The following arguments are optional:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] authentication_request_extra_params: Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.
        :param pulumi.Input[_builtins.str] on_unauthenticated_request: Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
        :param pulumi.Input[_builtins.str] scope: Set of user claims to be requested from the IdP.
        :param pulumi.Input[_builtins.str] session_cookie_name: Name of the cookie used to maintain session information.
        :param pulumi.Input[_builtins.int] session_timeout: Maximum duration of the authentication session, in seconds.
        """
        pulumi.set(__self__, "user_pool_arn", user_pool_arn)
        pulumi.set(__self__, "user_pool_client_id", user_pool_client_id)
        pulumi.set(__self__, "user_pool_domain", user_pool_domain)
        if authentication_request_extra_params is not None:
            pulumi.set(__self__, "authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            pulumi.set(__self__, "on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if session_cookie_name is not None:
            pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)

    @_builtins.property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> pulumi.Input[_builtins.str]:
        """
        ARN of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_arn")

    @user_pool_arn.setter
    def user_pool_arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_pool_arn", value)

    @_builtins.property
    @pulumi.getter(name="userPoolClientId")
    def user_pool_client_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the Cognito user pool client.
        """
        return pulumi.get(self, "user_pool_client_id")

    @user_pool_client_id.setter
    def user_pool_client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_pool_client_id", value)

    @_builtins.property
    @pulumi.getter(name="userPoolDomain")
    def user_pool_domain(self) -> pulumi.Input[_builtins.str]:
        """
        Domain prefix or fully-qualified domain name of the Cognito user pool.

        The following arguments are optional:
        """
        return pulumi.get(self, "user_pool_domain")

    @user_pool_domain.setter
    def user_pool_domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_pool_domain", value)

    @_builtins.property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "authentication_request_extra_params", value)

    @_builtins.property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "on_unauthenticated_request", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set of user claims to be requested from the IdP.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum duration of the authentication session, in seconds.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "session_timeout", value)


if not MYPY:
    class ListenerDefaultActionAuthenticateOidcArgsDict(TypedDict):
        authorization_endpoint: pulumi.Input[_builtins.str]
        """
        Authorization endpoint of the IdP.
        """
        client_id: pulumi.Input[_builtins.str]
        """
        OAuth 2.0 client identifier.
        """
        client_secret: pulumi.Input[_builtins.str]
        """
        OAuth 2.0 client secret.
        """
        issuer: pulumi.Input[_builtins.str]
        """
        OIDC issuer identifier of the IdP.
        """
        token_endpoint: pulumi.Input[_builtins.str]
        """
        Token endpoint of the IdP.
        """
        user_info_endpoint: pulumi.Input[_builtins.str]
        """
        User info endpoint of the IdP.

        The following arguments are optional:
        """
        authentication_request_extra_params: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        on_unauthenticated_request: NotRequired[pulumi.Input[_builtins.str]]
        """
        Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set of user claims to be requested from the IdP.
        """
        session_cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the cookie used to maintain session information.
        """
        session_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Maximum duration of the authentication session, in seconds.
        """
elif False:
    ListenerDefaultActionAuthenticateOidcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerDefaultActionAuthenticateOidcArgs:
    def __init__(__self__, *,
                 authorization_endpoint: pulumi.Input[_builtins.str],
                 client_id: pulumi.Input[_builtins.str],
                 client_secret: pulumi.Input[_builtins.str],
                 issuer: pulumi.Input[_builtins.str],
                 token_endpoint: pulumi.Input[_builtins.str],
                 user_info_endpoint: pulumi.Input[_builtins.str],
                 authentication_request_extra_params: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 on_unauthenticated_request: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 session_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] authorization_endpoint: Authorization endpoint of the IdP.
        :param pulumi.Input[_builtins.str] client_id: OAuth 2.0 client identifier.
        :param pulumi.Input[_builtins.str] client_secret: OAuth 2.0 client secret.
        :param pulumi.Input[_builtins.str] issuer: OIDC issuer identifier of the IdP.
        :param pulumi.Input[_builtins.str] token_endpoint: Token endpoint of the IdP.
        :param pulumi.Input[_builtins.str] user_info_endpoint: User info endpoint of the IdP.
               
               The following arguments are optional:
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] authentication_request_extra_params: Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param pulumi.Input[_builtins.str] on_unauthenticated_request: Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param pulumi.Input[_builtins.str] scope: Set of user claims to be requested from the IdP.
        :param pulumi.Input[_builtins.str] session_cookie_name: Name of the cookie used to maintain session information.
        :param pulumi.Input[_builtins.int] session_timeout: Maximum duration of the authentication session, in seconds.
        """
        pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)
        if authentication_request_extra_params is not None:
            pulumi.set(__self__, "authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            pulumi.set(__self__, "on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if session_cookie_name is not None:
            pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)

    @_builtins.property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> pulumi.Input[_builtins.str]:
        """
        Authorization endpoint of the IdP.
        """
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "authorization_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[_builtins.str]:
        """
        OAuth 2.0 client identifier.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[_builtins.str]:
        """
        OAuth 2.0 client secret.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[_builtins.str]:
        """
        OIDC issuer identifier of the IdP.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> pulumi.Input[_builtins.str]:
        """
        Token endpoint of the IdP.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "token_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> pulumi.Input[_builtins.str]:
        """
        User info endpoint of the IdP.

        The following arguments are optional:
        """
        return pulumi.get(self, "user_info_endpoint")

    @user_info_endpoint.setter
    def user_info_endpoint(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_info_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "authentication_request_extra_params", value)

    @_builtins.property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "on_unauthenticated_request", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set of user claims to be requested from the IdP.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum duration of the authentication session, in seconds.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "session_timeout", value)


if not MYPY:
    class ListenerDefaultActionFixedResponseArgsDict(TypedDict):
        content_type: pulumi.Input[_builtins.str]
        """
        Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.

        The following arguments are optional:
        """
        message_body: NotRequired[pulumi.Input[_builtins.str]]
        """
        Message body.
        """
        status_code: NotRequired[pulumi.Input[_builtins.str]]
        """
        HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
elif False:
    ListenerDefaultActionFixedResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerDefaultActionFixedResponseArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[_builtins.str],
                 message_body: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] content_type: Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
               
               The following arguments are optional:
        :param pulumi.Input[_builtins.str] message_body: Message body.
        :param pulumi.Input[_builtins.str] status_code: HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        pulumi.set(__self__, "content_type", content_type)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[_builtins.str]:
        """
        Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.

        The following arguments are optional:
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content_type", value)

    @_builtins.property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Message body.
        """
        return pulumi.get(self, "message_body")

    @message_body.setter
    def message_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_body", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class ListenerDefaultActionForwardArgsDict(TypedDict):
        target_groups: pulumi.Input[Sequence[pulumi.Input['ListenerDefaultActionForwardTargetGroupArgsDict']]]
        """
        Set of 1-5 target group blocks. See below.

        The following arguments are optional:
        """
        stickiness: NotRequired[pulumi.Input['ListenerDefaultActionForwardStickinessArgsDict']]
        """
        Configuration block for target group stickiness for the rule. See below.
        """
elif False:
    ListenerDefaultActionForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerDefaultActionForwardArgs:
    def __init__(__self__, *,
                 target_groups: pulumi.Input[Sequence[pulumi.Input['ListenerDefaultActionForwardTargetGroupArgs']]],
                 stickiness: Optional[pulumi.Input['ListenerDefaultActionForwardStickinessArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ListenerDefaultActionForwardTargetGroupArgs']]] target_groups: Set of 1-5 target group blocks. See below.
               
               The following arguments are optional:
        :param pulumi.Input['ListenerDefaultActionForwardStickinessArgs'] stickiness: Configuration block for target group stickiness for the rule. See below.
        """
        pulumi.set(__self__, "target_groups", target_groups)
        if stickiness is not None:
            pulumi.set(__self__, "stickiness", stickiness)

    @_builtins.property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> pulumi.Input[Sequence[pulumi.Input['ListenerDefaultActionForwardTargetGroupArgs']]]:
        """
        Set of 1-5 target group blocks. See below.

        The following arguments are optional:
        """
        return pulumi.get(self, "target_groups")

    @target_groups.setter
    def target_groups(self, value: pulumi.Input[Sequence[pulumi.Input['ListenerDefaultActionForwardTargetGroupArgs']]]):
        pulumi.set(self, "target_groups", value)

    @_builtins.property
    @pulumi.getter
    def stickiness(self) -> Optional[pulumi.Input['ListenerDefaultActionForwardStickinessArgs']]:
        """
        Configuration block for target group stickiness for the rule. See below.
        """
        return pulumi.get(self, "stickiness")

    @stickiness.setter
    def stickiness(self, value: Optional[pulumi.Input['ListenerDefaultActionForwardStickinessArgs']]):
        pulumi.set(self, "stickiness", value)


if not MYPY:
    class ListenerDefaultActionForwardStickinessArgsDict(TypedDict):
        duration: pulumi.Input[_builtins.int]
        """
        Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).

        The following arguments are optional:
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether target group stickiness is enabled. Default is `false`.
        """
elif False:
    ListenerDefaultActionForwardStickinessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerDefaultActionForwardStickinessArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[_builtins.int],
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.int] duration: Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
               
               The following arguments are optional:
        :param pulumi.Input[_builtins.bool] enabled: Whether target group stickiness is enabled. Default is `false`.
        """
        pulumi.set(__self__, "duration", duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> pulumi.Input[_builtins.int]:
        """
        Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).

        The following arguments are optional:
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether target group stickiness is enabled. Default is `false`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class ListenerDefaultActionForwardTargetGroupArgsDict(TypedDict):
        arn: pulumi.Input[_builtins.str]
        """
        ARN of the target group.

        The following arguments are optional:
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Weight. The range is 0 to 999.
        """
elif False:
    ListenerDefaultActionForwardTargetGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerDefaultActionForwardTargetGroupArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[_builtins.str],
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] arn: ARN of the target group.
               
               The following arguments are optional:
        :param pulumi.Input[_builtins.int] weight: Weight. The range is 0 to 999.
        """
        pulumi.set(__self__, "arn", arn)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> pulumi.Input[_builtins.str]:
        """
        ARN of the target group.

        The following arguments are optional:
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "arn", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Weight. The range is 0 to 999.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class ListenerDefaultActionRedirectArgsDict(TypedDict):
        status_code: pulumi.Input[_builtins.str]
        """
        HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).

        The following arguments are optional:
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        """
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        """
        query: NotRequired[pulumi.Input[_builtins.str]]
        """
        Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
elif False:
    ListenerDefaultActionRedirectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerDefaultActionRedirectArgs:
    def __init__(__self__, *,
                 status_code: pulumi.Input[_builtins.str],
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 query: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] status_code: HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
               
               The following arguments are optional:
        :param pulumi.Input[_builtins.str] host: Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        :param pulumi.Input[_builtins.str] path: Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        :param pulumi.Input[_builtins.str] port: Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        :param pulumi.Input[_builtins.str] protocol: Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        :param pulumi.Input[_builtins.str] query: Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        pulumi.set(__self__, "status_code", status_code)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[_builtins.str]:
        """
        HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).

        The following arguments are optional:
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status_code", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query", value)


if not MYPY:
    class ListenerMutualAuthenticationArgsDict(TypedDict):
        mode: pulumi.Input[_builtins.str]
        """
        Valid values are `off`, `passthrough`, and `verify`.
        """
        advertise_trust_store_ca_names: NotRequired[pulumi.Input[_builtins.str]]
        """
        Valid values are `off` and `on`.
        """
        ignore_client_certificate_expiry: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether client certificate expiry is ignored.
        Default is `false`.
        """
        trust_store_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        ARN of the elbv2 Trust Store.
        """
elif False:
    ListenerMutualAuthenticationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerMutualAuthenticationArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[_builtins.str],
                 advertise_trust_store_ca_names: Optional[pulumi.Input[_builtins.str]] = None,
                 ignore_client_certificate_expiry: Optional[pulumi.Input[_builtins.bool]] = None,
                 trust_store_arn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] mode: Valid values are `off`, `passthrough`, and `verify`.
        :param pulumi.Input[_builtins.str] advertise_trust_store_ca_names: Valid values are `off` and `on`.
        :param pulumi.Input[_builtins.bool] ignore_client_certificate_expiry: Whether client certificate expiry is ignored.
               Default is `false`.
        :param pulumi.Input[_builtins.str] trust_store_arn: ARN of the elbv2 Trust Store.
        """
        pulumi.set(__self__, "mode", mode)
        if advertise_trust_store_ca_names is not None:
            pulumi.set(__self__, "advertise_trust_store_ca_names", advertise_trust_store_ca_names)
        if ignore_client_certificate_expiry is not None:
            pulumi.set(__self__, "ignore_client_certificate_expiry", ignore_client_certificate_expiry)
        if trust_store_arn is not None:
            pulumi.set(__self__, "trust_store_arn", trust_store_arn)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Input[_builtins.str]:
        """
        Valid values are `off`, `passthrough`, and `verify`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter(name="advertiseTrustStoreCaNames")
    def advertise_trust_store_ca_names(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values are `off` and `on`.
        """
        return pulumi.get(self, "advertise_trust_store_ca_names")

    @advertise_trust_store_ca_names.setter
    def advertise_trust_store_ca_names(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "advertise_trust_store_ca_names", value)

    @_builtins.property
    @pulumi.getter(name="ignoreClientCertificateExpiry")
    def ignore_client_certificate_expiry(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether client certificate expiry is ignored.
        Default is `false`.
        """
        return pulumi.get(self, "ignore_client_certificate_expiry")

    @ignore_client_certificate_expiry.setter
    def ignore_client_certificate_expiry(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ignore_client_certificate_expiry", value)

    @_builtins.property
    @pulumi.getter(name="trustStoreArn")
    def trust_store_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ARN of the elbv2 Trust Store.
        """
        return pulumi.get(self, "trust_store_arn")

    @trust_store_arn.setter
    def trust_store_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trust_store_arn", value)


if not MYPY:
    class ListenerRuleActionArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
        """
        authenticate_cognito: NotRequired[pulumi.Input['ListenerRuleActionAuthenticateCognitoArgsDict']]
        """
        Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        """
        authenticate_oidc: NotRequired[pulumi.Input['ListenerRuleActionAuthenticateOidcArgsDict']]
        """
        Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        """
        fixed_response: NotRequired[pulumi.Input['ListenerRuleActionFixedResponseArgsDict']]
        """
        Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        """
        forward: NotRequired[pulumi.Input['ListenerRuleActionForwardArgsDict']]
        """
        Configuration block for creating an action that distributes requests among one or more target groups.
        Specify only if `type` is `forward`.
        Cannot be specified with `target_group_arn`.
        """
        order: NotRequired[pulumi.Input[_builtins.int]]
        """
        Order for the action.
        The action with the lowest value for order is performed first.
        Valid values are between `1` and `50000`.
        Defaults to the position in the list of actions.
        """
        redirect: NotRequired[pulumi.Input['ListenerRuleActionRedirectArgsDict']]
        """
        Information for creating a redirect action. Required if `type` is `redirect`.
        """
        target_group_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        ARN of the Target Group to which to route traffic.
        Specify only if `type` is `forward` and you want to route to a single target group.
        To route to one or more target groups, use a `forward` block instead.
        Cannot be specified with `forward`.
        """
elif False:
    ListenerRuleActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 authenticate_cognito: Optional[pulumi.Input['ListenerRuleActionAuthenticateCognitoArgs']] = None,
                 authenticate_oidc: Optional[pulumi.Input['ListenerRuleActionAuthenticateOidcArgs']] = None,
                 fixed_response: Optional[pulumi.Input['ListenerRuleActionFixedResponseArgs']] = None,
                 forward: Optional[pulumi.Input['ListenerRuleActionForwardArgs']] = None,
                 order: Optional[pulumi.Input[_builtins.int]] = None,
                 redirect: Optional[pulumi.Input['ListenerRuleActionRedirectArgs']] = None,
                 target_group_arn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
        :param pulumi.Input['ListenerRuleActionAuthenticateCognitoArgs'] authenticate_cognito: Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        :param pulumi.Input['ListenerRuleActionAuthenticateOidcArgs'] authenticate_oidc: Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        :param pulumi.Input['ListenerRuleActionFixedResponseArgs'] fixed_response: Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        :param pulumi.Input['ListenerRuleActionForwardArgs'] forward: Configuration block for creating an action that distributes requests among one or more target groups.
               Specify only if `type` is `forward`.
               Cannot be specified with `target_group_arn`.
        :param pulumi.Input[_builtins.int] order: Order for the action.
               The action with the lowest value for order is performed first.
               Valid values are between `1` and `50000`.
               Defaults to the position in the list of actions.
        :param pulumi.Input['ListenerRuleActionRedirectArgs'] redirect: Information for creating a redirect action. Required if `type` is `redirect`.
        :param pulumi.Input[_builtins.str] target_group_arn: ARN of the Target Group to which to route traffic.
               Specify only if `type` is `forward` and you want to route to a single target group.
               To route to one or more target groups, use a `forward` block instead.
               Cannot be specified with `forward`.
        """
        pulumi.set(__self__, "type", type)
        if authenticate_cognito is not None:
            pulumi.set(__self__, "authenticate_cognito", authenticate_cognito)
        if authenticate_oidc is not None:
            pulumi.set(__self__, "authenticate_oidc", authenticate_oidc)
        if fixed_response is not None:
            pulumi.set(__self__, "fixed_response", fixed_response)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if target_group_arn is not None:
            pulumi.set(__self__, "target_group_arn", target_group_arn)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="authenticateCognito")
    def authenticate_cognito(self) -> Optional[pulumi.Input['ListenerRuleActionAuthenticateCognitoArgs']]:
        """
        Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
        """
        return pulumi.get(self, "authenticate_cognito")

    @authenticate_cognito.setter
    def authenticate_cognito(self, value: Optional[pulumi.Input['ListenerRuleActionAuthenticateCognitoArgs']]):
        pulumi.set(self, "authenticate_cognito", value)

    @_builtins.property
    @pulumi.getter(name="authenticateOidc")
    def authenticate_oidc(self) -> Optional[pulumi.Input['ListenerRuleActionAuthenticateOidcArgs']]:
        """
        Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
        """
        return pulumi.get(self, "authenticate_oidc")

    @authenticate_oidc.setter
    def authenticate_oidc(self, value: Optional[pulumi.Input['ListenerRuleActionAuthenticateOidcArgs']]):
        pulumi.set(self, "authenticate_oidc", value)

    @_builtins.property
    @pulumi.getter(name="fixedResponse")
    def fixed_response(self) -> Optional[pulumi.Input['ListenerRuleActionFixedResponseArgs']]:
        """
        Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
        """
        return pulumi.get(self, "fixed_response")

    @fixed_response.setter
    def fixed_response(self, value: Optional[pulumi.Input['ListenerRuleActionFixedResponseArgs']]):
        pulumi.set(self, "fixed_response", value)

    @_builtins.property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input['ListenerRuleActionForwardArgs']]:
        """
        Configuration block for creating an action that distributes requests among one or more target groups.
        Specify only if `type` is `forward`.
        Cannot be specified with `target_group_arn`.
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input['ListenerRuleActionForwardArgs']]):
        pulumi.set(self, "forward", value)

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Order for the action.
        The action with the lowest value for order is performed first.
        Valid values are between `1` and `50000`.
        Defaults to the position in the list of actions.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['ListenerRuleActionRedirectArgs']]:
        """
        Information for creating a redirect action. Required if `type` is `redirect`.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['ListenerRuleActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @_builtins.property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ARN of the Target Group to which to route traffic.
        Specify only if `type` is `forward` and you want to route to a single target group.
        To route to one or more target groups, use a `forward` block instead.
        Cannot be specified with `forward`.
        """
        return pulumi.get(self, "target_group_arn")

    @target_group_arn.setter
    def target_group_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_group_arn", value)


if not MYPY:
    class ListenerRuleActionAuthenticateCognitoArgsDict(TypedDict):
        user_pool_arn: pulumi.Input[_builtins.str]
        """
        The ARN of the Cognito user pool.
        """
        user_pool_client_id: pulumi.Input[_builtins.str]
        """
        The ID of the Cognito user pool client.
        """
        user_pool_domain: pulumi.Input[_builtins.str]
        """
        The domain prefix or fully-qualified domain name of the Cognito user pool.
        """
        authentication_request_extra_params: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        on_unauthenticated_request: NotRequired[pulumi.Input[_builtins.str]]
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        The set of user claims to be requested from the IdP.
        """
        session_cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the cookie used to maintain session information.
        """
        session_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum duration of the authentication session, in seconds.
        """
elif False:
    ListenerRuleActionAuthenticateCognitoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleActionAuthenticateCognitoArgs:
    def __init__(__self__, *,
                 user_pool_arn: pulumi.Input[_builtins.str],
                 user_pool_client_id: pulumi.Input[_builtins.str],
                 user_pool_domain: pulumi.Input[_builtins.str],
                 authentication_request_extra_params: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 on_unauthenticated_request: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 session_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] user_pool_arn: The ARN of the Cognito user pool.
        :param pulumi.Input[_builtins.str] user_pool_client_id: The ID of the Cognito user pool client.
        :param pulumi.Input[_builtins.str] user_pool_domain: The domain prefix or fully-qualified domain name of the Cognito user pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param pulumi.Input[_builtins.str] on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param pulumi.Input[_builtins.str] scope: The set of user claims to be requested from the IdP.
        :param pulumi.Input[_builtins.str] session_cookie_name: The name of the cookie used to maintain session information.
        :param pulumi.Input[_builtins.int] session_timeout: The maximum duration of the authentication session, in seconds.
        """
        pulumi.set(__self__, "user_pool_arn", user_pool_arn)
        pulumi.set(__self__, "user_pool_client_id", user_pool_client_id)
        pulumi.set(__self__, "user_pool_domain", user_pool_domain)
        if authentication_request_extra_params is not None:
            pulumi.set(__self__, "authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            pulumi.set(__self__, "on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if session_cookie_name is not None:
            pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)

    @_builtins.property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> pulumi.Input[_builtins.str]:
        """
        The ARN of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_arn")

    @user_pool_arn.setter
    def user_pool_arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_pool_arn", value)

    @_builtins.property
    @pulumi.getter(name="userPoolClientId")
    def user_pool_client_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Cognito user pool client.
        """
        return pulumi.get(self, "user_pool_client_id")

    @user_pool_client_id.setter
    def user_pool_client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_pool_client_id", value)

    @_builtins.property
    @pulumi.getter(name="userPoolDomain")
    def user_pool_domain(self) -> pulumi.Input[_builtins.str]:
        """
        The domain prefix or fully-qualified domain name of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_domain")

    @user_pool_domain.setter
    def user_pool_domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_pool_domain", value)

    @_builtins.property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "authentication_request_extra_params", value)

    @_builtins.property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "on_unauthenticated_request", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The set of user claims to be requested from the IdP.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum duration of the authentication session, in seconds.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "session_timeout", value)


if not MYPY:
    class ListenerRuleActionAuthenticateOidcArgsDict(TypedDict):
        authorization_endpoint: pulumi.Input[_builtins.str]
        """
        The authorization endpoint of the IdP.
        """
        client_id: pulumi.Input[_builtins.str]
        """
        The OAuth 2.0 client identifier.
        """
        client_secret: pulumi.Input[_builtins.str]
        """
        The OAuth 2.0 client secret.
        """
        issuer: pulumi.Input[_builtins.str]
        """
        The OIDC issuer identifier of the IdP.
        """
        token_endpoint: pulumi.Input[_builtins.str]
        """
        The token endpoint of the IdP.
        """
        user_info_endpoint: pulumi.Input[_builtins.str]
        """
        The user info endpoint of the IdP.
        """
        authentication_request_extra_params: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        on_unauthenticated_request: NotRequired[pulumi.Input[_builtins.str]]
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        The set of user claims to be requested from the IdP.
        """
        session_cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the cookie used to maintain session information.
        """
        session_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum duration of the authentication session, in seconds.
        """
elif False:
    ListenerRuleActionAuthenticateOidcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleActionAuthenticateOidcArgs:
    def __init__(__self__, *,
                 authorization_endpoint: pulumi.Input[_builtins.str],
                 client_id: pulumi.Input[_builtins.str],
                 client_secret: pulumi.Input[_builtins.str],
                 issuer: pulumi.Input[_builtins.str],
                 token_endpoint: pulumi.Input[_builtins.str],
                 user_info_endpoint: pulumi.Input[_builtins.str],
                 authentication_request_extra_params: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 on_unauthenticated_request: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 session_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] authorization_endpoint: The authorization endpoint of the IdP.
        :param pulumi.Input[_builtins.str] client_id: The OAuth 2.0 client identifier.
        :param pulumi.Input[_builtins.str] client_secret: The OAuth 2.0 client secret.
        :param pulumi.Input[_builtins.str] issuer: The OIDC issuer identifier of the IdP.
        :param pulumi.Input[_builtins.str] token_endpoint: The token endpoint of the IdP.
        :param pulumi.Input[_builtins.str] user_info_endpoint: The user info endpoint of the IdP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] authentication_request_extra_params: The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        :param pulumi.Input[_builtins.str] on_unauthenticated_request: The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        :param pulumi.Input[_builtins.str] scope: The set of user claims to be requested from the IdP.
        :param pulumi.Input[_builtins.str] session_cookie_name: The name of the cookie used to maintain session information.
        :param pulumi.Input[_builtins.int] session_timeout: The maximum duration of the authentication session, in seconds.
        """
        pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)
        if authentication_request_extra_params is not None:
            pulumi.set(__self__, "authentication_request_extra_params", authentication_request_extra_params)
        if on_unauthenticated_request is not None:
            pulumi.set(__self__, "on_unauthenticated_request", on_unauthenticated_request)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if session_cookie_name is not None:
            pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)

    @_builtins.property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> pulumi.Input[_builtins.str]:
        """
        The authorization endpoint of the IdP.
        """
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "authorization_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[_builtins.str]:
        """
        The OAuth 2.0 client identifier.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[_builtins.str]:
        """
        The OAuth 2.0 client secret.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[_builtins.str]:
        """
        The OIDC issuer identifier of the IdP.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> pulumi.Input[_builtins.str]:
        """
        The token endpoint of the IdP.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "token_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> pulumi.Input[_builtins.str]:
        """
        The user info endpoint of the IdP.
        """
        return pulumi.get(self, "user_info_endpoint")

    @user_info_endpoint.setter
    def user_info_endpoint(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_info_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "authentication_request_extra_params", value)

    @_builtins.property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "on_unauthenticated_request", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The set of user claims to be requested from the IdP.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum duration of the authentication session, in seconds.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "session_timeout", value)


if not MYPY:
    class ListenerRuleActionFixedResponseArgsDict(TypedDict):
        content_type: pulumi.Input[_builtins.str]
        """
        The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
        """
        message_body: NotRequired[pulumi.Input[_builtins.str]]
        """
        The message body.
        """
        status_code: NotRequired[pulumi.Input[_builtins.str]]
        """
        The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
elif False:
    ListenerRuleActionFixedResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleActionFixedResponseArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[_builtins.str],
                 message_body: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] content_type: The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
        :param pulumi.Input[_builtins.str] message_body: The message body.
        :param pulumi.Input[_builtins.str] status_code: The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        pulumi.set(__self__, "content_type", content_type)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[_builtins.str]:
        """
        The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content_type", value)

    @_builtins.property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The message body.
        """
        return pulumi.get(self, "message_body")

    @message_body.setter
    def message_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_body", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class ListenerRuleActionForwardArgsDict(TypedDict):
        target_groups: pulumi.Input[Sequence[pulumi.Input['ListenerRuleActionForwardTargetGroupArgsDict']]]
        """
        One or more target group blocks.
        """
        stickiness: NotRequired[pulumi.Input['ListenerRuleActionForwardStickinessArgsDict']]
        """
        The target group stickiness for the rule.
        """
elif False:
    ListenerRuleActionForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleActionForwardArgs:
    def __init__(__self__, *,
                 target_groups: pulumi.Input[Sequence[pulumi.Input['ListenerRuleActionForwardTargetGroupArgs']]],
                 stickiness: Optional[pulumi.Input['ListenerRuleActionForwardStickinessArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ListenerRuleActionForwardTargetGroupArgs']]] target_groups: One or more target group blocks.
        :param pulumi.Input['ListenerRuleActionForwardStickinessArgs'] stickiness: The target group stickiness for the rule.
        """
        pulumi.set(__self__, "target_groups", target_groups)
        if stickiness is not None:
            pulumi.set(__self__, "stickiness", stickiness)

    @_builtins.property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> pulumi.Input[Sequence[pulumi.Input['ListenerRuleActionForwardTargetGroupArgs']]]:
        """
        One or more target group blocks.
        """
        return pulumi.get(self, "target_groups")

    @target_groups.setter
    def target_groups(self, value: pulumi.Input[Sequence[pulumi.Input['ListenerRuleActionForwardTargetGroupArgs']]]):
        pulumi.set(self, "target_groups", value)

    @_builtins.property
    @pulumi.getter
    def stickiness(self) -> Optional[pulumi.Input['ListenerRuleActionForwardStickinessArgs']]:
        """
        The target group stickiness for the rule.
        """
        return pulumi.get(self, "stickiness")

    @stickiness.setter
    def stickiness(self, value: Optional[pulumi.Input['ListenerRuleActionForwardStickinessArgs']]):
        pulumi.set(self, "stickiness", value)


if not MYPY:
    class ListenerRuleActionForwardStickinessArgsDict(TypedDict):
        duration: pulumi.Input[_builtins.int]
        """
        The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates whether target group stickiness is enabled.
        """
elif False:
    ListenerRuleActionForwardStickinessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleActionForwardStickinessArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[_builtins.int],
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.int] duration: The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        :param pulumi.Input[_builtins.bool] enabled: Indicates whether target group stickiness is enabled.
        """
        pulumi.set(__self__, "duration", duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> pulumi.Input[_builtins.int]:
        """
        The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether target group stickiness is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class ListenerRuleActionForwardTargetGroupArgsDict(TypedDict):
        arn: pulumi.Input[_builtins.str]
        """
        The Amazon Resource Name (ARN) of the target group.
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        The weight. The range is 0 to 999.
        """
elif False:
    ListenerRuleActionForwardTargetGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleActionForwardTargetGroupArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[_builtins.str],
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] arn: The Amazon Resource Name (ARN) of the target group.
        :param pulumi.Input[_builtins.int] weight: The weight. The range is 0 to 999.
        """
        pulumi.set(__self__, "arn", arn)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> pulumi.Input[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the target group.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "arn", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The weight. The range is 0 to 999.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class ListenerRuleActionRedirectArgsDict(TypedDict):
        status_code: pulumi.Input[_builtins.str]
        """
        The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        """
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        """
        query: NotRequired[pulumi.Input[_builtins.str]]
        """
        The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
elif False:
    ListenerRuleActionRedirectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleActionRedirectArgs:
    def __init__(__self__, *,
                 status_code: pulumi.Input[_builtins.str],
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 query: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] status_code: The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
        :param pulumi.Input[_builtins.str] host: The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        :param pulumi.Input[_builtins.str] path: The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        :param pulumi.Input[_builtins.str] port: The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        :param pulumi.Input[_builtins.str] protocol: The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        :param pulumi.Input[_builtins.str] query: The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        pulumi.set(__self__, "status_code", status_code)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[_builtins.str]:
        """
        The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status_code", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query", value)


if not MYPY:
    class ListenerRuleConditionArgsDict(TypedDict):
        host_header: NotRequired[pulumi.Input['ListenerRuleConditionHostHeaderArgsDict']]
        """
        Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
        """
        http_header: NotRequired[pulumi.Input['ListenerRuleConditionHttpHeaderArgsDict']]
        """
        HTTP headers to match. HTTP Header block fields documented below.
        """
        http_request_method: NotRequired[pulumi.Input['ListenerRuleConditionHttpRequestMethodArgsDict']]
        """
        Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
        """
        path_pattern: NotRequired[pulumi.Input['ListenerRuleConditionPathPatternArgsDict']]
        """
        Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
        """
        query_strings: NotRequired[pulumi.Input[Sequence[pulumi.Input['ListenerRuleConditionQueryStringArgsDict']]]]
        """
        Query strings to match. Query String block fields documented below.
        """
        source_ip: NotRequired[pulumi.Input['ListenerRuleConditionSourceIpArgsDict']]
        """
        Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.

        > **NOTE::** Exactly one of `host_header`, `http_header`, `http_request_method`, `path_pattern`, `query_string` or `source_ip` must be set per condition.
        """
elif False:
    ListenerRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleConditionArgs:
    def __init__(__self__, *,
                 host_header: Optional[pulumi.Input['ListenerRuleConditionHostHeaderArgs']] = None,
                 http_header: Optional[pulumi.Input['ListenerRuleConditionHttpHeaderArgs']] = None,
                 http_request_method: Optional[pulumi.Input['ListenerRuleConditionHttpRequestMethodArgs']] = None,
                 path_pattern: Optional[pulumi.Input['ListenerRuleConditionPathPatternArgs']] = None,
                 query_strings: Optional[pulumi.Input[Sequence[pulumi.Input['ListenerRuleConditionQueryStringArgs']]]] = None,
                 source_ip: Optional[pulumi.Input['ListenerRuleConditionSourceIpArgs']] = None):
        """
        :param pulumi.Input['ListenerRuleConditionHostHeaderArgs'] host_header: Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
        :param pulumi.Input['ListenerRuleConditionHttpHeaderArgs'] http_header: HTTP headers to match. HTTP Header block fields documented below.
        :param pulumi.Input['ListenerRuleConditionHttpRequestMethodArgs'] http_request_method: Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
        :param pulumi.Input['ListenerRuleConditionPathPatternArgs'] path_pattern: Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
        :param pulumi.Input[Sequence[pulumi.Input['ListenerRuleConditionQueryStringArgs']]] query_strings: Query strings to match. Query String block fields documented below.
        :param pulumi.Input['ListenerRuleConditionSourceIpArgs'] source_ip: Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.
               
               > **NOTE::** Exactly one of `host_header`, `http_header`, `http_request_method`, `path_pattern`, `query_string` or `source_ip` must be set per condition.
        """
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if http_header is not None:
            pulumi.set(__self__, "http_header", http_header)
        if http_request_method is not None:
            pulumi.set(__self__, "http_request_method", http_request_method)
        if path_pattern is not None:
            pulumi.set(__self__, "path_pattern", path_pattern)
        if query_strings is not None:
            pulumi.set(__self__, "query_strings", query_strings)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[pulumi.Input['ListenerRuleConditionHostHeaderArgs']]:
        """
        Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
        """
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: Optional[pulumi.Input['ListenerRuleConditionHostHeaderArgs']]):
        pulumi.set(self, "host_header", value)

    @_builtins.property
    @pulumi.getter(name="httpHeader")
    def http_header(self) -> Optional[pulumi.Input['ListenerRuleConditionHttpHeaderArgs']]:
        """
        HTTP headers to match. HTTP Header block fields documented below.
        """
        return pulumi.get(self, "http_header")

    @http_header.setter
    def http_header(self, value: Optional[pulumi.Input['ListenerRuleConditionHttpHeaderArgs']]):
        pulumi.set(self, "http_header", value)

    @_builtins.property
    @pulumi.getter(name="httpRequestMethod")
    def http_request_method(self) -> Optional[pulumi.Input['ListenerRuleConditionHttpRequestMethodArgs']]:
        """
        Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
        """
        return pulumi.get(self, "http_request_method")

    @http_request_method.setter
    def http_request_method(self, value: Optional[pulumi.Input['ListenerRuleConditionHttpRequestMethodArgs']]):
        pulumi.set(self, "http_request_method", value)

    @_builtins.property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> Optional[pulumi.Input['ListenerRuleConditionPathPatternArgs']]:
        """
        Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
        """
        return pulumi.get(self, "path_pattern")

    @path_pattern.setter
    def path_pattern(self, value: Optional[pulumi.Input['ListenerRuleConditionPathPatternArgs']]):
        pulumi.set(self, "path_pattern", value)

    @_builtins.property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListenerRuleConditionQueryStringArgs']]]]:
        """
        Query strings to match. Query String block fields documented below.
        """
        return pulumi.get(self, "query_strings")

    @query_strings.setter
    def query_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListenerRuleConditionQueryStringArgs']]]]):
        pulumi.set(self, "query_strings", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input['ListenerRuleConditionSourceIpArgs']]:
        """
        Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.

        > **NOTE::** Exactly one of `host_header`, `http_header`, `http_request_method`, `path_pattern`, `query_string` or `source_ip` must be set per condition.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input['ListenerRuleConditionSourceIpArgs']]):
        pulumi.set(self, "source_ip", value)


if not MYPY:
    class ListenerRuleConditionHostHeaderArgsDict(TypedDict):
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    ListenerRuleConditionHostHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleConditionHostHeaderArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ListenerRuleConditionHttpHeaderArgsDict(TypedDict):
        http_header_name: pulumi.Input[_builtins.str]
        """
        Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
        """
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
elif False:
    ListenerRuleConditionHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleConditionHttpHeaderArgs:
    def __init__(__self__, *,
                 http_header_name: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] http_header_name: Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        pulumi.set(__self__, "http_header_name", http_header_name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
        """
        return pulumi.get(self, "http_header_name")

    @http_header_name.setter
    def http_header_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "http_header_name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ListenerRuleConditionHttpRequestMethodArgsDict(TypedDict):
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    ListenerRuleConditionHttpRequestMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleConditionHttpRequestMethodArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ListenerRuleConditionPathPatternArgsDict(TypedDict):
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    ListenerRuleConditionPathPatternArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleConditionPathPatternArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ListenerRuleConditionQueryStringArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        Query string value pattern to match.
        """
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Query string key pattern to match.
        """
elif False:
    ListenerRuleConditionQueryStringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleConditionQueryStringArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] value: Query string value pattern to match.
        :param pulumi.Input[_builtins.str] key: Query string key pattern to match.
        """
        pulumi.set(__self__, "value", value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Query string value pattern to match.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Query string key pattern to match.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)


if not MYPY:
    class ListenerRuleConditionSourceIpArgsDict(TypedDict):
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    ListenerRuleConditionSourceIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListenerRuleConditionSourceIpArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class LoadBalancerAccessLogsArgsDict(TypedDict):
        bucket: pulumi.Input[_builtins.str]
        """
        S3 bucket name to store the logs in.
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Boolean to enable / disable `access_logs`. Defaults to `false`, even when `bucket` is specified.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        S3 bucket prefix. Logs are stored in the root if not configured.
        """
elif False:
    LoadBalancerAccessLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerAccessLogsArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bucket: S3 bucket name to store the logs in.
        :param pulumi.Input[_builtins.bool] enabled: Boolean to enable / disable `access_logs`. Defaults to `false`, even when `bucket` is specified.
        :param pulumi.Input[_builtins.str] prefix: S3 bucket prefix. Logs are stored in the root if not configured.
        """
        pulumi.set(__self__, "bucket", bucket)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        S3 bucket name to store the logs in.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean to enable / disable `access_logs`. Defaults to `false`, even when `bucket` is specified.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        S3 bucket prefix. Logs are stored in the root if not configured.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class LoadBalancerConnectionLogsArgsDict(TypedDict):
        bucket: pulumi.Input[_builtins.str]
        """
        S3 bucket name to store the logs in.
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Boolean to enable / disable `connection_logs`. Defaults to `false`, even when `bucket` is specified.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        S3 bucket prefix. Logs are stored in the root if not configured.
        """
elif False:
    LoadBalancerConnectionLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerConnectionLogsArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bucket: S3 bucket name to store the logs in.
        :param pulumi.Input[_builtins.bool] enabled: Boolean to enable / disable `connection_logs`. Defaults to `false`, even when `bucket` is specified.
        :param pulumi.Input[_builtins.str] prefix: S3 bucket prefix. Logs are stored in the root if not configured.
        """
        pulumi.set(__self__, "bucket", bucket)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        S3 bucket name to store the logs in.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean to enable / disable `connection_logs`. Defaults to `false`, even when `bucket` is specified.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        S3 bucket prefix. Logs are stored in the root if not configured.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class LoadBalancerIpamPoolsArgsDict(TypedDict):
        ipv4_ipam_pool_id: pulumi.Input[_builtins.str]
        """
        The ID of the IPv4 IPAM pool.
        """
elif False:
    LoadBalancerIpamPoolsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerIpamPoolsArgs:
    def __init__(__self__, *,
                 ipv4_ipam_pool_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] ipv4_ipam_pool_id: The ID of the IPv4 IPAM pool.
        """
        pulumi.set(__self__, "ipv4_ipam_pool_id", ipv4_ipam_pool_id)

    @_builtins.property
    @pulumi.getter(name="ipv4IpamPoolId")
    def ipv4_ipam_pool_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the IPv4 IPAM pool.
        """
        return pulumi.get(self, "ipv4_ipam_pool_id")

    @ipv4_ipam_pool_id.setter
    def ipv4_ipam_pool_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipv4_ipam_pool_id", value)


if not MYPY:
    class LoadBalancerMinimumLoadBalancerCapacityArgsDict(TypedDict):
        capacity_units: pulumi.Input[_builtins.int]
        """
        The number of capacity units.
        """
elif False:
    LoadBalancerMinimumLoadBalancerCapacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerMinimumLoadBalancerCapacityArgs:
    def __init__(__self__, *,
                 capacity_units: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] capacity_units: The number of capacity units.
        """
        pulumi.set(__self__, "capacity_units", capacity_units)

    @_builtins.property
    @pulumi.getter(name="capacityUnits")
    def capacity_units(self) -> pulumi.Input[_builtins.int]:
        """
        The number of capacity units.
        """
        return pulumi.get(self, "capacity_units")

    @capacity_units.setter
    def capacity_units(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "capacity_units", value)


if not MYPY:
    class LoadBalancerSubnetMappingArgsDict(TypedDict):
        subnet_id: pulumi.Input[_builtins.str]
        """
        ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
        """
        allocation_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Allocation ID of the Elastic IP address for an internet-facing load balancer.
        """
        ipv6_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
        """
        outpost_id: NotRequired[pulumi.Input[_builtins.str]]
        private_ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Private IPv4 address for an internal load balancer.
        """
elif False:
    LoadBalancerSubnetMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerSubnetMappingArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[_builtins.str],
                 allocation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 outpost_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] subnet_id: ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
        :param pulumi.Input[_builtins.str] allocation_id: Allocation ID of the Elastic IP address for an internet-facing load balancer.
        :param pulumi.Input[_builtins.str] ipv6_address: IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
        :param pulumi.Input[_builtins.str] private_ipv4_address: Private IPv4 address for an internal load balancer.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if allocation_id is not None:
            pulumi.set(__self__, "allocation_id", allocation_id)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if outpost_id is not None:
            pulumi.set(__self__, "outpost_id", outpost_id)
        if private_ipv4_address is not None:
            pulumi.set(__self__, "private_ipv4_address", private_ipv4_address)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allocation ID of the Elastic IP address for an internet-facing load balancer.
        """
        return pulumi.get(self, "allocation_id")

    @allocation_id.setter
    def allocation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allocation_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="outpostId")
    def outpost_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "outpost_id")

    @outpost_id.setter
    def outpost_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "outpost_id", value)

    @_builtins.property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private IPv4 address for an internal load balancer.
        """
        return pulumi.get(self, "private_ipv4_address")

    @private_ipv4_address.setter
    def private_ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ipv4_address", value)


if not MYPY:
    class TargetGroupHealthCheckArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether health checks are enabled. Defaults to `true`.
        """
        healthy_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
        """
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
        """
        matcher: NotRequired[pulumi.Input[_builtins.str]]
        """
        The HTTP or gRPC codes to use when checking for a successful response from a target.
        The `health_check.protocol` must be one of `HTTP` or `HTTPS` or the `target_type` must be `lambda`.
        Values can be comma-separated individual values (e.g., "200,202") or a range of values (e.g., "200-299").
        * For gRPC-based target groups (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocol_version` is `GRPC`), values can be between `0` and `99`. The default is `12`.
        * When used with an Application Load Balancer (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocol_version` is not `GRPC`), values can be between `200` and `499`. The default is `200`.
        * When used with a Network Load Balancer (i.e., the `protocol` is one of `TCP`, `TCP_UDP`, `UDP`, or `TLS`), values can be between `200` and `599`. The default is `200-399`.
        * When the `target_type` is `lambda`, values can be between `200` and `499`. The default is `200`.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
        * For HTTP and HTTPS health checks, the default is `/`.
        * For gRPC health checks, the default is `/AWS.ALB/healthcheck`.
        """
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        The port the load balancer uses when performing health checks on targets.
        Valid values are either `traffic-port`, to use the same port as the target group, or a valid port number between `1` and `65536`.
        Default is `traffic-port`.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol the load balancer uses when performing health checks on targets.
        Must be one of `TCP`, `HTTP`, or `HTTPS`.
        The `TCP` protocol is not supported for health checks if the protocol of the target group is `HTTP` or `HTTPS`.
        Default is `HTTP`.
        Cannot be specified when the `target_type` is `lambda`.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
        """
        unhealthy_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
        """
elif False:
    TargetGroupHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TargetGroupHealthCheckArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 matcher: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] enabled: Whether health checks are enabled. Defaults to `true`.
        :param pulumi.Input[_builtins.int] healthy_threshold: Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
        :param pulumi.Input[_builtins.int] interval: Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
        :param pulumi.Input[_builtins.str] matcher: The HTTP or gRPC codes to use when checking for a successful response from a target.
               The `health_check.protocol` must be one of `HTTP` or `HTTPS` or the `target_type` must be `lambda`.
               Values can be comma-separated individual values (e.g., "200,202") or a range of values (e.g., "200-299").
               * For gRPC-based target groups (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocol_version` is `GRPC`), values can be between `0` and `99`. The default is `12`.
               * When used with an Application Load Balancer (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocol_version` is not `GRPC`), values can be between `200` and `499`. The default is `200`.
               * When used with a Network Load Balancer (i.e., the `protocol` is one of `TCP`, `TCP_UDP`, `UDP`, or `TLS`), values can be between `200` and `599`. The default is `200-399`.
               * When the `target_type` is `lambda`, values can be between `200` and `499`. The default is `200`.
        :param pulumi.Input[_builtins.str] path: Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
               * For HTTP and HTTPS health checks, the default is `/`.
               * For gRPC health checks, the default is `/AWS.ALB/healthcheck`.
        :param pulumi.Input[_builtins.str] port: The port the load balancer uses when performing health checks on targets.
               Valid values are either `traffic-port`, to use the same port as the target group, or a valid port number between `1` and `65536`.
               Default is `traffic-port`.
        :param pulumi.Input[_builtins.str] protocol: Protocol the load balancer uses when performing health checks on targets.
               Must be one of `TCP`, `HTTP`, or `HTTPS`.
               The `TCP` protocol is not supported for health checks if the protocol of the target group is `HTTP` or `HTTPS`.
               Default is `HTTP`.
               Cannot be specified when the `target_type` is `lambda`.
        :param pulumi.Input[_builtins.int] timeout: Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
        :param pulumi.Input[_builtins.int] unhealthy_threshold: Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if matcher is not None:
            pulumi.set(__self__, "matcher", matcher)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether health checks are enabled. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "healthy_threshold", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter
    def matcher(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The HTTP or gRPC codes to use when checking for a successful response from a target.
        The `health_check.protocol` must be one of `HTTP` or `HTTPS` or the `target_type` must be `lambda`.
        Values can be comma-separated individual values (e.g., "200,202") or a range of values (e.g., "200-299").
        * For gRPC-based target groups (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocol_version` is `GRPC`), values can be between `0` and `99`. The default is `12`.
        * When used with an Application Load Balancer (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocol_version` is not `GRPC`), values can be between `200` and `499`. The default is `200`.
        * When used with a Network Load Balancer (i.e., the `protocol` is one of `TCP`, `TCP_UDP`, `UDP`, or `TLS`), values can be between `200` and `599`. The default is `200-399`.
        * When the `target_type` is `lambda`, values can be between `200` and `499`. The default is `200`.
        """
        return pulumi.get(self, "matcher")

    @matcher.setter
    def matcher(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "matcher", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
        * For HTTP and HTTPS health checks, the default is `/`.
        * For gRPC health checks, the default is `/AWS.ALB/healthcheck`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The port the load balancer uses when performing health checks on targets.
        Valid values are either `traffic-port`, to use the same port as the target group, or a valid port number between `1` and `65536`.
        Default is `traffic-port`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol the load balancer uses when performing health checks on targets.
        Must be one of `TCP`, `HTTP`, or `HTTPS`.
        The `TCP` protocol is not supported for health checks if the protocol of the target group is `HTTP` or `HTTPS`.
        Default is `HTTP`.
        Cannot be specified when the `target_type` is `lambda`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unhealthy_threshold", value)


if not MYPY:
    class TargetGroupStickinessArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        The type of sticky sessions. The only current possible values are `lb_cookie`, `app_cookie` for ALBs, `source_ip` for NLBs, and `source_ip_dest_ip`, `source_ip_dest_ip_proto` for GWLBs.
        """
        cookie_duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        Only used when the type is `lb_cookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        """
        cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `app_cookie`.
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Boolean to enable / disable `stickiness`. Default is `true`.
        """
elif False:
    TargetGroupStickinessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TargetGroupStickinessArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 cookie_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] type: The type of sticky sessions. The only current possible values are `lb_cookie`, `app_cookie` for ALBs, `source_ip` for NLBs, and `source_ip_dest_ip`, `source_ip_dest_ip_proto` for GWLBs.
        :param pulumi.Input[_builtins.int] cookie_duration: Only used when the type is `lb_cookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        :param pulumi.Input[_builtins.str] cookie_name: Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `app_cookie`.
        :param pulumi.Input[_builtins.bool] enabled: Boolean to enable / disable `stickiness`. Default is `true`.
        """
        pulumi.set(__self__, "type", type)
        if cookie_duration is not None:
            pulumi.set(__self__, "cookie_duration", cookie_duration)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of sticky sessions. The only current possible values are `lb_cookie`, `app_cookie` for ALBs, `source_ip` for NLBs, and `source_ip_dest_ip`, `source_ip_dest_ip_proto` for GWLBs.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="cookieDuration")
    def cookie_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Only used when the type is `lb_cookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        """
        return pulumi.get(self, "cookie_duration")

    @cookie_duration.setter
    def cookie_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cookie_duration", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `app_cookie`.
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cookie_name", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean to enable / disable `stickiness`. Default is `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class TargetGroupTargetFailoverArgsDict(TypedDict):
        on_deregistration: pulumi.Input[_builtins.str]
        """
        Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_unhealthy`. Default: `no_rebalance`.
        """
        on_unhealthy: pulumi.Input[_builtins.str]
        """
        Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_deregistration`. Default: `no_rebalance`.
        """
elif False:
    TargetGroupTargetFailoverArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TargetGroupTargetFailoverArgs:
    def __init__(__self__, *,
                 on_deregistration: pulumi.Input[_builtins.str],
                 on_unhealthy: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] on_deregistration: Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_unhealthy`. Default: `no_rebalance`.
        :param pulumi.Input[_builtins.str] on_unhealthy: Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_deregistration`. Default: `no_rebalance`.
        """
        pulumi.set(__self__, "on_deregistration", on_deregistration)
        pulumi.set(__self__, "on_unhealthy", on_unhealthy)

    @_builtins.property
    @pulumi.getter(name="onDeregistration")
    def on_deregistration(self) -> pulumi.Input[_builtins.str]:
        """
        Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_unhealthy`. Default: `no_rebalance`.
        """
        return pulumi.get(self, "on_deregistration")

    @on_deregistration.setter
    def on_deregistration(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "on_deregistration", value)

    @_builtins.property
    @pulumi.getter(name="onUnhealthy")
    def on_unhealthy(self) -> pulumi.Input[_builtins.str]:
        """
        Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `no_rebalance`. Must match the attribute value set for `on_deregistration`. Default: `no_rebalance`.
        """
        return pulumi.get(self, "on_unhealthy")

    @on_unhealthy.setter
    def on_unhealthy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "on_unhealthy", value)


if not MYPY:
    class TargetGroupTargetGroupHealthArgsDict(TypedDict):
        dns_failover: NotRequired[pulumi.Input['TargetGroupTargetGroupHealthDnsFailoverArgsDict']]
        """
        Block to configure DNS Failover requirements. See DNS Failover below for details on attributes.
        """
        unhealthy_state_routing: NotRequired[pulumi.Input['TargetGroupTargetGroupHealthUnhealthyStateRoutingArgsDict']]
        """
        Block to configure Unhealthy State Routing requirements. See Unhealthy State Routing below for details on attributes.
        """
elif False:
    TargetGroupTargetGroupHealthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TargetGroupTargetGroupHealthArgs:
    def __init__(__self__, *,
                 dns_failover: Optional[pulumi.Input['TargetGroupTargetGroupHealthDnsFailoverArgs']] = None,
                 unhealthy_state_routing: Optional[pulumi.Input['TargetGroupTargetGroupHealthUnhealthyStateRoutingArgs']] = None):
        """
        :param pulumi.Input['TargetGroupTargetGroupHealthDnsFailoverArgs'] dns_failover: Block to configure DNS Failover requirements. See DNS Failover below for details on attributes.
        :param pulumi.Input['TargetGroupTargetGroupHealthUnhealthyStateRoutingArgs'] unhealthy_state_routing: Block to configure Unhealthy State Routing requirements. See Unhealthy State Routing below for details on attributes.
        """
        if dns_failover is not None:
            pulumi.set(__self__, "dns_failover", dns_failover)
        if unhealthy_state_routing is not None:
            pulumi.set(__self__, "unhealthy_state_routing", unhealthy_state_routing)

    @_builtins.property
    @pulumi.getter(name="dnsFailover")
    def dns_failover(self) -> Optional[pulumi.Input['TargetGroupTargetGroupHealthDnsFailoverArgs']]:
        """
        Block to configure DNS Failover requirements. See DNS Failover below for details on attributes.
        """
        return pulumi.get(self, "dns_failover")

    @dns_failover.setter
    def dns_failover(self, value: Optional[pulumi.Input['TargetGroupTargetGroupHealthDnsFailoverArgs']]):
        pulumi.set(self, "dns_failover", value)

    @_builtins.property
    @pulumi.getter(name="unhealthyStateRouting")
    def unhealthy_state_routing(self) -> Optional[pulumi.Input['TargetGroupTargetGroupHealthUnhealthyStateRoutingArgs']]:
        """
        Block to configure Unhealthy State Routing requirements. See Unhealthy State Routing below for details on attributes.
        """
        return pulumi.get(self, "unhealthy_state_routing")

    @unhealthy_state_routing.setter
    def unhealthy_state_routing(self, value: Optional[pulumi.Input['TargetGroupTargetGroupHealthUnhealthyStateRoutingArgs']]):
        pulumi.set(self, "unhealthy_state_routing", value)


if not MYPY:
    class TargetGroupTargetGroupHealthDnsFailoverArgsDict(TypedDict):
        minimum_healthy_targets_count: NotRequired[pulumi.Input[_builtins.str]]
        """
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to the maximum number of targets. The default is `off`.
        """
        minimum_healthy_targets_percentage: NotRequired[pulumi.Input[_builtins.str]]
        """
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
        """
elif False:
    TargetGroupTargetGroupHealthDnsFailoverArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TargetGroupTargetGroupHealthDnsFailoverArgs:
    def __init__(__self__, *,
                 minimum_healthy_targets_count: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_healthy_targets_percentage: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] minimum_healthy_targets_count: The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to the maximum number of targets. The default is `off`.
        :param pulumi.Input[_builtins.str] minimum_healthy_targets_percentage: The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
        """
        if minimum_healthy_targets_count is not None:
            pulumi.set(__self__, "minimum_healthy_targets_count", minimum_healthy_targets_count)
        if minimum_healthy_targets_percentage is not None:
            pulumi.set(__self__, "minimum_healthy_targets_percentage", minimum_healthy_targets_percentage)

    @_builtins.property
    @pulumi.getter(name="minimumHealthyTargetsCount")
    def minimum_healthy_targets_count(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to the maximum number of targets. The default is `off`.
        """
        return pulumi.get(self, "minimum_healthy_targets_count")

    @minimum_healthy_targets_count.setter
    def minimum_healthy_targets_count(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "minimum_healthy_targets_count", value)

    @_builtins.property
    @pulumi.getter(name="minimumHealthyTargetsPercentage")
    def minimum_healthy_targets_percentage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
        """
        return pulumi.get(self, "minimum_healthy_targets_percentage")

    @minimum_healthy_targets_percentage.setter
    def minimum_healthy_targets_percentage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "minimum_healthy_targets_percentage", value)


if not MYPY:
    class TargetGroupTargetGroupHealthUnhealthyStateRoutingArgsDict(TypedDict):
        minimum_healthy_targets_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are `1` to the maximum number of targets. The default is `1`.
        """
        minimum_healthy_targets_percentage: NotRequired[pulumi.Input[_builtins.str]]
        """
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
        """
elif False:
    TargetGroupTargetGroupHealthUnhealthyStateRoutingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TargetGroupTargetGroupHealthUnhealthyStateRoutingArgs:
    def __init__(__self__, *,
                 minimum_healthy_targets_count: Optional[pulumi.Input[_builtins.int]] = None,
                 minimum_healthy_targets_percentage: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] minimum_healthy_targets_count: The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are `1` to the maximum number of targets. The default is `1`.
        :param pulumi.Input[_builtins.str] minimum_healthy_targets_percentage: The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
        """
        if minimum_healthy_targets_count is not None:
            pulumi.set(__self__, "minimum_healthy_targets_count", minimum_healthy_targets_count)
        if minimum_healthy_targets_percentage is not None:
            pulumi.set(__self__, "minimum_healthy_targets_percentage", minimum_healthy_targets_percentage)

    @_builtins.property
    @pulumi.getter(name="minimumHealthyTargetsCount")
    def minimum_healthy_targets_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are `1` to the maximum number of targets. The default is `1`.
        """
        return pulumi.get(self, "minimum_healthy_targets_count")

    @minimum_healthy_targets_count.setter
    def minimum_healthy_targets_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "minimum_healthy_targets_count", value)

    @_builtins.property
    @pulumi.getter(name="minimumHealthyTargetsPercentage")
    def minimum_healthy_targets_percentage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are `off` or an integer from `1` to `100`. The default is `off`.
        """
        return pulumi.get(self, "minimum_healthy_targets_percentage")

    @minimum_healthy_targets_percentage.setter
    def minimum_healthy_targets_percentage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "minimum_healthy_targets_percentage", value)


if not MYPY:
    class TargetGroupTargetHealthStateArgsDict(TypedDict):
        enable_unhealthy_connection_termination: pulumi.Input[_builtins.bool]
        """
        Indicates whether the load balancer terminates connections to unhealthy targets. Possible values are `true` or `false`. Default: `true`.
        """
        unhealthy_draining_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the time to wait for in-flight requests to complete when a target becomes unhealthy. The range is `0-360000`. This value has to be set only if `enable_unhealthy_connection_termination` is set to false. Default: `0`.
        """
elif False:
    TargetGroupTargetHealthStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TargetGroupTargetHealthStateArgs:
    def __init__(__self__, *,
                 enable_unhealthy_connection_termination: pulumi.Input[_builtins.bool],
                 unhealthy_draining_interval: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable_unhealthy_connection_termination: Indicates whether the load balancer terminates connections to unhealthy targets. Possible values are `true` or `false`. Default: `true`.
        :param pulumi.Input[_builtins.int] unhealthy_draining_interval: Indicates the time to wait for in-flight requests to complete when a target becomes unhealthy. The range is `0-360000`. This value has to be set only if `enable_unhealthy_connection_termination` is set to false. Default: `0`.
        """
        pulumi.set(__self__, "enable_unhealthy_connection_termination", enable_unhealthy_connection_termination)
        if unhealthy_draining_interval is not None:
            pulumi.set(__self__, "unhealthy_draining_interval", unhealthy_draining_interval)

    @_builtins.property
    @pulumi.getter(name="enableUnhealthyConnectionTermination")
    def enable_unhealthy_connection_termination(self) -> pulumi.Input[_builtins.bool]:
        """
        Indicates whether the load balancer terminates connections to unhealthy targets. Possible values are `true` or `false`. Default: `true`.
        """
        return pulumi.get(self, "enable_unhealthy_connection_termination")

    @enable_unhealthy_connection_termination.setter
    def enable_unhealthy_connection_termination(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enable_unhealthy_connection_termination", value)

    @_builtins.property
    @pulumi.getter(name="unhealthyDrainingInterval")
    def unhealthy_draining_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the time to wait for in-flight requests to complete when a target becomes unhealthy. The range is `0-360000`. This value has to be set only if `enable_unhealthy_connection_termination` is set to false. Default: `0`.
        """
        return pulumi.get(self, "unhealthy_draining_interval")

    @unhealthy_draining_interval.setter
    def unhealthy_draining_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unhealthy_draining_interval", value)


if not MYPY:
    class GetListenerRuleActionArgsDict(TypedDict):
        order: _builtins.int
        """
        The evaluation order of the action.
        """
        type: _builtins.str
        """
        The type of the action, indicates which sub-block will be populated.
        """
        authenticate_cognitos: NotRequired[Sequence['GetListenerRuleActionAuthenticateCognitoArgsDict']]
        """
        An action to authenticate using Amazon Cognito.
        Detailed below.
        """
        authenticate_oidcs: NotRequired[Sequence['GetListenerRuleActionAuthenticateOidcArgsDict']]
        """
        An action to authenticate using OIDC.
        Detailed below.
        """
        fixed_responses: NotRequired[Sequence['GetListenerRuleActionFixedResponseArgsDict']]
        """
        An action to return a fixed response.
        Detailed below.
        """
        forwards: NotRequired[Sequence['GetListenerRuleActionForwardArgsDict']]
        """
        An action to forward the request.
        Detailed below.
        """
        redirects: NotRequired[Sequence['GetListenerRuleActionRedirectArgsDict']]
        """
        An action to redirect the request.
        Detailed below.
        """
elif False:
    GetListenerRuleActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleActionArgs:
    def __init__(__self__, *,
                 order: _builtins.int,
                 type: _builtins.str,
                 authenticate_cognitos: Optional[Sequence['GetListenerRuleActionAuthenticateCognitoArgs']] = None,
                 authenticate_oidcs: Optional[Sequence['GetListenerRuleActionAuthenticateOidcArgs']] = None,
                 fixed_responses: Optional[Sequence['GetListenerRuleActionFixedResponseArgs']] = None,
                 forwards: Optional[Sequence['GetListenerRuleActionForwardArgs']] = None,
                 redirects: Optional[Sequence['GetListenerRuleActionRedirectArgs']] = None):
        """
        :param _builtins.int order: The evaluation order of the action.
        :param _builtins.str type: The type of the action, indicates which sub-block will be populated.
        :param Sequence['GetListenerRuleActionAuthenticateCognitoArgs'] authenticate_cognitos: An action to authenticate using Amazon Cognito.
               Detailed below.
        :param Sequence['GetListenerRuleActionAuthenticateOidcArgs'] authenticate_oidcs: An action to authenticate using OIDC.
               Detailed below.
        :param Sequence['GetListenerRuleActionFixedResponseArgs'] fixed_responses: An action to return a fixed response.
               Detailed below.
        :param Sequence['GetListenerRuleActionForwardArgs'] forwards: An action to forward the request.
               Detailed below.
        :param Sequence['GetListenerRuleActionRedirectArgs'] redirects: An action to redirect the request.
               Detailed below.
        """
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "type", type)
        if authenticate_cognitos is not None:
            pulumi.set(__self__, "authenticate_cognitos", authenticate_cognitos)
        if authenticate_oidcs is not None:
            pulumi.set(__self__, "authenticate_oidcs", authenticate_oidcs)
        if fixed_responses is not None:
            pulumi.set(__self__, "fixed_responses", fixed_responses)
        if forwards is not None:
            pulumi.set(__self__, "forwards", forwards)
        if redirects is not None:
            pulumi.set(__self__, "redirects", redirects)

    @_builtins.property
    @pulumi.getter
    def order(self) -> _builtins.int:
        """
        The evaluation order of the action.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: _builtins.int):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the action, indicates which sub-block will be populated.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: _builtins.str):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="authenticateCognitos")
    def authenticate_cognitos(self) -> Optional[Sequence['GetListenerRuleActionAuthenticateCognitoArgs']]:
        """
        An action to authenticate using Amazon Cognito.
        Detailed below.
        """
        return pulumi.get(self, "authenticate_cognitos")

    @authenticate_cognitos.setter
    def authenticate_cognitos(self, value: Optional[Sequence['GetListenerRuleActionAuthenticateCognitoArgs']]):
        pulumi.set(self, "authenticate_cognitos", value)

    @_builtins.property
    @pulumi.getter(name="authenticateOidcs")
    def authenticate_oidcs(self) -> Optional[Sequence['GetListenerRuleActionAuthenticateOidcArgs']]:
        """
        An action to authenticate using OIDC.
        Detailed below.
        """
        return pulumi.get(self, "authenticate_oidcs")

    @authenticate_oidcs.setter
    def authenticate_oidcs(self, value: Optional[Sequence['GetListenerRuleActionAuthenticateOidcArgs']]):
        pulumi.set(self, "authenticate_oidcs", value)

    @_builtins.property
    @pulumi.getter(name="fixedResponses")
    def fixed_responses(self) -> Optional[Sequence['GetListenerRuleActionFixedResponseArgs']]:
        """
        An action to return a fixed response.
        Detailed below.
        """
        return pulumi.get(self, "fixed_responses")

    @fixed_responses.setter
    def fixed_responses(self, value: Optional[Sequence['GetListenerRuleActionFixedResponseArgs']]):
        pulumi.set(self, "fixed_responses", value)

    @_builtins.property
    @pulumi.getter
    def forwards(self) -> Optional[Sequence['GetListenerRuleActionForwardArgs']]:
        """
        An action to forward the request.
        Detailed below.
        """
        return pulumi.get(self, "forwards")

    @forwards.setter
    def forwards(self, value: Optional[Sequence['GetListenerRuleActionForwardArgs']]):
        pulumi.set(self, "forwards", value)

    @_builtins.property
    @pulumi.getter
    def redirects(self) -> Optional[Sequence['GetListenerRuleActionRedirectArgs']]:
        """
        An action to redirect the request.
        Detailed below.
        """
        return pulumi.get(self, "redirects")

    @redirects.setter
    def redirects(self, value: Optional[Sequence['GetListenerRuleActionRedirectArgs']]):
        pulumi.set(self, "redirects", value)


if not MYPY:
    class GetListenerRuleActionAuthenticateCognitoArgsDict(TypedDict):
        authentication_request_extra_params: Mapping[str, _builtins.str]
        """
        Set of additional parameters for the request.
        Detailed below.
        """
        on_unauthenticated_request: _builtins.str
        """
        Behavior when the client is not authenticated.
        """
        scope: _builtins.str
        """
        Set of user claims requested.
        """
        session_cookie_name: _builtins.str
        """
        Name of the cookie used to maintain session information.
        """
        session_timeout: _builtins.int
        """
        Maximum duration of the authentication session in seconds.
        """
        user_pool_arn: _builtins.str
        """
        ARN of the Cognito user pool.
        """
        user_pool_client_id: _builtins.str
        """
        ID of the Cognito user pool client.
        """
        user_pool_domain: _builtins.str
        """
        Domain prefix or fully-qualified domain name of the Cognito user pool.
        """
elif False:
    GetListenerRuleActionAuthenticateCognitoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleActionAuthenticateCognitoArgs:
    def __init__(__self__, *,
                 authentication_request_extra_params: Mapping[str, _builtins.str],
                 on_unauthenticated_request: _builtins.str,
                 scope: _builtins.str,
                 session_cookie_name: _builtins.str,
                 session_timeout: _builtins.int,
                 user_pool_arn: _builtins.str,
                 user_pool_client_id: _builtins.str,
                 user_pool_domain: _builtins.str):
        """
        :param Mapping[str, _builtins.str] authentication_request_extra_params: Set of additional parameters for the request.
               Detailed below.
        :param _builtins.str on_unauthenticated_request: Behavior when the client is not authenticated.
        :param _builtins.str scope: Set of user claims requested.
        :param _builtins.str session_cookie_name: Name of the cookie used to maintain session information.
        :param _builtins.int session_timeout: Maximum duration of the authentication session in seconds.
        :param _builtins.str user_pool_arn: ARN of the Cognito user pool.
        :param _builtins.str user_pool_client_id: ID of the Cognito user pool client.
        :param _builtins.str user_pool_domain: Domain prefix or fully-qualified domain name of the Cognito user pool.
        """
        pulumi.set(__self__, "authentication_request_extra_params", authentication_request_extra_params)
        pulumi.set(__self__, "on_unauthenticated_request", on_unauthenticated_request)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        pulumi.set(__self__, "session_timeout", session_timeout)
        pulumi.set(__self__, "user_pool_arn", user_pool_arn)
        pulumi.set(__self__, "user_pool_client_id", user_pool_client_id)
        pulumi.set(__self__, "user_pool_domain", user_pool_domain)

    @_builtins.property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Mapping[str, _builtins.str]:
        """
        Set of additional parameters for the request.
        Detailed below.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, value: Mapping[str, _builtins.str]):
        pulumi.set(self, "authentication_request_extra_params", value)

    @_builtins.property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> _builtins.str:
        """
        Behavior when the client is not authenticated.
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, value: _builtins.str):
        pulumi.set(self, "on_unauthenticated_request", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        Set of user claims requested.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: _builtins.str):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> _builtins.str:
        """
        Name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: _builtins.str):
        pulumi.set(self, "session_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> _builtins.int:
        """
        Maximum duration of the authentication session in seconds.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: _builtins.int):
        pulumi.set(self, "session_timeout", value)

    @_builtins.property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> _builtins.str:
        """
        ARN of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_arn")

    @user_pool_arn.setter
    def user_pool_arn(self, value: _builtins.str):
        pulumi.set(self, "user_pool_arn", value)

    @_builtins.property
    @pulumi.getter(name="userPoolClientId")
    def user_pool_client_id(self) -> _builtins.str:
        """
        ID of the Cognito user pool client.
        """
        return pulumi.get(self, "user_pool_client_id")

    @user_pool_client_id.setter
    def user_pool_client_id(self, value: _builtins.str):
        pulumi.set(self, "user_pool_client_id", value)

    @_builtins.property
    @pulumi.getter(name="userPoolDomain")
    def user_pool_domain(self) -> _builtins.str:
        """
        Domain prefix or fully-qualified domain name of the Cognito user pool.
        """
        return pulumi.get(self, "user_pool_domain")

    @user_pool_domain.setter
    def user_pool_domain(self, value: _builtins.str):
        pulumi.set(self, "user_pool_domain", value)


if not MYPY:
    class GetListenerRuleActionAuthenticateOidcArgsDict(TypedDict):
        authentication_request_extra_params: Mapping[str, _builtins.str]
        """
        Set of additional parameters for the request.
        Detailed below.
        """
        authorization_endpoint: _builtins.str
        """
        The authorization endpoint of the IdP.
        """
        client_id: _builtins.str
        """
        OAuth 2.0 client identifier.
        """
        issuer: _builtins.str
        """
        OIDC issuer identifier of the IdP.
        """
        on_unauthenticated_request: _builtins.str
        """
        Behavior when the client is not authenticated.
        """
        scope: _builtins.str
        """
        Set of user claims requested.
        """
        session_cookie_name: _builtins.str
        """
        Name of the cookie used to maintain session information.
        """
        session_timeout: _builtins.int
        """
        Maximum duration of the authentication session in seconds.
        """
        token_endpoint: _builtins.str
        """
        The token endpoint of the IdP.
        """
        user_info_endpoint: _builtins.str
        """
        The user info endpoint of the IdP.
        """
elif False:
    GetListenerRuleActionAuthenticateOidcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleActionAuthenticateOidcArgs:
    def __init__(__self__, *,
                 authentication_request_extra_params: Mapping[str, _builtins.str],
                 authorization_endpoint: _builtins.str,
                 client_id: _builtins.str,
                 issuer: _builtins.str,
                 on_unauthenticated_request: _builtins.str,
                 scope: _builtins.str,
                 session_cookie_name: _builtins.str,
                 session_timeout: _builtins.int,
                 token_endpoint: _builtins.str,
                 user_info_endpoint: _builtins.str):
        """
        :param Mapping[str, _builtins.str] authentication_request_extra_params: Set of additional parameters for the request.
               Detailed below.
        :param _builtins.str authorization_endpoint: The authorization endpoint of the IdP.
        :param _builtins.str client_id: OAuth 2.0 client identifier.
        :param _builtins.str issuer: OIDC issuer identifier of the IdP.
        :param _builtins.str on_unauthenticated_request: Behavior when the client is not authenticated.
        :param _builtins.str scope: Set of user claims requested.
        :param _builtins.str session_cookie_name: Name of the cookie used to maintain session information.
        :param _builtins.int session_timeout: Maximum duration of the authentication session in seconds.
        :param _builtins.str token_endpoint: The token endpoint of the IdP.
        :param _builtins.str user_info_endpoint: The user info endpoint of the IdP.
        """
        pulumi.set(__self__, "authentication_request_extra_params", authentication_request_extra_params)
        pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "on_unauthenticated_request", on_unauthenticated_request)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        pulumi.set(__self__, "session_timeout", session_timeout)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)

    @_builtins.property
    @pulumi.getter(name="authenticationRequestExtraParams")
    def authentication_request_extra_params(self) -> Mapping[str, _builtins.str]:
        """
        Set of additional parameters for the request.
        Detailed below.
        """
        return pulumi.get(self, "authentication_request_extra_params")

    @authentication_request_extra_params.setter
    def authentication_request_extra_params(self, value: Mapping[str, _builtins.str]):
        pulumi.set(self, "authentication_request_extra_params", value)

    @_builtins.property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> _builtins.str:
        """
        The authorization endpoint of the IdP.
        """
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: _builtins.str):
        pulumi.set(self, "authorization_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        OAuth 2.0 client identifier.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: _builtins.str):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        """
        OIDC issuer identifier of the IdP.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: _builtins.str):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter(name="onUnauthenticatedRequest")
    def on_unauthenticated_request(self) -> _builtins.str:
        """
        Behavior when the client is not authenticated.
        """
        return pulumi.get(self, "on_unauthenticated_request")

    @on_unauthenticated_request.setter
    def on_unauthenticated_request(self, value: _builtins.str):
        pulumi.set(self, "on_unauthenticated_request", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        Set of user claims requested.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: _builtins.str):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> _builtins.str:
        """
        Name of the cookie used to maintain session information.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: _builtins.str):
        pulumi.set(self, "session_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> _builtins.int:
        """
        Maximum duration of the authentication session in seconds.
        """
        return pulumi.get(self, "session_timeout")

    @session_timeout.setter
    def session_timeout(self, value: _builtins.int):
        pulumi.set(self, "session_timeout", value)

    @_builtins.property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> _builtins.str:
        """
        The token endpoint of the IdP.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: _builtins.str):
        pulumi.set(self, "token_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> _builtins.str:
        """
        The user info endpoint of the IdP.
        """
        return pulumi.get(self, "user_info_endpoint")

    @user_info_endpoint.setter
    def user_info_endpoint(self, value: _builtins.str):
        pulumi.set(self, "user_info_endpoint", value)


if not MYPY:
    class GetListenerRuleActionFixedResponseArgsDict(TypedDict):
        content_type: _builtins.str
        """
        Content type of the response.
        """
        message_body: _builtins.str
        """
        Message body of the response.
        """
        status_code: _builtins.str
        """
        The HTTP redirect code.
        """
elif False:
    GetListenerRuleActionFixedResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleActionFixedResponseArgs:
    def __init__(__self__, *,
                 content_type: _builtins.str,
                 message_body: _builtins.str,
                 status_code: _builtins.str):
        """
        :param _builtins.str content_type: Content type of the response.
        :param _builtins.str message_body: Message body of the response.
        :param _builtins.str status_code: The HTTP redirect code.
        """
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "message_body", message_body)
        pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> _builtins.str:
        """
        Content type of the response.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: _builtins.str):
        pulumi.set(self, "content_type", value)

    @_builtins.property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> _builtins.str:
        """
        Message body of the response.
        """
        return pulumi.get(self, "message_body")

    @message_body.setter
    def message_body(self, value: _builtins.str):
        pulumi.set(self, "message_body", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        """
        The HTTP redirect code.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: _builtins.str):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class GetListenerRuleActionForwardArgsDict(TypedDict):
        stickinesses: NotRequired[Sequence['GetListenerRuleActionForwardStickinessArgsDict']]
        """
        Target group stickiness for the rule.
        Detailed below.
        """
        target_groups: NotRequired[Sequence['GetListenerRuleActionForwardTargetGroupArgsDict']]
        """
        Set of target groups for the action.
        Detailed below.
        """
elif False:
    GetListenerRuleActionForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleActionForwardArgs:
    def __init__(__self__, *,
                 stickinesses: Optional[Sequence['GetListenerRuleActionForwardStickinessArgs']] = None,
                 target_groups: Optional[Sequence['GetListenerRuleActionForwardTargetGroupArgs']] = None):
        """
        :param Sequence['GetListenerRuleActionForwardStickinessArgs'] stickinesses: Target group stickiness for the rule.
               Detailed below.
        :param Sequence['GetListenerRuleActionForwardTargetGroupArgs'] target_groups: Set of target groups for the action.
               Detailed below.
        """
        if stickinesses is not None:
            pulumi.set(__self__, "stickinesses", stickinesses)
        if target_groups is not None:
            pulumi.set(__self__, "target_groups", target_groups)

    @_builtins.property
    @pulumi.getter
    def stickinesses(self) -> Optional[Sequence['GetListenerRuleActionForwardStickinessArgs']]:
        """
        Target group stickiness for the rule.
        Detailed below.
        """
        return pulumi.get(self, "stickinesses")

    @stickinesses.setter
    def stickinesses(self, value: Optional[Sequence['GetListenerRuleActionForwardStickinessArgs']]):
        pulumi.set(self, "stickinesses", value)

    @_builtins.property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Optional[Sequence['GetListenerRuleActionForwardTargetGroupArgs']]:
        """
        Set of target groups for the action.
        Detailed below.
        """
        return pulumi.get(self, "target_groups")

    @target_groups.setter
    def target_groups(self, value: Optional[Sequence['GetListenerRuleActionForwardTargetGroupArgs']]):
        pulumi.set(self, "target_groups", value)


if not MYPY:
    class GetListenerRuleActionForwardStickinessArgsDict(TypedDict):
        duration: _builtins.int
        """
        The time period, in seconds, during which requests from a client should be routed to the same target group.
        """
        enabled: _builtins.bool
        """
        Indicates whether target group stickiness is enabled.
        """
elif False:
    GetListenerRuleActionForwardStickinessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleActionForwardStickinessArgs:
    def __init__(__self__, *,
                 duration: _builtins.int,
                 enabled: _builtins.bool):
        """
        :param _builtins.int duration: The time period, in seconds, during which requests from a client should be routed to the same target group.
        :param _builtins.bool enabled: Indicates whether target group stickiness is enabled.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.int:
        """
        The time period, in seconds, during which requests from a client should be routed to the same target group.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: _builtins.int):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Indicates whether target group stickiness is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: _builtins.bool):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class GetListenerRuleActionForwardTargetGroupArgsDict(TypedDict):
        arn: _builtins.str
        """
        ARN of the Listener Rule.
        Either `arn` or `listener_arn` must be set.
        """
        weight: _builtins.int
        """
        Weight of the target group.
        """
elif False:
    GetListenerRuleActionForwardTargetGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleActionForwardTargetGroupArgs:
    def __init__(__self__, *,
                 arn: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str arn: ARN of the Listener Rule.
               Either `arn` or `listener_arn` must be set.
        :param _builtins.int weight: Weight of the target group.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN of the Listener Rule.
        Either `arn` or `listener_arn` must be set.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: _builtins.str):
        pulumi.set(self, "arn", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Weight of the target group.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: _builtins.int):
        pulumi.set(self, "weight", value)


if not MYPY:
    class GetListenerRuleActionRedirectArgsDict(TypedDict):
        host: _builtins.str
        """
        The hostname.
        """
        path: _builtins.str
        """
        The absolute path, starting with `/`.
        """
        port: _builtins.str
        """
        The port.
        """
        protocol: _builtins.str
        """
        The protocol.
        """
        query: _builtins.str
        """
        The query parameters.
        """
        status_code: _builtins.str
        """
        The HTTP redirect code.
        """
elif False:
    GetListenerRuleActionRedirectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleActionRedirectArgs:
    def __init__(__self__, *,
                 host: _builtins.str,
                 path: _builtins.str,
                 port: _builtins.str,
                 protocol: _builtins.str,
                 query: _builtins.str,
                 status_code: _builtins.str):
        """
        :param _builtins.str host: The hostname.
        :param _builtins.str path: The absolute path, starting with `/`.
        :param _builtins.str port: The port.
        :param _builtins.str protocol: The protocol.
        :param _builtins.str query: The query parameters.
        :param _builtins.str status_code: The HTTP redirect code.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The hostname.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: _builtins.str):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The absolute path, starting with `/`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: _builtins.str):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        The port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: _builtins.str):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: _builtins.str):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def query(self) -> _builtins.str:
        """
        The query parameters.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: _builtins.str):
        pulumi.set(self, "query", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        """
        The HTTP redirect code.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: _builtins.str):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class GetListenerRuleConditionArgsDict(TypedDict):
        host_headers: NotRequired[Sequence['GetListenerRuleConditionHostHeaderArgsDict']]
        """
        Contains a single attribute `values`, which contains a set of host names.
        """
        http_headers: NotRequired[Sequence['GetListenerRuleConditionHttpHeaderArgsDict']]
        """
        HTTP header and values to match.
        Detailed below.
        """
        http_request_methods: NotRequired[Sequence['GetListenerRuleConditionHttpRequestMethodArgsDict']]
        """
        Contains a single attribute `values`, which contains a set of HTTP request methods.
        """
        path_patterns: NotRequired[Sequence['GetListenerRuleConditionPathPatternArgsDict']]
        """
        Contains a single attribute `values`, which contains a set of path patterns to compare against the request URL.
        """
        query_strings: NotRequired[Sequence['GetListenerRuleConditionQueryStringArgsDict']]
        """
        Query string parameters to match.
        Detailed below.
        """
        source_ips: NotRequired[Sequence['GetListenerRuleConditionSourceIpArgsDict']]
        """
        Contains a single attribute `values`, which contains a set of source IPs in CIDR notation.
        """
elif False:
    GetListenerRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleConditionArgs:
    def __init__(__self__, *,
                 host_headers: Optional[Sequence['GetListenerRuleConditionHostHeaderArgs']] = None,
                 http_headers: Optional[Sequence['GetListenerRuleConditionHttpHeaderArgs']] = None,
                 http_request_methods: Optional[Sequence['GetListenerRuleConditionHttpRequestMethodArgs']] = None,
                 path_patterns: Optional[Sequence['GetListenerRuleConditionPathPatternArgs']] = None,
                 query_strings: Optional[Sequence['GetListenerRuleConditionQueryStringArgs']] = None,
                 source_ips: Optional[Sequence['GetListenerRuleConditionSourceIpArgs']] = None):
        """
        :param Sequence['GetListenerRuleConditionHostHeaderArgs'] host_headers: Contains a single attribute `values`, which contains a set of host names.
        :param Sequence['GetListenerRuleConditionHttpHeaderArgs'] http_headers: HTTP header and values to match.
               Detailed below.
        :param Sequence['GetListenerRuleConditionHttpRequestMethodArgs'] http_request_methods: Contains a single attribute `values`, which contains a set of HTTP request methods.
        :param Sequence['GetListenerRuleConditionPathPatternArgs'] path_patterns: Contains a single attribute `values`, which contains a set of path patterns to compare against the request URL.
        :param Sequence['GetListenerRuleConditionQueryStringArgs'] query_strings: Query string parameters to match.
               Detailed below.
        :param Sequence['GetListenerRuleConditionSourceIpArgs'] source_ips: Contains a single attribute `values`, which contains a set of source IPs in CIDR notation.
        """
        if host_headers is not None:
            pulumi.set(__self__, "host_headers", host_headers)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if http_request_methods is not None:
            pulumi.set(__self__, "http_request_methods", http_request_methods)
        if path_patterns is not None:
            pulumi.set(__self__, "path_patterns", path_patterns)
        if query_strings is not None:
            pulumi.set(__self__, "query_strings", query_strings)
        if source_ips is not None:
            pulumi.set(__self__, "source_ips", source_ips)

    @_builtins.property
    @pulumi.getter(name="hostHeaders")
    def host_headers(self) -> Optional[Sequence['GetListenerRuleConditionHostHeaderArgs']]:
        """
        Contains a single attribute `values`, which contains a set of host names.
        """
        return pulumi.get(self, "host_headers")

    @host_headers.setter
    def host_headers(self, value: Optional[Sequence['GetListenerRuleConditionHostHeaderArgs']]):
        pulumi.set(self, "host_headers", value)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['GetListenerRuleConditionHttpHeaderArgs']]:
        """
        HTTP header and values to match.
        Detailed below.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[Sequence['GetListenerRuleConditionHttpHeaderArgs']]):
        pulumi.set(self, "http_headers", value)

    @_builtins.property
    @pulumi.getter(name="httpRequestMethods")
    def http_request_methods(self) -> Optional[Sequence['GetListenerRuleConditionHttpRequestMethodArgs']]:
        """
        Contains a single attribute `values`, which contains a set of HTTP request methods.
        """
        return pulumi.get(self, "http_request_methods")

    @http_request_methods.setter
    def http_request_methods(self, value: Optional[Sequence['GetListenerRuleConditionHttpRequestMethodArgs']]):
        pulumi.set(self, "http_request_methods", value)

    @_builtins.property
    @pulumi.getter(name="pathPatterns")
    def path_patterns(self) -> Optional[Sequence['GetListenerRuleConditionPathPatternArgs']]:
        """
        Contains a single attribute `values`, which contains a set of path patterns to compare against the request URL.
        """
        return pulumi.get(self, "path_patterns")

    @path_patterns.setter
    def path_patterns(self, value: Optional[Sequence['GetListenerRuleConditionPathPatternArgs']]):
        pulumi.set(self, "path_patterns", value)

    @_builtins.property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Optional[Sequence['GetListenerRuleConditionQueryStringArgs']]:
        """
        Query string parameters to match.
        Detailed below.
        """
        return pulumi.get(self, "query_strings")

    @query_strings.setter
    def query_strings(self, value: Optional[Sequence['GetListenerRuleConditionQueryStringArgs']]):
        pulumi.set(self, "query_strings", value)

    @_builtins.property
    @pulumi.getter(name="sourceIps")
    def source_ips(self) -> Optional[Sequence['GetListenerRuleConditionSourceIpArgs']]:
        """
        Contains a single attribute `values`, which contains a set of source IPs in CIDR notation.
        """
        return pulumi.get(self, "source_ips")

    @source_ips.setter
    def source_ips(self, value: Optional[Sequence['GetListenerRuleConditionSourceIpArgs']]):
        pulumi.set(self, "source_ips", value)


if not MYPY:
    class GetListenerRuleConditionHostHeaderArgsDict(TypedDict):
        values: Sequence[_builtins.str]
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
elif False:
    GetListenerRuleConditionHostHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleConditionHostHeaderArgs:
    def __init__(__self__, *,
                 values: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] values: Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetListenerRuleConditionHttpHeaderArgsDict(TypedDict):
        http_header_name: _builtins.str
        """
        Name of the HTTP header to match.
        """
        values: Sequence[_builtins.str]
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
elif False:
    GetListenerRuleConditionHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleConditionHttpHeaderArgs:
    def __init__(__self__, *,
                 http_header_name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str http_header_name: Name of the HTTP header to match.
        :param Sequence[_builtins.str] values: Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        pulumi.set(__self__, "http_header_name", http_header_name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> _builtins.str:
        """
        Name of the HTTP header to match.
        """
        return pulumi.get(self, "http_header_name")

    @http_header_name.setter
    def http_header_name(self, value: _builtins.str):
        pulumi.set(self, "http_header_name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetListenerRuleConditionHttpRequestMethodArgsDict(TypedDict):
        values: Sequence[_builtins.str]
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
elif False:
    GetListenerRuleConditionHttpRequestMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleConditionHttpRequestMethodArgs:
    def __init__(__self__, *,
                 values: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] values: Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetListenerRuleConditionPathPatternArgsDict(TypedDict):
        values: Sequence[_builtins.str]
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
elif False:
    GetListenerRuleConditionPathPatternArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleConditionPathPatternArgs:
    def __init__(__self__, *,
                 values: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] values: Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetListenerRuleConditionQueryStringArgsDict(TypedDict):
        values: NotRequired[Sequence['GetListenerRuleConditionQueryStringValueArgsDict']]
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
elif False:
    GetListenerRuleConditionQueryStringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleConditionQueryStringArgs:
    def __init__(__self__, *,
                 values: Optional[Sequence['GetListenerRuleConditionQueryStringValueArgs']] = None):
        """
        :param Sequence['GetListenerRuleConditionQueryStringValueArgs'] values: Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence['GetListenerRuleConditionQueryStringValueArgs']]:
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence['GetListenerRuleConditionQueryStringValueArgs']]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetListenerRuleConditionQueryStringValueArgsDict(TypedDict):
        key: _builtins.str
        """
        Key of query parameter
        """
        value: _builtins.str
        """
        Value of query parameter
        """
elif False:
    GetListenerRuleConditionQueryStringValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleConditionQueryStringValueArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Key of query parameter
        :param _builtins.str value: Value of query parameter
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Key of query parameter
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of query parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetListenerRuleConditionSourceIpArgsDict(TypedDict):
        values: Sequence[_builtins.str]
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
elif False:
    GetListenerRuleConditionSourceIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetListenerRuleConditionSourceIpArgs:
    def __init__(__self__, *,
                 values: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] values: Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        """
        Set of `key`-`value` pairs indicating the query string parameters to match.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)


