# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventTargetArgs', 'EventTarget']

@pulumi.input_type
class EventTargetArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 rule: pulumi.Input[str],
                 batch_target: Optional[pulumi.Input['EventTargetBatchTargetArgs']] = None,
                 dead_letter_config: Optional[pulumi.Input['EventTargetDeadLetterConfigArgs']] = None,
                 ecs_target: Optional[pulumi.Input['EventTargetEcsTargetArgs']] = None,
                 event_bus_name: Optional[pulumi.Input[str]] = None,
                 http_target: Optional[pulumi.Input['EventTargetHttpTargetArgs']] = None,
                 input: Optional[pulumi.Input[str]] = None,
                 input_path: Optional[pulumi.Input[str]] = None,
                 input_transformer: Optional[pulumi.Input['EventTargetInputTransformerArgs']] = None,
                 kinesis_target: Optional[pulumi.Input['EventTargetKinesisTargetArgs']] = None,
                 redshift_target: Optional[pulumi.Input['EventTargetRedshiftTargetArgs']] = None,
                 retry_policy: Optional[pulumi.Input['EventTargetRetryPolicyArgs']] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 run_command_targets: Optional[pulumi.Input[Sequence[pulumi.Input['EventTargetRunCommandTargetArgs']]]] = None,
                 sqs_target: Optional[pulumi.Input['EventTargetSqsTargetArgs']] = None,
                 target_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EventTarget resource.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "rule", rule)
        if batch_target is not None:
            pulumi.set(__self__, "batch_target", batch_target)
        if dead_letter_config is not None:
            pulumi.set(__self__, "dead_letter_config", dead_letter_config)
        if ecs_target is not None:
            pulumi.set(__self__, "ecs_target", ecs_target)
        if event_bus_name is not None:
            pulumi.set(__self__, "event_bus_name", event_bus_name)
        if http_target is not None:
            pulumi.set(__self__, "http_target", http_target)
        if input is not None:
            pulumi.set(__self__, "input", input)
        if input_path is not None:
            pulumi.set(__self__, "input_path", input_path)
        if input_transformer is not None:
            pulumi.set(__self__, "input_transformer", input_transformer)
        if kinesis_target is not None:
            pulumi.set(__self__, "kinesis_target", kinesis_target)
        if redshift_target is not None:
            pulumi.set(__self__, "redshift_target", redshift_target)
        if retry_policy is not None:
            pulumi.set(__self__, "retry_policy", retry_policy)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if run_command_targets is not None:
            pulumi.set(__self__, "run_command_targets", run_command_targets)
        if sqs_target is not None:
            pulumi.set(__self__, "sqs_target", sqs_target)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="batchTarget")
    def batch_target(self) -> Optional[pulumi.Input['EventTargetBatchTargetArgs']]:
        return pulumi.get(self, "batch_target")

    @batch_target.setter
    def batch_target(self, value: Optional[pulumi.Input['EventTargetBatchTargetArgs']]):
        pulumi.set(self, "batch_target", value)

    @property
    @pulumi.getter(name="deadLetterConfig")
    def dead_letter_config(self) -> Optional[pulumi.Input['EventTargetDeadLetterConfigArgs']]:
        return pulumi.get(self, "dead_letter_config")

    @dead_letter_config.setter
    def dead_letter_config(self, value: Optional[pulumi.Input['EventTargetDeadLetterConfigArgs']]):
        pulumi.set(self, "dead_letter_config", value)

    @property
    @pulumi.getter(name="ecsTarget")
    def ecs_target(self) -> Optional[pulumi.Input['EventTargetEcsTargetArgs']]:
        return pulumi.get(self, "ecs_target")

    @ecs_target.setter
    def ecs_target(self, value: Optional[pulumi.Input['EventTargetEcsTargetArgs']]):
        pulumi.set(self, "ecs_target", value)

    @property
    @pulumi.getter(name="eventBusName")
    def event_bus_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_bus_name")

    @event_bus_name.setter
    def event_bus_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_bus_name", value)

    @property
    @pulumi.getter(name="httpTarget")
    def http_target(self) -> Optional[pulumi.Input['EventTargetHttpTargetArgs']]:
        return pulumi.get(self, "http_target")

    @http_target.setter
    def http_target(self, value: Optional[pulumi.Input['EventTargetHttpTargetArgs']]):
        pulumi.set(self, "http_target", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input", value)

    @property
    @pulumi.getter(name="inputPath")
    def input_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_path")

    @input_path.setter
    def input_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_path", value)

    @property
    @pulumi.getter(name="inputTransformer")
    def input_transformer(self) -> Optional[pulumi.Input['EventTargetInputTransformerArgs']]:
        return pulumi.get(self, "input_transformer")

    @input_transformer.setter
    def input_transformer(self, value: Optional[pulumi.Input['EventTargetInputTransformerArgs']]):
        pulumi.set(self, "input_transformer", value)

    @property
    @pulumi.getter(name="kinesisTarget")
    def kinesis_target(self) -> Optional[pulumi.Input['EventTargetKinesisTargetArgs']]:
        return pulumi.get(self, "kinesis_target")

    @kinesis_target.setter
    def kinesis_target(self, value: Optional[pulumi.Input['EventTargetKinesisTargetArgs']]):
        pulumi.set(self, "kinesis_target", value)

    @property
    @pulumi.getter(name="redshiftTarget")
    def redshift_target(self) -> Optional[pulumi.Input['EventTargetRedshiftTargetArgs']]:
        return pulumi.get(self, "redshift_target")

    @redshift_target.setter
    def redshift_target(self, value: Optional[pulumi.Input['EventTargetRedshiftTargetArgs']]):
        pulumi.set(self, "redshift_target", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['EventTargetRetryPolicyArgs']]:
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['EventTargetRetryPolicyArgs']]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="runCommandTargets")
    def run_command_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventTargetRunCommandTargetArgs']]]]:
        return pulumi.get(self, "run_command_targets")

    @run_command_targets.setter
    def run_command_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventTargetRunCommandTargetArgs']]]]):
        pulumi.set(self, "run_command_targets", value)

    @property
    @pulumi.getter(name="sqsTarget")
    def sqs_target(self) -> Optional[pulumi.Input['EventTargetSqsTargetArgs']]:
        return pulumi.get(self, "sqs_target")

    @sqs_target.setter
    def sqs_target(self, value: Optional[pulumi.Input['EventTargetSqsTargetArgs']]):
        pulumi.set(self, "sqs_target", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)


@pulumi.input_type
class _EventTargetState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 batch_target: Optional[pulumi.Input['EventTargetBatchTargetArgs']] = None,
                 dead_letter_config: Optional[pulumi.Input['EventTargetDeadLetterConfigArgs']] = None,
                 ecs_target: Optional[pulumi.Input['EventTargetEcsTargetArgs']] = None,
                 event_bus_name: Optional[pulumi.Input[str]] = None,
                 http_target: Optional[pulumi.Input['EventTargetHttpTargetArgs']] = None,
                 input: Optional[pulumi.Input[str]] = None,
                 input_path: Optional[pulumi.Input[str]] = None,
                 input_transformer: Optional[pulumi.Input['EventTargetInputTransformerArgs']] = None,
                 kinesis_target: Optional[pulumi.Input['EventTargetKinesisTargetArgs']] = None,
                 redshift_target: Optional[pulumi.Input['EventTargetRedshiftTargetArgs']] = None,
                 retry_policy: Optional[pulumi.Input['EventTargetRetryPolicyArgs']] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None,
                 run_command_targets: Optional[pulumi.Input[Sequence[pulumi.Input['EventTargetRunCommandTargetArgs']]]] = None,
                 sqs_target: Optional[pulumi.Input['EventTargetSqsTargetArgs']] = None,
                 target_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EventTarget resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if batch_target is not None:
            pulumi.set(__self__, "batch_target", batch_target)
        if dead_letter_config is not None:
            pulumi.set(__self__, "dead_letter_config", dead_letter_config)
        if ecs_target is not None:
            pulumi.set(__self__, "ecs_target", ecs_target)
        if event_bus_name is not None:
            pulumi.set(__self__, "event_bus_name", event_bus_name)
        if http_target is not None:
            pulumi.set(__self__, "http_target", http_target)
        if input is not None:
            pulumi.set(__self__, "input", input)
        if input_path is not None:
            pulumi.set(__self__, "input_path", input_path)
        if input_transformer is not None:
            pulumi.set(__self__, "input_transformer", input_transformer)
        if kinesis_target is not None:
            pulumi.set(__self__, "kinesis_target", kinesis_target)
        if redshift_target is not None:
            pulumi.set(__self__, "redshift_target", redshift_target)
        if retry_policy is not None:
            pulumi.set(__self__, "retry_policy", retry_policy)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if run_command_targets is not None:
            pulumi.set(__self__, "run_command_targets", run_command_targets)
        if sqs_target is not None:
            pulumi.set(__self__, "sqs_target", sqs_target)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="batchTarget")
    def batch_target(self) -> Optional[pulumi.Input['EventTargetBatchTargetArgs']]:
        return pulumi.get(self, "batch_target")

    @batch_target.setter
    def batch_target(self, value: Optional[pulumi.Input['EventTargetBatchTargetArgs']]):
        pulumi.set(self, "batch_target", value)

    @property
    @pulumi.getter(name="deadLetterConfig")
    def dead_letter_config(self) -> Optional[pulumi.Input['EventTargetDeadLetterConfigArgs']]:
        return pulumi.get(self, "dead_letter_config")

    @dead_letter_config.setter
    def dead_letter_config(self, value: Optional[pulumi.Input['EventTargetDeadLetterConfigArgs']]):
        pulumi.set(self, "dead_letter_config", value)

    @property
    @pulumi.getter(name="ecsTarget")
    def ecs_target(self) -> Optional[pulumi.Input['EventTargetEcsTargetArgs']]:
        return pulumi.get(self, "ecs_target")

    @ecs_target.setter
    def ecs_target(self, value: Optional[pulumi.Input['EventTargetEcsTargetArgs']]):
        pulumi.set(self, "ecs_target", value)

    @property
    @pulumi.getter(name="eventBusName")
    def event_bus_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_bus_name")

    @event_bus_name.setter
    def event_bus_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_bus_name", value)

    @property
    @pulumi.getter(name="httpTarget")
    def http_target(self) -> Optional[pulumi.Input['EventTargetHttpTargetArgs']]:
        return pulumi.get(self, "http_target")

    @http_target.setter
    def http_target(self, value: Optional[pulumi.Input['EventTargetHttpTargetArgs']]):
        pulumi.set(self, "http_target", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input", value)

    @property
    @pulumi.getter(name="inputPath")
    def input_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_path")

    @input_path.setter
    def input_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_path", value)

    @property
    @pulumi.getter(name="inputTransformer")
    def input_transformer(self) -> Optional[pulumi.Input['EventTargetInputTransformerArgs']]:
        return pulumi.get(self, "input_transformer")

    @input_transformer.setter
    def input_transformer(self, value: Optional[pulumi.Input['EventTargetInputTransformerArgs']]):
        pulumi.set(self, "input_transformer", value)

    @property
    @pulumi.getter(name="kinesisTarget")
    def kinesis_target(self) -> Optional[pulumi.Input['EventTargetKinesisTargetArgs']]:
        return pulumi.get(self, "kinesis_target")

    @kinesis_target.setter
    def kinesis_target(self, value: Optional[pulumi.Input['EventTargetKinesisTargetArgs']]):
        pulumi.set(self, "kinesis_target", value)

    @property
    @pulumi.getter(name="redshiftTarget")
    def redshift_target(self) -> Optional[pulumi.Input['EventTargetRedshiftTargetArgs']]:
        return pulumi.get(self, "redshift_target")

    @redshift_target.setter
    def redshift_target(self, value: Optional[pulumi.Input['EventTargetRedshiftTargetArgs']]):
        pulumi.set(self, "redshift_target", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['EventTargetRetryPolicyArgs']]:
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['EventTargetRetryPolicyArgs']]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="runCommandTargets")
    def run_command_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventTargetRunCommandTargetArgs']]]]:
        return pulumi.get(self, "run_command_targets")

    @run_command_targets.setter
    def run_command_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventTargetRunCommandTargetArgs']]]]):
        pulumi.set(self, "run_command_targets", value)

    @property
    @pulumi.getter(name="sqsTarget")
    def sqs_target(self) -> Optional[pulumi.Input['EventTargetSqsTargetArgs']]:
        return pulumi.get(self, "sqs_target")

    @sqs_target.setter
    def sqs_target(self, value: Optional[pulumi.Input['EventTargetSqsTargetArgs']]):
        pulumi.set(self, "sqs_target", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)


class EventTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arn: Optional[pulumi.Input[str]] = None,
                 batch_target: Optional[pulumi.Input[pulumi.InputType['EventTargetBatchTargetArgs']]] = None,
                 dead_letter_config: Optional[pulumi.Input[pulumi.InputType['EventTargetDeadLetterConfigArgs']]] = None,
                 ecs_target: Optional[pulumi.Input[pulumi.InputType['EventTargetEcsTargetArgs']]] = None,
                 event_bus_name: Optional[pulumi.Input[str]] = None,
                 http_target: Optional[pulumi.Input[pulumi.InputType['EventTargetHttpTargetArgs']]] = None,
                 input: Optional[pulumi.Input[str]] = None,
                 input_path: Optional[pulumi.Input[str]] = None,
                 input_transformer: Optional[pulumi.Input[pulumi.InputType['EventTargetInputTransformerArgs']]] = None,
                 kinesis_target: Optional[pulumi.Input[pulumi.InputType['EventTargetKinesisTargetArgs']]] = None,
                 redshift_target: Optional[pulumi.Input[pulumi.InputType['EventTargetRedshiftTargetArgs']]] = None,
                 retry_policy: Optional[pulumi.Input[pulumi.InputType['EventTargetRetryPolicyArgs']]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None,
                 run_command_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventTargetRunCommandTargetArgs']]]]] = None,
                 sqs_target: Optional[pulumi.Input[pulumi.InputType['EventTargetSqsTargetArgs']]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a EventTarget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EventTarget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EventTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arn: Optional[pulumi.Input[str]] = None,
                 batch_target: Optional[pulumi.Input[pulumi.InputType['EventTargetBatchTargetArgs']]] = None,
                 dead_letter_config: Optional[pulumi.Input[pulumi.InputType['EventTargetDeadLetterConfigArgs']]] = None,
                 ecs_target: Optional[pulumi.Input[pulumi.InputType['EventTargetEcsTargetArgs']]] = None,
                 event_bus_name: Optional[pulumi.Input[str]] = None,
                 http_target: Optional[pulumi.Input[pulumi.InputType['EventTargetHttpTargetArgs']]] = None,
                 input: Optional[pulumi.Input[str]] = None,
                 input_path: Optional[pulumi.Input[str]] = None,
                 input_transformer: Optional[pulumi.Input[pulumi.InputType['EventTargetInputTransformerArgs']]] = None,
                 kinesis_target: Optional[pulumi.Input[pulumi.InputType['EventTargetKinesisTargetArgs']]] = None,
                 redshift_target: Optional[pulumi.Input[pulumi.InputType['EventTargetRedshiftTargetArgs']]] = None,
                 retry_policy: Optional[pulumi.Input[pulumi.InputType['EventTargetRetryPolicyArgs']]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None,
                 run_command_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventTargetRunCommandTargetArgs']]]]] = None,
                 sqs_target: Optional[pulumi.Input[pulumi.InputType['EventTargetSqsTargetArgs']]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventTargetArgs.__new__(EventTargetArgs)

            if arn is None and not opts.urn:
                raise TypeError("Missing required property 'arn'")
            __props__.__dict__["arn"] = arn
            __props__.__dict__["batch_target"] = batch_target
            __props__.__dict__["dead_letter_config"] = dead_letter_config
            __props__.__dict__["ecs_target"] = ecs_target
            __props__.__dict__["event_bus_name"] = event_bus_name
            __props__.__dict__["http_target"] = http_target
            __props__.__dict__["input"] = input
            __props__.__dict__["input_path"] = input_path
            __props__.__dict__["input_transformer"] = input_transformer
            __props__.__dict__["kinesis_target"] = kinesis_target
            __props__.__dict__["redshift_target"] = redshift_target
            __props__.__dict__["retry_policy"] = retry_policy
            __props__.__dict__["role_arn"] = role_arn
            if rule is None and not opts.urn:
                raise TypeError("Missing required property 'rule'")
            __props__.__dict__["rule"] = rule
            __props__.__dict__["run_command_targets"] = run_command_targets
            __props__.__dict__["sqs_target"] = sqs_target
            __props__.__dict__["target_id"] = target_id
        super(EventTarget, __self__).__init__(
            'aws:cloudwatch/eventTarget:EventTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            batch_target: Optional[pulumi.Input[pulumi.InputType['EventTargetBatchTargetArgs']]] = None,
            dead_letter_config: Optional[pulumi.Input[pulumi.InputType['EventTargetDeadLetterConfigArgs']]] = None,
            ecs_target: Optional[pulumi.Input[pulumi.InputType['EventTargetEcsTargetArgs']]] = None,
            event_bus_name: Optional[pulumi.Input[str]] = None,
            http_target: Optional[pulumi.Input[pulumi.InputType['EventTargetHttpTargetArgs']]] = None,
            input: Optional[pulumi.Input[str]] = None,
            input_path: Optional[pulumi.Input[str]] = None,
            input_transformer: Optional[pulumi.Input[pulumi.InputType['EventTargetInputTransformerArgs']]] = None,
            kinesis_target: Optional[pulumi.Input[pulumi.InputType['EventTargetKinesisTargetArgs']]] = None,
            redshift_target: Optional[pulumi.Input[pulumi.InputType['EventTargetRedshiftTargetArgs']]] = None,
            retry_policy: Optional[pulumi.Input[pulumi.InputType['EventTargetRetryPolicyArgs']]] = None,
            role_arn: Optional[pulumi.Input[str]] = None,
            rule: Optional[pulumi.Input[str]] = None,
            run_command_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventTargetRunCommandTargetArgs']]]]] = None,
            sqs_target: Optional[pulumi.Input[pulumi.InputType['EventTargetSqsTargetArgs']]] = None,
            target_id: Optional[pulumi.Input[str]] = None) -> 'EventTarget':
        """
        Get an existing EventTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventTargetState.__new__(_EventTargetState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["batch_target"] = batch_target
        __props__.__dict__["dead_letter_config"] = dead_letter_config
        __props__.__dict__["ecs_target"] = ecs_target
        __props__.__dict__["event_bus_name"] = event_bus_name
        __props__.__dict__["http_target"] = http_target
        __props__.__dict__["input"] = input
        __props__.__dict__["input_path"] = input_path
        __props__.__dict__["input_transformer"] = input_transformer
        __props__.__dict__["kinesis_target"] = kinesis_target
        __props__.__dict__["redshift_target"] = redshift_target
        __props__.__dict__["retry_policy"] = retry_policy
        __props__.__dict__["role_arn"] = role_arn
        __props__.__dict__["rule"] = rule
        __props__.__dict__["run_command_targets"] = run_command_targets
        __props__.__dict__["sqs_target"] = sqs_target
        __props__.__dict__["target_id"] = target_id
        return EventTarget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="batchTarget")
    def batch_target(self) -> pulumi.Output[Optional['outputs.EventTargetBatchTarget']]:
        return pulumi.get(self, "batch_target")

    @property
    @pulumi.getter(name="deadLetterConfig")
    def dead_letter_config(self) -> pulumi.Output[Optional['outputs.EventTargetDeadLetterConfig']]:
        return pulumi.get(self, "dead_letter_config")

    @property
    @pulumi.getter(name="ecsTarget")
    def ecs_target(self) -> pulumi.Output[Optional['outputs.EventTargetEcsTarget']]:
        return pulumi.get(self, "ecs_target")

    @property
    @pulumi.getter(name="eventBusName")
    def event_bus_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "event_bus_name")

    @property
    @pulumi.getter(name="httpTarget")
    def http_target(self) -> pulumi.Output[Optional['outputs.EventTargetHttpTarget']]:
        return pulumi.get(self, "http_target")

    @property
    @pulumi.getter
    def input(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "input")

    @property
    @pulumi.getter(name="inputPath")
    def input_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "input_path")

    @property
    @pulumi.getter(name="inputTransformer")
    def input_transformer(self) -> pulumi.Output[Optional['outputs.EventTargetInputTransformer']]:
        return pulumi.get(self, "input_transformer")

    @property
    @pulumi.getter(name="kinesisTarget")
    def kinesis_target(self) -> pulumi.Output[Optional['outputs.EventTargetKinesisTarget']]:
        return pulumi.get(self, "kinesis_target")

    @property
    @pulumi.getter(name="redshiftTarget")
    def redshift_target(self) -> pulumi.Output[Optional['outputs.EventTargetRedshiftTarget']]:
        return pulumi.get(self, "redshift_target")

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> pulumi.Output[Optional['outputs.EventTargetRetryPolicy']]:
        return pulumi.get(self, "retry_policy")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="runCommandTargets")
    def run_command_targets(self) -> pulumi.Output[Optional[Sequence['outputs.EventTargetRunCommandTarget']]]:
        return pulumi.get(self, "run_command_targets")

    @property
    @pulumi.getter(name="sqsTarget")
    def sqs_target(self) -> pulumi.Output[Optional['outputs.EventTargetSqsTarget']]:
        return pulumi.get(self, "sqs_target")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "target_id")

