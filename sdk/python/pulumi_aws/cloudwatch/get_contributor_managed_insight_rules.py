# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetContributorManagedInsightRulesResult',
    'AwaitableGetContributorManagedInsightRulesResult',
    'get_contributor_managed_insight_rules',
    'get_contributor_managed_insight_rules_output',
]

@pulumi.output_type
class GetContributorManagedInsightRulesResult:
    """
    A collection of values returned by getContributorManagedInsightRules.
    """
    def __init__(__self__, id=None, managed_rules=None, region=None, resource_arn=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed_rules and not isinstance(managed_rules, list):
            raise TypeError("Expected argument 'managed_rules' to be a list")
        pulumi.set(__self__, "managed_rules", managed_rules)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_arn and not isinstance(resource_arn, str):
            raise TypeError("Expected argument 'resource_arn' to be a str")
        pulumi.set(__self__, "resource_arn", resource_arn)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="managedRules")
    def managed_rules(self) -> Sequence['outputs.GetContributorManagedInsightRulesManagedRuleResult']:
        """
        Managed rules that are available for the specified Amazon Web Services resource. See `managed_rules reference` below for details.
        """
        return pulumi.get(self, "managed_rules")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> _builtins.str:
        """
        If a managed rule is enabled, this is the ARN for the related Amazon Web Services resource.
        """
        return pulumi.get(self, "resource_arn")


class AwaitableGetContributorManagedInsightRulesResult(GetContributorManagedInsightRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContributorManagedInsightRulesResult(
            id=self.id,
            managed_rules=self.managed_rules,
            region=self.region,
            resource_arn=self.resource_arn)


def get_contributor_managed_insight_rules(region: Optional[_builtins.str] = None,
                                          resource_arn: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContributorManagedInsightRulesResult:
    """
    Data source for managing an AWS CloudWatch Contributor Managed Insight Rules.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.cloudwatch.get_contributor_managed_insight_rules(resource_arn="arn:aws:ec2:us-west-2:123456789012:resource-name/resourceid")
    ```


    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    :param _builtins.str resource_arn: ARN of an Amazon Web Services resource that has managed Contributor Insights rules.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourceArn'] = resource_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:cloudwatch/getContributorManagedInsightRules:getContributorManagedInsightRules', __args__, opts=opts, typ=GetContributorManagedInsightRulesResult).value

    return AwaitableGetContributorManagedInsightRulesResult(
        id=pulumi.get(__ret__, 'id'),
        managed_rules=pulumi.get(__ret__, 'managed_rules'),
        region=pulumi.get(__ret__, 'region'),
        resource_arn=pulumi.get(__ret__, 'resource_arn'))
def get_contributor_managed_insight_rules_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 resource_arn: Optional[pulumi.Input[_builtins.str]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContributorManagedInsightRulesResult]:
    """
    Data source for managing an AWS CloudWatch Contributor Managed Insight Rules.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.cloudwatch.get_contributor_managed_insight_rules(resource_arn="arn:aws:ec2:us-west-2:123456789012:resource-name/resourceid")
    ```


    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    :param _builtins.str resource_arn: ARN of an Amazon Web Services resource that has managed Contributor Insights rules.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['resourceArn'] = resource_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws:cloudwatch/getContributorManagedInsightRules:getContributorManagedInsightRules', __args__, opts=opts, typ=GetContributorManagedInsightRulesResult)
    return __ret__.apply(lambda __response__: GetContributorManagedInsightRulesResult(
        id=pulumi.get(__response__, 'id'),
        managed_rules=pulumi.get(__response__, 'managed_rules'),
        region=pulumi.get(__response__, 'region'),
        resource_arn=pulumi.get(__response__, 'resource_arn')))
