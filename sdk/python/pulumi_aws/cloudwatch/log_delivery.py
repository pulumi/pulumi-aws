# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogDeliveryArgs', 'LogDelivery']

@pulumi.input_type
class LogDeliveryArgs:
    def __init__(__self__, *,
                 delivery_destination_arn: pulumi.Input[str],
                 delivery_source_name: pulumi.Input[str],
                 field_delimiter: Optional[pulumi.Input[str]] = None,
                 record_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 s3_delivery_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['LogDeliveryS3DeliveryConfigurationArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a LogDelivery resource.
        :param pulumi.Input[str] delivery_destination_arn: The ARN of the delivery destination to use for this delivery.
        :param pulumi.Input[str] delivery_source_name: The name of the delivery source to use for this delivery.
        :param pulumi.Input[str] field_delimiter: The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] record_fields: The list of record fields to be delivered to the destination, in order.
        :param pulumi.Input[Sequence[pulumi.Input['LogDeliveryS3DeliveryConfigurationArgs']]] s3_delivery_configurations: Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        pulumi.set(__self__, "delivery_destination_arn", delivery_destination_arn)
        pulumi.set(__self__, "delivery_source_name", delivery_source_name)
        if field_delimiter is not None:
            pulumi.set(__self__, "field_delimiter", field_delimiter)
        if record_fields is not None:
            pulumi.set(__self__, "record_fields", record_fields)
        if s3_delivery_configurations is not None:
            pulumi.set(__self__, "s3_delivery_configurations", s3_delivery_configurations)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="deliveryDestinationArn")
    def delivery_destination_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the delivery destination to use for this delivery.
        """
        return pulumi.get(self, "delivery_destination_arn")

    @delivery_destination_arn.setter
    def delivery_destination_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "delivery_destination_arn", value)

    @property
    @pulumi.getter(name="deliverySourceName")
    def delivery_source_name(self) -> pulumi.Input[str]:
        """
        The name of the delivery source to use for this delivery.
        """
        return pulumi.get(self, "delivery_source_name")

    @delivery_source_name.setter
    def delivery_source_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "delivery_source_name", value)

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        """
        return pulumi.get(self, "field_delimiter")

    @field_delimiter.setter
    def field_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_delimiter", value)

    @property
    @pulumi.getter(name="recordFields")
    def record_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of record fields to be delivered to the destination, in order.
        """
        return pulumi.get(self, "record_fields")

    @record_fields.setter
    def record_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "record_fields", value)

    @property
    @pulumi.getter(name="s3DeliveryConfigurations")
    def s3_delivery_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogDeliveryS3DeliveryConfigurationArgs']]]]:
        """
        Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        """
        return pulumi.get(self, "s3_delivery_configurations")

    @s3_delivery_configurations.setter
    def s3_delivery_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogDeliveryS3DeliveryConfigurationArgs']]]]):
        pulumi.set(self, "s3_delivery_configurations", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LogDeliveryState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 delivery_destination_arn: Optional[pulumi.Input[str]] = None,
                 delivery_source_name: Optional[pulumi.Input[str]] = None,
                 field_delimiter: Optional[pulumi.Input[str]] = None,
                 record_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 s3_delivery_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['LogDeliveryS3DeliveryConfigurationArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering LogDelivery resources.
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the delivery.
        :param pulumi.Input[str] delivery_destination_arn: The ARN of the delivery destination to use for this delivery.
        :param pulumi.Input[str] delivery_source_name: The name of the delivery source to use for this delivery.
        :param pulumi.Input[str] field_delimiter: The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] record_fields: The list of record fields to be delivered to the destination, in order.
        :param pulumi.Input[Sequence[pulumi.Input['LogDeliveryS3DeliveryConfigurationArgs']]] s3_delivery_configurations: Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if delivery_destination_arn is not None:
            pulumi.set(__self__, "delivery_destination_arn", delivery_destination_arn)
        if delivery_source_name is not None:
            pulumi.set(__self__, "delivery_source_name", delivery_source_name)
        if field_delimiter is not None:
            pulumi.set(__self__, "field_delimiter", field_delimiter)
        if record_fields is not None:
            pulumi.set(__self__, "record_fields", record_fields)
        if s3_delivery_configurations is not None:
            pulumi.set(__self__, "s3_delivery_configurations", s3_delivery_configurations)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the delivery.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="deliveryDestinationArn")
    def delivery_destination_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the delivery destination to use for this delivery.
        """
        return pulumi.get(self, "delivery_destination_arn")

    @delivery_destination_arn.setter
    def delivery_destination_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_destination_arn", value)

    @property
    @pulumi.getter(name="deliverySourceName")
    def delivery_source_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the delivery source to use for this delivery.
        """
        return pulumi.get(self, "delivery_source_name")

    @delivery_source_name.setter
    def delivery_source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_source_name", value)

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        """
        return pulumi.get(self, "field_delimiter")

    @field_delimiter.setter
    def field_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_delimiter", value)

    @property
    @pulumi.getter(name="recordFields")
    def record_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of record fields to be delivered to the destination, in order.
        """
        return pulumi.get(self, "record_fields")

    @record_fields.setter
    def record_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "record_fields", value)

    @property
    @pulumi.getter(name="s3DeliveryConfigurations")
    def s3_delivery_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogDeliveryS3DeliveryConfigurationArgs']]]]:
        """
        Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        """
        return pulumi.get(self, "s3_delivery_configurations")

    @s3_delivery_configurations.setter
    def s3_delivery_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogDeliveryS3DeliveryConfigurationArgs']]]]):
        pulumi.set(self, "s3_delivery_configurations", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    @_utilities.deprecated("""Please use `tags` instead.""")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)


class LogDelivery(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delivery_destination_arn: Optional[pulumi.Input[str]] = None,
                 delivery_source_name: Optional[pulumi.Input[str]] = None,
                 field_delimiter: Optional[pulumi.Input[str]] = None,
                 record_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 s3_delivery_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogDeliveryS3DeliveryConfigurationArgs', 'LogDeliveryS3DeliveryConfigurationArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Resource for managing an AWS CloudWatch Logs Delivery. A delivery is a connection between an `cloudwatch.LogDeliverySource` and an `cloudwatch.LogDeliveryDestination`.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.cloudwatch.LogDelivery("example",
            delivery_source_name=example_aws_cloudwatch_log_delivery_source["name"],
            delivery_destination_arn=example_aws_cloudwatch_log_delivery_destination["arn"],
            field_delimiter=",",
            record_fields=[
                "event_timestamp",
                "event",
            ])
        ```

        ## Import

        Using `pulumi import`, import CloudWatch Logs Delivery using the `id`. For example:

        ```sh
        $ pulumi import aws:cloudwatch/logDelivery:LogDelivery example jsoGVi4Zq8VlYp9n
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delivery_destination_arn: The ARN of the delivery destination to use for this delivery.
        :param pulumi.Input[str] delivery_source_name: The name of the delivery source to use for this delivery.
        :param pulumi.Input[str] field_delimiter: The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] record_fields: The list of record fields to be delivered to the destination, in order.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogDeliveryS3DeliveryConfigurationArgs', 'LogDeliveryS3DeliveryConfigurationArgsDict']]]] s3_delivery_configurations: Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogDeliveryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for managing an AWS CloudWatch Logs Delivery. A delivery is a connection between an `cloudwatch.LogDeliverySource` and an `cloudwatch.LogDeliveryDestination`.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.cloudwatch.LogDelivery("example",
            delivery_source_name=example_aws_cloudwatch_log_delivery_source["name"],
            delivery_destination_arn=example_aws_cloudwatch_log_delivery_destination["arn"],
            field_delimiter=",",
            record_fields=[
                "event_timestamp",
                "event",
            ])
        ```

        ## Import

        Using `pulumi import`, import CloudWatch Logs Delivery using the `id`. For example:

        ```sh
        $ pulumi import aws:cloudwatch/logDelivery:LogDelivery example jsoGVi4Zq8VlYp9n
        ```

        :param str resource_name: The name of the resource.
        :param LogDeliveryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogDeliveryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delivery_destination_arn: Optional[pulumi.Input[str]] = None,
                 delivery_source_name: Optional[pulumi.Input[str]] = None,
                 field_delimiter: Optional[pulumi.Input[str]] = None,
                 record_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 s3_delivery_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogDeliveryS3DeliveryConfigurationArgs', 'LogDeliveryS3DeliveryConfigurationArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogDeliveryArgs.__new__(LogDeliveryArgs)

            if delivery_destination_arn is None and not opts.urn:
                raise TypeError("Missing required property 'delivery_destination_arn'")
            __props__.__dict__["delivery_destination_arn"] = delivery_destination_arn
            if delivery_source_name is None and not opts.urn:
                raise TypeError("Missing required property 'delivery_source_name'")
            __props__.__dict__["delivery_source_name"] = delivery_source_name
            __props__.__dict__["field_delimiter"] = field_delimiter
            __props__.__dict__["record_fields"] = record_fields
            __props__.__dict__["s3_delivery_configurations"] = s3_delivery_configurations
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["tags_all"] = None
        super(LogDelivery, __self__).__init__(
            'aws:cloudwatch/logDelivery:LogDelivery',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            delivery_destination_arn: Optional[pulumi.Input[str]] = None,
            delivery_source_name: Optional[pulumi.Input[str]] = None,
            field_delimiter: Optional[pulumi.Input[str]] = None,
            record_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            s3_delivery_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogDeliveryS3DeliveryConfigurationArgs', 'LogDeliveryS3DeliveryConfigurationArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'LogDelivery':
        """
        Get an existing LogDelivery resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the delivery.
        :param pulumi.Input[str] delivery_destination_arn: The ARN of the delivery destination to use for this delivery.
        :param pulumi.Input[str] delivery_source_name: The name of the delivery source to use for this delivery.
        :param pulumi.Input[str] field_delimiter: The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] record_fields: The list of record fields to be delivered to the destination, in order.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogDeliveryS3DeliveryConfigurationArgs', 'LogDeliveryS3DeliveryConfigurationArgsDict']]]] s3_delivery_configurations: Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogDeliveryState.__new__(_LogDeliveryState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["delivery_destination_arn"] = delivery_destination_arn
        __props__.__dict__["delivery_source_name"] = delivery_source_name
        __props__.__dict__["field_delimiter"] = field_delimiter
        __props__.__dict__["record_fields"] = record_fields
        __props__.__dict__["s3_delivery_configurations"] = s3_delivery_configurations
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        return LogDelivery(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) of the delivery.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="deliveryDestinationArn")
    def delivery_destination_arn(self) -> pulumi.Output[str]:
        """
        The ARN of the delivery destination to use for this delivery.
        """
        return pulumi.get(self, "delivery_destination_arn")

    @property
    @pulumi.getter(name="deliverySourceName")
    def delivery_source_name(self) -> pulumi.Output[str]:
        """
        The name of the delivery source to use for this delivery.
        """
        return pulumi.get(self, "delivery_source_name")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> pulumi.Output[Optional[str]]:
        """
        The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        """
        return pulumi.get(self, "field_delimiter")

    @property
    @pulumi.getter(name="recordFields")
    def record_fields(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of record fields to be delivered to the destination, in order.
        """
        return pulumi.get(self, "record_fields")

    @property
    @pulumi.getter(name="s3DeliveryConfigurations")
    def s3_delivery_configurations(self) -> pulumi.Output[Sequence['outputs.LogDeliveryS3DeliveryConfiguration']]:
        """
        Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        """
        return pulumi.get(self, "s3_delivery_configurations")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    @_utilities.deprecated("""Please use `tags` instead.""")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        return pulumi.get(self, "tags_all")

