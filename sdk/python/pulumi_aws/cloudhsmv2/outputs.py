# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClusterClusterCertificate',
    'GetClusterClusterCertificateResult',
]

@pulumi.output_type
class ClusterClusterCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsHardwareCertificate":
            suggest = "aws_hardware_certificate"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCsr":
            suggest = "cluster_csr"
        elif key == "hsmCertificate":
            suggest = "hsm_certificate"
        elif key == "manufacturerHardwareCertificate":
            suggest = "manufacturer_hardware_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_hardware_certificate: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_csr: Optional[str] = None,
                 hsm_certificate: Optional[str] = None,
                 manufacturer_hardware_certificate: Optional[str] = None):
        ClusterClusterCertificate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_hardware_certificate=aws_hardware_certificate,
            cluster_certificate=cluster_certificate,
            cluster_csr=cluster_csr,
            hsm_certificate=hsm_certificate,
            manufacturer_hardware_certificate=manufacturer_hardware_certificate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_hardware_certificate: Optional[str] = None,
             cluster_certificate: Optional[str] = None,
             cluster_csr: Optional[str] = None,
             hsm_certificate: Optional[str] = None,
             manufacturer_hardware_certificate: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if aws_hardware_certificate is None and 'awsHardwareCertificate' in kwargs:
            aws_hardware_certificate = kwargs['awsHardwareCertificate']
        if cluster_certificate is None and 'clusterCertificate' in kwargs:
            cluster_certificate = kwargs['clusterCertificate']
        if cluster_csr is None and 'clusterCsr' in kwargs:
            cluster_csr = kwargs['clusterCsr']
        if hsm_certificate is None and 'hsmCertificate' in kwargs:
            hsm_certificate = kwargs['hsmCertificate']
        if manufacturer_hardware_certificate is None and 'manufacturerHardwareCertificate' in kwargs:
            manufacturer_hardware_certificate = kwargs['manufacturerHardwareCertificate']

        if aws_hardware_certificate is not None:
            _setter("aws_hardware_certificate", aws_hardware_certificate)
        if cluster_certificate is not None:
            _setter("cluster_certificate", cluster_certificate)
        if cluster_csr is not None:
            _setter("cluster_csr", cluster_csr)
        if hsm_certificate is not None:
            _setter("hsm_certificate", hsm_certificate)
        if manufacturer_hardware_certificate is not None:
            _setter("manufacturer_hardware_certificate", manufacturer_hardware_certificate)

    @property
    @pulumi.getter(name="awsHardwareCertificate")
    def aws_hardware_certificate(self) -> Optional[str]:
        return pulumi.get(self, "aws_hardware_certificate")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCsr")
    def cluster_csr(self) -> Optional[str]:
        return pulumi.get(self, "cluster_csr")

    @property
    @pulumi.getter(name="hsmCertificate")
    def hsm_certificate(self) -> Optional[str]:
        return pulumi.get(self, "hsm_certificate")

    @property
    @pulumi.getter(name="manufacturerHardwareCertificate")
    def manufacturer_hardware_certificate(self) -> Optional[str]:
        return pulumi.get(self, "manufacturer_hardware_certificate")


@pulumi.output_type
class GetClusterClusterCertificateResult(dict):
    def __init__(__self__, *,
                 aws_hardware_certificate: str,
                 cluster_certificate: str,
                 cluster_csr: str,
                 hsm_certificate: str,
                 manufacturer_hardware_certificate: str):
        GetClusterClusterCertificateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_hardware_certificate=aws_hardware_certificate,
            cluster_certificate=cluster_certificate,
            cluster_csr=cluster_csr,
            hsm_certificate=hsm_certificate,
            manufacturer_hardware_certificate=manufacturer_hardware_certificate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_hardware_certificate: Optional[str] = None,
             cluster_certificate: Optional[str] = None,
             cluster_csr: Optional[str] = None,
             hsm_certificate: Optional[str] = None,
             manufacturer_hardware_certificate: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if aws_hardware_certificate is None and 'awsHardwareCertificate' in kwargs:
            aws_hardware_certificate = kwargs['awsHardwareCertificate']
        if aws_hardware_certificate is None:
            raise TypeError("Missing 'aws_hardware_certificate' argument")
        if cluster_certificate is None and 'clusterCertificate' in kwargs:
            cluster_certificate = kwargs['clusterCertificate']
        if cluster_certificate is None:
            raise TypeError("Missing 'cluster_certificate' argument")
        if cluster_csr is None and 'clusterCsr' in kwargs:
            cluster_csr = kwargs['clusterCsr']
        if cluster_csr is None:
            raise TypeError("Missing 'cluster_csr' argument")
        if hsm_certificate is None and 'hsmCertificate' in kwargs:
            hsm_certificate = kwargs['hsmCertificate']
        if hsm_certificate is None:
            raise TypeError("Missing 'hsm_certificate' argument")
        if manufacturer_hardware_certificate is None and 'manufacturerHardwareCertificate' in kwargs:
            manufacturer_hardware_certificate = kwargs['manufacturerHardwareCertificate']
        if manufacturer_hardware_certificate is None:
            raise TypeError("Missing 'manufacturer_hardware_certificate' argument")

        _setter("aws_hardware_certificate", aws_hardware_certificate)
        _setter("cluster_certificate", cluster_certificate)
        _setter("cluster_csr", cluster_csr)
        _setter("hsm_certificate", hsm_certificate)
        _setter("manufacturer_hardware_certificate", manufacturer_hardware_certificate)

    @property
    @pulumi.getter(name="awsHardwareCertificate")
    def aws_hardware_certificate(self) -> str:
        return pulumi.get(self, "aws_hardware_certificate")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> str:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCsr")
    def cluster_csr(self) -> str:
        return pulumi.get(self, "cluster_csr")

    @property
    @pulumi.getter(name="hsmCertificate")
    def hsm_certificate(self) -> str:
        return pulumi.get(self, "hsm_certificate")

    @property
    @pulumi.getter(name="manufacturerHardwareCertificate")
    def manufacturer_hardware_certificate(self) -> str:
        return pulumi.get(self, "manufacturer_hardware_certificate")


