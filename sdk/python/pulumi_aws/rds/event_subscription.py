# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class EventSubscription(pulumi.CustomResource):
    """
    Provides a DB event subscription resource.
    """
    def __init__(__self__, __name__, __opts__=None, enabled=None, event_categories=None, name=None, name_prefix=None, sns_topic=None, source_ids=None, source_type=None, tags=None):
        """Create a EventSubscription resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if enabled and not isinstance(enabled, bool):
            raise TypeError('Expected property enabled to be a bool')
        __self__.enabled = enabled
        """
        A boolean flag to enable/disable the subscription. Defaults to true.
        """
        __props__['enabled'] = enabled

        if event_categories and not isinstance(event_categories, list):
            raise TypeError('Expected property event_categories to be a list')
        __self__.event_categories = event_categories
        """
        A list of event categories for a SourceType that you want to subscribe to. See http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide//USER_Events.html
        """
        __props__['eventCategories'] = event_categories

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the DB event subscription. By default generated by Terraform.
        """
        __props__['name'] = name

        if name_prefix and not isinstance(name_prefix, basestring):
            raise TypeError('Expected property name_prefix to be a basestring')
        __self__.name_prefix = name_prefix
        """
        The name of the DB event subscription. Conflicts with `name`.
        """
        __props__['namePrefix'] = name_prefix

        if not sns_topic:
            raise TypeError('Missing required property sns_topic')
        elif not isinstance(sns_topic, basestring):
            raise TypeError('Expected property sns_topic to be a basestring')
        __self__.sns_topic = sns_topic
        """
        The SNS topic to send events to.
        """
        __props__['snsTopic'] = sns_topic

        if source_ids and not isinstance(source_ids, list):
            raise TypeError('Expected property source_ids to be a list')
        __self__.source_ids = source_ids
        """
        A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified.
        """
        __props__['sourceIds'] = source_ids

        if source_type and not isinstance(source_type, basestring):
            raise TypeError('Expected property source_type to be a basestring')
        __self__.source_type = source_type
        """
        The type of source that will be generating the events.
        """
        __props__['sourceType'] = source_type

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        __self__.arn = pulumi.runtime.UNKNOWN
        __self__.customer_aws_id = pulumi.runtime.UNKNOWN

        super(EventSubscription, __self__).__init__(
            'aws:rds/eventSubscription:EventSubscription',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'customerAwsId' in outs:
            self.customer_aws_id = outs['customerAwsId']
        if 'enabled' in outs:
            self.enabled = outs['enabled']
        if 'eventCategories' in outs:
            self.event_categories = outs['eventCategories']
        if 'name' in outs:
            self.name = outs['name']
        if 'namePrefix' in outs:
            self.name_prefix = outs['namePrefix']
        if 'snsTopic' in outs:
            self.sns_topic = outs['snsTopic']
        if 'sourceIds' in outs:
            self.source_ids = outs['sourceIds']
        if 'sourceType' in outs:
            self.source_type = outs['sourceType']
        if 'tags' in outs:
            self.tags = outs['tags']
