# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClassificationJobArgs', 'ClassificationJob']

@pulumi.input_type
class ClassificationJobArgs:
    def __init__(__self__, *,
                 job_type: pulumi.Input[str],
                 s3_job_definition: pulumi.Input['ClassificationJobS3JobDefinitionArgs'],
                 custom_data_identifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 initial_run: Optional[pulumi.Input[bool]] = None,
                 job_status: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 sampling_percentage: Optional[pulumi.Input[int]] = None,
                 schedule_frequency: Optional[pulumi.Input['ClassificationJobScheduleFrequencyArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ClassificationJob resource.
        """
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "s3_job_definition", s3_job_definition)
        if custom_data_identifier_ids is not None:
            pulumi.set(__self__, "custom_data_identifier_ids", custom_data_identifier_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if initial_run is not None:
            pulumi.set(__self__, "initial_run", initial_run)
        if job_status is not None:
            pulumi.set(__self__, "job_status", job_status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if sampling_percentage is not None:
            pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        if schedule_frequency is not None:
            pulumi.set(__self__, "schedule_frequency", schedule_frequency)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "job_type")

    @job_type.setter
    def job_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_type", value)

    @property
    @pulumi.getter(name="s3JobDefinition")
    def s3_job_definition(self) -> pulumi.Input['ClassificationJobS3JobDefinitionArgs']:
        return pulumi.get(self, "s3_job_definition")

    @s3_job_definition.setter
    def s3_job_definition(self, value: pulumi.Input['ClassificationJobS3JobDefinitionArgs']):
        pulumi.set(self, "s3_job_definition", value)

    @property
    @pulumi.getter(name="customDataIdentifierIds")
    def custom_data_identifier_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_data_identifier_ids")

    @custom_data_identifier_ids.setter
    def custom_data_identifier_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_data_identifier_ids", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="initialRun")
    def initial_run(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "initial_run")

    @initial_run.setter
    def initial_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "initial_run", value)

    @property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "job_status")

    @job_status.setter
    def job_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_status", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sampling_percentage")

    @sampling_percentage.setter
    def sampling_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sampling_percentage", value)

    @property
    @pulumi.getter(name="scheduleFrequency")
    def schedule_frequency(self) -> Optional[pulumi.Input['ClassificationJobScheduleFrequencyArgs']]:
        return pulumi.get(self, "schedule_frequency")

    @schedule_frequency.setter
    def schedule_frequency(self, value: Optional[pulumi.Input['ClassificationJobScheduleFrequencyArgs']]):
        pulumi.set(self, "schedule_frequency", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ClassificationJobState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 custom_data_identifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 initial_run: Optional[pulumi.Input[bool]] = None,
                 job_arn: Optional[pulumi.Input[str]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 job_status: Optional[pulumi.Input[str]] = None,
                 job_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 s3_job_definition: Optional[pulumi.Input['ClassificationJobS3JobDefinitionArgs']] = None,
                 sampling_percentage: Optional[pulumi.Input[int]] = None,
                 schedule_frequency: Optional[pulumi.Input['ClassificationJobScheduleFrequencyArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 user_paused_details: Optional[pulumi.Input[Sequence[pulumi.Input['ClassificationJobUserPausedDetailArgs']]]] = None):
        """
        Input properties used for looking up and filtering ClassificationJob resources.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_data_identifier_ids is not None:
            pulumi.set(__self__, "custom_data_identifier_ids", custom_data_identifier_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if initial_run is not None:
            pulumi.set(__self__, "initial_run", initial_run)
        if job_arn is not None:
            pulumi.set(__self__, "job_arn", job_arn)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if job_status is not None:
            pulumi.set(__self__, "job_status", job_status)
        if job_type is not None:
            pulumi.set(__self__, "job_type", job_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if s3_job_definition is not None:
            pulumi.set(__self__, "s3_job_definition", s3_job_definition)
        if sampling_percentage is not None:
            pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        if schedule_frequency is not None:
            pulumi.set(__self__, "schedule_frequency", schedule_frequency)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if user_paused_details is not None:
            pulumi.set(__self__, "user_paused_details", user_paused_details)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="customDataIdentifierIds")
    def custom_data_identifier_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_data_identifier_ids")

    @custom_data_identifier_ids.setter
    def custom_data_identifier_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_data_identifier_ids", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="initialRun")
    def initial_run(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "initial_run")

    @initial_run.setter
    def initial_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "initial_run", value)

    @property
    @pulumi.getter(name="jobArn")
    def job_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "job_arn")

    @job_arn.setter
    def job_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_arn", value)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "job_status")

    @job_status.setter
    def job_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_status", value)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "job_type")

    @job_type.setter
    def job_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="s3JobDefinition")
    def s3_job_definition(self) -> Optional[pulumi.Input['ClassificationJobS3JobDefinitionArgs']]:
        return pulumi.get(self, "s3_job_definition")

    @s3_job_definition.setter
    def s3_job_definition(self, value: Optional[pulumi.Input['ClassificationJobS3JobDefinitionArgs']]):
        pulumi.set(self, "s3_job_definition", value)

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sampling_percentage")

    @sampling_percentage.setter
    def sampling_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sampling_percentage", value)

    @property
    @pulumi.getter(name="scheduleFrequency")
    def schedule_frequency(self) -> Optional[pulumi.Input['ClassificationJobScheduleFrequencyArgs']]:
        return pulumi.get(self, "schedule_frequency")

    @schedule_frequency.setter
    def schedule_frequency(self, value: Optional[pulumi.Input['ClassificationJobScheduleFrequencyArgs']]):
        pulumi.set(self, "schedule_frequency", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter(name="userPausedDetails")
    def user_paused_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClassificationJobUserPausedDetailArgs']]]]:
        return pulumi.get(self, "user_paused_details")

    @user_paused_details.setter
    def user_paused_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClassificationJobUserPausedDetailArgs']]]]):
        pulumi.set(self, "user_paused_details", value)


class ClassificationJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_data_identifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 initial_run: Optional[pulumi.Input[bool]] = None,
                 job_status: Optional[pulumi.Input[str]] = None,
                 job_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 s3_job_definition: Optional[pulumi.Input[pulumi.InputType['ClassificationJobS3JobDefinitionArgs']]] = None,
                 sampling_percentage: Optional[pulumi.Input[int]] = None,
                 schedule_frequency: Optional[pulumi.Input[pulumi.InputType['ClassificationJobScheduleFrequencyArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a ClassificationJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClassificationJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ClassificationJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClassificationJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClassificationJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_data_identifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 initial_run: Optional[pulumi.Input[bool]] = None,
                 job_status: Optional[pulumi.Input[str]] = None,
                 job_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 s3_job_definition: Optional[pulumi.Input[pulumi.InputType['ClassificationJobS3JobDefinitionArgs']]] = None,
                 sampling_percentage: Optional[pulumi.Input[int]] = None,
                 schedule_frequency: Optional[pulumi.Input[pulumi.InputType['ClassificationJobScheduleFrequencyArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClassificationJobArgs.__new__(ClassificationJobArgs)

            __props__.__dict__["custom_data_identifier_ids"] = custom_data_identifier_ids
            __props__.__dict__["description"] = description
            __props__.__dict__["initial_run"] = initial_run
            __props__.__dict__["job_status"] = job_status
            if job_type is None and not opts.urn:
                raise TypeError("Missing required property 'job_type'")
            __props__.__dict__["job_type"] = job_type
            __props__.__dict__["name"] = name
            __props__.__dict__["name_prefix"] = name_prefix
            if s3_job_definition is None and not opts.urn:
                raise TypeError("Missing required property 's3_job_definition'")
            __props__.__dict__["s3_job_definition"] = s3_job_definition
            __props__.__dict__["sampling_percentage"] = sampling_percentage
            __props__.__dict__["schedule_frequency"] = schedule_frequency
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["job_arn"] = None
            __props__.__dict__["job_id"] = None
            __props__.__dict__["tags_all"] = None
            __props__.__dict__["user_paused_details"] = None
        super(ClassificationJob, __self__).__init__(
            'aws:macie2/classificationJob:ClassificationJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            custom_data_identifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            initial_run: Optional[pulumi.Input[bool]] = None,
            job_arn: Optional[pulumi.Input[str]] = None,
            job_id: Optional[pulumi.Input[str]] = None,
            job_status: Optional[pulumi.Input[str]] = None,
            job_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            name_prefix: Optional[pulumi.Input[str]] = None,
            s3_job_definition: Optional[pulumi.Input[pulumi.InputType['ClassificationJobS3JobDefinitionArgs']]] = None,
            sampling_percentage: Optional[pulumi.Input[int]] = None,
            schedule_frequency: Optional[pulumi.Input[pulumi.InputType['ClassificationJobScheduleFrequencyArgs']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            user_paused_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClassificationJobUserPausedDetailArgs']]]]] = None) -> 'ClassificationJob':
        """
        Get an existing ClassificationJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClassificationJobState.__new__(_ClassificationJobState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_data_identifier_ids"] = custom_data_identifier_ids
        __props__.__dict__["description"] = description
        __props__.__dict__["initial_run"] = initial_run
        __props__.__dict__["job_arn"] = job_arn
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["job_status"] = job_status
        __props__.__dict__["job_type"] = job_type
        __props__.__dict__["name"] = name
        __props__.__dict__["name_prefix"] = name_prefix
        __props__.__dict__["s3_job_definition"] = s3_job_definition
        __props__.__dict__["sampling_percentage"] = sampling_percentage
        __props__.__dict__["schedule_frequency"] = schedule_frequency
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["user_paused_details"] = user_paused_details
        return ClassificationJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customDataIdentifierIds")
    def custom_data_identifier_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "custom_data_identifier_ids")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="initialRun")
    def initial_run(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "initial_run")

    @property
    @pulumi.getter(name="jobArn")
    def job_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "job_arn")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "job_status")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="s3JobDefinition")
    def s3_job_definition(self) -> pulumi.Output['outputs.ClassificationJobS3JobDefinition']:
        return pulumi.get(self, "s3_job_definition")

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> pulumi.Output[int]:
        return pulumi.get(self, "sampling_percentage")

    @property
    @pulumi.getter(name="scheduleFrequency")
    def schedule_frequency(self) -> pulumi.Output['outputs.ClassificationJobScheduleFrequency']:
        return pulumi.get(self, "schedule_frequency")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter(name="userPausedDetails")
    def user_paused_details(self) -> pulumi.Output[Sequence['outputs.ClassificationJobUserPausedDetail']]:
        return pulumi.get(self, "user_paused_details")

