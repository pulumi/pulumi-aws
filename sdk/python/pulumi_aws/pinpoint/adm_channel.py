# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class AdmChannel(pulumi.CustomResource):
    """
    Provides a Pinpoint ADM (Amazon Device Messaging) Channel resource.
    
    ~> **Note:** All arguments including the Client ID and Client Secret will be stored in the raw state as plain-text.
    [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    
    """
    def __init__(__self__, __name__, __opts__=None, application_id=None, client_id=None, client_secret=None, enabled=None):
        """Create a AdmChannel resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not application_id:
            raise TypeError('Missing required property application_id')
        elif not isinstance(application_id, basestring):
            raise TypeError('Expected property application_id to be a basestring')
        __self__.application_id = application_id
        """
        The application ID.
        """
        __props__['applicationId'] = application_id

        if not client_id:
            raise TypeError('Missing required property client_id')
        elif not isinstance(client_id, basestring):
            raise TypeError('Expected property client_id to be a basestring')
        __self__.client_id = client_id
        """
        Client ID (part of OAuth Credentials) obtained via Amazon Developer Account.
        """
        __props__['clientId'] = client_id

        if not client_secret:
            raise TypeError('Missing required property client_secret')
        elif not isinstance(client_secret, basestring):
            raise TypeError('Expected property client_secret to be a basestring')
        __self__.client_secret = client_secret
        """
        Client Secret (part of OAuth Credentials) obtained via Amazon Developer Account.
        """
        __props__['clientSecret'] = client_secret

        if enabled and not isinstance(enabled, bool):
            raise TypeError('Expected property enabled to be a bool')
        __self__.enabled = enabled
        """
        Specifies whether to enable the channel. Defaults to `true`.
        """
        __props__['enabled'] = enabled

        super(AdmChannel, __self__).__init__(
            'aws:pinpoint/admChannel:AdmChannel',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'applicationId' in outs:
            self.application_id = outs['applicationId']
        if 'clientId' in outs:
            self.client_id = outs['clientId']
        if 'clientSecret' in outs:
            self.client_secret = outs['clientSecret']
        if 'enabled' in outs:
            self.enabled = outs['enabled']
