# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class CatalogDatabase(pulumi.CustomResource):
    """
    Provides a Glue Catalog Database Resource. You can refer to the [Glue Developer Guide](http://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html) for a full explanation of the Glue Data Catalog functionality
    """
    def __init__(__self__, __name__, __opts__=None, catalog_id=None, description=None, location_uri=None, name=None, parameters=None):
        """Create a CatalogDatabase resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if catalog_id and not isinstance(catalog_id, basestring):
            raise TypeError('Expected property catalog_id to be a basestring')
        __self__.catalog_id = catalog_id
        """
        ID of the Glue Catalog to create the database in. If omitted, this defaults to the AWS Account ID.
        """
        __props__['catalogId'] = catalog_id

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description of the database.
        """
        __props__['description'] = description

        if location_uri and not isinstance(location_uri, basestring):
            raise TypeError('Expected property location_uri to be a basestring')
        __self__.location_uri = location_uri
        """
        The location of the database (for example, an HDFS path).
        """
        __props__['locationUri'] = location_uri

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the database.
        """
        __props__['name'] = name

        if parameters and not isinstance(parameters, dict):
            raise TypeError('Expected property parameters to be a dict')
        __self__.parameters = parameters
        """
        A list of key-value pairs that define parameters and properties of the database.
        """
        __props__['parameters'] = parameters

        super(CatalogDatabase, __self__).__init__(
            'aws:glue/catalogDatabase:CatalogDatabase',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'catalogId' in outs:
            self.catalog_id = outs['catalogId']
        if 'description' in outs:
            self.description = outs['description']
        if 'locationUri' in outs:
            self.location_uri = outs['locationUri']
        if 'name' in outs:
            self.name = outs['name']
        if 'parameters' in outs:
            self.parameters = outs['parameters']
