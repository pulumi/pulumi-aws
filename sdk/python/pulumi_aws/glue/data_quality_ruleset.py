# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataQualityRulesetArgs', 'DataQualityRuleset']

@pulumi.input_type
class DataQualityRulesetArgs:
    def __init__(__self__, *,
                 ruleset: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_table: Optional[pulumi.Input['DataQualityRulesetTargetTableArgs']] = None):
        """
        The set of arguments for constructing a DataQualityRuleset resource.
        :param pulumi.Input[str] ruleset: A Data Quality Definition Language (DQDL) ruleset. For more information, see the AWS Glue developer guide.
        :param pulumi.Input[str] description: Description of the data quality ruleset.
        :param pulumi.Input[str] name: Name of the data quality ruleset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input['DataQualityRulesetTargetTableArgs'] target_table: A Configuration block specifying a target table associated with the data quality ruleset. See `target_table` below.
        """
        pulumi.set(__self__, "ruleset", ruleset)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_table is not None:
            pulumi.set(__self__, "target_table", target_table)

    @property
    @pulumi.getter
    def ruleset(self) -> pulumi.Input[str]:
        """
        A Data Quality Definition Language (DQDL) ruleset. For more information, see the AWS Glue developer guide.
        """
        return pulumi.get(self, "ruleset")

    @ruleset.setter
    def ruleset(self, value: pulumi.Input[str]):
        pulumi.set(self, "ruleset", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the data quality ruleset.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the data quality ruleset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetTable")
    def target_table(self) -> Optional[pulumi.Input['DataQualityRulesetTargetTableArgs']]:
        """
        A Configuration block specifying a target table associated with the data quality ruleset. See `target_table` below.
        """
        return pulumi.get(self, "target_table")

    @target_table.setter
    def target_table(self, value: Optional[pulumi.Input['DataQualityRulesetTargetTableArgs']]):
        pulumi.set(self, "target_table", value)


@pulumi.input_type
class _DataQualityRulesetState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 last_modified_on: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 recommendation_run_id: Optional[pulumi.Input[str]] = None,
                 ruleset: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_table: Optional[pulumi.Input['DataQualityRulesetTargetTableArgs']] = None):
        """
        Input properties used for looking up and filtering DataQualityRuleset resources.
        :param pulumi.Input[str] arn: ARN of the Glue Data Quality Ruleset.
        :param pulumi.Input[str] created_on: The time and date that this data quality ruleset was created.
        :param pulumi.Input[str] description: Description of the data quality ruleset.
        :param pulumi.Input[str] last_modified_on: The time and date that this data quality ruleset was created.
        :param pulumi.Input[str] name: Name of the data quality ruleset.
        :param pulumi.Input[str] recommendation_run_id: When a ruleset was created from a recommendation run, this run ID is generated to link the two together.
        :param pulumi.Input[str] ruleset: A Data Quality Definition Language (DQDL) ruleset. For more information, see the AWS Glue developer guide.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        :param pulumi.Input['DataQualityRulesetTargetTableArgs'] target_table: A Configuration block specifying a target table associated with the data quality ruleset. See `target_table` below.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if last_modified_on is not None:
            pulumi.set(__self__, "last_modified_on", last_modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recommendation_run_id is not None:
            pulumi.set(__self__, "recommendation_run_id", recommendation_run_id)
        if ruleset is not None:
            pulumi.set(__self__, "ruleset", ruleset)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if target_table is not None:
            pulumi.set(__self__, "target_table", target_table)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of the Glue Data Quality Ruleset.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        """
        The time and date that this data quality ruleset was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the data quality ruleset.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="lastModifiedOn")
    def last_modified_on(self) -> Optional[pulumi.Input[str]]:
        """
        The time and date that this data quality ruleset was created.
        """
        return pulumi.get(self, "last_modified_on")

    @last_modified_on.setter
    def last_modified_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified_on", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the data quality ruleset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="recommendationRunId")
    def recommendation_run_id(self) -> Optional[pulumi.Input[str]]:
        """
        When a ruleset was created from a recommendation run, this run ID is generated to link the two together.
        """
        return pulumi.get(self, "recommendation_run_id")

    @recommendation_run_id.setter
    def recommendation_run_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recommendation_run_id", value)

    @property
    @pulumi.getter
    def ruleset(self) -> Optional[pulumi.Input[str]]:
        """
        A Data Quality Definition Language (DQDL) ruleset. For more information, see the AWS Glue developer guide.
        """
        return pulumi.get(self, "ruleset")

    @ruleset.setter
    def ruleset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ruleset", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter(name="targetTable")
    def target_table(self) -> Optional[pulumi.Input['DataQualityRulesetTargetTableArgs']]:
        """
        A Configuration block specifying a target table associated with the data quality ruleset. See `target_table` below.
        """
        return pulumi.get(self, "target_table")

    @target_table.setter
    def target_table(self, value: Optional[pulumi.Input['DataQualityRulesetTargetTableArgs']]):
        pulumi.set(self, "target_table", value)


class DataQualityRuleset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ruleset: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_table: Optional[pulumi.Input[pulumi.InputType['DataQualityRulesetTargetTableArgs']]] = None,
                 __props__=None):
        """
        Provides a Glue Data Quality Ruleset Resource. You can refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/glue-data-quality.html) for a full explanation of the Glue Data Quality Ruleset functionality

        ## Example Usage
        ### Basic

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.glue.DataQualityRuleset("example", ruleset="Rules = [Completeness \\"colA\\" between 0.4 and 0.8]")
        ```
        ### With description

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.glue.DataQualityRuleset("example",
            description="example",
            ruleset="Rules = [Completeness \\"colA\\" between 0.4 and 0.8]")
        ```
        ### With tags

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.glue.DataQualityRuleset("example",
            ruleset="Rules = [Completeness \\"colA\\" between 0.4 and 0.8]",
            tags={
                "hello": "world",
            })
        ```
        ### With target_table

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.glue.DataQualityRuleset("example",
            ruleset="Rules = [Completeness \\"colA\\" between 0.4 and 0.8]",
            target_table=aws.glue.DataQualityRulesetTargetTableArgs(
                database_name=aws_glue_catalog_database["example"]["name"],
                table_name=aws_glue_catalog_table["example"]["name"],
            ))
        ```

        ## Import

        Using `pulumi import`, import Glue Data Quality Ruleset using the `name`. For example:

        ```sh
         $ pulumi import aws:glue/dataQualityRuleset:DataQualityRuleset example exampleName
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the data quality ruleset.
        :param pulumi.Input[str] name: Name of the data quality ruleset.
        :param pulumi.Input[str] ruleset: A Data Quality Definition Language (DQDL) ruleset. For more information, see the AWS Glue developer guide.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[pulumi.InputType['DataQualityRulesetTargetTableArgs']] target_table: A Configuration block specifying a target table associated with the data quality ruleset. See `target_table` below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataQualityRulesetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Glue Data Quality Ruleset Resource. You can refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/glue-data-quality.html) for a full explanation of the Glue Data Quality Ruleset functionality

        ## Example Usage
        ### Basic

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.glue.DataQualityRuleset("example", ruleset="Rules = [Completeness \\"colA\\" between 0.4 and 0.8]")
        ```
        ### With description

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.glue.DataQualityRuleset("example",
            description="example",
            ruleset="Rules = [Completeness \\"colA\\" between 0.4 and 0.8]")
        ```
        ### With tags

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.glue.DataQualityRuleset("example",
            ruleset="Rules = [Completeness \\"colA\\" between 0.4 and 0.8]",
            tags={
                "hello": "world",
            })
        ```
        ### With target_table

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.glue.DataQualityRuleset("example",
            ruleset="Rules = [Completeness \\"colA\\" between 0.4 and 0.8]",
            target_table=aws.glue.DataQualityRulesetTargetTableArgs(
                database_name=aws_glue_catalog_database["example"]["name"],
                table_name=aws_glue_catalog_table["example"]["name"],
            ))
        ```

        ## Import

        Using `pulumi import`, import Glue Data Quality Ruleset using the `name`. For example:

        ```sh
         $ pulumi import aws:glue/dataQualityRuleset:DataQualityRuleset example exampleName
        ```

        :param str resource_name: The name of the resource.
        :param DataQualityRulesetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataQualityRulesetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ruleset: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 target_table: Optional[pulumi.Input[pulumi.InputType['DataQualityRulesetTargetTableArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataQualityRulesetArgs.__new__(DataQualityRulesetArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if ruleset is None and not opts.urn:
                raise TypeError("Missing required property 'ruleset'")
            __props__.__dict__["ruleset"] = ruleset
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target_table"] = target_table
            __props__.__dict__["arn"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["last_modified_on"] = None
            __props__.__dict__["recommendation_run_id"] = None
            __props__.__dict__["tags_all"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["tagsAll"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DataQualityRuleset, __self__).__init__(
            'aws:glue/dataQualityRuleset:DataQualityRuleset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            created_on: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            last_modified_on: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            recommendation_run_id: Optional[pulumi.Input[str]] = None,
            ruleset: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            target_table: Optional[pulumi.Input[pulumi.InputType['DataQualityRulesetTargetTableArgs']]] = None) -> 'DataQualityRuleset':
        """
        Get an existing DataQualityRuleset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: ARN of the Glue Data Quality Ruleset.
        :param pulumi.Input[str] created_on: The time and date that this data quality ruleset was created.
        :param pulumi.Input[str] description: Description of the data quality ruleset.
        :param pulumi.Input[str] last_modified_on: The time and date that this data quality ruleset was created.
        :param pulumi.Input[str] name: Name of the data quality ruleset.
        :param pulumi.Input[str] recommendation_run_id: When a ruleset was created from a recommendation run, this run ID is generated to link the two together.
        :param pulumi.Input[str] ruleset: A Data Quality Definition Language (DQDL) ruleset. For more information, see the AWS Glue developer guide.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        :param pulumi.Input[pulumi.InputType['DataQualityRulesetTargetTableArgs']] target_table: A Configuration block specifying a target table associated with the data quality ruleset. See `target_table` below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataQualityRulesetState.__new__(_DataQualityRulesetState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["last_modified_on"] = last_modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["recommendation_run_id"] = recommendation_run_id
        __props__.__dict__["ruleset"] = ruleset
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["target_table"] = target_table
        return DataQualityRuleset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        ARN of the Glue Data Quality Ruleset.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[str]:
        """
        The time and date that this data quality ruleset was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the data quality ruleset.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="lastModifiedOn")
    def last_modified_on(self) -> pulumi.Output[str]:
        """
        The time and date that this data quality ruleset was created.
        """
        return pulumi.get(self, "last_modified_on")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the data quality ruleset.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationRunId")
    def recommendation_run_id(self) -> pulumi.Output[str]:
        """
        When a ruleset was created from a recommendation run, this run ID is generated to link the two together.
        """
        return pulumi.get(self, "recommendation_run_id")

    @property
    @pulumi.getter
    def ruleset(self) -> pulumi.Output[str]:
        """
        A Data Quality Definition Language (DQDL) ruleset. For more information, see the AWS Glue developer guide.
        """
        return pulumi.get(self, "ruleset")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter(name="targetTable")
    def target_table(self) -> pulumi.Output[Optional['outputs.DataQualityRulesetTargetTable']]:
        """
        A Configuration block specifying a target table associated with the data quality ruleset. See `target_table` below.
        """
        return pulumi.get(self, "target_table")

