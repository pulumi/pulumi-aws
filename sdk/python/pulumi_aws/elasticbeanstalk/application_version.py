# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class ApplicationVersion(pulumi.CustomResource):
    """
    Provides an Elastic Beanstalk Application Version Resource. Elastic Beanstalk allows
    you to deploy and manage applications in the AWS cloud without worrying about
    the infrastructure that runs those applications.
    
    This resource creates a Beanstalk Application Version that can be deployed to a Beanstalk
    Environment.
    
    ~> **NOTE on Application Version Resource:**  When using the Application Version resource with multiple 
    [Elastic Beanstalk Environments](elastic_beanstalk_environment.html) it is possible that an error may be returned
    when attempting to delete an Application Version while it is still in use by a different environment.
    To work around this you can:
    <ol>
    <li>Create each environment in a separate AWS account</li>
    <li>Create your `aws_elastic_beanstalk_application_version` resources with a unique names in your 
    Elastic Beanstalk Application. For example &lt;revision&gt;-&lt;environment&gt;.</li>
    </ol>
    """
    def __init__(__self__, __name__, __opts__=None, application=None, bucket=None, description=None, force_delete=None, key=None, name=None):
        """Create a ApplicationVersion resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not application:
            raise TypeError('Missing required property application')
        elif not isinstance(application, basestring):
            raise TypeError('Expected property application to be a basestring')
        __self__.application = application
        """
        Name of the Beanstalk Application the version is associated with.
        """
        __props__['application'] = application

        if not bucket:
            raise TypeError('Missing required property bucket')
        elif not isinstance(bucket, basestring):
            raise TypeError('Expected property bucket to be a basestring')
        __self__.bucket = bucket
        """
        S3 bucket that contains the Application Version source bundle.
        """
        __props__['bucket'] = bucket

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Short description of the Application Version.
        """
        __props__['description'] = description

        if force_delete and not isinstance(force_delete, bool):
            raise TypeError('Expected property force_delete to be a bool')
        __self__.force_delete = force_delete
        """
        On delete, force an Application Version to be deleted when it may be in use
        by multiple Elastic Beanstalk Environments.
        """
        __props__['forceDelete'] = force_delete

        if not key:
            raise TypeError('Missing required property key')
        elif not isinstance(key, basestring):
            raise TypeError('Expected property key to be a basestring')
        __self__.key = key
        """
        S3 object that is the Application Version source bundle.
        """
        __props__['key'] = key

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        A unique name for the this Application Version.
        """
        __props__['name'] = name

        super(ApplicationVersion, __self__).__init__(
            'aws:elasticbeanstalk/applicationVersion:ApplicationVersion',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'application' in outs:
            self.application = outs['application']
        if 'bucket' in outs:
            self.bucket = outs['bucket']
        if 'description' in outs:
            self.description = outs['description']
        if 'forceDelete' in outs:
            self.force_delete = outs['forceDelete']
        if 'key' in outs:
            self.key = outs['key']
        if 'name' in outs:
            self.name = outs['name']
