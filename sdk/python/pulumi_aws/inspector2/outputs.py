# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'FilterFilterCriteria',
    'FilterFilterCriteriaAwsAccountId',
    'FilterFilterCriteriaCodeVulnerabilityDetectorName',
    'FilterFilterCriteriaCodeVulnerabilityDetectorTag',
    'FilterFilterCriteriaCodeVulnerabilityFilePath',
    'FilterFilterCriteriaComponentId',
    'FilterFilterCriteriaComponentType',
    'FilterFilterCriteriaEc2InstanceImageId',
    'FilterFilterCriteriaEc2InstanceSubnetId',
    'FilterFilterCriteriaEc2InstanceVpcId',
    'FilterFilterCriteriaEcrImageArchitecture',
    'FilterFilterCriteriaEcrImageHash',
    'FilterFilterCriteriaEcrImagePushedAt',
    'FilterFilterCriteriaEcrImageRegistry',
    'FilterFilterCriteriaEcrImageRepositoryName',
    'FilterFilterCriteriaEcrImageTag',
    'FilterFilterCriteriaEpssScore',
    'FilterFilterCriteriaExploitAvailable',
    'FilterFilterCriteriaFindingArn',
    'FilterFilterCriteriaFindingStatus',
    'FilterFilterCriteriaFindingType',
    'FilterFilterCriteriaFirstObservedAt',
    'FilterFilterCriteriaFixAvailable',
    'FilterFilterCriteriaInspectorScore',
    'FilterFilterCriteriaLambdaFunctionExecutionRoleArn',
    'FilterFilterCriteriaLambdaFunctionLastModifiedAt',
    'FilterFilterCriteriaLambdaFunctionLayer',
    'FilterFilterCriteriaLambdaFunctionName',
    'FilterFilterCriteriaLambdaFunctionRuntime',
    'FilterFilterCriteriaLastObservedAt',
    'FilterFilterCriteriaNetworkProtocol',
    'FilterFilterCriteriaPortRange',
    'FilterFilterCriteriaRelatedVulnerability',
    'FilterFilterCriteriaResourceId',
    'FilterFilterCriteriaResourceTag',
    'FilterFilterCriteriaResourceType',
    'FilterFilterCriteriaSeverity',
    'FilterFilterCriteriaTitle',
    'FilterFilterCriteriaUpdatedAt',
    'FilterFilterCriteriaVendorSeverity',
    'FilterFilterCriteriaVulnerabilityId',
    'FilterFilterCriteriaVulnerabilitySource',
    'FilterFilterCriteriaVulnerablePackage',
    'FilterFilterCriteriaVulnerablePackageArchitecture',
    'FilterFilterCriteriaVulnerablePackageEpoch',
    'FilterFilterCriteriaVulnerablePackageFilePath',
    'FilterFilterCriteriaVulnerablePackageName',
    'FilterFilterCriteriaVulnerablePackageRelease',
    'FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArn',
    'FilterFilterCriteriaVulnerablePackageSourceLayerHash',
    'FilterFilterCriteriaVulnerablePackageVersion',
    'OrganizationConfigurationAutoEnable',
]

@pulumi.output_type
class FilterFilterCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccountIds":
            suggest = "aws_account_ids"
        elif key == "codeVulnerabilityDetectorNames":
            suggest = "code_vulnerability_detector_names"
        elif key == "codeVulnerabilityDetectorTags":
            suggest = "code_vulnerability_detector_tags"
        elif key == "codeVulnerabilityFilePaths":
            suggest = "code_vulnerability_file_paths"
        elif key == "componentIds":
            suggest = "component_ids"
        elif key == "componentTypes":
            suggest = "component_types"
        elif key == "ec2InstanceImageIds":
            suggest = "ec2_instance_image_ids"
        elif key == "ec2InstanceSubnetIds":
            suggest = "ec2_instance_subnet_ids"
        elif key == "ec2InstanceVpcIds":
            suggest = "ec2_instance_vpc_ids"
        elif key == "ecrImageArchitectures":
            suggest = "ecr_image_architectures"
        elif key == "ecrImageHashes":
            suggest = "ecr_image_hashes"
        elif key == "ecrImagePushedAts":
            suggest = "ecr_image_pushed_ats"
        elif key == "ecrImageRegistries":
            suggest = "ecr_image_registries"
        elif key == "ecrImageRepositoryNames":
            suggest = "ecr_image_repository_names"
        elif key == "ecrImageTags":
            suggest = "ecr_image_tags"
        elif key == "epssScores":
            suggest = "epss_scores"
        elif key == "exploitAvailables":
            suggest = "exploit_availables"
        elif key == "findingArns":
            suggest = "finding_arns"
        elif key == "findingStatuses":
            suggest = "finding_statuses"
        elif key == "findingTypes":
            suggest = "finding_types"
        elif key == "firstObservedAts":
            suggest = "first_observed_ats"
        elif key == "fixAvailables":
            suggest = "fix_availables"
        elif key == "inspectorScores":
            suggest = "inspector_scores"
        elif key == "lambdaFunctionExecutionRoleArns":
            suggest = "lambda_function_execution_role_arns"
        elif key == "lambdaFunctionLastModifiedAts":
            suggest = "lambda_function_last_modified_ats"
        elif key == "lambdaFunctionLayers":
            suggest = "lambda_function_layers"
        elif key == "lambdaFunctionNames":
            suggest = "lambda_function_names"
        elif key == "lambdaFunctionRuntimes":
            suggest = "lambda_function_runtimes"
        elif key == "lastObservedAts":
            suggest = "last_observed_ats"
        elif key == "networkProtocols":
            suggest = "network_protocols"
        elif key == "portRanges":
            suggest = "port_ranges"
        elif key == "relatedVulnerabilities":
            suggest = "related_vulnerabilities"
        elif key == "resourceIds":
            suggest = "resource_ids"
        elif key == "resourceTags":
            suggest = "resource_tags"
        elif key == "resourceTypes":
            suggest = "resource_types"
        elif key == "updatedAts":
            suggest = "updated_ats"
        elif key == "vendorSeverities":
            suggest = "vendor_severities"
        elif key == "vulnerabilityIds":
            suggest = "vulnerability_ids"
        elif key == "vulnerabilitySources":
            suggest = "vulnerability_sources"
        elif key == "vulnerablePackages":
            suggest = "vulnerable_packages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_account_ids: Optional[Sequence['outputs.FilterFilterCriteriaAwsAccountId']] = None,
                 code_vulnerability_detector_names: Optional[Sequence['outputs.FilterFilterCriteriaCodeVulnerabilityDetectorName']] = None,
                 code_vulnerability_detector_tags: Optional[Sequence['outputs.FilterFilterCriteriaCodeVulnerabilityDetectorTag']] = None,
                 code_vulnerability_file_paths: Optional[Sequence['outputs.FilterFilterCriteriaCodeVulnerabilityFilePath']] = None,
                 component_ids: Optional[Sequence['outputs.FilterFilterCriteriaComponentId']] = None,
                 component_types: Optional[Sequence['outputs.FilterFilterCriteriaComponentType']] = None,
                 ec2_instance_image_ids: Optional[Sequence['outputs.FilterFilterCriteriaEc2InstanceImageId']] = None,
                 ec2_instance_subnet_ids: Optional[Sequence['outputs.FilterFilterCriteriaEc2InstanceSubnetId']] = None,
                 ec2_instance_vpc_ids: Optional[Sequence['outputs.FilterFilterCriteriaEc2InstanceVpcId']] = None,
                 ecr_image_architectures: Optional[Sequence['outputs.FilterFilterCriteriaEcrImageArchitecture']] = None,
                 ecr_image_hashes: Optional[Sequence['outputs.FilterFilterCriteriaEcrImageHash']] = None,
                 ecr_image_pushed_ats: Optional[Sequence['outputs.FilterFilterCriteriaEcrImagePushedAt']] = None,
                 ecr_image_registries: Optional[Sequence['outputs.FilterFilterCriteriaEcrImageRegistry']] = None,
                 ecr_image_repository_names: Optional[Sequence['outputs.FilterFilterCriteriaEcrImageRepositoryName']] = None,
                 ecr_image_tags: Optional[Sequence['outputs.FilterFilterCriteriaEcrImageTag']] = None,
                 epss_scores: Optional[Sequence['outputs.FilterFilterCriteriaEpssScore']] = None,
                 exploit_availables: Optional[Sequence['outputs.FilterFilterCriteriaExploitAvailable']] = None,
                 finding_arns: Optional[Sequence['outputs.FilterFilterCriteriaFindingArn']] = None,
                 finding_statuses: Optional[Sequence['outputs.FilterFilterCriteriaFindingStatus']] = None,
                 finding_types: Optional[Sequence['outputs.FilterFilterCriteriaFindingType']] = None,
                 first_observed_ats: Optional[Sequence['outputs.FilterFilterCriteriaFirstObservedAt']] = None,
                 fix_availables: Optional[Sequence['outputs.FilterFilterCriteriaFixAvailable']] = None,
                 inspector_scores: Optional[Sequence['outputs.FilterFilterCriteriaInspectorScore']] = None,
                 lambda_function_execution_role_arns: Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArn']] = None,
                 lambda_function_last_modified_ats: Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionLastModifiedAt']] = None,
                 lambda_function_layers: Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionLayer']] = None,
                 lambda_function_names: Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionName']] = None,
                 lambda_function_runtimes: Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionRuntime']] = None,
                 last_observed_ats: Optional[Sequence['outputs.FilterFilterCriteriaLastObservedAt']] = None,
                 network_protocols: Optional[Sequence['outputs.FilterFilterCriteriaNetworkProtocol']] = None,
                 port_ranges: Optional[Sequence['outputs.FilterFilterCriteriaPortRange']] = None,
                 related_vulnerabilities: Optional[Sequence['outputs.FilterFilterCriteriaRelatedVulnerability']] = None,
                 resource_ids: Optional[Sequence['outputs.FilterFilterCriteriaResourceId']] = None,
                 resource_tags: Optional[Sequence['outputs.FilterFilterCriteriaResourceTag']] = None,
                 resource_types: Optional[Sequence['outputs.FilterFilterCriteriaResourceType']] = None,
                 severities: Optional[Sequence['outputs.FilterFilterCriteriaSeverity']] = None,
                 titles: Optional[Sequence['outputs.FilterFilterCriteriaTitle']] = None,
                 updated_ats: Optional[Sequence['outputs.FilterFilterCriteriaUpdatedAt']] = None,
                 vendor_severities: Optional[Sequence['outputs.FilterFilterCriteriaVendorSeverity']] = None,
                 vulnerability_ids: Optional[Sequence['outputs.FilterFilterCriteriaVulnerabilityId']] = None,
                 vulnerability_sources: Optional[Sequence['outputs.FilterFilterCriteriaVulnerabilitySource']] = None,
                 vulnerable_packages: Optional[Sequence['outputs.FilterFilterCriteriaVulnerablePackage']] = None):
        """
        :param Sequence['FilterFilterCriteriaAwsAccountIdArgs'] aws_account_ids: (Optional) The AWS account ID in which the finding was generated. Documented below.
        :param Sequence['FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs'] code_vulnerability_detector_names: (Optional) The ID of the component. Documented below.
        :param Sequence['FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs'] code_vulnerability_detector_tags: (Optional) The ID of the component. Documented below.
        :param Sequence['FilterFilterCriteriaCodeVulnerabilityFilePathArgs'] code_vulnerability_file_paths: (Optional) The ID of the component. Documented below.
        :param Sequence['FilterFilterCriteriaComponentIdArgs'] component_ids: (Optional) The ID of the component. Documented below.
        :param Sequence['FilterFilterCriteriaComponentTypeArgs'] component_types: (Optional) The type of the component. Documented below.
        :param Sequence['FilterFilterCriteriaEc2InstanceImageIdArgs'] ec2_instance_image_ids: (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
        :param Sequence['FilterFilterCriteriaEc2InstanceSubnetIdArgs'] ec2_instance_subnet_ids: (Optional) The ID of the subnet. Documented below.
        :param Sequence['FilterFilterCriteriaEc2InstanceVpcIdArgs'] ec2_instance_vpc_ids: (Optional) The ID of the VPC. Documented below.
        :param Sequence['FilterFilterCriteriaEcrImageArchitectureArgs'] ecr_image_architectures: (Optional) The architecture of the ECR image. Documented below.
        :param Sequence['FilterFilterCriteriaEcrImageHashArgs'] ecr_image_hashes: (Optional) The SHA256 hash of the ECR image. Documented below.
        :param Sequence['FilterFilterCriteriaEcrImagePushedAtArgs'] ecr_image_pushed_ats: (Optional) The date range when the image was pushed. Documented below.
        :param Sequence['FilterFilterCriteriaEcrImageRegistryArgs'] ecr_image_registries: (Optional) The registry of the ECR image. Documented below.
        :param Sequence['FilterFilterCriteriaEcrImageRepositoryNameArgs'] ecr_image_repository_names: (Optional) The name of the ECR repository. Documented below.
        :param Sequence['FilterFilterCriteriaEcrImageTagArgs'] ecr_image_tags: (Optional) The tags associated with the ECR image. Documented below.
        :param Sequence['FilterFilterCriteriaEpssScoreArgs'] epss_scores: (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
        :param Sequence['FilterFilterCriteriaExploitAvailableArgs'] exploit_availables: (Optional) Availability of exploits. Documented below.
        :param Sequence['FilterFilterCriteriaFindingArnArgs'] finding_arns: (Optional) The ARN of the finding. Documented below.
        :param Sequence['FilterFilterCriteriaFindingStatusArgs'] finding_statuses: (Optional) The status of the finding. Documented below.
        :param Sequence['FilterFilterCriteriaFindingTypeArgs'] finding_types: (Optional) The type of the finding. Documented below.
        :param Sequence['FilterFilterCriteriaFirstObservedAtArgs'] first_observed_ats: (Optional) When the finding was first observed. Documented below.
        :param Sequence['FilterFilterCriteriaFixAvailableArgs'] fix_availables: (Optional) Availability of the fix. Documented below.
        :param Sequence['FilterFilterCriteriaInspectorScoreArgs'] inspector_scores: (Optional) The Inspector score given to the finding. Documented below.
        :param Sequence['FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs'] lambda_function_execution_role_arns: (Optional) Lambda execution role ARN. Documented below.
        :param Sequence['FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs'] lambda_function_last_modified_ats: (Optional) Last modified timestamp of the lambda function. Documented below.
        :param Sequence['FilterFilterCriteriaLambdaFunctionLayerArgs'] lambda_function_layers: (Optional) Lambda function layers. Documented below.
        :param Sequence['FilterFilterCriteriaLambdaFunctionNameArgs'] lambda_function_names: (Optional) Lambda function name. Documented below.
        :param Sequence['FilterFilterCriteriaLambdaFunctionRuntimeArgs'] lambda_function_runtimes: (Optional) Lambda function runtime. Documented below.
        :param Sequence['FilterFilterCriteriaLastObservedAtArgs'] last_observed_ats: (Optional) When the finding was last observed. Documented below.
        :param Sequence['FilterFilterCriteriaNetworkProtocolArgs'] network_protocols: (Optional) The network protocol of the finding. Documented below.
        :param Sequence['FilterFilterCriteriaPortRangeArgs'] port_ranges: (Optional) The port range of the finding. Documented below.
        :param Sequence['FilterFilterCriteriaRelatedVulnerabilityArgs'] related_vulnerabilities: (Optional) Related vulnerabilities. Documented below.
        :param Sequence['FilterFilterCriteriaResourceIdArgs'] resource_ids: (Optional) The ID of the resource. Documented below.
        :param Sequence['FilterFilterCriteriaResourceTagArgs'] resource_tags: (Optional) The tags of the resource. Documented below.
        :param Sequence['FilterFilterCriteriaResourceTypeArgs'] resource_types: (Optional) The type of the resource. Documented below.
        :param Sequence['FilterFilterCriteriaSeverityArgs'] severities: (Optional) The severity of the finding. Documented below.
        :param Sequence['FilterFilterCriteriaTitleArgs'] titles: (Optional) The title of the finding. Documented below.
        :param Sequence['FilterFilterCriteriaUpdatedAtArgs'] updated_ats: (Optional) When the finding was last updated. Documented below.
        :param Sequence['FilterFilterCriteriaVendorSeverityArgs'] vendor_severities: (Optional) The severity as reported by the vendor. Documented below.
        :param Sequence['FilterFilterCriteriaVulnerabilityIdArgs'] vulnerability_ids: (Optional) The ID of the vulnerability. Documented below.
        :param Sequence['FilterFilterCriteriaVulnerabilitySourceArgs'] vulnerability_sources: (Optional) The source of the vulnerability. Documented below.
        :param Sequence['FilterFilterCriteriaVulnerablePackageArgs'] vulnerable_packages: (Optional) Details about vulnerable packages. Documented below.
        """
        if aws_account_ids is not None:
            pulumi.set(__self__, "aws_account_ids", aws_account_ids)
        if code_vulnerability_detector_names is not None:
            pulumi.set(__self__, "code_vulnerability_detector_names", code_vulnerability_detector_names)
        if code_vulnerability_detector_tags is not None:
            pulumi.set(__self__, "code_vulnerability_detector_tags", code_vulnerability_detector_tags)
        if code_vulnerability_file_paths is not None:
            pulumi.set(__self__, "code_vulnerability_file_paths", code_vulnerability_file_paths)
        if component_ids is not None:
            pulumi.set(__self__, "component_ids", component_ids)
        if component_types is not None:
            pulumi.set(__self__, "component_types", component_types)
        if ec2_instance_image_ids is not None:
            pulumi.set(__self__, "ec2_instance_image_ids", ec2_instance_image_ids)
        if ec2_instance_subnet_ids is not None:
            pulumi.set(__self__, "ec2_instance_subnet_ids", ec2_instance_subnet_ids)
        if ec2_instance_vpc_ids is not None:
            pulumi.set(__self__, "ec2_instance_vpc_ids", ec2_instance_vpc_ids)
        if ecr_image_architectures is not None:
            pulumi.set(__self__, "ecr_image_architectures", ecr_image_architectures)
        if ecr_image_hashes is not None:
            pulumi.set(__self__, "ecr_image_hashes", ecr_image_hashes)
        if ecr_image_pushed_ats is not None:
            pulumi.set(__self__, "ecr_image_pushed_ats", ecr_image_pushed_ats)
        if ecr_image_registries is not None:
            pulumi.set(__self__, "ecr_image_registries", ecr_image_registries)
        if ecr_image_repository_names is not None:
            pulumi.set(__self__, "ecr_image_repository_names", ecr_image_repository_names)
        if ecr_image_tags is not None:
            pulumi.set(__self__, "ecr_image_tags", ecr_image_tags)
        if epss_scores is not None:
            pulumi.set(__self__, "epss_scores", epss_scores)
        if exploit_availables is not None:
            pulumi.set(__self__, "exploit_availables", exploit_availables)
        if finding_arns is not None:
            pulumi.set(__self__, "finding_arns", finding_arns)
        if finding_statuses is not None:
            pulumi.set(__self__, "finding_statuses", finding_statuses)
        if finding_types is not None:
            pulumi.set(__self__, "finding_types", finding_types)
        if first_observed_ats is not None:
            pulumi.set(__self__, "first_observed_ats", first_observed_ats)
        if fix_availables is not None:
            pulumi.set(__self__, "fix_availables", fix_availables)
        if inspector_scores is not None:
            pulumi.set(__self__, "inspector_scores", inspector_scores)
        if lambda_function_execution_role_arns is not None:
            pulumi.set(__self__, "lambda_function_execution_role_arns", lambda_function_execution_role_arns)
        if lambda_function_last_modified_ats is not None:
            pulumi.set(__self__, "lambda_function_last_modified_ats", lambda_function_last_modified_ats)
        if lambda_function_layers is not None:
            pulumi.set(__self__, "lambda_function_layers", lambda_function_layers)
        if lambda_function_names is not None:
            pulumi.set(__self__, "lambda_function_names", lambda_function_names)
        if lambda_function_runtimes is not None:
            pulumi.set(__self__, "lambda_function_runtimes", lambda_function_runtimes)
        if last_observed_ats is not None:
            pulumi.set(__self__, "last_observed_ats", last_observed_ats)
        if network_protocols is not None:
            pulumi.set(__self__, "network_protocols", network_protocols)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if related_vulnerabilities is not None:
            pulumi.set(__self__, "related_vulnerabilities", related_vulnerabilities)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)
        if titles is not None:
            pulumi.set(__self__, "titles", titles)
        if updated_ats is not None:
            pulumi.set(__self__, "updated_ats", updated_ats)
        if vendor_severities is not None:
            pulumi.set(__self__, "vendor_severities", vendor_severities)
        if vulnerability_ids is not None:
            pulumi.set(__self__, "vulnerability_ids", vulnerability_ids)
        if vulnerability_sources is not None:
            pulumi.set(__self__, "vulnerability_sources", vulnerability_sources)
        if vulnerable_packages is not None:
            pulumi.set(__self__, "vulnerable_packages", vulnerable_packages)

    @property
    @pulumi.getter(name="awsAccountIds")
    def aws_account_ids(self) -> Optional[Sequence['outputs.FilterFilterCriteriaAwsAccountId']]:
        """
        (Optional) The AWS account ID in which the finding was generated. Documented below.
        """
        return pulumi.get(self, "aws_account_ids")

    @property
    @pulumi.getter(name="codeVulnerabilityDetectorNames")
    def code_vulnerability_detector_names(self) -> Optional[Sequence['outputs.FilterFilterCriteriaCodeVulnerabilityDetectorName']]:
        """
        (Optional) The ID of the component. Documented below.
        """
        return pulumi.get(self, "code_vulnerability_detector_names")

    @property
    @pulumi.getter(name="codeVulnerabilityDetectorTags")
    def code_vulnerability_detector_tags(self) -> Optional[Sequence['outputs.FilterFilterCriteriaCodeVulnerabilityDetectorTag']]:
        """
        (Optional) The ID of the component. Documented below.
        """
        return pulumi.get(self, "code_vulnerability_detector_tags")

    @property
    @pulumi.getter(name="codeVulnerabilityFilePaths")
    def code_vulnerability_file_paths(self) -> Optional[Sequence['outputs.FilterFilterCriteriaCodeVulnerabilityFilePath']]:
        """
        (Optional) The ID of the component. Documented below.
        """
        return pulumi.get(self, "code_vulnerability_file_paths")

    @property
    @pulumi.getter(name="componentIds")
    def component_ids(self) -> Optional[Sequence['outputs.FilterFilterCriteriaComponentId']]:
        """
        (Optional) The ID of the component. Documented below.
        """
        return pulumi.get(self, "component_ids")

    @property
    @pulumi.getter(name="componentTypes")
    def component_types(self) -> Optional[Sequence['outputs.FilterFilterCriteriaComponentType']]:
        """
        (Optional) The type of the component. Documented below.
        """
        return pulumi.get(self, "component_types")

    @property
    @pulumi.getter(name="ec2InstanceImageIds")
    def ec2_instance_image_ids(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEc2InstanceImageId']]:
        """
        (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
        """
        return pulumi.get(self, "ec2_instance_image_ids")

    @property
    @pulumi.getter(name="ec2InstanceSubnetIds")
    def ec2_instance_subnet_ids(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEc2InstanceSubnetId']]:
        """
        (Optional) The ID of the subnet. Documented below.
        """
        return pulumi.get(self, "ec2_instance_subnet_ids")

    @property
    @pulumi.getter(name="ec2InstanceVpcIds")
    def ec2_instance_vpc_ids(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEc2InstanceVpcId']]:
        """
        (Optional) The ID of the VPC. Documented below.
        """
        return pulumi.get(self, "ec2_instance_vpc_ids")

    @property
    @pulumi.getter(name="ecrImageArchitectures")
    def ecr_image_architectures(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEcrImageArchitecture']]:
        """
        (Optional) The architecture of the ECR image. Documented below.
        """
        return pulumi.get(self, "ecr_image_architectures")

    @property
    @pulumi.getter(name="ecrImageHashes")
    def ecr_image_hashes(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEcrImageHash']]:
        """
        (Optional) The SHA256 hash of the ECR image. Documented below.
        """
        return pulumi.get(self, "ecr_image_hashes")

    @property
    @pulumi.getter(name="ecrImagePushedAts")
    def ecr_image_pushed_ats(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEcrImagePushedAt']]:
        """
        (Optional) The date range when the image was pushed. Documented below.
        """
        return pulumi.get(self, "ecr_image_pushed_ats")

    @property
    @pulumi.getter(name="ecrImageRegistries")
    def ecr_image_registries(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEcrImageRegistry']]:
        """
        (Optional) The registry of the ECR image. Documented below.
        """
        return pulumi.get(self, "ecr_image_registries")

    @property
    @pulumi.getter(name="ecrImageRepositoryNames")
    def ecr_image_repository_names(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEcrImageRepositoryName']]:
        """
        (Optional) The name of the ECR repository. Documented below.
        """
        return pulumi.get(self, "ecr_image_repository_names")

    @property
    @pulumi.getter(name="ecrImageTags")
    def ecr_image_tags(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEcrImageTag']]:
        """
        (Optional) The tags associated with the ECR image. Documented below.
        """
        return pulumi.get(self, "ecr_image_tags")

    @property
    @pulumi.getter(name="epssScores")
    def epss_scores(self) -> Optional[Sequence['outputs.FilterFilterCriteriaEpssScore']]:
        """
        (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
        """
        return pulumi.get(self, "epss_scores")

    @property
    @pulumi.getter(name="exploitAvailables")
    def exploit_availables(self) -> Optional[Sequence['outputs.FilterFilterCriteriaExploitAvailable']]:
        """
        (Optional) Availability of exploits. Documented below.
        """
        return pulumi.get(self, "exploit_availables")

    @property
    @pulumi.getter(name="findingArns")
    def finding_arns(self) -> Optional[Sequence['outputs.FilterFilterCriteriaFindingArn']]:
        """
        (Optional) The ARN of the finding. Documented below.
        """
        return pulumi.get(self, "finding_arns")

    @property
    @pulumi.getter(name="findingStatuses")
    def finding_statuses(self) -> Optional[Sequence['outputs.FilterFilterCriteriaFindingStatus']]:
        """
        (Optional) The status of the finding. Documented below.
        """
        return pulumi.get(self, "finding_statuses")

    @property
    @pulumi.getter(name="findingTypes")
    def finding_types(self) -> Optional[Sequence['outputs.FilterFilterCriteriaFindingType']]:
        """
        (Optional) The type of the finding. Documented below.
        """
        return pulumi.get(self, "finding_types")

    @property
    @pulumi.getter(name="firstObservedAts")
    def first_observed_ats(self) -> Optional[Sequence['outputs.FilterFilterCriteriaFirstObservedAt']]:
        """
        (Optional) When the finding was first observed. Documented below.
        """
        return pulumi.get(self, "first_observed_ats")

    @property
    @pulumi.getter(name="fixAvailables")
    def fix_availables(self) -> Optional[Sequence['outputs.FilterFilterCriteriaFixAvailable']]:
        """
        (Optional) Availability of the fix. Documented below.
        """
        return pulumi.get(self, "fix_availables")

    @property
    @pulumi.getter(name="inspectorScores")
    def inspector_scores(self) -> Optional[Sequence['outputs.FilterFilterCriteriaInspectorScore']]:
        """
        (Optional) The Inspector score given to the finding. Documented below.
        """
        return pulumi.get(self, "inspector_scores")

    @property
    @pulumi.getter(name="lambdaFunctionExecutionRoleArns")
    def lambda_function_execution_role_arns(self) -> Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArn']]:
        """
        (Optional) Lambda execution role ARN. Documented below.
        """
        return pulumi.get(self, "lambda_function_execution_role_arns")

    @property
    @pulumi.getter(name="lambdaFunctionLastModifiedAts")
    def lambda_function_last_modified_ats(self) -> Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionLastModifiedAt']]:
        """
        (Optional) Last modified timestamp of the lambda function. Documented below.
        """
        return pulumi.get(self, "lambda_function_last_modified_ats")

    @property
    @pulumi.getter(name="lambdaFunctionLayers")
    def lambda_function_layers(self) -> Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionLayer']]:
        """
        (Optional) Lambda function layers. Documented below.
        """
        return pulumi.get(self, "lambda_function_layers")

    @property
    @pulumi.getter(name="lambdaFunctionNames")
    def lambda_function_names(self) -> Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionName']]:
        """
        (Optional) Lambda function name. Documented below.
        """
        return pulumi.get(self, "lambda_function_names")

    @property
    @pulumi.getter(name="lambdaFunctionRuntimes")
    def lambda_function_runtimes(self) -> Optional[Sequence['outputs.FilterFilterCriteriaLambdaFunctionRuntime']]:
        """
        (Optional) Lambda function runtime. Documented below.
        """
        return pulumi.get(self, "lambda_function_runtimes")

    @property
    @pulumi.getter(name="lastObservedAts")
    def last_observed_ats(self) -> Optional[Sequence['outputs.FilterFilterCriteriaLastObservedAt']]:
        """
        (Optional) When the finding was last observed. Documented below.
        """
        return pulumi.get(self, "last_observed_ats")

    @property
    @pulumi.getter(name="networkProtocols")
    def network_protocols(self) -> Optional[Sequence['outputs.FilterFilterCriteriaNetworkProtocol']]:
        """
        (Optional) The network protocol of the finding. Documented below.
        """
        return pulumi.get(self, "network_protocols")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.FilterFilterCriteriaPortRange']]:
        """
        (Optional) The port range of the finding. Documented below.
        """
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter(name="relatedVulnerabilities")
    def related_vulnerabilities(self) -> Optional[Sequence['outputs.FilterFilterCriteriaRelatedVulnerability']]:
        """
        (Optional) Related vulnerabilities. Documented below.
        """
        return pulumi.get(self, "related_vulnerabilities")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence['outputs.FilterFilterCriteriaResourceId']]:
        """
        (Optional) The ID of the resource. Documented below.
        """
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[Sequence['outputs.FilterFilterCriteriaResourceTag']]:
        """
        (Optional) The tags of the resource. Documented below.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[Sequence['outputs.FilterFilterCriteriaResourceType']]:
        """
        (Optional) The type of the resource. Documented below.
        """
        return pulumi.get(self, "resource_types")

    @property
    @pulumi.getter
    def severities(self) -> Optional[Sequence['outputs.FilterFilterCriteriaSeverity']]:
        """
        (Optional) The severity of the finding. Documented below.
        """
        return pulumi.get(self, "severities")

    @property
    @pulumi.getter
    def titles(self) -> Optional[Sequence['outputs.FilterFilterCriteriaTitle']]:
        """
        (Optional) The title of the finding. Documented below.
        """
        return pulumi.get(self, "titles")

    @property
    @pulumi.getter(name="updatedAts")
    def updated_ats(self) -> Optional[Sequence['outputs.FilterFilterCriteriaUpdatedAt']]:
        """
        (Optional) When the finding was last updated. Documented below.
        """
        return pulumi.get(self, "updated_ats")

    @property
    @pulumi.getter(name="vendorSeverities")
    def vendor_severities(self) -> Optional[Sequence['outputs.FilterFilterCriteriaVendorSeverity']]:
        """
        (Optional) The severity as reported by the vendor. Documented below.
        """
        return pulumi.get(self, "vendor_severities")

    @property
    @pulumi.getter(name="vulnerabilityIds")
    def vulnerability_ids(self) -> Optional[Sequence['outputs.FilterFilterCriteriaVulnerabilityId']]:
        """
        (Optional) The ID of the vulnerability. Documented below.
        """
        return pulumi.get(self, "vulnerability_ids")

    @property
    @pulumi.getter(name="vulnerabilitySources")
    def vulnerability_sources(self) -> Optional[Sequence['outputs.FilterFilterCriteriaVulnerabilitySource']]:
        """
        (Optional) The source of the vulnerability. Documented below.
        """
        return pulumi.get(self, "vulnerability_sources")

    @property
    @pulumi.getter(name="vulnerablePackages")
    def vulnerable_packages(self) -> Optional[Sequence['outputs.FilterFilterCriteriaVulnerablePackage']]:
        """
        (Optional) Details about vulnerable packages. Documented below.
        """
        return pulumi.get(self, "vulnerable_packages")


@pulumi.output_type
class FilterFilterCriteriaAwsAccountId(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaCodeVulnerabilityDetectorName(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaCodeVulnerabilityDetectorTag(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaCodeVulnerabilityFilePath(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaComponentId(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaComponentType(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEc2InstanceImageId(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEc2InstanceSubnetId(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEc2InstanceVpcId(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEcrImageArchitecture(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEcrImageHash(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEcrImagePushedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endInclusive":
            suggest = "end_inclusive"
        elif key == "startInclusive":
            suggest = "start_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaEcrImagePushedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaEcrImagePushedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaEcrImagePushedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_inclusive: Optional[builtins.str] = None,
                 start_inclusive: Optional[builtins.str] = None):
        """
        :param builtins.str end_inclusive: (Required) The end of the port range, inclusive.
        :param builtins.str start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[builtins.str]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[builtins.str]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")


@pulumi.output_type
class FilterFilterCriteriaEcrImageRegistry(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEcrImageRepositoryName(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEcrImageTag(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaEpssScore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lowerInclusive":
            suggest = "lower_inclusive"
        elif key == "upperInclusive":
            suggest = "upper_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaEpssScore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaEpssScore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaEpssScore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lower_inclusive: builtins.float,
                 upper_inclusive: builtins.float):
        """
        :param builtins.float lower_inclusive: (Optional) Lower bound of the range, inclusive.
        :param builtins.float upper_inclusive: (Optional) Upper bound of the range, inclusive.
        """
        pulumi.set(__self__, "lower_inclusive", lower_inclusive)
        pulumi.set(__self__, "upper_inclusive", upper_inclusive)

    @property
    @pulumi.getter(name="lowerInclusive")
    def lower_inclusive(self) -> builtins.float:
        """
        (Optional) Lower bound of the range, inclusive.
        """
        return pulumi.get(self, "lower_inclusive")

    @property
    @pulumi.getter(name="upperInclusive")
    def upper_inclusive(self) -> builtins.float:
        """
        (Optional) Upper bound of the range, inclusive.
        """
        return pulumi.get(self, "upper_inclusive")


@pulumi.output_type
class FilterFilterCriteriaExploitAvailable(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaFindingArn(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaFindingStatus(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaFindingType(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaFirstObservedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endInclusive":
            suggest = "end_inclusive"
        elif key == "startInclusive":
            suggest = "start_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaFirstObservedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaFirstObservedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaFirstObservedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_inclusive: Optional[builtins.str] = None,
                 start_inclusive: Optional[builtins.str] = None):
        """
        :param builtins.str end_inclusive: (Required) The end of the port range, inclusive.
        :param builtins.str start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[builtins.str]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[builtins.str]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")


@pulumi.output_type
class FilterFilterCriteriaFixAvailable(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaInspectorScore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lowerInclusive":
            suggest = "lower_inclusive"
        elif key == "upperInclusive":
            suggest = "upper_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaInspectorScore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaInspectorScore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaInspectorScore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lower_inclusive: builtins.float,
                 upper_inclusive: builtins.float):
        """
        :param builtins.float lower_inclusive: (Optional) Lower bound of the range, inclusive.
        :param builtins.float upper_inclusive: (Optional) Upper bound of the range, inclusive.
        """
        pulumi.set(__self__, "lower_inclusive", lower_inclusive)
        pulumi.set(__self__, "upper_inclusive", upper_inclusive)

    @property
    @pulumi.getter(name="lowerInclusive")
    def lower_inclusive(self) -> builtins.float:
        """
        (Optional) Lower bound of the range, inclusive.
        """
        return pulumi.get(self, "lower_inclusive")

    @property
    @pulumi.getter(name="upperInclusive")
    def upper_inclusive(self) -> builtins.float:
        """
        (Optional) Upper bound of the range, inclusive.
        """
        return pulumi.get(self, "upper_inclusive")


@pulumi.output_type
class FilterFilterCriteriaLambdaFunctionExecutionRoleArn(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaLambdaFunctionLastModifiedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endInclusive":
            suggest = "end_inclusive"
        elif key == "startInclusive":
            suggest = "start_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaLambdaFunctionLastModifiedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaLambdaFunctionLastModifiedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaLambdaFunctionLastModifiedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_inclusive: Optional[builtins.str] = None,
                 start_inclusive: Optional[builtins.str] = None):
        """
        :param builtins.str end_inclusive: (Required) The end of the port range, inclusive.
        :param builtins.str start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[builtins.str]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[builtins.str]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")


@pulumi.output_type
class FilterFilterCriteriaLambdaFunctionLayer(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaLambdaFunctionName(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaLambdaFunctionRuntime(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaLastObservedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endInclusive":
            suggest = "end_inclusive"
        elif key == "startInclusive":
            suggest = "start_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaLastObservedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaLastObservedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaLastObservedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_inclusive: Optional[builtins.str] = None,
                 start_inclusive: Optional[builtins.str] = None):
        """
        :param builtins.str end_inclusive: (Required) The end of the port range, inclusive.
        :param builtins.str start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[builtins.str]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[builtins.str]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")


@pulumi.output_type
class FilterFilterCriteriaNetworkProtocol(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginInclusive":
            suggest = "begin_inclusive"
        elif key == "endInclusive":
            suggest = "end_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 begin_inclusive: builtins.int,
                 end_inclusive: builtins.int):
        """
        :param builtins.int begin_inclusive: (Required) The beginning of the port range, inclusive.
        :param builtins.int end_inclusive: (Required) The end of the port range, inclusive.
        """
        pulumi.set(__self__, "begin_inclusive", begin_inclusive)
        pulumi.set(__self__, "end_inclusive", end_inclusive)

    @property
    @pulumi.getter(name="beginInclusive")
    def begin_inclusive(self) -> builtins.int:
        """
        (Required) The beginning of the port range, inclusive.
        """
        return pulumi.get(self, "begin_inclusive")

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> builtins.int:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")


@pulumi.output_type
class FilterFilterCriteriaRelatedVulnerability(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaResourceId(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaResourceTag(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str key: (Required) The key to filter on.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        (Required) The key to filter on.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaResourceType(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaSeverity(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaTitle(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaUpdatedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endInclusive":
            suggest = "end_inclusive"
        elif key == "startInclusive":
            suggest = "start_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaUpdatedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaUpdatedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaUpdatedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_inclusive: Optional[builtins.str] = None,
                 start_inclusive: Optional[builtins.str] = None):
        """
        :param builtins.str end_inclusive: (Required) The end of the port range, inclusive.
        :param builtins.str start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[builtins.str]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[builtins.str]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")


@pulumi.output_type
class FilterFilterCriteriaVendorSeverity(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerabilityId(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerabilitySource(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePath":
            suggest = "file_path"
        elif key == "sourceLambdaLayerArn":
            suggest = "source_lambda_layer_arn"
        elif key == "sourceLayerHash":
            suggest = "source_layer_hash"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaVulnerablePackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaVulnerablePackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaVulnerablePackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 architecture: Optional['outputs.FilterFilterCriteriaVulnerablePackageArchitecture'] = None,
                 epoches: Optional[Sequence['outputs.FilterFilterCriteriaVulnerablePackageEpoch']] = None,
                 file_path: Optional['outputs.FilterFilterCriteriaVulnerablePackageFilePath'] = None,
                 name: Optional['outputs.FilterFilterCriteriaVulnerablePackageName'] = None,
                 release: Optional['outputs.FilterFilterCriteriaVulnerablePackageRelease'] = None,
                 source_lambda_layer_arn: Optional['outputs.FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArn'] = None,
                 source_layer_hash: Optional['outputs.FilterFilterCriteriaVulnerablePackageSourceLayerHash'] = None,
                 version: Optional['outputs.FilterFilterCriteriaVulnerablePackageVersion'] = None):
        """
        :param 'FilterFilterCriteriaVulnerablePackageArchitectureArgs' architecture: (Optional) The architecture of the package. Documented below.
        :param Sequence['FilterFilterCriteriaVulnerablePackageEpochArgs'] epoches: (Optional) The epoch of the package. Documented below.
        :param 'FilterFilterCriteriaVulnerablePackageFilePathArgs' file_path: (Optional) The name of the package. Documented below.
        :param 'FilterFilterCriteriaVulnerablePackageNameArgs' name: Name of the filter.
        :param 'FilterFilterCriteriaVulnerablePackageReleaseArgs' release: (Optional) The release of the package. Documented below.
        :param 'FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgs' source_lambda_layer_arn: (Optional) The ARN of the package's source lambda layer. Documented below.
        :param 'FilterFilterCriteriaVulnerablePackageSourceLayerHashArgs' source_layer_hash: (Optional) The source layer hash of the package. Documented below.
        :param 'FilterFilterCriteriaVulnerablePackageVersionArgs' version: (Optional) The version of the package. Documented below.
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if epoches is not None:
            pulumi.set(__self__, "epoches", epoches)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if source_lambda_layer_arn is not None:
            pulumi.set(__self__, "source_lambda_layer_arn", source_lambda_layer_arn)
        if source_layer_hash is not None:
            pulumi.set(__self__, "source_layer_hash", source_layer_hash)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional['outputs.FilterFilterCriteriaVulnerablePackageArchitecture']:
        """
        (Optional) The architecture of the package. Documented below.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def epoches(self) -> Optional[Sequence['outputs.FilterFilterCriteriaVulnerablePackageEpoch']]:
        """
        (Optional) The epoch of the package. Documented below.
        """
        return pulumi.get(self, "epoches")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional['outputs.FilterFilterCriteriaVulnerablePackageFilePath']:
        """
        (Optional) The name of the package. Documented below.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter
    def name(self) -> Optional['outputs.FilterFilterCriteriaVulnerablePackageName']:
        """
        Name of the filter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional['outputs.FilterFilterCriteriaVulnerablePackageRelease']:
        """
        (Optional) The release of the package. Documented below.
        """
        return pulumi.get(self, "release")

    @property
    @pulumi.getter(name="sourceLambdaLayerArn")
    def source_lambda_layer_arn(self) -> Optional['outputs.FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArn']:
        """
        (Optional) The ARN of the package's source lambda layer. Documented below.
        """
        return pulumi.get(self, "source_lambda_layer_arn")

    @property
    @pulumi.getter(name="sourceLayerHash")
    def source_layer_hash(self) -> Optional['outputs.FilterFilterCriteriaVulnerablePackageSourceLayerHash']:
        """
        (Optional) The source layer hash of the package. Documented below.
        """
        return pulumi.get(self, "source_layer_hash")

    @property
    @pulumi.getter
    def version(self) -> Optional['outputs.FilterFilterCriteriaVulnerablePackageVersion']:
        """
        (Optional) The version of the package. Documented below.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackageArchitecture(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackageEpoch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lowerInclusive":
            suggest = "lower_inclusive"
        elif key == "upperInclusive":
            suggest = "upper_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterFilterCriteriaVulnerablePackageEpoch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterFilterCriteriaVulnerablePackageEpoch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterFilterCriteriaVulnerablePackageEpoch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lower_inclusive: builtins.float,
                 upper_inclusive: builtins.float):
        """
        :param builtins.float lower_inclusive: (Optional) Lower bound of the range, inclusive.
        :param builtins.float upper_inclusive: (Optional) Upper bound of the range, inclusive.
        """
        pulumi.set(__self__, "lower_inclusive", lower_inclusive)
        pulumi.set(__self__, "upper_inclusive", upper_inclusive)

    @property
    @pulumi.getter(name="lowerInclusive")
    def lower_inclusive(self) -> builtins.float:
        """
        (Optional) Lower bound of the range, inclusive.
        """
        return pulumi.get(self, "lower_inclusive")

    @property
    @pulumi.getter(name="upperInclusive")
    def upper_inclusive(self) -> builtins.float:
        """
        (Optional) Upper bound of the range, inclusive.
        """
        return pulumi.get(self, "upper_inclusive")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackageFilePath(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackageName(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackageRelease(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArn(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackageSourceLayerHash(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterFilterCriteriaVulnerablePackageVersion(dict):
    def __init__(__self__, *,
                 comparison: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param builtins.str value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> builtins.str:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OrganizationConfigurationAutoEnable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lambda":
            suggest = "lambda_"
        elif key == "lambdaCode":
            suggest = "lambda_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationConfigurationAutoEnable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationConfigurationAutoEnable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationConfigurationAutoEnable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ec2: builtins.bool,
                 ecr: builtins.bool,
                 lambda_: Optional[builtins.bool] = None,
                 lambda_code: Optional[builtins.bool] = None):
        """
        :param builtins.bool ec2: Whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.
        :param builtins.bool ecr: Whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.
        :param builtins.bool lambda_: Whether Lambda Function scans are automatically enabled for new members of your Amazon Inspector organization.
        :param builtins.bool lambda_code: Whether AWS Lambda code scans are automatically enabled for new members of your Amazon Inspector organization. **Note:** Lambda code scanning requires Lambda standard scanning to be activated. Consequently, if you are setting this argument to `true`, you must also set the `lambda` argument to `true`. See [Scanning AWS Lambda functions with Amazon Inspector](https://docs.aws.amazon.com/inspector/latest/user/scanning-lambda.html#lambda-code-scans) for more information.
        """
        pulumi.set(__self__, "ec2", ec2)
        pulumi.set(__self__, "ecr", ecr)
        if lambda_ is not None:
            pulumi.set(__self__, "lambda_", lambda_)
        if lambda_code is not None:
            pulumi.set(__self__, "lambda_code", lambda_code)

    @property
    @pulumi.getter
    def ec2(self) -> builtins.bool:
        """
        Whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        return pulumi.get(self, "ec2")

    @property
    @pulumi.getter
    def ecr(self) -> builtins.bool:
        """
        Whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        return pulumi.get(self, "ecr")

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[builtins.bool]:
        """
        Whether Lambda Function scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        return pulumi.get(self, "lambda_")

    @property
    @pulumi.getter(name="lambdaCode")
    def lambda_code(self) -> Optional[builtins.bool]:
        """
        Whether AWS Lambda code scans are automatically enabled for new members of your Amazon Inspector organization. **Note:** Lambda code scanning requires Lambda standard scanning to be activated. Consequently, if you are setting this argument to `true`, you must also set the `lambda` argument to `true`. See [Scanning AWS Lambda functions with Amazon Inspector](https://docs.aws.amazon.com/inspector/latest/user/scanning-lambda.html#lambda-code-scans) for more information.
        """
        return pulumi.get(self, "lambda_code")


