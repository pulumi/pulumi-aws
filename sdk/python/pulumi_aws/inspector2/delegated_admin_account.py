# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DelegatedAdminAccountArgs', 'DelegatedAdminAccount']

@pulumi.input_type
class DelegatedAdminAccountArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a DelegatedAdminAccount resource.
        :param pulumi.Input[str] account_id: Account to enable as delegated admin account.
        """
        pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        Account to enable as delegated admin account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)


@pulumi.input_type
class _DelegatedAdminAccountState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 relationship_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DelegatedAdminAccount resources.
        :param pulumi.Input[str] account_id: Account to enable as delegated admin account.
        :param pulumi.Input[str] relationship_status: Status of this delegated admin account.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if relationship_status is not None:
            pulumi.set(__self__, "relationship_status", relationship_status)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account to enable as delegated admin account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="relationshipStatus")
    def relationship_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of this delegated admin account.
        """
        return pulumi.get(self, "relationship_status")

    @relationship_status.setter
    def relationship_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relationship_status", value)


class DelegatedAdminAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage
        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        current = aws.get_caller_identity()
        example = aws.inspector2.DelegatedAdminAccount("example", account_id=current.account_id)
        ```

        ## Import

        Inspector V2 Delegated Admin Account can be imported using the `account_id`, e.g.,

        ```sh
         $ pulumi import aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount example 012345678901
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account to enable as delegated admin account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DelegatedAdminAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage
        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        current = aws.get_caller_identity()
        example = aws.inspector2.DelegatedAdminAccount("example", account_id=current.account_id)
        ```

        ## Import

        Inspector V2 Delegated Admin Account can be imported using the `account_id`, e.g.,

        ```sh
         $ pulumi import aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount example 012345678901
        ```

        :param str resource_name: The name of the resource.
        :param DelegatedAdminAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DelegatedAdminAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DelegatedAdminAccountArgs.__new__(DelegatedAdminAccountArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["relationship_status"] = None
        super(DelegatedAdminAccount, __self__).__init__(
            'aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            relationship_status: Optional[pulumi.Input[str]] = None) -> 'DelegatedAdminAccount':
        """
        Get an existing DelegatedAdminAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account to enable as delegated admin account.
        :param pulumi.Input[str] relationship_status: Status of this delegated admin account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DelegatedAdminAccountState.__new__(_DelegatedAdminAccountState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["relationship_status"] = relationship_status
        return DelegatedAdminAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        Account to enable as delegated admin account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="relationshipStatus")
    def relationship_status(self) -> pulumi.Output[str]:
        """
        Status of this delegated admin account.
        """
        return pulumi.get(self, "relationship_status")

