# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FilterFilterCriteriaArgs',
    'FilterFilterCriteriaArgsDict',
    'FilterFilterCriteriaAwsAccountIdArgs',
    'FilterFilterCriteriaAwsAccountIdArgsDict',
    'FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs',
    'FilterFilterCriteriaCodeVulnerabilityDetectorNameArgsDict',
    'FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs',
    'FilterFilterCriteriaCodeVulnerabilityDetectorTagArgsDict',
    'FilterFilterCriteriaCodeVulnerabilityFilePathArgs',
    'FilterFilterCriteriaCodeVulnerabilityFilePathArgsDict',
    'FilterFilterCriteriaComponentIdArgs',
    'FilterFilterCriteriaComponentIdArgsDict',
    'FilterFilterCriteriaComponentTypeArgs',
    'FilterFilterCriteriaComponentTypeArgsDict',
    'FilterFilterCriteriaEc2InstanceImageIdArgs',
    'FilterFilterCriteriaEc2InstanceImageIdArgsDict',
    'FilterFilterCriteriaEc2InstanceSubnetIdArgs',
    'FilterFilterCriteriaEc2InstanceSubnetIdArgsDict',
    'FilterFilterCriteriaEc2InstanceVpcIdArgs',
    'FilterFilterCriteriaEc2InstanceVpcIdArgsDict',
    'FilterFilterCriteriaEcrImageArchitectureArgs',
    'FilterFilterCriteriaEcrImageArchitectureArgsDict',
    'FilterFilterCriteriaEcrImageHashArgs',
    'FilterFilterCriteriaEcrImageHashArgsDict',
    'FilterFilterCriteriaEcrImagePushedAtArgs',
    'FilterFilterCriteriaEcrImagePushedAtArgsDict',
    'FilterFilterCriteriaEcrImageRegistryArgs',
    'FilterFilterCriteriaEcrImageRegistryArgsDict',
    'FilterFilterCriteriaEcrImageRepositoryNameArgs',
    'FilterFilterCriteriaEcrImageRepositoryNameArgsDict',
    'FilterFilterCriteriaEcrImageTagArgs',
    'FilterFilterCriteriaEcrImageTagArgsDict',
    'FilterFilterCriteriaEpssScoreArgs',
    'FilterFilterCriteriaEpssScoreArgsDict',
    'FilterFilterCriteriaExploitAvailableArgs',
    'FilterFilterCriteriaExploitAvailableArgsDict',
    'FilterFilterCriteriaFindingArnArgs',
    'FilterFilterCriteriaFindingArnArgsDict',
    'FilterFilterCriteriaFindingStatusArgs',
    'FilterFilterCriteriaFindingStatusArgsDict',
    'FilterFilterCriteriaFindingTypeArgs',
    'FilterFilterCriteriaFindingTypeArgsDict',
    'FilterFilterCriteriaFirstObservedAtArgs',
    'FilterFilterCriteriaFirstObservedAtArgsDict',
    'FilterFilterCriteriaFixAvailableArgs',
    'FilterFilterCriteriaFixAvailableArgsDict',
    'FilterFilterCriteriaInspectorScoreArgs',
    'FilterFilterCriteriaInspectorScoreArgsDict',
    'FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs',
    'FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgsDict',
    'FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs',
    'FilterFilterCriteriaLambdaFunctionLastModifiedAtArgsDict',
    'FilterFilterCriteriaLambdaFunctionLayerArgs',
    'FilterFilterCriteriaLambdaFunctionLayerArgsDict',
    'FilterFilterCriteriaLambdaFunctionNameArgs',
    'FilterFilterCriteriaLambdaFunctionNameArgsDict',
    'FilterFilterCriteriaLambdaFunctionRuntimeArgs',
    'FilterFilterCriteriaLambdaFunctionRuntimeArgsDict',
    'FilterFilterCriteriaLastObservedAtArgs',
    'FilterFilterCriteriaLastObservedAtArgsDict',
    'FilterFilterCriteriaNetworkProtocolArgs',
    'FilterFilterCriteriaNetworkProtocolArgsDict',
    'FilterFilterCriteriaPortRangeArgs',
    'FilterFilterCriteriaPortRangeArgsDict',
    'FilterFilterCriteriaRelatedVulnerabilityArgs',
    'FilterFilterCriteriaRelatedVulnerabilityArgsDict',
    'FilterFilterCriteriaResourceIdArgs',
    'FilterFilterCriteriaResourceIdArgsDict',
    'FilterFilterCriteriaResourceTagArgs',
    'FilterFilterCriteriaResourceTagArgsDict',
    'FilterFilterCriteriaResourceTypeArgs',
    'FilterFilterCriteriaResourceTypeArgsDict',
    'FilterFilterCriteriaSeverityArgs',
    'FilterFilterCriteriaSeverityArgsDict',
    'FilterFilterCriteriaTitleArgs',
    'FilterFilterCriteriaTitleArgsDict',
    'FilterFilterCriteriaUpdatedAtArgs',
    'FilterFilterCriteriaUpdatedAtArgsDict',
    'FilterFilterCriteriaVendorSeverityArgs',
    'FilterFilterCriteriaVendorSeverityArgsDict',
    'FilterFilterCriteriaVulnerabilityIdArgs',
    'FilterFilterCriteriaVulnerabilityIdArgsDict',
    'FilterFilterCriteriaVulnerabilitySourceArgs',
    'FilterFilterCriteriaVulnerabilitySourceArgsDict',
    'FilterFilterCriteriaVulnerablePackageArgs',
    'FilterFilterCriteriaVulnerablePackageArgsDict',
    'FilterFilterCriteriaVulnerablePackageArchitectureArgs',
    'FilterFilterCriteriaVulnerablePackageArchitectureArgsDict',
    'FilterFilterCriteriaVulnerablePackageEpochArgs',
    'FilterFilterCriteriaVulnerablePackageEpochArgsDict',
    'FilterFilterCriteriaVulnerablePackageFilePathArgs',
    'FilterFilterCriteriaVulnerablePackageFilePathArgsDict',
    'FilterFilterCriteriaVulnerablePackageNameArgs',
    'FilterFilterCriteriaVulnerablePackageNameArgsDict',
    'FilterFilterCriteriaVulnerablePackageReleaseArgs',
    'FilterFilterCriteriaVulnerablePackageReleaseArgsDict',
    'FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgs',
    'FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgsDict',
    'FilterFilterCriteriaVulnerablePackageSourceLayerHashArgs',
    'FilterFilterCriteriaVulnerablePackageSourceLayerHashArgsDict',
    'FilterFilterCriteriaVulnerablePackageVersionArgs',
    'FilterFilterCriteriaVulnerablePackageVersionArgsDict',
    'OrganizationConfigurationAutoEnableArgs',
    'OrganizationConfigurationAutoEnableArgsDict',
]

MYPY = False

if not MYPY:
    class FilterFilterCriteriaArgsDict(TypedDict):
        aws_account_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaAwsAccountIdArgsDict']]]]
        """
        (Optional) The AWS account ID in which the finding was generated. Documented below.
        """
        code_vulnerability_detector_names: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorNameArgsDict']]]]
        """
        (Optional) The ID of the component. Documented below.
        """
        code_vulnerability_detector_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorTagArgsDict']]]]
        """
        (Optional) The ID of the component. Documented below.
        """
        code_vulnerability_file_paths: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityFilePathArgsDict']]]]
        """
        (Optional) The ID of the component. Documented below.
        """
        component_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentIdArgsDict']]]]
        """
        (Optional) The ID of the component. Documented below.
        """
        component_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentTypeArgsDict']]]]
        """
        (Optional) The type of the component. Documented below.
        """
        ec2_instance_image_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceImageIdArgsDict']]]]
        """
        (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
        """
        ec2_instance_subnet_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceSubnetIdArgsDict']]]]
        """
        (Optional) The ID of the subnet. Documented below.
        """
        ec2_instance_vpc_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceVpcIdArgsDict']]]]
        """
        (Optional) The ID of the VPC. Documented below.
        """
        ecr_image_architectures: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageArchitectureArgsDict']]]]
        """
        (Optional) The architecture of the ECR image. Documented below.
        """
        ecr_image_hashes: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageHashArgsDict']]]]
        """
        (Optional) The SHA256 hash of the ECR image. Documented below.
        """
        ecr_image_pushed_ats: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImagePushedAtArgsDict']]]]
        """
        (Optional) The date range when the image was pushed. Documented below.
        """
        ecr_image_registries: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRegistryArgsDict']]]]
        """
        (Optional) The registry of the ECR image. Documented below.
        """
        ecr_image_repository_names: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRepositoryNameArgsDict']]]]
        """
        (Optional) The name of the ECR repository. Documented below.
        """
        ecr_image_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageTagArgsDict']]]]
        """
        (Optional) The tags associated with the ECR image. Documented below.
        """
        epss_scores: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEpssScoreArgsDict']]]]
        """
        (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
        """
        exploit_availables: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaExploitAvailableArgsDict']]]]
        """
        (Optional) Availability of exploits. Documented below.
        """
        finding_arns: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingArnArgsDict']]]]
        """
        (Optional) The ARN of the finding. Documented below.
        """
        finding_statuses: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingStatusArgsDict']]]]
        """
        (Optional) The status of the finding. Documented below.
        """
        finding_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingTypeArgsDict']]]]
        """
        (Optional) The type of the finding. Documented below.
        """
        first_observed_ats: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFirstObservedAtArgsDict']]]]
        """
        (Optional) When the finding was first observed. Documented below.
        """
        fix_availables: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFixAvailableArgsDict']]]]
        """
        (Optional) Availability of the fix. Documented below.
        """
        inspector_scores: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaInspectorScoreArgsDict']]]]
        """
        (Optional) The Inspector score given to the finding. Documented below.
        """
        lambda_function_execution_role_arns: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgsDict']]]]
        """
        (Optional) Lambda execution role ARN. Documented below.
        """
        lambda_function_last_modified_ats: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLastModifiedAtArgsDict']]]]
        """
        (Optional) Last modified timestamp of the lambda function. Documented below.
        """
        lambda_function_layers: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLayerArgsDict']]]]
        """
        (Optional) Lambda function layers. Documented below.
        """
        lambda_function_names: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionNameArgsDict']]]]
        """
        (Optional) Lambda function name. Documented below.
        """
        lambda_function_runtimes: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionRuntimeArgsDict']]]]
        """
        (Optional) Lambda function runtime. Documented below.
        """
        last_observed_ats: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLastObservedAtArgsDict']]]]
        """
        (Optional) When the finding was last observed. Documented below.
        """
        network_protocols: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaNetworkProtocolArgsDict']]]]
        """
        (Optional) The network protocol of the finding. Documented below.
        """
        port_ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaPortRangeArgsDict']]]]
        """
        (Optional) The port range of the finding. Documented below.
        """
        related_vulnerabilities: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaRelatedVulnerabilityArgsDict']]]]
        """
        (Optional) Related vulnerabilities. Documented below.
        """
        resource_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceIdArgsDict']]]]
        """
        (Optional) The ID of the resource. Documented below.
        """
        resource_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTagArgsDict']]]]
        """
        (Optional) The tags of the resource. Documented below.
        """
        resource_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTypeArgsDict']]]]
        """
        (Optional) The type of the resource. Documented below.
        """
        severities: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaSeverityArgsDict']]]]
        """
        (Optional) The severity of the finding. Documented below.
        """
        titles: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaTitleArgsDict']]]]
        """
        (Optional) The title of the finding. Documented below.
        """
        updated_ats: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaUpdatedAtArgsDict']]]]
        """
        (Optional) When the finding was last updated. Documented below.
        """
        vendor_severities: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVendorSeverityArgsDict']]]]
        """
        (Optional) The severity as reported by the vendor. Documented below.
        """
        vulnerability_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilityIdArgsDict']]]]
        """
        (Optional) The ID of the vulnerability. Documented below.
        """
        vulnerability_sources: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilitySourceArgsDict']]]]
        """
        (Optional) The source of the vulnerability. Documented below.
        """
        vulnerable_packages: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageArgsDict']]]]
        """
        (Optional) Details about vulnerable packages. Documented below.
        """
elif False:
    FilterFilterCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaArgs:
    def __init__(__self__, *,
                 aws_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaAwsAccountIdArgs']]]] = None,
                 code_vulnerability_detector_names: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs']]]] = None,
                 code_vulnerability_detector_tags: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs']]]] = None,
                 code_vulnerability_file_paths: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityFilePathArgs']]]] = None,
                 component_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentIdArgs']]]] = None,
                 component_types: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentTypeArgs']]]] = None,
                 ec2_instance_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceImageIdArgs']]]] = None,
                 ec2_instance_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceSubnetIdArgs']]]] = None,
                 ec2_instance_vpc_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceVpcIdArgs']]]] = None,
                 ecr_image_architectures: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageArchitectureArgs']]]] = None,
                 ecr_image_hashes: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageHashArgs']]]] = None,
                 ecr_image_pushed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImagePushedAtArgs']]]] = None,
                 ecr_image_registries: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRegistryArgs']]]] = None,
                 ecr_image_repository_names: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRepositoryNameArgs']]]] = None,
                 ecr_image_tags: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageTagArgs']]]] = None,
                 epss_scores: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEpssScoreArgs']]]] = None,
                 exploit_availables: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaExploitAvailableArgs']]]] = None,
                 finding_arns: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingArnArgs']]]] = None,
                 finding_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingStatusArgs']]]] = None,
                 finding_types: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingTypeArgs']]]] = None,
                 first_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFirstObservedAtArgs']]]] = None,
                 fix_availables: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFixAvailableArgs']]]] = None,
                 inspector_scores: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaInspectorScoreArgs']]]] = None,
                 lambda_function_execution_role_arns: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs']]]] = None,
                 lambda_function_last_modified_ats: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs']]]] = None,
                 lambda_function_layers: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLayerArgs']]]] = None,
                 lambda_function_names: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionNameArgs']]]] = None,
                 lambda_function_runtimes: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionRuntimeArgs']]]] = None,
                 last_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLastObservedAtArgs']]]] = None,
                 network_protocols: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaNetworkProtocolArgs']]]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaPortRangeArgs']]]] = None,
                 related_vulnerabilities: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaRelatedVulnerabilityArgs']]]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceIdArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTagArgs']]]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTypeArgs']]]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaSeverityArgs']]]] = None,
                 titles: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaTitleArgs']]]] = None,
                 updated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaUpdatedAtArgs']]]] = None,
                 vendor_severities: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVendorSeverityArgs']]]] = None,
                 vulnerability_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilityIdArgs']]]] = None,
                 vulnerability_sources: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilitySourceArgs']]]] = None,
                 vulnerable_packages: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaAwsAccountIdArgs']]] aws_account_ids: (Optional) The AWS account ID in which the finding was generated. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs']]] code_vulnerability_detector_names: (Optional) The ID of the component. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs']]] code_vulnerability_detector_tags: (Optional) The ID of the component. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityFilePathArgs']]] code_vulnerability_file_paths: (Optional) The ID of the component. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentIdArgs']]] component_ids: (Optional) The ID of the component. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentTypeArgs']]] component_types: (Optional) The type of the component. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceImageIdArgs']]] ec2_instance_image_ids: (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceSubnetIdArgs']]] ec2_instance_subnet_ids: (Optional) The ID of the subnet. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceVpcIdArgs']]] ec2_instance_vpc_ids: (Optional) The ID of the VPC. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageArchitectureArgs']]] ecr_image_architectures: (Optional) The architecture of the ECR image. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageHashArgs']]] ecr_image_hashes: (Optional) The SHA256 hash of the ECR image. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImagePushedAtArgs']]] ecr_image_pushed_ats: (Optional) The date range when the image was pushed. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRegistryArgs']]] ecr_image_registries: (Optional) The registry of the ECR image. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRepositoryNameArgs']]] ecr_image_repository_names: (Optional) The name of the ECR repository. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageTagArgs']]] ecr_image_tags: (Optional) The tags associated with the ECR image. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEpssScoreArgs']]] epss_scores: (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaExploitAvailableArgs']]] exploit_availables: (Optional) Availability of exploits. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingArnArgs']]] finding_arns: (Optional) The ARN of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingStatusArgs']]] finding_statuses: (Optional) The status of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingTypeArgs']]] finding_types: (Optional) The type of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFirstObservedAtArgs']]] first_observed_ats: (Optional) When the finding was first observed. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFixAvailableArgs']]] fix_availables: (Optional) Availability of the fix. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaInspectorScoreArgs']]] inspector_scores: (Optional) The Inspector score given to the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs']]] lambda_function_execution_role_arns: (Optional) Lambda execution role ARN. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs']]] lambda_function_last_modified_ats: (Optional) Last modified timestamp of the lambda function. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLayerArgs']]] lambda_function_layers: (Optional) Lambda function layers. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionNameArgs']]] lambda_function_names: (Optional) Lambda function name. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionRuntimeArgs']]] lambda_function_runtimes: (Optional) Lambda function runtime. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLastObservedAtArgs']]] last_observed_ats: (Optional) When the finding was last observed. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaNetworkProtocolArgs']]] network_protocols: (Optional) The network protocol of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaPortRangeArgs']]] port_ranges: (Optional) The port range of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaRelatedVulnerabilityArgs']]] related_vulnerabilities: (Optional) Related vulnerabilities. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceIdArgs']]] resource_ids: (Optional) The ID of the resource. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTagArgs']]] resource_tags: (Optional) The tags of the resource. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTypeArgs']]] resource_types: (Optional) The type of the resource. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaSeverityArgs']]] severities: (Optional) The severity of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaTitleArgs']]] titles: (Optional) The title of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaUpdatedAtArgs']]] updated_ats: (Optional) When the finding was last updated. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVendorSeverityArgs']]] vendor_severities: (Optional) The severity as reported by the vendor. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilityIdArgs']]] vulnerability_ids: (Optional) The ID of the vulnerability. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilitySourceArgs']]] vulnerability_sources: (Optional) The source of the vulnerability. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageArgs']]] vulnerable_packages: (Optional) Details about vulnerable packages. Documented below.
        """
        if aws_account_ids is not None:
            pulumi.set(__self__, "aws_account_ids", aws_account_ids)
        if code_vulnerability_detector_names is not None:
            pulumi.set(__self__, "code_vulnerability_detector_names", code_vulnerability_detector_names)
        if code_vulnerability_detector_tags is not None:
            pulumi.set(__self__, "code_vulnerability_detector_tags", code_vulnerability_detector_tags)
        if code_vulnerability_file_paths is not None:
            pulumi.set(__self__, "code_vulnerability_file_paths", code_vulnerability_file_paths)
        if component_ids is not None:
            pulumi.set(__self__, "component_ids", component_ids)
        if component_types is not None:
            pulumi.set(__self__, "component_types", component_types)
        if ec2_instance_image_ids is not None:
            pulumi.set(__self__, "ec2_instance_image_ids", ec2_instance_image_ids)
        if ec2_instance_subnet_ids is not None:
            pulumi.set(__self__, "ec2_instance_subnet_ids", ec2_instance_subnet_ids)
        if ec2_instance_vpc_ids is not None:
            pulumi.set(__self__, "ec2_instance_vpc_ids", ec2_instance_vpc_ids)
        if ecr_image_architectures is not None:
            pulumi.set(__self__, "ecr_image_architectures", ecr_image_architectures)
        if ecr_image_hashes is not None:
            pulumi.set(__self__, "ecr_image_hashes", ecr_image_hashes)
        if ecr_image_pushed_ats is not None:
            pulumi.set(__self__, "ecr_image_pushed_ats", ecr_image_pushed_ats)
        if ecr_image_registries is not None:
            pulumi.set(__self__, "ecr_image_registries", ecr_image_registries)
        if ecr_image_repository_names is not None:
            pulumi.set(__self__, "ecr_image_repository_names", ecr_image_repository_names)
        if ecr_image_tags is not None:
            pulumi.set(__self__, "ecr_image_tags", ecr_image_tags)
        if epss_scores is not None:
            pulumi.set(__self__, "epss_scores", epss_scores)
        if exploit_availables is not None:
            pulumi.set(__self__, "exploit_availables", exploit_availables)
        if finding_arns is not None:
            pulumi.set(__self__, "finding_arns", finding_arns)
        if finding_statuses is not None:
            pulumi.set(__self__, "finding_statuses", finding_statuses)
        if finding_types is not None:
            pulumi.set(__self__, "finding_types", finding_types)
        if first_observed_ats is not None:
            pulumi.set(__self__, "first_observed_ats", first_observed_ats)
        if fix_availables is not None:
            pulumi.set(__self__, "fix_availables", fix_availables)
        if inspector_scores is not None:
            pulumi.set(__self__, "inspector_scores", inspector_scores)
        if lambda_function_execution_role_arns is not None:
            pulumi.set(__self__, "lambda_function_execution_role_arns", lambda_function_execution_role_arns)
        if lambda_function_last_modified_ats is not None:
            pulumi.set(__self__, "lambda_function_last_modified_ats", lambda_function_last_modified_ats)
        if lambda_function_layers is not None:
            pulumi.set(__self__, "lambda_function_layers", lambda_function_layers)
        if lambda_function_names is not None:
            pulumi.set(__self__, "lambda_function_names", lambda_function_names)
        if lambda_function_runtimes is not None:
            pulumi.set(__self__, "lambda_function_runtimes", lambda_function_runtimes)
        if last_observed_ats is not None:
            pulumi.set(__self__, "last_observed_ats", last_observed_ats)
        if network_protocols is not None:
            pulumi.set(__self__, "network_protocols", network_protocols)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if related_vulnerabilities is not None:
            pulumi.set(__self__, "related_vulnerabilities", related_vulnerabilities)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)
        if titles is not None:
            pulumi.set(__self__, "titles", titles)
        if updated_ats is not None:
            pulumi.set(__self__, "updated_ats", updated_ats)
        if vendor_severities is not None:
            pulumi.set(__self__, "vendor_severities", vendor_severities)
        if vulnerability_ids is not None:
            pulumi.set(__self__, "vulnerability_ids", vulnerability_ids)
        if vulnerability_sources is not None:
            pulumi.set(__self__, "vulnerability_sources", vulnerability_sources)
        if vulnerable_packages is not None:
            pulumi.set(__self__, "vulnerable_packages", vulnerable_packages)

    @property
    @pulumi.getter(name="awsAccountIds")
    def aws_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaAwsAccountIdArgs']]]]:
        """
        (Optional) The AWS account ID in which the finding was generated. Documented below.
        """
        return pulumi.get(self, "aws_account_ids")

    @aws_account_ids.setter
    def aws_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaAwsAccountIdArgs']]]]):
        pulumi.set(self, "aws_account_ids", value)

    @property
    @pulumi.getter(name="codeVulnerabilityDetectorNames")
    def code_vulnerability_detector_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs']]]]:
        """
        (Optional) The ID of the component. Documented below.
        """
        return pulumi.get(self, "code_vulnerability_detector_names")

    @code_vulnerability_detector_names.setter
    def code_vulnerability_detector_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs']]]]):
        pulumi.set(self, "code_vulnerability_detector_names", value)

    @property
    @pulumi.getter(name="codeVulnerabilityDetectorTags")
    def code_vulnerability_detector_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs']]]]:
        """
        (Optional) The ID of the component. Documented below.
        """
        return pulumi.get(self, "code_vulnerability_detector_tags")

    @code_vulnerability_detector_tags.setter
    def code_vulnerability_detector_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs']]]]):
        pulumi.set(self, "code_vulnerability_detector_tags", value)

    @property
    @pulumi.getter(name="codeVulnerabilityFilePaths")
    def code_vulnerability_file_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityFilePathArgs']]]]:
        """
        (Optional) The ID of the component. Documented below.
        """
        return pulumi.get(self, "code_vulnerability_file_paths")

    @code_vulnerability_file_paths.setter
    def code_vulnerability_file_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaCodeVulnerabilityFilePathArgs']]]]):
        pulumi.set(self, "code_vulnerability_file_paths", value)

    @property
    @pulumi.getter(name="componentIds")
    def component_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentIdArgs']]]]:
        """
        (Optional) The ID of the component. Documented below.
        """
        return pulumi.get(self, "component_ids")

    @component_ids.setter
    def component_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentIdArgs']]]]):
        pulumi.set(self, "component_ids", value)

    @property
    @pulumi.getter(name="componentTypes")
    def component_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentTypeArgs']]]]:
        """
        (Optional) The type of the component. Documented below.
        """
        return pulumi.get(self, "component_types")

    @component_types.setter
    def component_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaComponentTypeArgs']]]]):
        pulumi.set(self, "component_types", value)

    @property
    @pulumi.getter(name="ec2InstanceImageIds")
    def ec2_instance_image_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceImageIdArgs']]]]:
        """
        (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
        """
        return pulumi.get(self, "ec2_instance_image_ids")

    @ec2_instance_image_ids.setter
    def ec2_instance_image_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceImageIdArgs']]]]):
        pulumi.set(self, "ec2_instance_image_ids", value)

    @property
    @pulumi.getter(name="ec2InstanceSubnetIds")
    def ec2_instance_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceSubnetIdArgs']]]]:
        """
        (Optional) The ID of the subnet. Documented below.
        """
        return pulumi.get(self, "ec2_instance_subnet_ids")

    @ec2_instance_subnet_ids.setter
    def ec2_instance_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceSubnetIdArgs']]]]):
        pulumi.set(self, "ec2_instance_subnet_ids", value)

    @property
    @pulumi.getter(name="ec2InstanceVpcIds")
    def ec2_instance_vpc_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceVpcIdArgs']]]]:
        """
        (Optional) The ID of the VPC. Documented below.
        """
        return pulumi.get(self, "ec2_instance_vpc_ids")

    @ec2_instance_vpc_ids.setter
    def ec2_instance_vpc_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEc2InstanceVpcIdArgs']]]]):
        pulumi.set(self, "ec2_instance_vpc_ids", value)

    @property
    @pulumi.getter(name="ecrImageArchitectures")
    def ecr_image_architectures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageArchitectureArgs']]]]:
        """
        (Optional) The architecture of the ECR image. Documented below.
        """
        return pulumi.get(self, "ecr_image_architectures")

    @ecr_image_architectures.setter
    def ecr_image_architectures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageArchitectureArgs']]]]):
        pulumi.set(self, "ecr_image_architectures", value)

    @property
    @pulumi.getter(name="ecrImageHashes")
    def ecr_image_hashes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageHashArgs']]]]:
        """
        (Optional) The SHA256 hash of the ECR image. Documented below.
        """
        return pulumi.get(self, "ecr_image_hashes")

    @ecr_image_hashes.setter
    def ecr_image_hashes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageHashArgs']]]]):
        pulumi.set(self, "ecr_image_hashes", value)

    @property
    @pulumi.getter(name="ecrImagePushedAts")
    def ecr_image_pushed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImagePushedAtArgs']]]]:
        """
        (Optional) The date range when the image was pushed. Documented below.
        """
        return pulumi.get(self, "ecr_image_pushed_ats")

    @ecr_image_pushed_ats.setter
    def ecr_image_pushed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImagePushedAtArgs']]]]):
        pulumi.set(self, "ecr_image_pushed_ats", value)

    @property
    @pulumi.getter(name="ecrImageRegistries")
    def ecr_image_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRegistryArgs']]]]:
        """
        (Optional) The registry of the ECR image. Documented below.
        """
        return pulumi.get(self, "ecr_image_registries")

    @ecr_image_registries.setter
    def ecr_image_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRegistryArgs']]]]):
        pulumi.set(self, "ecr_image_registries", value)

    @property
    @pulumi.getter(name="ecrImageRepositoryNames")
    def ecr_image_repository_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRepositoryNameArgs']]]]:
        """
        (Optional) The name of the ECR repository. Documented below.
        """
        return pulumi.get(self, "ecr_image_repository_names")

    @ecr_image_repository_names.setter
    def ecr_image_repository_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageRepositoryNameArgs']]]]):
        pulumi.set(self, "ecr_image_repository_names", value)

    @property
    @pulumi.getter(name="ecrImageTags")
    def ecr_image_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageTagArgs']]]]:
        """
        (Optional) The tags associated with the ECR image. Documented below.
        """
        return pulumi.get(self, "ecr_image_tags")

    @ecr_image_tags.setter
    def ecr_image_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEcrImageTagArgs']]]]):
        pulumi.set(self, "ecr_image_tags", value)

    @property
    @pulumi.getter(name="epssScores")
    def epss_scores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEpssScoreArgs']]]]:
        """
        (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
        """
        return pulumi.get(self, "epss_scores")

    @epss_scores.setter
    def epss_scores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaEpssScoreArgs']]]]):
        pulumi.set(self, "epss_scores", value)

    @property
    @pulumi.getter(name="exploitAvailables")
    def exploit_availables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaExploitAvailableArgs']]]]:
        """
        (Optional) Availability of exploits. Documented below.
        """
        return pulumi.get(self, "exploit_availables")

    @exploit_availables.setter
    def exploit_availables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaExploitAvailableArgs']]]]):
        pulumi.set(self, "exploit_availables", value)

    @property
    @pulumi.getter(name="findingArns")
    def finding_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingArnArgs']]]]:
        """
        (Optional) The ARN of the finding. Documented below.
        """
        return pulumi.get(self, "finding_arns")

    @finding_arns.setter
    def finding_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingArnArgs']]]]):
        pulumi.set(self, "finding_arns", value)

    @property
    @pulumi.getter(name="findingStatuses")
    def finding_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingStatusArgs']]]]:
        """
        (Optional) The status of the finding. Documented below.
        """
        return pulumi.get(self, "finding_statuses")

    @finding_statuses.setter
    def finding_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingStatusArgs']]]]):
        pulumi.set(self, "finding_statuses", value)

    @property
    @pulumi.getter(name="findingTypes")
    def finding_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingTypeArgs']]]]:
        """
        (Optional) The type of the finding. Documented below.
        """
        return pulumi.get(self, "finding_types")

    @finding_types.setter
    def finding_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFindingTypeArgs']]]]):
        pulumi.set(self, "finding_types", value)

    @property
    @pulumi.getter(name="firstObservedAts")
    def first_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFirstObservedAtArgs']]]]:
        """
        (Optional) When the finding was first observed. Documented below.
        """
        return pulumi.get(self, "first_observed_ats")

    @first_observed_ats.setter
    def first_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFirstObservedAtArgs']]]]):
        pulumi.set(self, "first_observed_ats", value)

    @property
    @pulumi.getter(name="fixAvailables")
    def fix_availables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFixAvailableArgs']]]]:
        """
        (Optional) Availability of the fix. Documented below.
        """
        return pulumi.get(self, "fix_availables")

    @fix_availables.setter
    def fix_availables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaFixAvailableArgs']]]]):
        pulumi.set(self, "fix_availables", value)

    @property
    @pulumi.getter(name="inspectorScores")
    def inspector_scores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaInspectorScoreArgs']]]]:
        """
        (Optional) The Inspector score given to the finding. Documented below.
        """
        return pulumi.get(self, "inspector_scores")

    @inspector_scores.setter
    def inspector_scores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaInspectorScoreArgs']]]]):
        pulumi.set(self, "inspector_scores", value)

    @property
    @pulumi.getter(name="lambdaFunctionExecutionRoleArns")
    def lambda_function_execution_role_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs']]]]:
        """
        (Optional) Lambda execution role ARN. Documented below.
        """
        return pulumi.get(self, "lambda_function_execution_role_arns")

    @lambda_function_execution_role_arns.setter
    def lambda_function_execution_role_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs']]]]):
        pulumi.set(self, "lambda_function_execution_role_arns", value)

    @property
    @pulumi.getter(name="lambdaFunctionLastModifiedAts")
    def lambda_function_last_modified_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs']]]]:
        """
        (Optional) Last modified timestamp of the lambda function. Documented below.
        """
        return pulumi.get(self, "lambda_function_last_modified_ats")

    @lambda_function_last_modified_ats.setter
    def lambda_function_last_modified_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs']]]]):
        pulumi.set(self, "lambda_function_last_modified_ats", value)

    @property
    @pulumi.getter(name="lambdaFunctionLayers")
    def lambda_function_layers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLayerArgs']]]]:
        """
        (Optional) Lambda function layers. Documented below.
        """
        return pulumi.get(self, "lambda_function_layers")

    @lambda_function_layers.setter
    def lambda_function_layers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionLayerArgs']]]]):
        pulumi.set(self, "lambda_function_layers", value)

    @property
    @pulumi.getter(name="lambdaFunctionNames")
    def lambda_function_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionNameArgs']]]]:
        """
        (Optional) Lambda function name. Documented below.
        """
        return pulumi.get(self, "lambda_function_names")

    @lambda_function_names.setter
    def lambda_function_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionNameArgs']]]]):
        pulumi.set(self, "lambda_function_names", value)

    @property
    @pulumi.getter(name="lambdaFunctionRuntimes")
    def lambda_function_runtimes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionRuntimeArgs']]]]:
        """
        (Optional) Lambda function runtime. Documented below.
        """
        return pulumi.get(self, "lambda_function_runtimes")

    @lambda_function_runtimes.setter
    def lambda_function_runtimes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLambdaFunctionRuntimeArgs']]]]):
        pulumi.set(self, "lambda_function_runtimes", value)

    @property
    @pulumi.getter(name="lastObservedAts")
    def last_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLastObservedAtArgs']]]]:
        """
        (Optional) When the finding was last observed. Documented below.
        """
        return pulumi.get(self, "last_observed_ats")

    @last_observed_ats.setter
    def last_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaLastObservedAtArgs']]]]):
        pulumi.set(self, "last_observed_ats", value)

    @property
    @pulumi.getter(name="networkProtocols")
    def network_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaNetworkProtocolArgs']]]]:
        """
        (Optional) The network protocol of the finding. Documented below.
        """
        return pulumi.get(self, "network_protocols")

    @network_protocols.setter
    def network_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaNetworkProtocolArgs']]]]):
        pulumi.set(self, "network_protocols", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaPortRangeArgs']]]]:
        """
        (Optional) The port range of the finding. Documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter(name="relatedVulnerabilities")
    def related_vulnerabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaRelatedVulnerabilityArgs']]]]:
        """
        (Optional) Related vulnerabilities. Documented below.
        """
        return pulumi.get(self, "related_vulnerabilities")

    @related_vulnerabilities.setter
    def related_vulnerabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaRelatedVulnerabilityArgs']]]]):
        pulumi.set(self, "related_vulnerabilities", value)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceIdArgs']]]]:
        """
        (Optional) The ID of the resource. Documented below.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceIdArgs']]]]):
        pulumi.set(self, "resource_ids", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTagArgs']]]]:
        """
        (Optional) The tags of the resource. Documented below.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTypeArgs']]]]:
        """
        (Optional) The type of the resource. Documented below.
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaResourceTypeArgs']]]]):
        pulumi.set(self, "resource_types", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaSeverityArgs']]]]:
        """
        (Optional) The severity of the finding. Documented below.
        """
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaSeverityArgs']]]]):
        pulumi.set(self, "severities", value)

    @property
    @pulumi.getter
    def titles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaTitleArgs']]]]:
        """
        (Optional) The title of the finding. Documented below.
        """
        return pulumi.get(self, "titles")

    @titles.setter
    def titles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaTitleArgs']]]]):
        pulumi.set(self, "titles", value)

    @property
    @pulumi.getter(name="updatedAts")
    def updated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaUpdatedAtArgs']]]]:
        """
        (Optional) When the finding was last updated. Documented below.
        """
        return pulumi.get(self, "updated_ats")

    @updated_ats.setter
    def updated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaUpdatedAtArgs']]]]):
        pulumi.set(self, "updated_ats", value)

    @property
    @pulumi.getter(name="vendorSeverities")
    def vendor_severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVendorSeverityArgs']]]]:
        """
        (Optional) The severity as reported by the vendor. Documented below.
        """
        return pulumi.get(self, "vendor_severities")

    @vendor_severities.setter
    def vendor_severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVendorSeverityArgs']]]]):
        pulumi.set(self, "vendor_severities", value)

    @property
    @pulumi.getter(name="vulnerabilityIds")
    def vulnerability_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilityIdArgs']]]]:
        """
        (Optional) The ID of the vulnerability. Documented below.
        """
        return pulumi.get(self, "vulnerability_ids")

    @vulnerability_ids.setter
    def vulnerability_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilityIdArgs']]]]):
        pulumi.set(self, "vulnerability_ids", value)

    @property
    @pulumi.getter(name="vulnerabilitySources")
    def vulnerability_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilitySourceArgs']]]]:
        """
        (Optional) The source of the vulnerability. Documented below.
        """
        return pulumi.get(self, "vulnerability_sources")

    @vulnerability_sources.setter
    def vulnerability_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerabilitySourceArgs']]]]):
        pulumi.set(self, "vulnerability_sources", value)

    @property
    @pulumi.getter(name="vulnerablePackages")
    def vulnerable_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageArgs']]]]:
        """
        (Optional) Details about vulnerable packages. Documented below.
        """
        return pulumi.get(self, "vulnerable_packages")

    @vulnerable_packages.setter
    def vulnerable_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageArgs']]]]):
        pulumi.set(self, "vulnerable_packages", value)


if not MYPY:
    class FilterFilterCriteriaAwsAccountIdArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaAwsAccountIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaAwsAccountIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaCodeVulnerabilityDetectorNameArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaCodeVulnerabilityDetectorNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaCodeVulnerabilityDetectorTagArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaCodeVulnerabilityDetectorTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaCodeVulnerabilityFilePathArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaCodeVulnerabilityFilePathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaCodeVulnerabilityFilePathArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaComponentIdArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaComponentIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaComponentIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaComponentTypeArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaComponentTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaComponentTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEc2InstanceImageIdArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaEc2InstanceImageIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEc2InstanceImageIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEc2InstanceSubnetIdArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaEc2InstanceSubnetIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEc2InstanceSubnetIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEc2InstanceVpcIdArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaEc2InstanceVpcIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEc2InstanceVpcIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEcrImageArchitectureArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaEcrImageArchitectureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEcrImageArchitectureArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEcrImageHashArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaEcrImageHashArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEcrImageHashArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEcrImagePushedAtArgsDict(TypedDict):
        end_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Required) The end of the port range, inclusive.
        """
        start_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
elif False:
    FilterFilterCriteriaEcrImagePushedAtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEcrImagePushedAtArgs:
    def __init__(__self__, *,
                 end_inclusive: Optional[pulumi.Input[builtins.str]] = None,
                 start_inclusive: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] end_inclusive: (Required) The end of the port range, inclusive.
        :param pulumi.Input[builtins.str] start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @end_inclusive.setter
    def end_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_inclusive", value)

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")

    @start_inclusive.setter
    def start_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaEcrImageRegistryArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaEcrImageRegistryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEcrImageRegistryArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEcrImageRepositoryNameArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaEcrImageRepositoryNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEcrImageRepositoryNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEcrImageTagArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaEcrImageTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEcrImageTagArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaEpssScoreArgsDict(TypedDict):
        lower_inclusive: pulumi.Input[builtins.float]
        """
        (Optional) Lower bound of the range, inclusive.
        """
        upper_inclusive: pulumi.Input[builtins.float]
        """
        (Optional) Upper bound of the range, inclusive.
        """
elif False:
    FilterFilterCriteriaEpssScoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaEpssScoreArgs:
    def __init__(__self__, *,
                 lower_inclusive: pulumi.Input[builtins.float],
                 upper_inclusive: pulumi.Input[builtins.float]):
        """
        :param pulumi.Input[builtins.float] lower_inclusive: (Optional) Lower bound of the range, inclusive.
        :param pulumi.Input[builtins.float] upper_inclusive: (Optional) Upper bound of the range, inclusive.
        """
        pulumi.set(__self__, "lower_inclusive", lower_inclusive)
        pulumi.set(__self__, "upper_inclusive", upper_inclusive)

    @property
    @pulumi.getter(name="lowerInclusive")
    def lower_inclusive(self) -> pulumi.Input[builtins.float]:
        """
        (Optional) Lower bound of the range, inclusive.
        """
        return pulumi.get(self, "lower_inclusive")

    @lower_inclusive.setter
    def lower_inclusive(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "lower_inclusive", value)

    @property
    @pulumi.getter(name="upperInclusive")
    def upper_inclusive(self) -> pulumi.Input[builtins.float]:
        """
        (Optional) Upper bound of the range, inclusive.
        """
        return pulumi.get(self, "upper_inclusive")

    @upper_inclusive.setter
    def upper_inclusive(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "upper_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaExploitAvailableArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaExploitAvailableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaExploitAvailableArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaFindingArnArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaFindingArnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaFindingArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaFindingStatusArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaFindingStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaFindingStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaFindingTypeArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaFindingTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaFindingTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaFirstObservedAtArgsDict(TypedDict):
        end_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Required) The end of the port range, inclusive.
        """
        start_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
elif False:
    FilterFilterCriteriaFirstObservedAtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaFirstObservedAtArgs:
    def __init__(__self__, *,
                 end_inclusive: Optional[pulumi.Input[builtins.str]] = None,
                 start_inclusive: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] end_inclusive: (Required) The end of the port range, inclusive.
        :param pulumi.Input[builtins.str] start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @end_inclusive.setter
    def end_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_inclusive", value)

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")

    @start_inclusive.setter
    def start_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaFixAvailableArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaFixAvailableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaFixAvailableArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaInspectorScoreArgsDict(TypedDict):
        lower_inclusive: pulumi.Input[builtins.float]
        """
        (Optional) Lower bound of the range, inclusive.
        """
        upper_inclusive: pulumi.Input[builtins.float]
        """
        (Optional) Upper bound of the range, inclusive.
        """
elif False:
    FilterFilterCriteriaInspectorScoreArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaInspectorScoreArgs:
    def __init__(__self__, *,
                 lower_inclusive: pulumi.Input[builtins.float],
                 upper_inclusive: pulumi.Input[builtins.float]):
        """
        :param pulumi.Input[builtins.float] lower_inclusive: (Optional) Lower bound of the range, inclusive.
        :param pulumi.Input[builtins.float] upper_inclusive: (Optional) Upper bound of the range, inclusive.
        """
        pulumi.set(__self__, "lower_inclusive", lower_inclusive)
        pulumi.set(__self__, "upper_inclusive", upper_inclusive)

    @property
    @pulumi.getter(name="lowerInclusive")
    def lower_inclusive(self) -> pulumi.Input[builtins.float]:
        """
        (Optional) Lower bound of the range, inclusive.
        """
        return pulumi.get(self, "lower_inclusive")

    @lower_inclusive.setter
    def lower_inclusive(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "lower_inclusive", value)

    @property
    @pulumi.getter(name="upperInclusive")
    def upper_inclusive(self) -> pulumi.Input[builtins.float]:
        """
        (Optional) Upper bound of the range, inclusive.
        """
        return pulumi.get(self, "upper_inclusive")

    @upper_inclusive.setter
    def upper_inclusive(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "upper_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaLambdaFunctionLastModifiedAtArgsDict(TypedDict):
        end_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Required) The end of the port range, inclusive.
        """
        start_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
elif False:
    FilterFilterCriteriaLambdaFunctionLastModifiedAtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs:
    def __init__(__self__, *,
                 end_inclusive: Optional[pulumi.Input[builtins.str]] = None,
                 start_inclusive: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] end_inclusive: (Required) The end of the port range, inclusive.
        :param pulumi.Input[builtins.str] start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @end_inclusive.setter
    def end_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_inclusive", value)

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")

    @start_inclusive.setter
    def start_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaLambdaFunctionLayerArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaLambdaFunctionLayerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaLambdaFunctionLayerArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaLambdaFunctionNameArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaLambdaFunctionNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaLambdaFunctionNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaLambdaFunctionRuntimeArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaLambdaFunctionRuntimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaLambdaFunctionRuntimeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaLastObservedAtArgsDict(TypedDict):
        end_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Required) The end of the port range, inclusive.
        """
        start_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
elif False:
    FilterFilterCriteriaLastObservedAtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaLastObservedAtArgs:
    def __init__(__self__, *,
                 end_inclusive: Optional[pulumi.Input[builtins.str]] = None,
                 start_inclusive: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] end_inclusive: (Required) The end of the port range, inclusive.
        :param pulumi.Input[builtins.str] start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @end_inclusive.setter
    def end_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_inclusive", value)

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")

    @start_inclusive.setter
    def start_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaNetworkProtocolArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaNetworkProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaNetworkProtocolArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaPortRangeArgsDict(TypedDict):
        begin_inclusive: pulumi.Input[builtins.int]
        """
        (Required) The beginning of the port range, inclusive.
        """
        end_inclusive: pulumi.Input[builtins.int]
        """
        (Required) The end of the port range, inclusive.
        """
elif False:
    FilterFilterCriteriaPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaPortRangeArgs:
    def __init__(__self__, *,
                 begin_inclusive: pulumi.Input[builtins.int],
                 end_inclusive: pulumi.Input[builtins.int]):
        """
        :param pulumi.Input[builtins.int] begin_inclusive: (Required) The beginning of the port range, inclusive.
        :param pulumi.Input[builtins.int] end_inclusive: (Required) The end of the port range, inclusive.
        """
        pulumi.set(__self__, "begin_inclusive", begin_inclusive)
        pulumi.set(__self__, "end_inclusive", end_inclusive)

    @property
    @pulumi.getter(name="beginInclusive")
    def begin_inclusive(self) -> pulumi.Input[builtins.int]:
        """
        (Required) The beginning of the port range, inclusive.
        """
        return pulumi.get(self, "begin_inclusive")

    @begin_inclusive.setter
    def begin_inclusive(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "begin_inclusive", value)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> pulumi.Input[builtins.int]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @end_inclusive.setter
    def end_inclusive(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "end_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaRelatedVulnerabilityArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaRelatedVulnerabilityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaRelatedVulnerabilityArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaResourceIdArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaResourceIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaResourceIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaResourceTagArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        key: pulumi.Input[builtins.str]
        """
        (Required) The key to filter on.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaResourceTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaResourceTagArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 key: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] key: (Required) The key to filter on.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The key to filter on.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaResourceTypeArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaResourceTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaResourceTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaSeverityArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaSeverityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaSeverityArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaTitleArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaTitleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaTitleArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaUpdatedAtArgsDict(TypedDict):
        end_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Required) The end of the port range, inclusive.
        """
        start_inclusive: NotRequired[pulumi.Input[builtins.str]]
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
elif False:
    FilterFilterCriteriaUpdatedAtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaUpdatedAtArgs:
    def __init__(__self__, *,
                 end_inclusive: Optional[pulumi.Input[builtins.str]] = None,
                 start_inclusive: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] end_inclusive: (Required) The end of the port range, inclusive.
        :param pulumi.Input[builtins.str] start_inclusive: (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Required) The end of the port range, inclusive.
        """
        return pulumi.get(self, "end_inclusive")

    @end_inclusive.setter
    def end_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_inclusive", value)

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Optional) Start of the date range in RFC 3339 format, inclusive. Set the timezone to UTC.
        """
        return pulumi.get(self, "start_inclusive")

    @start_inclusive.setter
    def start_inclusive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaVendorSeverityArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVendorSeverityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVendorSeverityArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerabilityIdArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerabilityIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerabilityIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerabilitySourceArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerabilitySourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerabilitySourceArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageArgsDict(TypedDict):
        architecture: NotRequired[pulumi.Input['FilterFilterCriteriaVulnerablePackageArchitectureArgsDict']]
        """
        (Optional) The architecture of the package. Documented below.
        """
        epoches: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageEpochArgsDict']]]]
        """
        (Optional) The epoch of the package. Documented below.
        """
        file_path: NotRequired[pulumi.Input['FilterFilterCriteriaVulnerablePackageFilePathArgsDict']]
        """
        (Optional) The name of the package. Documented below.
        """
        name: NotRequired[pulumi.Input['FilterFilterCriteriaVulnerablePackageNameArgsDict']]
        """
        Name of the filter.
        """
        release: NotRequired[pulumi.Input['FilterFilterCriteriaVulnerablePackageReleaseArgsDict']]
        """
        (Optional) The release of the package. Documented below.
        """
        source_lambda_layer_arn: NotRequired[pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgsDict']]
        """
        (Optional) The ARN of the package's source lambda layer. Documented below.
        """
        source_layer_hash: NotRequired[pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLayerHashArgsDict']]
        """
        (Optional) The source layer hash of the package. Documented below.
        """
        version: NotRequired[pulumi.Input['FilterFilterCriteriaVulnerablePackageVersionArgsDict']]
        """
        (Optional) The version of the package. Documented below.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageArgs:
    def __init__(__self__, *,
                 architecture: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageArchitectureArgs']] = None,
                 epoches: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageEpochArgs']]]] = None,
                 file_path: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageFilePathArgs']] = None,
                 name: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageNameArgs']] = None,
                 release: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageReleaseArgs']] = None,
                 source_lambda_layer_arn: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgs']] = None,
                 source_layer_hash: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLayerHashArgs']] = None,
                 version: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageVersionArgs']] = None):
        """
        :param pulumi.Input['FilterFilterCriteriaVulnerablePackageArchitectureArgs'] architecture: (Optional) The architecture of the package. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageEpochArgs']]] epoches: (Optional) The epoch of the package. Documented below.
        :param pulumi.Input['FilterFilterCriteriaVulnerablePackageFilePathArgs'] file_path: (Optional) The name of the package. Documented below.
        :param pulumi.Input['FilterFilterCriteriaVulnerablePackageNameArgs'] name: Name of the filter.
        :param pulumi.Input['FilterFilterCriteriaVulnerablePackageReleaseArgs'] release: (Optional) The release of the package. Documented below.
        :param pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgs'] source_lambda_layer_arn: (Optional) The ARN of the package's source lambda layer. Documented below.
        :param pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLayerHashArgs'] source_layer_hash: (Optional) The source layer hash of the package. Documented below.
        :param pulumi.Input['FilterFilterCriteriaVulnerablePackageVersionArgs'] version: (Optional) The version of the package. Documented below.
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if epoches is not None:
            pulumi.set(__self__, "epoches", epoches)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if source_lambda_layer_arn is not None:
            pulumi.set(__self__, "source_lambda_layer_arn", source_lambda_layer_arn)
        if source_layer_hash is not None:
            pulumi.set(__self__, "source_layer_hash", source_layer_hash)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageArchitectureArgs']]:
        """
        (Optional) The architecture of the package. Documented below.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageArchitectureArgs']]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter
    def epoches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageEpochArgs']]]]:
        """
        (Optional) The epoch of the package. Documented below.
        """
        return pulumi.get(self, "epoches")

    @epoches.setter
    def epoches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterFilterCriteriaVulnerablePackageEpochArgs']]]]):
        pulumi.set(self, "epoches", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageFilePathArgs']]:
        """
        (Optional) The name of the package. Documented below.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageFilePathArgs']]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageNameArgs']]:
        """
        Name of the filter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageNameArgs']]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageReleaseArgs']]:
        """
        (Optional) The release of the package. Documented below.
        """
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageReleaseArgs']]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter(name="sourceLambdaLayerArn")
    def source_lambda_layer_arn(self) -> Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgs']]:
        """
        (Optional) The ARN of the package's source lambda layer. Documented below.
        """
        return pulumi.get(self, "source_lambda_layer_arn")

    @source_lambda_layer_arn.setter
    def source_lambda_layer_arn(self, value: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgs']]):
        pulumi.set(self, "source_lambda_layer_arn", value)

    @property
    @pulumi.getter(name="sourceLayerHash")
    def source_layer_hash(self) -> Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLayerHashArgs']]:
        """
        (Optional) The source layer hash of the package. Documented below.
        """
        return pulumi.get(self, "source_layer_hash")

    @source_layer_hash.setter
    def source_layer_hash(self, value: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageSourceLayerHashArgs']]):
        pulumi.set(self, "source_layer_hash", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageVersionArgs']]:
        """
        (Optional) The version of the package. Documented below.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input['FilterFilterCriteriaVulnerablePackageVersionArgs']]):
        pulumi.set(self, "version", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageArchitectureArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageArchitectureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageArchitectureArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageEpochArgsDict(TypedDict):
        lower_inclusive: pulumi.Input[builtins.float]
        """
        (Optional) Lower bound of the range, inclusive.
        """
        upper_inclusive: pulumi.Input[builtins.float]
        """
        (Optional) Upper bound of the range, inclusive.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageEpochArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageEpochArgs:
    def __init__(__self__, *,
                 lower_inclusive: pulumi.Input[builtins.float],
                 upper_inclusive: pulumi.Input[builtins.float]):
        """
        :param pulumi.Input[builtins.float] lower_inclusive: (Optional) Lower bound of the range, inclusive.
        :param pulumi.Input[builtins.float] upper_inclusive: (Optional) Upper bound of the range, inclusive.
        """
        pulumi.set(__self__, "lower_inclusive", lower_inclusive)
        pulumi.set(__self__, "upper_inclusive", upper_inclusive)

    @property
    @pulumi.getter(name="lowerInclusive")
    def lower_inclusive(self) -> pulumi.Input[builtins.float]:
        """
        (Optional) Lower bound of the range, inclusive.
        """
        return pulumi.get(self, "lower_inclusive")

    @lower_inclusive.setter
    def lower_inclusive(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "lower_inclusive", value)

    @property
    @pulumi.getter(name="upperInclusive")
    def upper_inclusive(self) -> pulumi.Input[builtins.float]:
        """
        (Optional) Upper bound of the range, inclusive.
        """
        return pulumi.get(self, "upper_inclusive")

    @upper_inclusive.setter
    def upper_inclusive(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "upper_inclusive", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageFilePathArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageFilePathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageFilePathArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageNameArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageReleaseArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageReleaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageReleaseArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageSourceLambdaLayerArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageSourceLayerHashArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageSourceLayerHashArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageSourceLayerHashArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FilterFilterCriteriaVulnerablePackageVersionArgsDict(TypedDict):
        comparison: pulumi.Input[builtins.str]
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        value: pulumi.Input[builtins.str]
        """
        (Required) The value to filter on.
        """
elif False:
    FilterFilterCriteriaVulnerablePackageVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterFilterCriteriaVulnerablePackageVersionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] comparison: (Required) The comparison operator. Valid values: `EQUALS`.
        :param pulumi.Input[builtins.str] value: (Required) The value to filter on.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The comparison operator. Valid values: `EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        (Required) The value to filter on.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class OrganizationConfigurationAutoEnableArgsDict(TypedDict):
        ec2: pulumi.Input[builtins.bool]
        """
        Whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        ecr: pulumi.Input[builtins.bool]
        """
        Whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        lambda_: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether Lambda Function scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        lambda_code: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether AWS Lambda code scans are automatically enabled for new members of your Amazon Inspector organization. **Note:** Lambda code scanning requires Lambda standard scanning to be activated. Consequently, if you are setting this argument to `true`, you must also set the `lambda` argument to `true`. See [Scanning AWS Lambda functions with Amazon Inspector](https://docs.aws.amazon.com/inspector/latest/user/scanning-lambda.html#lambda-code-scans) for more information.
        """
elif False:
    OrganizationConfigurationAutoEnableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationConfigurationAutoEnableArgs:
    def __init__(__self__, *,
                 ec2: pulumi.Input[builtins.bool],
                 ecr: pulumi.Input[builtins.bool],
                 lambda_: Optional[pulumi.Input[builtins.bool]] = None,
                 lambda_code: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.bool] ec2: Whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.
        :param pulumi.Input[builtins.bool] ecr: Whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.
        :param pulumi.Input[builtins.bool] lambda_: Whether Lambda Function scans are automatically enabled for new members of your Amazon Inspector organization.
        :param pulumi.Input[builtins.bool] lambda_code: Whether AWS Lambda code scans are automatically enabled for new members of your Amazon Inspector organization. **Note:** Lambda code scanning requires Lambda standard scanning to be activated. Consequently, if you are setting this argument to `true`, you must also set the `lambda` argument to `true`. See [Scanning AWS Lambda functions with Amazon Inspector](https://docs.aws.amazon.com/inspector/latest/user/scanning-lambda.html#lambda-code-scans) for more information.
        """
        pulumi.set(__self__, "ec2", ec2)
        pulumi.set(__self__, "ecr", ecr)
        if lambda_ is not None:
            pulumi.set(__self__, "lambda_", lambda_)
        if lambda_code is not None:
            pulumi.set(__self__, "lambda_code", lambda_code)

    @property
    @pulumi.getter
    def ec2(self) -> pulumi.Input[builtins.bool]:
        """
        Whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        return pulumi.get(self, "ec2")

    @ec2.setter
    def ec2(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "ec2", value)

    @property
    @pulumi.getter
    def ecr(self) -> pulumi.Input[builtins.bool]:
        """
        Whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        return pulumi.get(self, "ecr")

    @ecr.setter
    def ecr(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "ecr", value)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether Lambda Function scans are automatically enabled for new members of your Amazon Inspector organization.
        """
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lambda_", value)

    @property
    @pulumi.getter(name="lambdaCode")
    def lambda_code(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether AWS Lambda code scans are automatically enabled for new members of your Amazon Inspector organization. **Note:** Lambda code scanning requires Lambda standard scanning to be activated. Consequently, if you are setting this argument to `true`, you must also set the `lambda` argument to `true`. See [Scanning AWS Lambda functions with Amazon Inspector](https://docs.aws.amazon.com/inspector/latest/user/scanning-lambda.html#lambda-code-scans) for more information.
        """
        return pulumi.get(self, "lambda_code")

    @lambda_code.setter
    def lambda_code(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lambda_code", value)


