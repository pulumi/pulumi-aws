# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRouteTableRoutesResult',
    'AwaitableGetRouteTableRoutesResult',
    'get_route_table_routes',
    'get_route_table_routes_output',
]

@pulumi.output_type
class GetRouteTableRoutesResult:
    """
    A collection of values returned by getRouteTableRoutes.
    """
    def __init__(__self__, filters=None, id=None, routes=None, transit_gateway_route_table_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)
        if transit_gateway_route_table_id and not isinstance(transit_gateway_route_table_id, str):
            raise TypeError("Expected argument 'transit_gateway_route_table_id' to be a str")
        pulumi.set(__self__, "transit_gateway_route_table_id", transit_gateway_route_table_id)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetRouteTableRoutesFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetRouteTableRoutesRouteResult']:
        """
        List of Transit Gateway Routes.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="transitGatewayRouteTableId")
    def transit_gateway_route_table_id(self) -> str:
        return pulumi.get(self, "transit_gateway_route_table_id")


class AwaitableGetRouteTableRoutesResult(GetRouteTableRoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteTableRoutesResult(
            filters=self.filters,
            id=self.id,
            routes=self.routes,
            transit_gateway_route_table_id=self.transit_gateway_route_table_id)


def get_route_table_routes(filters: Optional[Sequence[pulumi.InputType['GetRouteTableRoutesFilterArgs']]] = None,
                           transit_gateway_route_table_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteTableRoutesResult:
    """
    Provides informations for routes of a specific transit gateway, such as state, type, cidr

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    test = aws.ec2transitgateway.get_route_table_routes(filters=[aws.ec2transitgateway.GetRouteTableRoutesFilterArgs(
            name="type",
            values=["propagated"],
        )],
        transit_gateway_route_table_id=aws_ec2_transit_gateway_route_table["example"]["id"])
    ```


    :param Sequence[pulumi.InputType['GetRouteTableRoutesFilterArgs']] filters: Custom filter block as described below.
    :param str transit_gateway_route_table_id: Identifier of EC2 Transit Gateway Route Table.
           
           More complex filters can be expressed using one or more `filter` sub-blocks,
           which take the following arguments:
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['transitGatewayRouteTableId'] = transit_gateway_route_table_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:ec2transitgateway/getRouteTableRoutes:getRouteTableRoutes', __args__, opts=opts, typ=GetRouteTableRoutesResult).value

    return AwaitableGetRouteTableRoutesResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        routes=pulumi.get(__ret__, 'routes'),
        transit_gateway_route_table_id=pulumi.get(__ret__, 'transit_gateway_route_table_id'))


@_utilities.lift_output_func(get_route_table_routes)
def get_route_table_routes_output(filters: Optional[pulumi.Input[Sequence[pulumi.InputType['GetRouteTableRoutesFilterArgs']]]] = None,
                                  transit_gateway_route_table_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRouteTableRoutesResult]:
    """
    Provides informations for routes of a specific transit gateway, such as state, type, cidr

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    test = aws.ec2transitgateway.get_route_table_routes(filters=[aws.ec2transitgateway.GetRouteTableRoutesFilterArgs(
            name="type",
            values=["propagated"],
        )],
        transit_gateway_route_table_id=aws_ec2_transit_gateway_route_table["example"]["id"])
    ```


    :param Sequence[pulumi.InputType['GetRouteTableRoutesFilterArgs']] filters: Custom filter block as described below.
    :param str transit_gateway_route_table_id: Identifier of EC2 Transit Gateway Route Table.
           
           More complex filters can be expressed using one or more `filter` sub-blocks,
           which take the following arguments:
    """
    ...
