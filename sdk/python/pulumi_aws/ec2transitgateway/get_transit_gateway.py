# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GetTransitGatewayResult(object):
    """
    A collection of values returned by getTransitGateway.
    """
    def __init__(__self__, amazon_side_asn=None, arn=None, association_default_route_table_id=None, auto_accept_shared_attachments=None, default_route_table_association=None, default_route_table_propagation=None, description=None, dns_support=None, owner_id=None, propagation_default_route_table_id=None, tags=None, vpn_ecmp_support=None):
        if amazon_side_asn and not isinstance(amazon_side_asn, int):
            raise TypeError('Expected argument amazon_side_asn to be a int')
        __self__.amazon_side_asn = amazon_side_asn
        """
        Private Autonomous System Number (ASN) for the Amazon side of a BGP session
        """
        if arn and not isinstance(arn, str):
            raise TypeError('Expected argument arn to be a str')
        __self__.arn = arn
        """
        EC2 Transit Gateway Amazon Resource Name (ARN)
        """
        if association_default_route_table_id and not isinstance(association_default_route_table_id, str):
            raise TypeError('Expected argument association_default_route_table_id to be a str')
        __self__.association_default_route_table_id = association_default_route_table_id
        """
        Identifier of the default association route table
        """
        if auto_accept_shared_attachments and not isinstance(auto_accept_shared_attachments, str):
            raise TypeError('Expected argument auto_accept_shared_attachments to be a str')
        __self__.auto_accept_shared_attachments = auto_accept_shared_attachments
        """
        Whether resource attachment requests are automatically accepted.
        """
        if default_route_table_association and not isinstance(default_route_table_association, str):
            raise TypeError('Expected argument default_route_table_association to be a str')
        __self__.default_route_table_association = default_route_table_association
        """
        Whether resource attachments are automatically associated with the default association route table.
        """
        if default_route_table_propagation and not isinstance(default_route_table_propagation, str):
            raise TypeError('Expected argument default_route_table_propagation to be a str')
        __self__.default_route_table_propagation = default_route_table_propagation
        """
        Whether resource attachments automatically propagate routes to the default propagation route table.
        """
        if description and not isinstance(description, str):
            raise TypeError('Expected argument description to be a str')
        __self__.description = description
        """
        Description of the EC2 Transit Gateway
        """
        if dns_support and not isinstance(dns_support, str):
            raise TypeError('Expected argument dns_support to be a str')
        __self__.dns_support = dns_support
        """
        Whether DNS support is enabled.
        """
        if owner_id and not isinstance(owner_id, str):
            raise TypeError('Expected argument owner_id to be a str')
        __self__.owner_id = owner_id
        """
        Identifier of the AWS account that owns the EC2 Transit Gateway
        """
        if propagation_default_route_table_id and not isinstance(propagation_default_route_table_id, str):
            raise TypeError('Expected argument propagation_default_route_table_id to be a str')
        __self__.propagation_default_route_table_id = propagation_default_route_table_id
        """
        Identifier of the default propagation route table.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        """
        Key-value tags for the EC2 Transit Gateway
        """
        if vpn_ecmp_support and not isinstance(vpn_ecmp_support, str):
            raise TypeError('Expected argument vpn_ecmp_support to be a str')
        __self__.vpn_ecmp_support = vpn_ecmp_support
        """
        Whether VPN Equal Cost Multipath Protocol support is enabled.
        """

async def get_transit_gateway(filters=None, id=None, tags=None):
    """
    Get information on an EC2 Transit Gateway.
    """
    __args__ = dict()

    __args__['filters'] = filters
    __args__['id'] = id
    __args__['tags'] = tags
    __ret__ = await pulumi.runtime.invoke('aws:ec2transitgateway/getTransitGateway:getTransitGateway', __args__)

    return GetTransitGatewayResult(
        amazon_side_asn=__ret__.get('amazonSideAsn'),
        arn=__ret__.get('arn'),
        association_default_route_table_id=__ret__.get('associationDefaultRouteTableId'),
        auto_accept_shared_attachments=__ret__.get('autoAcceptSharedAttachments'),
        default_route_table_association=__ret__.get('defaultRouteTableAssociation'),
        default_route_table_propagation=__ret__.get('defaultRouteTablePropagation'),
        description=__ret__.get('description'),
        dns_support=__ret__.get('dnsSupport'),
        owner_id=__ret__.get('ownerId'),
        propagation_default_route_table_id=__ret__.get('propagationDefaultRouteTableId'),
        tags=__ret__.get('tags'),
        vpn_ecmp_support=__ret__.get('vpnEcmpSupport'))
