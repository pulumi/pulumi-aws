# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPoliciesForTargetResult',
    'AwaitableGetPoliciesForTargetResult',
    'get_policies_for_target',
    'get_policies_for_target_output',
]

@pulumi.output_type
class GetPoliciesForTargetResult:
    """
    A collection of values returned by getPoliciesForTarget.
    """
    def __init__(__self__, filter=None, id=None, ids=None, target_id=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        List of all the policy ids found.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> str:
        return pulumi.get(self, "target_id")


class AwaitableGetPoliciesForTargetResult(GetPoliciesForTargetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPoliciesForTargetResult(
            filter=self.filter,
            id=self.id,
            ids=self.ids,
            target_id=self.target_id)


def get_policies_for_target(filter: Optional[str] = None,
                            target_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPoliciesForTargetResult:
    """
    Data source for managing an AWS Organizations Policies For Target.

    ## Example Usage


    :param str filter: Must supply one of the 4 different policy filters for a target (SERVICE_CONTROL_POLICY | TAG_POLICY | BACKUP_POLICY | AISERVICES_OPT_OUT_POLICY)
    :param str target_id: The root (string that begins with "r-" followed by 4-32 lowercase letters or digits), account (12 digit string), or Organizational Unit (string starting with "ou-" followed by 4-32 lowercase letters or digits. This string is followed by a second "-" dash and from 8-32 additional lowercase letters or digits.)
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['targetId'] = target_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:organizations/getPoliciesForTarget:getPoliciesForTarget', __args__, opts=opts, typ=GetPoliciesForTargetResult).value

    return AwaitableGetPoliciesForTargetResult(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        target_id=pulumi.get(__ret__, 'target_id'))


@_utilities.lift_output_func(get_policies_for_target)
def get_policies_for_target_output(filter: Optional[pulumi.Input[str]] = None,
                                   target_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPoliciesForTargetResult]:
    """
    Data source for managing an AWS Organizations Policies For Target.

    ## Example Usage


    :param str filter: Must supply one of the 4 different policy filters for a target (SERVICE_CONTROL_POLICY | TAG_POLICY | BACKUP_POLICY | AISERVICES_OPT_OUT_POLICY)
    :param str target_id: The root (string that begins with "r-" followed by 4-32 lowercase letters or digits), account (12 digit string), or Organizational Unit (string starting with "ou-" followed by 4-32 lowercase letters or digits. This string is followed by a second "-" dash and from 8-32 additional lowercase letters or digits.)
    """
    ...
