# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'OrganizationAccountArgs',
    'OrganizationAccountArgsDict',
    'OrganizationNonMasterAccountArgs',
    'OrganizationNonMasterAccountArgsDict',
    'OrganizationRootArgs',
    'OrganizationRootArgsDict',
    'OrganizationRootPolicyTypeArgs',
    'OrganizationRootPolicyTypeArgsDict',
    'OrganizationalUnitAccountArgs',
    'OrganizationalUnitAccountArgsDict',
]

MYPY = False

if not MYPY:
    class OrganizationAccountArgsDict(TypedDict):
        arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        ARN of the root.
        """
        email: NotRequired[pulumi.Input[_builtins.str]]
        """
        Email of the account.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Identifier of the root.
        """
        joined_method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Method by which the account joined the organization.
        """
        joined_timestamp: NotRequired[pulumi.Input[_builtins.str]]
        """
        Date the account became a part of the organization.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the policy type.
        """
        state: NotRequired[pulumi.Input[_builtins.str]]
        """
        State of the account.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Status of the policy type as it relates to the associated root.
        """
elif False:
    OrganizationAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationAccountArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 joined_method: Optional[pulumi.Input[_builtins.str]] = None,
                 joined_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] arn: ARN of the root.
        :param pulumi.Input[_builtins.str] email: Email of the account.
        :param pulumi.Input[_builtins.str] id: Identifier of the root.
        :param pulumi.Input[_builtins.str] joined_method: Method by which the account joined the organization.
        :param pulumi.Input[_builtins.str] joined_timestamp: Date the account became a part of the organization.
        :param pulumi.Input[_builtins.str] name: Name of the policy type.
        :param pulumi.Input[_builtins.str] state: State of the account.
        :param pulumi.Input[_builtins.str] status: Status of the policy type as it relates to the associated root.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if joined_method is not None:
            pulumi.set(__self__, "joined_method", joined_method)
        if joined_timestamp is not None:
            pulumi.set(__self__, "joined_timestamp", joined_timestamp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            warnings.warn("""status is deprecated. Use state instead.""", DeprecationWarning)
            pulumi.log.warn("""status is deprecated: status is deprecated. Use state instead.""")
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ARN of the root.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arn", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email of the account.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the root.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="joinedMethod")
    def joined_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Method by which the account joined the organization.
        """
        return pulumi.get(self, "joined_method")

    @joined_method.setter
    def joined_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "joined_method", value)

    @_builtins.property
    @pulumi.getter(name="joinedTimestamp")
    def joined_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date the account became a part of the organization.
        """
        return pulumi.get(self, "joined_timestamp")

    @joined_timestamp.setter
    def joined_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "joined_timestamp", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the policy type.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        State of the account.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""status is deprecated. Use state instead.""")
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the policy type as it relates to the associated root.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class OrganizationNonMasterAccountArgsDict(TypedDict):
        arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        ARN of the root.
        """
        email: NotRequired[pulumi.Input[_builtins.str]]
        """
        Email of the account.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Identifier of the root.
        """
        joined_method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Method by which the account joined the organization.
        """
        joined_timestamp: NotRequired[pulumi.Input[_builtins.str]]
        """
        Date the account became a part of the organization.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the policy type.
        """
        state: NotRequired[pulumi.Input[_builtins.str]]
        """
        State of the account.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Status of the policy type as it relates to the associated root.
        """
elif False:
    OrganizationNonMasterAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationNonMasterAccountArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 joined_method: Optional[pulumi.Input[_builtins.str]] = None,
                 joined_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] arn: ARN of the root.
        :param pulumi.Input[_builtins.str] email: Email of the account.
        :param pulumi.Input[_builtins.str] id: Identifier of the root.
        :param pulumi.Input[_builtins.str] joined_method: Method by which the account joined the organization.
        :param pulumi.Input[_builtins.str] joined_timestamp: Date the account became a part of the organization.
        :param pulumi.Input[_builtins.str] name: Name of the policy type.
        :param pulumi.Input[_builtins.str] state: State of the account.
        :param pulumi.Input[_builtins.str] status: Status of the policy type as it relates to the associated root.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if joined_method is not None:
            pulumi.set(__self__, "joined_method", joined_method)
        if joined_timestamp is not None:
            pulumi.set(__self__, "joined_timestamp", joined_timestamp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            warnings.warn("""status is deprecated. Use state instead.""", DeprecationWarning)
            pulumi.log.warn("""status is deprecated: status is deprecated. Use state instead.""")
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ARN of the root.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arn", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email of the account.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the root.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="joinedMethod")
    def joined_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Method by which the account joined the organization.
        """
        return pulumi.get(self, "joined_method")

    @joined_method.setter
    def joined_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "joined_method", value)

    @_builtins.property
    @pulumi.getter(name="joinedTimestamp")
    def joined_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date the account became a part of the organization.
        """
        return pulumi.get(self, "joined_timestamp")

    @joined_timestamp.setter
    def joined_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "joined_timestamp", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the policy type.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        State of the account.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""status is deprecated. Use state instead.""")
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the policy type as it relates to the associated root.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class OrganizationRootArgsDict(TypedDict):
        arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        ARN of the root.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Identifier of the root.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the policy type.
        """
        policy_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['OrganizationRootPolicyTypeArgsDict']]]]
        """
        List of policy types enabled for this root. All elements have these attributes:
        """
elif False:
    OrganizationRootArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationRootArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_types: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationRootPolicyTypeArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] arn: ARN of the root.
        :param pulumi.Input[_builtins.str] id: Identifier of the root.
        :param pulumi.Input[_builtins.str] name: Name of the policy type.
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationRootPolicyTypeArgs']]] policy_types: List of policy types enabled for this root. All elements have these attributes:
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_types is not None:
            pulumi.set(__self__, "policy_types", policy_types)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ARN of the root.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arn", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the root.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the policy type.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="policyTypes")
    def policy_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationRootPolicyTypeArgs']]]]:
        """
        List of policy types enabled for this root. All elements have these attributes:
        """
        return pulumi.get(self, "policy_types")

    @policy_types.setter
    def policy_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationRootPolicyTypeArgs']]]]):
        pulumi.set(self, "policy_types", value)


if not MYPY:
    class OrganizationRootPolicyTypeArgsDict(TypedDict):
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        Status of the policy type as it relates to the associated root.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    OrganizationRootPolicyTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationRootPolicyTypeArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] status: Status of the policy type as it relates to the associated root.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the policy type as it relates to the associated root.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class OrganizationalUnitAccountArgsDict(TypedDict):
        arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        ARN of the organizational unit
        """
        email: NotRequired[pulumi.Input[_builtins.str]]
        """
        Email of the account
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Identifier of the organization unit
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name for the organizational unit
        """
elif False:
    OrganizationalUnitAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationalUnitAccountArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] arn: ARN of the organizational unit
        :param pulumi.Input[_builtins.str] email: Email of the account
        :param pulumi.Input[_builtins.str] id: Identifier of the organization unit
        :param pulumi.Input[_builtins.str] name: The name for the organizational unit
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ARN of the organizational unit
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arn", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email of the account
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the organization unit
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for the organizational unit
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


