# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ResiliencyPolicyPolicy',
    'ResiliencyPolicyPolicyAz',
    'ResiliencyPolicyPolicyHardware',
    'ResiliencyPolicyPolicyRegion',
    'ResiliencyPolicyPolicySoftware',
    'ResiliencyPolicyTimeouts',
]

@pulumi.output_type
class ResiliencyPolicyPolicy(dict):
    def __init__(__self__, *,
                 az: Optional['outputs.ResiliencyPolicyPolicyAz'] = None,
                 hardware: Optional['outputs.ResiliencyPolicyPolicyHardware'] = None,
                 region: Optional['outputs.ResiliencyPolicyPolicyRegion'] = None,
                 software: Optional['outputs.ResiliencyPolicyPolicySoftware'] = None):
        """
        :param 'ResiliencyPolicyPolicyAzArgs' az: Specifies Availability Zone failure policy. See `policy.az`
        :param 'ResiliencyPolicyPolicyHardwareArgs' hardware: Specifies Infrastructure failure policy. See `policy.hardware`
        :param 'ResiliencyPolicyPolicyRegionArgs' region: Specifies Region failure policy. `policy.region`
        :param 'ResiliencyPolicyPolicySoftwareArgs' software: Specifies Application failure policy. See `policy.software`
               
               The following arguments are optional:
        """
        if az is not None:
            pulumi.set(__self__, "az", az)
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if software is not None:
            pulumi.set(__self__, "software", software)

    @_builtins.property
    @pulumi.getter
    def az(self) -> Optional['outputs.ResiliencyPolicyPolicyAz']:
        """
        Specifies Availability Zone failure policy. See `policy.az`
        """
        return pulumi.get(self, "az")

    @_builtins.property
    @pulumi.getter
    def hardware(self) -> Optional['outputs.ResiliencyPolicyPolicyHardware']:
        """
        Specifies Infrastructure failure policy. See `policy.hardware`
        """
        return pulumi.get(self, "hardware")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional['outputs.ResiliencyPolicyPolicyRegion']:
        """
        Specifies Region failure policy. `policy.region`
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def software(self) -> Optional['outputs.ResiliencyPolicyPolicySoftware']:
        """
        Specifies Application failure policy. See `policy.software`

        The following arguments are optional:
        """
        return pulumi.get(self, "software")


@pulumi.output_type
class ResiliencyPolicyPolicyAz(dict):
    def __init__(__self__, *,
                 rpo: _builtins.str,
                 rto: _builtins.str):
        """
        :param _builtins.str rpo: Recovery Point Objective (RPO) as a Go duration.
        :param _builtins.str rto: Recovery Time Objective (RTO) as a Go duration.
        """
        pulumi.set(__self__, "rpo", rpo)
        pulumi.set(__self__, "rto", rto)

    @_builtins.property
    @pulumi.getter
    def rpo(self) -> _builtins.str:
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        return pulumi.get(self, "rpo")

    @_builtins.property
    @pulumi.getter
    def rto(self) -> _builtins.str:
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
        return pulumi.get(self, "rto")


@pulumi.output_type
class ResiliencyPolicyPolicyHardware(dict):
    def __init__(__self__, *,
                 rpo: _builtins.str,
                 rto: _builtins.str):
        """
        :param _builtins.str rpo: Recovery Point Objective (RPO) as a Go duration.
        :param _builtins.str rto: Recovery Time Objective (RTO) as a Go duration.
        """
        pulumi.set(__self__, "rpo", rpo)
        pulumi.set(__self__, "rto", rto)

    @_builtins.property
    @pulumi.getter
    def rpo(self) -> _builtins.str:
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        return pulumi.get(self, "rpo")

    @_builtins.property
    @pulumi.getter
    def rto(self) -> _builtins.str:
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
        return pulumi.get(self, "rto")


@pulumi.output_type
class ResiliencyPolicyPolicyRegion(dict):
    def __init__(__self__, *,
                 rpo: Optional[_builtins.str] = None,
                 rto: Optional[_builtins.str] = None):
        """
        :param _builtins.str rpo: Recovery Point Objective (RPO) as a Go duration.
        :param _builtins.str rto: Recovery Time Objective (RTO) as a Go duration.
        """
        if rpo is not None:
            pulumi.set(__self__, "rpo", rpo)
        if rto is not None:
            pulumi.set(__self__, "rto", rto)

    @_builtins.property
    @pulumi.getter
    def rpo(self) -> Optional[_builtins.str]:
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        return pulumi.get(self, "rpo")

    @_builtins.property
    @pulumi.getter
    def rto(self) -> Optional[_builtins.str]:
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
        return pulumi.get(self, "rto")


@pulumi.output_type
class ResiliencyPolicyPolicySoftware(dict):
    def __init__(__self__, *,
                 rpo: _builtins.str,
                 rto: _builtins.str):
        """
        :param _builtins.str rpo: Recovery Point Objective (RPO) as a Go duration.
        :param _builtins.str rto: Recovery Time Objective (RTO) as a Go duration.
        """
        pulumi.set(__self__, "rpo", rpo)
        pulumi.set(__self__, "rto", rto)

    @_builtins.property
    @pulumi.getter
    def rpo(self) -> _builtins.str:
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        return pulumi.get(self, "rpo")

    @_builtins.property
    @pulumi.getter
    def rto(self) -> _builtins.str:
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
        return pulumi.get(self, "rto")


@pulumi.output_type
class ResiliencyPolicyTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


