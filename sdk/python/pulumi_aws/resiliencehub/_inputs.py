# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ResiliencyPolicyPolicyArgs',
    'ResiliencyPolicyPolicyArgsDict',
    'ResiliencyPolicyPolicyAzArgs',
    'ResiliencyPolicyPolicyAzArgsDict',
    'ResiliencyPolicyPolicyHardwareArgs',
    'ResiliencyPolicyPolicyHardwareArgsDict',
    'ResiliencyPolicyPolicyRegionArgs',
    'ResiliencyPolicyPolicyRegionArgsDict',
    'ResiliencyPolicyPolicySoftwareArgs',
    'ResiliencyPolicyPolicySoftwareArgsDict',
    'ResiliencyPolicyTimeoutsArgs',
    'ResiliencyPolicyTimeoutsArgsDict',
]

MYPY = False

if not MYPY:
    class ResiliencyPolicyPolicyArgsDict(TypedDict):
        az: NotRequired[pulumi.Input['ResiliencyPolicyPolicyAzArgsDict']]
        """
        Specifies Availability Zone failure policy. See `policy.az`
        """
        hardware: NotRequired[pulumi.Input['ResiliencyPolicyPolicyHardwareArgsDict']]
        """
        Specifies Infrastructure failure policy. See `policy.hardware`
        """
        region: NotRequired[pulumi.Input['ResiliencyPolicyPolicyRegionArgsDict']]
        """
        Specifies Region failure policy. `policy.region`
        """
        software: NotRequired[pulumi.Input['ResiliencyPolicyPolicySoftwareArgsDict']]
        """
        Specifies Application failure policy. See `policy.software`

        The following arguments are optional:
        """
elif False:
    ResiliencyPolicyPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResiliencyPolicyPolicyArgs:
    def __init__(__self__, *,
                 az: Optional[pulumi.Input['ResiliencyPolicyPolicyAzArgs']] = None,
                 hardware: Optional[pulumi.Input['ResiliencyPolicyPolicyHardwareArgs']] = None,
                 region: Optional[pulumi.Input['ResiliencyPolicyPolicyRegionArgs']] = None,
                 software: Optional[pulumi.Input['ResiliencyPolicyPolicySoftwareArgs']] = None):
        """
        :param pulumi.Input['ResiliencyPolicyPolicyAzArgs'] az: Specifies Availability Zone failure policy. See `policy.az`
        :param pulumi.Input['ResiliencyPolicyPolicyHardwareArgs'] hardware: Specifies Infrastructure failure policy. See `policy.hardware`
        :param pulumi.Input['ResiliencyPolicyPolicyRegionArgs'] region: Specifies Region failure policy. `policy.region`
        :param pulumi.Input['ResiliencyPolicyPolicySoftwareArgs'] software: Specifies Application failure policy. See `policy.software`
               
               The following arguments are optional:
        """
        if az is not None:
            pulumi.set(__self__, "az", az)
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if software is not None:
            pulumi.set(__self__, "software", software)

    @property
    @pulumi.getter
    def az(self) -> Optional[pulumi.Input['ResiliencyPolicyPolicyAzArgs']]:
        """
        Specifies Availability Zone failure policy. See `policy.az`
        """
        return pulumi.get(self, "az")

    @az.setter
    def az(self, value: Optional[pulumi.Input['ResiliencyPolicyPolicyAzArgs']]):
        pulumi.set(self, "az", value)

    @property
    @pulumi.getter
    def hardware(self) -> Optional[pulumi.Input['ResiliencyPolicyPolicyHardwareArgs']]:
        """
        Specifies Infrastructure failure policy. See `policy.hardware`
        """
        return pulumi.get(self, "hardware")

    @hardware.setter
    def hardware(self, value: Optional[pulumi.Input['ResiliencyPolicyPolicyHardwareArgs']]):
        pulumi.set(self, "hardware", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input['ResiliencyPolicyPolicyRegionArgs']]:
        """
        Specifies Region failure policy. `policy.region`
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input['ResiliencyPolicyPolicyRegionArgs']]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def software(self) -> Optional[pulumi.Input['ResiliencyPolicyPolicySoftwareArgs']]:
        """
        Specifies Application failure policy. See `policy.software`

        The following arguments are optional:
        """
        return pulumi.get(self, "software")

    @software.setter
    def software(self, value: Optional[pulumi.Input['ResiliencyPolicyPolicySoftwareArgs']]):
        pulumi.set(self, "software", value)


if not MYPY:
    class ResiliencyPolicyPolicyAzArgsDict(TypedDict):
        rpo: pulumi.Input[str]
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        rto: pulumi.Input[str]
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
elif False:
    ResiliencyPolicyPolicyAzArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResiliencyPolicyPolicyAzArgs:
    def __init__(__self__, *,
                 rpo: pulumi.Input[str],
                 rto: pulumi.Input[str]):
        """
        :param pulumi.Input[str] rpo: Recovery Point Objective (RPO) as a Go duration.
        :param pulumi.Input[str] rto: Recovery Time Objective (RTO) as a Go duration.
        """
        pulumi.set(__self__, "rpo", rpo)
        pulumi.set(__self__, "rto", rto)

    @property
    @pulumi.getter
    def rpo(self) -> pulumi.Input[str]:
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        return pulumi.get(self, "rpo")

    @rpo.setter
    def rpo(self, value: pulumi.Input[str]):
        pulumi.set(self, "rpo", value)

    @property
    @pulumi.getter
    def rto(self) -> pulumi.Input[str]:
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
        return pulumi.get(self, "rto")

    @rto.setter
    def rto(self, value: pulumi.Input[str]):
        pulumi.set(self, "rto", value)


if not MYPY:
    class ResiliencyPolicyPolicyHardwareArgsDict(TypedDict):
        rpo: pulumi.Input[str]
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        rto: pulumi.Input[str]
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
elif False:
    ResiliencyPolicyPolicyHardwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResiliencyPolicyPolicyHardwareArgs:
    def __init__(__self__, *,
                 rpo: pulumi.Input[str],
                 rto: pulumi.Input[str]):
        """
        :param pulumi.Input[str] rpo: Recovery Point Objective (RPO) as a Go duration.
        :param pulumi.Input[str] rto: Recovery Time Objective (RTO) as a Go duration.
        """
        pulumi.set(__self__, "rpo", rpo)
        pulumi.set(__self__, "rto", rto)

    @property
    @pulumi.getter
    def rpo(self) -> pulumi.Input[str]:
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        return pulumi.get(self, "rpo")

    @rpo.setter
    def rpo(self, value: pulumi.Input[str]):
        pulumi.set(self, "rpo", value)

    @property
    @pulumi.getter
    def rto(self) -> pulumi.Input[str]:
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
        return pulumi.get(self, "rto")

    @rto.setter
    def rto(self, value: pulumi.Input[str]):
        pulumi.set(self, "rto", value)


if not MYPY:
    class ResiliencyPolicyPolicyRegionArgsDict(TypedDict):
        rpo: NotRequired[pulumi.Input[str]]
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        rto: NotRequired[pulumi.Input[str]]
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
elif False:
    ResiliencyPolicyPolicyRegionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResiliencyPolicyPolicyRegionArgs:
    def __init__(__self__, *,
                 rpo: Optional[pulumi.Input[str]] = None,
                 rto: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] rpo: Recovery Point Objective (RPO) as a Go duration.
        :param pulumi.Input[str] rto: Recovery Time Objective (RTO) as a Go duration.
        """
        if rpo is not None:
            pulumi.set(__self__, "rpo", rpo)
        if rto is not None:
            pulumi.set(__self__, "rto", rto)

    @property
    @pulumi.getter
    def rpo(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        return pulumi.get(self, "rpo")

    @rpo.setter
    def rpo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpo", value)

    @property
    @pulumi.getter
    def rto(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
        return pulumi.get(self, "rto")

    @rto.setter
    def rto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rto", value)


if not MYPY:
    class ResiliencyPolicyPolicySoftwareArgsDict(TypedDict):
        rpo: pulumi.Input[str]
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        rto: pulumi.Input[str]
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
elif False:
    ResiliencyPolicyPolicySoftwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResiliencyPolicyPolicySoftwareArgs:
    def __init__(__self__, *,
                 rpo: pulumi.Input[str],
                 rto: pulumi.Input[str]):
        """
        :param pulumi.Input[str] rpo: Recovery Point Objective (RPO) as a Go duration.
        :param pulumi.Input[str] rto: Recovery Time Objective (RTO) as a Go duration.
        """
        pulumi.set(__self__, "rpo", rpo)
        pulumi.set(__self__, "rto", rto)

    @property
    @pulumi.getter
    def rpo(self) -> pulumi.Input[str]:
        """
        Recovery Point Objective (RPO) as a Go duration.
        """
        return pulumi.get(self, "rpo")

    @rpo.setter
    def rpo(self, value: pulumi.Input[str]):
        pulumi.set(self, "rpo", value)

    @property
    @pulumi.getter
    def rto(self) -> pulumi.Input[str]:
        """
        Recovery Time Objective (RTO) as a Go duration.
        """
        return pulumi.get(self, "rto")

    @rto.setter
    def rto(self, value: pulumi.Input[str]):
        pulumi.set(self, "rto", value)


if not MYPY:
    class ResiliencyPolicyTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    ResiliencyPolicyTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResiliencyPolicyTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


