# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'TriggerTrigger',
]

@pulumi.output_type
class TriggerTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationArn":
            suggest = "destination_arn"
        elif key == "customData":
            suggest = "custom_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_arn: str,
                 events: Sequence[str],
                 name: str,
                 branches: Optional[Sequence[str]] = None,
                 custom_data: Optional[str] = None):
        """
        :param str destination_arn: The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
        :param Sequence[str] events: The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events. Event types include: `all`, `updateReference`, `createReference`, `deleteReference`.
        :param str name: The name of the trigger.
        :param Sequence[str] branches: The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches.
        :param str custom_data: Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
        """
        TriggerTrigger._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_arn=destination_arn,
            events=events,
            name=name,
            branches=branches,
            custom_data=custom_data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_arn: Optional[str] = None,
             events: Optional[Sequence[str]] = None,
             name: Optional[str] = None,
             branches: Optional[Sequence[str]] = None,
             custom_data: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination_arn is None and 'destinationArn' in kwargs:
            destination_arn = kwargs['destinationArn']
        if destination_arn is None:
            raise TypeError("Missing 'destination_arn' argument")
        if events is None:
            raise TypeError("Missing 'events' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if custom_data is None and 'customData' in kwargs:
            custom_data = kwargs['customData']

        _setter("destination_arn", destination_arn)
        _setter("events", events)
        _setter("name", name)
        if branches is not None:
            _setter("branches", branches)
        if custom_data is not None:
            _setter("custom_data", custom_data)

    @property
    @pulumi.getter(name="destinationArn")
    def destination_arn(self) -> str:
        """
        The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
        """
        return pulumi.get(self, "destination_arn")

    @property
    @pulumi.getter
    def events(self) -> Sequence[str]:
        """
        The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events. Event types include: `all`, `updateReference`, `createReference`, `deleteReference`.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the trigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def branches(self) -> Optional[Sequence[str]]:
        """
        The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches.
        """
        return pulumi.get(self, "branches")

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[str]:
        """
        Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
        """
        return pulumi.get(self, "custom_data")


