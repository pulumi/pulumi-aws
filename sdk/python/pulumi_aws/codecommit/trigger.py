# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Trigger(pulumi.CustomResource):
    configuration_id: pulumi.Output[str]
    repository_name: pulumi.Output[str]
    """
    The name for the repository. This needs to be less than 100 characters.
    """
    triggers: pulumi.Output[list]
    def __init__(__self__, resource_name, opts=None, repository_name=None, triggers=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a CodeCommit Trigger Resource.

        > **NOTE on CodeCommit**: The CodeCommit is not yet rolled out
        in all regions - available regions are listed
        [the AWS Docs](https://docs.aws.amazon.com/general/latest/gr/rande.html#codecommit_region).



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] repository_name: The name for the repository. This needs to be less than 100 characters.

        The **triggers** object supports the following:

          * `branches` (`pulumi.Input[list]`) - The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches.
          * `customData` (`pulumi.Input[str]`) - Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
          * `destination_arn` (`pulumi.Input[str]`) - The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
          * `events` (`pulumi.Input[list]`) - The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events. Event types include: `all`, `updateReference`, `createReference`, `deleteReference`.
          * `name` (`pulumi.Input[str]`) - The name of the trigger.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if repository_name is None:
                raise TypeError("Missing required property 'repository_name'")
            __props__['repository_name'] = repository_name
            if triggers is None:
                raise TypeError("Missing required property 'triggers'")
            __props__['triggers'] = triggers
            __props__['configuration_id'] = None
        super(Trigger, __self__).__init__(
            'aws:codecommit/trigger:Trigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, configuration_id=None, repository_name=None, triggers=None):
        """
        Get an existing Trigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] repository_name: The name for the repository. This needs to be less than 100 characters.

        The **triggers** object supports the following:

          * `branches` (`pulumi.Input[list]`) - The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches.
          * `customData` (`pulumi.Input[str]`) - Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
          * `destination_arn` (`pulumi.Input[str]`) - The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
          * `events` (`pulumi.Input[list]`) - The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events. Event types include: `all`, `updateReference`, `createReference`, `deleteReference`.
          * `name` (`pulumi.Input[str]`) - The name of the trigger.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["configuration_id"] = configuration_id
        __props__["repository_name"] = repository_name
        __props__["triggers"] = triggers
        return Trigger(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

