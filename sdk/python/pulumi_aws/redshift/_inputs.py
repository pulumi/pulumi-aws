# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClusterClusterNodeArgs',
    'ClusterClusterNodeArgsDict',
    'EndpointAccessVpcEndpointArgs',
    'EndpointAccessVpcEndpointArgsDict',
    'EndpointAccessVpcEndpointNetworkInterfaceArgs',
    'EndpointAccessVpcEndpointNetworkInterfaceArgsDict',
    'IntegrationTimeoutsArgs',
    'IntegrationTimeoutsArgsDict',
    'ParameterGroupParameterArgs',
    'ParameterGroupParameterArgsDict',
    'ScheduledActionTargetActionArgs',
    'ScheduledActionTargetActionArgsDict',
    'ScheduledActionTargetActionPauseClusterArgs',
    'ScheduledActionTargetActionPauseClusterArgsDict',
    'ScheduledActionTargetActionResizeClusterArgs',
    'ScheduledActionTargetActionResizeClusterArgsDict',
    'ScheduledActionTargetActionResumeClusterArgs',
    'ScheduledActionTargetActionResumeClusterArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterClusterNodeArgsDict(TypedDict):
        node_role: NotRequired[pulumi.Input[builtins.str]]
        """
        Whether the node is a leader node or a compute node
        """
        private_ip_address: NotRequired[pulumi.Input[builtins.str]]
        """
        The private IP address of a node within a cluster
        """
        public_ip_address: NotRequired[pulumi.Input[builtins.str]]
        """
        The public IP address of a node within a cluster
        """
elif False:
    ClusterClusterNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterClusterNodeArgs:
    def __init__(__self__, *,
                 node_role: Optional[pulumi.Input[builtins.str]] = None,
                 private_ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 public_ip_address: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] node_role: Whether the node is a leader node or a compute node
        :param pulumi.Input[builtins.str] private_ip_address: The private IP address of a node within a cluster
        :param pulumi.Input[builtins.str] public_ip_address: The public IP address of a node within a cluster
        """
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if public_ip_address is not None:
            pulumi.set(__self__, "public_ip_address", public_ip_address)

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Whether the node is a leader node or a compute node
        """
        return pulumi.get(self, "node_role")

    @node_role.setter
    def node_role(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "node_role", value)

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The private IP address of a node within a cluster
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "private_ip_address", value)

    @property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The public IP address of a node within a cluster
        """
        return pulumi.get(self, "public_ip_address")

    @public_ip_address.setter
    def public_ip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_ip_address", value)


if not MYPY:
    class EndpointAccessVpcEndpointArgsDict(TypedDict):
        network_interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['EndpointAccessVpcEndpointNetworkInterfaceArgsDict']]]]
        """
        One or more network interfaces of the endpoint. Also known as an interface endpoint. See details below.
        """
        vpc_endpoint_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
        """
        vpc_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The VPC identifier that the endpoint is associated.
        """
elif False:
    EndpointAccessVpcEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointAccessVpcEndpointArgs:
    def __init__(__self__, *,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAccessVpcEndpointNetworkInterfaceArgs']]]] = None,
                 vpc_endpoint_id: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EndpointAccessVpcEndpointNetworkInterfaceArgs']]] network_interfaces: One or more network interfaces of the endpoint. Also known as an interface endpoint. See details below.
        :param pulumi.Input[builtins.str] vpc_endpoint_id: The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
        :param pulumi.Input[builtins.str] vpc_id: The VPC identifier that the endpoint is associated.
        """
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if vpc_endpoint_id is not None:
            pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAccessVpcEndpointNetworkInterfaceArgs']]]]:
        """
        One or more network interfaces of the endpoint. Also known as an interface endpoint. See details below.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAccessVpcEndpointNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
        """
        return pulumi.get(self, "vpc_endpoint_id")

    @vpc_endpoint_id.setter
    def vpc_endpoint_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_endpoint_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The VPC identifier that the endpoint is associated.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class EndpointAccessVpcEndpointNetworkInterfaceArgsDict(TypedDict):
        availability_zone: NotRequired[pulumi.Input[builtins.str]]
        """
        The Availability Zone.
        """
        network_interface_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The network interface identifier.
        """
        private_ip_address: NotRequired[pulumi.Input[builtins.str]]
        """
        The IPv4 address of the network interface within the subnet.
        """
        subnet_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The subnet identifier.
        """
elif False:
    EndpointAccessVpcEndpointNetworkInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointAccessVpcEndpointNetworkInterfaceArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 network_interface_id: Optional[pulumi.Input[builtins.str]] = None,
                 private_ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] availability_zone: The Availability Zone.
        :param pulumi.Input[builtins.str] network_interface_id: The network interface identifier.
        :param pulumi.Input[builtins.str] private_ip_address: The IPv4 address of the network interface within the subnet.
        :param pulumi.Input[builtins.str] subnet_id: The subnet identifier.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Availability Zone.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The network interface identifier.
        """
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_interface_id", value)

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The IPv4 address of the network interface within the subnet.
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "private_ip_address", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The subnet identifier.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class IntegrationTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[builtins.str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[builtins.str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[builtins.str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    IntegrationTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[builtins.str]] = None,
                 delete: Optional[pulumi.Input[builtins.str]] = None,
                 update: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[builtins.str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[builtins.str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class ParameterGroupParameterArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        The name of the Redshift parameter.
        """
        value: pulumi.Input[builtins.str]
        """
        The value of the Redshift parameter.
        """
elif False:
    ParameterGroupParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ParameterGroupParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] name: The name of the Redshift parameter.
        :param pulumi.Input[builtins.str] value: The value of the Redshift parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the Redshift parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        The value of the Redshift parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ScheduledActionTargetActionArgsDict(TypedDict):
        pause_cluster: NotRequired[pulumi.Input['ScheduledActionTargetActionPauseClusterArgsDict']]
        """
        An action that runs a `PauseCluster` API operation. Documented below.
        """
        resize_cluster: NotRequired[pulumi.Input['ScheduledActionTargetActionResizeClusterArgsDict']]
        """
        An action that runs a `ResizeCluster` API operation. Documented below.
        """
        resume_cluster: NotRequired[pulumi.Input['ScheduledActionTargetActionResumeClusterArgsDict']]
        """
        An action that runs a `ResumeCluster` API operation. Documented below.
        """
elif False:
    ScheduledActionTargetActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduledActionTargetActionArgs:
    def __init__(__self__, *,
                 pause_cluster: Optional[pulumi.Input['ScheduledActionTargetActionPauseClusterArgs']] = None,
                 resize_cluster: Optional[pulumi.Input['ScheduledActionTargetActionResizeClusterArgs']] = None,
                 resume_cluster: Optional[pulumi.Input['ScheduledActionTargetActionResumeClusterArgs']] = None):
        """
        :param pulumi.Input['ScheduledActionTargetActionPauseClusterArgs'] pause_cluster: An action that runs a `PauseCluster` API operation. Documented below.
        :param pulumi.Input['ScheduledActionTargetActionResizeClusterArgs'] resize_cluster: An action that runs a `ResizeCluster` API operation. Documented below.
        :param pulumi.Input['ScheduledActionTargetActionResumeClusterArgs'] resume_cluster: An action that runs a `ResumeCluster` API operation. Documented below.
        """
        if pause_cluster is not None:
            pulumi.set(__self__, "pause_cluster", pause_cluster)
        if resize_cluster is not None:
            pulumi.set(__self__, "resize_cluster", resize_cluster)
        if resume_cluster is not None:
            pulumi.set(__self__, "resume_cluster", resume_cluster)

    @property
    @pulumi.getter(name="pauseCluster")
    def pause_cluster(self) -> Optional[pulumi.Input['ScheduledActionTargetActionPauseClusterArgs']]:
        """
        An action that runs a `PauseCluster` API operation. Documented below.
        """
        return pulumi.get(self, "pause_cluster")

    @pause_cluster.setter
    def pause_cluster(self, value: Optional[pulumi.Input['ScheduledActionTargetActionPauseClusterArgs']]):
        pulumi.set(self, "pause_cluster", value)

    @property
    @pulumi.getter(name="resizeCluster")
    def resize_cluster(self) -> Optional[pulumi.Input['ScheduledActionTargetActionResizeClusterArgs']]:
        """
        An action that runs a `ResizeCluster` API operation. Documented below.
        """
        return pulumi.get(self, "resize_cluster")

    @resize_cluster.setter
    def resize_cluster(self, value: Optional[pulumi.Input['ScheduledActionTargetActionResizeClusterArgs']]):
        pulumi.set(self, "resize_cluster", value)

    @property
    @pulumi.getter(name="resumeCluster")
    def resume_cluster(self) -> Optional[pulumi.Input['ScheduledActionTargetActionResumeClusterArgs']]:
        """
        An action that runs a `ResumeCluster` API operation. Documented below.
        """
        return pulumi.get(self, "resume_cluster")

    @resume_cluster.setter
    def resume_cluster(self, value: Optional[pulumi.Input['ScheduledActionTargetActionResumeClusterArgs']]):
        pulumi.set(self, "resume_cluster", value)


if not MYPY:
    class ScheduledActionTargetActionPauseClusterArgsDict(TypedDict):
        cluster_identifier: pulumi.Input[builtins.str]
        """
        The identifier of the cluster to be paused.
        """
elif False:
    ScheduledActionTargetActionPauseClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduledActionTargetActionPauseClusterArgs:
    def __init__(__self__, *,
                 cluster_identifier: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] cluster_identifier: The identifier of the cluster to be paused.
        """
        pulumi.set(__self__, "cluster_identifier", cluster_identifier)

    @property
    @pulumi.getter(name="clusterIdentifier")
    def cluster_identifier(self) -> pulumi.Input[builtins.str]:
        """
        The identifier of the cluster to be paused.
        """
        return pulumi.get(self, "cluster_identifier")

    @cluster_identifier.setter
    def cluster_identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cluster_identifier", value)


if not MYPY:
    class ScheduledActionTargetActionResizeClusterArgsDict(TypedDict):
        cluster_identifier: pulumi.Input[builtins.str]
        """
        The unique identifier for the cluster to resize.
        """
        classic: NotRequired[pulumi.Input[builtins.bool]]
        """
        A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
        """
        cluster_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The new cluster type for the specified cluster.
        """
        node_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The new node type for the nodes you are adding.
        """
        number_of_nodes: NotRequired[pulumi.Input[builtins.int]]
        """
        The new number of nodes for the cluster.
        """
elif False:
    ScheduledActionTargetActionResizeClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduledActionTargetActionResizeClusterArgs:
    def __init__(__self__, *,
                 cluster_identifier: pulumi.Input[builtins.str],
                 classic: Optional[pulumi.Input[builtins.bool]] = None,
                 cluster_type: Optional[pulumi.Input[builtins.str]] = None,
                 node_type: Optional[pulumi.Input[builtins.str]] = None,
                 number_of_nodes: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] cluster_identifier: The unique identifier for the cluster to resize.
        :param pulumi.Input[builtins.bool] classic: A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
        :param pulumi.Input[builtins.str] cluster_type: The new cluster type for the specified cluster.
        :param pulumi.Input[builtins.str] node_type: The new node type for the nodes you are adding.
        :param pulumi.Input[builtins.int] number_of_nodes: The new number of nodes for the cluster.
        """
        pulumi.set(__self__, "cluster_identifier", cluster_identifier)
        if classic is not None:
            pulumi.set(__self__, "classic", classic)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)

    @property
    @pulumi.getter(name="clusterIdentifier")
    def cluster_identifier(self) -> pulumi.Input[builtins.str]:
        """
        The unique identifier for the cluster to resize.
        """
        return pulumi.get(self, "cluster_identifier")

    @cluster_identifier.setter
    def cluster_identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cluster_identifier", value)

    @property
    @pulumi.getter
    def classic(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
        """
        return pulumi.get(self, "classic")

    @classic.setter
    def classic(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "classic", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The new cluster type for the specified cluster.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The new node type for the nodes you are adding.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The new number of nodes for the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @number_of_nodes.setter
    def number_of_nodes(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "number_of_nodes", value)


if not MYPY:
    class ScheduledActionTargetActionResumeClusterArgsDict(TypedDict):
        cluster_identifier: pulumi.Input[builtins.str]
        """
        The identifier of the cluster to be resumed.
        """
elif False:
    ScheduledActionTargetActionResumeClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduledActionTargetActionResumeClusterArgs:
    def __init__(__self__, *,
                 cluster_identifier: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] cluster_identifier: The identifier of the cluster to be resumed.
        """
        pulumi.set(__self__, "cluster_identifier", cluster_identifier)

    @property
    @pulumi.getter(name="clusterIdentifier")
    def cluster_identifier(self) -> pulumi.Input[builtins.str]:
        """
        The identifier of the cluster to be resumed.
        """
        return pulumi.get(self, "cluster_identifier")

    @cluster_identifier.setter
    def cluster_identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cluster_identifier", value)


