# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'EventActionAction',
    'EventActionActionExportRevisionToS3',
    'EventActionActionExportRevisionToS3Encryption',
    'EventActionActionExportRevisionToS3RevisionDestination',
    'EventActionEvent',
    'EventActionEventRevisionPublished',
]

@pulumi.output_type
class EventActionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportRevisionToS3":
            suggest = "export_revision_to_s3"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventActionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventActionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventActionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 export_revision_to_s3: Optional['outputs.EventActionActionExportRevisionToS3'] = None):
        """
        :param 'EventActionActionExportRevisionToS3Args' export_revision_to_s3: Configuration for an Export Revision to S3 action.
               Described in `export_revision_to_s3` Configuration Block
        """
        if export_revision_to_s3 is not None:
            pulumi.set(__self__, "export_revision_to_s3", export_revision_to_s3)

    @property
    @pulumi.getter(name="exportRevisionToS3")
    def export_revision_to_s3(self) -> Optional['outputs.EventActionActionExportRevisionToS3']:
        """
        Configuration for an Export Revision to S3 action.
        Described in `export_revision_to_s3` Configuration Block
        """
        return pulumi.get(self, "export_revision_to_s3")


@pulumi.output_type
class EventActionActionExportRevisionToS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "revisionDestination":
            suggest = "revision_destination"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventActionActionExportRevisionToS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventActionActionExportRevisionToS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventActionActionExportRevisionToS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption: Optional['outputs.EventActionActionExportRevisionToS3Encryption'] = None,
                 revision_destination: Optional['outputs.EventActionActionExportRevisionToS3RevisionDestination'] = None):
        """
        :param 'EventActionActionExportRevisionToS3EncryptionArgs' encryption: Configures server-side encryption of the exported revision.
               Described in `encryption` Configuration Block below.
        :param 'EventActionActionExportRevisionToS3RevisionDestinationArgs' revision_destination: Configures the S3 destination of the exported revision.
               Described in `revision_destination` Configuration Block below.
        """
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if revision_destination is not None:
            pulumi.set(__self__, "revision_destination", revision_destination)

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.EventActionActionExportRevisionToS3Encryption']:
        """
        Configures server-side encryption of the exported revision.
        Described in `encryption` Configuration Block below.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="revisionDestination")
    def revision_destination(self) -> Optional['outputs.EventActionActionExportRevisionToS3RevisionDestination']:
        """
        Configures the S3 destination of the exported revision.
        Described in `revision_destination` Configuration Block below.
        """
        return pulumi.get(self, "revision_destination")


@pulumi.output_type
class EventActionActionExportRevisionToS3Encryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventActionActionExportRevisionToS3Encryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventActionActionExportRevisionToS3Encryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventActionActionExportRevisionToS3Encryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_arn: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str kms_key_arn: ARN of the KMS key used for encryption.
        :param str type: Type of server-side encryption.
               Valid values are `aws:kms` or `aws:s3`.
        """
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[str]:
        """
        ARN of the KMS key used for encryption.
        """
        return pulumi.get(self, "kms_key_arn")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of server-side encryption.
        Valid values are `aws:kms` or `aws:s3`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EventActionActionExportRevisionToS3RevisionDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyPattern":
            suggest = "key_pattern"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventActionActionExportRevisionToS3RevisionDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventActionActionExportRevisionToS3RevisionDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventActionActionExportRevisionToS3RevisionDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 key_pattern: Optional[str] = None):
        """
        :param str bucket: The S3 bucket where the revision will be exported.
        :param str key_pattern: Pattern for naming revisions in the S3 bucket.
               Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
        """
        pulumi.set(__self__, "bucket", bucket)
        if key_pattern is not None:
            pulumi.set(__self__, "key_pattern", key_pattern)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The S3 bucket where the revision will be exported.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="keyPattern")
    def key_pattern(self) -> Optional[str]:
        """
        Pattern for naming revisions in the S3 bucket.
        Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
        """
        return pulumi.get(self, "key_pattern")


@pulumi.output_type
class EventActionEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "revisionPublished":
            suggest = "revision_published"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventActionEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventActionEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventActionEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 revision_published: Optional['outputs.EventActionEventRevisionPublished'] = None):
        """
        :param 'EventActionEventRevisionPublishedArgs' revision_published: Configuration for a Revision Published event.
               Described in `revision_published` Configuration Block below.
        """
        if revision_published is not None:
            pulumi.set(__self__, "revision_published", revision_published)

    @property
    @pulumi.getter(name="revisionPublished")
    def revision_published(self) -> Optional['outputs.EventActionEventRevisionPublished']:
        """
        Configuration for a Revision Published event.
        Described in `revision_published` Configuration Block below.
        """
        return pulumi.get(self, "revision_published")


@pulumi.output_type
class EventActionEventRevisionPublished(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetId":
            suggest = "data_set_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventActionEventRevisionPublished. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventActionEventRevisionPublished.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventActionEventRevisionPublished.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_id: str):
        """
        :param str data_set_id: The ID of the data set to monitor for revision publications.
               Changing this value will recreate the resource.
        """
        pulumi.set(__self__, "data_set_id", data_set_id)

    @property
    @pulumi.getter(name="dataSetId")
    def data_set_id(self) -> str:
        """
        The ID of the data set to monitor for revision publications.
        Changing this value will recreate the resource.
        """
        return pulumi.get(self, "data_set_id")


