# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EventActionActionArgs',
    'EventActionActionArgsDict',
    'EventActionActionExportRevisionToS3Args',
    'EventActionActionExportRevisionToS3ArgsDict',
    'EventActionActionExportRevisionToS3EncryptionArgs',
    'EventActionActionExportRevisionToS3EncryptionArgsDict',
    'EventActionActionExportRevisionToS3RevisionDestinationArgs',
    'EventActionActionExportRevisionToS3RevisionDestinationArgsDict',
    'EventActionEventArgs',
    'EventActionEventArgsDict',
    'EventActionEventRevisionPublishedArgs',
    'EventActionEventRevisionPublishedArgsDict',
]

MYPY = False

if not MYPY:
    class EventActionActionArgsDict(TypedDict):
        export_revision_to_s3: NotRequired[pulumi.Input['EventActionActionExportRevisionToS3ArgsDict']]
        """
        Configuration for an Export Revision to S3 action.
        Described in `export_revision_to_s3` Configuration Block
        """
elif False:
    EventActionActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventActionActionArgs:
    def __init__(__self__, *,
                 export_revision_to_s3: Optional[pulumi.Input['EventActionActionExportRevisionToS3Args']] = None):
        """
        :param pulumi.Input['EventActionActionExportRevisionToS3Args'] export_revision_to_s3: Configuration for an Export Revision to S3 action.
               Described in `export_revision_to_s3` Configuration Block
        """
        if export_revision_to_s3 is not None:
            pulumi.set(__self__, "export_revision_to_s3", export_revision_to_s3)

    @property
    @pulumi.getter(name="exportRevisionToS3")
    def export_revision_to_s3(self) -> Optional[pulumi.Input['EventActionActionExportRevisionToS3Args']]:
        """
        Configuration for an Export Revision to S3 action.
        Described in `export_revision_to_s3` Configuration Block
        """
        return pulumi.get(self, "export_revision_to_s3")

    @export_revision_to_s3.setter
    def export_revision_to_s3(self, value: Optional[pulumi.Input['EventActionActionExportRevisionToS3Args']]):
        pulumi.set(self, "export_revision_to_s3", value)


if not MYPY:
    class EventActionActionExportRevisionToS3ArgsDict(TypedDict):
        encryption: NotRequired[pulumi.Input['EventActionActionExportRevisionToS3EncryptionArgsDict']]
        """
        Configures server-side encryption of the exported revision.
        Described in `encryption` Configuration Block below.
        """
        revision_destination: NotRequired[pulumi.Input['EventActionActionExportRevisionToS3RevisionDestinationArgsDict']]
        """
        Configures the S3 destination of the exported revision.
        Described in `revision_destination` Configuration Block below.
        """
elif False:
    EventActionActionExportRevisionToS3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventActionActionExportRevisionToS3Args:
    def __init__(__self__, *,
                 encryption: Optional[pulumi.Input['EventActionActionExportRevisionToS3EncryptionArgs']] = None,
                 revision_destination: Optional[pulumi.Input['EventActionActionExportRevisionToS3RevisionDestinationArgs']] = None):
        """
        :param pulumi.Input['EventActionActionExportRevisionToS3EncryptionArgs'] encryption: Configures server-side encryption of the exported revision.
               Described in `encryption` Configuration Block below.
        :param pulumi.Input['EventActionActionExportRevisionToS3RevisionDestinationArgs'] revision_destination: Configures the S3 destination of the exported revision.
               Described in `revision_destination` Configuration Block below.
        """
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if revision_destination is not None:
            pulumi.set(__self__, "revision_destination", revision_destination)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['EventActionActionExportRevisionToS3EncryptionArgs']]:
        """
        Configures server-side encryption of the exported revision.
        Described in `encryption` Configuration Block below.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['EventActionActionExportRevisionToS3EncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="revisionDestination")
    def revision_destination(self) -> Optional[pulumi.Input['EventActionActionExportRevisionToS3RevisionDestinationArgs']]:
        """
        Configures the S3 destination of the exported revision.
        Described in `revision_destination` Configuration Block below.
        """
        return pulumi.get(self, "revision_destination")

    @revision_destination.setter
    def revision_destination(self, value: Optional[pulumi.Input['EventActionActionExportRevisionToS3RevisionDestinationArgs']]):
        pulumi.set(self, "revision_destination", value)


if not MYPY:
    class EventActionActionExportRevisionToS3EncryptionArgsDict(TypedDict):
        kms_key_arn: NotRequired[pulumi.Input[str]]
        """
        ARN of the KMS key used for encryption.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of server-side encryption.
        Valid values are `aws:kms` or `aws:s3`.
        """
elif False:
    EventActionActionExportRevisionToS3EncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventActionActionExportRevisionToS3EncryptionArgs:
    def __init__(__self__, *,
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_arn: ARN of the KMS key used for encryption.
        :param pulumi.Input[str] type: Type of server-side encryption.
               Valid values are `aws:kms` or `aws:s3`.
        """
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of the KMS key used for encryption.
        """
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of server-side encryption.
        Valid values are `aws:kms` or `aws:s3`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class EventActionActionExportRevisionToS3RevisionDestinationArgsDict(TypedDict):
        bucket: pulumi.Input[str]
        """
        The S3 bucket where the revision will be exported.
        """
        key_pattern: NotRequired[pulumi.Input[str]]
        """
        Pattern for naming revisions in the S3 bucket.
        Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
        """
elif False:
    EventActionActionExportRevisionToS3RevisionDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventActionActionExportRevisionToS3RevisionDestinationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key_pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: The S3 bucket where the revision will be exported.
        :param pulumi.Input[str] key_pattern: Pattern for naming revisions in the S3 bucket.
               Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
        """
        pulumi.set(__self__, "bucket", bucket)
        if key_pattern is not None:
            pulumi.set(__self__, "key_pattern", key_pattern)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The S3 bucket where the revision will be exported.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="keyPattern")
    def key_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for naming revisions in the S3 bucket.
        Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
        """
        return pulumi.get(self, "key_pattern")

    @key_pattern.setter
    def key_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pattern", value)


if not MYPY:
    class EventActionEventArgsDict(TypedDict):
        revision_published: NotRequired[pulumi.Input['EventActionEventRevisionPublishedArgsDict']]
        """
        Configuration for a Revision Published event.
        Described in `revision_published` Configuration Block below.
        """
elif False:
    EventActionEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventActionEventArgs:
    def __init__(__self__, *,
                 revision_published: Optional[pulumi.Input['EventActionEventRevisionPublishedArgs']] = None):
        """
        :param pulumi.Input['EventActionEventRevisionPublishedArgs'] revision_published: Configuration for a Revision Published event.
               Described in `revision_published` Configuration Block below.
        """
        if revision_published is not None:
            pulumi.set(__self__, "revision_published", revision_published)

    @property
    @pulumi.getter(name="revisionPublished")
    def revision_published(self) -> Optional[pulumi.Input['EventActionEventRevisionPublishedArgs']]:
        """
        Configuration for a Revision Published event.
        Described in `revision_published` Configuration Block below.
        """
        return pulumi.get(self, "revision_published")

    @revision_published.setter
    def revision_published(self, value: Optional[pulumi.Input['EventActionEventRevisionPublishedArgs']]):
        pulumi.set(self, "revision_published", value)


if not MYPY:
    class EventActionEventRevisionPublishedArgsDict(TypedDict):
        data_set_id: pulumi.Input[str]
        """
        The ID of the data set to monitor for revision publications.
        Changing this value will recreate the resource.
        """
elif False:
    EventActionEventRevisionPublishedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EventActionEventRevisionPublishedArgs:
    def __init__(__self__, *,
                 data_set_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_set_id: The ID of the data set to monitor for revision publications.
               Changing this value will recreate the resource.
        """
        pulumi.set(__self__, "data_set_id", data_set_id)

    @property
    @pulumi.getter(name="dataSetId")
    def data_set_id(self) -> pulumi.Input[str]:
        """
        The ID of the data set to monitor for revision publications.
        Changing this value will recreate the resource.
        """
        return pulumi.get(self, "data_set_id")

    @data_set_id.setter
    def data_set_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_id", value)


