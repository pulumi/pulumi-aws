# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubscriberArgs', 'Subscriber']

@pulumi.input_type
class SubscriberArgs:
    def __init__(__self__, *,
                 access_type: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['SubscriberSourceArgs']] = None,
                 subscriber_description: Optional[pulumi.Input[str]] = None,
                 subscriber_identity: Optional[pulumi.Input['SubscriberSubscriberIdentityArgs']] = None,
                 subscriber_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input['SubscriberTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a Subscriber resource.
        :param pulumi.Input['SubscriberSourceArgs'] source: The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        :param pulumi.Input[str] subscriber_description: The description for your subscriber account in Security Lake.
        :param pulumi.Input['SubscriberSubscriberIdentityArgs'] subscriber_identity: The AWS identity used to access your data.
        :param pulumi.Input[str] subscriber_name: The name of your Security Lake subscriber account.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if subscriber_description is not None:
            pulumi.set(__self__, "subscriber_description", subscriber_description)
        if subscriber_identity is not None:
            pulumi.set(__self__, "subscriber_identity", subscriber_identity)
        if subscriber_name is not None:
            pulumi.set(__self__, "subscriber_name", subscriber_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['SubscriberSourceArgs']]:
        """
        The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['SubscriberSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="subscriberDescription")
    def subscriber_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for your subscriber account in Security Lake.
        """
        return pulumi.get(self, "subscriber_description")

    @subscriber_description.setter
    def subscriber_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscriber_description", value)

    @property
    @pulumi.getter(name="subscriberIdentity")
    def subscriber_identity(self) -> Optional[pulumi.Input['SubscriberSubscriberIdentityArgs']]:
        """
        The AWS identity used to access your data.
        """
        return pulumi.get(self, "subscriber_identity")

    @subscriber_identity.setter
    def subscriber_identity(self, value: Optional[pulumi.Input['SubscriberSubscriberIdentityArgs']]):
        pulumi.set(self, "subscriber_identity", value)

    @property
    @pulumi.getter(name="subscriberName")
    def subscriber_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of your Security Lake subscriber account.
        """
        return pulumi.get(self, "subscriber_name")

    @subscriber_name.setter
    def subscriber_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscriber_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SubscriberTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SubscriberTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _SubscriberState:
    def __init__(__self__, *,
                 access_type: Optional[pulumi.Input[str]] = None,
                 arn: Optional[pulumi.Input[str]] = None,
                 resource_share_arn: Optional[pulumi.Input[str]] = None,
                 resource_share_name: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 s3_bucket_arn: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['SubscriberSourceArgs']] = None,
                 subscriber_description: Optional[pulumi.Input[str]] = None,
                 subscriber_endpoint: Optional[pulumi.Input[str]] = None,
                 subscriber_identity: Optional[pulumi.Input['SubscriberSubscriberIdentityArgs']] = None,
                 subscriber_name: Optional[pulumi.Input[str]] = None,
                 subscriber_status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input['SubscriberTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering Subscriber resources.
        :param pulumi.Input[str] arn: ARN of the Data Lake.
        :param pulumi.Input[str] resource_share_arn: The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
        :param pulumi.Input[str] resource_share_name: The name of the resource share.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
        :param pulumi.Input[str] s3_bucket_arn: The ARN for the Amazon Security Lake Amazon S3 bucket.
        :param pulumi.Input['SubscriberSourceArgs'] source: The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        :param pulumi.Input[str] subscriber_description: The description for your subscriber account in Security Lake.
        :param pulumi.Input[str] subscriber_endpoint: The subscriber endpoint to which exception messages are posted.
        :param pulumi.Input['SubscriberSubscriberIdentityArgs'] subscriber_identity: The AWS identity used to access your data.
        :param pulumi.Input[str] subscriber_name: The name of your Security Lake subscriber account.
        :param pulumi.Input[str] subscriber_status: The subscriber status of the Amazon Security Lake subscriber account.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if resource_share_arn is not None:
            pulumi.set(__self__, "resource_share_arn", resource_share_arn)
        if resource_share_name is not None:
            pulumi.set(__self__, "resource_share_name", resource_share_name)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if s3_bucket_arn is not None:
            pulumi.set(__self__, "s3_bucket_arn", s3_bucket_arn)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if subscriber_description is not None:
            pulumi.set(__self__, "subscriber_description", subscriber_description)
        if subscriber_endpoint is not None:
            pulumi.set(__self__, "subscriber_endpoint", subscriber_endpoint)
        if subscriber_identity is not None:
            pulumi.set(__self__, "subscriber_identity", subscriber_identity)
        if subscriber_name is not None:
            pulumi.set(__self__, "subscriber_name", subscriber_name)
        if subscriber_status is not None:
            pulumi.set(__self__, "subscriber_status", subscriber_status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of the Data Lake.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="resourceShareArn")
    def resource_share_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
        """
        return pulumi.get(self, "resource_share_arn")

    @resource_share_arn.setter
    def resource_share_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_share_arn", value)

    @property
    @pulumi.getter(name="resourceShareName")
    def resource_share_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource share.
        """
        return pulumi.get(self, "resource_share_name")

    @resource_share_name.setter
    def resource_share_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_share_name", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="s3BucketArn")
    def s3_bucket_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN for the Amazon Security Lake Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_bucket_arn")

    @s3_bucket_arn.setter
    def s3_bucket_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_bucket_arn", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['SubscriberSourceArgs']]:
        """
        The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['SubscriberSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="subscriberDescription")
    def subscriber_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for your subscriber account in Security Lake.
        """
        return pulumi.get(self, "subscriber_description")

    @subscriber_description.setter
    def subscriber_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscriber_description", value)

    @property
    @pulumi.getter(name="subscriberEndpoint")
    def subscriber_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The subscriber endpoint to which exception messages are posted.
        """
        return pulumi.get(self, "subscriber_endpoint")

    @subscriber_endpoint.setter
    def subscriber_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscriber_endpoint", value)

    @property
    @pulumi.getter(name="subscriberIdentity")
    def subscriber_identity(self) -> Optional[pulumi.Input['SubscriberSubscriberIdentityArgs']]:
        """
        The AWS identity used to access your data.
        """
        return pulumi.get(self, "subscriber_identity")

    @subscriber_identity.setter
    def subscriber_identity(self, value: Optional[pulumi.Input['SubscriberSubscriberIdentityArgs']]):
        pulumi.set(self, "subscriber_identity", value)

    @property
    @pulumi.getter(name="subscriberName")
    def subscriber_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of your Security Lake subscriber account.
        """
        return pulumi.get(self, "subscriber_name")

    @subscriber_name.setter
    def subscriber_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscriber_name", value)

    @property
    @pulumi.getter(name="subscriberStatus")
    def subscriber_status(self) -> Optional[pulumi.Input[str]]:
        """
        The subscriber status of the Amazon Security Lake subscriber account.
        """
        return pulumi.get(self, "subscriber_status")

    @subscriber_status.setter
    def subscriber_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscriber_status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SubscriberTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SubscriberTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


class Subscriber(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_type: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['SubscriberSourceArgs']]] = None,
                 subscriber_description: Optional[pulumi.Input[str]] = None,
                 subscriber_identity: Optional[pulumi.Input[pulumi.InputType['SubscriberSubscriberIdentityArgs']]] = None,
                 subscriber_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['SubscriberTimeoutsArgs']]] = None,
                 __props__=None):
        """
        Resource for managing an AWS Security Lake Subscriber.

        ## Import

        Using `pulumi import`, import Security Lake subscriber using the subscriber ARN. For example:

        ```sh
        $ pulumi import aws:securitylake/subscriber:Subscriber example arn:aws:securitylake:eu-west-2:1234567890:subscriber/9f3bfe79-d543-474d-a93c-f3846805d208
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SubscriberSourceArgs']] source: The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        :param pulumi.Input[str] subscriber_description: The description for your subscriber account in Security Lake.
        :param pulumi.Input[pulumi.InputType['SubscriberSubscriberIdentityArgs']] subscriber_identity: The AWS identity used to access your data.
        :param pulumi.Input[str] subscriber_name: The name of your Security Lake subscriber account.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SubscriberArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for managing an AWS Security Lake Subscriber.

        ## Import

        Using `pulumi import`, import Security Lake subscriber using the subscriber ARN. For example:

        ```sh
        $ pulumi import aws:securitylake/subscriber:Subscriber example arn:aws:securitylake:eu-west-2:1234567890:subscriber/9f3bfe79-d543-474d-a93c-f3846805d208
        ```

        :param str resource_name: The name of the resource.
        :param SubscriberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubscriberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_type: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['SubscriberSourceArgs']]] = None,
                 subscriber_description: Optional[pulumi.Input[str]] = None,
                 subscriber_identity: Optional[pulumi.Input[pulumi.InputType['SubscriberSubscriberIdentityArgs']]] = None,
                 subscriber_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['SubscriberTimeoutsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubscriberArgs.__new__(SubscriberArgs)

            __props__.__dict__["access_type"] = access_type
            __props__.__dict__["source"] = source
            __props__.__dict__["subscriber_description"] = subscriber_description
            __props__.__dict__["subscriber_identity"] = subscriber_identity
            __props__.__dict__["subscriber_name"] = subscriber_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["arn"] = None
            __props__.__dict__["resource_share_arn"] = None
            __props__.__dict__["resource_share_name"] = None
            __props__.__dict__["role_arn"] = None
            __props__.__dict__["s3_bucket_arn"] = None
            __props__.__dict__["subscriber_endpoint"] = None
            __props__.__dict__["subscriber_status"] = None
            __props__.__dict__["tags_all"] = None
        super(Subscriber, __self__).__init__(
            'aws:securitylake/subscriber:Subscriber',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_type: Optional[pulumi.Input[str]] = None,
            arn: Optional[pulumi.Input[str]] = None,
            resource_share_arn: Optional[pulumi.Input[str]] = None,
            resource_share_name: Optional[pulumi.Input[str]] = None,
            role_arn: Optional[pulumi.Input[str]] = None,
            s3_bucket_arn: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[pulumi.InputType['SubscriberSourceArgs']]] = None,
            subscriber_description: Optional[pulumi.Input[str]] = None,
            subscriber_endpoint: Optional[pulumi.Input[str]] = None,
            subscriber_identity: Optional[pulumi.Input[pulumi.InputType['SubscriberSubscriberIdentityArgs']]] = None,
            subscriber_name: Optional[pulumi.Input[str]] = None,
            subscriber_status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['SubscriberTimeoutsArgs']]] = None) -> 'Subscriber':
        """
        Get an existing Subscriber resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: ARN of the Data Lake.
        :param pulumi.Input[str] resource_share_arn: The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
        :param pulumi.Input[str] resource_share_name: The name of the resource share.
        :param pulumi.Input[str] role_arn: The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
        :param pulumi.Input[str] s3_bucket_arn: The ARN for the Amazon Security Lake Amazon S3 bucket.
        :param pulumi.Input[pulumi.InputType['SubscriberSourceArgs']] source: The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        :param pulumi.Input[str] subscriber_description: The description for your subscriber account in Security Lake.
        :param pulumi.Input[str] subscriber_endpoint: The subscriber endpoint to which exception messages are posted.
        :param pulumi.Input[pulumi.InputType['SubscriberSubscriberIdentityArgs']] subscriber_identity: The AWS identity used to access your data.
        :param pulumi.Input[str] subscriber_name: The name of your Security Lake subscriber account.
        :param pulumi.Input[str] subscriber_status: The subscriber status of the Amazon Security Lake subscriber account.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubscriberState.__new__(_SubscriberState)

        __props__.__dict__["access_type"] = access_type
        __props__.__dict__["arn"] = arn
        __props__.__dict__["resource_share_arn"] = resource_share_arn
        __props__.__dict__["resource_share_name"] = resource_share_name
        __props__.__dict__["role_arn"] = role_arn
        __props__.__dict__["s3_bucket_arn"] = s3_bucket_arn
        __props__.__dict__["source"] = source
        __props__.__dict__["subscriber_description"] = subscriber_description
        __props__.__dict__["subscriber_endpoint"] = subscriber_endpoint
        __props__.__dict__["subscriber_identity"] = subscriber_identity
        __props__.__dict__["subscriber_name"] = subscriber_name
        __props__.__dict__["subscriber_status"] = subscriber_status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["timeouts"] = timeouts
        return Subscriber(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        ARN of the Data Lake.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="resourceShareArn")
    def resource_share_arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
        """
        return pulumi.get(self, "resource_share_arn")

    @property
    @pulumi.getter(name="resourceShareName")
    def resource_share_name(self) -> pulumi.Output[str]:
        """
        The name of the resource share.
        """
        return pulumi.get(self, "resource_share_name")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[str]:
        """
        The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="s3BucketArn")
    def s3_bucket_arn(self) -> pulumi.Output[str]:
        """
        The ARN for the Amazon Security Lake Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_bucket_arn")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[Optional['outputs.SubscriberSource']]:
        """
        The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="subscriberDescription")
    def subscriber_description(self) -> pulumi.Output[Optional[str]]:
        """
        The description for your subscriber account in Security Lake.
        """
        return pulumi.get(self, "subscriber_description")

    @property
    @pulumi.getter(name="subscriberEndpoint")
    def subscriber_endpoint(self) -> pulumi.Output[str]:
        """
        The subscriber endpoint to which exception messages are posted.
        """
        return pulumi.get(self, "subscriber_endpoint")

    @property
    @pulumi.getter(name="subscriberIdentity")
    def subscriber_identity(self) -> pulumi.Output[Optional['outputs.SubscriberSubscriberIdentity']]:
        """
        The AWS identity used to access your data.
        """
        return pulumi.get(self, "subscriber_identity")

    @property
    @pulumi.getter(name="subscriberName")
    def subscriber_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of your Security Lake subscriber account.
        """
        return pulumi.get(self, "subscriber_name")

    @property
    @pulumi.getter(name="subscriberStatus")
    def subscriber_status(self) -> pulumi.Output[str]:
        """
        The subscriber status of the Amazon Security Lake subscriber account.
        """
        return pulumi.get(self, "subscriber_status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SubscriberTimeouts']]:
        return pulumi.get(self, "timeouts")

