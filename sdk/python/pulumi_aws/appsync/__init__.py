# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .api_key import *
from .data_source import *
from .function import *
from .graph_ql_api import *
from .resolver import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "aws:appsync/apiKey:ApiKey":
                return ApiKey(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "aws:appsync/dataSource:DataSource":
                return DataSource(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "aws:appsync/function:Function":
                return Function(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "aws:appsync/graphQLApi:GraphQLApi":
                return GraphQLApi(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "aws:appsync/resolver:Resolver":
                return Resolver(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("aws", "appsync/apiKey", _module_instance)
    pulumi.runtime.register_resource_module("aws", "appsync/dataSource", _module_instance)
    pulumi.runtime.register_resource_module("aws", "appsync/function", _module_instance)
    pulumi.runtime.register_resource_module("aws", "appsync/graphQLApi", _module_instance)
    pulumi.runtime.register_resource_module("aws", "appsync/resolver", _module_instance)

_register_module()
