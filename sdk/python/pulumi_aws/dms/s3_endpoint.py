# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['S3EndpointArgs', 'S3Endpoint']

@pulumi.input_type
class S3EndpointArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 endpoint_id: pulumi.Input[str],
                 endpoint_type: pulumi.Input[str],
                 service_access_role_arn: pulumi.Input[str],
                 add_column_name: Optional[pulumi.Input[bool]] = None,
                 add_trailing_padding_character: Optional[pulumi.Input[bool]] = None,
                 bucket_folder: Optional[pulumi.Input[str]] = None,
                 canned_acl_for_objects: Optional[pulumi.Input[str]] = None,
                 cdc_inserts_and_updates: Optional[pulumi.Input[bool]] = None,
                 cdc_inserts_only: Optional[pulumi.Input[bool]] = None,
                 cdc_max_batch_interval: Optional[pulumi.Input[int]] = None,
                 cdc_min_file_size: Optional[pulumi.Input[int]] = None,
                 cdc_path: Optional[pulumi.Input[str]] = None,
                 certificate_arn: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 csv_delimiter: Optional[pulumi.Input[str]] = None,
                 csv_no_sup_value: Optional[pulumi.Input[str]] = None,
                 csv_null_value: Optional[pulumi.Input[str]] = None,
                 csv_row_delimiter: Optional[pulumi.Input[str]] = None,
                 data_format: Optional[pulumi.Input[str]] = None,
                 data_page_size: Optional[pulumi.Input[int]] = None,
                 date_partition_delimiter: Optional[pulumi.Input[str]] = None,
                 date_partition_enabled: Optional[pulumi.Input[bool]] = None,
                 date_partition_sequence: Optional[pulumi.Input[str]] = None,
                 date_partition_timezone: Optional[pulumi.Input[str]] = None,
                 dict_page_size_limit: Optional[pulumi.Input[int]] = None,
                 enable_statistics: Optional[pulumi.Input[bool]] = None,
                 encoding_type: Optional[pulumi.Input[str]] = None,
                 encryption_mode: Optional[pulumi.Input[str]] = None,
                 expected_bucket_owner: Optional[pulumi.Input[str]] = None,
                 external_table_definition: Optional[pulumi.Input[str]] = None,
                 ignore_header_rows: Optional[pulumi.Input[int]] = None,
                 include_op_for_full_load: Optional[pulumi.Input[bool]] = None,
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 max_file_size: Optional[pulumi.Input[int]] = None,
                 parquet_timestamp_in_millisecond: Optional[pulumi.Input[bool]] = None,
                 parquet_version: Optional[pulumi.Input[str]] = None,
                 preserve_transactions: Optional[pulumi.Input[bool]] = None,
                 rfc4180: Optional[pulumi.Input[bool]] = None,
                 row_group_length: Optional[pulumi.Input[int]] = None,
                 server_side_encryption_kms_key_id: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timestamp_column_name: Optional[pulumi.Input[str]] = None,
                 use_csv_no_sup_value: Optional[pulumi.Input[bool]] = None,
                 use_task_start_time_for_full_load_timestamp: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a S3Endpoint resource.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        pulumi.set(__self__, "service_access_role_arn", service_access_role_arn)
        if add_column_name is not None:
            pulumi.set(__self__, "add_column_name", add_column_name)
        if add_trailing_padding_character is not None:
            pulumi.set(__self__, "add_trailing_padding_character", add_trailing_padding_character)
        if bucket_folder is not None:
            pulumi.set(__self__, "bucket_folder", bucket_folder)
        if canned_acl_for_objects is not None:
            pulumi.set(__self__, "canned_acl_for_objects", canned_acl_for_objects)
        if cdc_inserts_and_updates is not None:
            pulumi.set(__self__, "cdc_inserts_and_updates", cdc_inserts_and_updates)
        if cdc_inserts_only is not None:
            pulumi.set(__self__, "cdc_inserts_only", cdc_inserts_only)
        if cdc_max_batch_interval is not None:
            pulumi.set(__self__, "cdc_max_batch_interval", cdc_max_batch_interval)
        if cdc_min_file_size is not None:
            pulumi.set(__self__, "cdc_min_file_size", cdc_min_file_size)
        if cdc_path is not None:
            pulumi.set(__self__, "cdc_path", cdc_path)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if csv_delimiter is not None:
            pulumi.set(__self__, "csv_delimiter", csv_delimiter)
        if csv_no_sup_value is not None:
            pulumi.set(__self__, "csv_no_sup_value", csv_no_sup_value)
        if csv_null_value is not None:
            pulumi.set(__self__, "csv_null_value", csv_null_value)
        if csv_row_delimiter is not None:
            pulumi.set(__self__, "csv_row_delimiter", csv_row_delimiter)
        if data_format is not None:
            pulumi.set(__self__, "data_format", data_format)
        if data_page_size is not None:
            pulumi.set(__self__, "data_page_size", data_page_size)
        if date_partition_delimiter is not None:
            pulumi.set(__self__, "date_partition_delimiter", date_partition_delimiter)
        if date_partition_enabled is not None:
            pulumi.set(__self__, "date_partition_enabled", date_partition_enabled)
        if date_partition_sequence is not None:
            pulumi.set(__self__, "date_partition_sequence", date_partition_sequence)
        if date_partition_timezone is not None:
            pulumi.set(__self__, "date_partition_timezone", date_partition_timezone)
        if dict_page_size_limit is not None:
            pulumi.set(__self__, "dict_page_size_limit", dict_page_size_limit)
        if enable_statistics is not None:
            pulumi.set(__self__, "enable_statistics", enable_statistics)
        if encoding_type is not None:
            pulumi.set(__self__, "encoding_type", encoding_type)
        if encryption_mode is not None:
            pulumi.set(__self__, "encryption_mode", encryption_mode)
        if expected_bucket_owner is not None:
            pulumi.set(__self__, "expected_bucket_owner", expected_bucket_owner)
        if external_table_definition is not None:
            pulumi.set(__self__, "external_table_definition", external_table_definition)
        if ignore_header_rows is not None:
            pulumi.set(__self__, "ignore_header_rows", ignore_header_rows)
        if include_op_for_full_load is not None:
            pulumi.set(__self__, "include_op_for_full_load", include_op_for_full_load)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if max_file_size is not None:
            pulumi.set(__self__, "max_file_size", max_file_size)
        if parquet_timestamp_in_millisecond is not None:
            pulumi.set(__self__, "parquet_timestamp_in_millisecond", parquet_timestamp_in_millisecond)
        if parquet_version is not None:
            pulumi.set(__self__, "parquet_version", parquet_version)
        if preserve_transactions is not None:
            pulumi.set(__self__, "preserve_transactions", preserve_transactions)
        if rfc4180 is not None:
            pulumi.set(__self__, "rfc4180", rfc4180)
        if row_group_length is not None:
            pulumi.set(__self__, "row_group_length", row_group_length)
        if server_side_encryption_kms_key_id is not None:
            pulumi.set(__self__, "server_side_encryption_kms_key_id", server_side_encryption_kms_key_id)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timestamp_column_name is not None:
            pulumi.set(__self__, "timestamp_column_name", timestamp_column_name)
        if use_csv_no_sup_value is not None:
            pulumi.set(__self__, "use_csv_no_sup_value", use_csv_no_sup_value)
        if use_task_start_time_for_full_load_timestamp is not None:
            pulumi.set(__self__, "use_task_start_time_for_full_load_timestamp", use_task_start_time_for_full_load_timestamp)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_access_role_arn")

    @service_access_role_arn.setter
    def service_access_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_access_role_arn", value)

    @property
    @pulumi.getter(name="addColumnName")
    def add_column_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "add_column_name")

    @add_column_name.setter
    def add_column_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_column_name", value)

    @property
    @pulumi.getter(name="addTrailingPaddingCharacter")
    def add_trailing_padding_character(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "add_trailing_padding_character")

    @add_trailing_padding_character.setter
    def add_trailing_padding_character(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_trailing_padding_character", value)

    @property
    @pulumi.getter(name="bucketFolder")
    def bucket_folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_folder")

    @bucket_folder.setter
    def bucket_folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_folder", value)

    @property
    @pulumi.getter(name="cannedAclForObjects")
    def canned_acl_for_objects(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "canned_acl_for_objects")

    @canned_acl_for_objects.setter
    def canned_acl_for_objects(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canned_acl_for_objects", value)

    @property
    @pulumi.getter(name="cdcInsertsAndUpdates")
    def cdc_inserts_and_updates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cdc_inserts_and_updates")

    @cdc_inserts_and_updates.setter
    def cdc_inserts_and_updates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cdc_inserts_and_updates", value)

    @property
    @pulumi.getter(name="cdcInsertsOnly")
    def cdc_inserts_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cdc_inserts_only")

    @cdc_inserts_only.setter
    def cdc_inserts_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cdc_inserts_only", value)

    @property
    @pulumi.getter(name="cdcMaxBatchInterval")
    def cdc_max_batch_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cdc_max_batch_interval")

    @cdc_max_batch_interval.setter
    def cdc_max_batch_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cdc_max_batch_interval", value)

    @property
    @pulumi.getter(name="cdcMinFileSize")
    def cdc_min_file_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cdc_min_file_size")

    @cdc_min_file_size.setter
    def cdc_min_file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cdc_min_file_size", value)

    @property
    @pulumi.getter(name="cdcPath")
    def cdc_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cdc_path")

    @cdc_path.setter
    def cdc_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_path", value)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_arn")

    @certificate_arn.setter
    def certificate_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_arn", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="csvDelimiter")
    def csv_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv_delimiter")

    @csv_delimiter.setter
    def csv_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv_delimiter", value)

    @property
    @pulumi.getter(name="csvNoSupValue")
    def csv_no_sup_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv_no_sup_value")

    @csv_no_sup_value.setter
    def csv_no_sup_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv_no_sup_value", value)

    @property
    @pulumi.getter(name="csvNullValue")
    def csv_null_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv_null_value")

    @csv_null_value.setter
    def csv_null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv_null_value", value)

    @property
    @pulumi.getter(name="csvRowDelimiter")
    def csv_row_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv_row_delimiter")

    @csv_row_delimiter.setter
    def csv_row_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv_row_delimiter", value)

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_format")

    @data_format.setter
    def data_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_format", value)

    @property
    @pulumi.getter(name="dataPageSize")
    def data_page_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "data_page_size")

    @data_page_size.setter
    def data_page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_page_size", value)

    @property
    @pulumi.getter(name="datePartitionDelimiter")
    def date_partition_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_partition_delimiter")

    @date_partition_delimiter.setter
    def date_partition_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_partition_delimiter", value)

    @property
    @pulumi.getter(name="datePartitionEnabled")
    def date_partition_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "date_partition_enabled")

    @date_partition_enabled.setter
    def date_partition_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "date_partition_enabled", value)

    @property
    @pulumi.getter(name="datePartitionSequence")
    def date_partition_sequence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_partition_sequence")

    @date_partition_sequence.setter
    def date_partition_sequence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_partition_sequence", value)

    @property
    @pulumi.getter(name="datePartitionTimezone")
    def date_partition_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_partition_timezone")

    @date_partition_timezone.setter
    def date_partition_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_partition_timezone", value)

    @property
    @pulumi.getter(name="dictPageSizeLimit")
    def dict_page_size_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dict_page_size_limit")

    @dict_page_size_limit.setter
    def dict_page_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dict_page_size_limit", value)

    @property
    @pulumi.getter(name="enableStatistics")
    def enable_statistics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_statistics")

    @enable_statistics.setter
    def enable_statistics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_statistics", value)

    @property
    @pulumi.getter(name="encodingType")
    def encoding_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding_type")

    @encoding_type.setter
    def encoding_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding_type", value)

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_mode")

    @encryption_mode.setter
    def encryption_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_mode", value)

    @property
    @pulumi.getter(name="expectedBucketOwner")
    def expected_bucket_owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expected_bucket_owner")

    @expected_bucket_owner.setter
    def expected_bucket_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected_bucket_owner", value)

    @property
    @pulumi.getter(name="externalTableDefinition")
    def external_table_definition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_table_definition")

    @external_table_definition.setter
    def external_table_definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_table_definition", value)

    @property
    @pulumi.getter(name="ignoreHeaderRows")
    def ignore_header_rows(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ignore_header_rows")

    @ignore_header_rows.setter
    def ignore_header_rows(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ignore_header_rows", value)

    @property
    @pulumi.getter(name="includeOpForFullLoad")
    def include_op_for_full_load(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_op_for_full_load")

    @include_op_for_full_load.setter
    def include_op_for_full_load(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_op_for_full_load", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_file_size")

    @max_file_size.setter
    def max_file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_file_size", value)

    @property
    @pulumi.getter(name="parquetTimestampInMillisecond")
    def parquet_timestamp_in_millisecond(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "parquet_timestamp_in_millisecond")

    @parquet_timestamp_in_millisecond.setter
    def parquet_timestamp_in_millisecond(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parquet_timestamp_in_millisecond", value)

    @property
    @pulumi.getter(name="parquetVersion")
    def parquet_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parquet_version")

    @parquet_version.setter
    def parquet_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parquet_version", value)

    @property
    @pulumi.getter(name="preserveTransactions")
    def preserve_transactions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "preserve_transactions")

    @preserve_transactions.setter
    def preserve_transactions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_transactions", value)

    @property
    @pulumi.getter
    def rfc4180(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rfc4180")

    @rfc4180.setter
    def rfc4180(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rfc4180", value)

    @property
    @pulumi.getter(name="rowGroupLength")
    def row_group_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "row_group_length")

    @row_group_length.setter
    def row_group_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "row_group_length", value)

    @property
    @pulumi.getter(name="serverSideEncryptionKmsKeyId")
    def server_side_encryption_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_side_encryption_kms_key_id")

    @server_side_encryption_kms_key_id.setter
    def server_side_encryption_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption_kms_key_id", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timestampColumnName")
    def timestamp_column_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timestamp_column_name")

    @timestamp_column_name.setter
    def timestamp_column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_column_name", value)

    @property
    @pulumi.getter(name="useCsvNoSupValue")
    def use_csv_no_sup_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_csv_no_sup_value")

    @use_csv_no_sup_value.setter
    def use_csv_no_sup_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_csv_no_sup_value", value)

    @property
    @pulumi.getter(name="useTaskStartTimeForFullLoadTimestamp")
    def use_task_start_time_for_full_load_timestamp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_task_start_time_for_full_load_timestamp")

    @use_task_start_time_for_full_load_timestamp.setter
    def use_task_start_time_for_full_load_timestamp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_task_start_time_for_full_load_timestamp", value)


@pulumi.input_type
class _S3EndpointState:
    def __init__(__self__, *,
                 add_column_name: Optional[pulumi.Input[bool]] = None,
                 add_trailing_padding_character: Optional[pulumi.Input[bool]] = None,
                 bucket_folder: Optional[pulumi.Input[str]] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 canned_acl_for_objects: Optional[pulumi.Input[str]] = None,
                 cdc_inserts_and_updates: Optional[pulumi.Input[bool]] = None,
                 cdc_inserts_only: Optional[pulumi.Input[bool]] = None,
                 cdc_max_batch_interval: Optional[pulumi.Input[int]] = None,
                 cdc_min_file_size: Optional[pulumi.Input[int]] = None,
                 cdc_path: Optional[pulumi.Input[str]] = None,
                 certificate_arn: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 csv_delimiter: Optional[pulumi.Input[str]] = None,
                 csv_no_sup_value: Optional[pulumi.Input[str]] = None,
                 csv_null_value: Optional[pulumi.Input[str]] = None,
                 csv_row_delimiter: Optional[pulumi.Input[str]] = None,
                 data_format: Optional[pulumi.Input[str]] = None,
                 data_page_size: Optional[pulumi.Input[int]] = None,
                 date_partition_delimiter: Optional[pulumi.Input[str]] = None,
                 date_partition_enabled: Optional[pulumi.Input[bool]] = None,
                 date_partition_sequence: Optional[pulumi.Input[str]] = None,
                 date_partition_timezone: Optional[pulumi.Input[str]] = None,
                 dict_page_size_limit: Optional[pulumi.Input[int]] = None,
                 enable_statistics: Optional[pulumi.Input[bool]] = None,
                 encoding_type: Optional[pulumi.Input[str]] = None,
                 encryption_mode: Optional[pulumi.Input[str]] = None,
                 endpoint_arn: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 engine_display_name: Optional[pulumi.Input[str]] = None,
                 expected_bucket_owner: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 external_table_definition: Optional[pulumi.Input[str]] = None,
                 ignore_header_rows: Optional[pulumi.Input[int]] = None,
                 include_op_for_full_load: Optional[pulumi.Input[bool]] = None,
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 max_file_size: Optional[pulumi.Input[int]] = None,
                 parquet_timestamp_in_millisecond: Optional[pulumi.Input[bool]] = None,
                 parquet_version: Optional[pulumi.Input[str]] = None,
                 preserve_transactions: Optional[pulumi.Input[bool]] = None,
                 rfc4180: Optional[pulumi.Input[bool]] = None,
                 row_group_length: Optional[pulumi.Input[int]] = None,
                 server_side_encryption_kms_key_id: Optional[pulumi.Input[str]] = None,
                 service_access_role_arn: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timestamp_column_name: Optional[pulumi.Input[str]] = None,
                 use_csv_no_sup_value: Optional[pulumi.Input[bool]] = None,
                 use_task_start_time_for_full_load_timestamp: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering S3Endpoint resources.
        """
        if add_column_name is not None:
            pulumi.set(__self__, "add_column_name", add_column_name)
        if add_trailing_padding_character is not None:
            pulumi.set(__self__, "add_trailing_padding_character", add_trailing_padding_character)
        if bucket_folder is not None:
            pulumi.set(__self__, "bucket_folder", bucket_folder)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if canned_acl_for_objects is not None:
            pulumi.set(__self__, "canned_acl_for_objects", canned_acl_for_objects)
        if cdc_inserts_and_updates is not None:
            pulumi.set(__self__, "cdc_inserts_and_updates", cdc_inserts_and_updates)
        if cdc_inserts_only is not None:
            pulumi.set(__self__, "cdc_inserts_only", cdc_inserts_only)
        if cdc_max_batch_interval is not None:
            pulumi.set(__self__, "cdc_max_batch_interval", cdc_max_batch_interval)
        if cdc_min_file_size is not None:
            pulumi.set(__self__, "cdc_min_file_size", cdc_min_file_size)
        if cdc_path is not None:
            pulumi.set(__self__, "cdc_path", cdc_path)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if csv_delimiter is not None:
            pulumi.set(__self__, "csv_delimiter", csv_delimiter)
        if csv_no_sup_value is not None:
            pulumi.set(__self__, "csv_no_sup_value", csv_no_sup_value)
        if csv_null_value is not None:
            pulumi.set(__self__, "csv_null_value", csv_null_value)
        if csv_row_delimiter is not None:
            pulumi.set(__self__, "csv_row_delimiter", csv_row_delimiter)
        if data_format is not None:
            pulumi.set(__self__, "data_format", data_format)
        if data_page_size is not None:
            pulumi.set(__self__, "data_page_size", data_page_size)
        if date_partition_delimiter is not None:
            pulumi.set(__self__, "date_partition_delimiter", date_partition_delimiter)
        if date_partition_enabled is not None:
            pulumi.set(__self__, "date_partition_enabled", date_partition_enabled)
        if date_partition_sequence is not None:
            pulumi.set(__self__, "date_partition_sequence", date_partition_sequence)
        if date_partition_timezone is not None:
            pulumi.set(__self__, "date_partition_timezone", date_partition_timezone)
        if dict_page_size_limit is not None:
            pulumi.set(__self__, "dict_page_size_limit", dict_page_size_limit)
        if enable_statistics is not None:
            pulumi.set(__self__, "enable_statistics", enable_statistics)
        if encoding_type is not None:
            pulumi.set(__self__, "encoding_type", encoding_type)
        if encryption_mode is not None:
            pulumi.set(__self__, "encryption_mode", encryption_mode)
        if endpoint_arn is not None:
            pulumi.set(__self__, "endpoint_arn", endpoint_arn)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if engine_display_name is not None:
            pulumi.set(__self__, "engine_display_name", engine_display_name)
        if expected_bucket_owner is not None:
            pulumi.set(__self__, "expected_bucket_owner", expected_bucket_owner)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if external_table_definition is not None:
            pulumi.set(__self__, "external_table_definition", external_table_definition)
        if ignore_header_rows is not None:
            pulumi.set(__self__, "ignore_header_rows", ignore_header_rows)
        if include_op_for_full_load is not None:
            pulumi.set(__self__, "include_op_for_full_load", include_op_for_full_load)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if max_file_size is not None:
            pulumi.set(__self__, "max_file_size", max_file_size)
        if parquet_timestamp_in_millisecond is not None:
            pulumi.set(__self__, "parquet_timestamp_in_millisecond", parquet_timestamp_in_millisecond)
        if parquet_version is not None:
            pulumi.set(__self__, "parquet_version", parquet_version)
        if preserve_transactions is not None:
            pulumi.set(__self__, "preserve_transactions", preserve_transactions)
        if rfc4180 is not None:
            pulumi.set(__self__, "rfc4180", rfc4180)
        if row_group_length is not None:
            pulumi.set(__self__, "row_group_length", row_group_length)
        if server_side_encryption_kms_key_id is not None:
            pulumi.set(__self__, "server_side_encryption_kms_key_id", server_side_encryption_kms_key_id)
        if service_access_role_arn is not None:
            pulumi.set(__self__, "service_access_role_arn", service_access_role_arn)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if timestamp_column_name is not None:
            pulumi.set(__self__, "timestamp_column_name", timestamp_column_name)
        if use_csv_no_sup_value is not None:
            pulumi.set(__self__, "use_csv_no_sup_value", use_csv_no_sup_value)
        if use_task_start_time_for_full_load_timestamp is not None:
            pulumi.set(__self__, "use_task_start_time_for_full_load_timestamp", use_task_start_time_for_full_load_timestamp)

    @property
    @pulumi.getter(name="addColumnName")
    def add_column_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "add_column_name")

    @add_column_name.setter
    def add_column_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_column_name", value)

    @property
    @pulumi.getter(name="addTrailingPaddingCharacter")
    def add_trailing_padding_character(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "add_trailing_padding_character")

    @add_trailing_padding_character.setter
    def add_trailing_padding_character(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_trailing_padding_character", value)

    @property
    @pulumi.getter(name="bucketFolder")
    def bucket_folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_folder")

    @bucket_folder.setter
    def bucket_folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_folder", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="cannedAclForObjects")
    def canned_acl_for_objects(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "canned_acl_for_objects")

    @canned_acl_for_objects.setter
    def canned_acl_for_objects(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canned_acl_for_objects", value)

    @property
    @pulumi.getter(name="cdcInsertsAndUpdates")
    def cdc_inserts_and_updates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cdc_inserts_and_updates")

    @cdc_inserts_and_updates.setter
    def cdc_inserts_and_updates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cdc_inserts_and_updates", value)

    @property
    @pulumi.getter(name="cdcInsertsOnly")
    def cdc_inserts_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cdc_inserts_only")

    @cdc_inserts_only.setter
    def cdc_inserts_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cdc_inserts_only", value)

    @property
    @pulumi.getter(name="cdcMaxBatchInterval")
    def cdc_max_batch_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cdc_max_batch_interval")

    @cdc_max_batch_interval.setter
    def cdc_max_batch_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cdc_max_batch_interval", value)

    @property
    @pulumi.getter(name="cdcMinFileSize")
    def cdc_min_file_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cdc_min_file_size")

    @cdc_min_file_size.setter
    def cdc_min_file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cdc_min_file_size", value)

    @property
    @pulumi.getter(name="cdcPath")
    def cdc_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cdc_path")

    @cdc_path.setter
    def cdc_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_path", value)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_arn")

    @certificate_arn.setter
    def certificate_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_arn", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="csvDelimiter")
    def csv_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv_delimiter")

    @csv_delimiter.setter
    def csv_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv_delimiter", value)

    @property
    @pulumi.getter(name="csvNoSupValue")
    def csv_no_sup_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv_no_sup_value")

    @csv_no_sup_value.setter
    def csv_no_sup_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv_no_sup_value", value)

    @property
    @pulumi.getter(name="csvNullValue")
    def csv_null_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv_null_value")

    @csv_null_value.setter
    def csv_null_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv_null_value", value)

    @property
    @pulumi.getter(name="csvRowDelimiter")
    def csv_row_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv_row_delimiter")

    @csv_row_delimiter.setter
    def csv_row_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv_row_delimiter", value)

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_format")

    @data_format.setter
    def data_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_format", value)

    @property
    @pulumi.getter(name="dataPageSize")
    def data_page_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "data_page_size")

    @data_page_size.setter
    def data_page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_page_size", value)

    @property
    @pulumi.getter(name="datePartitionDelimiter")
    def date_partition_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_partition_delimiter")

    @date_partition_delimiter.setter
    def date_partition_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_partition_delimiter", value)

    @property
    @pulumi.getter(name="datePartitionEnabled")
    def date_partition_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "date_partition_enabled")

    @date_partition_enabled.setter
    def date_partition_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "date_partition_enabled", value)

    @property
    @pulumi.getter(name="datePartitionSequence")
    def date_partition_sequence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_partition_sequence")

    @date_partition_sequence.setter
    def date_partition_sequence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_partition_sequence", value)

    @property
    @pulumi.getter(name="datePartitionTimezone")
    def date_partition_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_partition_timezone")

    @date_partition_timezone.setter
    def date_partition_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_partition_timezone", value)

    @property
    @pulumi.getter(name="dictPageSizeLimit")
    def dict_page_size_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dict_page_size_limit")

    @dict_page_size_limit.setter
    def dict_page_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dict_page_size_limit", value)

    @property
    @pulumi.getter(name="enableStatistics")
    def enable_statistics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_statistics")

    @enable_statistics.setter
    def enable_statistics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_statistics", value)

    @property
    @pulumi.getter(name="encodingType")
    def encoding_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding_type")

    @encoding_type.setter
    def encoding_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding_type", value)

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_mode")

    @encryption_mode.setter
    def encryption_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_mode", value)

    @property
    @pulumi.getter(name="endpointArn")
    def endpoint_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_arn")

    @endpoint_arn.setter
    def endpoint_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_arn", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="engineDisplayName")
    def engine_display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine_display_name")

    @engine_display_name.setter
    def engine_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_display_name", value)

    @property
    @pulumi.getter(name="expectedBucketOwner")
    def expected_bucket_owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expected_bucket_owner")

    @expected_bucket_owner.setter
    def expected_bucket_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected_bucket_owner", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="externalTableDefinition")
    def external_table_definition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_table_definition")

    @external_table_definition.setter
    def external_table_definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_table_definition", value)

    @property
    @pulumi.getter(name="ignoreHeaderRows")
    def ignore_header_rows(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ignore_header_rows")

    @ignore_header_rows.setter
    def ignore_header_rows(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ignore_header_rows", value)

    @property
    @pulumi.getter(name="includeOpForFullLoad")
    def include_op_for_full_load(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_op_for_full_load")

    @include_op_for_full_load.setter
    def include_op_for_full_load(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_op_for_full_load", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_file_size")

    @max_file_size.setter
    def max_file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_file_size", value)

    @property
    @pulumi.getter(name="parquetTimestampInMillisecond")
    def parquet_timestamp_in_millisecond(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "parquet_timestamp_in_millisecond")

    @parquet_timestamp_in_millisecond.setter
    def parquet_timestamp_in_millisecond(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parquet_timestamp_in_millisecond", value)

    @property
    @pulumi.getter(name="parquetVersion")
    def parquet_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parquet_version")

    @parquet_version.setter
    def parquet_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parquet_version", value)

    @property
    @pulumi.getter(name="preserveTransactions")
    def preserve_transactions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "preserve_transactions")

    @preserve_transactions.setter
    def preserve_transactions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_transactions", value)

    @property
    @pulumi.getter
    def rfc4180(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rfc4180")

    @rfc4180.setter
    def rfc4180(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rfc4180", value)

    @property
    @pulumi.getter(name="rowGroupLength")
    def row_group_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "row_group_length")

    @row_group_length.setter
    def row_group_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "row_group_length", value)

    @property
    @pulumi.getter(name="serverSideEncryptionKmsKeyId")
    def server_side_encryption_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_side_encryption_kms_key_id")

    @server_side_encryption_kms_key_id.setter
    def server_side_encryption_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption_kms_key_id", value)

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_access_role_arn")

    @service_access_role_arn.setter
    def service_access_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_access_role_arn", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter(name="timestampColumnName")
    def timestamp_column_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timestamp_column_name")

    @timestamp_column_name.setter
    def timestamp_column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_column_name", value)

    @property
    @pulumi.getter(name="useCsvNoSupValue")
    def use_csv_no_sup_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_csv_no_sup_value")

    @use_csv_no_sup_value.setter
    def use_csv_no_sup_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_csv_no_sup_value", value)

    @property
    @pulumi.getter(name="useTaskStartTimeForFullLoadTimestamp")
    def use_task_start_time_for_full_load_timestamp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_task_start_time_for_full_load_timestamp")

    @use_task_start_time_for_full_load_timestamp.setter
    def use_task_start_time_for_full_load_timestamp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_task_start_time_for_full_load_timestamp", value)


class S3Endpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_column_name: Optional[pulumi.Input[bool]] = None,
                 add_trailing_padding_character: Optional[pulumi.Input[bool]] = None,
                 bucket_folder: Optional[pulumi.Input[str]] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 canned_acl_for_objects: Optional[pulumi.Input[str]] = None,
                 cdc_inserts_and_updates: Optional[pulumi.Input[bool]] = None,
                 cdc_inserts_only: Optional[pulumi.Input[bool]] = None,
                 cdc_max_batch_interval: Optional[pulumi.Input[int]] = None,
                 cdc_min_file_size: Optional[pulumi.Input[int]] = None,
                 cdc_path: Optional[pulumi.Input[str]] = None,
                 certificate_arn: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 csv_delimiter: Optional[pulumi.Input[str]] = None,
                 csv_no_sup_value: Optional[pulumi.Input[str]] = None,
                 csv_null_value: Optional[pulumi.Input[str]] = None,
                 csv_row_delimiter: Optional[pulumi.Input[str]] = None,
                 data_format: Optional[pulumi.Input[str]] = None,
                 data_page_size: Optional[pulumi.Input[int]] = None,
                 date_partition_delimiter: Optional[pulumi.Input[str]] = None,
                 date_partition_enabled: Optional[pulumi.Input[bool]] = None,
                 date_partition_sequence: Optional[pulumi.Input[str]] = None,
                 date_partition_timezone: Optional[pulumi.Input[str]] = None,
                 dict_page_size_limit: Optional[pulumi.Input[int]] = None,
                 enable_statistics: Optional[pulumi.Input[bool]] = None,
                 encoding_type: Optional[pulumi.Input[str]] = None,
                 encryption_mode: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 expected_bucket_owner: Optional[pulumi.Input[str]] = None,
                 external_table_definition: Optional[pulumi.Input[str]] = None,
                 ignore_header_rows: Optional[pulumi.Input[int]] = None,
                 include_op_for_full_load: Optional[pulumi.Input[bool]] = None,
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 max_file_size: Optional[pulumi.Input[int]] = None,
                 parquet_timestamp_in_millisecond: Optional[pulumi.Input[bool]] = None,
                 parquet_version: Optional[pulumi.Input[str]] = None,
                 preserve_transactions: Optional[pulumi.Input[bool]] = None,
                 rfc4180: Optional[pulumi.Input[bool]] = None,
                 row_group_length: Optional[pulumi.Input[int]] = None,
                 server_side_encryption_kms_key_id: Optional[pulumi.Input[str]] = None,
                 service_access_role_arn: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timestamp_column_name: Optional[pulumi.Input[str]] = None,
                 use_csv_no_sup_value: Optional[pulumi.Input[bool]] = None,
                 use_task_start_time_for_full_load_timestamp: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a S3Endpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: S3EndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a S3Endpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param S3EndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(S3EndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_column_name: Optional[pulumi.Input[bool]] = None,
                 add_trailing_padding_character: Optional[pulumi.Input[bool]] = None,
                 bucket_folder: Optional[pulumi.Input[str]] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 canned_acl_for_objects: Optional[pulumi.Input[str]] = None,
                 cdc_inserts_and_updates: Optional[pulumi.Input[bool]] = None,
                 cdc_inserts_only: Optional[pulumi.Input[bool]] = None,
                 cdc_max_batch_interval: Optional[pulumi.Input[int]] = None,
                 cdc_min_file_size: Optional[pulumi.Input[int]] = None,
                 cdc_path: Optional[pulumi.Input[str]] = None,
                 certificate_arn: Optional[pulumi.Input[str]] = None,
                 compression_type: Optional[pulumi.Input[str]] = None,
                 csv_delimiter: Optional[pulumi.Input[str]] = None,
                 csv_no_sup_value: Optional[pulumi.Input[str]] = None,
                 csv_null_value: Optional[pulumi.Input[str]] = None,
                 csv_row_delimiter: Optional[pulumi.Input[str]] = None,
                 data_format: Optional[pulumi.Input[str]] = None,
                 data_page_size: Optional[pulumi.Input[int]] = None,
                 date_partition_delimiter: Optional[pulumi.Input[str]] = None,
                 date_partition_enabled: Optional[pulumi.Input[bool]] = None,
                 date_partition_sequence: Optional[pulumi.Input[str]] = None,
                 date_partition_timezone: Optional[pulumi.Input[str]] = None,
                 dict_page_size_limit: Optional[pulumi.Input[int]] = None,
                 enable_statistics: Optional[pulumi.Input[bool]] = None,
                 encoding_type: Optional[pulumi.Input[str]] = None,
                 encryption_mode: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 expected_bucket_owner: Optional[pulumi.Input[str]] = None,
                 external_table_definition: Optional[pulumi.Input[str]] = None,
                 ignore_header_rows: Optional[pulumi.Input[int]] = None,
                 include_op_for_full_load: Optional[pulumi.Input[bool]] = None,
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 max_file_size: Optional[pulumi.Input[int]] = None,
                 parquet_timestamp_in_millisecond: Optional[pulumi.Input[bool]] = None,
                 parquet_version: Optional[pulumi.Input[str]] = None,
                 preserve_transactions: Optional[pulumi.Input[bool]] = None,
                 rfc4180: Optional[pulumi.Input[bool]] = None,
                 row_group_length: Optional[pulumi.Input[int]] = None,
                 server_side_encryption_kms_key_id: Optional[pulumi.Input[str]] = None,
                 service_access_role_arn: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timestamp_column_name: Optional[pulumi.Input[str]] = None,
                 use_csv_no_sup_value: Optional[pulumi.Input[bool]] = None,
                 use_task_start_time_for_full_load_timestamp: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = S3EndpointArgs.__new__(S3EndpointArgs)

            __props__.__dict__["add_column_name"] = add_column_name
            __props__.__dict__["add_trailing_padding_character"] = add_trailing_padding_character
            __props__.__dict__["bucket_folder"] = bucket_folder
            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            __props__.__dict__["canned_acl_for_objects"] = canned_acl_for_objects
            __props__.__dict__["cdc_inserts_and_updates"] = cdc_inserts_and_updates
            __props__.__dict__["cdc_inserts_only"] = cdc_inserts_only
            __props__.__dict__["cdc_max_batch_interval"] = cdc_max_batch_interval
            __props__.__dict__["cdc_min_file_size"] = cdc_min_file_size
            __props__.__dict__["cdc_path"] = cdc_path
            __props__.__dict__["certificate_arn"] = certificate_arn
            __props__.__dict__["compression_type"] = compression_type
            __props__.__dict__["csv_delimiter"] = csv_delimiter
            __props__.__dict__["csv_no_sup_value"] = csv_no_sup_value
            __props__.__dict__["csv_null_value"] = csv_null_value
            __props__.__dict__["csv_row_delimiter"] = csv_row_delimiter
            __props__.__dict__["data_format"] = data_format
            __props__.__dict__["data_page_size"] = data_page_size
            __props__.__dict__["date_partition_delimiter"] = date_partition_delimiter
            __props__.__dict__["date_partition_enabled"] = date_partition_enabled
            __props__.__dict__["date_partition_sequence"] = date_partition_sequence
            __props__.__dict__["date_partition_timezone"] = date_partition_timezone
            __props__.__dict__["dict_page_size_limit"] = dict_page_size_limit
            __props__.__dict__["enable_statistics"] = enable_statistics
            __props__.__dict__["encoding_type"] = encoding_type
            __props__.__dict__["encryption_mode"] = encryption_mode
            if endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_id'")
            __props__.__dict__["endpoint_id"] = endpoint_id
            if endpoint_type is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_type'")
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["expected_bucket_owner"] = expected_bucket_owner
            __props__.__dict__["external_table_definition"] = external_table_definition
            __props__.__dict__["ignore_header_rows"] = ignore_header_rows
            __props__.__dict__["include_op_for_full_load"] = include_op_for_full_load
            __props__.__dict__["kms_key_arn"] = kms_key_arn
            __props__.__dict__["max_file_size"] = max_file_size
            __props__.__dict__["parquet_timestamp_in_millisecond"] = parquet_timestamp_in_millisecond
            __props__.__dict__["parquet_version"] = parquet_version
            __props__.__dict__["preserve_transactions"] = preserve_transactions
            __props__.__dict__["rfc4180"] = rfc4180
            __props__.__dict__["row_group_length"] = row_group_length
            __props__.__dict__["server_side_encryption_kms_key_id"] = server_side_encryption_kms_key_id
            if service_access_role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'service_access_role_arn'")
            __props__.__dict__["service_access_role_arn"] = service_access_role_arn
            __props__.__dict__["ssl_mode"] = ssl_mode
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timestamp_column_name"] = timestamp_column_name
            __props__.__dict__["use_csv_no_sup_value"] = use_csv_no_sup_value
            __props__.__dict__["use_task_start_time_for_full_load_timestamp"] = use_task_start_time_for_full_load_timestamp
            __props__.__dict__["endpoint_arn"] = None
            __props__.__dict__["engine_display_name"] = None
            __props__.__dict__["external_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tags_all"] = None
        super(S3Endpoint, __self__).__init__(
            'aws:dms/s3Endpoint:S3Endpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_column_name: Optional[pulumi.Input[bool]] = None,
            add_trailing_padding_character: Optional[pulumi.Input[bool]] = None,
            bucket_folder: Optional[pulumi.Input[str]] = None,
            bucket_name: Optional[pulumi.Input[str]] = None,
            canned_acl_for_objects: Optional[pulumi.Input[str]] = None,
            cdc_inserts_and_updates: Optional[pulumi.Input[bool]] = None,
            cdc_inserts_only: Optional[pulumi.Input[bool]] = None,
            cdc_max_batch_interval: Optional[pulumi.Input[int]] = None,
            cdc_min_file_size: Optional[pulumi.Input[int]] = None,
            cdc_path: Optional[pulumi.Input[str]] = None,
            certificate_arn: Optional[pulumi.Input[str]] = None,
            compression_type: Optional[pulumi.Input[str]] = None,
            csv_delimiter: Optional[pulumi.Input[str]] = None,
            csv_no_sup_value: Optional[pulumi.Input[str]] = None,
            csv_null_value: Optional[pulumi.Input[str]] = None,
            csv_row_delimiter: Optional[pulumi.Input[str]] = None,
            data_format: Optional[pulumi.Input[str]] = None,
            data_page_size: Optional[pulumi.Input[int]] = None,
            date_partition_delimiter: Optional[pulumi.Input[str]] = None,
            date_partition_enabled: Optional[pulumi.Input[bool]] = None,
            date_partition_sequence: Optional[pulumi.Input[str]] = None,
            date_partition_timezone: Optional[pulumi.Input[str]] = None,
            dict_page_size_limit: Optional[pulumi.Input[int]] = None,
            enable_statistics: Optional[pulumi.Input[bool]] = None,
            encoding_type: Optional[pulumi.Input[str]] = None,
            encryption_mode: Optional[pulumi.Input[str]] = None,
            endpoint_arn: Optional[pulumi.Input[str]] = None,
            endpoint_id: Optional[pulumi.Input[str]] = None,
            endpoint_type: Optional[pulumi.Input[str]] = None,
            engine_display_name: Optional[pulumi.Input[str]] = None,
            expected_bucket_owner: Optional[pulumi.Input[str]] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            external_table_definition: Optional[pulumi.Input[str]] = None,
            ignore_header_rows: Optional[pulumi.Input[int]] = None,
            include_op_for_full_load: Optional[pulumi.Input[bool]] = None,
            kms_key_arn: Optional[pulumi.Input[str]] = None,
            max_file_size: Optional[pulumi.Input[int]] = None,
            parquet_timestamp_in_millisecond: Optional[pulumi.Input[bool]] = None,
            parquet_version: Optional[pulumi.Input[str]] = None,
            preserve_transactions: Optional[pulumi.Input[bool]] = None,
            rfc4180: Optional[pulumi.Input[bool]] = None,
            row_group_length: Optional[pulumi.Input[int]] = None,
            server_side_encryption_kms_key_id: Optional[pulumi.Input[str]] = None,
            service_access_role_arn: Optional[pulumi.Input[str]] = None,
            ssl_mode: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            timestamp_column_name: Optional[pulumi.Input[str]] = None,
            use_csv_no_sup_value: Optional[pulumi.Input[bool]] = None,
            use_task_start_time_for_full_load_timestamp: Optional[pulumi.Input[bool]] = None) -> 'S3Endpoint':
        """
        Get an existing S3Endpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _S3EndpointState.__new__(_S3EndpointState)

        __props__.__dict__["add_column_name"] = add_column_name
        __props__.__dict__["add_trailing_padding_character"] = add_trailing_padding_character
        __props__.__dict__["bucket_folder"] = bucket_folder
        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["canned_acl_for_objects"] = canned_acl_for_objects
        __props__.__dict__["cdc_inserts_and_updates"] = cdc_inserts_and_updates
        __props__.__dict__["cdc_inserts_only"] = cdc_inserts_only
        __props__.__dict__["cdc_max_batch_interval"] = cdc_max_batch_interval
        __props__.__dict__["cdc_min_file_size"] = cdc_min_file_size
        __props__.__dict__["cdc_path"] = cdc_path
        __props__.__dict__["certificate_arn"] = certificate_arn
        __props__.__dict__["compression_type"] = compression_type
        __props__.__dict__["csv_delimiter"] = csv_delimiter
        __props__.__dict__["csv_no_sup_value"] = csv_no_sup_value
        __props__.__dict__["csv_null_value"] = csv_null_value
        __props__.__dict__["csv_row_delimiter"] = csv_row_delimiter
        __props__.__dict__["data_format"] = data_format
        __props__.__dict__["data_page_size"] = data_page_size
        __props__.__dict__["date_partition_delimiter"] = date_partition_delimiter
        __props__.__dict__["date_partition_enabled"] = date_partition_enabled
        __props__.__dict__["date_partition_sequence"] = date_partition_sequence
        __props__.__dict__["date_partition_timezone"] = date_partition_timezone
        __props__.__dict__["dict_page_size_limit"] = dict_page_size_limit
        __props__.__dict__["enable_statistics"] = enable_statistics
        __props__.__dict__["encoding_type"] = encoding_type
        __props__.__dict__["encryption_mode"] = encryption_mode
        __props__.__dict__["endpoint_arn"] = endpoint_arn
        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["engine_display_name"] = engine_display_name
        __props__.__dict__["expected_bucket_owner"] = expected_bucket_owner
        __props__.__dict__["external_id"] = external_id
        __props__.__dict__["external_table_definition"] = external_table_definition
        __props__.__dict__["ignore_header_rows"] = ignore_header_rows
        __props__.__dict__["include_op_for_full_load"] = include_op_for_full_load
        __props__.__dict__["kms_key_arn"] = kms_key_arn
        __props__.__dict__["max_file_size"] = max_file_size
        __props__.__dict__["parquet_timestamp_in_millisecond"] = parquet_timestamp_in_millisecond
        __props__.__dict__["parquet_version"] = parquet_version
        __props__.__dict__["preserve_transactions"] = preserve_transactions
        __props__.__dict__["rfc4180"] = rfc4180
        __props__.__dict__["row_group_length"] = row_group_length
        __props__.__dict__["server_side_encryption_kms_key_id"] = server_side_encryption_kms_key_id
        __props__.__dict__["service_access_role_arn"] = service_access_role_arn
        __props__.__dict__["ssl_mode"] = ssl_mode
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["timestamp_column_name"] = timestamp_column_name
        __props__.__dict__["use_csv_no_sup_value"] = use_csv_no_sup_value
        __props__.__dict__["use_task_start_time_for_full_load_timestamp"] = use_task_start_time_for_full_load_timestamp
        return S3Endpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addColumnName")
    def add_column_name(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "add_column_name")

    @property
    @pulumi.getter(name="addTrailingPaddingCharacter")
    def add_trailing_padding_character(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "add_trailing_padding_character")

    @property
    @pulumi.getter(name="bucketFolder")
    def bucket_folder(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bucket_folder")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="cannedAclForObjects")
    def canned_acl_for_objects(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "canned_acl_for_objects")

    @property
    @pulumi.getter(name="cdcInsertsAndUpdates")
    def cdc_inserts_and_updates(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "cdc_inserts_and_updates")

    @property
    @pulumi.getter(name="cdcInsertsOnly")
    def cdc_inserts_only(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "cdc_inserts_only")

    @property
    @pulumi.getter(name="cdcMaxBatchInterval")
    def cdc_max_batch_interval(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "cdc_max_batch_interval")

    @property
    @pulumi.getter(name="cdcMinFileSize")
    def cdc_min_file_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "cdc_min_file_size")

    @property
    @pulumi.getter(name="cdcPath")
    def cdc_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cdc_path")

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate_arn")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="csvDelimiter")
    def csv_delimiter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "csv_delimiter")

    @property
    @pulumi.getter(name="csvNoSupValue")
    def csv_no_sup_value(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "csv_no_sup_value")

    @property
    @pulumi.getter(name="csvNullValue")
    def csv_null_value(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "csv_null_value")

    @property
    @pulumi.getter(name="csvRowDelimiter")
    def csv_row_delimiter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "csv_row_delimiter")

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "data_format")

    @property
    @pulumi.getter(name="dataPageSize")
    def data_page_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "data_page_size")

    @property
    @pulumi.getter(name="datePartitionDelimiter")
    def date_partition_delimiter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "date_partition_delimiter")

    @property
    @pulumi.getter(name="datePartitionEnabled")
    def date_partition_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "date_partition_enabled")

    @property
    @pulumi.getter(name="datePartitionSequence")
    def date_partition_sequence(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "date_partition_sequence")

    @property
    @pulumi.getter(name="datePartitionTimezone")
    def date_partition_timezone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "date_partition_timezone")

    @property
    @pulumi.getter(name="dictPageSizeLimit")
    def dict_page_size_limit(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "dict_page_size_limit")

    @property
    @pulumi.getter(name="enableStatistics")
    def enable_statistics(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_statistics")

    @property
    @pulumi.getter(name="encodingType")
    def encoding_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "encoding_type")

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "encryption_mode")

    @property
    @pulumi.getter(name="endpointArn")
    def endpoint_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "endpoint_arn")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="engineDisplayName")
    def engine_display_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "engine_display_name")

    @property
    @pulumi.getter(name="expectedBucketOwner")
    def expected_bucket_owner(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "expected_bucket_owner")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalTableDefinition")
    def external_table_definition(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "external_table_definition")

    @property
    @pulumi.getter(name="ignoreHeaderRows")
    def ignore_header_rows(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "ignore_header_rows")

    @property
    @pulumi.getter(name="includeOpForFullLoad")
    def include_op_for_full_load(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "include_op_for_full_load")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kms_key_arn")

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_file_size")

    @property
    @pulumi.getter(name="parquetTimestampInMillisecond")
    def parquet_timestamp_in_millisecond(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "parquet_timestamp_in_millisecond")

    @property
    @pulumi.getter(name="parquetVersion")
    def parquet_version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "parquet_version")

    @property
    @pulumi.getter(name="preserveTransactions")
    def preserve_transactions(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "preserve_transactions")

    @property
    @pulumi.getter
    def rfc4180(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "rfc4180")

    @property
    @pulumi.getter(name="rowGroupLength")
    def row_group_length(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "row_group_length")

    @property
    @pulumi.getter(name="serverSideEncryptionKmsKeyId")
    def server_side_encryption_kms_key_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "server_side_encryption_kms_key_id")

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_access_role_arn")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter(name="timestampColumnName")
    def timestamp_column_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "timestamp_column_name")

    @property
    @pulumi.getter(name="useCsvNoSupValue")
    def use_csv_no_sup_value(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "use_csv_no_sup_value")

    @property
    @pulumi.getter(name="useTaskStartTimeForFullLoadTimestamp")
    def use_task_start_time_for_full_load_timestamp(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "use_task_start_time_for_full_load_timestamp")

