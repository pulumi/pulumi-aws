# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class ReplicationSubnetGroup(pulumi.CustomResource):
    replication_subnet_group_arn: pulumi.Output[str]
    replication_subnet_group_description: pulumi.Output[str]
    """
    The description for the subnet group.
    """
    replication_subnet_group_id: pulumi.Output[str]
    """
    The name for the replication subnet group. This value is stored as a lowercase string.
    """
    subnet_ids: pulumi.Output[list]
    """
    A list of the EC2 subnet IDs for the subnet group.
    """
    tags: pulumi.Output[dict]
    """
    A mapping of tags to assign to the resource.
    """
    vpc_id: pulumi.Output[str]
    """
    The ID of the VPC the subnet group is in.
    """
    def __init__(__self__, __name__, __opts__=None, replication_subnet_group_description=None, replication_subnet_group_id=None, subnet_ids=None, tags=None):
        """
        Provides a DMS (Data Migration Service) replication subnet group resource. DMS replication subnet groups can be created, updated, deleted, and imported.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] replication_subnet_group_description: The description for the subnet group.
        :param pulumi.Input[str] replication_subnet_group_id: The name for the replication subnet group. This value is stored as a lowercase string.
        :param pulumi.Input[list] subnet_ids: A list of the EC2 subnet IDs for the subnet group.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not replication_subnet_group_description:
            raise TypeError('Missing required property replication_subnet_group_description')
        __props__['replication_subnet_group_description'] = replication_subnet_group_description

        if not replication_subnet_group_id:
            raise TypeError('Missing required property replication_subnet_group_id')
        __props__['replication_subnet_group_id'] = replication_subnet_group_id

        if not subnet_ids:
            raise TypeError('Missing required property subnet_ids')
        __props__['subnet_ids'] = subnet_ids

        __props__['tags'] = tags

        __props__['replication_subnet_group_arn'] = None
        __props__['vpc_id'] = None

        super(ReplicationSubnetGroup, __self__).__init__(
            'aws:dms/replicationSubnetGroup:ReplicationSubnetGroup',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

