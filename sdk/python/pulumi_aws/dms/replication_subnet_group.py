# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class ReplicationSubnetGroup(pulumi.CustomResource):
    """
    Provides a DMS (Data Migration Service) replication subnet group resource. DMS replication subnet groups can be created, updated, deleted, and imported.
    """
    def __init__(__self__, __name__, __opts__=None, replication_subnet_group_description=None, replication_subnet_group_id=None, subnet_ids=None, tags=None):
        """Create a ReplicationSubnetGroup resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not replication_subnet_group_description:
            raise TypeError('Missing required property replication_subnet_group_description')
        elif not isinstance(replication_subnet_group_description, basestring):
            raise TypeError('Expected property replication_subnet_group_description to be a basestring')
        __self__.replication_subnet_group_description = replication_subnet_group_description
        """
        The description for the subnet group.
        """
        __props__['replicationSubnetGroupDescription'] = replication_subnet_group_description

        if not replication_subnet_group_id:
            raise TypeError('Missing required property replication_subnet_group_id')
        elif not isinstance(replication_subnet_group_id, basestring):
            raise TypeError('Expected property replication_subnet_group_id to be a basestring')
        __self__.replication_subnet_group_id = replication_subnet_group_id
        """
        The name for the replication subnet group. This value is stored as a lowercase string.
        """
        __props__['replicationSubnetGroupId'] = replication_subnet_group_id

        if not subnet_ids:
            raise TypeError('Missing required property subnet_ids')
        elif not isinstance(subnet_ids, list):
            raise TypeError('Expected property subnet_ids to be a list')
        __self__.subnet_ids = subnet_ids
        """
        A list of the EC2 subnet IDs for the subnet group.
        """
        __props__['subnetIds'] = subnet_ids

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        __self__.replication_subnet_group_arn = pulumi.runtime.UNKNOWN
        __self__.vpc_id = pulumi.runtime.UNKNOWN
        """
        The ID of the VPC the subnet group is in.
        """

        super(ReplicationSubnetGroup, __self__).__init__(
            'aws:dms/replicationSubnetGroup:ReplicationSubnetGroup',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'replicationSubnetGroupArn' in outs:
            self.replication_subnet_group_arn = outs['replicationSubnetGroupArn']
        if 'replicationSubnetGroupDescription' in outs:
            self.replication_subnet_group_description = outs['replicationSubnetGroupDescription']
        if 'replicationSubnetGroupId' in outs:
            self.replication_subnet_group_id = outs['replicationSubnetGroupId']
        if 'subnetIds' in outs:
            self.subnet_ids = outs['subnetIds']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'vpcId' in outs:
            self.vpc_id = outs['vpcId']
