# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ServiceDnsConfig',
    'ServiceDnsConfigDnsRecord',
    'ServiceHealthCheckConfig',
    'ServiceHealthCheckCustomConfig',
    'GetServiceDnsConfigResult',
    'GetServiceDnsConfigDnsRecordResult',
    'GetServiceHealthCheckConfigResult',
    'GetServiceHealthCheckCustomConfigResult',
]

@pulumi.output_type
class ServiceDnsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsRecords":
            suggest = "dns_records"
        elif key == "namespaceId":
            suggest = "namespace_id"
        elif key == "routingPolicy":
            suggest = "routing_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDnsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDnsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDnsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_records: Sequence['outputs.ServiceDnsConfigDnsRecord'],
                 namespace_id: str,
                 routing_policy: Optional[str] = None):
        """
        :param Sequence['ServiceDnsConfigDnsRecordArgs'] dns_records: An array that contains one DnsRecord object for each resource record set.
        :param str namespace_id: The ID of the namespace to use for DNS configuration.
        :param str routing_policy: The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
        """
        ServiceDnsConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_records=dns_records,
            namespace_id=namespace_id,
            routing_policy=routing_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_records: Optional[Sequence['outputs.ServiceDnsConfigDnsRecord']] = None,
             namespace_id: Optional[str] = None,
             routing_policy: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dns_records is None and 'dnsRecords' in kwargs:
            dns_records = kwargs['dnsRecords']
        if dns_records is None:
            raise TypeError("Missing 'dns_records' argument")
        if namespace_id is None and 'namespaceId' in kwargs:
            namespace_id = kwargs['namespaceId']
        if namespace_id is None:
            raise TypeError("Missing 'namespace_id' argument")
        if routing_policy is None and 'routingPolicy' in kwargs:
            routing_policy = kwargs['routingPolicy']

        _setter("dns_records", dns_records)
        _setter("namespace_id", namespace_id)
        if routing_policy is not None:
            _setter("routing_policy", routing_policy)

    @property
    @pulumi.getter(name="dnsRecords")
    def dns_records(self) -> Sequence['outputs.ServiceDnsConfigDnsRecord']:
        """
        An array that contains one DnsRecord object for each resource record set.
        """
        return pulumi.get(self, "dns_records")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        The ID of the namespace to use for DNS configuration.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="routingPolicy")
    def routing_policy(self) -> Optional[str]:
        """
        The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
        """
        return pulumi.get(self, "routing_policy")


@pulumi.output_type
class ServiceDnsConfigDnsRecord(dict):
    def __init__(__self__, *,
                 ttl: int,
                 type: str):
        """
        :param int ttl: The amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
        :param str type: The type of the resource, which indicates the value that Amazon Route 53 returns in response to DNS queries. Valid Values: A, AAAA, SRV, CNAME
        """
        ServiceDnsConfigDnsRecord._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ttl=ttl,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ttl: Optional[int] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ttl is None:
            raise TypeError("Missing 'ttl' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("ttl", ttl)
        _setter("type", type)

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        The amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource, which indicates the value that Amazon Route 53 returns in response to DNS queries. Valid Values: A, AAAA, SRV, CNAME
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceHealthCheckConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "resourcePath":
            suggest = "resource_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceHealthCheckConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceHealthCheckConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceHealthCheckConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: Optional[int] = None,
                 resource_path: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param int failure_threshold: The number of consecutive health checks. Maximum value of 10.
        :param str resource_path: The path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
        :param str type: The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
        """
        ServiceHealthCheckConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_threshold=failure_threshold,
            resource_path=resource_path,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_threshold: Optional[int] = None,
             resource_path: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if failure_threshold is None and 'failureThreshold' in kwargs:
            failure_threshold = kwargs['failureThreshold']
        if resource_path is None and 'resourcePath' in kwargs:
            resource_path = kwargs['resourcePath']

        if failure_threshold is not None:
            _setter("failure_threshold", failure_threshold)
        if resource_path is not None:
            _setter("resource_path", resource_path)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        The number of consecutive health checks. Maximum value of 10.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[str]:
        """
        The path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
        """
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceHealthCheckCustomConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceHealthCheckCustomConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceHealthCheckCustomConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceHealthCheckCustomConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: Optional[int] = None):
        """
        :param int failure_threshold: The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
        """
        ServiceHealthCheckCustomConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_threshold=failure_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_threshold: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if failure_threshold is None and 'failureThreshold' in kwargs:
            failure_threshold = kwargs['failureThreshold']

        if failure_threshold is not None:
            _setter("failure_threshold", failure_threshold)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
        """
        return pulumi.get(self, "failure_threshold")


@pulumi.output_type
class GetServiceDnsConfigResult(dict):
    def __init__(__self__, *,
                 dns_records: Sequence['outputs.GetServiceDnsConfigDnsRecordResult'],
                 namespace_id: str,
                 routing_policy: str):
        """
        :param Sequence['GetServiceDnsConfigDnsRecordArgs'] dns_records: An array that contains one DnsRecord object for each resource record set.
        :param str namespace_id: ID of the namespace that the service belongs to.
        :param str routing_policy: Routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
        """
        GetServiceDnsConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_records=dns_records,
            namespace_id=namespace_id,
            routing_policy=routing_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_records: Optional[Sequence['outputs.GetServiceDnsConfigDnsRecordResult']] = None,
             namespace_id: Optional[str] = None,
             routing_policy: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dns_records is None and 'dnsRecords' in kwargs:
            dns_records = kwargs['dnsRecords']
        if dns_records is None:
            raise TypeError("Missing 'dns_records' argument")
        if namespace_id is None and 'namespaceId' in kwargs:
            namespace_id = kwargs['namespaceId']
        if namespace_id is None:
            raise TypeError("Missing 'namespace_id' argument")
        if routing_policy is None and 'routingPolicy' in kwargs:
            routing_policy = kwargs['routingPolicy']
        if routing_policy is None:
            raise TypeError("Missing 'routing_policy' argument")

        _setter("dns_records", dns_records)
        _setter("namespace_id", namespace_id)
        _setter("routing_policy", routing_policy)

    @property
    @pulumi.getter(name="dnsRecords")
    def dns_records(self) -> Sequence['outputs.GetServiceDnsConfigDnsRecordResult']:
        """
        An array that contains one DnsRecord object for each resource record set.
        """
        return pulumi.get(self, "dns_records")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        ID of the namespace that the service belongs to.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="routingPolicy")
    def routing_policy(self) -> str:
        """
        Routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
        """
        return pulumi.get(self, "routing_policy")


@pulumi.output_type
class GetServiceDnsConfigDnsRecordResult(dict):
    def __init__(__self__, *,
                 ttl: int,
                 type: str):
        """
        :param int ttl: Amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
        :param str type: The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
        """
        GetServiceDnsConfigDnsRecordResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ttl=ttl,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ttl: Optional[int] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ttl is None:
            raise TypeError("Missing 'ttl' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("ttl", ttl)
        _setter("type", type)

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        Amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceHealthCheckConfigResult(dict):
    def __init__(__self__, *,
                 failure_threshold: int,
                 resource_path: str,
                 type: str):
        """
        :param int failure_threshold: The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
        :param str resource_path: Path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
        :param str type: The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
        """
        GetServiceHealthCheckConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_threshold=failure_threshold,
            resource_path=resource_path,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_threshold: Optional[int] = None,
             resource_path: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if failure_threshold is None and 'failureThreshold' in kwargs:
            failure_threshold = kwargs['failureThreshold']
        if failure_threshold is None:
            raise TypeError("Missing 'failure_threshold' argument")
        if resource_path is None and 'resourcePath' in kwargs:
            resource_path = kwargs['resourcePath']
        if resource_path is None:
            raise TypeError("Missing 'resource_path' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("failure_threshold", failure_threshold)
        _setter("resource_path", resource_path)
        _setter("type", type)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        """
        The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> str:
        """
        Path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
        """
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceHealthCheckCustomConfigResult(dict):
    def __init__(__self__, *,
                 failure_threshold: int):
        """
        :param int failure_threshold: The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
        """
        GetServiceHealthCheckCustomConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_threshold=failure_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_threshold: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if failure_threshold is None and 'failureThreshold' in kwargs:
            failure_threshold = kwargs['failureThreshold']
        if failure_threshold is None:
            raise TypeError("Missing 'failure_threshold' argument")

        _setter("failure_threshold", failure_threshold)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        """
        The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
        """
        return pulumi.get(self, "failure_threshold")


