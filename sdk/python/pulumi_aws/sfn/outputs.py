# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AliasRoutingConfiguration',
    'StateMachineLoggingConfiguration',
    'StateMachineTracingConfiguration',
    'GetAliasRoutingConfigurationResult',
]

@pulumi.output_type
class AliasRoutingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stateMachineVersionArn":
            suggest = "state_machine_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AliasRoutingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AliasRoutingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AliasRoutingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 state_machine_version_arn: str,
                 weight: int):
        """
        :param str state_machine_version_arn: The Amazon Resource Name (ARN) of the state machine version.
        :param int weight: Percentage of traffic routed to the state machine version.
        """
        AliasRoutingConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            state_machine_version_arn=state_machine_version_arn,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             state_machine_version_arn: Optional[str] = None,
             weight: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if state_machine_version_arn is None and 'stateMachineVersionArn' in kwargs:
            state_machine_version_arn = kwargs['stateMachineVersionArn']
        if state_machine_version_arn is None:
            raise TypeError("Missing 'state_machine_version_arn' argument")
        if weight is None:
            raise TypeError("Missing 'weight' argument")

        _setter("state_machine_version_arn", state_machine_version_arn)
        _setter("weight", weight)

    @property
    @pulumi.getter(name="stateMachineVersionArn")
    def state_machine_version_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the state machine version.
        """
        return pulumi.get(self, "state_machine_version_arn")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Percentage of traffic routed to the state machine version.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class StateMachineLoggingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeExecutionData":
            suggest = "include_execution_data"
        elif key == "logDestination":
            suggest = "log_destination"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StateMachineLoggingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StateMachineLoggingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StateMachineLoggingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_execution_data: Optional[bool] = None,
                 level: Optional[str] = None,
                 log_destination: Optional[str] = None):
        """
        :param bool include_execution_data: Determines whether execution data is included in your log. When set to `false`, data is excluded.
        :param str level: Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
        :param str log_destination: Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
        """
        StateMachineLoggingConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            include_execution_data=include_execution_data,
            level=level,
            log_destination=log_destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             include_execution_data: Optional[bool] = None,
             level: Optional[str] = None,
             log_destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if include_execution_data is None and 'includeExecutionData' in kwargs:
            include_execution_data = kwargs['includeExecutionData']
        if log_destination is None and 'logDestination' in kwargs:
            log_destination = kwargs['logDestination']

        if include_execution_data is not None:
            _setter("include_execution_data", include_execution_data)
        if level is not None:
            _setter("level", level)
        if log_destination is not None:
            _setter("log_destination", log_destination)

    @property
    @pulumi.getter(name="includeExecutionData")
    def include_execution_data(self) -> Optional[bool]:
        """
        Determines whether execution data is included in your log. When set to `false`, data is excluded.
        """
        return pulumi.get(self, "include_execution_data")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Defines which category of execution history events are logged. Valid values: `ALL`, `ERROR`, `FATAL`, `OFF`
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="logDestination")
    def log_destination(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of a CloudWatch log group. Make sure the State Machine has the correct IAM policies for logging. The ARN must end with `:*`
        """
        return pulumi.get(self, "log_destination")


@pulumi.output_type
class StateMachineTracingConfiguration(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
        """
        StateMachineTracingConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        When set to `true`, AWS X-Ray tracing is enabled. Make sure the State Machine has the correct IAM policies for logging. See the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html) for details.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetAliasRoutingConfigurationResult(dict):
    def __init__(__self__, *,
                 state_machine_version_arn: str,
                 weight: int):
        GetAliasRoutingConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            state_machine_version_arn=state_machine_version_arn,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             state_machine_version_arn: Optional[str] = None,
             weight: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if state_machine_version_arn is None and 'stateMachineVersionArn' in kwargs:
            state_machine_version_arn = kwargs['stateMachineVersionArn']
        if state_machine_version_arn is None:
            raise TypeError("Missing 'state_machine_version_arn' argument")
        if weight is None:
            raise TypeError("Missing 'weight' argument")

        _setter("state_machine_version_arn", state_machine_version_arn)
        _setter("weight", weight)

    @property
    @pulumi.getter(name="stateMachineVersionArn")
    def state_machine_version_arn(self) -> str:
        return pulumi.get(self, "state_machine_version_arn")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


