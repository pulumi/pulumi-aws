# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DirectoryBucketAccessPointScopeArgs', 'DirectoryBucketAccessPointScope']

@pulumi.input_type
class DirectoryBucketAccessPointScopeArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[builtins.str],
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input['DirectoryBucketAccessPointScopeScopeArgs']] = None):
        """
        The set of arguments for constructing a DirectoryBucketAccessPointScope resource.
        :param pulumi.Input[builtins.str] account_id: The AWS account ID that owns the specified access point.
        :param pulumi.Input[builtins.str] name: The name of the access point that you want to apply the scope to.
        :param pulumi.Input['DirectoryBucketAccessPointScopeScopeArgs'] scope: . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
        """
        pulumi.set(__self__, "account_id", account_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[builtins.str]:
        """
        The AWS account ID that owns the specified access point.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the access point that you want to apply the scope to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['DirectoryBucketAccessPointScopeScopeArgs']]:
        """
        . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['DirectoryBucketAccessPointScopeScopeArgs']]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _DirectoryBucketAccessPointScopeState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input['DirectoryBucketAccessPointScopeScopeArgs']] = None):
        """
        Input properties used for looking up and filtering DirectoryBucketAccessPointScope resources.
        :param pulumi.Input[builtins.str] account_id: The AWS account ID that owns the specified access point.
        :param pulumi.Input[builtins.str] name: The name of the access point that you want to apply the scope to.
        :param pulumi.Input['DirectoryBucketAccessPointScopeScopeArgs'] scope: . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The AWS account ID that owns the specified access point.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the access point that you want to apply the scope to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['DirectoryBucketAccessPointScopeScopeArgs']]:
        """
        . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['DirectoryBucketAccessPointScopeScopeArgs']]):
        pulumi.set(self, "scope", value)


@pulumi.type_token("aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope")
class DirectoryBucketAccessPointScope(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input[Union['DirectoryBucketAccessPointScopeScopeArgs', 'DirectoryBucketAccessPointScopeScopeArgsDict']]] = None,
                 __props__=None):
        """
        ## Example Usage

        ### S3 Access Point Scope for a directory bucket in an AWS Local Zone

        ```python
        import pulumi
        import pulumi_aws as aws

        available = aws.get_availability_zones(state="available")
        example = aws.s3.DirectoryBucket("example",
            bucket="example--zoneId--x-s3",
            location={
                "name": available.zone_ids[0],
            })
        example_access_point = aws.s3.AccessPoint("example",
            bucket=example.id,
            name="example--zoneId--xa-s3")
        example_directory_bucket_access_point_scope = aws.s3control.DirectoryBucketAccessPointScope("example",
            name="example--zoneId--xa-s3",
            account_id="123456789012",
            scope={
                "permissions": [
                    "GetObject",
                    "ListBucket",
                ],
                "prefixes": [
                    "myobject1.csv",
                    "myobject2*",
                ],
            })
        ```

        ## Import

        Using `pulumi import`, import Access Point Scope using access point name and AWS account ID separated by a colon (`,`). For example:

        ```sh
        $ pulumi import aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope example example--zoneid--xa-s3,123456789012
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: The AWS account ID that owns the specified access point.
        :param pulumi.Input[builtins.str] name: The name of the access point that you want to apply the scope to.
        :param pulumi.Input[Union['DirectoryBucketAccessPointScopeScopeArgs', 'DirectoryBucketAccessPointScopeScopeArgsDict']] scope: . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DirectoryBucketAccessPointScopeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ### S3 Access Point Scope for a directory bucket in an AWS Local Zone

        ```python
        import pulumi
        import pulumi_aws as aws

        available = aws.get_availability_zones(state="available")
        example = aws.s3.DirectoryBucket("example",
            bucket="example--zoneId--x-s3",
            location={
                "name": available.zone_ids[0],
            })
        example_access_point = aws.s3.AccessPoint("example",
            bucket=example.id,
            name="example--zoneId--xa-s3")
        example_directory_bucket_access_point_scope = aws.s3control.DirectoryBucketAccessPointScope("example",
            name="example--zoneId--xa-s3",
            account_id="123456789012",
            scope={
                "permissions": [
                    "GetObject",
                    "ListBucket",
                ],
                "prefixes": [
                    "myobject1.csv",
                    "myobject2*",
                ],
            })
        ```

        ## Import

        Using `pulumi import`, import Access Point Scope using access point name and AWS account ID separated by a colon (`,`). For example:

        ```sh
        $ pulumi import aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope example example--zoneid--xa-s3,123456789012
        ```

        :param str resource_name: The name of the resource.
        :param DirectoryBucketAccessPointScopeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DirectoryBucketAccessPointScopeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input[Union['DirectoryBucketAccessPointScopeScopeArgs', 'DirectoryBucketAccessPointScopeScopeArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DirectoryBucketAccessPointScopeArgs.__new__(DirectoryBucketAccessPointScopeArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["name"] = name
            __props__.__dict__["scope"] = scope
        super(DirectoryBucketAccessPointScope, __self__).__init__(
            'aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            scope: Optional[pulumi.Input[Union['DirectoryBucketAccessPointScopeScopeArgs', 'DirectoryBucketAccessPointScopeScopeArgsDict']]] = None) -> 'DirectoryBucketAccessPointScope':
        """
        Get an existing DirectoryBucketAccessPointScope resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: The AWS account ID that owns the specified access point.
        :param pulumi.Input[builtins.str] name: The name of the access point that you want to apply the scope to.
        :param pulumi.Input[Union['DirectoryBucketAccessPointScopeScopeArgs', 'DirectoryBucketAccessPointScopeScopeArgsDict']] scope: . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DirectoryBucketAccessPointScopeState.__new__(_DirectoryBucketAccessPointScopeState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["name"] = name
        __props__.__dict__["scope"] = scope
        return DirectoryBucketAccessPointScope(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.str]:
        """
        The AWS account ID that owns the specified access point.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the access point that you want to apply the scope to.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional['outputs.DirectoryBucketAccessPointScopeScope']]:
        """
        . Scope is used to restrict access to specific prefixes, API operations, or a combination of both. To remove the `scope`, set it to `{permissions=[] prefixes=[]}`. The default scope is `{permissions=[] prefixes=[]}`.
        """
        return pulumi.get(self, "scope")

