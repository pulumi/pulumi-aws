# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BucketLifecycleConfigurationRuleArgs',
    'BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs',
    'BucketLifecycleConfigurationRuleExpirationArgs',
    'BucketLifecycleConfigurationRuleFilterArgs',
    'MultiRegionAccessPointDetailsArgs',
    'MultiRegionAccessPointDetailsPublicAccessBlockArgs',
    'MultiRegionAccessPointDetailsRegionArgs',
    'MultiRegionAccessPointPolicyDetailsArgs',
    'ObjectLambdaAccessPointConfigurationArgs',
    'ObjectLambdaAccessPointConfigurationTransformationConfigurationArgs',
    'ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationArgs',
    'ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaArgs',
    'StorageLensConfigurationStorageLensConfigurationArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaArgs',
    'StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationAwsOrgArgs',
    'StorageLensConfigurationStorageLensConfigurationDataExportArgs',
    'StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs',
    'StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs',
    'StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs',
    'StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsArgs',
    'StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3Args',
    'StorageLensConfigurationStorageLensConfigurationExcludeArgs',
    'StorageLensConfigurationStorageLensConfigurationIncludeArgs',
]

@pulumi.input_type
class BucketLifecycleConfigurationRuleArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 abort_incomplete_multipart_upload: Optional[pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs']] = None,
                 expiration: Optional[pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs']] = None,
                 filter: Optional[pulumi.Input['BucketLifecycleConfigurationRuleFilterArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Unique identifier for the rule.
        :param pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs'] abort_incomplete_multipart_upload: Configuration block containing settings for abort incomplete multipart upload.
        :param pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs'] expiration: Configuration block containing settings for expiration of objects.
        :param pulumi.Input['BucketLifecycleConfigurationRuleFilterArgs'] filter: Configuration block containing settings for filtering.
        :param pulumi.Input[str] status: Status of the rule. Valid values: `Enabled` and `Disabled`. Defaults to `Enabled`.
        """
        BucketLifecycleConfigurationRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            abort_incomplete_multipart_upload=abort_incomplete_multipart_upload,
            expiration=expiration,
            filter=filter,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[pulumi.Input[str]] = None,
             abort_incomplete_multipart_upload: Optional[pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs']] = None,
             expiration: Optional[pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs']] = None,
             filter: Optional[pulumi.Input['BucketLifecycleConfigurationRuleFilterArgs']] = None,
             status: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if abort_incomplete_multipart_upload is None and 'abortIncompleteMultipartUpload' in kwargs:
            abort_incomplete_multipart_upload = kwargs['abortIncompleteMultipartUpload']

        _setter("id", id)
        if abort_incomplete_multipart_upload is not None:
            _setter("abort_incomplete_multipart_upload", abort_incomplete_multipart_upload)
        if expiration is not None:
            _setter("expiration", expiration)
        if filter is not None:
            _setter("filter", filter)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Unique identifier for the rule.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="abortIncompleteMultipartUpload")
    def abort_incomplete_multipart_upload(self) -> Optional[pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs']]:
        """
        Configuration block containing settings for abort incomplete multipart upload.
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload")

    @abort_incomplete_multipart_upload.setter
    def abort_incomplete_multipart_upload(self, value: Optional[pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs']]):
        pulumi.set(self, "abort_incomplete_multipart_upload", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs']]:
        """
        Configuration block containing settings for expiration of objects.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketLifecycleConfigurationRuleFilterArgs']]:
        """
        Configuration block containing settings for filtering.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketLifecycleConfigurationRuleFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the rule. Valid values: `Enabled` and `Disabled`. Defaults to `Enabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs:
    def __init__(__self__, *,
                 days_after_initiation: pulumi.Input[int]):
        """
        :param pulumi.Input[int] days_after_initiation: Number of days after which Amazon S3 aborts an incomplete multipart upload.
        """
        BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days_after_initiation=days_after_initiation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days_after_initiation: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if days_after_initiation is None and 'daysAfterInitiation' in kwargs:
            days_after_initiation = kwargs['daysAfterInitiation']
        if days_after_initiation is None:
            raise TypeError("Missing 'days_after_initiation' argument")

        _setter("days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> pulumi.Input[int]:
        """
        Number of days after which Amazon S3 aborts an incomplete multipart upload.
        """
        return pulumi.get(self, "days_after_initiation")

    @days_after_initiation.setter
    def days_after_initiation(self, value: pulumi.Input[int]):
        pulumi.set(self, "days_after_initiation", value)


@pulumi.input_type
class BucketLifecycleConfigurationRuleExpirationArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[int]] = None,
                 expired_object_delete_marker: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] date: Date the object is to be deleted. Should be in `YYYY-MM-DD` date format, e.g., `2020-09-30`.
        :param pulumi.Input[int] days: Number of days before the object is to be deleted.
        :param pulumi.Input[bool] expired_object_delete_marker: Enable to remove a delete marker with no noncurrent versions. Cannot be specified with `date` or `days`.
        """
        BucketLifecycleConfigurationRuleExpirationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date=date,
            days=days,
            expired_object_delete_marker=expired_object_delete_marker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date: Optional[pulumi.Input[str]] = None,
             days: Optional[pulumi.Input[int]] = None,
             expired_object_delete_marker: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if expired_object_delete_marker is None and 'expiredObjectDeleteMarker' in kwargs:
            expired_object_delete_marker = kwargs['expiredObjectDeleteMarker']

        if date is not None:
            _setter("date", date)
        if days is not None:
            _setter("days", days)
        if expired_object_delete_marker is not None:
            _setter("expired_object_delete_marker", expired_object_delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        """
        Date the object is to be deleted. Should be in `YYYY-MM-DD` date format, e.g., `2020-09-30`.
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days before the object is to be deleted.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="expiredObjectDeleteMarker")
    def expired_object_delete_marker(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to remove a delete marker with no noncurrent versions. Cannot be specified with `date` or `days`.
        """
        return pulumi.get(self, "expired_object_delete_marker")

    @expired_object_delete_marker.setter
    def expired_object_delete_marker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expired_object_delete_marker", value)


@pulumi.input_type
class BucketLifecycleConfigurationRuleFilterArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] prefix: Object prefix for rule filtering.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of object tags for rule filtering.
        """
        BucketLifecycleConfigurationRuleFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix=prefix,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if prefix is not None:
            _setter("prefix", prefix)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Object prefix for rule filtering.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of object tags for rule filtering.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class MultiRegionAccessPointDetailsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 regions: pulumi.Input[Sequence[pulumi.Input['MultiRegionAccessPointDetailsRegionArgs']]],
                 public_access_block: Optional[pulumi.Input['MultiRegionAccessPointDetailsPublicAccessBlockArgs']] = None):
        MultiRegionAccessPointDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            regions=regions,
            public_access_block=public_access_block,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             regions: Optional[pulumi.Input[Sequence[pulumi.Input['MultiRegionAccessPointDetailsRegionArgs']]]] = None,
             public_access_block: Optional[pulumi.Input['MultiRegionAccessPointDetailsPublicAccessBlockArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if regions is None:
            raise TypeError("Missing 'regions' argument")
        if public_access_block is None and 'publicAccessBlock' in kwargs:
            public_access_block = kwargs['publicAccessBlock']

        _setter("name", name)
        _setter("regions", regions)
        if public_access_block is not None:
            _setter("public_access_block", public_access_block)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Input[Sequence[pulumi.Input['MultiRegionAccessPointDetailsRegionArgs']]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: pulumi.Input[Sequence[pulumi.Input['MultiRegionAccessPointDetailsRegionArgs']]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="publicAccessBlock")
    def public_access_block(self) -> Optional[pulumi.Input['MultiRegionAccessPointDetailsPublicAccessBlockArgs']]:
        return pulumi.get(self, "public_access_block")

    @public_access_block.setter
    def public_access_block(self, value: Optional[pulumi.Input['MultiRegionAccessPointDetailsPublicAccessBlockArgs']]):
        pulumi.set(self, "public_access_block", value)


@pulumi.input_type
class MultiRegionAccessPointDetailsPublicAccessBlockArgs:
    def __init__(__self__, *,
                 block_public_acls: Optional[pulumi.Input[bool]] = None,
                 block_public_policy: Optional[pulumi.Input[bool]] = None,
                 ignore_public_acls: Optional[pulumi.Input[bool]] = None,
                 restrict_public_buckets: Optional[pulumi.Input[bool]] = None):
        MultiRegionAccessPointDetailsPublicAccessBlockArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_public_acls=block_public_acls,
            block_public_policy=block_public_policy,
            ignore_public_acls=ignore_public_acls,
            restrict_public_buckets=restrict_public_buckets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_public_acls: Optional[pulumi.Input[bool]] = None,
             block_public_policy: Optional[pulumi.Input[bool]] = None,
             ignore_public_acls: Optional[pulumi.Input[bool]] = None,
             restrict_public_buckets: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_public_acls is None and 'blockPublicAcls' in kwargs:
            block_public_acls = kwargs['blockPublicAcls']
        if block_public_policy is None and 'blockPublicPolicy' in kwargs:
            block_public_policy = kwargs['blockPublicPolicy']
        if ignore_public_acls is None and 'ignorePublicAcls' in kwargs:
            ignore_public_acls = kwargs['ignorePublicAcls']
        if restrict_public_buckets is None and 'restrictPublicBuckets' in kwargs:
            restrict_public_buckets = kwargs['restrictPublicBuckets']

        if block_public_acls is not None:
            _setter("block_public_acls", block_public_acls)
        if block_public_policy is not None:
            _setter("block_public_policy", block_public_policy)
        if ignore_public_acls is not None:
            _setter("ignore_public_acls", ignore_public_acls)
        if restrict_public_buckets is not None:
            _setter("restrict_public_buckets", restrict_public_buckets)

    @property
    @pulumi.getter(name="blockPublicAcls")
    def block_public_acls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_public_acls")

    @block_public_acls.setter
    def block_public_acls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_public_acls", value)

    @property
    @pulumi.getter(name="blockPublicPolicy")
    def block_public_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_public_policy")

    @block_public_policy.setter
    def block_public_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_public_policy", value)

    @property
    @pulumi.getter(name="ignorePublicAcls")
    def ignore_public_acls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_public_acls")

    @ignore_public_acls.setter
    def ignore_public_acls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_public_acls", value)

    @property
    @pulumi.getter(name="restrictPublicBuckets")
    def restrict_public_buckets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "restrict_public_buckets")

    @restrict_public_buckets.setter
    def restrict_public_buckets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_public_buckets", value)


@pulumi.input_type
class MultiRegionAccessPointDetailsRegionArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 bucket_account_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        MultiRegionAccessPointDetailsRegionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            bucket_account_id=bucket_account_id,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             bucket_account_id: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if bucket_account_id is None and 'bucketAccountId' in kwargs:
            bucket_account_id = kwargs['bucketAccountId']

        _setter("bucket", bucket)
        if bucket_account_id is not None:
            _setter("bucket_account_id", bucket_account_id)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketAccountId")
    def bucket_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_account_id")

    @bucket_account_id.setter
    def bucket_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_account_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class MultiRegionAccessPointPolicyDetailsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 policy: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the Multi-Region Access Point.
        :param pulumi.Input[str] policy: A valid JSON document that specifies the policy that you want to associate with this Multi-Region Access Point. Once applied, the policy can be edited, but not deleted. For more information, see the documentation on [Multi-Region Access Point Permissions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointPermissions.html).
               
               > **NOTE:** When you update the `policy`, the update is first listed as the proposed policy. After the update is finished and all Regions have been updated, the proposed policy is listed as the established policy. If both policies have the same version number, the proposed policy is the established policy.
        """
        MultiRegionAccessPointPolicyDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            policy=policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if policy is None:
            raise TypeError("Missing 'policy' argument")

        _setter("name", name)
        _setter("policy", policy)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Multi-Region Access Point.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input[str]:
        """
        A valid JSON document that specifies the policy that you want to associate with this Multi-Region Access Point. Once applied, the policy can be edited, but not deleted. For more information, see the documentation on [Multi-Region Access Point Permissions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointPermissions.html).

        > **NOTE:** When you update the `policy`, the update is first listed as the proposed policy. After the update is finished and all Regions have been updated, the proposed policy is listed as the established policy. If both policies have the same version number, the proposed policy is the established policy.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy", value)


@pulumi.input_type
class ObjectLambdaAccessPointConfigurationArgs:
    def __init__(__self__, *,
                 supporting_access_point: pulumi.Input[str],
                 transformation_configurations: pulumi.Input[Sequence[pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationArgs']]],
                 allowed_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_watch_metrics_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] supporting_access_point: Standard access point associated with the Object Lambda Access Point.
        :param pulumi.Input[Sequence[pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationArgs']]] transformation_configurations: List of transformation configurations for the Object Lambda Access Point. See Transformation Configuration below for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_features: Allowed features. Valid values: `GetObject-Range`, `GetObject-PartNumber`.
        :param pulumi.Input[bool] cloud_watch_metrics_enabled: Whether or not the CloudWatch metrics configuration is enabled.
        """
        ObjectLambdaAccessPointConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            supporting_access_point=supporting_access_point,
            transformation_configurations=transformation_configurations,
            allowed_features=allowed_features,
            cloud_watch_metrics_enabled=cloud_watch_metrics_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             supporting_access_point: Optional[pulumi.Input[str]] = None,
             transformation_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationArgs']]]] = None,
             allowed_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             cloud_watch_metrics_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if supporting_access_point is None and 'supportingAccessPoint' in kwargs:
            supporting_access_point = kwargs['supportingAccessPoint']
        if supporting_access_point is None:
            raise TypeError("Missing 'supporting_access_point' argument")
        if transformation_configurations is None and 'transformationConfigurations' in kwargs:
            transformation_configurations = kwargs['transformationConfigurations']
        if transformation_configurations is None:
            raise TypeError("Missing 'transformation_configurations' argument")
        if allowed_features is None and 'allowedFeatures' in kwargs:
            allowed_features = kwargs['allowedFeatures']
        if cloud_watch_metrics_enabled is None and 'cloudWatchMetricsEnabled' in kwargs:
            cloud_watch_metrics_enabled = kwargs['cloudWatchMetricsEnabled']

        _setter("supporting_access_point", supporting_access_point)
        _setter("transformation_configurations", transformation_configurations)
        if allowed_features is not None:
            _setter("allowed_features", allowed_features)
        if cloud_watch_metrics_enabled is not None:
            _setter("cloud_watch_metrics_enabled", cloud_watch_metrics_enabled)

    @property
    @pulumi.getter(name="supportingAccessPoint")
    def supporting_access_point(self) -> pulumi.Input[str]:
        """
        Standard access point associated with the Object Lambda Access Point.
        """
        return pulumi.get(self, "supporting_access_point")

    @supporting_access_point.setter
    def supporting_access_point(self, value: pulumi.Input[str]):
        pulumi.set(self, "supporting_access_point", value)

    @property
    @pulumi.getter(name="transformationConfigurations")
    def transformation_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationArgs']]]:
        """
        List of transformation configurations for the Object Lambda Access Point. See Transformation Configuration below for more details.
        """
        return pulumi.get(self, "transformation_configurations")

    @transformation_configurations.setter
    def transformation_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationArgs']]]):
        pulumi.set(self, "transformation_configurations", value)

    @property
    @pulumi.getter(name="allowedFeatures")
    def allowed_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allowed features. Valid values: `GetObject-Range`, `GetObject-PartNumber`.
        """
        return pulumi.get(self, "allowed_features")

    @allowed_features.setter
    def allowed_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_features", value)

    @property
    @pulumi.getter(name="cloudWatchMetricsEnabled")
    def cloud_watch_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the CloudWatch metrics configuration is enabled.
        """
        return pulumi.get(self, "cloud_watch_metrics_enabled")

    @cloud_watch_metrics_enabled.setter
    def cloud_watch_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_watch_metrics_enabled", value)


@pulumi.input_type
class ObjectLambdaAccessPointConfigurationTransformationConfigurationArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 content_transformation: pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationArgs']):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: The actions of an Object Lambda Access Point configuration. Valid values: `GetObject`.
        :param pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationArgs'] content_transformation: The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
        """
        ObjectLambdaAccessPointConfigurationTransformationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            content_transformation=content_transformation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             content_transformation: Optional[pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if actions is None:
            raise TypeError("Missing 'actions' argument")
        if content_transformation is None and 'contentTransformation' in kwargs:
            content_transformation = kwargs['contentTransformation']
        if content_transformation is None:
            raise TypeError("Missing 'content_transformation' argument")

        _setter("actions", actions)
        _setter("content_transformation", content_transformation)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The actions of an Object Lambda Access Point configuration. Valid values: `GetObject`.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="contentTransformation")
    def content_transformation(self) -> pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationArgs']:
        """
        The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
        """
        return pulumi.get(self, "content_transformation")

    @content_transformation.setter
    def content_transformation(self, value: pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationArgs']):
        pulumi.set(self, "content_transformation", value)


@pulumi.input_type
class ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationArgs:
    def __init__(__self__, *,
                 aws_lambda: pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaArgs']):
        """
        :param pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaArgs'] aws_lambda: Configuration for an AWS Lambda function. See AWS Lambda below for more details.
        """
        ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_lambda=aws_lambda,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_lambda: Optional[pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if aws_lambda is None and 'awsLambda' in kwargs:
            aws_lambda = kwargs['awsLambda']
        if aws_lambda is None:
            raise TypeError("Missing 'aws_lambda' argument")

        _setter("aws_lambda", aws_lambda)

    @property
    @pulumi.getter(name="awsLambda")
    def aws_lambda(self) -> pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaArgs']:
        """
        Configuration for an AWS Lambda function. See AWS Lambda below for more details.
        """
        return pulumi.get(self, "aws_lambda")

    @aws_lambda.setter
    def aws_lambda(self, value: pulumi.Input['ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaArgs']):
        pulumi.set(self, "aws_lambda", value)


@pulumi.input_type
class ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaArgs:
    def __init__(__self__, *,
                 function_arn: pulumi.Input[str],
                 function_payload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] function_arn: The Amazon Resource Name (ARN) of the AWS Lambda function.
        :param pulumi.Input[str] function_payload: Additional JSON that provides supplemental data to the Lambda function used to transform objects.
        """
        ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_arn=function_arn,
            function_payload=function_payload,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_arn: Optional[pulumi.Input[str]] = None,
             function_payload: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if function_arn is None and 'functionArn' in kwargs:
            function_arn = kwargs['functionArn']
        if function_arn is None:
            raise TypeError("Missing 'function_arn' argument")
        if function_payload is None and 'functionPayload' in kwargs:
            function_payload = kwargs['functionPayload']

        _setter("function_arn", function_arn)
        if function_payload is not None:
            _setter("function_payload", function_payload)

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the AWS Lambda function.
        """
        return pulumi.get(self, "function_arn")

    @function_arn.setter
    def function_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_arn", value)

    @property
    @pulumi.getter(name="functionPayload")
    def function_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Additional JSON that provides supplemental data to the Lambda function used to transform objects.
        """
        return pulumi.get(self, "function_payload")

    @function_payload.setter
    def function_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_payload", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationArgs:
    def __init__(__self__, *,
                 account_level: pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelArgs'],
                 enabled: pulumi.Input[bool],
                 aws_org: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAwsOrgArgs']] = None,
                 data_export: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportArgs']] = None,
                 exclude: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationExcludeArgs']] = None,
                 include: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationIncludeArgs']] = None):
        """
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelArgs'] account_level: The account-level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
        :param pulumi.Input[bool] enabled: Whether the S3 Storage Lens configuration is enabled.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAwsOrgArgs'] aws_org: The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportArgs'] data_export: Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationExcludeArgs'] exclude: What is excluded in this configuration. Conflicts with `include`. See Exclude below for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationIncludeArgs'] include: What is included in this configuration. Conflicts with `exclude`. See Include below for more details.
        """
        StorageLensConfigurationStorageLensConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_level=account_level,
            enabled=enabled,
            aws_org=aws_org,
            data_export=data_export,
            exclude=exclude,
            include=include,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_level: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelArgs']] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             aws_org: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAwsOrgArgs']] = None,
             data_export: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportArgs']] = None,
             exclude: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationExcludeArgs']] = None,
             include: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationIncludeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if account_level is None and 'accountLevel' in kwargs:
            account_level = kwargs['accountLevel']
        if account_level is None:
            raise TypeError("Missing 'account_level' argument")
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if aws_org is None and 'awsOrg' in kwargs:
            aws_org = kwargs['awsOrg']
        if data_export is None and 'dataExport' in kwargs:
            data_export = kwargs['dataExport']

        _setter("account_level", account_level)
        _setter("enabled", enabled)
        if aws_org is not None:
            _setter("aws_org", aws_org)
        if data_export is not None:
            _setter("data_export", data_export)
        if exclude is not None:
            _setter("exclude", exclude)
        if include is not None:
            _setter("include", include)

    @property
    @pulumi.getter(name="accountLevel")
    def account_level(self) -> pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelArgs']:
        """
        The account-level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
        """
        return pulumi.get(self, "account_level")

    @account_level.setter
    def account_level(self, value: pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelArgs']):
        pulumi.set(self, "account_level", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the S3 Storage Lens configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="awsOrg")
    def aws_org(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAwsOrgArgs']]:
        """
        The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
        """
        return pulumi.get(self, "aws_org")

    @aws_org.setter
    def aws_org(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAwsOrgArgs']]):
        pulumi.set(self, "aws_org", value)

    @property
    @pulumi.getter(name="dataExport")
    def data_export(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportArgs']]:
        """
        Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
        """
        return pulumi.get(self, "data_export")

    @data_export.setter
    def data_export(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportArgs']]):
        pulumi.set(self, "data_export", value)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationExcludeArgs']]:
        """
        What is excluded in this configuration. Conflicts with `include`. See Exclude below for more details.
        """
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationExcludeArgs']]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationIncludeArgs']]:
        """
        What is included in this configuration. Conflicts with `exclude`. See Include below for more details.
        """
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationIncludeArgs']]):
        pulumi.set(self, "include", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelArgs:
    def __init__(__self__, *,
                 bucket_level: pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs'],
                 activity_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs']] = None,
                 advanced_cost_optimization_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetricsArgs']] = None,
                 advanced_data_protection_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetricsArgs']] = None,
                 detailed_status_code_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetricsArgs']] = None):
        """
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs'] bucket_level: S3 Storage Lens bucket-level configuration. See Bucket Level below for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs'] activity_metrics: S3 Storage Lens activity metrics. See Activity Metrics below for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetricsArgs'] advanced_cost_optimization_metrics: Advanced cost-optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetricsArgs'] advanced_data_protection_metrics: Advanced data-protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetricsArgs'] detailed_status_code_metrics: Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_level=bucket_level,
            activity_metrics=activity_metrics,
            advanced_cost_optimization_metrics=advanced_cost_optimization_metrics,
            advanced_data_protection_metrics=advanced_data_protection_metrics,
            detailed_status_code_metrics=detailed_status_code_metrics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_level: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs']] = None,
             activity_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs']] = None,
             advanced_cost_optimization_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetricsArgs']] = None,
             advanced_data_protection_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetricsArgs']] = None,
             detailed_status_code_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetricsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket_level is None and 'bucketLevel' in kwargs:
            bucket_level = kwargs['bucketLevel']
        if bucket_level is None:
            raise TypeError("Missing 'bucket_level' argument")
        if activity_metrics is None and 'activityMetrics' in kwargs:
            activity_metrics = kwargs['activityMetrics']
        if advanced_cost_optimization_metrics is None and 'advancedCostOptimizationMetrics' in kwargs:
            advanced_cost_optimization_metrics = kwargs['advancedCostOptimizationMetrics']
        if advanced_data_protection_metrics is None and 'advancedDataProtectionMetrics' in kwargs:
            advanced_data_protection_metrics = kwargs['advancedDataProtectionMetrics']
        if detailed_status_code_metrics is None and 'detailedStatusCodeMetrics' in kwargs:
            detailed_status_code_metrics = kwargs['detailedStatusCodeMetrics']

        _setter("bucket_level", bucket_level)
        if activity_metrics is not None:
            _setter("activity_metrics", activity_metrics)
        if advanced_cost_optimization_metrics is not None:
            _setter("advanced_cost_optimization_metrics", advanced_cost_optimization_metrics)
        if advanced_data_protection_metrics is not None:
            _setter("advanced_data_protection_metrics", advanced_data_protection_metrics)
        if detailed_status_code_metrics is not None:
            _setter("detailed_status_code_metrics", detailed_status_code_metrics)

    @property
    @pulumi.getter(name="bucketLevel")
    def bucket_level(self) -> pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs']:
        """
        S3 Storage Lens bucket-level configuration. See Bucket Level below for more details.
        """
        return pulumi.get(self, "bucket_level")

    @bucket_level.setter
    def bucket_level(self, value: pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs']):
        pulumi.set(self, "bucket_level", value)

    @property
    @pulumi.getter(name="activityMetrics")
    def activity_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs']]:
        """
        S3 Storage Lens activity metrics. See Activity Metrics below for more details.
        """
        return pulumi.get(self, "activity_metrics")

    @activity_metrics.setter
    def activity_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs']]):
        pulumi.set(self, "activity_metrics", value)

    @property
    @pulumi.getter(name="advancedCostOptimizationMetrics")
    def advanced_cost_optimization_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetricsArgs']]:
        """
        Advanced cost-optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
        """
        return pulumi.get(self, "advanced_cost_optimization_metrics")

    @advanced_cost_optimization_metrics.setter
    def advanced_cost_optimization_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetricsArgs']]):
        pulumi.set(self, "advanced_cost_optimization_metrics", value)

    @property
    @pulumi.getter(name="advancedDataProtectionMetrics")
    def advanced_data_protection_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetricsArgs']]:
        """
        Advanced data-protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
        """
        return pulumi.get(self, "advanced_data_protection_metrics")

    @advanced_data_protection_metrics.setter
    def advanced_data_protection_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetricsArgs']]):
        pulumi.set(self, "advanced_data_protection_metrics", value)

    @property
    @pulumi.getter(name="detailedStatusCodeMetrics")
    def detailed_status_code_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetricsArgs']]:
        """
        Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
        """
        return pulumi.get(self, "detailed_status_code_metrics")

    @detailed_status_code_metrics.setter
    def detailed_status_code_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetricsArgs']]):
        pulumi.set(self, "detailed_status_code_metrics", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether the activity metrics are enabled.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the activity metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether advanced cost-optimization metrics are enabled.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether advanced cost-optimization metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether advanced data-protection metrics are enabled.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether advanced data-protection metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs:
    def __init__(__self__, *,
                 activity_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs']] = None,
                 advanced_cost_optimization_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetricsArgs']] = None,
                 advanced_data_protection_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetricsArgs']] = None,
                 detailed_status_code_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetricsArgs']] = None,
                 prefix_level: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelArgs']] = None):
        """
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs'] activity_metrics: S3 Storage Lens activity metrics. See Activity Metrics above for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetricsArgs'] advanced_cost_optimization_metrics: Advanced cost-optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics above for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetricsArgs'] advanced_data_protection_metrics: Advanced data-protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics above for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetricsArgs'] detailed_status_code_metrics: Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics above for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelArgs'] prefix_level: Prefix-level metrics for S3 Storage Lens. See Prefix Level below for more details.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activity_metrics=activity_metrics,
            advanced_cost_optimization_metrics=advanced_cost_optimization_metrics,
            advanced_data_protection_metrics=advanced_data_protection_metrics,
            detailed_status_code_metrics=detailed_status_code_metrics,
            prefix_level=prefix_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activity_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs']] = None,
             advanced_cost_optimization_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetricsArgs']] = None,
             advanced_data_protection_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetricsArgs']] = None,
             detailed_status_code_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetricsArgs']] = None,
             prefix_level: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if activity_metrics is None and 'activityMetrics' in kwargs:
            activity_metrics = kwargs['activityMetrics']
        if advanced_cost_optimization_metrics is None and 'advancedCostOptimizationMetrics' in kwargs:
            advanced_cost_optimization_metrics = kwargs['advancedCostOptimizationMetrics']
        if advanced_data_protection_metrics is None and 'advancedDataProtectionMetrics' in kwargs:
            advanced_data_protection_metrics = kwargs['advancedDataProtectionMetrics']
        if detailed_status_code_metrics is None and 'detailedStatusCodeMetrics' in kwargs:
            detailed_status_code_metrics = kwargs['detailedStatusCodeMetrics']
        if prefix_level is None and 'prefixLevel' in kwargs:
            prefix_level = kwargs['prefixLevel']

        if activity_metrics is not None:
            _setter("activity_metrics", activity_metrics)
        if advanced_cost_optimization_metrics is not None:
            _setter("advanced_cost_optimization_metrics", advanced_cost_optimization_metrics)
        if advanced_data_protection_metrics is not None:
            _setter("advanced_data_protection_metrics", advanced_data_protection_metrics)
        if detailed_status_code_metrics is not None:
            _setter("detailed_status_code_metrics", detailed_status_code_metrics)
        if prefix_level is not None:
            _setter("prefix_level", prefix_level)

    @property
    @pulumi.getter(name="activityMetrics")
    def activity_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs']]:
        """
        S3 Storage Lens activity metrics. See Activity Metrics above for more details.
        """
        return pulumi.get(self, "activity_metrics")

    @activity_metrics.setter
    def activity_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs']]):
        pulumi.set(self, "activity_metrics", value)

    @property
    @pulumi.getter(name="advancedCostOptimizationMetrics")
    def advanced_cost_optimization_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetricsArgs']]:
        """
        Advanced cost-optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics above for more details.
        """
        return pulumi.get(self, "advanced_cost_optimization_metrics")

    @advanced_cost_optimization_metrics.setter
    def advanced_cost_optimization_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetricsArgs']]):
        pulumi.set(self, "advanced_cost_optimization_metrics", value)

    @property
    @pulumi.getter(name="advancedDataProtectionMetrics")
    def advanced_data_protection_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetricsArgs']]:
        """
        Advanced data-protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics above for more details.
        """
        return pulumi.get(self, "advanced_data_protection_metrics")

    @advanced_data_protection_metrics.setter
    def advanced_data_protection_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetricsArgs']]):
        pulumi.set(self, "advanced_data_protection_metrics", value)

    @property
    @pulumi.getter(name="detailedStatusCodeMetrics")
    def detailed_status_code_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetricsArgs']]:
        """
        Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics above for more details.
        """
        return pulumi.get(self, "detailed_status_code_metrics")

    @detailed_status_code_metrics.setter
    def detailed_status_code_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetricsArgs']]):
        pulumi.set(self, "detailed_status_code_metrics", value)

    @property
    @pulumi.getter(name="prefixLevel")
    def prefix_level(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelArgs']]:
        """
        Prefix-level metrics for S3 Storage Lens. See Prefix Level below for more details.
        """
        return pulumi.get(self, "prefix_level")

    @prefix_level.setter
    def prefix_level(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelArgs']]):
        pulumi.set(self, "prefix_level", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether the activity metrics are enabled.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the activity metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether advanced cost-optimization metrics are enabled.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether advanced cost-optimization metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether advanced data-protection metrics are enabled.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether advanced data-protection metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether detailed status code metrics are enabled.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether detailed status code metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelArgs:
    def __init__(__self__, *,
                 storage_metrics: pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsArgs']):
        """
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsArgs'] storage_metrics: Prefix-level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            storage_metrics=storage_metrics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             storage_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if storage_metrics is None and 'storageMetrics' in kwargs:
            storage_metrics = kwargs['storageMetrics']
        if storage_metrics is None:
            raise TypeError("Missing 'storage_metrics' argument")

        _setter("storage_metrics", storage_metrics)

    @property
    @pulumi.getter(name="storageMetrics")
    def storage_metrics(self) -> pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsArgs']:
        """
        Prefix-level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
        """
        return pulumi.get(self, "storage_metrics")

    @storage_metrics.setter
    def storage_metrics(self, value: pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsArgs']):
        pulumi.set(self, "storage_metrics", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 selection_criteria: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Whether prefix-level storage metrics are enabled.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaArgs'] selection_criteria: Selection criteria. See Selection Criteria below for more details.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            selection_criteria=selection_criteria,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             selection_criteria: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if selection_criteria is None and 'selectionCriteria' in kwargs:
            selection_criteria = kwargs['selectionCriteria']

        if enabled is not None:
            _setter("enabled", enabled)
        if selection_criteria is not None:
            _setter("selection_criteria", selection_criteria)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether prefix-level storage metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="selectionCriteria")
    def selection_criteria(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaArgs']]:
        """
        Selection criteria. See Selection Criteria below for more details.
        """
        return pulumi.get(self, "selection_criteria")

    @selection_criteria.setter
    def selection_criteria(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaArgs']]):
        pulumi.set(self, "selection_criteria", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaArgs:
    def __init__(__self__, *,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 max_depth: Optional[pulumi.Input[int]] = None,
                 min_storage_bytes_percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] delimiter: The delimiter of the selection criteria being used.
        :param pulumi.Input[int] max_depth: The max depth of the selection criteria.
        :param pulumi.Input[float] min_storage_bytes_percentage: The minimum number of storage bytes percentage whose metrics will be selected.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteriaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delimiter=delimiter,
            max_depth=max_depth,
            min_storage_bytes_percentage=min_storage_bytes_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delimiter: Optional[pulumi.Input[str]] = None,
             max_depth: Optional[pulumi.Input[int]] = None,
             min_storage_bytes_percentage: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if max_depth is None and 'maxDepth' in kwargs:
            max_depth = kwargs['maxDepth']
        if min_storage_bytes_percentage is None and 'minStorageBytesPercentage' in kwargs:
            min_storage_bytes_percentage = kwargs['minStorageBytesPercentage']

        if delimiter is not None:
            _setter("delimiter", delimiter)
        if max_depth is not None:
            _setter("max_depth", max_depth)
        if min_storage_bytes_percentage is not None:
            _setter("min_storage_bytes_percentage", min_storage_bytes_percentage)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        The delimiter of the selection criteria being used.
        """
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="maxDepth")
    def max_depth(self) -> Optional[pulumi.Input[int]]:
        """
        The max depth of the selection criteria.
        """
        return pulumi.get(self, "max_depth")

    @max_depth.setter
    def max_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_depth", value)

    @property
    @pulumi.getter(name="minStorageBytesPercentage")
    def min_storage_bytes_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum number of storage bytes percentage whose metrics will be selected.
        """
        return pulumi.get(self, "min_storage_bytes_percentage")

    @min_storage_bytes_percentage.setter
    def min_storage_bytes_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_storage_bytes_percentage", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether detailed status code metrics are enabled.
        """
        StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether detailed status code metrics are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationAwsOrgArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the Amazon Web Services organization.
        """
        StorageLensConfigurationStorageLensConfigurationAwsOrgArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if arn is None:
            raise TypeError("Missing 'arn' argument")

        _setter("arn", arn)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon Web Services organization.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationDataExportArgs:
    def __init__(__self__, *,
                 cloud_watch_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs']] = None,
                 s3_bucket_destination: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs']] = None):
        """
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs'] cloud_watch_metrics: Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs'] s3_bucket_destination: The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
        """
        StorageLensConfigurationStorageLensConfigurationDataExportArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_metrics=cloud_watch_metrics,
            s3_bucket_destination=s3_bucket_destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_metrics: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs']] = None,
             s3_bucket_destination: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cloud_watch_metrics is None and 'cloudWatchMetrics' in kwargs:
            cloud_watch_metrics = kwargs['cloudWatchMetrics']
        if s3_bucket_destination is None and 's3BucketDestination' in kwargs:
            s3_bucket_destination = kwargs['s3BucketDestination']

        if cloud_watch_metrics is not None:
            _setter("cloud_watch_metrics", cloud_watch_metrics)
        if s3_bucket_destination is not None:
            _setter("s3_bucket_destination", s3_bucket_destination)

    @property
    @pulumi.getter(name="cloudWatchMetrics")
    def cloud_watch_metrics(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs']]:
        """
        Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
        """
        return pulumi.get(self, "cloud_watch_metrics")

    @cloud_watch_metrics.setter
    def cloud_watch_metrics(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs']]):
        pulumi.set(self, "cloud_watch_metrics", value)

    @property
    @pulumi.getter(name="s3BucketDestination")
    def s3_bucket_destination(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs']]:
        """
        The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
        """
        return pulumi.get(self, "s3_bucket_destination")

    @s3_bucket_destination.setter
    def s3_bucket_destination(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs']]):
        pulumi.set(self, "s3_bucket_destination", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: Whether CloudWatch publishing for S3 Storage Lens metrics is enabled.
        """
        StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")

        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether CloudWatch publishing for S3 Storage Lens metrics is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 arn: pulumi.Input[str],
                 format: pulumi.Input[str],
                 output_schema_version: pulumi.Input[str],
                 encryption: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account_id: The AWS account ID for the S3 Storage Lens configuration. Defaults to automatically determined account ID of the AWS provider.
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the Amazon Web Services organization.
        :param pulumi.Input[str] format: The export format. Valid values: `CSV`, `Parquet`.
        :param pulumi.Input[str] output_schema_version: The schema version of the export file. Valid values: `V_1`.
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs'] encryption: Encryption of the metrics exports in this bucket. See Encryption below for more details.
        :param pulumi.Input[str] prefix: The prefix of the destination bucket where the metrics export will be delivered.
        """
        StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_id=account_id,
            arn=arn,
            format=format,
            output_schema_version=output_schema_version,
            encryption=encryption,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_id: Optional[pulumi.Input[str]] = None,
             arn: Optional[pulumi.Input[str]] = None,
             format: Optional[pulumi.Input[str]] = None,
             output_schema_version: Optional[pulumi.Input[str]] = None,
             encryption: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if account_id is None and 'accountId' in kwargs:
            account_id = kwargs['accountId']
        if account_id is None:
            raise TypeError("Missing 'account_id' argument")
        if arn is None:
            raise TypeError("Missing 'arn' argument")
        if format is None:
            raise TypeError("Missing 'format' argument")
        if output_schema_version is None and 'outputSchemaVersion' in kwargs:
            output_schema_version = kwargs['outputSchemaVersion']
        if output_schema_version is None:
            raise TypeError("Missing 'output_schema_version' argument")

        _setter("account_id", account_id)
        _setter("arn", arn)
        _setter("format", format)
        _setter("output_schema_version", output_schema_version)
        if encryption is not None:
            _setter("encryption", encryption)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        The AWS account ID for the S3 Storage Lens configuration. Defaults to automatically determined account ID of the AWS provider.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon Web Services organization.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        The export format. Valid values: `CSV`, `Parquet`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="outputSchemaVersion")
    def output_schema_version(self) -> pulumi.Input[str]:
        """
        The schema version of the export file. Valid values: `V_1`.
        """
        return pulumi.get(self, "output_schema_version")

    @output_schema_version.setter
    def output_schema_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_schema_version", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs']]:
        """
        Encryption of the metrics exports in this bucket. See Encryption below for more details.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix of the destination bucket where the metrics export will be delivered.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs:
    def __init__(__self__, *,
                 sse_kms: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsArgs']] = None,
                 sse_s3s: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3Args']]]] = None):
        """
        :param pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsArgs'] sse_kms: SSE-KMS encryption. See SSE KMS below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3Args']]] sse_s3s: SSE-S3 encryption. An empty configuration block `{}` should be used.
        """
        StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sse_kms=sse_kms,
            sse_s3s=sse_s3s,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sse_kms: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsArgs']] = None,
             sse_s3s: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3Args']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if sse_kms is None and 'sseKms' in kwargs:
            sse_kms = kwargs['sseKms']
        if sse_s3s is None and 'sseS3s' in kwargs:
            sse_s3s = kwargs['sseS3s']

        if sse_kms is not None:
            _setter("sse_kms", sse_kms)
        if sse_s3s is not None:
            _setter("sse_s3s", sse_s3s)

    @property
    @pulumi.getter(name="sseKms")
    def sse_kms(self) -> Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsArgs']]:
        """
        SSE-KMS encryption. See SSE KMS below for more details.
        """
        return pulumi.get(self, "sse_kms")

    @sse_kms.setter
    def sse_kms(self, value: Optional[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsArgs']]):
        pulumi.set(self, "sse_kms", value)

    @property
    @pulumi.getter(name="sseS3s")
    def sse_s3s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3Args']]]]:
        """
        SSE-S3 encryption. An empty configuration block `{}` should be used.
        """
        return pulumi.get(self, "sse_s3s")

    @sse_s3s.setter
    def sse_s3s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3Args']]]]):
        pulumi.set(self, "sse_s3s", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsArgs:
    def __init__(__self__, *,
                 key_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key_id: KMS key ARN.
        """
        StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKmsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_id=key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key_id is None and 'keyId' in kwargs:
            key_id = kwargs['keyId']
        if key_id is None:
            raise TypeError("Missing 'key_id' argument")

        _setter("key_id", key_id)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[str]:
        """
        KMS key ARN.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_id", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3Args:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        pass



@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationExcludeArgs:
    def __init__(__self__, *,
                 buckets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buckets: List of S3 bucket ARNs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: List of AWS Regions.
        """
        StorageLensConfigurationStorageLensConfigurationExcludeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            buckets=buckets,
            regions=regions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             buckets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if buckets is not None:
            _setter("buckets", buckets)
        if regions is not None:
            _setter("regions", regions)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of S3 bucket ARNs.
        """
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "buckets", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of AWS Regions.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)


@pulumi.input_type
class StorageLensConfigurationStorageLensConfigurationIncludeArgs:
    def __init__(__self__, *,
                 buckets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] buckets: List of S3 bucket ARNs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: List of AWS Regions.
        """
        StorageLensConfigurationStorageLensConfigurationIncludeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            buckets=buckets,
            regions=regions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             buckets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if buckets is not None:
            _setter("buckets", buckets)
        if regions is not None:
            _setter("regions", regions)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of S3 bucket ARNs.
        """
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "buckets", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of AWS Regions.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)


