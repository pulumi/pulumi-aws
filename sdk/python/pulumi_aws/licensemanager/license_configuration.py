# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class LicenseConfiguration(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    Description of the license configuration.
    """
    license_count: pulumi.Output[int]
    """
    Number of licenses managed by the license configuration.
    """
    license_count_hard_limit: pulumi.Output[bool]
    """
    Sets the number of available licenses as a hard limit.
    """
    license_counting_type: pulumi.Output[str]
    """
    Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
    """
    license_rules: pulumi.Output[list]
    """
    Array of configured License Manager rules.
    """
    name: pulumi.Output[str]
    """
    Name of the license configuration.
    """
    tags: pulumi.Output[dict]
    """
    A mapping of tags to assign to the resource.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, license_count=None, license_count_hard_limit=None, license_counting_type=None, license_rules=None, name=None, tags=None):
        """
        Provides a License Manager license configuration resource.
        
        > **Note:** Removing the `license_count` attribute is not supported by the License Manager API - use `terraform taint aws_licensemanager_license_configuration.<id>` to recreate the resource instead.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] description: Description of the license configuration.
        :param pulumi.Input[int] license_count: Number of licenses managed by the license configuration.
        :param pulumi.Input[bool] license_count_hard_limit: Sets the number of available licenses as a hard limit.
        :param pulumi.Input[str] license_counting_type: Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
        :param pulumi.Input[list] license_rules: Array of configured License Manager rules.
        :param pulumi.Input[str] name: Name of the license configuration.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        __props__['license_count'] = license_count

        __props__['license_count_hard_limit'] = license_count_hard_limit

        if not license_counting_type:
            raise TypeError('Missing required property license_counting_type')
        __props__['license_counting_type'] = license_counting_type

        __props__['license_rules'] = license_rules

        __props__['name'] = name

        __props__['tags'] = tags

        super(LicenseConfiguration, __self__).__init__(
            'aws:licensemanager/licenseConfiguration:LicenseConfiguration',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

