# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['LicenseConfiguration']


class LicenseConfiguration(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 license_count: Optional[pulumi.Input[int]] = None,
                 license_count_hard_limit: Optional[pulumi.Input[bool]] = None,
                 license_counting_type: Optional[pulumi.Input[str]] = None,
                 license_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a License Manager license configuration resource.

        > **Note:** Removing the `license_count` attribute is not supported by the License Manager API - recreate the resource instead.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.licensemanager.LicenseConfiguration("example",
            description="Example",
            license_count=10,
            license_count_hard_limit=True,
            license_counting_type="Socket",
            license_rules=["#minimumSockets=2"],
            tags={
                "foo": "barr",
            })
        ```
        ## Rules

        License rules should be in the format of `#RuleType=RuleValue`. Supported rule types:

        * `minimumVcpus` - Resource must have minimum vCPU count in order to use the license. Default: 1
        * `maximumVcpus` - Resource must have maximum vCPU count in order to use the license. Default: unbounded, limit: 10000
        * `minimumCores` - Resource must have minimum core count in order to use the license. Default: 1
        * `maximumCores` - Resource must have maximum core count in order to use the license. Default: unbounded, limit: 10000
        * `minimumSockets` - Resource must have minimum socket count in order to use the license. Default: 1
        * `maximumSockets` - Resource must have maximum socket count in order to use the license. Default: unbounded, limit: 10000
        * `allowedTenancy` - Defines where the license can be used. If set, restricts license usage to selected tenancies. Specify a comma delimited list of `EC2-Default`, `EC2-DedicatedHost`, `EC2-DedicatedInstance`

        ## Import

        License configurations can be imported using the `id`, e.g.

        ```sh
         $ pulumi import aws:licensemanager/licenseConfiguration:LicenseConfiguration example arn:aws:license-manager:eu-west-1:123456789012:license-configuration:lic-0123456789abcdef0123456789abcdef
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the license configuration.
        :param pulumi.Input[int] license_count: Number of licenses managed by the license configuration.
        :param pulumi.Input[bool] license_count_hard_limit: Sets the number of available licenses as a hard limit.
        :param pulumi.Input[str] license_counting_type: Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] license_rules: Array of configured License Manager rules.
        :param pulumi.Input[str] name: Name of the license configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['license_count'] = license_count
            __props__['license_count_hard_limit'] = license_count_hard_limit
            if license_counting_type is None and not opts.urn:
                raise TypeError("Missing required property 'license_counting_type'")
            __props__['license_counting_type'] = license_counting_type
            __props__['license_rules'] = license_rules
            __props__['name'] = name
            __props__['tags'] = tags
        super(LicenseConfiguration, __self__).__init__(
            'aws:licensemanager/licenseConfiguration:LicenseConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            license_count: Optional[pulumi.Input[int]] = None,
            license_count_hard_limit: Optional[pulumi.Input[bool]] = None,
            license_counting_type: Optional[pulumi.Input[str]] = None,
            license_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'LicenseConfiguration':
        """
        Get an existing LicenseConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the license configuration.
        :param pulumi.Input[int] license_count: Number of licenses managed by the license configuration.
        :param pulumi.Input[bool] license_count_hard_limit: Sets the number of available licenses as a hard limit.
        :param pulumi.Input[str] license_counting_type: Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] license_rules: Array of configured License Manager rules.
        :param pulumi.Input[str] name: Name of the license configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["license_count"] = license_count
        __props__["license_count_hard_limit"] = license_count_hard_limit
        __props__["license_counting_type"] = license_counting_type
        __props__["license_rules"] = license_rules
        __props__["name"] = name
        __props__["tags"] = tags
        return LicenseConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the license configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="licenseCount")
    def license_count(self) -> pulumi.Output[Optional[int]]:
        """
        Number of licenses managed by the license configuration.
        """
        return pulumi.get(self, "license_count")

    @property
    @pulumi.getter(name="licenseCountHardLimit")
    def license_count_hard_limit(self) -> pulumi.Output[Optional[bool]]:
        """
        Sets the number of available licenses as a hard limit.
        """
        return pulumi.get(self, "license_count_hard_limit")

    @property
    @pulumi.getter(name="licenseCountingType")
    def license_counting_type(self) -> pulumi.Output[str]:
        """
        Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
        """
        return pulumi.get(self, "license_counting_type")

    @property
    @pulumi.getter(name="licenseRules")
    def license_rules(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Array of configured License Manager rules.
        """
        return pulumi.get(self, "license_rules")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the license configuration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of tags to assign to the resource.
        """
        return pulumi.get(self, "tags")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

