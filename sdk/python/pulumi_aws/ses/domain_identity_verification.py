# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class DomainIdentityVerification(pulumi.CustomResource):
    """
    Represents a successful verification of an SES domain identity.
    
    Most commonly, this resource is used together with [`aws_route53_record`](route53_record.html) and
    [`aws_ses_domain_identity`](ses_domain_identity.html) to request an SES domain identity,
    deploy the required DNS verification records, and wait for verification to complete.
    
    ~> **WARNING:** This resource implements a part of the verification workflow. It does not represent a real-world entity in AWS, therefore changing or deleting this resource on its own has no immediate effect.
    """
    def __init__(__self__, __name__, __opts__=None, domain=None):
        """Create a DomainIdentityVerification resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not domain:
            raise TypeError('Missing required property domain')
        elif not isinstance(domain, basestring):
            raise TypeError('Expected property domain to be a basestring')
        __self__.domain = domain
        """
        The domain name of the SES domain identity to verify.
        """
        __props__['domain'] = domain

        __self__.arn = pulumi.runtime.UNKNOWN
        """
        The ARN of the domain identity.
        """

        super(DomainIdentityVerification, __self__).__init__(
            'aws:ses/domainIdentityVerification:DomainIdentityVerification',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'domain' in outs:
            self.domain = outs['domain']
