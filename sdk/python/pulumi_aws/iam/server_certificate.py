# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ServerCertificate(pulumi.CustomResource):
    """
    Provides an IAM Server Certificate resource to upload Server Certificates.
    Certs uploaded to IAM can easily work with other AWS services such as:
    
    - AWS Elastic Beanstalk
    - Elastic Load Balancing
    - CloudFront
    - AWS OpsWorks
    
    For information about server certificates in IAM, see [Managing Server
    Certificates][2] in AWS Documentation.
    
    ~> **Note:** All arguments including the private key will be stored in the raw state as plain-text.
    [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    """
    def __init__(__self__, __name__, __opts__=None, arn=None, certificate_body=None, certificate_chain=None, name=None, name_prefix=None, path=None, private_key=None):
        """Create a ServerCertificate resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['arn'] = arn

        if not certificate_body:
            raise TypeError('Missing required property certificate_body')
        __props__['certificateBody'] = certificate_body

        __props__['certificateChain'] = certificate_chain

        __props__['name'] = name

        __props__['namePrefix'] = name_prefix

        __props__['path'] = path

        if not private_key:
            raise TypeError('Missing required property private_key')
        __props__['privateKey'] = private_key

        super(ServerCertificate, __self__).__init__(
            'aws:iam/serverCertificate:ServerCertificate',
            __name__,
            __props__,
            __opts__)

