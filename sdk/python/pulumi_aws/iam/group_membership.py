# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GroupMembership(pulumi.CustomResource):
    """
    ~> **WARNING:** Multiple aws_iam_group_membership resources with the same group name will produce inconsistent behavior!
    
    Provides a top level resource to manage IAM Group membership for IAM Users. For
    more information on managing IAM Groups or IAM Users, see [IAM Groups][1] or
    [IAM Users][2]
    
    ~> **Note:** `aws_iam_group_membership` will conflict with itself if used more than once with the same group. To non-exclusively manage the users in a group, see the
    [`aws_iam_user_group_membership` resource][3].
    """
    def __init__(__self__, __name__, __opts__=None, group=None, name=None, users=None):
        """Create a GroupMembership resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not group:
            raise TypeError('Missing required property group')
        elif not isinstance(group, basestring):
            raise TypeError('Expected property group to be a basestring')
        __self__.group = group
        """
        The IAM Group name to attach the list of `users` to
        """
        __props__['group'] = group

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name to identify the Group Membership
        """
        __props__['name'] = name

        if not users:
            raise TypeError('Missing required property users')
        elif not isinstance(users, list):
            raise TypeError('Expected property users to be a list')
        __self__.users = users
        """
        A list of IAM User names to associate with the Group
        """
        __props__['users'] = users

        super(GroupMembership, __self__).__init__(
            'aws:iam/groupMembership:GroupMembership',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'group' in outs:
            self.group = outs['group']
        if 'name' in outs:
            self.name = outs['name']
        if 'users' in outs:
            self.users = outs['users']
