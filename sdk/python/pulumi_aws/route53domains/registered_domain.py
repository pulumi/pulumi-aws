# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RegisteredDomainArgs', 'RegisteredDomain']

@pulumi.input_type
class RegisteredDomainArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 admin_contact: Optional[pulumi.Input['RegisteredDomainAdminContactArgs']] = None,
                 admin_privacy: Optional[pulumi.Input[bool]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input['RegisteredDomainNameServerArgs']]]] = None,
                 registrant_contact: Optional[pulumi.Input['RegisteredDomainRegistrantContactArgs']] = None,
                 registrant_privacy: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tech_contact: Optional[pulumi.Input['RegisteredDomainTechContactArgs']] = None,
                 tech_privacy: Optional[pulumi.Input[bool]] = None,
                 transfer_lock: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a RegisteredDomain resource.
        :param pulumi.Input[str] domain_name: The name of the registered domain.
        :param pulumi.Input['RegisteredDomainAdminContactArgs'] admin_contact: Details about the domain administrative contact.
        :param pulumi.Input[bool] admin_privacy: Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[bool] auto_renew: Whether the domain registration is set to renew automatically. Default: `true`.
        :param pulumi.Input[Sequence[pulumi.Input['RegisteredDomainNameServerArgs']]] name_servers: The list of nameservers for the domain.
        :param pulumi.Input['RegisteredDomainRegistrantContactArgs'] registrant_contact: Details about the domain registrant.
        :param pulumi.Input[bool] registrant_privacy: Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
        :param pulumi.Input['RegisteredDomainTechContactArgs'] tech_contact: Details about the domain technical contact.
        :param pulumi.Input[bool] tech_privacy: Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[bool] transfer_lock: Whether the domain is locked for transfer. Default: `true`.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        if admin_contact is not None:
            pulumi.set(__self__, "admin_contact", admin_contact)
        if admin_privacy is not None:
            pulumi.set(__self__, "admin_privacy", admin_privacy)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)
        if registrant_contact is not None:
            pulumi.set(__self__, "registrant_contact", registrant_contact)
        if registrant_privacy is not None:
            pulumi.set(__self__, "registrant_privacy", registrant_privacy)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if tech_contact is not None:
            pulumi.set(__self__, "tech_contact", tech_contact)
        if tech_privacy is not None:
            pulumi.set(__self__, "tech_privacy", tech_privacy)
        if transfer_lock is not None:
            pulumi.set(__self__, "transfer_lock", transfer_lock)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        The name of the registered domain.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> Optional[pulumi.Input['RegisteredDomainAdminContactArgs']]:
        """
        Details about the domain administrative contact.
        """
        return pulumi.get(self, "admin_contact")

    @admin_contact.setter
    def admin_contact(self, value: Optional[pulumi.Input['RegisteredDomainAdminContactArgs']]):
        pulumi.set(self, "admin_contact", value)

    @property
    @pulumi.getter(name="adminPrivacy")
    def admin_privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "admin_privacy")

    @admin_privacy.setter
    def admin_privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_privacy", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the domain registration is set to renew automatically. Default: `true`.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegisteredDomainNameServerArgs']]]]:
        """
        The list of nameservers for the domain.
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegisteredDomainNameServerArgs']]]]):
        pulumi.set(self, "name_servers", value)

    @property
    @pulumi.getter(name="registrantContact")
    def registrant_contact(self) -> Optional[pulumi.Input['RegisteredDomainRegistrantContactArgs']]:
        """
        Details about the domain registrant.
        """
        return pulumi.get(self, "registrant_contact")

    @registrant_contact.setter
    def registrant_contact(self, value: Optional[pulumi.Input['RegisteredDomainRegistrantContactArgs']]):
        pulumi.set(self, "registrant_contact", value)

    @property
    @pulumi.getter(name="registrantPrivacy")
    def registrant_privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "registrant_privacy")

    @registrant_privacy.setter
    def registrant_privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "registrant_privacy", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
        """
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> Optional[pulumi.Input['RegisteredDomainTechContactArgs']]:
        """
        Details about the domain technical contact.
        """
        return pulumi.get(self, "tech_contact")

    @tech_contact.setter
    def tech_contact(self, value: Optional[pulumi.Input['RegisteredDomainTechContactArgs']]):
        pulumi.set(self, "tech_contact", value)

    @property
    @pulumi.getter(name="techPrivacy")
    def tech_privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "tech_privacy")

    @tech_privacy.setter
    def tech_privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tech_privacy", value)

    @property
    @pulumi.getter(name="transferLock")
    def transfer_lock(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the domain is locked for transfer. Default: `true`.
        """
        return pulumi.get(self, "transfer_lock")

    @transfer_lock.setter
    def transfer_lock(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transfer_lock", value)


@pulumi.input_type
class _RegisteredDomainState:
    def __init__(__self__, *,
                 abuse_contact_email: Optional[pulumi.Input[str]] = None,
                 abuse_contact_phone: Optional[pulumi.Input[str]] = None,
                 admin_contact: Optional[pulumi.Input['RegisteredDomainAdminContactArgs']] = None,
                 admin_privacy: Optional[pulumi.Input[bool]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 creation_date: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input['RegisteredDomainNameServerArgs']]]] = None,
                 registrant_contact: Optional[pulumi.Input['RegisteredDomainRegistrantContactArgs']] = None,
                 registrant_privacy: Optional[pulumi.Input[bool]] = None,
                 registrar_name: Optional[pulumi.Input[str]] = None,
                 registrar_url: Optional[pulumi.Input[str]] = None,
                 reseller: Optional[pulumi.Input[str]] = None,
                 status_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tech_contact: Optional[pulumi.Input['RegisteredDomainTechContactArgs']] = None,
                 tech_privacy: Optional[pulumi.Input[bool]] = None,
                 transfer_lock: Optional[pulumi.Input[bool]] = None,
                 updated_date: Optional[pulumi.Input[str]] = None,
                 whois_server: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RegisteredDomain resources.
        :param pulumi.Input[str] abuse_contact_email: Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
        :param pulumi.Input[str] abuse_contact_phone: Phone number for reporting abuse.
        :param pulumi.Input['RegisteredDomainAdminContactArgs'] admin_contact: Details about the domain administrative contact.
        :param pulumi.Input[bool] admin_privacy: Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[bool] auto_renew: Whether the domain registration is set to renew automatically. Default: `true`.
        :param pulumi.Input[str] creation_date: The date when the domain was created as found in the response to a WHOIS query.
        :param pulumi.Input[str] domain_name: The name of the registered domain.
        :param pulumi.Input[str] expiration_date: The date when the registration for the domain is set to expire.
        :param pulumi.Input[Sequence[pulumi.Input['RegisteredDomainNameServerArgs']]] name_servers: The list of nameservers for the domain.
        :param pulumi.Input['RegisteredDomainRegistrantContactArgs'] registrant_contact: Details about the domain registrant.
        :param pulumi.Input[bool] registrant_privacy: Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[str] registrar_name: Name of the registrar of the domain as identified in the registry.
        :param pulumi.Input[str] registrar_url: Web address of the registrar.
        :param pulumi.Input[str] reseller: Reseller of the domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] status_lists: List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
        :param pulumi.Input['RegisteredDomainTechContactArgs'] tech_contact: Details about the domain technical contact.
        :param pulumi.Input[bool] tech_privacy: Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[bool] transfer_lock: Whether the domain is locked for transfer. Default: `true`.
        :param pulumi.Input[str] updated_date: The last updated date of the domain as found in the response to a WHOIS query.
        :param pulumi.Input[str] whois_server: The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
        """
        if abuse_contact_email is not None:
            pulumi.set(__self__, "abuse_contact_email", abuse_contact_email)
        if abuse_contact_phone is not None:
            pulumi.set(__self__, "abuse_contact_phone", abuse_contact_phone)
        if admin_contact is not None:
            pulumi.set(__self__, "admin_contact", admin_contact)
        if admin_privacy is not None:
            pulumi.set(__self__, "admin_privacy", admin_privacy)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)
        if registrant_contact is not None:
            pulumi.set(__self__, "registrant_contact", registrant_contact)
        if registrant_privacy is not None:
            pulumi.set(__self__, "registrant_privacy", registrant_privacy)
        if registrar_name is not None:
            pulumi.set(__self__, "registrar_name", registrar_name)
        if registrar_url is not None:
            pulumi.set(__self__, "registrar_url", registrar_url)
        if reseller is not None:
            pulumi.set(__self__, "reseller", reseller)
        if status_lists is not None:
            pulumi.set(__self__, "status_lists", status_lists)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if tech_contact is not None:
            pulumi.set(__self__, "tech_contact", tech_contact)
        if tech_privacy is not None:
            pulumi.set(__self__, "tech_privacy", tech_privacy)
        if transfer_lock is not None:
            pulumi.set(__self__, "transfer_lock", transfer_lock)
        if updated_date is not None:
            pulumi.set(__self__, "updated_date", updated_date)
        if whois_server is not None:
            pulumi.set(__self__, "whois_server", whois_server)

    @property
    @pulumi.getter(name="abuseContactEmail")
    def abuse_contact_email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
        """
        return pulumi.get(self, "abuse_contact_email")

    @abuse_contact_email.setter
    def abuse_contact_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abuse_contact_email", value)

    @property
    @pulumi.getter(name="abuseContactPhone")
    def abuse_contact_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number for reporting abuse.
        """
        return pulumi.get(self, "abuse_contact_phone")

    @abuse_contact_phone.setter
    def abuse_contact_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abuse_contact_phone", value)

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> Optional[pulumi.Input['RegisteredDomainAdminContactArgs']]:
        """
        Details about the domain administrative contact.
        """
        return pulumi.get(self, "admin_contact")

    @admin_contact.setter
    def admin_contact(self, value: Optional[pulumi.Input['RegisteredDomainAdminContactArgs']]):
        pulumi.set(self, "admin_contact", value)

    @property
    @pulumi.getter(name="adminPrivacy")
    def admin_privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "admin_privacy")

    @admin_privacy.setter
    def admin_privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_privacy", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the domain registration is set to renew automatically. Default: `true`.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date when the domain was created as found in the response to a WHOIS query.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the registered domain.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date when the registration for the domain is set to expire.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegisteredDomainNameServerArgs']]]]:
        """
        The list of nameservers for the domain.
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegisteredDomainNameServerArgs']]]]):
        pulumi.set(self, "name_servers", value)

    @property
    @pulumi.getter(name="registrantContact")
    def registrant_contact(self) -> Optional[pulumi.Input['RegisteredDomainRegistrantContactArgs']]:
        """
        Details about the domain registrant.
        """
        return pulumi.get(self, "registrant_contact")

    @registrant_contact.setter
    def registrant_contact(self, value: Optional[pulumi.Input['RegisteredDomainRegistrantContactArgs']]):
        pulumi.set(self, "registrant_contact", value)

    @property
    @pulumi.getter(name="registrantPrivacy")
    def registrant_privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "registrant_privacy")

    @registrant_privacy.setter
    def registrant_privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "registrant_privacy", value)

    @property
    @pulumi.getter(name="registrarName")
    def registrar_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the registrar of the domain as identified in the registry.
        """
        return pulumi.get(self, "registrar_name")

    @registrar_name.setter
    def registrar_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registrar_name", value)

    @property
    @pulumi.getter(name="registrarUrl")
    def registrar_url(self) -> Optional[pulumi.Input[str]]:
        """
        Web address of the registrar.
        """
        return pulumi.get(self, "registrar_url")

    @registrar_url.setter
    def registrar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registrar_url", value)

    @property
    @pulumi.getter
    def reseller(self) -> Optional[pulumi.Input[str]]:
        """
        Reseller of the domain.
        """
        return pulumi.get(self, "reseller")

    @reseller.setter
    def reseller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reseller", value)

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
        """
        return pulumi.get(self, "status_lists")

    @status_lists.setter
    def status_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "status_lists", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
        """
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> Optional[pulumi.Input['RegisteredDomainTechContactArgs']]:
        """
        Details about the domain technical contact.
        """
        return pulumi.get(self, "tech_contact")

    @tech_contact.setter
    def tech_contact(self, value: Optional[pulumi.Input['RegisteredDomainTechContactArgs']]):
        pulumi.set(self, "tech_contact", value)

    @property
    @pulumi.getter(name="techPrivacy")
    def tech_privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "tech_privacy")

    @tech_privacy.setter
    def tech_privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tech_privacy", value)

    @property
    @pulumi.getter(name="transferLock")
    def transfer_lock(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the domain is locked for transfer. Default: `true`.
        """
        return pulumi.get(self, "transfer_lock")

    @transfer_lock.setter
    def transfer_lock(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transfer_lock", value)

    @property
    @pulumi.getter(name="updatedDate")
    def updated_date(self) -> Optional[pulumi.Input[str]]:
        """
        The last updated date of the domain as found in the response to a WHOIS query.
        """
        return pulumi.get(self, "updated_date")

    @updated_date.setter
    def updated_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_date", value)

    @property
    @pulumi.getter(name="whoisServer")
    def whois_server(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
        """
        return pulumi.get(self, "whois_server")

    @whois_server.setter
    def whois_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whois_server", value)


class RegisteredDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainAdminContactArgs']]] = None,
                 admin_privacy: Optional[pulumi.Input[bool]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegisteredDomainNameServerArgs']]]]] = None,
                 registrant_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainRegistrantContactArgs']]] = None,
                 registrant_privacy: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tech_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainTechContactArgs']]] = None,
                 tech_privacy: Optional[pulumi.Input[bool]] = None,
                 transfer_lock: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.route53domains.RegisteredDomain("example",
            domain_name="example.com",
            name_servers=[
                aws.route53domains.RegisteredDomainNameServerArgs(
                    name="ns-195.awsdns-24.com",
                ),
                aws.route53domains.RegisteredDomainNameServerArgs(
                    name="ns-874.awsdns-45.net",
                ),
            ],
            tags={
                "Environment": "test",
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RegisteredDomainAdminContactArgs']] admin_contact: Details about the domain administrative contact.
        :param pulumi.Input[bool] admin_privacy: Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[bool] auto_renew: Whether the domain registration is set to renew automatically. Default: `true`.
        :param pulumi.Input[str] domain_name: The name of the registered domain.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegisteredDomainNameServerArgs']]]] name_servers: The list of nameservers for the domain.
        :param pulumi.Input[pulumi.InputType['RegisteredDomainRegistrantContactArgs']] registrant_contact: Details about the domain registrant.
        :param pulumi.Input[bool] registrant_privacy: Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
        :param pulumi.Input[pulumi.InputType['RegisteredDomainTechContactArgs']] tech_contact: Details about the domain technical contact.
        :param pulumi.Input[bool] tech_privacy: Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[bool] transfer_lock: Whether the domain is locked for transfer. Default: `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegisteredDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.route53domains.RegisteredDomain("example",
            domain_name="example.com",
            name_servers=[
                aws.route53domains.RegisteredDomainNameServerArgs(
                    name="ns-195.awsdns-24.com",
                ),
                aws.route53domains.RegisteredDomainNameServerArgs(
                    name="ns-874.awsdns-45.net",
                ),
            ],
            tags={
                "Environment": "test",
            })
        ```

        :param str resource_name: The name of the resource.
        :param RegisteredDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegisteredDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainAdminContactArgs']]] = None,
                 admin_privacy: Optional[pulumi.Input[bool]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegisteredDomainNameServerArgs']]]]] = None,
                 registrant_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainRegistrantContactArgs']]] = None,
                 registrant_privacy: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tech_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainTechContactArgs']]] = None,
                 tech_privacy: Optional[pulumi.Input[bool]] = None,
                 transfer_lock: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegisteredDomainArgs.__new__(RegisteredDomainArgs)

            __props__.__dict__["admin_contact"] = admin_contact
            __props__.__dict__["admin_privacy"] = admin_privacy
            __props__.__dict__["auto_renew"] = auto_renew
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["name_servers"] = name_servers
            __props__.__dict__["registrant_contact"] = registrant_contact
            __props__.__dict__["registrant_privacy"] = registrant_privacy
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tags_all"] = tags_all
            __props__.__dict__["tech_contact"] = tech_contact
            __props__.__dict__["tech_privacy"] = tech_privacy
            __props__.__dict__["transfer_lock"] = transfer_lock
            __props__.__dict__["abuse_contact_email"] = None
            __props__.__dict__["abuse_contact_phone"] = None
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["expiration_date"] = None
            __props__.__dict__["registrar_name"] = None
            __props__.__dict__["registrar_url"] = None
            __props__.__dict__["reseller"] = None
            __props__.__dict__["status_lists"] = None
            __props__.__dict__["updated_date"] = None
            __props__.__dict__["whois_server"] = None
        super(RegisteredDomain, __self__).__init__(
            'aws:route53domains/registeredDomain:RegisteredDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abuse_contact_email: Optional[pulumi.Input[str]] = None,
            abuse_contact_phone: Optional[pulumi.Input[str]] = None,
            admin_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainAdminContactArgs']]] = None,
            admin_privacy: Optional[pulumi.Input[bool]] = None,
            auto_renew: Optional[pulumi.Input[bool]] = None,
            creation_date: Optional[pulumi.Input[str]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            expiration_date: Optional[pulumi.Input[str]] = None,
            name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegisteredDomainNameServerArgs']]]]] = None,
            registrant_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainRegistrantContactArgs']]] = None,
            registrant_privacy: Optional[pulumi.Input[bool]] = None,
            registrar_name: Optional[pulumi.Input[str]] = None,
            registrar_url: Optional[pulumi.Input[str]] = None,
            reseller: Optional[pulumi.Input[str]] = None,
            status_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tech_contact: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainTechContactArgs']]] = None,
            tech_privacy: Optional[pulumi.Input[bool]] = None,
            transfer_lock: Optional[pulumi.Input[bool]] = None,
            updated_date: Optional[pulumi.Input[str]] = None,
            whois_server: Optional[pulumi.Input[str]] = None) -> 'RegisteredDomain':
        """
        Get an existing RegisteredDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abuse_contact_email: Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
        :param pulumi.Input[str] abuse_contact_phone: Phone number for reporting abuse.
        :param pulumi.Input[pulumi.InputType['RegisteredDomainAdminContactArgs']] admin_contact: Details about the domain administrative contact.
        :param pulumi.Input[bool] admin_privacy: Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[bool] auto_renew: Whether the domain registration is set to renew automatically. Default: `true`.
        :param pulumi.Input[str] creation_date: The date when the domain was created as found in the response to a WHOIS query.
        :param pulumi.Input[str] domain_name: The name of the registered domain.
        :param pulumi.Input[str] expiration_date: The date when the registration for the domain is set to expire.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegisteredDomainNameServerArgs']]]] name_servers: The list of nameservers for the domain.
        :param pulumi.Input[pulumi.InputType['RegisteredDomainRegistrantContactArgs']] registrant_contact: Details about the domain registrant.
        :param pulumi.Input[bool] registrant_privacy: Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[str] registrar_name: Name of the registrar of the domain as identified in the registry.
        :param pulumi.Input[str] registrar_url: Web address of the registrar.
        :param pulumi.Input[str] reseller: Reseller of the domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] status_lists: List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
        :param pulumi.Input[pulumi.InputType['RegisteredDomainTechContactArgs']] tech_contact: Details about the domain technical contact.
        :param pulumi.Input[bool] tech_privacy: Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
        :param pulumi.Input[bool] transfer_lock: Whether the domain is locked for transfer. Default: `true`.
        :param pulumi.Input[str] updated_date: The last updated date of the domain as found in the response to a WHOIS query.
        :param pulumi.Input[str] whois_server: The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegisteredDomainState.__new__(_RegisteredDomainState)

        __props__.__dict__["abuse_contact_email"] = abuse_contact_email
        __props__.__dict__["abuse_contact_phone"] = abuse_contact_phone
        __props__.__dict__["admin_contact"] = admin_contact
        __props__.__dict__["admin_privacy"] = admin_privacy
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["expiration_date"] = expiration_date
        __props__.__dict__["name_servers"] = name_servers
        __props__.__dict__["registrant_contact"] = registrant_contact
        __props__.__dict__["registrant_privacy"] = registrant_privacy
        __props__.__dict__["registrar_name"] = registrar_name
        __props__.__dict__["registrar_url"] = registrar_url
        __props__.__dict__["reseller"] = reseller
        __props__.__dict__["status_lists"] = status_lists
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["tech_contact"] = tech_contact
        __props__.__dict__["tech_privacy"] = tech_privacy
        __props__.__dict__["transfer_lock"] = transfer_lock
        __props__.__dict__["updated_date"] = updated_date
        __props__.__dict__["whois_server"] = whois_server
        return RegisteredDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abuseContactEmail")
    def abuse_contact_email(self) -> pulumi.Output[str]:
        """
        Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
        """
        return pulumi.get(self, "abuse_contact_email")

    @property
    @pulumi.getter(name="abuseContactPhone")
    def abuse_contact_phone(self) -> pulumi.Output[str]:
        """
        Phone number for reporting abuse.
        """
        return pulumi.get(self, "abuse_contact_phone")

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> pulumi.Output['outputs.RegisteredDomainAdminContact']:
        """
        Details about the domain administrative contact.
        """
        return pulumi.get(self, "admin_contact")

    @property
    @pulumi.getter(name="adminPrivacy")
    def admin_privacy(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "admin_privacy")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the domain registration is set to renew automatically. Default: `true`.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[str]:
        """
        The date when the domain was created as found in the response to a WHOIS query.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        The name of the registered domain.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> pulumi.Output[str]:
        """
        The date when the registration for the domain is set to expire.
        """
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> pulumi.Output[Sequence['outputs.RegisteredDomainNameServer']]:
        """
        The list of nameservers for the domain.
        """
        return pulumi.get(self, "name_servers")

    @property
    @pulumi.getter(name="registrantContact")
    def registrant_contact(self) -> pulumi.Output['outputs.RegisteredDomainRegistrantContact']:
        """
        Details about the domain registrant.
        """
        return pulumi.get(self, "registrant_contact")

    @property
    @pulumi.getter(name="registrantPrivacy")
    def registrant_privacy(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "registrant_privacy")

    @property
    @pulumi.getter(name="registrarName")
    def registrar_name(self) -> pulumi.Output[str]:
        """
        Name of the registrar of the domain as identified in the registry.
        """
        return pulumi.get(self, "registrar_name")

    @property
    @pulumi.getter(name="registrarUrl")
    def registrar_url(self) -> pulumi.Output[str]:
        """
        Web address of the registrar.
        """
        return pulumi.get(self, "registrar_url")

    @property
    @pulumi.getter
    def reseller(self) -> pulumi.Output[str]:
        """
        Reseller of the domain.
        """
        return pulumi.get(self, "reseller")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
        """
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
        """
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter(name="techContact")
    def tech_contact(self) -> pulumi.Output['outputs.RegisteredDomainTechContact']:
        """
        Details about the domain technical contact.
        """
        return pulumi.get(self, "tech_contact")

    @property
    @pulumi.getter(name="techPrivacy")
    def tech_privacy(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
        """
        return pulumi.get(self, "tech_privacy")

    @property
    @pulumi.getter(name="transferLock")
    def transfer_lock(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the domain is locked for transfer. Default: `true`.
        """
        return pulumi.get(self, "transfer_lock")

    @property
    @pulumi.getter(name="updatedDate")
    def updated_date(self) -> pulumi.Output[str]:
        """
        The last updated date of the domain as found in the response to a WHOIS query.
        """
        return pulumi.get(self, "updated_date")

    @property
    @pulumi.getter(name="whoisServer")
    def whois_server(self) -> pulumi.Output[str]:
        """
        The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
        """
        return pulumi.get(self, "whois_server")

