# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EndpointArgs', 'Endpoint']

@pulumi.input_type
class EndpointArgs:
    def __init__(__self__, *,
                 authentication_options: pulumi.Input[Sequence[pulumi.Input['EndpointAuthenticationOptionArgs']]],
                 client_cidr_block: pulumi.Input[str],
                 connection_log_options: pulumi.Input['EndpointConnectionLogOptionsArgs'],
                 server_certificate_arn: pulumi.Input[str],
                 client_connect_options: Optional[pulumi.Input['EndpointClientConnectOptionsArgs']] = None,
                 client_login_banner_options: Optional[pulumi.Input['EndpointClientLoginBannerOptionsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 self_service_portal: Optional[pulumi.Input[str]] = None,
                 session_timeout_hours: Optional[pulumi.Input[int]] = None,
                 split_tunnel: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_port: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Endpoint resource.
        """
        pulumi.set(__self__, "authentication_options", authentication_options)
        pulumi.set(__self__, "client_cidr_block", client_cidr_block)
        pulumi.set(__self__, "connection_log_options", connection_log_options)
        pulumi.set(__self__, "server_certificate_arn", server_certificate_arn)
        if client_connect_options is not None:
            pulumi.set(__self__, "client_connect_options", client_connect_options)
        if client_login_banner_options is not None:
            pulumi.set(__self__, "client_login_banner_options", client_login_banner_options)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if self_service_portal is not None:
            pulumi.set(__self__, "self_service_portal", self_service_portal)
        if session_timeout_hours is not None:
            pulumi.set(__self__, "session_timeout_hours", session_timeout_hours)
        if split_tunnel is not None:
            pulumi.set(__self__, "split_tunnel", split_tunnel)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transport_protocol is not None:
            pulumi.set(__self__, "transport_protocol", transport_protocol)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpn_port is not None:
            pulumi.set(__self__, "vpn_port", vpn_port)

    @property
    @pulumi.getter(name="authenticationOptions")
    def authentication_options(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointAuthenticationOptionArgs']]]:
        return pulumi.get(self, "authentication_options")

    @authentication_options.setter
    def authentication_options(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointAuthenticationOptionArgs']]]):
        pulumi.set(self, "authentication_options", value)

    @property
    @pulumi.getter(name="clientCidrBlock")
    def client_cidr_block(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_cidr_block")

    @client_cidr_block.setter
    def client_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_cidr_block", value)

    @property
    @pulumi.getter(name="connectionLogOptions")
    def connection_log_options(self) -> pulumi.Input['EndpointConnectionLogOptionsArgs']:
        return pulumi.get(self, "connection_log_options")

    @connection_log_options.setter
    def connection_log_options(self, value: pulumi.Input['EndpointConnectionLogOptionsArgs']):
        pulumi.set(self, "connection_log_options", value)

    @property
    @pulumi.getter(name="serverCertificateArn")
    def server_certificate_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_certificate_arn")

    @server_certificate_arn.setter
    def server_certificate_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_certificate_arn", value)

    @property
    @pulumi.getter(name="clientConnectOptions")
    def client_connect_options(self) -> Optional[pulumi.Input['EndpointClientConnectOptionsArgs']]:
        return pulumi.get(self, "client_connect_options")

    @client_connect_options.setter
    def client_connect_options(self, value: Optional[pulumi.Input['EndpointClientConnectOptionsArgs']]):
        pulumi.set(self, "client_connect_options", value)

    @property
    @pulumi.getter(name="clientLoginBannerOptions")
    def client_login_banner_options(self) -> Optional[pulumi.Input['EndpointClientLoginBannerOptionsArgs']]:
        return pulumi.get(self, "client_login_banner_options")

    @client_login_banner_options.setter
    def client_login_banner_options(self, value: Optional[pulumi.Input['EndpointClientLoginBannerOptionsArgs']]):
        pulumi.set(self, "client_login_banner_options", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="selfServicePortal")
    def self_service_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "self_service_portal")

    @self_service_portal.setter
    def self_service_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_service_portal", value)

    @property
    @pulumi.getter(name="sessionTimeoutHours")
    def session_timeout_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_timeout_hours")

    @session_timeout_hours.setter
    def session_timeout_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_timeout_hours", value)

    @property
    @pulumi.getter(name="splitTunnel")
    def split_tunnel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "split_tunnel")

    @split_tunnel.setter
    def split_tunnel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "split_tunnel", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="transportProtocol")
    def transport_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_protocol")

    @transport_protocol.setter
    def transport_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_protocol", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpnPort")
    def vpn_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vpn_port")

    @vpn_port.setter
    def vpn_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpn_port", value)


@pulumi.input_type
class _EndpointState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 authentication_options: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAuthenticationOptionArgs']]]] = None,
                 client_cidr_block: Optional[pulumi.Input[str]] = None,
                 client_connect_options: Optional[pulumi.Input['EndpointClientConnectOptionsArgs']] = None,
                 client_login_banner_options: Optional[pulumi.Input['EndpointClientLoginBannerOptionsArgs']] = None,
                 connection_log_options: Optional[pulumi.Input['EndpointConnectionLogOptionsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 self_service_portal: Optional[pulumi.Input[str]] = None,
                 server_certificate_arn: Optional[pulumi.Input[str]] = None,
                 session_timeout_hours: Optional[pulumi.Input[int]] = None,
                 split_tunnel: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_port: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Endpoint resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if authentication_options is not None:
            pulumi.set(__self__, "authentication_options", authentication_options)
        if client_cidr_block is not None:
            pulumi.set(__self__, "client_cidr_block", client_cidr_block)
        if client_connect_options is not None:
            pulumi.set(__self__, "client_connect_options", client_connect_options)
        if client_login_banner_options is not None:
            pulumi.set(__self__, "client_login_banner_options", client_login_banner_options)
        if connection_log_options is not None:
            pulumi.set(__self__, "connection_log_options", connection_log_options)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if self_service_portal is not None:
            pulumi.set(__self__, "self_service_portal", self_service_portal)
        if server_certificate_arn is not None:
            pulumi.set(__self__, "server_certificate_arn", server_certificate_arn)
        if session_timeout_hours is not None:
            pulumi.set(__self__, "session_timeout_hours", session_timeout_hours)
        if split_tunnel is not None:
            pulumi.set(__self__, "split_tunnel", split_tunnel)
        if status is not None:
            warnings.warn("""This attribute has been deprecated.""", DeprecationWarning)
            pulumi.log.warn("""status is deprecated: This attribute has been deprecated.""")
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if transport_protocol is not None:
            pulumi.set(__self__, "transport_protocol", transport_protocol)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpn_port is not None:
            pulumi.set(__self__, "vpn_port", vpn_port)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="authenticationOptions")
    def authentication_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAuthenticationOptionArgs']]]]:
        return pulumi.get(self, "authentication_options")

    @authentication_options.setter
    def authentication_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointAuthenticationOptionArgs']]]]):
        pulumi.set(self, "authentication_options", value)

    @property
    @pulumi.getter(name="clientCidrBlock")
    def client_cidr_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cidr_block")

    @client_cidr_block.setter
    def client_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cidr_block", value)

    @property
    @pulumi.getter(name="clientConnectOptions")
    def client_connect_options(self) -> Optional[pulumi.Input['EndpointClientConnectOptionsArgs']]:
        return pulumi.get(self, "client_connect_options")

    @client_connect_options.setter
    def client_connect_options(self, value: Optional[pulumi.Input['EndpointClientConnectOptionsArgs']]):
        pulumi.set(self, "client_connect_options", value)

    @property
    @pulumi.getter(name="clientLoginBannerOptions")
    def client_login_banner_options(self) -> Optional[pulumi.Input['EndpointClientLoginBannerOptionsArgs']]:
        return pulumi.get(self, "client_login_banner_options")

    @client_login_banner_options.setter
    def client_login_banner_options(self, value: Optional[pulumi.Input['EndpointClientLoginBannerOptionsArgs']]):
        pulumi.set(self, "client_login_banner_options", value)

    @property
    @pulumi.getter(name="connectionLogOptions")
    def connection_log_options(self) -> Optional[pulumi.Input['EndpointConnectionLogOptionsArgs']]:
        return pulumi.get(self, "connection_log_options")

    @connection_log_options.setter
    def connection_log_options(self, value: Optional[pulumi.Input['EndpointConnectionLogOptionsArgs']]):
        pulumi.set(self, "connection_log_options", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="selfServicePortal")
    def self_service_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "self_service_portal")

    @self_service_portal.setter
    def self_service_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_service_portal", value)

    @property
    @pulumi.getter(name="serverCertificateArn")
    def server_certificate_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_arn")

    @server_certificate_arn.setter
    def server_certificate_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_arn", value)

    @property
    @pulumi.getter(name="sessionTimeoutHours")
    def session_timeout_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_timeout_hours")

    @session_timeout_hours.setter
    def session_timeout_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_timeout_hours", value)

    @property
    @pulumi.getter(name="splitTunnel")
    def split_tunnel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "split_tunnel")

    @split_tunnel.setter
    def split_tunnel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "split_tunnel", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter(name="transportProtocol")
    def transport_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_protocol")

    @transport_protocol.setter
    def transport_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_protocol", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpnPort")
    def vpn_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vpn_port")

    @vpn_port.setter
    def vpn_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpn_port", value)


class Endpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointAuthenticationOptionArgs']]]]] = None,
                 client_cidr_block: Optional[pulumi.Input[str]] = None,
                 client_connect_options: Optional[pulumi.Input[pulumi.InputType['EndpointClientConnectOptionsArgs']]] = None,
                 client_login_banner_options: Optional[pulumi.Input[pulumi.InputType['EndpointClientLoginBannerOptionsArgs']]] = None,
                 connection_log_options: Optional[pulumi.Input[pulumi.InputType['EndpointConnectionLogOptionsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 self_service_portal: Optional[pulumi.Input[str]] = None,
                 server_certificate_arn: Optional[pulumi.Input[str]] = None,
                 session_timeout_hours: Optional[pulumi.Input[int]] = None,
                 split_tunnel: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Endpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Endpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointAuthenticationOptionArgs']]]]] = None,
                 client_cidr_block: Optional[pulumi.Input[str]] = None,
                 client_connect_options: Optional[pulumi.Input[pulumi.InputType['EndpointClientConnectOptionsArgs']]] = None,
                 client_login_banner_options: Optional[pulumi.Input[pulumi.InputType['EndpointClientLoginBannerOptionsArgs']]] = None,
                 connection_log_options: Optional[pulumi.Input[pulumi.InputType['EndpointConnectionLogOptionsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 self_service_portal: Optional[pulumi.Input[str]] = None,
                 server_certificate_arn: Optional[pulumi.Input[str]] = None,
                 session_timeout_hours: Optional[pulumi.Input[int]] = None,
                 split_tunnel: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndpointArgs.__new__(EndpointArgs)

            if authentication_options is None and not opts.urn:
                raise TypeError("Missing required property 'authentication_options'")
            __props__.__dict__["authentication_options"] = authentication_options
            if client_cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'client_cidr_block'")
            __props__.__dict__["client_cidr_block"] = client_cidr_block
            __props__.__dict__["client_connect_options"] = client_connect_options
            __props__.__dict__["client_login_banner_options"] = client_login_banner_options
            if connection_log_options is None and not opts.urn:
                raise TypeError("Missing required property 'connection_log_options'")
            __props__.__dict__["connection_log_options"] = connection_log_options
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["self_service_portal"] = self_service_portal
            if server_certificate_arn is None and not opts.urn:
                raise TypeError("Missing required property 'server_certificate_arn'")
            __props__.__dict__["server_certificate_arn"] = server_certificate_arn
            __props__.__dict__["session_timeout_hours"] = session_timeout_hours
            __props__.__dict__["split_tunnel"] = split_tunnel
            __props__.__dict__["tags"] = tags
            __props__.__dict__["transport_protocol"] = transport_protocol
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["vpn_port"] = vpn_port
            __props__.__dict__["arn"] = None
            __props__.__dict__["dns_name"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tags_all"] = None
        super(Endpoint, __self__).__init__(
            'aws:ec2clientvpn/endpoint:Endpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            authentication_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointAuthenticationOptionArgs']]]]] = None,
            client_cidr_block: Optional[pulumi.Input[str]] = None,
            client_connect_options: Optional[pulumi.Input[pulumi.InputType['EndpointClientConnectOptionsArgs']]] = None,
            client_login_banner_options: Optional[pulumi.Input[pulumi.InputType['EndpointClientLoginBannerOptionsArgs']]] = None,
            connection_log_options: Optional[pulumi.Input[pulumi.InputType['EndpointConnectionLogOptionsArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            self_service_portal: Optional[pulumi.Input[str]] = None,
            server_certificate_arn: Optional[pulumi.Input[str]] = None,
            session_timeout_hours: Optional[pulumi.Input[int]] = None,
            split_tunnel: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            transport_protocol: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vpn_port: Optional[pulumi.Input[int]] = None) -> 'Endpoint':
        """
        Get an existing Endpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndpointState.__new__(_EndpointState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["authentication_options"] = authentication_options
        __props__.__dict__["client_cidr_block"] = client_cidr_block
        __props__.__dict__["client_connect_options"] = client_connect_options
        __props__.__dict__["client_login_banner_options"] = client_login_banner_options
        __props__.__dict__["connection_log_options"] = connection_log_options
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["self_service_portal"] = self_service_portal
        __props__.__dict__["server_certificate_arn"] = server_certificate_arn
        __props__.__dict__["session_timeout_hours"] = session_timeout_hours
        __props__.__dict__["split_tunnel"] = split_tunnel
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["transport_protocol"] = transport_protocol
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vpn_port"] = vpn_port
        return Endpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="authenticationOptions")
    def authentication_options(self) -> pulumi.Output[Sequence['outputs.EndpointAuthenticationOption']]:
        return pulumi.get(self, "authentication_options")

    @property
    @pulumi.getter(name="clientCidrBlock")
    def client_cidr_block(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_cidr_block")

    @property
    @pulumi.getter(name="clientConnectOptions")
    def client_connect_options(self) -> pulumi.Output['outputs.EndpointClientConnectOptions']:
        return pulumi.get(self, "client_connect_options")

    @property
    @pulumi.getter(name="clientLoginBannerOptions")
    def client_login_banner_options(self) -> pulumi.Output['outputs.EndpointClientLoginBannerOptions']:
        return pulumi.get(self, "client_login_banner_options")

    @property
    @pulumi.getter(name="connectionLogOptions")
    def connection_log_options(self) -> pulumi.Output['outputs.EndpointConnectionLogOptions']:
        return pulumi.get(self, "connection_log_options")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="selfServicePortal")
    def self_service_portal(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "self_service_portal")

    @property
    @pulumi.getter(name="serverCertificateArn")
    def server_certificate_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_certificate_arn")

    @property
    @pulumi.getter(name="sessionTimeoutHours")
    def session_timeout_hours(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "session_timeout_hours")

    @property
    @pulumi.getter(name="splitTunnel")
    def split_tunnel(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "split_tunnel")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter(name="transportProtocol")
    def transport_protocol(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "transport_protocol")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpnPort")
    def vpn_port(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vpn_port")

