# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetKeyResult(object):
    """
    A collection of values returned by getKey.
    """
    def __init__(__self__, arn=None, aws_account_id=None, creation_date=None, deletion_date=None, description=None, enabled=None, expiration_model=None, key_manager=None, key_state=None, key_usage=None, origin=None, valid_to=None):
        if not arn:
            raise TypeError('Missing required argument arn')
        elif not isinstance(arn, basestring):
            raise TypeError('Expected argument arn to be a basestring')
        __self__.arn = arn
        if not aws_account_id:
            raise TypeError('Missing required argument aws_account_id')
        elif not isinstance(aws_account_id, basestring):
            raise TypeError('Expected argument aws_account_id to be a basestring')
        __self__.aws_account_id = aws_account_id
        if not creation_date:
            raise TypeError('Missing required argument creation_date')
        elif not isinstance(creation_date, basestring):
            raise TypeError('Expected argument creation_date to be a basestring')
        __self__.creation_date = creation_date
        if not deletion_date:
            raise TypeError('Missing required argument deletion_date')
        elif not isinstance(deletion_date, basestring):
            raise TypeError('Expected argument deletion_date to be a basestring')
        __self__.deletion_date = deletion_date
        if not description:
            raise TypeError('Missing required argument description')
        elif not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        if not enabled:
            raise TypeError('Missing required argument enabled')
        elif not isinstance(enabled, bool):
            raise TypeError('Expected argument enabled to be a bool')
        __self__.enabled = enabled
        if not expiration_model:
            raise TypeError('Missing required argument expiration_model')
        elif not isinstance(expiration_model, basestring):
            raise TypeError('Expected argument expiration_model to be a basestring')
        __self__.expiration_model = expiration_model
        if not key_manager:
            raise TypeError('Missing required argument key_manager')
        elif not isinstance(key_manager, basestring):
            raise TypeError('Expected argument key_manager to be a basestring')
        __self__.key_manager = key_manager
        if not key_state:
            raise TypeError('Missing required argument key_state')
        elif not isinstance(key_state, basestring):
            raise TypeError('Expected argument key_state to be a basestring')
        __self__.key_state = key_state
        if not key_usage:
            raise TypeError('Missing required argument key_usage')
        elif not isinstance(key_usage, basestring):
            raise TypeError('Expected argument key_usage to be a basestring')
        __self__.key_usage = key_usage
        if not origin:
            raise TypeError('Missing required argument origin')
        elif not isinstance(origin, basestring):
            raise TypeError('Expected argument origin to be a basestring')
        __self__.origin = origin
        if not valid_to:
            raise TypeError('Missing required argument valid_to')
        elif not isinstance(valid_to, basestring):
            raise TypeError('Expected argument valid_to to be a basestring')
        __self__.valid_to = valid_to

def get_key(grant_tokens=None, key_id=None):
    """
    Use this data source to get detailed information about 
    the specified KMS Key with flexible key id input. 
    This can be useful to reference key alias 
    without having to hard code the ARN as input.
    """
    __args__ = dict()

    __args__['grantTokens'] = grant_tokens
    __args__['keyId'] = key_id
    __ret__ = pulumi.runtime.invoke('aws:kms/getKey:getKey', __args__)

    return GetKeyResult(
        arn=__ret__['arn'],
        aws_account_id=__ret__['awsAccountId'],
        creation_date=__ret__['creationDate'],
        deletion_date=__ret__['deletionDate'],
        description=__ret__['description'],
        enabled=__ret__['enabled'],
        expiration_model=__ret__['expirationModel'],
        key_manager=__ret__['keyManager'],
        key_state=__ret__['keyState'],
        key_usage=__ret__['keyUsage'],
        origin=__ret__['origin'],
        valid_to=__ret__['validTo'])
