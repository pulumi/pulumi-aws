# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .alias import *
from .ciphertext import *
from .external_key import *
from .get_alias import *
from .get_cipher_text import *
from .get_key import *
from .get_secret import *
from .get_secrets import *
from .grant import *
from .key import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "aws:kms/alias:Alias":
                return Alias(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "aws:kms/ciphertext:Ciphertext":
                return Ciphertext(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "aws:kms/externalKey:ExternalKey":
                return ExternalKey(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "aws:kms/grant:Grant":
                return Grant(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "aws:kms/key:Key":
                return Key(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("aws", "kms/alias", _module_instance)
    pulumi.runtime.register_resource_module("aws", "kms/ciphertext", _module_instance)
    pulumi.runtime.register_resource_module("aws", "kms/externalKey", _module_instance)
    pulumi.runtime.register_resource_module("aws", "kms/grant", _module_instance)
    pulumi.runtime.register_resource_module("aws", "kms/key", _module_instance)

_register_module()
