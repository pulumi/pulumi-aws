# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GrantArgs', 'Grant']

@pulumi.input_type
class GrantArgs:
    def __init__(__self__, *,
                 grantee_principal: pulumi.Input[str],
                 key_id: pulumi.Input[str],
                 operations: pulumi.Input[Sequence[pulumi.Input[str]]],
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input['GrantConstraintArgs']]]] = None,
                 grant_creation_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retire_on_delete: Optional[pulumi.Input[bool]] = None,
                 retiring_principal: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Grant resource.
        """
        pulumi.set(__self__, "grantee_principal", grantee_principal)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "operations", operations)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if grant_creation_tokens is not None:
            pulumi.set(__self__, "grant_creation_tokens", grant_creation_tokens)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if retire_on_delete is not None:
            pulumi.set(__self__, "retire_on_delete", retire_on_delete)
        if retiring_principal is not None:
            pulumi.set(__self__, "retiring_principal", retiring_principal)

    @property
    @pulumi.getter(name="granteePrincipal")
    def grantee_principal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "grantee_principal")

    @grantee_principal.setter
    def grantee_principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "grantee_principal", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter
    def operations(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "operations", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GrantConstraintArgs']]]]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GrantConstraintArgs']]]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter(name="grantCreationTokens")
    def grant_creation_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "grant_creation_tokens")

    @grant_creation_tokens.setter
    def grant_creation_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "grant_creation_tokens", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retireOnDelete")
    def retire_on_delete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "retire_on_delete")

    @retire_on_delete.setter
    def retire_on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retire_on_delete", value)

    @property
    @pulumi.getter(name="retiringPrincipal")
    def retiring_principal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retiring_principal")

    @retiring_principal.setter
    def retiring_principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retiring_principal", value)


@pulumi.input_type
class _GrantState:
    def __init__(__self__, *,
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input['GrantConstraintArgs']]]] = None,
                 grant_creation_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 grant_id: Optional[pulumi.Input[str]] = None,
                 grant_token: Optional[pulumi.Input[str]] = None,
                 grantee_principal: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retire_on_delete: Optional[pulumi.Input[bool]] = None,
                 retiring_principal: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Grant resources.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if grant_creation_tokens is not None:
            pulumi.set(__self__, "grant_creation_tokens", grant_creation_tokens)
        if grant_id is not None:
            pulumi.set(__self__, "grant_id", grant_id)
        if grant_token is not None:
            pulumi.set(__self__, "grant_token", grant_token)
        if grantee_principal is not None:
            pulumi.set(__self__, "grantee_principal", grantee_principal)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if retire_on_delete is not None:
            pulumi.set(__self__, "retire_on_delete", retire_on_delete)
        if retiring_principal is not None:
            pulumi.set(__self__, "retiring_principal", retiring_principal)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GrantConstraintArgs']]]]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GrantConstraintArgs']]]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter(name="grantCreationTokens")
    def grant_creation_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "grant_creation_tokens")

    @grant_creation_tokens.setter
    def grant_creation_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "grant_creation_tokens", value)

    @property
    @pulumi.getter(name="grantId")
    def grant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grant_id")

    @grant_id.setter
    def grant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grant_id", value)

    @property
    @pulumi.getter(name="grantToken")
    def grant_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grant_token")

    @grant_token.setter
    def grant_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grant_token", value)

    @property
    @pulumi.getter(name="granteePrincipal")
    def grantee_principal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grantee_principal")

    @grantee_principal.setter
    def grantee_principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grantee_principal", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "operations", value)

    @property
    @pulumi.getter(name="retireOnDelete")
    def retire_on_delete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "retire_on_delete")

    @retire_on_delete.setter
    def retire_on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retire_on_delete", value)

    @property
    @pulumi.getter(name="retiringPrincipal")
    def retiring_principal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retiring_principal")

    @retiring_principal.setter
    def retiring_principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retiring_principal", value)


class Grant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GrantConstraintArgs']]]]] = None,
                 grant_creation_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 grantee_principal: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retire_on_delete: Optional[pulumi.Input[bool]] = None,
                 retiring_principal: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Grant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GrantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Grant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GrantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GrantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GrantConstraintArgs']]]]] = None,
                 grant_creation_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 grantee_principal: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retire_on_delete: Optional[pulumi.Input[bool]] = None,
                 retiring_principal: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GrantArgs.__new__(GrantArgs)

            __props__.__dict__["constraints"] = constraints
            __props__.__dict__["grant_creation_tokens"] = grant_creation_tokens
            if grantee_principal is None and not opts.urn:
                raise TypeError("Missing required property 'grantee_principal'")
            __props__.__dict__["grantee_principal"] = grantee_principal
            if key_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_id'")
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["name"] = name
            if operations is None and not opts.urn:
                raise TypeError("Missing required property 'operations'")
            __props__.__dict__["operations"] = operations
            __props__.__dict__["retire_on_delete"] = retire_on_delete
            __props__.__dict__["retiring_principal"] = retiring_principal
            __props__.__dict__["grant_id"] = None
            __props__.__dict__["grant_token"] = None
        super(Grant, __self__).__init__(
            'aws:kms/grant:Grant',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            constraints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GrantConstraintArgs']]]]] = None,
            grant_creation_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            grant_id: Optional[pulumi.Input[str]] = None,
            grant_token: Optional[pulumi.Input[str]] = None,
            grantee_principal: Optional[pulumi.Input[str]] = None,
            key_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            retire_on_delete: Optional[pulumi.Input[bool]] = None,
            retiring_principal: Optional[pulumi.Input[str]] = None) -> 'Grant':
        """
        Get an existing Grant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GrantState.__new__(_GrantState)

        __props__.__dict__["constraints"] = constraints
        __props__.__dict__["grant_creation_tokens"] = grant_creation_tokens
        __props__.__dict__["grant_id"] = grant_id
        __props__.__dict__["grant_token"] = grant_token
        __props__.__dict__["grantee_principal"] = grantee_principal
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["name"] = name
        __props__.__dict__["operations"] = operations
        __props__.__dict__["retire_on_delete"] = retire_on_delete
        __props__.__dict__["retiring_principal"] = retiring_principal
        return Grant(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def constraints(self) -> pulumi.Output[Optional[Sequence['outputs.GrantConstraint']]]:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter(name="grantCreationTokens")
    def grant_creation_tokens(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "grant_creation_tokens")

    @property
    @pulumi.getter(name="grantId")
    def grant_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "grant_id")

    @property
    @pulumi.getter(name="grantToken")
    def grant_token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "grant_token")

    @property
    @pulumi.getter(name="granteePrincipal")
    def grantee_principal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "grantee_principal")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operations(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter(name="retireOnDelete")
    def retire_on_delete(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "retire_on_delete")

    @property
    @pulumi.getter(name="retiringPrincipal")
    def retiring_principal(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "retiring_principal")

