# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TopicSubscriptionArgs', 'TopicSubscription']

@pulumi.input_type
class TopicSubscriptionArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 confirmation_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 delivery_policy: Optional[pulumi.Input[str]] = None,
                 endpoint_auto_confirms: Optional[pulumi.Input[bool]] = None,
                 filter_policy: Optional[pulumi.Input[str]] = None,
                 filter_policy_scope: Optional[pulumi.Input[str]] = None,
                 raw_message_delivery: Optional[pulumi.Input[bool]] = None,
                 redrive_policy: Optional[pulumi.Input[str]] = None,
                 subscription_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TopicSubscription resource.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "topic", topic)
        if confirmation_timeout_in_minutes is not None:
            pulumi.set(__self__, "confirmation_timeout_in_minutes", confirmation_timeout_in_minutes)
        if delivery_policy is not None:
            pulumi.set(__self__, "delivery_policy", delivery_policy)
        if endpoint_auto_confirms is not None:
            pulumi.set(__self__, "endpoint_auto_confirms", endpoint_auto_confirms)
        if filter_policy is not None:
            pulumi.set(__self__, "filter_policy", filter_policy)
        if filter_policy_scope is not None:
            pulumi.set(__self__, "filter_policy_scope", filter_policy_scope)
        if raw_message_delivery is not None:
            pulumi.set(__self__, "raw_message_delivery", raw_message_delivery)
        if redrive_policy is not None:
            pulumi.set(__self__, "redrive_policy", redrive_policy)
        if subscription_role_arn is not None:
            pulumi.set(__self__, "subscription_role_arn", subscription_role_arn)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="confirmationTimeoutInMinutes")
    def confirmation_timeout_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "confirmation_timeout_in_minutes")

    @confirmation_timeout_in_minutes.setter
    def confirmation_timeout_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "confirmation_timeout_in_minutes", value)

    @property
    @pulumi.getter(name="deliveryPolicy")
    def delivery_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_policy")

    @delivery_policy.setter
    def delivery_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_policy", value)

    @property
    @pulumi.getter(name="endpointAutoConfirms")
    def endpoint_auto_confirms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "endpoint_auto_confirms")

    @endpoint_auto_confirms.setter
    def endpoint_auto_confirms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "endpoint_auto_confirms", value)

    @property
    @pulumi.getter(name="filterPolicy")
    def filter_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_policy")

    @filter_policy.setter
    def filter_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_policy", value)

    @property
    @pulumi.getter(name="filterPolicyScope")
    def filter_policy_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_policy_scope")

    @filter_policy_scope.setter
    def filter_policy_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_policy_scope", value)

    @property
    @pulumi.getter(name="rawMessageDelivery")
    def raw_message_delivery(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "raw_message_delivery")

    @raw_message_delivery.setter
    def raw_message_delivery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "raw_message_delivery", value)

    @property
    @pulumi.getter(name="redrivePolicy")
    def redrive_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redrive_policy")

    @redrive_policy.setter
    def redrive_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redrive_policy", value)

    @property
    @pulumi.getter(name="subscriptionRoleArn")
    def subscription_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subscription_role_arn")

    @subscription_role_arn.setter
    def subscription_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_role_arn", value)


@pulumi.input_type
class _TopicSubscriptionState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 confirmation_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 confirmation_was_authenticated: Optional[pulumi.Input[bool]] = None,
                 delivery_policy: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 endpoint_auto_confirms: Optional[pulumi.Input[bool]] = None,
                 filter_policy: Optional[pulumi.Input[str]] = None,
                 filter_policy_scope: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pending_confirmation: Optional[pulumi.Input[bool]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 raw_message_delivery: Optional[pulumi.Input[bool]] = None,
                 redrive_policy: Optional[pulumi.Input[str]] = None,
                 subscription_role_arn: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TopicSubscription resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if confirmation_timeout_in_minutes is not None:
            pulumi.set(__self__, "confirmation_timeout_in_minutes", confirmation_timeout_in_minutes)
        if confirmation_was_authenticated is not None:
            pulumi.set(__self__, "confirmation_was_authenticated", confirmation_was_authenticated)
        if delivery_policy is not None:
            pulumi.set(__self__, "delivery_policy", delivery_policy)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if endpoint_auto_confirms is not None:
            pulumi.set(__self__, "endpoint_auto_confirms", endpoint_auto_confirms)
        if filter_policy is not None:
            pulumi.set(__self__, "filter_policy", filter_policy)
        if filter_policy_scope is not None:
            pulumi.set(__self__, "filter_policy_scope", filter_policy_scope)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pending_confirmation is not None:
            pulumi.set(__self__, "pending_confirmation", pending_confirmation)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if raw_message_delivery is not None:
            pulumi.set(__self__, "raw_message_delivery", raw_message_delivery)
        if redrive_policy is not None:
            pulumi.set(__self__, "redrive_policy", redrive_policy)
        if subscription_role_arn is not None:
            pulumi.set(__self__, "subscription_role_arn", subscription_role_arn)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="confirmationTimeoutInMinutes")
    def confirmation_timeout_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "confirmation_timeout_in_minutes")

    @confirmation_timeout_in_minutes.setter
    def confirmation_timeout_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "confirmation_timeout_in_minutes", value)

    @property
    @pulumi.getter(name="confirmationWasAuthenticated")
    def confirmation_was_authenticated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "confirmation_was_authenticated")

    @confirmation_was_authenticated.setter
    def confirmation_was_authenticated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "confirmation_was_authenticated", value)

    @property
    @pulumi.getter(name="deliveryPolicy")
    def delivery_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_policy")

    @delivery_policy.setter
    def delivery_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_policy", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="endpointAutoConfirms")
    def endpoint_auto_confirms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "endpoint_auto_confirms")

    @endpoint_auto_confirms.setter
    def endpoint_auto_confirms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "endpoint_auto_confirms", value)

    @property
    @pulumi.getter(name="filterPolicy")
    def filter_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_policy")

    @filter_policy.setter
    def filter_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_policy", value)

    @property
    @pulumi.getter(name="filterPolicyScope")
    def filter_policy_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_policy_scope")

    @filter_policy_scope.setter
    def filter_policy_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_policy_scope", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pendingConfirmation")
    def pending_confirmation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pending_confirmation")

    @pending_confirmation.setter
    def pending_confirmation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pending_confirmation", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="rawMessageDelivery")
    def raw_message_delivery(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "raw_message_delivery")

    @raw_message_delivery.setter
    def raw_message_delivery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "raw_message_delivery", value)

    @property
    @pulumi.getter(name="redrivePolicy")
    def redrive_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redrive_policy")

    @redrive_policy.setter
    def redrive_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redrive_policy", value)

    @property
    @pulumi.getter(name="subscriptionRoleArn")
    def subscription_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subscription_role_arn")

    @subscription_role_arn.setter
    def subscription_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_role_arn", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)


class TopicSubscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confirmation_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 delivery_policy: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 endpoint_auto_confirms: Optional[pulumi.Input[bool]] = None,
                 filter_policy: Optional[pulumi.Input[str]] = None,
                 filter_policy_scope: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 raw_message_delivery: Optional[pulumi.Input[bool]] = None,
                 redrive_policy: Optional[pulumi.Input[str]] = None,
                 subscription_role_arn: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a TopicSubscription resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicSubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TopicSubscription resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TopicSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confirmation_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 delivery_policy: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 endpoint_auto_confirms: Optional[pulumi.Input[bool]] = None,
                 filter_policy: Optional[pulumi.Input[str]] = None,
                 filter_policy_scope: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 raw_message_delivery: Optional[pulumi.Input[bool]] = None,
                 redrive_policy: Optional[pulumi.Input[str]] = None,
                 subscription_role_arn: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicSubscriptionArgs.__new__(TopicSubscriptionArgs)

            __props__.__dict__["confirmation_timeout_in_minutes"] = confirmation_timeout_in_minutes
            __props__.__dict__["delivery_policy"] = delivery_policy
            if endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint'")
            __props__.__dict__["endpoint"] = endpoint
            __props__.__dict__["endpoint_auto_confirms"] = endpoint_auto_confirms
            __props__.__dict__["filter_policy"] = filter_policy
            __props__.__dict__["filter_policy_scope"] = filter_policy_scope
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["raw_message_delivery"] = raw_message_delivery
            __props__.__dict__["redrive_policy"] = redrive_policy
            __props__.__dict__["subscription_role_arn"] = subscription_role_arn
            if topic is None and not opts.urn:
                raise TypeError("Missing required property 'topic'")
            __props__.__dict__["topic"] = topic
            __props__.__dict__["arn"] = None
            __props__.__dict__["confirmation_was_authenticated"] = None
            __props__.__dict__["owner_id"] = None
            __props__.__dict__["pending_confirmation"] = None
        super(TopicSubscription, __self__).__init__(
            'aws:sns/topicSubscription:TopicSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            confirmation_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
            confirmation_was_authenticated: Optional[pulumi.Input[bool]] = None,
            delivery_policy: Optional[pulumi.Input[str]] = None,
            endpoint: Optional[pulumi.Input[str]] = None,
            endpoint_auto_confirms: Optional[pulumi.Input[bool]] = None,
            filter_policy: Optional[pulumi.Input[str]] = None,
            filter_policy_scope: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            pending_confirmation: Optional[pulumi.Input[bool]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            raw_message_delivery: Optional[pulumi.Input[bool]] = None,
            redrive_policy: Optional[pulumi.Input[str]] = None,
            subscription_role_arn: Optional[pulumi.Input[str]] = None,
            topic: Optional[pulumi.Input[str]] = None) -> 'TopicSubscription':
        """
        Get an existing TopicSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TopicSubscriptionState.__new__(_TopicSubscriptionState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["confirmation_timeout_in_minutes"] = confirmation_timeout_in_minutes
        __props__.__dict__["confirmation_was_authenticated"] = confirmation_was_authenticated
        __props__.__dict__["delivery_policy"] = delivery_policy
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["endpoint_auto_confirms"] = endpoint_auto_confirms
        __props__.__dict__["filter_policy"] = filter_policy
        __props__.__dict__["filter_policy_scope"] = filter_policy_scope
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["pending_confirmation"] = pending_confirmation
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["raw_message_delivery"] = raw_message_delivery
        __props__.__dict__["redrive_policy"] = redrive_policy
        __props__.__dict__["subscription_role_arn"] = subscription_role_arn
        __props__.__dict__["topic"] = topic
        return TopicSubscription(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="confirmationTimeoutInMinutes")
    def confirmation_timeout_in_minutes(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "confirmation_timeout_in_minutes")

    @property
    @pulumi.getter(name="confirmationWasAuthenticated")
    def confirmation_was_authenticated(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "confirmation_was_authenticated")

    @property
    @pulumi.getter(name="deliveryPolicy")
    def delivery_policy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "delivery_policy")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="endpointAutoConfirms")
    def endpoint_auto_confirms(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "endpoint_auto_confirms")

    @property
    @pulumi.getter(name="filterPolicy")
    def filter_policy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "filter_policy")

    @property
    @pulumi.getter(name="filterPolicyScope")
    def filter_policy_scope(self) -> pulumi.Output[str]:
        return pulumi.get(self, "filter_policy_scope")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pendingConfirmation")
    def pending_confirmation(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "pending_confirmation")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="rawMessageDelivery")
    def raw_message_delivery(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "raw_message_delivery")

    @property
    @pulumi.getter(name="redrivePolicy")
    def redrive_policy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "redrive_policy")

    @property
    @pulumi.getter(name="subscriptionRoleArn")
    def subscription_role_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "subscription_role_arn")

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "topic")

