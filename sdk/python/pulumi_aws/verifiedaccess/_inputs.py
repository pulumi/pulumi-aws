# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EndpointCidrOptionsArgs',
    'EndpointCidrOptionsArgsDict',
    'EndpointCidrOptionsPortRangeArgs',
    'EndpointCidrOptionsPortRangeArgsDict',
    'EndpointLoadBalancerOptionsArgs',
    'EndpointLoadBalancerOptionsArgsDict',
    'EndpointLoadBalancerOptionsPortRangeArgs',
    'EndpointLoadBalancerOptionsPortRangeArgsDict',
    'EndpointNetworkInterfaceOptionsArgs',
    'EndpointNetworkInterfaceOptionsArgsDict',
    'EndpointNetworkInterfaceOptionsPortRangeArgs',
    'EndpointNetworkInterfaceOptionsPortRangeArgsDict',
    'EndpointRdsOptionsArgs',
    'EndpointRdsOptionsArgsDict',
    'EndpointSseSpecificationArgs',
    'EndpointSseSpecificationArgsDict',
    'GroupSseConfigurationArgs',
    'GroupSseConfigurationArgsDict',
    'InstanceLoggingConfigurationAccessLogsArgs',
    'InstanceLoggingConfigurationAccessLogsArgsDict',
    'InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs',
    'InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgsDict',
    'InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs',
    'InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgsDict',
    'InstanceLoggingConfigurationAccessLogsS3Args',
    'InstanceLoggingConfigurationAccessLogsS3ArgsDict',
    'InstanceVerifiedAccessTrustProviderArgs',
    'InstanceVerifiedAccessTrustProviderArgsDict',
    'TrustProviderDeviceOptionsArgs',
    'TrustProviderDeviceOptionsArgsDict',
    'TrustProviderNativeApplicationOidcOptionsArgs',
    'TrustProviderNativeApplicationOidcOptionsArgsDict',
    'TrustProviderOidcOptionsArgs',
    'TrustProviderOidcOptionsArgsDict',
    'TrustProviderSseSpecificationArgs',
    'TrustProviderSseSpecificationArgsDict',
]

MYPY = False

if not MYPY:
    class EndpointCidrOptionsArgsDict(TypedDict):
        cidr: pulumi.Input[builtins.str]
        port_ranges: pulumi.Input[Sequence[pulumi.Input['EndpointCidrOptionsPortRangeArgsDict']]]
        protocol: NotRequired[pulumi.Input[builtins.str]]
        subnet_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    EndpointCidrOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointCidrOptionsArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[builtins.str],
                 port_ranges: pulumi.Input[Sequence[pulumi.Input['EndpointCidrOptionsPortRangeArgs']]],
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointCidrOptionsPortRangeArgs']]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointCidrOptionsPortRangeArgs']]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)


if not MYPY:
    class EndpointCidrOptionsPortRangeArgsDict(TypedDict):
        from_port: pulumi.Input[builtins.int]
        to_port: pulumi.Input[builtins.int]
elif False:
    EndpointCidrOptionsPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointCidrOptionsPortRangeArgs:
    def __init__(__self__, *,
                 from_port: pulumi.Input[builtins.int],
                 to_port: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "from_port")

    @from_port.setter
    def from_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "from_port", value)

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "to_port")

    @to_port.setter
    def to_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "to_port", value)


if not MYPY:
    class EndpointLoadBalancerOptionsArgsDict(TypedDict):
        load_balancer_arn: NotRequired[pulumi.Input[builtins.str]]
        port: NotRequired[pulumi.Input[builtins.int]]
        port_ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['EndpointLoadBalancerOptionsPortRangeArgsDict']]]]
        protocol: NotRequired[pulumi.Input[builtins.str]]
        subnet_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    EndpointLoadBalancerOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointLoadBalancerOptionsArgs:
    def __init__(__self__, *,
                 load_balancer_arn: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointLoadBalancerOptionsPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if load_balancer_arn is not None:
            pulumi.set(__self__, "load_balancer_arn", load_balancer_arn)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="loadBalancerArn")
    def load_balancer_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "load_balancer_arn")

    @load_balancer_arn.setter
    def load_balancer_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "load_balancer_arn", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointLoadBalancerOptionsPortRangeArgs']]]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointLoadBalancerOptionsPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)


if not MYPY:
    class EndpointLoadBalancerOptionsPortRangeArgsDict(TypedDict):
        from_port: pulumi.Input[builtins.int]
        to_port: pulumi.Input[builtins.int]
elif False:
    EndpointLoadBalancerOptionsPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointLoadBalancerOptionsPortRangeArgs:
    def __init__(__self__, *,
                 from_port: pulumi.Input[builtins.int],
                 to_port: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "from_port")

    @from_port.setter
    def from_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "from_port", value)

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "to_port")

    @to_port.setter
    def to_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "to_port", value)


if not MYPY:
    class EndpointNetworkInterfaceOptionsArgsDict(TypedDict):
        network_interface_id: NotRequired[pulumi.Input[builtins.str]]
        port: NotRequired[pulumi.Input[builtins.int]]
        port_ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['EndpointNetworkInterfaceOptionsPortRangeArgsDict']]]]
        protocol: NotRequired[pulumi.Input[builtins.str]]
elif False:
    EndpointNetworkInterfaceOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointNetworkInterfaceOptionsArgs:
    def __init__(__self__, *,
                 network_interface_id: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointNetworkInterfaceOptionsPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None):
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_interface_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointNetworkInterfaceOptionsPortRangeArgs']]]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointNetworkInterfaceOptionsPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class EndpointNetworkInterfaceOptionsPortRangeArgsDict(TypedDict):
        from_port: pulumi.Input[builtins.int]
        to_port: pulumi.Input[builtins.int]
elif False:
    EndpointNetworkInterfaceOptionsPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointNetworkInterfaceOptionsPortRangeArgs:
    def __init__(__self__, *,
                 from_port: pulumi.Input[builtins.int],
                 to_port: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "from_port")

    @from_port.setter
    def from_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "from_port", value)

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "to_port")

    @to_port.setter
    def to_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "to_port", value)


if not MYPY:
    class EndpointRdsOptionsArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[builtins.int]]
        protocol: NotRequired[pulumi.Input[builtins.str]]
        rds_db_cluster_arn: NotRequired[pulumi.Input[builtins.str]]
        rds_db_instance_arn: NotRequired[pulumi.Input[builtins.str]]
        rds_db_proxy_arn: NotRequired[pulumi.Input[builtins.str]]
        rds_endpoint: NotRequired[pulumi.Input[builtins.str]]
        subnet_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    EndpointRdsOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointRdsOptionsArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 rds_db_cluster_arn: Optional[pulumi.Input[builtins.str]] = None,
                 rds_db_instance_arn: Optional[pulumi.Input[builtins.str]] = None,
                 rds_db_proxy_arn: Optional[pulumi.Input[builtins.str]] = None,
                 rds_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rds_db_cluster_arn is not None:
            pulumi.set(__self__, "rds_db_cluster_arn", rds_db_cluster_arn)
        if rds_db_instance_arn is not None:
            pulumi.set(__self__, "rds_db_instance_arn", rds_db_instance_arn)
        if rds_db_proxy_arn is not None:
            pulumi.set(__self__, "rds_db_proxy_arn", rds_db_proxy_arn)
        if rds_endpoint is not None:
            pulumi.set(__self__, "rds_endpoint", rds_endpoint)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="rdsDbClusterArn")
    def rds_db_cluster_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rds_db_cluster_arn")

    @rds_db_cluster_arn.setter
    def rds_db_cluster_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rds_db_cluster_arn", value)

    @property
    @pulumi.getter(name="rdsDbInstanceArn")
    def rds_db_instance_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rds_db_instance_arn")

    @rds_db_instance_arn.setter
    def rds_db_instance_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rds_db_instance_arn", value)

    @property
    @pulumi.getter(name="rdsDbProxyArn")
    def rds_db_proxy_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rds_db_proxy_arn")

    @rds_db_proxy_arn.setter
    def rds_db_proxy_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rds_db_proxy_arn", value)

    @property
    @pulumi.getter(name="rdsEndpoint")
    def rds_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rds_endpoint")

    @rds_endpoint.setter
    def rds_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rds_endpoint", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)


if not MYPY:
    class EndpointSseSpecificationArgsDict(TypedDict):
        customer_managed_key_enabled: NotRequired[pulumi.Input[builtins.bool]]
        kms_key_arn: NotRequired[pulumi.Input[builtins.str]]
elif False:
    EndpointSseSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointSseSpecificationArgs:
    def __init__(__self__, *,
                 customer_managed_key_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None):
        if customer_managed_key_enabled is not None:
            pulumi.set(__self__, "customer_managed_key_enabled", customer_managed_key_enabled)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="customerManagedKeyEnabled")
    def customer_managed_key_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "customer_managed_key_enabled")

    @customer_managed_key_enabled.setter
    def customer_managed_key_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "customer_managed_key_enabled", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_arn", value)


if not MYPY:
    class GroupSseConfigurationArgsDict(TypedDict):
        customer_managed_key_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Boolean flag to indicate that the CMK should be used.
        """
        kms_key_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        ARN of the KMS key to use.
        """
elif False:
    GroupSseConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupSseConfigurationArgs:
    def __init__(__self__, *,
                 customer_managed_key_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] customer_managed_key_enabled: Boolean flag to indicate that the CMK should be used.
        :param pulumi.Input[builtins.str] kms_key_arn: ARN of the KMS key to use.
        """
        if customer_managed_key_enabled is not None:
            pulumi.set(__self__, "customer_managed_key_enabled", customer_managed_key_enabled)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="customerManagedKeyEnabled")
    def customer_managed_key_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Boolean flag to indicate that the CMK should be used.
        """
        return pulumi.get(self, "customer_managed_key_enabled")

    @customer_managed_key_enabled.setter
    def customer_managed_key_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "customer_managed_key_enabled", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ARN of the KMS key to use.
        """
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_arn", value)


if not MYPY:
    class InstanceLoggingConfigurationAccessLogsArgsDict(TypedDict):
        cloudwatch_logs: NotRequired[pulumi.Input['InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgsDict']]
        """
        A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
        """
        include_trust_context: NotRequired[pulumi.Input[builtins.bool]]
        """
        Include trust data sent by trust providers into the logs.
        """
        kinesis_data_firehose: NotRequired[pulumi.Input['InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgsDict']]
        """
        A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
        """
        log_version: NotRequired[pulumi.Input[builtins.str]]
        """
        The logging version to use. Refer to [VerifiedAccessLogOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VerifiedAccessLogOptions.html) for the allowed values.
        """
        s3: NotRequired[pulumi.Input['InstanceLoggingConfigurationAccessLogsS3ArgsDict']]
        """
        A block that specifies configures sending Verified Access logs to S3. Detailed below.
        """
elif False:
    InstanceLoggingConfigurationAccessLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceLoggingConfigurationAccessLogsArgs:
    def __init__(__self__, *,
                 cloudwatch_logs: Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs']] = None,
                 include_trust_context: Optional[pulumi.Input[builtins.bool]] = None,
                 kinesis_data_firehose: Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs']] = None,
                 log_version: Optional[pulumi.Input[builtins.str]] = None,
                 s3: Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsS3Args']] = None):
        """
        :param pulumi.Input['InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs'] cloudwatch_logs: A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
        :param pulumi.Input[builtins.bool] include_trust_context: Include trust data sent by trust providers into the logs.
        :param pulumi.Input['InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs'] kinesis_data_firehose: A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
        :param pulumi.Input[builtins.str] log_version: The logging version to use. Refer to [VerifiedAccessLogOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VerifiedAccessLogOptions.html) for the allowed values.
        :param pulumi.Input['InstanceLoggingConfigurationAccessLogsS3Args'] s3: A block that specifies configures sending Verified Access logs to S3. Detailed below.
        """
        if cloudwatch_logs is not None:
            pulumi.set(__self__, "cloudwatch_logs", cloudwatch_logs)
        if include_trust_context is not None:
            pulumi.set(__self__, "include_trust_context", include_trust_context)
        if kinesis_data_firehose is not None:
            pulumi.set(__self__, "kinesis_data_firehose", kinesis_data_firehose)
        if log_version is not None:
            pulumi.set(__self__, "log_version", log_version)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter(name="cloudwatchLogs")
    def cloudwatch_logs(self) -> Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs']]:
        """
        A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
        """
        return pulumi.get(self, "cloudwatch_logs")

    @cloudwatch_logs.setter
    def cloudwatch_logs(self, value: Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs']]):
        pulumi.set(self, "cloudwatch_logs", value)

    @property
    @pulumi.getter(name="includeTrustContext")
    def include_trust_context(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Include trust data sent by trust providers into the logs.
        """
        return pulumi.get(self, "include_trust_context")

    @include_trust_context.setter
    def include_trust_context(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "include_trust_context", value)

    @property
    @pulumi.getter(name="kinesisDataFirehose")
    def kinesis_data_firehose(self) -> Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs']]:
        """
        A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
        """
        return pulumi.get(self, "kinesis_data_firehose")

    @kinesis_data_firehose.setter
    def kinesis_data_firehose(self, value: Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs']]):
        pulumi.set(self, "kinesis_data_firehose", value)

    @property
    @pulumi.getter(name="logVersion")
    def log_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The logging version to use. Refer to [VerifiedAccessLogOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VerifiedAccessLogOptions.html) for the allowed values.
        """
        return pulumi.get(self, "log_version")

    @log_version.setter
    def log_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "log_version", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsS3Args']]:
        """
        A block that specifies configures sending Verified Access logs to S3. Detailed below.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['InstanceLoggingConfigurationAccessLogsS3Args']]):
        pulumi.set(self, "s3", value)


if not MYPY:
    class InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Indicates whether logging is enabled.
        """
        log_group: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the CloudWatch Logs Log Group.
        """
elif False:
    InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 log_group: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Indicates whether logging is enabled.
        :param pulumi.Input[builtins.str] log_group: The name of the CloudWatch Logs Log Group.
        """
        pulumi.set(__self__, "enabled", enabled)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Indicates whether logging is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the CloudWatch Logs Log Group.
        """
        return pulumi.get(self, "log_group")

    @log_group.setter
    def log_group(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "log_group", value)


if not MYPY:
    class InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Indicates whether logging is enabled.
        """
        delivery_stream: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the delivery stream.
        """
elif False:
    InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 delivery_stream: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Indicates whether logging is enabled.
        :param pulumi.Input[builtins.str] delivery_stream: The name of the delivery stream.
        """
        pulumi.set(__self__, "enabled", enabled)
        if delivery_stream is not None:
            pulumi.set(__self__, "delivery_stream", delivery_stream)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Indicates whether logging is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="deliveryStream")
    def delivery_stream(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the delivery stream.
        """
        return pulumi.get(self, "delivery_stream")

    @delivery_stream.setter
    def delivery_stream(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delivery_stream", value)


if not MYPY:
    class InstanceLoggingConfigurationAccessLogsS3ArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Indicates whether logging is enabled.
        """
        bucket_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of S3 bucket.
        """
        bucket_owner: NotRequired[pulumi.Input[builtins.str]]
        """
        The ID of the AWS account that owns the Amazon S3 bucket.
        """
        prefix: NotRequired[pulumi.Input[builtins.str]]
        """
        The bucket prefix.
        """
elif False:
    InstanceLoggingConfigurationAccessLogsS3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceLoggingConfigurationAccessLogsS3Args:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 bucket_name: Optional[pulumi.Input[builtins.str]] = None,
                 bucket_owner: Optional[pulumi.Input[builtins.str]] = None,
                 prefix: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Indicates whether logging is enabled.
        :param pulumi.Input[builtins.str] bucket_name: The name of S3 bucket.
        :param pulumi.Input[builtins.str] bucket_owner: The ID of the AWS account that owns the Amazon S3 bucket.
        :param pulumi.Input[builtins.str] prefix: The bucket prefix.
        """
        pulumi.set(__self__, "enabled", enabled)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_owner is not None:
            pulumi.set(__self__, "bucket_owner", bucket_owner)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Indicates whether logging is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketOwner")
    def bucket_owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the AWS account that owns the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_owner")

    @bucket_owner.setter
    def bucket_owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bucket_owner", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The bucket prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class InstanceVerifiedAccessTrustProviderArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        A description for the AWS Verified Access Instance.
        """
        device_trust_provider_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of device-based trust provider.
        """
        trust_provider_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of trust provider (user- or device-based).
        """
        user_trust_provider_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of user-based trust provider.
        """
        verified_access_trust_provider_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The ID of the trust provider.
        """
elif False:
    InstanceVerifiedAccessTrustProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceVerifiedAccessTrustProviderArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 device_trust_provider_type: Optional[pulumi.Input[builtins.str]] = None,
                 trust_provider_type: Optional[pulumi.Input[builtins.str]] = None,
                 user_trust_provider_type: Optional[pulumi.Input[builtins.str]] = None,
                 verified_access_trust_provider_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] description: A description for the AWS Verified Access Instance.
        :param pulumi.Input[builtins.str] device_trust_provider_type: The type of device-based trust provider.
        :param pulumi.Input[builtins.str] trust_provider_type: The type of trust provider (user- or device-based).
        :param pulumi.Input[builtins.str] user_trust_provider_type: The type of user-based trust provider.
        :param pulumi.Input[builtins.str] verified_access_trust_provider_id: The ID of the trust provider.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_trust_provider_type is not None:
            pulumi.set(__self__, "device_trust_provider_type", device_trust_provider_type)
        if trust_provider_type is not None:
            pulumi.set(__self__, "trust_provider_type", trust_provider_type)
        if user_trust_provider_type is not None:
            pulumi.set(__self__, "user_trust_provider_type", user_trust_provider_type)
        if verified_access_trust_provider_id is not None:
            pulumi.set(__self__, "verified_access_trust_provider_id", verified_access_trust_provider_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A description for the AWS Verified Access Instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceTrustProviderType")
    def device_trust_provider_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of device-based trust provider.
        """
        return pulumi.get(self, "device_trust_provider_type")

    @device_trust_provider_type.setter
    def device_trust_provider_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "device_trust_provider_type", value)

    @property
    @pulumi.getter(name="trustProviderType")
    def trust_provider_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of trust provider (user- or device-based).
        """
        return pulumi.get(self, "trust_provider_type")

    @trust_provider_type.setter
    def trust_provider_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trust_provider_type", value)

    @property
    @pulumi.getter(name="userTrustProviderType")
    def user_trust_provider_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of user-based trust provider.
        """
        return pulumi.get(self, "user_trust_provider_type")

    @user_trust_provider_type.setter
    def user_trust_provider_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_trust_provider_type", value)

    @property
    @pulumi.getter(name="verifiedAccessTrustProviderId")
    def verified_access_trust_provider_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the trust provider.
        """
        return pulumi.get(self, "verified_access_trust_provider_id")

    @verified_access_trust_provider_id.setter
    def verified_access_trust_provider_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "verified_access_trust_provider_id", value)


if not MYPY:
    class TrustProviderDeviceOptionsArgsDict(TypedDict):
        tenant_id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    TrustProviderDeviceOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrustProviderDeviceOptionsArgs:
    def __init__(__self__, *,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None):
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)


if not MYPY:
    class TrustProviderNativeApplicationOidcOptionsArgsDict(TypedDict):
        client_secret: pulumi.Input[builtins.str]
        authorization_endpoint: NotRequired[pulumi.Input[builtins.str]]
        client_id: NotRequired[pulumi.Input[builtins.str]]
        issuer: NotRequired[pulumi.Input[builtins.str]]
        public_signing_key_endpoint: NotRequired[pulumi.Input[builtins.str]]
        scope: NotRequired[pulumi.Input[builtins.str]]
        token_endpoint: NotRequired[pulumi.Input[builtins.str]]
        user_info_endpoint: NotRequired[pulumi.Input[builtins.str]]
elif False:
    TrustProviderNativeApplicationOidcOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrustProviderNativeApplicationOidcOptionsArgs:
    def __init__(__self__, *,
                 client_secret: pulumi.Input[builtins.str],
                 authorization_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 client_id: Optional[pulumi.Input[builtins.str]] = None,
                 issuer: Optional[pulumi.Input[builtins.str]] = None,
                 public_signing_key_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input[builtins.str]] = None,
                 token_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 user_info_endpoint: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "client_secret", client_secret)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if public_signing_key_endpoint is not None:
            pulumi.set(__self__, "public_signing_key_endpoint", public_signing_key_endpoint)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if user_info_endpoint is not None:
            pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authorization_endpoint", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="publicSigningKeyEndpoint")
    def public_signing_key_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "public_signing_key_endpoint")

    @public_signing_key_endpoint.setter
    def public_signing_key_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_signing_key_endpoint", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "user_info_endpoint")

    @user_info_endpoint.setter
    def user_info_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_info_endpoint", value)


if not MYPY:
    class TrustProviderOidcOptionsArgsDict(TypedDict):
        client_secret: pulumi.Input[builtins.str]
        authorization_endpoint: NotRequired[pulumi.Input[builtins.str]]
        client_id: NotRequired[pulumi.Input[builtins.str]]
        issuer: NotRequired[pulumi.Input[builtins.str]]
        scope: NotRequired[pulumi.Input[builtins.str]]
        token_endpoint: NotRequired[pulumi.Input[builtins.str]]
        user_info_endpoint: NotRequired[pulumi.Input[builtins.str]]
elif False:
    TrustProviderOidcOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrustProviderOidcOptionsArgs:
    def __init__(__self__, *,
                 client_secret: pulumi.Input[builtins.str],
                 authorization_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 client_id: Optional[pulumi.Input[builtins.str]] = None,
                 issuer: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input[builtins.str]] = None,
                 token_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 user_info_endpoint: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "client_secret", client_secret)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if user_info_endpoint is not None:
            pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authorization_endpoint", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "user_info_endpoint")

    @user_info_endpoint.setter
    def user_info_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_info_endpoint", value)


if not MYPY:
    class TrustProviderSseSpecificationArgsDict(TypedDict):
        customer_managed_key_enabled: NotRequired[pulumi.Input[builtins.bool]]
        kms_key_arn: NotRequired[pulumi.Input[builtins.str]]
elif False:
    TrustProviderSseSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrustProviderSseSpecificationArgs:
    def __init__(__self__, *,
                 customer_managed_key_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None):
        if customer_managed_key_enabled is not None:
            pulumi.set(__self__, "customer_managed_key_enabled", customer_managed_key_enabled)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="customerManagedKeyEnabled")
    def customer_managed_key_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "customer_managed_key_enabled")

    @customer_managed_key_enabled.setter
    def customer_managed_key_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "customer_managed_key_enabled", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_arn", value)


