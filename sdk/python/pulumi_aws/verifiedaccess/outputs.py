# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'EndpointCidrOptions',
    'EndpointCidrOptionsPortRange',
    'EndpointLoadBalancerOptions',
    'EndpointLoadBalancerOptionsPortRange',
    'EndpointNetworkInterfaceOptions',
    'EndpointNetworkInterfaceOptionsPortRange',
    'EndpointRdsOptions',
    'EndpointSseSpecification',
    'GroupSseConfiguration',
    'InstanceLoggingConfigurationAccessLogs',
    'InstanceLoggingConfigurationAccessLogsCloudwatchLogs',
    'InstanceLoggingConfigurationAccessLogsKinesisDataFirehose',
    'InstanceLoggingConfigurationAccessLogsS3',
    'InstanceVerifiedAccessTrustProvider',
    'TrustProviderDeviceOptions',
    'TrustProviderNativeApplicationOidcOptions',
    'TrustProviderOidcOptions',
    'TrustProviderSseSpecification',
]

@pulumi.output_type
class EndpointCidrOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRanges":
            suggest = "port_ranges"
        elif key == "subnetIds":
            suggest = "subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointCidrOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointCidrOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointCidrOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: builtins.str,
                 port_ranges: Sequence['outputs.EndpointCidrOptionsPortRange'],
                 protocol: Optional[builtins.str] = None,
                 subnet_ids: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter
    def cidr(self) -> builtins.str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.EndpointCidrOptionsPortRange']:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class EndpointCidrOptionsPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPort":
            suggest = "from_port"
        elif key == "toPort":
            suggest = "to_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointCidrOptionsPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointCidrOptionsPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointCidrOptionsPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port: builtins.int,
                 to_port: builtins.int):
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> builtins.int:
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> builtins.int:
        return pulumi.get(self, "to_port")


@pulumi.output_type
class EndpointLoadBalancerOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loadBalancerArn":
            suggest = "load_balancer_arn"
        elif key == "portRanges":
            suggest = "port_ranges"
        elif key == "subnetIds":
            suggest = "subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointLoadBalancerOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointLoadBalancerOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointLoadBalancerOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 load_balancer_arn: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 port_ranges: Optional[Sequence['outputs.EndpointLoadBalancerOptionsPortRange']] = None,
                 protocol: Optional[builtins.str] = None,
                 subnet_ids: Optional[Sequence[builtins.str]] = None):
        if load_balancer_arn is not None:
            pulumi.set(__self__, "load_balancer_arn", load_balancer_arn)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="loadBalancerArn")
    def load_balancer_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "load_balancer_arn")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.EndpointLoadBalancerOptionsPortRange']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class EndpointLoadBalancerOptionsPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPort":
            suggest = "from_port"
        elif key == "toPort":
            suggest = "to_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointLoadBalancerOptionsPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointLoadBalancerOptionsPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointLoadBalancerOptionsPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port: builtins.int,
                 to_port: builtins.int):
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> builtins.int:
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> builtins.int:
        return pulumi.get(self, "to_port")


@pulumi.output_type
class EndpointNetworkInterfaceOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkInterfaceId":
            suggest = "network_interface_id"
        elif key == "portRanges":
            suggest = "port_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointNetworkInterfaceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointNetworkInterfaceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointNetworkInterfaceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_interface_id: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 port_ranges: Optional[Sequence['outputs.EndpointNetworkInterfaceOptionsPortRange']] = None,
                 protocol: Optional[builtins.str] = None):
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_interface_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.EndpointNetworkInterfaceOptionsPortRange']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class EndpointNetworkInterfaceOptionsPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPort":
            suggest = "from_port"
        elif key == "toPort":
            suggest = "to_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointNetworkInterfaceOptionsPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointNetworkInterfaceOptionsPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointNetworkInterfaceOptionsPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port: builtins.int,
                 to_port: builtins.int):
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> builtins.int:
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> builtins.int:
        return pulumi.get(self, "to_port")


@pulumi.output_type
class EndpointRdsOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rdsDbClusterArn":
            suggest = "rds_db_cluster_arn"
        elif key == "rdsDbInstanceArn":
            suggest = "rds_db_instance_arn"
        elif key == "rdsDbProxyArn":
            suggest = "rds_db_proxy_arn"
        elif key == "rdsEndpoint":
            suggest = "rds_endpoint"
        elif key == "subnetIds":
            suggest = "subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointRdsOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointRdsOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointRdsOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: Optional[builtins.int] = None,
                 protocol: Optional[builtins.str] = None,
                 rds_db_cluster_arn: Optional[builtins.str] = None,
                 rds_db_instance_arn: Optional[builtins.str] = None,
                 rds_db_proxy_arn: Optional[builtins.str] = None,
                 rds_endpoint: Optional[builtins.str] = None,
                 subnet_ids: Optional[Sequence[builtins.str]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rds_db_cluster_arn is not None:
            pulumi.set(__self__, "rds_db_cluster_arn", rds_db_cluster_arn)
        if rds_db_instance_arn is not None:
            pulumi.set(__self__, "rds_db_instance_arn", rds_db_instance_arn)
        if rds_db_proxy_arn is not None:
            pulumi.set(__self__, "rds_db_proxy_arn", rds_db_proxy_arn)
        if rds_endpoint is not None:
            pulumi.set(__self__, "rds_endpoint", rds_endpoint)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="rdsDbClusterArn")
    def rds_db_cluster_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rds_db_cluster_arn")

    @property
    @pulumi.getter(name="rdsDbInstanceArn")
    def rds_db_instance_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rds_db_instance_arn")

    @property
    @pulumi.getter(name="rdsDbProxyArn")
    def rds_db_proxy_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rds_db_proxy_arn")

    @property
    @pulumi.getter(name="rdsEndpoint")
    def rds_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rds_endpoint")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class EndpointSseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerManagedKeyEnabled":
            suggest = "customer_managed_key_enabled"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointSseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointSseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointSseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_managed_key_enabled: Optional[builtins.bool] = None,
                 kms_key_arn: Optional[builtins.str] = None):
        if customer_managed_key_enabled is not None:
            pulumi.set(__self__, "customer_managed_key_enabled", customer_managed_key_enabled)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="customerManagedKeyEnabled")
    def customer_managed_key_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "customer_managed_key_enabled")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_arn")


@pulumi.output_type
class GroupSseConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerManagedKeyEnabled":
            suggest = "customer_managed_key_enabled"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupSseConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupSseConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupSseConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_managed_key_enabled: Optional[builtins.bool] = None,
                 kms_key_arn: Optional[builtins.str] = None):
        """
        :param builtins.bool customer_managed_key_enabled: Boolean flag to indicate that the CMK should be used.
        :param builtins.str kms_key_arn: ARN of the KMS key to use.
        """
        if customer_managed_key_enabled is not None:
            pulumi.set(__self__, "customer_managed_key_enabled", customer_managed_key_enabled)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="customerManagedKeyEnabled")
    def customer_managed_key_enabled(self) -> Optional[builtins.bool]:
        """
        Boolean flag to indicate that the CMK should be used.
        """
        return pulumi.get(self, "customer_managed_key_enabled")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[builtins.str]:
        """
        ARN of the KMS key to use.
        """
        return pulumi.get(self, "kms_key_arn")


@pulumi.output_type
class InstanceLoggingConfigurationAccessLogs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudwatchLogs":
            suggest = "cloudwatch_logs"
        elif key == "includeTrustContext":
            suggest = "include_trust_context"
        elif key == "kinesisDataFirehose":
            suggest = "kinesis_data_firehose"
        elif key == "logVersion":
            suggest = "log_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLoggingConfigurationAccessLogs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLoggingConfigurationAccessLogs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLoggingConfigurationAccessLogs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloudwatch_logs: Optional['outputs.InstanceLoggingConfigurationAccessLogsCloudwatchLogs'] = None,
                 include_trust_context: Optional[builtins.bool] = None,
                 kinesis_data_firehose: Optional['outputs.InstanceLoggingConfigurationAccessLogsKinesisDataFirehose'] = None,
                 log_version: Optional[builtins.str] = None,
                 s3: Optional['outputs.InstanceLoggingConfigurationAccessLogsS3'] = None):
        """
        :param 'InstanceLoggingConfigurationAccessLogsCloudwatchLogsArgs' cloudwatch_logs: A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
        :param builtins.bool include_trust_context: Include trust data sent by trust providers into the logs.
        :param 'InstanceLoggingConfigurationAccessLogsKinesisDataFirehoseArgs' kinesis_data_firehose: A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
        :param builtins.str log_version: The logging version to use. Refer to [VerifiedAccessLogOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VerifiedAccessLogOptions.html) for the allowed values.
        :param 'InstanceLoggingConfigurationAccessLogsS3Args' s3: A block that specifies configures sending Verified Access logs to S3. Detailed below.
        """
        if cloudwatch_logs is not None:
            pulumi.set(__self__, "cloudwatch_logs", cloudwatch_logs)
        if include_trust_context is not None:
            pulumi.set(__self__, "include_trust_context", include_trust_context)
        if kinesis_data_firehose is not None:
            pulumi.set(__self__, "kinesis_data_firehose", kinesis_data_firehose)
        if log_version is not None:
            pulumi.set(__self__, "log_version", log_version)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter(name="cloudwatchLogs")
    def cloudwatch_logs(self) -> Optional['outputs.InstanceLoggingConfigurationAccessLogsCloudwatchLogs']:
        """
        A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
        """
        return pulumi.get(self, "cloudwatch_logs")

    @property
    @pulumi.getter(name="includeTrustContext")
    def include_trust_context(self) -> Optional[builtins.bool]:
        """
        Include trust data sent by trust providers into the logs.
        """
        return pulumi.get(self, "include_trust_context")

    @property
    @pulumi.getter(name="kinesisDataFirehose")
    def kinesis_data_firehose(self) -> Optional['outputs.InstanceLoggingConfigurationAccessLogsKinesisDataFirehose']:
        """
        A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
        """
        return pulumi.get(self, "kinesis_data_firehose")

    @property
    @pulumi.getter(name="logVersion")
    def log_version(self) -> Optional[builtins.str]:
        """
        The logging version to use. Refer to [VerifiedAccessLogOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VerifiedAccessLogOptions.html) for the allowed values.
        """
        return pulumi.get(self, "log_version")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.InstanceLoggingConfigurationAccessLogsS3']:
        """
        A block that specifies configures sending Verified Access logs to S3. Detailed below.
        """
        return pulumi.get(self, "s3")


@pulumi.output_type
class InstanceLoggingConfigurationAccessLogsCloudwatchLogs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroup":
            suggest = "log_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLoggingConfigurationAccessLogsCloudwatchLogs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLoggingConfigurationAccessLogsCloudwatchLogs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLoggingConfigurationAccessLogsCloudwatchLogs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: builtins.bool,
                 log_group: Optional[builtins.str] = None):
        """
        :param builtins.bool enabled: Indicates whether logging is enabled.
        :param builtins.str log_group: The name of the CloudWatch Logs Log Group.
        """
        pulumi.set(__self__, "enabled", enabled)
        if log_group is not None:
            pulumi.set(__self__, "log_group", log_group)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Indicates whether logging is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[builtins.str]:
        """
        The name of the CloudWatch Logs Log Group.
        """
        return pulumi.get(self, "log_group")


@pulumi.output_type
class InstanceLoggingConfigurationAccessLogsKinesisDataFirehose(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deliveryStream":
            suggest = "delivery_stream"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLoggingConfigurationAccessLogsKinesisDataFirehose. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLoggingConfigurationAccessLogsKinesisDataFirehose.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLoggingConfigurationAccessLogsKinesisDataFirehose.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: builtins.bool,
                 delivery_stream: Optional[builtins.str] = None):
        """
        :param builtins.bool enabled: Indicates whether logging is enabled.
        :param builtins.str delivery_stream: The name of the delivery stream.
        """
        pulumi.set(__self__, "enabled", enabled)
        if delivery_stream is not None:
            pulumi.set(__self__, "delivery_stream", delivery_stream)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Indicates whether logging is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="deliveryStream")
    def delivery_stream(self) -> Optional[builtins.str]:
        """
        The name of the delivery stream.
        """
        return pulumi.get(self, "delivery_stream")


@pulumi.output_type
class InstanceLoggingConfigurationAccessLogsS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "bucketOwner":
            suggest = "bucket_owner"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLoggingConfigurationAccessLogsS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLoggingConfigurationAccessLogsS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLoggingConfigurationAccessLogsS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: builtins.bool,
                 bucket_name: Optional[builtins.str] = None,
                 bucket_owner: Optional[builtins.str] = None,
                 prefix: Optional[builtins.str] = None):
        """
        :param builtins.bool enabled: Indicates whether logging is enabled.
        :param builtins.str bucket_name: The name of S3 bucket.
        :param builtins.str bucket_owner: The ID of the AWS account that owns the Amazon S3 bucket.
        :param builtins.str prefix: The bucket prefix.
        """
        pulumi.set(__self__, "enabled", enabled)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_owner is not None:
            pulumi.set(__self__, "bucket_owner", bucket_owner)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Indicates whether logging is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[builtins.str]:
        """
        The name of S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketOwner")
    def bucket_owner(self) -> Optional[builtins.str]:
        """
        The ID of the AWS account that owns the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_owner")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        The bucket prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class InstanceVerifiedAccessTrustProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceTrustProviderType":
            suggest = "device_trust_provider_type"
        elif key == "trustProviderType":
            suggest = "trust_provider_type"
        elif key == "userTrustProviderType":
            suggest = "user_trust_provider_type"
        elif key == "verifiedAccessTrustProviderId":
            suggest = "verified_access_trust_provider_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceVerifiedAccessTrustProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceVerifiedAccessTrustProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceVerifiedAccessTrustProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 device_trust_provider_type: Optional[builtins.str] = None,
                 trust_provider_type: Optional[builtins.str] = None,
                 user_trust_provider_type: Optional[builtins.str] = None,
                 verified_access_trust_provider_id: Optional[builtins.str] = None):
        """
        :param builtins.str description: A description for the AWS Verified Access Instance.
        :param builtins.str device_trust_provider_type: The type of device-based trust provider.
        :param builtins.str trust_provider_type: The type of trust provider (user- or device-based).
        :param builtins.str user_trust_provider_type: The type of user-based trust provider.
        :param builtins.str verified_access_trust_provider_id: The ID of the trust provider.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_trust_provider_type is not None:
            pulumi.set(__self__, "device_trust_provider_type", device_trust_provider_type)
        if trust_provider_type is not None:
            pulumi.set(__self__, "trust_provider_type", trust_provider_type)
        if user_trust_provider_type is not None:
            pulumi.set(__self__, "user_trust_provider_type", user_trust_provider_type)
        if verified_access_trust_provider_id is not None:
            pulumi.set(__self__, "verified_access_trust_provider_id", verified_access_trust_provider_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        A description for the AWS Verified Access Instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceTrustProviderType")
    def device_trust_provider_type(self) -> Optional[builtins.str]:
        """
        The type of device-based trust provider.
        """
        return pulumi.get(self, "device_trust_provider_type")

    @property
    @pulumi.getter(name="trustProviderType")
    def trust_provider_type(self) -> Optional[builtins.str]:
        """
        The type of trust provider (user- or device-based).
        """
        return pulumi.get(self, "trust_provider_type")

    @property
    @pulumi.getter(name="userTrustProviderType")
    def user_trust_provider_type(self) -> Optional[builtins.str]:
        """
        The type of user-based trust provider.
        """
        return pulumi.get(self, "user_trust_provider_type")

    @property
    @pulumi.getter(name="verifiedAccessTrustProviderId")
    def verified_access_trust_provider_id(self) -> Optional[builtins.str]:
        """
        The ID of the trust provider.
        """
        return pulumi.get(self, "verified_access_trust_provider_id")


@pulumi.output_type
class TrustProviderDeviceOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustProviderDeviceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustProviderDeviceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustProviderDeviceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tenant_id: Optional[builtins.str] = None):
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class TrustProviderNativeApplicationOidcOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientSecret":
            suggest = "client_secret"
        elif key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "publicSigningKeyEndpoint":
            suggest = "public_signing_key_endpoint"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "userInfoEndpoint":
            suggest = "user_info_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustProviderNativeApplicationOidcOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustProviderNativeApplicationOidcOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustProviderNativeApplicationOidcOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_secret: builtins.str,
                 authorization_endpoint: Optional[builtins.str] = None,
                 client_id: Optional[builtins.str] = None,
                 issuer: Optional[builtins.str] = None,
                 public_signing_key_endpoint: Optional[builtins.str] = None,
                 scope: Optional[builtins.str] = None,
                 token_endpoint: Optional[builtins.str] = None,
                 user_info_endpoint: Optional[builtins.str] = None):
        pulumi.set(__self__, "client_secret", client_secret)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if public_signing_key_endpoint is not None:
            pulumi.set(__self__, "public_signing_key_endpoint", public_signing_key_endpoint)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if user_info_endpoint is not None:
            pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> builtins.str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[builtins.str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="publicSigningKeyEndpoint")
    def public_signing_key_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_signing_key_endpoint")

    @property
    @pulumi.getter
    def scope(self) -> Optional[builtins.str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_info_endpoint")


@pulumi.output_type
class TrustProviderOidcOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientSecret":
            suggest = "client_secret"
        elif key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "userInfoEndpoint":
            suggest = "user_info_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustProviderOidcOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustProviderOidcOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustProviderOidcOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_secret: builtins.str,
                 authorization_endpoint: Optional[builtins.str] = None,
                 client_id: Optional[builtins.str] = None,
                 issuer: Optional[builtins.str] = None,
                 scope: Optional[builtins.str] = None,
                 token_endpoint: Optional[builtins.str] = None,
                 user_info_endpoint: Optional[builtins.str] = None):
        pulumi.set(__self__, "client_secret", client_secret)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if user_info_endpoint is not None:
            pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> builtins.str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[builtins.str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def scope(self) -> Optional[builtins.str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_info_endpoint")


@pulumi.output_type
class TrustProviderSseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerManagedKeyEnabled":
            suggest = "customer_managed_key_enabled"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustProviderSseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustProviderSseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustProviderSseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_managed_key_enabled: Optional[builtins.bool] = None,
                 kms_key_arn: Optional[builtins.str] = None):
        if customer_managed_key_enabled is not None:
            pulumi.set(__self__, "customer_managed_key_enabled", customer_managed_key_enabled)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="customerManagedKeyEnabled")
    def customer_managed_key_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "customer_managed_key_enabled")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_arn")


