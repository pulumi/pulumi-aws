# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceVerifiedAccessTrustProvider',
    'TrustProviderDeviceOptions',
    'TrustProviderOidcOptions',
]

@pulumi.output_type
class InstanceVerifiedAccessTrustProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceTrustProviderType":
            suggest = "device_trust_provider_type"
        elif key == "trustProviderType":
            suggest = "trust_provider_type"
        elif key == "userTrustProviderType":
            suggest = "user_trust_provider_type"
        elif key == "verifiedAccessTrustProviderId":
            suggest = "verified_access_trust_provider_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceVerifiedAccessTrustProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceVerifiedAccessTrustProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceVerifiedAccessTrustProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 device_trust_provider_type: Optional[str] = None,
                 trust_provider_type: Optional[str] = None,
                 user_trust_provider_type: Optional[str] = None,
                 verified_access_trust_provider_id: Optional[str] = None):
        """
        :param str description: A description for the AWS Verified Access Instance.
        :param str device_trust_provider_type: The type of device-based trust provider.
        :param str trust_provider_type: The type of trust provider (user- or device-based).
        :param str user_trust_provider_type: The type of user-based trust provider.
        :param str verified_access_trust_provider_id: The ID of the trust provider.
        """
        InstanceVerifiedAccessTrustProvider._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            device_trust_provider_type=device_trust_provider_type,
            trust_provider_type=trust_provider_type,
            user_trust_provider_type=user_trust_provider_type,
            verified_access_trust_provider_id=verified_access_trust_provider_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             device_trust_provider_type: Optional[str] = None,
             trust_provider_type: Optional[str] = None,
             user_trust_provider_type: Optional[str] = None,
             verified_access_trust_provider_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if description is not None:
            _setter("description", description)
        if device_trust_provider_type is not None:
            _setter("device_trust_provider_type", device_trust_provider_type)
        if trust_provider_type is not None:
            _setter("trust_provider_type", trust_provider_type)
        if user_trust_provider_type is not None:
            _setter("user_trust_provider_type", user_trust_provider_type)
        if verified_access_trust_provider_id is not None:
            _setter("verified_access_trust_provider_id", verified_access_trust_provider_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description for the AWS Verified Access Instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceTrustProviderType")
    def device_trust_provider_type(self) -> Optional[str]:
        """
        The type of device-based trust provider.
        """
        return pulumi.get(self, "device_trust_provider_type")

    @property
    @pulumi.getter(name="trustProviderType")
    def trust_provider_type(self) -> Optional[str]:
        """
        The type of trust provider (user- or device-based).
        """
        return pulumi.get(self, "trust_provider_type")

    @property
    @pulumi.getter(name="userTrustProviderType")
    def user_trust_provider_type(self) -> Optional[str]:
        """
        The type of user-based trust provider.
        """
        return pulumi.get(self, "user_trust_provider_type")

    @property
    @pulumi.getter(name="verifiedAccessTrustProviderId")
    def verified_access_trust_provider_id(self) -> Optional[str]:
        """
        The ID of the trust provider.
        """
        return pulumi.get(self, "verified_access_trust_provider_id")


@pulumi.output_type
class TrustProviderDeviceOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustProviderDeviceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustProviderDeviceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustProviderDeviceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tenant_id: Optional[str] = None):
        TrustProviderDeviceOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class TrustProviderOidcOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientSecret":
            suggest = "client_secret"
        elif key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "userInfoEndpoint":
            suggest = "user_info_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustProviderOidcOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustProviderOidcOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustProviderOidcOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_secret: str,
                 authorization_endpoint: Optional[str] = None,
                 client_id: Optional[str] = None,
                 issuer: Optional[str] = None,
                 scope: Optional[str] = None,
                 token_endpoint: Optional[str] = None,
                 user_info_endpoint: Optional[str] = None):
        TrustProviderOidcOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_secret=client_secret,
            authorization_endpoint=authorization_endpoint,
            client_id=client_id,
            issuer=issuer,
            scope=scope,
            token_endpoint=token_endpoint,
            user_info_endpoint=user_info_endpoint,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_secret: str,
             authorization_endpoint: Optional[str] = None,
             client_id: Optional[str] = None,
             issuer: Optional[str] = None,
             scope: Optional[str] = None,
             token_endpoint: Optional[str] = None,
             user_info_endpoint: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_secret", client_secret)
        if authorization_endpoint is not None:
            _setter("authorization_endpoint", authorization_endpoint)
        if client_id is not None:
            _setter("client_id", client_id)
        if issuer is not None:
            _setter("issuer", issuer)
        if scope is not None:
            _setter("scope", scope)
        if token_endpoint is not None:
            _setter("token_endpoint", token_endpoint)
        if user_info_endpoint is not None:
            _setter("user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "user_info_endpoint")


