# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['MetricsDestinationArgs', 'MetricsDestination']

@pulumi.input_type
class MetricsDestinationArgs:
    def __init__(__self__, *,
                 app_monitor_name: pulumi.Input[str],
                 destination: pulumi.Input[str],
                 destination_arn: Optional[pulumi.Input[str]] = None,
                 iam_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MetricsDestination resource.
        """
        pulumi.set(__self__, "app_monitor_name", app_monitor_name)
        pulumi.set(__self__, "destination", destination)
        if destination_arn is not None:
            pulumi.set(__self__, "destination_arn", destination_arn)
        if iam_role_arn is not None:
            pulumi.set(__self__, "iam_role_arn", iam_role_arn)

    @property
    @pulumi.getter(name="appMonitorName")
    def app_monitor_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_monitor_name")

    @app_monitor_name.setter
    def app_monitor_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_monitor_name", value)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="destinationArn")
    def destination_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_arn")

    @destination_arn.setter
    def destination_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_arn", value)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_role_arn", value)


@pulumi.input_type
class _MetricsDestinationState:
    def __init__(__self__, *,
                 app_monitor_name: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_arn: Optional[pulumi.Input[str]] = None,
                 iam_role_arn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MetricsDestination resources.
        """
        if app_monitor_name is not None:
            pulumi.set(__self__, "app_monitor_name", app_monitor_name)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_arn is not None:
            pulumi.set(__self__, "destination_arn", destination_arn)
        if iam_role_arn is not None:
            pulumi.set(__self__, "iam_role_arn", iam_role_arn)

    @property
    @pulumi.getter(name="appMonitorName")
    def app_monitor_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_monitor_name")

    @app_monitor_name.setter
    def app_monitor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_monitor_name", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="destinationArn")
    def destination_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_arn")

    @destination_arn.setter
    def destination_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_arn", value)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_role_arn", value)


class MetricsDestination(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_monitor_name: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_arn: Optional[pulumi.Input[str]] = None,
                 iam_role_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MetricsDestination resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetricsDestinationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MetricsDestination resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MetricsDestinationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricsDestinationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_monitor_name: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_arn: Optional[pulumi.Input[str]] = None,
                 iam_role_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricsDestinationArgs.__new__(MetricsDestinationArgs)

            if app_monitor_name is None and not opts.urn:
                raise TypeError("Missing required property 'app_monitor_name'")
            __props__.__dict__["app_monitor_name"] = app_monitor_name
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["destination_arn"] = destination_arn
            __props__.__dict__["iam_role_arn"] = iam_role_arn
        super(MetricsDestination, __self__).__init__(
            'aws:rum/metricsDestination:MetricsDestination',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_monitor_name: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            destination_arn: Optional[pulumi.Input[str]] = None,
            iam_role_arn: Optional[pulumi.Input[str]] = None) -> 'MetricsDestination':
        """
        Get an existing MetricsDestination resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricsDestinationState.__new__(_MetricsDestinationState)

        __props__.__dict__["app_monitor_name"] = app_monitor_name
        __props__.__dict__["destination"] = destination
        __props__.__dict__["destination_arn"] = destination_arn
        __props__.__dict__["iam_role_arn"] = iam_role_arn
        return MetricsDestination(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appMonitorName")
    def app_monitor_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "app_monitor_name")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationArn")
    def destination_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "destination_arn")

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "iam_role_arn")

