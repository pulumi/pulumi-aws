# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class CachesIscsiVolume(pulumi.CustomResource):
    """
    Manages an AWS Storage Gateway cached iSCSI volume.
    
    ~> **NOTE:** The gateway must have cache added (e.g. via the [`aws_storagegateway_cache`](https://www.terraform.io/docs/providers/aws/r/storagegateway_cache.html) resource) before creating volumes otherwise the Storage Gateway API will return an error.
    
    ~> **NOTE:** The gateway must have an upload buffer added (e.g. via the [`aws_storagegateway_upload_buffer`](https://www.terraform.io/docs/providers/aws/r/storagegateway_upload_buffer.html) resource) before the volume is operational to clients, however the Storage Gateway API will allow volume creation without error in that case and return volume status as `UPLOAD BUFFER NOT CONFIGURED`.
    """
    def __init__(__self__, __name__, __opts__=None, gateway_arn=None, network_interface_id=None, snapshot_id=None, source_volume_arn=None, target_name=None, volume_size_in_bytes=None):
        """Create a CachesIscsiVolume resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not gateway_arn:
            raise TypeError('Missing required property gateway_arn')
        elif not isinstance(gateway_arn, basestring):
            raise TypeError('Expected property gateway_arn to be a basestring')
        __self__.gateway_arn = gateway_arn
        """
        The Amazon Resource Name (ARN) of the gateway.
        """
        __props__['gatewayArn'] = gateway_arn

        if not network_interface_id:
            raise TypeError('Missing required property network_interface_id')
        elif not isinstance(network_interface_id, basestring):
            raise TypeError('Expected property network_interface_id to be a basestring')
        __self__.network_interface_id = network_interface_id
        """
        The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
        """
        __props__['networkInterfaceId'] = network_interface_id

        if snapshot_id and not isinstance(snapshot_id, basestring):
            raise TypeError('Expected property snapshot_id to be a basestring')
        __self__.snapshot_id = snapshot_id
        """
        The snapshot ID of the snapshot to restore as the new cached volume. e.g. `snap-1122aabb`.
        """
        __props__['snapshotId'] = snapshot_id

        if source_volume_arn and not isinstance(source_volume_arn, basestring):
            raise TypeError('Expected property source_volume_arn to be a basestring')
        __self__.source_volume_arn = source_volume_arn
        """
        The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volume_size_in_bytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
        """
        __props__['sourceVolumeArn'] = source_volume_arn

        if not target_name:
            raise TypeError('Missing required property target_name')
        elif not isinstance(target_name, basestring):
            raise TypeError('Expected property target_name to be a basestring')
        __self__.target_name = target_name
        """
        The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
        """
        __props__['targetName'] = target_name

        if not volume_size_in_bytes:
            raise TypeError('Missing required property volume_size_in_bytes')
        elif not isinstance(volume_size_in_bytes, int):
            raise TypeError('Expected property volume_size_in_bytes to be a int')
        __self__.volume_size_in_bytes = volume_size_in_bytes
        """
        The size of the volume in bytes.
        """
        __props__['volumeSizeInBytes'] = volume_size_in_bytes

        __self__.arn = pulumi.runtime.UNKNOWN
        """
        Volume Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
        """
        __self__.chap_enabled = pulumi.runtime.UNKNOWN
        """
        Whether mutual CHAP is enabled for the iSCSI target.
        """
        __self__.lun_number = pulumi.runtime.UNKNOWN
        """
        Logical disk number.
        """
        __self__.network_interface_port = pulumi.runtime.UNKNOWN
        """
        The port used to communicate with iSCSI targets.
        """
        __self__.target_arn = pulumi.runtime.UNKNOWN
        """
        Target Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/target/iqn.1997-05.com.amazon:TargetName`.
        """
        __self__.volume_arn = pulumi.runtime.UNKNOWN
        """
        Volume Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
        """
        __self__.volume_id = pulumi.runtime.UNKNOWN
        """
        Volume ID, e.g. `vol-12345678`.
        """

        super(CachesIscsiVolume, __self__).__init__(
            'aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'chapEnabled' in outs:
            self.chap_enabled = outs['chapEnabled']
        if 'gatewayArn' in outs:
            self.gateway_arn = outs['gatewayArn']
        if 'lunNumber' in outs:
            self.lun_number = outs['lunNumber']
        if 'networkInterfaceId' in outs:
            self.network_interface_id = outs['networkInterfaceId']
        if 'networkInterfacePort' in outs:
            self.network_interface_port = outs['networkInterfacePort']
        if 'snapshotId' in outs:
            self.snapshot_id = outs['snapshotId']
        if 'sourceVolumeArn' in outs:
            self.source_volume_arn = outs['sourceVolumeArn']
        if 'targetArn' in outs:
            self.target_arn = outs['targetArn']
        if 'targetName' in outs:
            self.target_name = outs['targetName']
        if 'volumeArn' in outs:
            self.volume_arn = outs['volumeArn']
        if 'volumeId' in outs:
            self.volume_id = outs['volumeId']
        if 'volumeSizeInBytes' in outs:
            self.volume_size_in_bytes = outs['volumeSizeInBytes']
