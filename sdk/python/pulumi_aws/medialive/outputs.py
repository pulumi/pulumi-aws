# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InputDestination',
    'InputInputDevice',
    'InputMediaConnectFlow',
    'InputSecurityGroupWhitelistRule',
    'InputSource',
    'InputVpc',
    'MultiplexMultiplexSettings',
    'MultiplexProgramMultiplexProgramSettings',
    'MultiplexProgramMultiplexProgramSettingsServiceDescriptor',
    'MultiplexProgramMultiplexProgramSettingsVideoSettings',
    'MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings',
]

@pulumi.output_type
class InputDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamName":
            suggest = "stream_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_name: str):
        """
        :param str stream_name: A unique name for the location the RTMP stream is being pushed to.
        """
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        A unique name for the location the RTMP stream is being pushed to.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class InputInputDevice(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The unique ID for the device.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for the device.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class InputMediaConnectFlow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "flowArn":
            suggest = "flow_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputMediaConnectFlow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputMediaConnectFlow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputMediaConnectFlow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flow_arn: str):
        """
        :param str flow_arn: The ARN of the MediaConnect Flow
        """
        pulumi.set(__self__, "flow_arn", flow_arn)

    @property
    @pulumi.getter(name="flowArn")
    def flow_arn(self) -> str:
        """
        The ARN of the MediaConnect Flow
        """
        return pulumi.get(self, "flow_arn")


@pulumi.output_type
class InputSecurityGroupWhitelistRule(dict):
    def __init__(__self__, *,
                 cidr: str):
        """
        :param str cidr: The IPv4 CIDR that's whitelisted.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        The IPv4 CIDR that's whitelisted.
        """
        return pulumi.get(self, "cidr")


@pulumi.output_type
class InputSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordParam":
            suggest = "password_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_param: str,
                 url: str,
                 username: str):
        """
        :param str password_param: The key used to extract the password from EC2 Parameter store.
        :param str url: The URL where the stream is pulled from.
        :param str username: The username for the input source.
        """
        pulumi.set(__self__, "password_param", password_param)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordParam")
    def password_param(self) -> str:
        """
        The key used to extract the password from EC2 Parameter store.
        """
        return pulumi.get(self, "password_param")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL where the stream is pulled from.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the input source.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class InputVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 security_group_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] subnet_ids: A list of 2 VPC subnet IDs from the same VPC.
        :param Sequence[str] security_group_ids: A list of up to 5 EC2 VPC security group IDs to attach to the Input.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of 2 VPC subnet IDs from the same VPC.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        A list of up to 5 EC2 VPC security group IDs to attach to the Input.
        """
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class MultiplexMultiplexSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "transportStreamBitrate":
            suggest = "transport_stream_bitrate"
        elif key == "transportStreamId":
            suggest = "transport_stream_id"
        elif key == "maximumVideoBufferDelayMilliseconds":
            suggest = "maximum_video_buffer_delay_milliseconds"
        elif key == "transportStreamReservedBitrate":
            suggest = "transport_stream_reserved_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiplexMultiplexSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiplexMultiplexSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiplexMultiplexSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 transport_stream_bitrate: int,
                 transport_stream_id: int,
                 maximum_video_buffer_delay_milliseconds: Optional[int] = None,
                 transport_stream_reserved_bitrate: Optional[int] = None):
        """
        :param int transport_stream_bitrate: Transport stream bit rate.
        :param int transport_stream_id: Unique ID for each multiplex.
        :param int maximum_video_buffer_delay_milliseconds: Maximum video buffer delay.
        :param int transport_stream_reserved_bitrate: Transport stream reserved bit rate.
        """
        pulumi.set(__self__, "transport_stream_bitrate", transport_stream_bitrate)
        pulumi.set(__self__, "transport_stream_id", transport_stream_id)
        if maximum_video_buffer_delay_milliseconds is not None:
            pulumi.set(__self__, "maximum_video_buffer_delay_milliseconds", maximum_video_buffer_delay_milliseconds)
        if transport_stream_reserved_bitrate is not None:
            pulumi.set(__self__, "transport_stream_reserved_bitrate", transport_stream_reserved_bitrate)

    @property
    @pulumi.getter(name="transportStreamBitrate")
    def transport_stream_bitrate(self) -> int:
        """
        Transport stream bit rate.
        """
        return pulumi.get(self, "transport_stream_bitrate")

    @property
    @pulumi.getter(name="transportStreamId")
    def transport_stream_id(self) -> int:
        """
        Unique ID for each multiplex.
        """
        return pulumi.get(self, "transport_stream_id")

    @property
    @pulumi.getter(name="maximumVideoBufferDelayMilliseconds")
    def maximum_video_buffer_delay_milliseconds(self) -> Optional[int]:
        """
        Maximum video buffer delay.
        """
        return pulumi.get(self, "maximum_video_buffer_delay_milliseconds")

    @property
    @pulumi.getter(name="transportStreamReservedBitrate")
    def transport_stream_reserved_bitrate(self) -> Optional[int]:
        """
        Transport stream reserved bit rate.
        """
        return pulumi.get(self, "transport_stream_reserved_bitrate")


@pulumi.output_type
class MultiplexProgramMultiplexProgramSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredChannelPipeline":
            suggest = "preferred_channel_pipeline"
        elif key == "programNumber":
            suggest = "program_number"
        elif key == "serviceDescriptor":
            suggest = "service_descriptor"
        elif key == "videoSettings":
            suggest = "video_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiplexProgramMultiplexProgramSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiplexProgramMultiplexProgramSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiplexProgramMultiplexProgramSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_channel_pipeline: str,
                 program_number: int,
                 service_descriptor: Optional['outputs.MultiplexProgramMultiplexProgramSettingsServiceDescriptor'] = None,
                 video_settings: Optional['outputs.MultiplexProgramMultiplexProgramSettingsVideoSettings'] = None):
        """
        :param str preferred_channel_pipeline: Enum for preferred channel pipeline. Options are `CURRENTLY_ACTIVE`, `PIPELINE_0`, or `PIPELINE_1`.
        :param int program_number: Unique program number.
        :param 'MultiplexProgramMultiplexProgramSettingsServiceDescriptorArgs' service_descriptor: Service Descriptor. See Service Descriptor for more details.
        :param 'MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs' video_settings: Video settings. See Video Settings for more details.
        """
        pulumi.set(__self__, "preferred_channel_pipeline", preferred_channel_pipeline)
        pulumi.set(__self__, "program_number", program_number)
        if service_descriptor is not None:
            pulumi.set(__self__, "service_descriptor", service_descriptor)
        if video_settings is not None:
            pulumi.set(__self__, "video_settings", video_settings)

    @property
    @pulumi.getter(name="preferredChannelPipeline")
    def preferred_channel_pipeline(self) -> str:
        """
        Enum for preferred channel pipeline. Options are `CURRENTLY_ACTIVE`, `PIPELINE_0`, or `PIPELINE_1`.
        """
        return pulumi.get(self, "preferred_channel_pipeline")

    @property
    @pulumi.getter(name="programNumber")
    def program_number(self) -> int:
        """
        Unique program number.
        """
        return pulumi.get(self, "program_number")

    @property
    @pulumi.getter(name="serviceDescriptor")
    def service_descriptor(self) -> Optional['outputs.MultiplexProgramMultiplexProgramSettingsServiceDescriptor']:
        """
        Service Descriptor. See Service Descriptor for more details.
        """
        return pulumi.get(self, "service_descriptor")

    @property
    @pulumi.getter(name="videoSettings")
    def video_settings(self) -> Optional['outputs.MultiplexProgramMultiplexProgramSettingsVideoSettings']:
        """
        Video settings. See Video Settings for more details.
        """
        return pulumi.get(self, "video_settings")


@pulumi.output_type
class MultiplexProgramMultiplexProgramSettingsServiceDescriptor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "providerName":
            suggest = "provider_name"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiplexProgramMultiplexProgramSettingsServiceDescriptor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiplexProgramMultiplexProgramSettingsServiceDescriptor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiplexProgramMultiplexProgramSettingsServiceDescriptor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provider_name: str,
                 service_name: str):
        """
        :param str provider_name: Unique provider name.
        :param str service_name: Unique service name.
        """
        pulumi.set(__self__, "provider_name", provider_name)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> str:
        """
        Unique provider name.
        """
        return pulumi.get(self, "provider_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Unique service name.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class MultiplexProgramMultiplexProgramSettingsVideoSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "constantBitrate":
            suggest = "constant_bitrate"
        elif key == "statmuxSettings":
            suggest = "statmux_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiplexProgramMultiplexProgramSettingsVideoSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiplexProgramMultiplexProgramSettingsVideoSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiplexProgramMultiplexProgramSettingsVideoSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 constant_bitrate: Optional[int] = None,
                 statmux_settings: Optional['outputs.MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings'] = None):
        """
        :param int constant_bitrate: Constant bitrate value.
        :param 'MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettingsArgs' statmux_settings: Statmux settings. See Statmux Settings for more details.
        """
        if constant_bitrate is not None:
            pulumi.set(__self__, "constant_bitrate", constant_bitrate)
        if statmux_settings is not None:
            pulumi.set(__self__, "statmux_settings", statmux_settings)

    @property
    @pulumi.getter(name="constantBitrate")
    def constant_bitrate(self) -> Optional[int]:
        """
        Constant bitrate value.
        """
        return pulumi.get(self, "constant_bitrate")

    @property
    @pulumi.getter(name="statmuxSettings")
    def statmux_settings(self) -> Optional['outputs.MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings']:
        """
        Statmux settings. See Statmux Settings for more details.
        """
        return pulumi.get(self, "statmux_settings")


@pulumi.output_type
class MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumBitrate":
            suggest = "maximum_bitrate"
        elif key == "minimumBitrate":
            suggest = "minimum_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_bitrate: Optional[int] = None,
                 minimum_bitrate: Optional[int] = None,
                 priority: Optional[int] = None):
        """
        :param int maximum_bitrate: Maximum bitrate.
        :param int minimum_bitrate: Minimum bitrate.
        :param int priority: Priority value.
        """
        if maximum_bitrate is not None:
            pulumi.set(__self__, "maximum_bitrate", maximum_bitrate)
        if minimum_bitrate is not None:
            pulumi.set(__self__, "minimum_bitrate", minimum_bitrate)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="maximumBitrate")
    def maximum_bitrate(self) -> Optional[int]:
        """
        Maximum bitrate.
        """
        return pulumi.get(self, "maximum_bitrate")

    @property
    @pulumi.getter(name="minimumBitrate")
    def minimum_bitrate(self) -> Optional[int]:
        """
        Minimum bitrate.
        """
        return pulumi.get(self, "minimum_bitrate")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Priority value.
        """
        return pulumi.get(self, "priority")


