# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetConnectionResult',
    'AwaitableGetConnectionResult',
    'get_connection',
    'get_connection_output',
]

@pulumi.output_type
class GetConnectionResult:
    """
    A collection of values returned by getConnection.
    """
    def __init__(__self__, arn=None, connected_device_id=None, connected_link_id=None, connection_id=None, description=None, device_id=None, global_network_id=None, id=None, link_id=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if connected_device_id and not isinstance(connected_device_id, str):
            raise TypeError("Expected argument 'connected_device_id' to be a str")
        pulumi.set(__self__, "connected_device_id", connected_device_id)
        if connected_link_id and not isinstance(connected_link_id, str):
            raise TypeError("Expected argument 'connected_link_id' to be a str")
        pulumi.set(__self__, "connected_link_id", connected_link_id)
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_id and not isinstance(device_id, str):
            raise TypeError("Expected argument 'device_id' to be a str")
        pulumi.set(__self__, "device_id", device_id)
        if global_network_id and not isinstance(global_network_id, str):
            raise TypeError("Expected argument 'global_network_id' to be a str")
        pulumi.set(__self__, "global_network_id", global_network_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if link_id and not isinstance(link_id, str):
            raise TypeError("Expected argument 'link_id' to be a str")
        pulumi.set(__self__, "link_id", link_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the connection.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="connectedDeviceId")
    def connected_device_id(self) -> str:
        """
        ID of the second device in the connection.
        """
        return pulumi.get(self, "connected_device_id")

    @property
    @pulumi.getter(name="connectedLinkId")
    def connected_link_id(self) -> str:
        """
        ID of the link for the second device.
        """
        return pulumi.get(self, "connected_link_id")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        """
        ID of the first device in the connection.
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="globalNetworkId")
    def global_network_id(self) -> str:
        return pulumi.get(self, "global_network_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="linkId")
    def link_id(self) -> str:
        """
        ID of the link for the first device.
        """
        return pulumi.get(self, "link_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        Key-value tags for the connection.
        """
        return pulumi.get(self, "tags")


class AwaitableGetConnectionResult(GetConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionResult(
            arn=self.arn,
            connected_device_id=self.connected_device_id,
            connected_link_id=self.connected_link_id,
            connection_id=self.connection_id,
            description=self.description,
            device_id=self.device_id,
            global_network_id=self.global_network_id,
            id=self.id,
            link_id=self.link_id,
            tags=self.tags)


def get_connection(connection_id: Optional[str] = None,
                   global_network_id: Optional[str] = None,
                   tags: Optional[Mapping[str, str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionResult:
    """
    Retrieve information about a connection.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.networkmanager.get_connection(global_network_id=var["global_network_id"],
        connection_id=var["connection_id"])
    ```


    :param str connection_id: ID of the specific connection to retrieve.
    :param str global_network_id: ID of the Global Network of the connection to retrieve.
    :param Mapping[str, str] tags: Key-value tags for the connection.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['globalNetworkId'] = global_network_id
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:networkmanager/getConnection:getConnection', __args__, opts=opts, typ=GetConnectionResult).value

    return AwaitableGetConnectionResult(
        arn=__ret__.arn,
        connected_device_id=__ret__.connected_device_id,
        connected_link_id=__ret__.connected_link_id,
        connection_id=__ret__.connection_id,
        description=__ret__.description,
        device_id=__ret__.device_id,
        global_network_id=__ret__.global_network_id,
        id=__ret__.id,
        link_id=__ret__.link_id,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_connection)
def get_connection_output(connection_id: Optional[pulumi.Input[str]] = None,
                          global_network_id: Optional[pulumi.Input[str]] = None,
                          tags: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectionResult]:
    """
    Retrieve information about a connection.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.networkmanager.get_connection(global_network_id=var["global_network_id"],
        connection_id=var["connection_id"])
    ```


    :param str connection_id: ID of the specific connection to retrieve.
    :param str global_network_id: ID of the Global Network of the connection to retrieve.
    :param Mapping[str, str] tags: Key-value tags for the connection.
    """
    ...
