# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class WebAcl(pulumi.CustomResource):
    """
    Provides a WAF Web ACL Resource
    """
    def __init__(__self__, __name__, __opts__=None, default_action=None, metric_name=None, name=None, rules=None):
        """Create a WebAcl resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not default_action:
            raise TypeError('Missing required property default_action')
        elif not isinstance(default_action, dict):
            raise TypeError('Expected property default_action to be a dict')
        __self__.default_action = default_action
        """
        The action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
        """
        __props__['defaultAction'] = default_action

        if not metric_name:
            raise TypeError('Missing required property metric_name')
        elif not isinstance(metric_name, basestring):
            raise TypeError('Expected property metric_name to be a basestring')
        __self__.metric_name = metric_name
        """
        The name or description for the Amazon CloudWatch metric of this web ACL.
        """
        __props__['metricName'] = metric_name

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name or description of the web ACL.
        """
        __props__['name'] = name

        if rules and not isinstance(rules, list):
            raise TypeError('Expected property rules to be a list')
        __self__.rules = rules
        """
        The rules to associate with the web ACL and the settings for each rule.
        """
        __props__['rules'] = rules

        super(WebAcl, __self__).__init__(
            'aws:waf/webAcl:WebAcl',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'defaultAction' in outs:
            self.default_action = outs['defaultAction']
        if 'metricName' in outs:
            self.metric_name = outs['metricName']
        if 'name' in outs:
            self.name = outs['name']
        if 'rules' in outs:
            self.rules = outs['rules']
