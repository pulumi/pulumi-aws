# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'EnrollmentStatusTimeouts',
    'RecommendationPreferencesExternalMetricsPreference',
    'RecommendationPreferencesPreferredResource',
    'RecommendationPreferencesScope',
    'RecommendationPreferencesUtilizationPreference',
    'RecommendationPreferencesUtilizationPreferenceMetricParameters',
]

@pulumi.output_type
class EnrollmentStatusTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class RecommendationPreferencesExternalMetricsPreference(dict):
    def __init__(__self__, *,
                 source: _builtins.str):
        """
        :param _builtins.str source: The source options for external metrics preferences. Valid values: `Datadog`, `Dynatrace`, `NewRelic`, `Instana`.
        """
        pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The source options for external metrics preferences. Valid values: `Datadog`, `Dynatrace`, `NewRelic`, `Instana`.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class RecommendationPreferencesPreferredResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeLists":
            suggest = "exclude_lists"
        elif key == "includeLists":
            suggest = "include_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecommendationPreferencesPreferredResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecommendationPreferencesPreferredResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecommendationPreferencesPreferredResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 exclude_lists: Optional[Sequence[_builtins.str]] = None,
                 include_lists: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] exclude_lists: The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default.
        :param Sequence[_builtins.str] include_lists: The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as `"m5.large"`, or use wild card expressions, such as `"m5"`. If this isn’t specified, all supported resources are included by default.
        """
        pulumi.set(__self__, "name", name)
        if exclude_lists is not None:
            pulumi.set(__self__, "exclude_lists", exclude_lists)
        if include_lists is not None:
            pulumi.set(__self__, "include_lists", include_lists)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="excludeLists")
    def exclude_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default.
        """
        return pulumi.get(self, "exclude_lists")

    @_builtins.property
    @pulumi.getter(name="includeLists")
    def include_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as `"m5.large"`, or use wild card expressions, such as `"m5"`. If this isn’t specified, all supported resources are included by default.
        """
        return pulumi.get(self, "include_lists")


@pulumi.output_type
class RecommendationPreferencesScope(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The name of the scope. Valid values: `Organization`, `AccountId`, `ResourceArn`.
        :param _builtins.str value: The value of the scope. `ALL_ACCOUNTS` for `Organization` scopes, AWS account ID for `AccountId` scopes, ARN of an EC2 instance or an Auto Scaling group for `ResourceArn` scopes.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the scope. Valid values: `Organization`, `AccountId`, `ResourceArn`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the scope. `ALL_ACCOUNTS` for `Organization` scopes, AWS account ID for `AccountId` scopes, ARN of an EC2 instance or an Auto Scaling group for `ResourceArn` scopes.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RecommendationPreferencesUtilizationPreference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"
        elif key == "metricParameters":
            suggest = "metric_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecommendationPreferencesUtilizationPreference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecommendationPreferencesUtilizationPreference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecommendationPreferencesUtilizationPreference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_name: _builtins.str,
                 metric_parameters: Optional['outputs.RecommendationPreferencesUtilizationPreferenceMetricParameters'] = None):
        """
        :param _builtins.str metric_name: The name of the resource utilization metric name to customize. Valid values: `CpuUtilization`, `MemoryUtilization`.
        :param 'RecommendationPreferencesUtilizationPreferenceMetricParametersArgs' metric_parameters: The parameters to set when customizing the resource utilization thresholds.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        if metric_parameters is not None:
            pulumi.set(__self__, "metric_parameters", metric_parameters)

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the resource utilization metric name to customize. Valid values: `CpuUtilization`, `MemoryUtilization`.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="metricParameters")
    def metric_parameters(self) -> Optional['outputs.RecommendationPreferencesUtilizationPreferenceMetricParameters']:
        """
        The parameters to set when customizing the resource utilization thresholds.
        """
        return pulumi.get(self, "metric_parameters")


@pulumi.output_type
class RecommendationPreferencesUtilizationPreferenceMetricParameters(dict):
    def __init__(__self__, *,
                 headroom: _builtins.str,
                 threshold: Optional[_builtins.str] = None):
        """
        :param _builtins.str headroom: The headroom value in percentage used for the specified metric parameter. Valid values: `PERCENT_30`, `PERCENT_20`, `PERCENT_10`, `PERCENT_0`.
        :param _builtins.str threshold: The threshold value used for the specified metric parameter. You can only specify the threshold value for CPU utilization. Valid values: `P90`, `P95`, `P99_5`.
        """
        pulumi.set(__self__, "headroom", headroom)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @_builtins.property
    @pulumi.getter
    def headroom(self) -> _builtins.str:
        """
        The headroom value in percentage used for the specified metric parameter. Valid values: `PERCENT_30`, `PERCENT_20`, `PERCENT_10`, `PERCENT_0`.
        """
        return pulumi.get(self, "headroom")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[_builtins.str]:
        """
        The threshold value used for the specified metric parameter. You can only specify the threshold value for CPU utilization. Valid values: `P90`, `P95`, `P99_5`.
        """
        return pulumi.get(self, "threshold")


