# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EnrollmentStatusTimeoutsArgs',
    'EnrollmentStatusTimeoutsArgsDict',
    'RecommendationPreferencesExternalMetricsPreferenceArgs',
    'RecommendationPreferencesExternalMetricsPreferenceArgsDict',
    'RecommendationPreferencesPreferredResourceArgs',
    'RecommendationPreferencesPreferredResourceArgsDict',
    'RecommendationPreferencesScopeArgs',
    'RecommendationPreferencesScopeArgsDict',
    'RecommendationPreferencesUtilizationPreferenceArgs',
    'RecommendationPreferencesUtilizationPreferenceArgsDict',
    'RecommendationPreferencesUtilizationPreferenceMetricParametersArgs',
    'RecommendationPreferencesUtilizationPreferenceMetricParametersArgsDict',
]

MYPY = False

if not MYPY:
    class EnrollmentStatusTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    EnrollmentStatusTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnrollmentStatusTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class RecommendationPreferencesExternalMetricsPreferenceArgsDict(TypedDict):
        source: pulumi.Input[str]
        """
        The source options for external metrics preferences. Valid values: `Datadog`, `Dynatrace`, `NewRelic`, `Instana`.
        """
elif False:
    RecommendationPreferencesExternalMetricsPreferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecommendationPreferencesExternalMetricsPreferenceArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str]):
        """
        :param pulumi.Input[str] source: The source options for external metrics preferences. Valid values: `Datadog`, `Dynatrace`, `NewRelic`, `Instana`.
        """
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The source options for external metrics preferences. Valid values: `Datadog`, `Dynatrace`, `NewRelic`, `Instana`.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)


if not MYPY:
    class RecommendationPreferencesPreferredResourceArgsDict(TypedDict):
        name: pulumi.Input[str]
        exclude_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default.
        """
        include_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as `"m5.large"`, or use wild card expressions, such as `"m5"`. If this isn’t specified, all supported resources are included by default.
        """
elif False:
    RecommendationPreferencesPreferredResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecommendationPreferencesPreferredResourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 exclude_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_lists: The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] include_lists: The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as `"m5.large"`, or use wild card expressions, such as `"m5"`. If this isn’t specified, all supported resources are included by default.
        """
        pulumi.set(__self__, "name", name)
        if exclude_lists is not None:
            pulumi.set(__self__, "exclude_lists", exclude_lists)
        if include_lists is not None:
            pulumi.set(__self__, "include_lists", include_lists)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="excludeLists")
    def exclude_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The preferred resource type values to exclude from the recommendation candidates. If this isn’t specified, all supported resources are included by default.
        """
        return pulumi.get(self, "exclude_lists")

    @exclude_lists.setter
    def exclude_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_lists", value)

    @property
    @pulumi.getter(name="includeLists")
    def include_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The preferred resource type values to include in the recommendation candidates. You can specify the exact resource type value, such as `"m5.large"`, or use wild card expressions, such as `"m5"`. If this isn’t specified, all supported resources are included by default.
        """
        return pulumi.get(self, "include_lists")

    @include_lists.setter
    def include_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_lists", value)


if not MYPY:
    class RecommendationPreferencesScopeArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the scope. Valid values: `Organization`, `AccountId`, `ResourceArn`.
        """
        value: pulumi.Input[str]
        """
        The value of the scope. `ALL_ACCOUNTS` for `Organization` scopes, AWS account ID for `AccountId` scopes, ARN of an EC2 instance or an Auto Scaling group for `ResourceArn` scopes.
        """
elif False:
    RecommendationPreferencesScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecommendationPreferencesScopeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the scope. Valid values: `Organization`, `AccountId`, `ResourceArn`.
        :param pulumi.Input[str] value: The value of the scope. `ALL_ACCOUNTS` for `Organization` scopes, AWS account ID for `AccountId` scopes, ARN of an EC2 instance or an Auto Scaling group for `ResourceArn` scopes.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the scope. Valid values: `Organization`, `AccountId`, `ResourceArn`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the scope. `ALL_ACCOUNTS` for `Organization` scopes, AWS account ID for `AccountId` scopes, ARN of an EC2 instance or an Auto Scaling group for `ResourceArn` scopes.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RecommendationPreferencesUtilizationPreferenceArgsDict(TypedDict):
        metric_name: pulumi.Input[str]
        """
        The name of the resource utilization metric name to customize. Valid values: `CpuUtilization`, `MemoryUtilization`.
        """
        metric_parameters: NotRequired[pulumi.Input['RecommendationPreferencesUtilizationPreferenceMetricParametersArgsDict']]
        """
        The parameters to set when customizing the resource utilization thresholds.
        """
elif False:
    RecommendationPreferencesUtilizationPreferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecommendationPreferencesUtilizationPreferenceArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[str],
                 metric_parameters: Optional[pulumi.Input['RecommendationPreferencesUtilizationPreferenceMetricParametersArgs']] = None):
        """
        :param pulumi.Input[str] metric_name: The name of the resource utilization metric name to customize. Valid values: `CpuUtilization`, `MemoryUtilization`.
        :param pulumi.Input['RecommendationPreferencesUtilizationPreferenceMetricParametersArgs'] metric_parameters: The parameters to set when customizing the resource utilization thresholds.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        if metric_parameters is not None:
            pulumi.set(__self__, "metric_parameters", metric_parameters)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        """
        The name of the resource utilization metric name to customize. Valid values: `CpuUtilization`, `MemoryUtilization`.
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="metricParameters")
    def metric_parameters(self) -> Optional[pulumi.Input['RecommendationPreferencesUtilizationPreferenceMetricParametersArgs']]:
        """
        The parameters to set when customizing the resource utilization thresholds.
        """
        return pulumi.get(self, "metric_parameters")

    @metric_parameters.setter
    def metric_parameters(self, value: Optional[pulumi.Input['RecommendationPreferencesUtilizationPreferenceMetricParametersArgs']]):
        pulumi.set(self, "metric_parameters", value)


if not MYPY:
    class RecommendationPreferencesUtilizationPreferenceMetricParametersArgsDict(TypedDict):
        headroom: pulumi.Input[str]
        """
        The headroom value in percentage used for the specified metric parameter. Valid values: `PERCENT_30`, `PERCENT_20`, `PERCENT_10`, `PERCENT_0`.
        """
        threshold: NotRequired[pulumi.Input[str]]
        """
        The threshold value used for the specified metric parameter. You can only specify the threshold value for CPU utilization. Valid values: `P90`, `P95`, `P99_5`.
        """
elif False:
    RecommendationPreferencesUtilizationPreferenceMetricParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RecommendationPreferencesUtilizationPreferenceMetricParametersArgs:
    def __init__(__self__, *,
                 headroom: pulumi.Input[str],
                 threshold: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] headroom: The headroom value in percentage used for the specified metric parameter. Valid values: `PERCENT_30`, `PERCENT_20`, `PERCENT_10`, `PERCENT_0`.
        :param pulumi.Input[str] threshold: The threshold value used for the specified metric parameter. You can only specify the threshold value for CPU utilization. Valid values: `P90`, `P95`, `P99_5`.
        """
        pulumi.set(__self__, "headroom", headroom)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def headroom(self) -> pulumi.Input[str]:
        """
        The headroom value in percentage used for the specified metric parameter. Valid values: `PERCENT_30`, `PERCENT_20`, `PERCENT_10`, `PERCENT_0`.
        """
        return pulumi.get(self, "headroom")

    @headroom.setter
    def headroom(self, value: pulumi.Input[str]):
        pulumi.set(self, "headroom", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[str]]:
        """
        The threshold value used for the specified metric parameter. You can only specify the threshold value for CPU utilization. Valid values: `P90`, `P95`, `P99_5`.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold", value)


