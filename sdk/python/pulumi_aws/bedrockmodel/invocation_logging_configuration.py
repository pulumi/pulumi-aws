# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InvocationLoggingConfigurationArgs', 'InvocationLoggingConfiguration']

@pulumi.input_type
class InvocationLoggingConfigurationArgs:
    def __init__(__self__, *,
                 logging_config: Optional[pulumi.Input['InvocationLoggingConfigurationLoggingConfigArgs']] = None):
        """
        The set of arguments for constructing a InvocationLoggingConfiguration resource.
        :param pulumi.Input['InvocationLoggingConfigurationLoggingConfigArgs'] logging_config: The logging configuration values to set. See `logging_config`.
        """
        if logging_config is not None:
            pulumi.set(__self__, "logging_config", logging_config)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional[pulumi.Input['InvocationLoggingConfigurationLoggingConfigArgs']]:
        """
        The logging configuration values to set. See `logging_config`.
        """
        return pulumi.get(self, "logging_config")

    @logging_config.setter
    def logging_config(self, value: Optional[pulumi.Input['InvocationLoggingConfigurationLoggingConfigArgs']]):
        pulumi.set(self, "logging_config", value)


@pulumi.input_type
class _InvocationLoggingConfigurationState:
    def __init__(__self__, *,
                 logging_config: Optional[pulumi.Input['InvocationLoggingConfigurationLoggingConfigArgs']] = None):
        """
        Input properties used for looking up and filtering InvocationLoggingConfiguration resources.
        :param pulumi.Input['InvocationLoggingConfigurationLoggingConfigArgs'] logging_config: The logging configuration values to set. See `logging_config`.
        """
        if logging_config is not None:
            pulumi.set(__self__, "logging_config", logging_config)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional[pulumi.Input['InvocationLoggingConfigurationLoggingConfigArgs']]:
        """
        The logging configuration values to set. See `logging_config`.
        """
        return pulumi.get(self, "logging_config")

    @logging_config.setter
    def logging_config(self, value: Optional[pulumi.Input['InvocationLoggingConfigurationLoggingConfigArgs']]):
        pulumi.set(self, "logging_config", value)


class InvocationLoggingConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 logging_config: Optional[pulumi.Input[pulumi.InputType['InvocationLoggingConfigurationLoggingConfigArgs']]] = None,
                 __props__=None):
        """
        Manages Bedrock model invocation logging configuration.

        > Model invocation logging is configured per AWS region. To avoid overwriting settings, this resource should not be defined in multiple configurations.

        ## Example Usage

        ## Import

        Using `pulumi import`, import Bedrock custom model using the `id` set to the AWS region. For example:

        ```sh
         $ pulumi import aws:bedrockmodel/invocationLoggingConfiguration:InvocationLoggingConfiguration my_config us-east-1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['InvocationLoggingConfigurationLoggingConfigArgs']] logging_config: The logging configuration values to set. See `logging_config`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InvocationLoggingConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages Bedrock model invocation logging configuration.

        > Model invocation logging is configured per AWS region. To avoid overwriting settings, this resource should not be defined in multiple configurations.

        ## Example Usage

        ## Import

        Using `pulumi import`, import Bedrock custom model using the `id` set to the AWS region. For example:

        ```sh
         $ pulumi import aws:bedrockmodel/invocationLoggingConfiguration:InvocationLoggingConfiguration my_config us-east-1
        ```

        :param str resource_name: The name of the resource.
        :param InvocationLoggingConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InvocationLoggingConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 logging_config: Optional[pulumi.Input[pulumi.InputType['InvocationLoggingConfigurationLoggingConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InvocationLoggingConfigurationArgs.__new__(InvocationLoggingConfigurationArgs)

            __props__.__dict__["logging_config"] = logging_config
        super(InvocationLoggingConfiguration, __self__).__init__(
            'aws:bedrockmodel/invocationLoggingConfiguration:InvocationLoggingConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            logging_config: Optional[pulumi.Input[pulumi.InputType['InvocationLoggingConfigurationLoggingConfigArgs']]] = None) -> 'InvocationLoggingConfiguration':
        """
        Get an existing InvocationLoggingConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['InvocationLoggingConfigurationLoggingConfigArgs']] logging_config: The logging configuration values to set. See `logging_config`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InvocationLoggingConfigurationState.__new__(_InvocationLoggingConfigurationState)

        __props__.__dict__["logging_config"] = logging_config
        return InvocationLoggingConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> pulumi.Output[Optional['outputs.InvocationLoggingConfigurationLoggingConfig']]:
        """
        The logging configuration values to set. See `logging_config`.
        """
        return pulumi.get(self, "logging_config")

