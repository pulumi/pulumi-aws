# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InvocationLoggingConfigurationLoggingConfig',
    'InvocationLoggingConfigurationLoggingConfigCloudwatchConfig',
    'InvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3Config',
    'InvocationLoggingConfigurationLoggingConfigS3Config',
]

@pulumi.output_type
class InvocationLoggingConfigurationLoggingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "embeddingDataDeliveryEnabled":
            suggest = "embedding_data_delivery_enabled"
        elif key == "imageDataDeliveryEnabled":
            suggest = "image_data_delivery_enabled"
        elif key == "textDataDeliveryEnabled":
            suggest = "text_data_delivery_enabled"
        elif key == "cloudwatchConfig":
            suggest = "cloudwatch_config"
        elif key == "s3Config":
            suggest = "s3_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvocationLoggingConfigurationLoggingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvocationLoggingConfigurationLoggingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvocationLoggingConfigurationLoggingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 embedding_data_delivery_enabled: bool,
                 image_data_delivery_enabled: bool,
                 text_data_delivery_enabled: bool,
                 cloudwatch_config: Optional['outputs.InvocationLoggingConfigurationLoggingConfigCloudwatchConfig'] = None,
                 s3_config: Optional['outputs.InvocationLoggingConfigurationLoggingConfigS3Config'] = None):
        """
        :param bool embedding_data_delivery_enabled: Set to include embeddings data in the log delivery.
        :param bool image_data_delivery_enabled: Set to include image data in the log delivery.
        :param bool text_data_delivery_enabled: Set to include text data in the log delivery.
        :param 'InvocationLoggingConfigurationLoggingConfigCloudwatchConfigArgs' cloudwatch_config: CloudWatch logging configuration. See `cloudwatch_config`.
        :param 'InvocationLoggingConfigurationLoggingConfigS3ConfigArgs' s3_config: S3 configuration for storing log data. See `s3_config`.
        """
        pulumi.set(__self__, "embedding_data_delivery_enabled", embedding_data_delivery_enabled)
        pulumi.set(__self__, "image_data_delivery_enabled", image_data_delivery_enabled)
        pulumi.set(__self__, "text_data_delivery_enabled", text_data_delivery_enabled)
        if cloudwatch_config is not None:
            pulumi.set(__self__, "cloudwatch_config", cloudwatch_config)
        if s3_config is not None:
            pulumi.set(__self__, "s3_config", s3_config)

    @property
    @pulumi.getter(name="embeddingDataDeliveryEnabled")
    def embedding_data_delivery_enabled(self) -> bool:
        """
        Set to include embeddings data in the log delivery.
        """
        return pulumi.get(self, "embedding_data_delivery_enabled")

    @property
    @pulumi.getter(name="imageDataDeliveryEnabled")
    def image_data_delivery_enabled(self) -> bool:
        """
        Set to include image data in the log delivery.
        """
        return pulumi.get(self, "image_data_delivery_enabled")

    @property
    @pulumi.getter(name="textDataDeliveryEnabled")
    def text_data_delivery_enabled(self) -> bool:
        """
        Set to include text data in the log delivery.
        """
        return pulumi.get(self, "text_data_delivery_enabled")

    @property
    @pulumi.getter(name="cloudwatchConfig")
    def cloudwatch_config(self) -> Optional['outputs.InvocationLoggingConfigurationLoggingConfigCloudwatchConfig']:
        """
        CloudWatch logging configuration. See `cloudwatch_config`.
        """
        return pulumi.get(self, "cloudwatch_config")

    @property
    @pulumi.getter(name="s3Config")
    def s3_config(self) -> Optional['outputs.InvocationLoggingConfigurationLoggingConfigS3Config']:
        """
        S3 configuration for storing log data. See `s3_config`.
        """
        return pulumi.get(self, "s3_config")


@pulumi.output_type
class InvocationLoggingConfigurationLoggingConfigCloudwatchConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "largeDataDeliveryS3Config":
            suggest = "large_data_delivery_s3_config"
        elif key == "logGroupName":
            suggest = "log_group_name"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvocationLoggingConfigurationLoggingConfigCloudwatchConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvocationLoggingConfigurationLoggingConfigCloudwatchConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvocationLoggingConfigurationLoggingConfigCloudwatchConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 large_data_delivery_s3_config: Optional['outputs.InvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3Config'] = None,
                 log_group_name: Optional[str] = None,
                 role_arn: Optional[str] = None):
        """
        :param 'InvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigArgs' large_data_delivery_s3_config: S3 configuration for delivering a large amount of data. See `s3_config`.
        :param str log_group_name: Log group name.
        :param str role_arn: IAM Role ARN.
               
               The following arguments are optional:
        """
        if large_data_delivery_s3_config is not None:
            pulumi.set(__self__, "large_data_delivery_s3_config", large_data_delivery_s3_config)
        if log_group_name is not None:
            pulumi.set(__self__, "log_group_name", log_group_name)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="largeDataDeliveryS3Config")
    def large_data_delivery_s3_config(self) -> Optional['outputs.InvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3Config']:
        """
        S3 configuration for delivering a large amount of data. See `s3_config`.
        """
        return pulumi.get(self, "large_data_delivery_s3_config")

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> Optional[str]:
        """
        Log group name.
        """
        return pulumi.get(self, "log_group_name")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        IAM Role ARN.

        The following arguments are optional:
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class InvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "keyPrefix":
            suggest = "key_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: Optional[str] = None,
                 key_prefix: Optional[str] = None):
        """
        :param str bucket_name: S3 bucket name.
               
               The following arguments are optional:
        :param str key_prefix: S3 object key prefix.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if key_prefix is not None:
            pulumi.set(__self__, "key_prefix", key_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        S3 bucket name.

        The following arguments are optional:
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="keyPrefix")
    def key_prefix(self) -> Optional[str]:
        """
        S3 object key prefix.
        """
        return pulumi.get(self, "key_prefix")


@pulumi.output_type
class InvocationLoggingConfigurationLoggingConfigS3Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "keyPrefix":
            suggest = "key_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvocationLoggingConfigurationLoggingConfigS3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvocationLoggingConfigurationLoggingConfigS3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvocationLoggingConfigurationLoggingConfigS3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: Optional[str] = None,
                 key_prefix: Optional[str] = None):
        """
        :param str bucket_name: S3 bucket name.
               
               The following arguments are optional:
        :param str key_prefix: S3 object key prefix.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if key_prefix is not None:
            pulumi.set(__self__, "key_prefix", key_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        S3 bucket name.

        The following arguments are optional:
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="keyPrefix")
    def key_prefix(self) -> Optional[str]:
        """
        S3 object key prefix.
        """
        return pulumi.get(self, "key_prefix")


