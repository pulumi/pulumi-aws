# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'VirtualClusterContainerProvider',
    'VirtualClusterContainerProviderInfo',
    'VirtualClusterContainerProviderInfoEksInfo',
    'GetVirtualClusterContainerProviderResult',
    'GetVirtualClusterContainerProviderInfoResult',
    'GetVirtualClusterContainerProviderInfoEksInfoResult',
]

@pulumi.output_type
class VirtualClusterContainerProvider(dict):
    def __init__(__self__, *,
                 id: str,
                 info: 'outputs.VirtualClusterContainerProviderInfo',
                 type: str):
        """
        :param str id: The name of the container provider that is running your EMR Containers cluster
        :param 'VirtualClusterContainerProviderInfoArgs' info: Nested list containing information about the configuration of the container provider
        :param str type: The type of the container provider
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The name of the container provider that is running your EMR Containers cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def info(self) -> 'outputs.VirtualClusterContainerProviderInfo':
        """
        Nested list containing information about the configuration of the container provider
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the container provider
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualClusterContainerProviderInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eksInfo":
            suggest = "eks_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualClusterContainerProviderInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualClusterContainerProviderInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualClusterContainerProviderInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 eks_info: 'outputs.VirtualClusterContainerProviderInfoEksInfo'):
        """
        :param 'VirtualClusterContainerProviderInfoEksInfoArgs' eks_info: Nested list containing EKS-specific information about the cluster where the EMR Containers cluster is running
        """
        pulumi.set(__self__, "eks_info", eks_info)

    @property
    @pulumi.getter(name="eksInfo")
    def eks_info(self) -> 'outputs.VirtualClusterContainerProviderInfoEksInfo':
        """
        Nested list containing EKS-specific information about the cluster where the EMR Containers cluster is running
        """
        return pulumi.get(self, "eks_info")


@pulumi.output_type
class VirtualClusterContainerProviderInfoEksInfo(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None):
        """
        :param str namespace: The namespace where the EMR Containers cluster is running
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace where the EMR Containers cluster is running
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetVirtualClusterContainerProviderResult(dict):
    def __init__(__self__, *,
                 id: str,
                 infos: Sequence['outputs.GetVirtualClusterContainerProviderInfoResult'],
                 type: str):
        """
        :param str id: The name of the container provider that is running your EMR Containers cluster
        :param Sequence['GetVirtualClusterContainerProviderInfoArgs'] infos: Nested list containing information about the configuration of the container provider
        :param str type: The type of the container provider
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The name of the container provider that is running your EMR Containers cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetVirtualClusterContainerProviderInfoResult']:
        """
        Nested list containing information about the configuration of the container provider
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the container provider
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualClusterContainerProviderInfoResult(dict):
    def __init__(__self__, *,
                 eks_infos: Sequence['outputs.GetVirtualClusterContainerProviderInfoEksInfoResult']):
        """
        :param Sequence['GetVirtualClusterContainerProviderInfoEksInfoArgs'] eks_infos: Nested list containing EKS-specific information about the cluster where the EMR Containers cluster is running
        """
        pulumi.set(__self__, "eks_infos", eks_infos)

    @property
    @pulumi.getter(name="eksInfos")
    def eks_infos(self) -> Sequence['outputs.GetVirtualClusterContainerProviderInfoEksInfoResult']:
        """
        Nested list containing EKS-specific information about the cluster where the EMR Containers cluster is running
        """
        return pulumi.get(self, "eks_infos")


@pulumi.output_type
class GetVirtualClusterContainerProviderInfoEksInfoResult(dict):
    def __init__(__self__, *,
                 namespace: str):
        """
        :param str namespace: The namespace where the EMR Containers cluster is running
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace where the EMR Containers cluster is running
        """
        return pulumi.get(self, "namespace")


