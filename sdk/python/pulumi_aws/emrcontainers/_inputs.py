# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'JobTemplateJobTemplateDataArrgs',
    'JobTemplateJobTemplateDataConfigurationOverridesArrgs',
    'JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationArrgs',
    'JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationArrgs',
    'JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationArrgs',
    'JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationArrgs',
    'JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationArrgs',
    'JobTemplateJobTemplateDataJobDriverArrgs',
    'JobTemplateJobTemplateDataJobDriverSparkSqlJobDriverArrgs',
    'JobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverArrgs',
    'VirtualClusterContainerProviderArrgs',
    'VirtualClusterContainerProviderInfoArrgs',
    'VirtualClusterContainerProviderInfoEksInfoArrgs',
]

@pulumi.input_type
calass JobTemplateJobTemplateDataArrgs:
    def __init__(__self__, *,
                 execution_role_arn: pulumi.Input[str],
                 job_driver: pulumi.Input['JobTemplateJobTemplateDataJobDriverArrgs'],
                 release_label: pulumi.Input[str],
                 configuration_overrides: Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesArrgs']] = None,
                 job_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] execution_role_arn: The execution role ARN of the job run.
        :param pulumi.Input['JobTemplateJobTemplateDataJobDriverArrgs'] job_driver: Specify the driver that the job runs on. Exactly one of the two available job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
        :param pulumi.Input[str] release_label: The release version of Amazon EMR.
        :param pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesArrgs'] configuration_overrides: The configuration settings that are used to override defaults configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] job_tags: The tags assigned to jobs started using the job template.
        """
        pulumi.set(__self__, "execution_role_arn", execution_role_arn)
        pulumi.set(__self__, "job_driver", job_driver)
        pulumi.set(__self__, "release_label", release_label)
        if configuration_overrides is not None:
            pulumi.set(__self__, "configuration_overrides", configuration_overrides)
        if job_tags is not None:
            pulumi.set(__self__, "job_tags", job_tags)

    @property
    @pulumi.getter(name="executionRoleArn")
    def execution_role_arn(self) -> pulumi.Input[str]:
        """
        The execution role ARN of the job run.
        """
        return pulumi.get(self, "execution_role_arn")

    @execution_role_arn.setter
    def execution_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role_arn", value)

    @property
    @pulumi.getter(name="jobDriver")
    def job_driver(self) -> pulumi.Input['JobTemplateJobTemplateDataJobDriverArrgs']:
        """
        Specify the driver that the job runs on. Exactly one of the two available job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
        """
        return pulumi.get(self, "job_driver")

    @job_driver.setter
    def job_driver(self, value: pulumi.Input['JobTemplateJobTemplateDataJobDriverArrgs']):
        pulumi.set(self, "job_driver", value)

    @property
    @pulumi.getter(name="releaseLabel")
    def release_label(self) -> pulumi.Input[str]:
        """
        The release version of Amazon EMR.
        """
        return pulumi.get(self, "release_label")

    @release_label.setter
    def release_label(self, value: pulumi.Input[str]):
        pulumi.set(self, "release_label", value)

    @property
    @pulumi.getter(name="configurationOverrides")
    def configuration_overrides(self) -> Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesArrgs']]:
        """
        The configuration settings that are used to override defaults configuration.
        """
        return pulumi.get(self, "configuration_overrides")

    @configuration_overrides.setter
    def configuration_overrides(self, value: Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesArrgs']]):
        pulumi.set(self, "configuration_overrides", value)

    @property
    @pulumi.getter(name="jobTags")
    def job_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The tags assigned to jobs started using the job template.
        """
        return pulumi.get(self, "job_tags")

    @job_tags.setter
    def job_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "job_tags", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataConfigurationOverridesArrgs:
    def __init__(__self__, *,
                 application_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationArrgs']]]] = None,
                 monitoring_configuration: Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationArrgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationArrgs']]] application_configurations: The configurations for the application running by the job run.
        :param pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationArrgs'] monitoring_configuration: The configurations for monitoring.
        """
        if application_configurations is not None:
            pulumi.set(__self__, "application_configurations", application_configurations)
        if monitoring_configuration is not None:
            pulumi.set(__self__, "monitoring_configuration", monitoring_configuration)

    @property
    @pulumi.getter(name="applicationConfigurations")
    def application_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationArrgs']]]]:
        """
        The configurations for the application running by the job run.
        """
        return pulumi.get(self, "application_configurations")

    @application_configurations.setter
    def application_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationArrgs']]]]):
        pulumi.set(self, "application_configurations", value)

    @property
    @pulumi.getter(name="monitoringConfiguration")
    def monitoring_configuration(self) -> Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationArrgs']]:
        """
        The configurations for monitoring.
        """
        return pulumi.get(self, "monitoring_configuration")

    @monitoring_configuration.setter
    def monitoring_configuration(self, value: Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationArrgs']]):
        pulumi.set(self, "monitoring_configuration", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationArrgs:
    def __init__(__self__, *,
                 classification: pulumi.Input[str],
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationArrgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] classification: The classification within a configuration.
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationArrgs']]] configurations: A list of additional configurations to apply within a configuration object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A set of properties specified within a configuration classification.
        """
        pulumi.set(__self__, "classification", classification)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def classification(self) -> pulumi.Input[str]:
        """
        The classification within a configuration.
        """
        return pulumi.get(self, "classification")

    @classification.setter
    def classification(self, value: pulumi.Input[str]):
        pulumi.set(self, "classification", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationArrgs']]]]:
        """
        A list of additional configurations to apply within a configuration object.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationArrgs']]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of properties specified within a configuration classification.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationArrgs:
    def __init__(__self__, *,
                 classification: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] classification: The classification within a configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A set of properties specified within a configuration classification.
        """
        if classification is not None:
            pulumi.set(__self__, "classification", classification)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def classification(self) -> Optional[pulumi.Input[str]]:
        """
        The classification within a configuration.
        """
        return pulumi.get(self, "classification")

    @classification.setter
    def classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "classification", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of properties specified within a configuration classification.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationArrgs:
    def __init__(__self__, *,
                 cloud_watch_monitoring_configuration: Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationArrgs']] = None,
                 persistent_app_ui: Optional[pulumi.Input[str]] = None,
                 s3_monitoring_configuration: Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationArrgs']] = None):
        """
        :param pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationArrgs'] cloud_watch_monitoring_configuration: Monitoring configurations for CloudWatch.
        :param pulumi.Input[str] persistent_app_ui: Monitoring configurations for the persistent application UI.
        :param pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationArrgs'] s3_monitoring_configuration: Amazon S3 configuration for monitoring log publishing.
        """
        if cloud_watch_monitoring_configuration is not None:
            pulumi.set(__self__, "cloud_watch_monitoring_configuration", cloud_watch_monitoring_configuration)
        if persistent_app_ui is not None:
            pulumi.set(__self__, "persistent_app_ui", persistent_app_ui)
        if s3_monitoring_configuration is not None:
            pulumi.set(__self__, "s3_monitoring_configuration", s3_monitoring_configuration)

    @property
    @pulumi.getter(name="cloudWatchMonitoringConfiguration")
    def cloud_watch_monitoring_configuration(self) -> Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationArrgs']]:
        """
        Monitoring configurations for CloudWatch.
        """
        return pulumi.get(self, "cloud_watch_monitoring_configuration")

    @cloud_watch_monitoring_configuration.setter
    def cloud_watch_monitoring_configuration(self, value: Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationArrgs']]):
        pulumi.set(self, "cloud_watch_monitoring_configuration", value)

    @property
    @pulumi.getter(name="persistentAppUi")
    def persistent_app_ui(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring configurations for the persistent application UI.
        """
        return pulumi.get(self, "persistent_app_ui")

    @persistent_app_ui.setter
    def persistent_app_ui(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_app_ui", value)

    @property
    @pulumi.getter(name="s3MonitoringConfiguration")
    def s3_monitoring_configuration(self) -> Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationArrgs']]:
        """
        Amazon S3 configuration for monitoring log publishing.
        """
        return pulumi.get(self, "s3_monitoring_configuration")

    @s3_monitoring_configuration.setter
    def s3_monitoring_configuration(self, value: Optional[pulumi.Input['JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationArrgs']]):
        pulumi.set(self, "s3_monitoring_configuration", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationArrgs:
    def __init__(__self__, *,
                 log_group_name: pulumi.Input[str],
                 log_stream_name_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log_group_name: The name of the log group for log publishing.
        :param pulumi.Input[str] log_stream_name_prefix: The specified name prefix for log streams.
        """
        pulumi.set(__self__, "log_group_name", log_group_name)
        if log_stream_name_prefix is not None:
            pulumi.set(__self__, "log_stream_name_prefix", log_stream_name_prefix)

    @property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Input[str]:
        """
        The name of the log group for log publishing.
        """
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_group_name", value)

    @property
    @pulumi.getter(name="logStreamNamePrefix")
    def log_stream_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The specified name prefix for log streams.
        """
        return pulumi.get(self, "log_stream_name_prefix")

    @log_stream_name_prefix.setter
    def log_stream_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_stream_name_prefix", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationArrgs:
    def __init__(__self__, *,
                 log_uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] log_uri: Amazon S3 destination URI for log publishing.
        """
        pulumi.set(__self__, "log_uri", log_uri)

    @property
    @pulumi.getter(name="logUri")
    def log_uri(self) -> pulumi.Input[str]:
        """
        Amazon S3 destination URI for log publishing.
        """
        return pulumi.get(self, "log_uri")

    @log_uri.setter
    def log_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_uri", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataJobDriverArrgs:
    def __init__(__self__, *,
                 spark_sql_job_driver: Optional[pulumi.Input['JobTemplateJobTemplateDataJobDriverSparkSqlJobDriverArrgs']] = None,
                 spark_submit_job_driver: Optional[pulumi.Input['JobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverArrgs']] = None):
        """
        :param pulumi.Input['JobTemplateJobTemplateDataJobDriverSparkSqlJobDriverArrgs'] spark_sql_job_driver: The job driver for job type.
        :param pulumi.Input['JobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverArrgs'] spark_submit_job_driver: The job driver parameters specified for spark submit.
        """
        if spark_sql_job_driver is not None:
            pulumi.set(__self__, "spark_sql_job_driver", spark_sql_job_driver)
        if spark_submit_job_driver is not None:
            pulumi.set(__self__, "spark_submit_job_driver", spark_submit_job_driver)

    @property
    @pulumi.getter(name="sparkSqlJobDriver")
    def spark_sql_job_driver(self) -> Optional[pulumi.Input['JobTemplateJobTemplateDataJobDriverSparkSqlJobDriverArrgs']]:
        """
        The job driver for job type.
        """
        return pulumi.get(self, "spark_sql_job_driver")

    @spark_sql_job_driver.setter
    def spark_sql_job_driver(self, value: Optional[pulumi.Input['JobTemplateJobTemplateDataJobDriverSparkSqlJobDriverArrgs']]):
        pulumi.set(self, "spark_sql_job_driver", value)

    @property
    @pulumi.getter(name="sparkSubmitJobDriver")
    def spark_submit_job_driver(self) -> Optional[pulumi.Input['JobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverArrgs']]:
        """
        The job driver parameters specified for spark submit.
        """
        return pulumi.get(self, "spark_submit_job_driver")

    @spark_submit_job_driver.setter
    def spark_submit_job_driver(self, value: Optional[pulumi.Input['JobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverArrgs']]):
        pulumi.set(self, "spark_submit_job_driver", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataJobDriverSparkSqlJobDriverArrgs:
    def __init__(__self__, *,
                 entry_point: Optional[pulumi.Input[str]] = None,
                 spark_sql_parameters: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] entry_point: The SQL file to be executed.
        :param pulumi.Input[str] spark_sql_parameters: The Spark parameters to be included in the Spark SQL command.
        """
        if entry_point is not None:
            pulumi.set(__self__, "entry_point", entry_point)
        if spark_sql_parameters is not None:
            pulumi.set(__self__, "spark_sql_parameters", spark_sql_parameters)

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Optional[pulumi.Input[str]]:
        """
        The SQL file to be executed.
        """
        return pulumi.get(self, "entry_point")

    @entry_point.setter
    def entry_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entry_point", value)

    @property
    @pulumi.getter(name="sparkSqlParameters")
    def spark_sql_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The Spark parameters to be included in the Spark SQL command.
        """
        return pulumi.get(self, "spark_sql_parameters")

    @spark_sql_parameters.setter
    def spark_sql_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spark_sql_parameters", value)


@pulumi.input_type
calass JobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverArrgs:
    def __init__(__self__, *,
                 entry_point: pulumi.Input[str],
                 entry_point_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spark_submit_parameters: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] entry_point: The entry point of job application.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entry_point_arguments: The arguments for job application.
        :param pulumi.Input[str] spark_submit_parameters: The Spark submit parameters that are used for job runs.
        """
        pulumi.set(__self__, "entry_point", entry_point)
        if entry_point_arguments is not None:
            pulumi.set(__self__, "entry_point_arguments", entry_point_arguments)
        if spark_submit_parameters is not None:
            pulumi.set(__self__, "spark_submit_parameters", spark_submit_parameters)

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> pulumi.Input[str]:
        """
        The entry point of job application.
        """
        return pulumi.get(self, "entry_point")

    @entry_point.setter
    def entry_point(self, value: pulumi.Input[str]):
        pulumi.set(self, "entry_point", value)

    @property
    @pulumi.getter(name="entryPointArguments")
    def entry_point_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The arguments for job application.
        """
        return pulumi.get(self, "entry_point_arguments")

    @entry_point_arguments.setter
    def entry_point_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entry_point_arguments", value)

    @property
    @pulumi.getter(name="sparkSubmitParameters")
    def spark_submit_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The Spark submit parameters that are used for job runs.
        """
        return pulumi.get(self, "spark_submit_parameters")

    @spark_submit_parameters.setter
    def spark_submit_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spark_submit_parameters", value)


@pulumi.input_type
calass VirtualClusterContainerProviderArrgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 info: pulumi.Input['VirtualClusterContainerProviderInfoArrgs'],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: The name of the container provider that is running your EMR Containers cluster
        :param pulumi.Input['VirtualClusterContainerProviderInfoArrgs'] info: Nested list containing information about the configuration of the container provider
        :param pulumi.Input[str] type: The type of the container provider
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The name of the container provider that is running your EMR Containers cluster
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def info(self) -> pulumi.Input['VirtualClusterContainerProviderInfoArrgs']:
        """
        Nested list containing information about the configuration of the container provider
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: pulumi.Input['VirtualClusterContainerProviderInfoArrgs']):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the container provider
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
calass VirtualClusterContainerProviderInfoArrgs:
    def __init__(__self__, *,
                 eks_info: pulumi.Input['VirtualClusterContainerProviderInfoEksInfoArrgs']):
        """
        :param pulumi.Input['VirtualClusterContainerProviderInfoEksInfoArrgs'] eks_info: Nested list containing EKS-specific information about the cluster where the EMR Containers cluster is running
        """
        pulumi.set(__self__, "eks_info", eks_info)

    @property
    @pulumi.getter(name="eksInfo")
    def eks_info(self) -> pulumi.Input['VirtualClusterContainerProviderInfoEksInfoArrgs']:
        """
        Nested list containing EKS-specific information about the cluster where the EMR Containers cluster is running
        """
        return pulumi.get(self, "eks_info")

    @eks_info.setter
    def eks_info(self, value: pulumi.Input['VirtualClusterContainerProviderInfoEksInfoArrgs']):
        pulumi.set(self, "eks_info", value)


@pulumi.input_type
calass VirtualClusterContainerProviderInfoEksInfoArrgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] namespace: The namespace where the EMR Containers cluster is running
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace where the EMR Containers cluster is running
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


