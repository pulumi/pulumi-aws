# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Cluster(pulumi.CustomResource):
    """
    Provides an Neptune Cluster Resource. A Cluster Resource defines attributes that are
    applied to the entire cluster of Neptune Cluster Instances.
    
    Changes to a Neptune Cluster can occur when you manually change a
    parameter, such as `backup_retention_period`, and are reflected in the next maintenance
    window. Because of this, Terraform may report a difference in its planning
    phase because a modification has not yet taken place. You can use the
    `apply_immediately` flag to instruct the service to apply the change immediately
    (see documentation below).
    """
    def __init__(__self__, __name__, __opts__=None, apply_immediately=None, availability_zones=None, backup_retention_period=None, cluster_identifier=None, cluster_identifier_prefix=None, engine=None, engine_version=None, final_snapshot_identifier=None, iam_database_authentication_enabled=None, iam_roles=None, kms_key_arn=None, neptune_cluster_parameter_group_name=None, neptune_subnet_group_name=None, port=None, preferred_backup_window=None, preferred_maintenance_window=None, replication_source_identifier=None, skip_final_snapshot=None, snapshot_identifier=None, storage_encrypted=None, tags=None, vpc_security_group_ids=None):
        """Create a Cluster resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['applyImmediately'] = apply_immediately

        __props__['availabilityZones'] = availability_zones

        __props__['backupRetentionPeriod'] = backup_retention_period

        __props__['clusterIdentifier'] = cluster_identifier

        __props__['clusterIdentifierPrefix'] = cluster_identifier_prefix

        __props__['engine'] = engine

        __props__['engineVersion'] = engine_version

        __props__['finalSnapshotIdentifier'] = final_snapshot_identifier

        __props__['iamDatabaseAuthenticationEnabled'] = iam_database_authentication_enabled

        __props__['iamRoles'] = iam_roles

        __props__['kmsKeyArn'] = kms_key_arn

        __props__['neptuneClusterParameterGroupName'] = neptune_cluster_parameter_group_name

        __props__['neptuneSubnetGroupName'] = neptune_subnet_group_name

        __props__['port'] = port

        __props__['preferredBackupWindow'] = preferred_backup_window

        __props__['preferredMaintenanceWindow'] = preferred_maintenance_window

        __props__['replicationSourceIdentifier'] = replication_source_identifier

        __props__['skipFinalSnapshot'] = skip_final_snapshot

        __props__['snapshotIdentifier'] = snapshot_identifier

        __props__['storageEncrypted'] = storage_encrypted

        __props__['tags'] = tags

        __props__['vpcSecurityGroupIds'] = vpc_security_group_ids

        __props__['arn'] = None
        __props__['cluster_members'] = None
        __props__['cluster_resource_id'] = None
        __props__['endpoint'] = None
        __props__['hosted_zone_id'] = None
        __props__['reader_endpoint'] = None

        super(Cluster, __self__).__init__(
            'aws:neptune/cluster:Cluster',
            __name__,
            __props__,
            __opts__)

