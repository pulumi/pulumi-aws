# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetExportResult',
    'AwaitableGetExportResult',
    'get_export',
    'get_export_output',
]

@pulumi.output_type
class GetExportResult:
    """
    A collection of values returned by getExport.
    """
    def __init__(__self__, accepts=None, body=None, content_disposition=None, content_type=None, export_type=None, id=None, parameters=None, rest_api_id=None, stage_name=None):
        if accepts and not isinstance(accepts, str):
            raise TypeError("Expected argument 'accepts' to be a str")
        pulumi.set(__self__, "accepts", accepts)
        if body and not isinstance(body, str):
            raise TypeError("Expected argument 'body' to be a str")
        pulumi.set(__self__, "body", body)
        if content_disposition and not isinstance(content_disposition, str):
            raise TypeError("Expected argument 'content_disposition' to be a str")
        pulumi.set(__self__, "content_disposition", content_disposition)
        if content_type and not isinstance(content_type, str):
            raise TypeError("Expected argument 'content_type' to be a str")
        pulumi.set(__self__, "content_type", content_type)
        if export_type and not isinstance(export_type, str):
            raise TypeError("Expected argument 'export_type' to be a str")
        pulumi.set(__self__, "export_type", export_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if rest_api_id and not isinstance(rest_api_id, str):
            raise TypeError("Expected argument 'rest_api_id' to be a str")
        pulumi.set(__self__, "rest_api_id", rest_api_id)
        if stage_name and not isinstance(stage_name, str):
            raise TypeError("Expected argument 'stage_name' to be a str")
        pulumi.set(__self__, "stage_name", stage_name)

    @property
    @pulumi.getter
    def accepts(self) -> Optional[str]:
        return pulumi.get(self, "accepts")

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        API Spec.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> str:
        """
        Content-disposition header value in the HTTP response.
        """
        return pulumi.get(self, "content_disposition")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        Content-type header value in the HTTP response.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="exportType")
    def export_type(self) -> str:
        return pulumi.get(self, "export_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="restApiId")
    def rest_api_id(self) -> str:
        return pulumi.get(self, "rest_api_id")

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> str:
        return pulumi.get(self, "stage_name")


class AwaitableGetExportResult(GetExportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExportResult(
            accepts=self.accepts,
            body=self.body,
            content_disposition=self.content_disposition,
            content_type=self.content_type,
            export_type=self.export_type,
            id=self.id,
            parameters=self.parameters,
            rest_api_id=self.rest_api_id,
            stage_name=self.stage_name)


def get_export(accepts: Optional[str] = None,
               export_type: Optional[str] = None,
               parameters: Optional[Mapping[str, str]] = None,
               rest_api_id: Optional[str] = None,
               stage_name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExportResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.apigateway.get_export(rest_api_id=aws_api_gateway_stage["example"]["rest_api_id"],
        stage_name=aws_api_gateway_stage["example"]["stage_name"],
        export_type="oas30")
    ```


    :param str accepts: Content-type of the export. Valid values are `application/json` and `application/yaml` are supported for `export_type` `ofoas30` and `swagger`.
    :param str export_type: Type of export. Acceptable values are `oas30` for OpenAPI 3.0.x and `swagger` for Swagger/OpenAPI 2.0.
    :param Mapping[str, str] parameters: Key-value map of query string parameters that specify properties of the export. the following parameters are supported: `extensions='integrations'` or `extensions='apigateway'` will export the API with x-amazon-apigateway-integration extensions. `extensions='authorizers'` will export the API with x-amazon-apigateway-authorizer extensions.
    :param str rest_api_id: Identifier of the associated REST API.
    :param str stage_name: Name of the Stage that will be exported.
    """
    __args__ = dict()
    __args__['accepts'] = accepts
    __args__['exportType'] = export_type
    __args__['parameters'] = parameters
    __args__['restApiId'] = rest_api_id
    __args__['stageName'] = stage_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:apigateway/getExport:getExport', __args__, opts=opts, typ=GetExportResult).value

    return AwaitableGetExportResult(
        accepts=__ret__.accepts,
        body=__ret__.body,
        content_disposition=__ret__.content_disposition,
        content_type=__ret__.content_type,
        export_type=__ret__.export_type,
        id=__ret__.id,
        parameters=__ret__.parameters,
        rest_api_id=__ret__.rest_api_id,
        stage_name=__ret__.stage_name)


@_utilities.lift_output_func(get_export)
def get_export_output(accepts: Optional[pulumi.Input[Optional[str]]] = None,
                      export_type: Optional[pulumi.Input[str]] = None,
                      parameters: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                      rest_api_id: Optional[pulumi.Input[str]] = None,
                      stage_name: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetExportResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.apigateway.get_export(rest_api_id=aws_api_gateway_stage["example"]["rest_api_id"],
        stage_name=aws_api_gateway_stage["example"]["stage_name"],
        export_type="oas30")
    ```


    :param str accepts: Content-type of the export. Valid values are `application/json` and `application/yaml` are supported for `export_type` `ofoas30` and `swagger`.
    :param str export_type: Type of export. Acceptable values are `oas30` for OpenAPI 3.0.x and `swagger` for Swagger/OpenAPI 2.0.
    :param Mapping[str, str] parameters: Key-value map of query string parameters that specify properties of the export. the following parameters are supported: `extensions='integrations'` or `extensions='apigateway'` will export the API with x-amazon-apigateway-integration extensions. `extensions='authorizers'` will export the API with x-amazon-apigateway-authorizer extensions.
    :param str rest_api_id: Identifier of the associated REST API.
    :param str stage_name: Name of the Stage that will be exported.
    """
    ...
