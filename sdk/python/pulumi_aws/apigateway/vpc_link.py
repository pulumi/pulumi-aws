# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class VpcLink(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    The description of the VPC link.
    """
    name: pulumi.Output[str]
    """
    The name used to label and identify the VPC link.
    """
    target_arn: pulumi.Output[str]
    """
    The list of network load balancer arns in the VPC targeted by the VPC link. Currently AWS only supports 1 target.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, name=None, target_arn=None):
        """
        Provides an API Gateway VPC Link.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] description: The description of the VPC link.
        :param pulumi.Input[str] name: The name used to label and identify the VPC link.
        :param pulumi.Input[str] target_arn: The list of network load balancer arns in the VPC targeted by the VPC link. Currently AWS only supports 1 target.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        __props__['name'] = name

        if not target_arn:
            raise TypeError('Missing required property target_arn')
        __props__['target_arn'] = target_arn

        super(VpcLink, __self__).__init__(
            'aws:apigateway/vpcLink:VpcLink',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

