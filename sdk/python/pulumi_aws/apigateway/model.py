# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Model(pulumi.CustomResource):
    content_type: pulumi.Output[str]
    """
    The content type of the model
    """
    description: pulumi.Output[str]
    """
    The description of the model
    """
    name: pulumi.Output[str]
    """
    The name of the model
    """
    rest_api: pulumi.Output[str]
    """
    The ID of the associated REST API
    """
    schema: pulumi.Output[str]
    """
    The schema of the model in a JSON form
    """
    def __init__(__self__, resource_name, opts=None, content_type=None, description=None, name=None, rest_api=None, schema=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Model for a REST API Gateway.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_aws as aws

        my_demo_api = aws.apigateway.RestApi("myDemoAPI", description="This is my API for demonstration purposes")
        my_demo_model = aws.apigateway.Model("myDemoModel",
            content_type="application/json",
            description="a JSON schema",
            rest_api=my_demo_api.id,
            schema=\"\"\"{
          "type": "object"
        }

        \"\"\")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content_type: The content type of the model
        :param pulumi.Input[str] description: The description of the model
        :param pulumi.Input[str] name: The name of the model
        :param pulumi.Input[dict] rest_api: The ID of the associated REST API
        :param pulumi.Input[str] schema: The schema of the model in a JSON form
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if content_type is None:
                raise TypeError("Missing required property 'content_type'")
            __props__['content_type'] = content_type
            __props__['description'] = description
            __props__['name'] = name
            if rest_api is None:
                raise TypeError("Missing required property 'rest_api'")
            __props__['rest_api'] = rest_api
            __props__['schema'] = schema
        super(Model, __self__).__init__(
            'aws:apigateway/model:Model',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, content_type=None, description=None, name=None, rest_api=None, schema=None):
        """
        Get an existing Model resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content_type: The content type of the model
        :param pulumi.Input[str] description: The description of the model
        :param pulumi.Input[str] name: The name of the model
        :param pulumi.Input[dict] rest_api: The ID of the associated REST API
        :param pulumi.Input[str] schema: The schema of the model in a JSON form
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["content_type"] = content_type
        __props__["description"] = description
        __props__["name"] = name
        __props__["rest_api"] = rest_api
        __props__["schema"] = schema
        return Model(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

