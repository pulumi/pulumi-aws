# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Project(pulumi.CustomResource):
    arn: pulumi.Output[str]
    """
    The ARN of the CodeBuild project.
    """
    artifacts: pulumi.Output[dict]
    """
    Information about the project's build output artifacts. Artifact blocks are documented below.

      * `artifactIdentifier` (`str`) - The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
      * `encryptionDisabled` (`bool`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
      * `location` (`str`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
      * `name` (`str`) - The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
      * `namespaceType` (`str`) - The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
      * `overrideArtifactName` (`bool`) - If set to true, a name specified in the build spec file overrides the artifact name.
      * `packaging` (`str`) - The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
      * `path` (`str`) - If `type` is set to `S3`, this is the path to the output artifact
      * `type` (`str`) - The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
    """
    badge_enabled: pulumi.Output[bool]
    """
    Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
    """
    badge_url: pulumi.Output[str]
    """
    The URL of the build badge when `badge_enabled` is enabled.
    """
    build_timeout: pulumi.Output[float]
    """
    How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
    """
    cache: pulumi.Output[dict]
    """
    Information about the cache storage for the project. Cache blocks are documented below.

      * `location` (`str`) - The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
      * `modes` (`list`) - Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
      * `type` (`str`) - The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
    """
    description: pulumi.Output[str]
    """
    A short description of the project.
    """
    encryption_key: pulumi.Output[str]
    """
    The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
    """
    environment: pulumi.Output[dict]
    """
    Information about the project's build environment. Environment blocks are documented below.

      * `certificate` (`str`) - The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
      * `computeType` (`str`) - Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
      * `environmentVariables` (`list`) - A set of environment variables to make available to builds for this build project.
        * `name` (`str`) - The environment variable's name or key.
        * `type` (`str`) - The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
        * `value` (`str`) - The environment variable's value.

      * `image` (`str`) - The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
      * `imagePullCredentialsType` (`str`) - The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
      * `privilegedMode` (`bool`) - If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
      * `registryCredential` (`dict`) - Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
        * `credential` (`str`) - The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
        * `credentialProvider` (`str`) - The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.

      * `type` (`str`) - The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.
    """
    logs_config: pulumi.Output[dict]
    """
    Configuration for the builds to store log data to CloudWatch or S3.

      * `cloudwatchLogs` (`dict`) - Configuration for the builds to store logs to CloudWatch
        * `group_name` (`str`) - The group name of the logs in CloudWatch Logs.
        * `status` (`str`) - Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        * `streamName` (`str`) - The stream name of the logs in CloudWatch Logs.

      * `s3Logs` (`dict`) - Configuration for the builds to store logs to S3.
        * `encryptionDisabled` (`bool`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        * `location` (`str`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
        * `status` (`str`) - Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
    """
    name: pulumi.Output[str]
    """
    The projects name.
    """
    queued_timeout: pulumi.Output[float]
    """
    How long in minutes, from 5 to 480 (8 hours), a build is allowed to be queued before it times out. The default is 8 hours.
    """
    secondary_artifacts: pulumi.Output[list]
    """
    A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.

      * `artifactIdentifier` (`str`) - The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
      * `encryptionDisabled` (`bool`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
      * `location` (`str`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
      * `name` (`str`) - The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
      * `namespaceType` (`str`) - The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
      * `overrideArtifactName` (`bool`) - If set to true, a name specified in the build spec file overrides the artifact name.
      * `packaging` (`str`) - The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
      * `path` (`str`) - If `type` is set to `S3`, this is the path to the output artifact
      * `type` (`str`) - The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
    """
    secondary_sources: pulumi.Output[list]
    """
    A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.

      * `auths` (`list`) - Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        * `resource` (`str`) - The resource value that applies to the specified authorization type.
        * `type` (`str`) - The authorization type to use. The only valid value is `OAUTH`

      * `buildspec` (`str`) - The build spec declaration to use for this build project's related builds.
      * `gitCloneDepth` (`float`) - Truncate git history to this many commits.
      * `gitSubmodulesConfig` (`dict`) - Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        * `fetchSubmodules` (`bool`) - If set to true, fetches Git submodules for the AWS CodeBuild build project.

      * `insecureSsl` (`bool`) - Ignore SSL warnings when connecting to source control.
      * `location` (`str`) - The location of the source code from git or s3.
      * `reportBuildStatus` (`bool`) - Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
      * `sourceIdentifier` (`str`) - The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
      * `type` (`str`) - The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
    """
    service_role: pulumi.Output[str]
    """
    The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
    """
    source: pulumi.Output[dict]
    """
    Information about the project's input source code. Source blocks are documented below.

      * `auths` (`list`) - Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        * `resource` (`str`) - The resource value that applies to the specified authorization type.
        * `type` (`str`) - The authorization type to use. The only valid value is `OAUTH`

      * `buildspec` (`str`) - The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
      * `gitCloneDepth` (`float`) - Truncate git history to this many commits.
      * `gitSubmodulesConfig` (`dict`) - Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        * `fetchSubmodules` (`bool`) - If set to true, fetches Git submodules for the AWS CodeBuild build project.

      * `insecureSsl` (`bool`) - Ignore SSL warnings when connecting to source control.
      * `location` (`str`) - The location of the source code from git or s3.
      * `reportBuildStatus` (`bool`) - Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
      * `type` (`str`) - The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
    """
    source_version: pulumi.Output[str]
    """
    A version of the build input to be built for this project. If not specified, the latest version is used.
    """
    tags: pulumi.Output[dict]
    """
    A mapping of tags to assign to the resource.
    """
    vpc_config: pulumi.Output[dict]
    """
    Configuration for the builds to run inside a VPC. VPC config blocks are documented below.

      * `security_group_ids` (`list`) - The security group IDs to assign to running builds.
      * `subnets` (`list`) - The subnet IDs within which to run builds.
      * `vpc_id` (`str`) - The ID of the VPC within which to run builds.
    """
    def __init__(__self__, resource_name, opts=None, artifacts=None, badge_enabled=None, build_timeout=None, cache=None, description=None, encryption_key=None, environment=None, logs_config=None, name=None, queued_timeout=None, secondary_artifacts=None, secondary_sources=None, service_role=None, source=None, source_version=None, tags=None, vpc_config=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a CodeBuild Project resource. See also the [`codebuild.Webhook` resource](https://www.terraform.io/docs/providers/aws/r/codebuild_webhook.html), which manages the webhook to the source (e.g. the "rebuild every time a code change is pushed" option in the CodeBuild web console).



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] artifacts: Information about the project's build output artifacts. Artifact blocks are documented below.
        :param pulumi.Input[bool] badge_enabled: Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
        :param pulumi.Input[float] build_timeout: How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        :param pulumi.Input[dict] cache: Information about the cache storage for the project. Cache blocks are documented below.
        :param pulumi.Input[str] description: A short description of the project.
        :param pulumi.Input[str] encryption_key: The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
        :param pulumi.Input[dict] environment: Information about the project's build environment. Environment blocks are documented below.
        :param pulumi.Input[dict] logs_config: Configuration for the builds to store log data to CloudWatch or S3.
        :param pulumi.Input[str] name: The projects name.
        :param pulumi.Input[float] queued_timeout: How long in minutes, from 5 to 480 (8 hours), a build is allowed to be queued before it times out. The default is 8 hours.
        :param pulumi.Input[list] secondary_artifacts: A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
        :param pulumi.Input[list] secondary_sources: A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
        :param pulumi.Input[str] service_role: The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        :param pulumi.Input[dict] source: Information about the project's input source code. Source blocks are documented below.
        :param pulumi.Input[str] source_version: A version of the build input to be built for this project. If not specified, the latest version is used.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[dict] vpc_config: Configuration for the builds to run inside a VPC. VPC config blocks are documented below.

        The **artifacts** object supports the following:

          * `artifactIdentifier` (`pulumi.Input[str]`) - The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
          * `encryptionDisabled` (`pulumi.Input[bool]`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
          * `location` (`pulumi.Input[str]`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
          * `name` (`pulumi.Input[str]`) - The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
          * `namespaceType` (`pulumi.Input[str]`) - The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
          * `overrideArtifactName` (`pulumi.Input[bool]`) - If set to true, a name specified in the build spec file overrides the artifact name.
          * `packaging` (`pulumi.Input[str]`) - The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
          * `path` (`pulumi.Input[str]`) - If `type` is set to `S3`, this is the path to the output artifact
          * `type` (`pulumi.Input[str]`) - The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.

        The **cache** object supports the following:

          * `location` (`pulumi.Input[str]`) - The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
          * `modes` (`pulumi.Input[list]`) - Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
          * `type` (`pulumi.Input[str]`) - The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.

        The **environment** object supports the following:

          * `certificate` (`pulumi.Input[str]`) - The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
          * `computeType` (`pulumi.Input[str]`) - Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
          * `environmentVariables` (`pulumi.Input[list]`) - A set of environment variables to make available to builds for this build project.
            * `name` (`pulumi.Input[str]`) - The environment variable's name or key.
            * `type` (`pulumi.Input[str]`) - The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
            * `value` (`pulumi.Input[str]`) - The environment variable's value.

          * `image` (`pulumi.Input[str]`) - The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
          * `imagePullCredentialsType` (`pulumi.Input[str]`) - The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
          * `privilegedMode` (`pulumi.Input[bool]`) - If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
          * `registryCredential` (`pulumi.Input[dict]`) - Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
            * `credential` (`pulumi.Input[str]`) - The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
            * `credentialProvider` (`pulumi.Input[str]`) - The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.

          * `type` (`pulumi.Input[str]`) - The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.

        The **logs_config** object supports the following:

          * `cloudwatchLogs` (`pulumi.Input[dict]`) - Configuration for the builds to store logs to CloudWatch
            * `group_name` (`pulumi.Input[str]`) - The group name of the logs in CloudWatch Logs.
            * `status` (`pulumi.Input[str]`) - Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
            * `streamName` (`pulumi.Input[str]`) - The stream name of the logs in CloudWatch Logs.

          * `s3Logs` (`pulumi.Input[dict]`) - Configuration for the builds to store logs to S3.
            * `encryptionDisabled` (`pulumi.Input[bool]`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
            * `location` (`pulumi.Input[str]`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
            * `status` (`pulumi.Input[str]`) - Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.

        The **secondary_artifacts** object supports the following:

          * `artifactIdentifier` (`pulumi.Input[str]`) - The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
          * `encryptionDisabled` (`pulumi.Input[bool]`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
          * `location` (`pulumi.Input[str]`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
          * `name` (`pulumi.Input[str]`) - The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
          * `namespaceType` (`pulumi.Input[str]`) - The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
          * `overrideArtifactName` (`pulumi.Input[bool]`) - If set to true, a name specified in the build spec file overrides the artifact name.
          * `packaging` (`pulumi.Input[str]`) - The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
          * `path` (`pulumi.Input[str]`) - If `type` is set to `S3`, this is the path to the output artifact
          * `type` (`pulumi.Input[str]`) - The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.

        The **secondary_sources** object supports the following:

          * `auths` (`pulumi.Input[list]`) - Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
            * `resource` (`pulumi.Input[str]`) - The resource value that applies to the specified authorization type.
            * `type` (`pulumi.Input[str]`) - The authorization type to use. The only valid value is `OAUTH`

          * `buildspec` (`pulumi.Input[str]`) - The build spec declaration to use for this build project's related builds.
          * `gitCloneDepth` (`pulumi.Input[float]`) - Truncate git history to this many commits.
          * `gitSubmodulesConfig` (`pulumi.Input[dict]`) - Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
            * `fetchSubmodules` (`pulumi.Input[bool]`) - If set to true, fetches Git submodules for the AWS CodeBuild build project.

          * `insecureSsl` (`pulumi.Input[bool]`) - Ignore SSL warnings when connecting to source control.
          * `location` (`pulumi.Input[str]`) - The location of the source code from git or s3.
          * `reportBuildStatus` (`pulumi.Input[bool]`) - Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
          * `sourceIdentifier` (`pulumi.Input[str]`) - The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
          * `type` (`pulumi.Input[str]`) - The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.

        The **source** object supports the following:

          * `auths` (`pulumi.Input[list]`) - Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
            * `resource` (`pulumi.Input[str]`) - The resource value that applies to the specified authorization type.
            * `type` (`pulumi.Input[str]`) - The authorization type to use. The only valid value is `OAUTH`

          * `buildspec` (`pulumi.Input[str]`) - The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
          * `gitCloneDepth` (`pulumi.Input[float]`) - Truncate git history to this many commits.
          * `gitSubmodulesConfig` (`pulumi.Input[dict]`) - Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
            * `fetchSubmodules` (`pulumi.Input[bool]`) - If set to true, fetches Git submodules for the AWS CodeBuild build project.

          * `insecureSsl` (`pulumi.Input[bool]`) - Ignore SSL warnings when connecting to source control.
          * `location` (`pulumi.Input[str]`) - The location of the source code from git or s3.
          * `reportBuildStatus` (`pulumi.Input[bool]`) - Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
          * `type` (`pulumi.Input[str]`) - The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.

        The **vpc_config** object supports the following:

          * `security_group_ids` (`pulumi.Input[list]`) - The security group IDs to assign to running builds.
          * `subnets` (`pulumi.Input[list]`) - The subnet IDs within which to run builds.
          * `vpc_id` (`pulumi.Input[str]`) - The ID of the VPC within which to run builds.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if artifacts is None:
                raise TypeError("Missing required property 'artifacts'")
            __props__['artifacts'] = artifacts
            __props__['badge_enabled'] = badge_enabled
            __props__['build_timeout'] = build_timeout
            __props__['cache'] = cache
            __props__['description'] = description
            __props__['encryption_key'] = encryption_key
            if environment is None:
                raise TypeError("Missing required property 'environment'")
            __props__['environment'] = environment
            __props__['logs_config'] = logs_config
            __props__['name'] = name
            __props__['queued_timeout'] = queued_timeout
            __props__['secondary_artifacts'] = secondary_artifacts
            __props__['secondary_sources'] = secondary_sources
            if service_role is None:
                raise TypeError("Missing required property 'service_role'")
            __props__['service_role'] = service_role
            if source is None:
                raise TypeError("Missing required property 'source'")
            __props__['source'] = source
            __props__['source_version'] = source_version
            __props__['tags'] = tags
            __props__['vpc_config'] = vpc_config
            __props__['arn'] = None
            __props__['badge_url'] = None
        super(Project, __self__).__init__(
            'aws:codebuild/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, arn=None, artifacts=None, badge_enabled=None, badge_url=None, build_timeout=None, cache=None, description=None, encryption_key=None, environment=None, logs_config=None, name=None, queued_timeout=None, secondary_artifacts=None, secondary_sources=None, service_role=None, source=None, source_version=None, tags=None, vpc_config=None):
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: The ARN of the CodeBuild project.
        :param pulumi.Input[dict] artifacts: Information about the project's build output artifacts. Artifact blocks are documented below.
        :param pulumi.Input[bool] badge_enabled: Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
        :param pulumi.Input[str] badge_url: The URL of the build badge when `badge_enabled` is enabled.
        :param pulumi.Input[float] build_timeout: How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        :param pulumi.Input[dict] cache: Information about the cache storage for the project. Cache blocks are documented below.
        :param pulumi.Input[str] description: A short description of the project.
        :param pulumi.Input[str] encryption_key: The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
        :param pulumi.Input[dict] environment: Information about the project's build environment. Environment blocks are documented below.
        :param pulumi.Input[dict] logs_config: Configuration for the builds to store log data to CloudWatch or S3.
        :param pulumi.Input[str] name: The projects name.
        :param pulumi.Input[float] queued_timeout: How long in minutes, from 5 to 480 (8 hours), a build is allowed to be queued before it times out. The default is 8 hours.
        :param pulumi.Input[list] secondary_artifacts: A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
        :param pulumi.Input[list] secondary_sources: A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
        :param pulumi.Input[str] service_role: The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        :param pulumi.Input[dict] source: Information about the project's input source code. Source blocks are documented below.
        :param pulumi.Input[str] source_version: A version of the build input to be built for this project. If not specified, the latest version is used.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource.
        :param pulumi.Input[dict] vpc_config: Configuration for the builds to run inside a VPC. VPC config blocks are documented below.

        The **artifacts** object supports the following:

          * `artifactIdentifier` (`pulumi.Input[str]`) - The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
          * `encryptionDisabled` (`pulumi.Input[bool]`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
          * `location` (`pulumi.Input[str]`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
          * `name` (`pulumi.Input[str]`) - The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
          * `namespaceType` (`pulumi.Input[str]`) - The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
          * `overrideArtifactName` (`pulumi.Input[bool]`) - If set to true, a name specified in the build spec file overrides the artifact name.
          * `packaging` (`pulumi.Input[str]`) - The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
          * `path` (`pulumi.Input[str]`) - If `type` is set to `S3`, this is the path to the output artifact
          * `type` (`pulumi.Input[str]`) - The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.

        The **cache** object supports the following:

          * `location` (`pulumi.Input[str]`) - The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
          * `modes` (`pulumi.Input[list]`) - Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
          * `type` (`pulumi.Input[str]`) - The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.

        The **environment** object supports the following:

          * `certificate` (`pulumi.Input[str]`) - The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
          * `computeType` (`pulumi.Input[str]`) - Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
          * `environmentVariables` (`pulumi.Input[list]`) - A set of environment variables to make available to builds for this build project.
            * `name` (`pulumi.Input[str]`) - The environment variable's name or key.
            * `type` (`pulumi.Input[str]`) - The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`.
            * `value` (`pulumi.Input[str]`) - The environment variable's value.

          * `image` (`pulumi.Input[str]`) - The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
          * `imagePullCredentialsType` (`pulumi.Input[str]`) - The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
          * `privilegedMode` (`pulumi.Input[bool]`) - If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
          * `registryCredential` (`pulumi.Input[dict]`) - Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
            * `credential` (`pulumi.Input[str]`) - The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
            * `credentialProvider` (`pulumi.Input[str]`) - The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.

          * `type` (`pulumi.Input[str]`) - The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` or `ARM_CONTAINER`.

        The **logs_config** object supports the following:

          * `cloudwatchLogs` (`pulumi.Input[dict]`) - Configuration for the builds to store logs to CloudWatch
            * `group_name` (`pulumi.Input[str]`) - The group name of the logs in CloudWatch Logs.
            * `status` (`pulumi.Input[str]`) - Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
            * `streamName` (`pulumi.Input[str]`) - The stream name of the logs in CloudWatch Logs.

          * `s3Logs` (`pulumi.Input[dict]`) - Configuration for the builds to store logs to S3.
            * `encryptionDisabled` (`pulumi.Input[bool]`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
            * `location` (`pulumi.Input[str]`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
            * `status` (`pulumi.Input[str]`) - Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.

        The **secondary_artifacts** object supports the following:

          * `artifactIdentifier` (`pulumi.Input[str]`) - The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
          * `encryptionDisabled` (`pulumi.Input[bool]`) - If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
          * `location` (`pulumi.Input[str]`) - Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
          * `name` (`pulumi.Input[str]`) - The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
          * `namespaceType` (`pulumi.Input[str]`) - The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
          * `overrideArtifactName` (`pulumi.Input[bool]`) - If set to true, a name specified in the build spec file overrides the artifact name.
          * `packaging` (`pulumi.Input[str]`) - The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
          * `path` (`pulumi.Input[str]`) - If `type` is set to `S3`, this is the path to the output artifact
          * `type` (`pulumi.Input[str]`) - The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.

        The **secondary_sources** object supports the following:

          * `auths` (`pulumi.Input[list]`) - Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
            * `resource` (`pulumi.Input[str]`) - The resource value that applies to the specified authorization type.
            * `type` (`pulumi.Input[str]`) - The authorization type to use. The only valid value is `OAUTH`

          * `buildspec` (`pulumi.Input[str]`) - The build spec declaration to use for this build project's related builds.
          * `gitCloneDepth` (`pulumi.Input[float]`) - Truncate git history to this many commits.
          * `gitSubmodulesConfig` (`pulumi.Input[dict]`) - Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
            * `fetchSubmodules` (`pulumi.Input[bool]`) - If set to true, fetches Git submodules for the AWS CodeBuild build project.

          * `insecureSsl` (`pulumi.Input[bool]`) - Ignore SSL warnings when connecting to source control.
          * `location` (`pulumi.Input[str]`) - The location of the source code from git or s3.
          * `reportBuildStatus` (`pulumi.Input[bool]`) - Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
          * `sourceIdentifier` (`pulumi.Input[str]`) - The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
          * `type` (`pulumi.Input[str]`) - The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.

        The **source** object supports the following:

          * `auths` (`pulumi.Input[list]`) - Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
            * `resource` (`pulumi.Input[str]`) - The resource value that applies to the specified authorization type.
            * `type` (`pulumi.Input[str]`) - The authorization type to use. The only valid value is `OAUTH`

          * `buildspec` (`pulumi.Input[str]`) - The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
          * `gitCloneDepth` (`pulumi.Input[float]`) - Truncate git history to this many commits.
          * `gitSubmodulesConfig` (`pulumi.Input[dict]`) - Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
            * `fetchSubmodules` (`pulumi.Input[bool]`) - If set to true, fetches Git submodules for the AWS CodeBuild build project.

          * `insecureSsl` (`pulumi.Input[bool]`) - Ignore SSL warnings when connecting to source control.
          * `location` (`pulumi.Input[str]`) - The location of the source code from git or s3.
          * `reportBuildStatus` (`pulumi.Input[bool]`) - Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
          * `type` (`pulumi.Input[str]`) - The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.

        The **vpc_config** object supports the following:

          * `security_group_ids` (`pulumi.Input[list]`) - The security group IDs to assign to running builds.
          * `subnets` (`pulumi.Input[list]`) - The subnet IDs within which to run builds.
          * `vpc_id` (`pulumi.Input[str]`) - The ID of the VPC within which to run builds.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["arn"] = arn
        __props__["artifacts"] = artifacts
        __props__["badge_enabled"] = badge_enabled
        __props__["badge_url"] = badge_url
        __props__["build_timeout"] = build_timeout
        __props__["cache"] = cache
        __props__["description"] = description
        __props__["encryption_key"] = encryption_key
        __props__["environment"] = environment
        __props__["logs_config"] = logs_config
        __props__["name"] = name
        __props__["queued_timeout"] = queued_timeout
        __props__["secondary_artifacts"] = secondary_artifacts
        __props__["secondary_sources"] = secondary_sources
        __props__["service_role"] = service_role
        __props__["source"] = source
        __props__["source_version"] = source_version
        __props__["tags"] = tags
        __props__["vpc_config"] = vpc_config
        return Project(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

