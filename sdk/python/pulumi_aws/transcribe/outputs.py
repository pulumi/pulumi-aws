# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'LanguageModelInputDataConfig',
]

@pulumi.output_type
class LanguageModelInputDataConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAccessRoleArn":
            suggest = "data_access_role_arn"
        elif key == "s3Uri":
            suggest = "s3_uri"
        elif key == "tuningDataS3Uri":
            suggest = "tuning_data_s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LanguageModelInputDataConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LanguageModelInputDataConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LanguageModelInputDataConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_access_role_arn: str,
                 s3_uri: str,
                 tuning_data_s3_uri: Optional[str] = None):
        """
        :param str data_access_role_arn: IAM role with access to S3 bucket.
        :param str s3_uri: S3 URI where training data is located.
        :param str tuning_data_s3_uri: S3 URI where tuning data is located.
        """
        pulumi.set(__self__, "data_access_role_arn", data_access_role_arn)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if tuning_data_s3_uri is not None:
            pulumi.set(__self__, "tuning_data_s3_uri", tuning_data_s3_uri)

    @property
    @pulumi.getter(name="dataAccessRoleArn")
    def data_access_role_arn(self) -> str:
        """
        IAM role with access to S3 bucket.
        """
        return pulumi.get(self, "data_access_role_arn")

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        S3 URI where training data is located.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="tuningDataS3Uri")
    def tuning_data_s3_uri(self) -> Optional[str]:
        """
        S3 URI where tuning data is located.
        """
        return pulumi.get(self, "tuning_data_s3_uri")


