# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Route(pulumi.CustomResource):
    api_id: pulumi.Output[str]
    """
    The API identifier.
    """
    api_key_required: pulumi.Output[bool]
    """
    Boolean whether an API key is required for the route. Defaults to `false`.
    """
    authorization_scopes: pulumi.Output[list]
    """
    The authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
    """
    authorization_type: pulumi.Output[str]
    """
    The authorization type for the route.
    For WebSocket APIs, valid values are `NONE` for open access, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.
    For HTTP APIs, valid values are `NONE` for open access, or `JWT` for using JSON Web Tokens.
    Defaults to `NONE`.
    """
    authorizer_id: pulumi.Output[str]
    """
    The identifier of the `apigatewayv2.Authorizer` resource to be associated with this route, if the authorizationType is `CUSTOM`.
    """
    model_selection_expression: pulumi.Output[str]
    """
    The [model selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions) for the route.
    """
    operation_name: pulumi.Output[str]
    """
    The operation name for the route.
    """
    request_models: pulumi.Output[dict]
    """
    The request models for the route.
    """
    route_key: pulumi.Output[str]
    """
    The route key for the route.
    """
    route_response_selection_expression: pulumi.Output[str]
    """
    The [route response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-route-response-selection-expressions) for the route.
    """
    target: pulumi.Output[str]
    """
    The target for the route.
    """
    def __init__(__self__, resource_name, opts=None, api_id=None, api_key_required=None, authorization_scopes=None, authorization_type=None, authorizer_id=None, model_selection_expression=None, operation_name=None, request_models=None, route_key=None, route_response_selection_expression=None, target=None, __props__=None, __name__=None, __opts__=None):
        """
        Manages an Amazon API Gateway Version 2 route.
        More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).

        ## Example Usage

        ### Basic

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.apigatewayv2.Route("example",
            api_id=aws_apigatewayv2_api["example"]["id"],
            route_key="$default")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_id: The API identifier.
        :param pulumi.Input[bool] api_key_required: Boolean whether an API key is required for the route. Defaults to `false`.
        :param pulumi.Input[list] authorization_scopes: The authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
        :param pulumi.Input[str] authorization_type: The authorization type for the route.
               For WebSocket APIs, valid values are `NONE` for open access, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.
               For HTTP APIs, valid values are `NONE` for open access, or `JWT` for using JSON Web Tokens.
               Defaults to `NONE`.
        :param pulumi.Input[str] authorizer_id: The identifier of the `apigatewayv2.Authorizer` resource to be associated with this route, if the authorizationType is `CUSTOM`.
        :param pulumi.Input[str] model_selection_expression: The [model selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions) for the route.
        :param pulumi.Input[str] operation_name: The operation name for the route.
        :param pulumi.Input[dict] request_models: The request models for the route.
        :param pulumi.Input[str] route_key: The route key for the route.
        :param pulumi.Input[str] route_response_selection_expression: The [route response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-route-response-selection-expressions) for the route.
        :param pulumi.Input[str] target: The target for the route.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if api_id is None:
                raise TypeError("Missing required property 'api_id'")
            __props__['api_id'] = api_id
            __props__['api_key_required'] = api_key_required
            __props__['authorization_scopes'] = authorization_scopes
            __props__['authorization_type'] = authorization_type
            __props__['authorizer_id'] = authorizer_id
            __props__['model_selection_expression'] = model_selection_expression
            __props__['operation_name'] = operation_name
            __props__['request_models'] = request_models
            if route_key is None:
                raise TypeError("Missing required property 'route_key'")
            __props__['route_key'] = route_key
            __props__['route_response_selection_expression'] = route_response_selection_expression
            __props__['target'] = target
        super(Route, __self__).__init__(
            'aws:apigatewayv2/route:Route',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, api_id=None, api_key_required=None, authorization_scopes=None, authorization_type=None, authorizer_id=None, model_selection_expression=None, operation_name=None, request_models=None, route_key=None, route_response_selection_expression=None, target=None):
        """
        Get an existing Route resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_id: The API identifier.
        :param pulumi.Input[bool] api_key_required: Boolean whether an API key is required for the route. Defaults to `false`.
        :param pulumi.Input[list] authorization_scopes: The authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
        :param pulumi.Input[str] authorization_type: The authorization type for the route.
               For WebSocket APIs, valid values are `NONE` for open access, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.
               For HTTP APIs, valid values are `NONE` for open access, or `JWT` for using JSON Web Tokens.
               Defaults to `NONE`.
        :param pulumi.Input[str] authorizer_id: The identifier of the `apigatewayv2.Authorizer` resource to be associated with this route, if the authorizationType is `CUSTOM`.
        :param pulumi.Input[str] model_selection_expression: The [model selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions) for the route.
        :param pulumi.Input[str] operation_name: The operation name for the route.
        :param pulumi.Input[dict] request_models: The request models for the route.
        :param pulumi.Input[str] route_key: The route key for the route.
        :param pulumi.Input[str] route_response_selection_expression: The [route response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-route-response-selection-expressions) for the route.
        :param pulumi.Input[str] target: The target for the route.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["api_id"] = api_id
        __props__["api_key_required"] = api_key_required
        __props__["authorization_scopes"] = authorization_scopes
        __props__["authorization_type"] = authorization_type
        __props__["authorizer_id"] = authorizer_id
        __props__["model_selection_expression"] = model_selection_expression
        __props__["operation_name"] = operation_name
        __props__["request_models"] = request_models
        __props__["route_key"] = route_key
        __props__["route_response_selection_expression"] = route_response_selection_expression
        __props__["target"] = target
        return Route(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

