# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InsightFiltersArgs',
    'InsightFiltersAwsAccountIdArgs',
    'InsightFiltersCompanyNameArgs',
    'InsightFiltersComplianceStatusArgs',
    'InsightFiltersConfidenceArgs',
    'InsightFiltersCreatedAtArgs',
    'InsightFiltersCreatedAtDateRangeArgs',
    'InsightFiltersCriticalityArgs',
    'InsightFiltersDescriptionArgs',
    'InsightFiltersFindingProviderFieldsConfidenceArgs',
    'InsightFiltersFindingProviderFieldsCriticalityArgs',
    'InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs',
    'InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs',
    'InsightFiltersFindingProviderFieldsSeverityLabelArgs',
    'InsightFiltersFindingProviderFieldsSeverityOriginalArgs',
    'InsightFiltersFindingProviderFieldsTypeArgs',
    'InsightFiltersFirstObservedAtArgs',
    'InsightFiltersFirstObservedAtDateRangeArgs',
    'InsightFiltersGeneratorIdArgs',
    'InsightFiltersIdArgs',
    'InsightFiltersKeywordArgs',
    'InsightFiltersLastObservedAtArgs',
    'InsightFiltersLastObservedAtDateRangeArgs',
    'InsightFiltersMalwareNameArgs',
    'InsightFiltersMalwarePathArgs',
    'InsightFiltersMalwareStateArgs',
    'InsightFiltersMalwareTypeArgs',
    'InsightFiltersNetworkDestinationDomainArgs',
    'InsightFiltersNetworkDestinationIpv4Args',
    'InsightFiltersNetworkDestinationIpv6Args',
    'InsightFiltersNetworkDestinationPortArgs',
    'InsightFiltersNetworkDirectionArgs',
    'InsightFiltersNetworkProtocolArgs',
    'InsightFiltersNetworkSourceDomainArgs',
    'InsightFiltersNetworkSourceIpv4Args',
    'InsightFiltersNetworkSourceIpv6Args',
    'InsightFiltersNetworkSourceMacArgs',
    'InsightFiltersNetworkSourcePortArgs',
    'InsightFiltersNoteTextArgs',
    'InsightFiltersNoteUpdatedAtArgs',
    'InsightFiltersNoteUpdatedAtDateRangeArgs',
    'InsightFiltersNoteUpdatedByArgs',
    'InsightFiltersProcessLaunchedAtArgs',
    'InsightFiltersProcessLaunchedAtDateRangeArgs',
    'InsightFiltersProcessNameArgs',
    'InsightFiltersProcessParentPidArgs',
    'InsightFiltersProcessPathArgs',
    'InsightFiltersProcessPidArgs',
    'InsightFiltersProcessTerminatedAtArgs',
    'InsightFiltersProcessTerminatedAtDateRangeArgs',
    'InsightFiltersProductArnArgs',
    'InsightFiltersProductFieldArgs',
    'InsightFiltersProductNameArgs',
    'InsightFiltersRecommendationTextArgs',
    'InsightFiltersRecordStateArgs',
    'InsightFiltersRelatedFindingsIdArgs',
    'InsightFiltersRelatedFindingsProductArnArgs',
    'InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs',
    'InsightFiltersResourceAwsEc2InstanceImageIdArgs',
    'InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs',
    'InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs',
    'InsightFiltersResourceAwsEc2InstanceKeyNameArgs',
    'InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs',
    'InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs',
    'InsightFiltersResourceAwsEc2InstanceSubnetIdArgs',
    'InsightFiltersResourceAwsEc2InstanceTypeArgs',
    'InsightFiltersResourceAwsEc2InstanceVpcIdArgs',
    'InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs',
    'InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs',
    'InsightFiltersResourceAwsIamAccessKeyStatusArgs',
    'InsightFiltersResourceAwsIamAccessKeyUserNameArgs',
    'InsightFiltersResourceAwsS3BucketOwnerIdArgs',
    'InsightFiltersResourceAwsS3BucketOwnerNameArgs',
    'InsightFiltersResourceContainerImageIdArgs',
    'InsightFiltersResourceContainerImageNameArgs',
    'InsightFiltersResourceContainerLaunchedAtArgs',
    'InsightFiltersResourceContainerLaunchedAtDateRangeArgs',
    'InsightFiltersResourceContainerNameArgs',
    'InsightFiltersResourceDetailsOtherArgs',
    'InsightFiltersResourceIdArgs',
    'InsightFiltersResourcePartitionArgs',
    'InsightFiltersResourceRegionArgs',
    'InsightFiltersResourceTagArgs',
    'InsightFiltersResourceTypeArgs',
    'InsightFiltersSeverityLabelArgs',
    'InsightFiltersSourceUrlArgs',
    'InsightFiltersThreatIntelIndicatorCategoryArgs',
    'InsightFiltersThreatIntelIndicatorLastObservedAtArgs',
    'InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs',
    'InsightFiltersThreatIntelIndicatorSourceArgs',
    'InsightFiltersThreatIntelIndicatorSourceUrlArgs',
    'InsightFiltersThreatIntelIndicatorTypeArgs',
    'InsightFiltersThreatIntelIndicatorValueArgs',
    'InsightFiltersTitleArgs',
    'InsightFiltersTypeArgs',
    'InsightFiltersUpdatedAtArgs',
    'InsightFiltersUpdatedAtDateRangeArgs',
    'InsightFiltersUserDefinedValueArgs',
    'InsightFiltersVerificationStateArgs',
    'InsightFiltersWorkflowStatusArgs',
]

@pulumi.input_type
class InsightFiltersArgs:
    def __init__(__self__, *,
                 aws_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersAwsAccountIdArgs']]]] = None,
                 company_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCompanyNameArgs']]]] = None,
                 compliance_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersComplianceStatusArgs']]]] = None,
                 confidences: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersConfidenceArgs']]]] = None,
                 created_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCreatedAtArgs']]]] = None,
                 criticalities: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCriticalityArgs']]]] = None,
                 descriptions: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersDescriptionArgs']]]] = None,
                 finding_provider_fields_confidences: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsConfidenceArgs']]]] = None,
                 finding_provider_fields_criticalities: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsCriticalityArgs']]]] = None,
                 finding_provider_fields_related_findings_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs']]]] = None,
                 finding_provider_fields_related_findings_product_arns: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs']]]] = None,
                 finding_provider_fields_severity_labels: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityLabelArgs']]]] = None,
                 finding_provider_fields_severity_originals: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityOriginalArgs']]]] = None,
                 finding_provider_fields_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsTypeArgs']]]] = None,
                 first_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFirstObservedAtArgs']]]] = None,
                 generator_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersGeneratorIdArgs']]]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersIdArgs']]]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersKeywordArgs']]]] = None,
                 last_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersLastObservedAtArgs']]]] = None,
                 malware_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareNameArgs']]]] = None,
                 malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwarePathArgs']]]] = None,
                 malware_states: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareStateArgs']]]] = None,
                 malware_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareTypeArgs']]]] = None,
                 network_destination_domains: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationDomainArgs']]]] = None,
                 network_destination_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv4Args']]]] = None,
                 network_destination_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv6Args']]]] = None,
                 network_destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationPortArgs']]]] = None,
                 network_directions: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDirectionArgs']]]] = None,
                 network_protocols: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkProtocolArgs']]]] = None,
                 network_source_domains: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceDomainArgs']]]] = None,
                 network_source_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv4Args']]]] = None,
                 network_source_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv6Args']]]] = None,
                 network_source_macs: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceMacArgs']]]] = None,
                 network_source_ports: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourcePortArgs']]]] = None,
                 note_texts: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteTextArgs']]]] = None,
                 note_updated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedAtArgs']]]] = None,
                 note_updated_bies: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedByArgs']]]] = None,
                 process_launched_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessLaunchedAtArgs']]]] = None,
                 process_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessNameArgs']]]] = None,
                 process_parent_pids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessParentPidArgs']]]] = None,
                 process_paths: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPathArgs']]]] = None,
                 process_pids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPidArgs']]]] = None,
                 process_terminated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessTerminatedAtArgs']]]] = None,
                 product_arns: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductArnArgs']]]] = None,
                 product_fields: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductFieldArgs']]]] = None,
                 product_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductNameArgs']]]] = None,
                 recommendation_texts: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecommendationTextArgs']]]] = None,
                 record_states: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecordStateArgs']]]] = None,
                 related_findings_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsIdArgs']]]] = None,
                 related_findings_product_arns: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsProductArnArgs']]]] = None,
                 resource_aws_ec2_instance_iam_instance_profile_arns: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs']]]] = None,
                 resource_aws_ec2_instance_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceImageIdArgs']]]] = None,
                 resource_aws_ec2_instance_ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs']]]] = None,
                 resource_aws_ec2_instance_ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs']]]] = None,
                 resource_aws_ec2_instance_key_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceKeyNameArgs']]]] = None,
                 resource_aws_ec2_instance_launched_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs']]]] = None,
                 resource_aws_ec2_instance_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceSubnetIdArgs']]]] = None,
                 resource_aws_ec2_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceTypeArgs']]]] = None,
                 resource_aws_ec2_instance_vpc_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceVpcIdArgs']]]] = None,
                 resource_aws_iam_access_key_created_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs']]]] = None,
                 resource_aws_iam_access_key_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyStatusArgs']]]] = None,
                 resource_aws_iam_access_key_user_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyUserNameArgs']]]] = None,
                 resource_aws_s3_bucket_owner_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerIdArgs']]]] = None,
                 resource_aws_s3_bucket_owner_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerNameArgs']]]] = None,
                 resource_container_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageIdArgs']]]] = None,
                 resource_container_image_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageNameArgs']]]] = None,
                 resource_container_launched_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerLaunchedAtArgs']]]] = None,
                 resource_container_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerNameArgs']]]] = None,
                 resource_details_others: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceDetailsOtherArgs']]]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceIdArgs']]]] = None,
                 resource_partitions: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourcePartitionArgs']]]] = None,
                 resource_regions: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceRegionArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTagArgs']]]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTypeArgs']]]] = None,
                 severity_labels: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSeverityLabelArgs']]]] = None,
                 source_urls: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSourceUrlArgs']]]] = None,
                 threat_intel_indicator_categories: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorCategoryArgs']]]] = None,
                 threat_intel_indicator_last_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtArgs']]]] = None,
                 threat_intel_indicator_source_urls: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceUrlArgs']]]] = None,
                 threat_intel_indicator_sources: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceArgs']]]] = None,
                 threat_intel_indicator_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorTypeArgs']]]] = None,
                 threat_intel_indicator_values: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorValueArgs']]]] = None,
                 titles: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTitleArgs']]]] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTypeArgs']]]] = None,
                 updated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUpdatedAtArgs']]]] = None,
                 user_defined_values: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUserDefinedValueArgs']]]] = None,
                 verification_states: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersVerificationStateArgs']]]] = None,
                 workflow_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersWorkflowStatusArgs']]]] = None):
        if aws_account_ids is not None:
            pulumi.set(__self__, "aws_account_ids", aws_account_ids)
        if company_names is not None:
            pulumi.set(__self__, "company_names", company_names)
        if compliance_statuses is not None:
            pulumi.set(__self__, "compliance_statuses", compliance_statuses)
        if confidences is not None:
            pulumi.set(__self__, "confidences", confidences)
        if created_ats is not None:
            pulumi.set(__self__, "created_ats", created_ats)
        if criticalities is not None:
            pulumi.set(__self__, "criticalities", criticalities)
        if descriptions is not None:
            pulumi.set(__self__, "descriptions", descriptions)
        if finding_provider_fields_confidences is not None:
            pulumi.set(__self__, "finding_provider_fields_confidences", finding_provider_fields_confidences)
        if finding_provider_fields_criticalities is not None:
            pulumi.set(__self__, "finding_provider_fields_criticalities", finding_provider_fields_criticalities)
        if finding_provider_fields_related_findings_ids is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_ids", finding_provider_fields_related_findings_ids)
        if finding_provider_fields_related_findings_product_arns is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_product_arns", finding_provider_fields_related_findings_product_arns)
        if finding_provider_fields_severity_labels is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_labels", finding_provider_fields_severity_labels)
        if finding_provider_fields_severity_originals is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_originals", finding_provider_fields_severity_originals)
        if finding_provider_fields_types is not None:
            pulumi.set(__self__, "finding_provider_fields_types", finding_provider_fields_types)
        if first_observed_ats is not None:
            pulumi.set(__self__, "first_observed_ats", first_observed_ats)
        if generator_ids is not None:
            pulumi.set(__self__, "generator_ids", generator_ids)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if last_observed_ats is not None:
            pulumi.set(__self__, "last_observed_ats", last_observed_ats)
        if malware_names is not None:
            pulumi.set(__self__, "malware_names", malware_names)
        if malware_paths is not None:
            pulumi.set(__self__, "malware_paths", malware_paths)
        if malware_states is not None:
            pulumi.set(__self__, "malware_states", malware_states)
        if malware_types is not None:
            pulumi.set(__self__, "malware_types", malware_types)
        if network_destination_domains is not None:
            pulumi.set(__self__, "network_destination_domains", network_destination_domains)
        if network_destination_ipv4s is not None:
            pulumi.set(__self__, "network_destination_ipv4s", network_destination_ipv4s)
        if network_destination_ipv6s is not None:
            pulumi.set(__self__, "network_destination_ipv6s", network_destination_ipv6s)
        if network_destination_ports is not None:
            pulumi.set(__self__, "network_destination_ports", network_destination_ports)
        if network_directions is not None:
            pulumi.set(__self__, "network_directions", network_directions)
        if network_protocols is not None:
            pulumi.set(__self__, "network_protocols", network_protocols)
        if network_source_domains is not None:
            pulumi.set(__self__, "network_source_domains", network_source_domains)
        if network_source_ipv4s is not None:
            pulumi.set(__self__, "network_source_ipv4s", network_source_ipv4s)
        if network_source_ipv6s is not None:
            pulumi.set(__self__, "network_source_ipv6s", network_source_ipv6s)
        if network_source_macs is not None:
            pulumi.set(__self__, "network_source_macs", network_source_macs)
        if network_source_ports is not None:
            pulumi.set(__self__, "network_source_ports", network_source_ports)
        if note_texts is not None:
            pulumi.set(__self__, "note_texts", note_texts)
        if note_updated_ats is not None:
            pulumi.set(__self__, "note_updated_ats", note_updated_ats)
        if note_updated_bies is not None:
            pulumi.set(__self__, "note_updated_bies", note_updated_bies)
        if process_launched_ats is not None:
            pulumi.set(__self__, "process_launched_ats", process_launched_ats)
        if process_names is not None:
            pulumi.set(__self__, "process_names", process_names)
        if process_parent_pids is not None:
            pulumi.set(__self__, "process_parent_pids", process_parent_pids)
        if process_paths is not None:
            pulumi.set(__self__, "process_paths", process_paths)
        if process_pids is not None:
            pulumi.set(__self__, "process_pids", process_pids)
        if process_terminated_ats is not None:
            pulumi.set(__self__, "process_terminated_ats", process_terminated_ats)
        if product_arns is not None:
            pulumi.set(__self__, "product_arns", product_arns)
        if product_fields is not None:
            pulumi.set(__self__, "product_fields", product_fields)
        if product_names is not None:
            pulumi.set(__self__, "product_names", product_names)
        if recommendation_texts is not None:
            pulumi.set(__self__, "recommendation_texts", recommendation_texts)
        if record_states is not None:
            pulumi.set(__self__, "record_states", record_states)
        if related_findings_ids is not None:
            pulumi.set(__self__, "related_findings_ids", related_findings_ids)
        if related_findings_product_arns is not None:
            pulumi.set(__self__, "related_findings_product_arns", related_findings_product_arns)
        if resource_aws_ec2_instance_iam_instance_profile_arns is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_iam_instance_profile_arns", resource_aws_ec2_instance_iam_instance_profile_arns)
        if resource_aws_ec2_instance_image_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_image_ids", resource_aws_ec2_instance_image_ids)
        if resource_aws_ec2_instance_ipv4_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ipv4_addresses", resource_aws_ec2_instance_ipv4_addresses)
        if resource_aws_ec2_instance_ipv6_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ipv6_addresses", resource_aws_ec2_instance_ipv6_addresses)
        if resource_aws_ec2_instance_key_names is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_key_names", resource_aws_ec2_instance_key_names)
        if resource_aws_ec2_instance_launched_ats is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_launched_ats", resource_aws_ec2_instance_launched_ats)
        if resource_aws_ec2_instance_subnet_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_subnet_ids", resource_aws_ec2_instance_subnet_ids)
        if resource_aws_ec2_instance_types is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_types", resource_aws_ec2_instance_types)
        if resource_aws_ec2_instance_vpc_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_vpc_ids", resource_aws_ec2_instance_vpc_ids)
        if resource_aws_iam_access_key_created_ats is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_created_ats", resource_aws_iam_access_key_created_ats)
        if resource_aws_iam_access_key_statuses is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_statuses", resource_aws_iam_access_key_statuses)
        if resource_aws_iam_access_key_user_names is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_user_names", resource_aws_iam_access_key_user_names)
        if resource_aws_s3_bucket_owner_ids is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_ids", resource_aws_s3_bucket_owner_ids)
        if resource_aws_s3_bucket_owner_names is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_names", resource_aws_s3_bucket_owner_names)
        if resource_container_image_ids is not None:
            pulumi.set(__self__, "resource_container_image_ids", resource_container_image_ids)
        if resource_container_image_names is not None:
            pulumi.set(__self__, "resource_container_image_names", resource_container_image_names)
        if resource_container_launched_ats is not None:
            pulumi.set(__self__, "resource_container_launched_ats", resource_container_launched_ats)
        if resource_container_names is not None:
            pulumi.set(__self__, "resource_container_names", resource_container_names)
        if resource_details_others is not None:
            pulumi.set(__self__, "resource_details_others", resource_details_others)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_partitions is not None:
            pulumi.set(__self__, "resource_partitions", resource_partitions)
        if resource_regions is not None:
            pulumi.set(__self__, "resource_regions", resource_regions)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if severity_labels is not None:
            pulumi.set(__self__, "severity_labels", severity_labels)
        if source_urls is not None:
            pulumi.set(__self__, "source_urls", source_urls)
        if threat_intel_indicator_categories is not None:
            pulumi.set(__self__, "threat_intel_indicator_categories", threat_intel_indicator_categories)
        if threat_intel_indicator_last_observed_ats is not None:
            pulumi.set(__self__, "threat_intel_indicator_last_observed_ats", threat_intel_indicator_last_observed_ats)
        if threat_intel_indicator_source_urls is not None:
            pulumi.set(__self__, "threat_intel_indicator_source_urls", threat_intel_indicator_source_urls)
        if threat_intel_indicator_sources is not None:
            pulumi.set(__self__, "threat_intel_indicator_sources", threat_intel_indicator_sources)
        if threat_intel_indicator_types is not None:
            pulumi.set(__self__, "threat_intel_indicator_types", threat_intel_indicator_types)
        if threat_intel_indicator_values is not None:
            pulumi.set(__self__, "threat_intel_indicator_values", threat_intel_indicator_values)
        if titles is not None:
            pulumi.set(__self__, "titles", titles)
        if types is not None:
            pulumi.set(__self__, "types", types)
        if updated_ats is not None:
            pulumi.set(__self__, "updated_ats", updated_ats)
        if user_defined_values is not None:
            pulumi.set(__self__, "user_defined_values", user_defined_values)
        if verification_states is not None:
            pulumi.set(__self__, "verification_states", verification_states)
        if workflow_statuses is not None:
            pulumi.set(__self__, "workflow_statuses", workflow_statuses)

    @property
    @pulumi.getter(name="awsAccountIds")
    def aws_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersAwsAccountIdArgs']]]]:
        return pulumi.get(self, "aws_account_ids")

    @aws_account_ids.setter
    def aws_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersAwsAccountIdArgs']]]]):
        pulumi.set(self, "aws_account_ids", value)

    @property
    @pulumi.getter(name="companyNames")
    def company_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCompanyNameArgs']]]]:
        return pulumi.get(self, "company_names")

    @company_names.setter
    def company_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCompanyNameArgs']]]]):
        pulumi.set(self, "company_names", value)

    @property
    @pulumi.getter(name="complianceStatuses")
    def compliance_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersComplianceStatusArgs']]]]:
        return pulumi.get(self, "compliance_statuses")

    @compliance_statuses.setter
    def compliance_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersComplianceStatusArgs']]]]):
        pulumi.set(self, "compliance_statuses", value)

    @property
    @pulumi.getter
    def confidences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersConfidenceArgs']]]]:
        return pulumi.get(self, "confidences")

    @confidences.setter
    def confidences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersConfidenceArgs']]]]):
        pulumi.set(self, "confidences", value)

    @property
    @pulumi.getter(name="createdAts")
    def created_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCreatedAtArgs']]]]:
        return pulumi.get(self, "created_ats")

    @created_ats.setter
    def created_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCreatedAtArgs']]]]):
        pulumi.set(self, "created_ats", value)

    @property
    @pulumi.getter
    def criticalities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCriticalityArgs']]]]:
        return pulumi.get(self, "criticalities")

    @criticalities.setter
    def criticalities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCriticalityArgs']]]]):
        pulumi.set(self, "criticalities", value)

    @property
    @pulumi.getter
    def descriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersDescriptionArgs']]]]:
        return pulumi.get(self, "descriptions")

    @descriptions.setter
    def descriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersDescriptionArgs']]]]):
        pulumi.set(self, "descriptions", value)

    @property
    @pulumi.getter(name="findingProviderFieldsConfidences")
    def finding_provider_fields_confidences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsConfidenceArgs']]]]:
        return pulumi.get(self, "finding_provider_fields_confidences")

    @finding_provider_fields_confidences.setter
    def finding_provider_fields_confidences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsConfidenceArgs']]]]):
        pulumi.set(self, "finding_provider_fields_confidences", value)

    @property
    @pulumi.getter(name="findingProviderFieldsCriticalities")
    def finding_provider_fields_criticalities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsCriticalityArgs']]]]:
        return pulumi.get(self, "finding_provider_fields_criticalities")

    @finding_provider_fields_criticalities.setter
    def finding_provider_fields_criticalities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsCriticalityArgs']]]]):
        pulumi.set(self, "finding_provider_fields_criticalities", value)

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsIds")
    def finding_provider_fields_related_findings_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs']]]]:
        return pulumi.get(self, "finding_provider_fields_related_findings_ids")

    @finding_provider_fields_related_findings_ids.setter
    def finding_provider_fields_related_findings_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs']]]]):
        pulumi.set(self, "finding_provider_fields_related_findings_ids", value)

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsProductArns")
    def finding_provider_fields_related_findings_product_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs']]]]:
        return pulumi.get(self, "finding_provider_fields_related_findings_product_arns")

    @finding_provider_fields_related_findings_product_arns.setter
    def finding_provider_fields_related_findings_product_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs']]]]):
        pulumi.set(self, "finding_provider_fields_related_findings_product_arns", value)

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityLabels")
    def finding_provider_fields_severity_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityLabelArgs']]]]:
        return pulumi.get(self, "finding_provider_fields_severity_labels")

    @finding_provider_fields_severity_labels.setter
    def finding_provider_fields_severity_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityLabelArgs']]]]):
        pulumi.set(self, "finding_provider_fields_severity_labels", value)

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityOriginals")
    def finding_provider_fields_severity_originals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityOriginalArgs']]]]:
        return pulumi.get(self, "finding_provider_fields_severity_originals")

    @finding_provider_fields_severity_originals.setter
    def finding_provider_fields_severity_originals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityOriginalArgs']]]]):
        pulumi.set(self, "finding_provider_fields_severity_originals", value)

    @property
    @pulumi.getter(name="findingProviderFieldsTypes")
    def finding_provider_fields_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsTypeArgs']]]]:
        return pulumi.get(self, "finding_provider_fields_types")

    @finding_provider_fields_types.setter
    def finding_provider_fields_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsTypeArgs']]]]):
        pulumi.set(self, "finding_provider_fields_types", value)

    @property
    @pulumi.getter(name="firstObservedAts")
    def first_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFirstObservedAtArgs']]]]:
        return pulumi.get(self, "first_observed_ats")

    @first_observed_ats.setter
    def first_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFirstObservedAtArgs']]]]):
        pulumi.set(self, "first_observed_ats", value)

    @property
    @pulumi.getter(name="generatorIds")
    def generator_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersGeneratorIdArgs']]]]:
        return pulumi.get(self, "generator_ids")

    @generator_ids.setter
    def generator_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersGeneratorIdArgs']]]]):
        pulumi.set(self, "generator_ids", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersIdArgs']]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersIdArgs']]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter
    def keywords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersKeywordArgs']]]]:
        return pulumi.get(self, "keywords")

    @keywords.setter
    def keywords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersKeywordArgs']]]]):
        pulumi.set(self, "keywords", value)

    @property
    @pulumi.getter(name="lastObservedAts")
    def last_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersLastObservedAtArgs']]]]:
        return pulumi.get(self, "last_observed_ats")

    @last_observed_ats.setter
    def last_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersLastObservedAtArgs']]]]):
        pulumi.set(self, "last_observed_ats", value)

    @property
    @pulumi.getter(name="malwareNames")
    def malware_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareNameArgs']]]]:
        return pulumi.get(self, "malware_names")

    @malware_names.setter
    def malware_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareNameArgs']]]]):
        pulumi.set(self, "malware_names", value)

    @property
    @pulumi.getter(name="malwarePaths")
    def malware_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwarePathArgs']]]]:
        return pulumi.get(self, "malware_paths")

    @malware_paths.setter
    def malware_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwarePathArgs']]]]):
        pulumi.set(self, "malware_paths", value)

    @property
    @pulumi.getter(name="malwareStates")
    def malware_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareStateArgs']]]]:
        return pulumi.get(self, "malware_states")

    @malware_states.setter
    def malware_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareStateArgs']]]]):
        pulumi.set(self, "malware_states", value)

    @property
    @pulumi.getter(name="malwareTypes")
    def malware_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareTypeArgs']]]]:
        return pulumi.get(self, "malware_types")

    @malware_types.setter
    def malware_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareTypeArgs']]]]):
        pulumi.set(self, "malware_types", value)

    @property
    @pulumi.getter(name="networkDestinationDomains")
    def network_destination_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationDomainArgs']]]]:
        return pulumi.get(self, "network_destination_domains")

    @network_destination_domains.setter
    def network_destination_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationDomainArgs']]]]):
        pulumi.set(self, "network_destination_domains", value)

    @property
    @pulumi.getter(name="networkDestinationIpv4s")
    def network_destination_ipv4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv4Args']]]]:
        return pulumi.get(self, "network_destination_ipv4s")

    @network_destination_ipv4s.setter
    def network_destination_ipv4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv4Args']]]]):
        pulumi.set(self, "network_destination_ipv4s", value)

    @property
    @pulumi.getter(name="networkDestinationIpv6s")
    def network_destination_ipv6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv6Args']]]]:
        return pulumi.get(self, "network_destination_ipv6s")

    @network_destination_ipv6s.setter
    def network_destination_ipv6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv6Args']]]]):
        pulumi.set(self, "network_destination_ipv6s", value)

    @property
    @pulumi.getter(name="networkDestinationPorts")
    def network_destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationPortArgs']]]]:
        return pulumi.get(self, "network_destination_ports")

    @network_destination_ports.setter
    def network_destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationPortArgs']]]]):
        pulumi.set(self, "network_destination_ports", value)

    @property
    @pulumi.getter(name="networkDirections")
    def network_directions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDirectionArgs']]]]:
        return pulumi.get(self, "network_directions")

    @network_directions.setter
    def network_directions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDirectionArgs']]]]):
        pulumi.set(self, "network_directions", value)

    @property
    @pulumi.getter(name="networkProtocols")
    def network_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkProtocolArgs']]]]:
        return pulumi.get(self, "network_protocols")

    @network_protocols.setter
    def network_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkProtocolArgs']]]]):
        pulumi.set(self, "network_protocols", value)

    @property
    @pulumi.getter(name="networkSourceDomains")
    def network_source_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceDomainArgs']]]]:
        return pulumi.get(self, "network_source_domains")

    @network_source_domains.setter
    def network_source_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceDomainArgs']]]]):
        pulumi.set(self, "network_source_domains", value)

    @property
    @pulumi.getter(name="networkSourceIpv4s")
    def network_source_ipv4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv4Args']]]]:
        return pulumi.get(self, "network_source_ipv4s")

    @network_source_ipv4s.setter
    def network_source_ipv4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv4Args']]]]):
        pulumi.set(self, "network_source_ipv4s", value)

    @property
    @pulumi.getter(name="networkSourceIpv6s")
    def network_source_ipv6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv6Args']]]]:
        return pulumi.get(self, "network_source_ipv6s")

    @network_source_ipv6s.setter
    def network_source_ipv6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv6Args']]]]):
        pulumi.set(self, "network_source_ipv6s", value)

    @property
    @pulumi.getter(name="networkSourceMacs")
    def network_source_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceMacArgs']]]]:
        return pulumi.get(self, "network_source_macs")

    @network_source_macs.setter
    def network_source_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceMacArgs']]]]):
        pulumi.set(self, "network_source_macs", value)

    @property
    @pulumi.getter(name="networkSourcePorts")
    def network_source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourcePortArgs']]]]:
        return pulumi.get(self, "network_source_ports")

    @network_source_ports.setter
    def network_source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourcePortArgs']]]]):
        pulumi.set(self, "network_source_ports", value)

    @property
    @pulumi.getter(name="noteTexts")
    def note_texts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteTextArgs']]]]:
        return pulumi.get(self, "note_texts")

    @note_texts.setter
    def note_texts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteTextArgs']]]]):
        pulumi.set(self, "note_texts", value)

    @property
    @pulumi.getter(name="noteUpdatedAts")
    def note_updated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedAtArgs']]]]:
        return pulumi.get(self, "note_updated_ats")

    @note_updated_ats.setter
    def note_updated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedAtArgs']]]]):
        pulumi.set(self, "note_updated_ats", value)

    @property
    @pulumi.getter(name="noteUpdatedBies")
    def note_updated_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedByArgs']]]]:
        return pulumi.get(self, "note_updated_bies")

    @note_updated_bies.setter
    def note_updated_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedByArgs']]]]):
        pulumi.set(self, "note_updated_bies", value)

    @property
    @pulumi.getter(name="processLaunchedAts")
    def process_launched_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessLaunchedAtArgs']]]]:
        return pulumi.get(self, "process_launched_ats")

    @process_launched_ats.setter
    def process_launched_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessLaunchedAtArgs']]]]):
        pulumi.set(self, "process_launched_ats", value)

    @property
    @pulumi.getter(name="processNames")
    def process_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessNameArgs']]]]:
        return pulumi.get(self, "process_names")

    @process_names.setter
    def process_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessNameArgs']]]]):
        pulumi.set(self, "process_names", value)

    @property
    @pulumi.getter(name="processParentPids")
    def process_parent_pids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessParentPidArgs']]]]:
        return pulumi.get(self, "process_parent_pids")

    @process_parent_pids.setter
    def process_parent_pids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessParentPidArgs']]]]):
        pulumi.set(self, "process_parent_pids", value)

    @property
    @pulumi.getter(name="processPaths")
    def process_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPathArgs']]]]:
        return pulumi.get(self, "process_paths")

    @process_paths.setter
    def process_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPathArgs']]]]):
        pulumi.set(self, "process_paths", value)

    @property
    @pulumi.getter(name="processPids")
    def process_pids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPidArgs']]]]:
        return pulumi.get(self, "process_pids")

    @process_pids.setter
    def process_pids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPidArgs']]]]):
        pulumi.set(self, "process_pids", value)

    @property
    @pulumi.getter(name="processTerminatedAts")
    def process_terminated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessTerminatedAtArgs']]]]:
        return pulumi.get(self, "process_terminated_ats")

    @process_terminated_ats.setter
    def process_terminated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessTerminatedAtArgs']]]]):
        pulumi.set(self, "process_terminated_ats", value)

    @property
    @pulumi.getter(name="productArns")
    def product_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductArnArgs']]]]:
        return pulumi.get(self, "product_arns")

    @product_arns.setter
    def product_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductArnArgs']]]]):
        pulumi.set(self, "product_arns", value)

    @property
    @pulumi.getter(name="productFields")
    def product_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductFieldArgs']]]]:
        return pulumi.get(self, "product_fields")

    @product_fields.setter
    def product_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductFieldArgs']]]]):
        pulumi.set(self, "product_fields", value)

    @property
    @pulumi.getter(name="productNames")
    def product_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductNameArgs']]]]:
        return pulumi.get(self, "product_names")

    @product_names.setter
    def product_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductNameArgs']]]]):
        pulumi.set(self, "product_names", value)

    @property
    @pulumi.getter(name="recommendationTexts")
    def recommendation_texts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecommendationTextArgs']]]]:
        return pulumi.get(self, "recommendation_texts")

    @recommendation_texts.setter
    def recommendation_texts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecommendationTextArgs']]]]):
        pulumi.set(self, "recommendation_texts", value)

    @property
    @pulumi.getter(name="recordStates")
    def record_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecordStateArgs']]]]:
        return pulumi.get(self, "record_states")

    @record_states.setter
    def record_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecordStateArgs']]]]):
        pulumi.set(self, "record_states", value)

    @property
    @pulumi.getter(name="relatedFindingsIds")
    def related_findings_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsIdArgs']]]]:
        return pulumi.get(self, "related_findings_ids")

    @related_findings_ids.setter
    def related_findings_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsIdArgs']]]]):
        pulumi.set(self, "related_findings_ids", value)

    @property
    @pulumi.getter(name="relatedFindingsProductArns")
    def related_findings_product_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsProductArnArgs']]]]:
        return pulumi.get(self, "related_findings_product_arns")

    @related_findings_product_arns.setter
    def related_findings_product_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsProductArnArgs']]]]):
        pulumi.set(self, "related_findings_product_arns", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIamInstanceProfileArns")
    def resource_aws_ec2_instance_iam_instance_profile_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_iam_instance_profile_arns")

    @resource_aws_ec2_instance_iam_instance_profile_arns.setter
    def resource_aws_ec2_instance_iam_instance_profile_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_iam_instance_profile_arns", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceImageIds")
    def resource_aws_ec2_instance_image_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceImageIdArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_image_ids")

    @resource_aws_ec2_instance_image_ids.setter
    def resource_aws_ec2_instance_image_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceImageIdArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_image_ids", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpv4Addresses")
    def resource_aws_ec2_instance_ipv4_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_ipv4_addresses")

    @resource_aws_ec2_instance_ipv4_addresses.setter
    def resource_aws_ec2_instance_ipv4_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_ipv4_addresses", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpv6Addresses")
    def resource_aws_ec2_instance_ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_ipv6_addresses")

    @resource_aws_ec2_instance_ipv6_addresses.setter
    def resource_aws_ec2_instance_ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_ipv6_addresses", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceKeyNames")
    def resource_aws_ec2_instance_key_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceKeyNameArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_key_names")

    @resource_aws_ec2_instance_key_names.setter
    def resource_aws_ec2_instance_key_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceKeyNameArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_key_names", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceLaunchedAts")
    def resource_aws_ec2_instance_launched_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_launched_ats")

    @resource_aws_ec2_instance_launched_ats.setter
    def resource_aws_ec2_instance_launched_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_launched_ats", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceSubnetIds")
    def resource_aws_ec2_instance_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceSubnetIdArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_subnet_ids")

    @resource_aws_ec2_instance_subnet_ids.setter
    def resource_aws_ec2_instance_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceSubnetIdArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_subnet_ids", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceTypes")
    def resource_aws_ec2_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceTypeArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_types")

    @resource_aws_ec2_instance_types.setter
    def resource_aws_ec2_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceTypeArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_types", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceVpcIds")
    def resource_aws_ec2_instance_vpc_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceVpcIdArgs']]]]:
        return pulumi.get(self, "resource_aws_ec2_instance_vpc_ids")

    @resource_aws_ec2_instance_vpc_ids.setter
    def resource_aws_ec2_instance_vpc_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceVpcIdArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_vpc_ids", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyCreatedAts")
    def resource_aws_iam_access_key_created_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs']]]]:
        return pulumi.get(self, "resource_aws_iam_access_key_created_ats")

    @resource_aws_iam_access_key_created_ats.setter
    def resource_aws_iam_access_key_created_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_created_ats", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyStatuses")
    def resource_aws_iam_access_key_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyStatusArgs']]]]:
        return pulumi.get(self, "resource_aws_iam_access_key_statuses")

    @resource_aws_iam_access_key_statuses.setter
    def resource_aws_iam_access_key_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyStatusArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_statuses", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyUserNames")
    def resource_aws_iam_access_key_user_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyUserNameArgs']]]]:
        return pulumi.get(self, "resource_aws_iam_access_key_user_names")

    @resource_aws_iam_access_key_user_names.setter
    def resource_aws_iam_access_key_user_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyUserNameArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_user_names", value)

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerIds")
    def resource_aws_s3_bucket_owner_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerIdArgs']]]]:
        return pulumi.get(self, "resource_aws_s3_bucket_owner_ids")

    @resource_aws_s3_bucket_owner_ids.setter
    def resource_aws_s3_bucket_owner_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerIdArgs']]]]):
        pulumi.set(self, "resource_aws_s3_bucket_owner_ids", value)

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerNames")
    def resource_aws_s3_bucket_owner_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerNameArgs']]]]:
        return pulumi.get(self, "resource_aws_s3_bucket_owner_names")

    @resource_aws_s3_bucket_owner_names.setter
    def resource_aws_s3_bucket_owner_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerNameArgs']]]]):
        pulumi.set(self, "resource_aws_s3_bucket_owner_names", value)

    @property
    @pulumi.getter(name="resourceContainerImageIds")
    def resource_container_image_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageIdArgs']]]]:
        return pulumi.get(self, "resource_container_image_ids")

    @resource_container_image_ids.setter
    def resource_container_image_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageIdArgs']]]]):
        pulumi.set(self, "resource_container_image_ids", value)

    @property
    @pulumi.getter(name="resourceContainerImageNames")
    def resource_container_image_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageNameArgs']]]]:
        return pulumi.get(self, "resource_container_image_names")

    @resource_container_image_names.setter
    def resource_container_image_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageNameArgs']]]]):
        pulumi.set(self, "resource_container_image_names", value)

    @property
    @pulumi.getter(name="resourceContainerLaunchedAts")
    def resource_container_launched_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerLaunchedAtArgs']]]]:
        return pulumi.get(self, "resource_container_launched_ats")

    @resource_container_launched_ats.setter
    def resource_container_launched_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerLaunchedAtArgs']]]]):
        pulumi.set(self, "resource_container_launched_ats", value)

    @property
    @pulumi.getter(name="resourceContainerNames")
    def resource_container_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerNameArgs']]]]:
        return pulumi.get(self, "resource_container_names")

    @resource_container_names.setter
    def resource_container_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerNameArgs']]]]):
        pulumi.set(self, "resource_container_names", value)

    @property
    @pulumi.getter(name="resourceDetailsOthers")
    def resource_details_others(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceDetailsOtherArgs']]]]:
        return pulumi.get(self, "resource_details_others")

    @resource_details_others.setter
    def resource_details_others(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceDetailsOtherArgs']]]]):
        pulumi.set(self, "resource_details_others", value)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceIdArgs']]]]:
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceIdArgs']]]]):
        pulumi.set(self, "resource_ids", value)

    @property
    @pulumi.getter(name="resourcePartitions")
    def resource_partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourcePartitionArgs']]]]:
        return pulumi.get(self, "resource_partitions")

    @resource_partitions.setter
    def resource_partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourcePartitionArgs']]]]):
        pulumi.set(self, "resource_partitions", value)

    @property
    @pulumi.getter(name="resourceRegions")
    def resource_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceRegionArgs']]]]:
        return pulumi.get(self, "resource_regions")

    @resource_regions.setter
    def resource_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceRegionArgs']]]]):
        pulumi.set(self, "resource_regions", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTagArgs']]]]:
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTypeArgs']]]]:
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTypeArgs']]]]):
        pulumi.set(self, "resource_types", value)

    @property
    @pulumi.getter(name="severityLabels")
    def severity_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSeverityLabelArgs']]]]:
        return pulumi.get(self, "severity_labels")

    @severity_labels.setter
    def severity_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSeverityLabelArgs']]]]):
        pulumi.set(self, "severity_labels", value)

    @property
    @pulumi.getter(name="sourceUrls")
    def source_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSourceUrlArgs']]]]:
        return pulumi.get(self, "source_urls")

    @source_urls.setter
    def source_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSourceUrlArgs']]]]):
        pulumi.set(self, "source_urls", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorCategories")
    def threat_intel_indicator_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorCategoryArgs']]]]:
        return pulumi.get(self, "threat_intel_indicator_categories")

    @threat_intel_indicator_categories.setter
    def threat_intel_indicator_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorCategoryArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_categories", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorLastObservedAts")
    def threat_intel_indicator_last_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtArgs']]]]:
        return pulumi.get(self, "threat_intel_indicator_last_observed_ats")

    @threat_intel_indicator_last_observed_ats.setter
    def threat_intel_indicator_last_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_last_observed_ats", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorSourceUrls")
    def threat_intel_indicator_source_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceUrlArgs']]]]:
        return pulumi.get(self, "threat_intel_indicator_source_urls")

    @threat_intel_indicator_source_urls.setter
    def threat_intel_indicator_source_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceUrlArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_source_urls", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorSources")
    def threat_intel_indicator_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceArgs']]]]:
        return pulumi.get(self, "threat_intel_indicator_sources")

    @threat_intel_indicator_sources.setter
    def threat_intel_indicator_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_sources", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorTypes")
    def threat_intel_indicator_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorTypeArgs']]]]:
        return pulumi.get(self, "threat_intel_indicator_types")

    @threat_intel_indicator_types.setter
    def threat_intel_indicator_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorTypeArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_types", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorValues")
    def threat_intel_indicator_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorValueArgs']]]]:
        return pulumi.get(self, "threat_intel_indicator_values")

    @threat_intel_indicator_values.setter
    def threat_intel_indicator_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorValueArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_values", value)

    @property
    @pulumi.getter
    def titles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTitleArgs']]]]:
        return pulumi.get(self, "titles")

    @titles.setter
    def titles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTitleArgs']]]]):
        pulumi.set(self, "titles", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTypeArgs']]]]:
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTypeArgs']]]]):
        pulumi.set(self, "types", value)

    @property
    @pulumi.getter(name="updatedAts")
    def updated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUpdatedAtArgs']]]]:
        return pulumi.get(self, "updated_ats")

    @updated_ats.setter
    def updated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUpdatedAtArgs']]]]):
        pulumi.set(self, "updated_ats", value)

    @property
    @pulumi.getter(name="userDefinedValues")
    def user_defined_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUserDefinedValueArgs']]]]:
        return pulumi.get(self, "user_defined_values")

    @user_defined_values.setter
    def user_defined_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUserDefinedValueArgs']]]]):
        pulumi.set(self, "user_defined_values", value)

    @property
    @pulumi.getter(name="verificationStates")
    def verification_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersVerificationStateArgs']]]]:
        return pulumi.get(self, "verification_states")

    @verification_states.setter
    def verification_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersVerificationStateArgs']]]]):
        pulumi.set(self, "verification_states", value)

    @property
    @pulumi.getter(name="workflowStatuses")
    def workflow_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersWorkflowStatusArgs']]]]:
        return pulumi.get(self, "workflow_statuses")

    @workflow_statuses.setter
    def workflow_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersWorkflowStatusArgs']]]]):
        pulumi.set(self, "workflow_statuses", value)


@pulumi.input_type
class InsightFiltersAwsAccountIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersCompanyNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersComplianceStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersConfidenceArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersCreatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersCreatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersCreatedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersCreatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersCreatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersCriticalityArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersDescriptionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsConfidenceArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsCriticalityArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsSeverityLabelArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsSeverityOriginalArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFirstObservedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersFirstObservedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersFirstObservedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersFirstObservedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersFirstObservedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersGeneratorIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersKeywordArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersLastObservedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersLastObservedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersLastObservedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersLastObservedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersLastObservedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersMalwareNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersMalwarePathArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersMalwareStateArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersMalwareTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkDestinationDomainArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkDestinationIpv4Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersNetworkDestinationIpv6Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersNetworkDestinationPortArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersNetworkDirectionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkProtocolArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkSourceDomainArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkSourceIpv4Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersNetworkSourceIpv6Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersNetworkSourceMacArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkSourcePortArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersNoteTextArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNoteUpdatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersNoteUpdatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersNoteUpdatedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersNoteUpdatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersNoteUpdatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNoteUpdatedByArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProcessLaunchedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersProcessLaunchedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersProcessLaunchedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersProcessLaunchedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersProcessLaunchedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProcessNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProcessParentPidArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersProcessPathArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProcessPidArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersProcessTerminatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersProcessTerminatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersProcessTerminatedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersProcessTerminatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersProcessTerminatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProductArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProductFieldArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProductNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersRecommendationTextArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersRecordStateArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersRelatedFindingsIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersRelatedFindingsProductArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceImageIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceKeyNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceSubnetIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceVpcIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsIamAccessKeyStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsIamAccessKeyUserNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsS3BucketOwnerIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsS3BucketOwnerNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceContainerImageIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceContainerImageNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceContainerLaunchedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersResourceContainerLaunchedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersResourceContainerLaunchedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersResourceContainerLaunchedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersResourceContainerLaunchedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceContainerNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceDetailsOtherArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourcePartitionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceRegionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceTagArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersSeverityLabelArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersSourceUrlArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorCategoryArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorLastObservedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorSourceArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorSourceUrlArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorValueArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersTitleArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersUpdatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersUpdatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersUpdatedAtDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersUpdatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersUpdatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersUserDefinedValueArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersVerificationStateArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersWorkflowStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


