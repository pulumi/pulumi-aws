# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AutomationRuleActionArgs',
    'AutomationRuleActionFindingFieldsUpdateArgs',
    'AutomationRuleActionFindingFieldsUpdateNoteArgs',
    'AutomationRuleActionFindingFieldsUpdateRelatedFindingArgs',
    'AutomationRuleActionFindingFieldsUpdateSeverityArgs',
    'AutomationRuleActionFindingFieldsUpdateWorkflowArgs',
    'AutomationRuleCriteriaArgs',
    'AutomationRuleCriteriaAwsAccountIdArgs',
    'AutomationRuleCriteriaAwsAccountNameArgs',
    'AutomationRuleCriteriaCompanyNameArgs',
    'AutomationRuleCriteriaComplianceAssociatedStandardsIdArgs',
    'AutomationRuleCriteriaComplianceSecurityControlIdArgs',
    'AutomationRuleCriteriaComplianceStatusArgs',
    'AutomationRuleCriteriaConfidenceArgs',
    'AutomationRuleCriteriaCreatedAtArgs',
    'AutomationRuleCriteriaCreatedAtDateRangeArgs',
    'AutomationRuleCriteriaCriticalityArgs',
    'AutomationRuleCriteriaDescriptionArgs',
    'AutomationRuleCriteriaFirstObservedAtArgs',
    'AutomationRuleCriteriaFirstObservedAtDateRangeArgs',
    'AutomationRuleCriteriaGeneratorIdArgs',
    'AutomationRuleCriteriaIdArgs',
    'AutomationRuleCriteriaLastObservedAtArgs',
    'AutomationRuleCriteriaLastObservedAtDateRangeArgs',
    'AutomationRuleCriteriaNoteTextArgs',
    'AutomationRuleCriteriaNoteUpdatedAtArgs',
    'AutomationRuleCriteriaNoteUpdatedAtDateRangeArgs',
    'AutomationRuleCriteriaNoteUpdatedByArgs',
    'AutomationRuleCriteriaProductArnArgs',
    'AutomationRuleCriteriaProductNameArgs',
    'AutomationRuleCriteriaRecordStateArgs',
    'AutomationRuleCriteriaRelatedFindingsIdArgs',
    'AutomationRuleCriteriaRelatedFindingsProductArnArgs',
    'AutomationRuleCriteriaResourceApplicationArnArgs',
    'AutomationRuleCriteriaResourceApplicationNameArgs',
    'AutomationRuleCriteriaResourceDetailsOtherArgs',
    'AutomationRuleCriteriaResourceIdArgs',
    'AutomationRuleCriteriaResourcePartitionArgs',
    'AutomationRuleCriteriaResourceRegionArgs',
    'AutomationRuleCriteriaResourceTagArgs',
    'AutomationRuleCriteriaResourceTypeArgs',
    'AutomationRuleCriteriaSeverityLabelArgs',
    'AutomationRuleCriteriaSourceUrlArgs',
    'AutomationRuleCriteriaTitleArgs',
    'AutomationRuleCriteriaTypeArgs',
    'AutomationRuleCriteriaUpdatedAtArgs',
    'AutomationRuleCriteriaUpdatedAtDateRangeArgs',
    'AutomationRuleCriteriaUserDefinedFieldArgs',
    'AutomationRuleCriteriaVerificationStateArgs',
    'AutomationRuleCriteriaWorkflowStatusArgs',
    'InsightFiltersArgs',
    'InsightFiltersAwsAccountIdArgs',
    'InsightFiltersCompanyNameArgs',
    'InsightFiltersComplianceStatusArgs',
    'InsightFiltersConfidenceArgs',
    'InsightFiltersCreatedAtArgs',
    'InsightFiltersCreatedAtDateRangeArgs',
    'InsightFiltersCriticalityArgs',
    'InsightFiltersDescriptionArgs',
    'InsightFiltersFindingProviderFieldsConfidenceArgs',
    'InsightFiltersFindingProviderFieldsCriticalityArgs',
    'InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs',
    'InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs',
    'InsightFiltersFindingProviderFieldsSeverityLabelArgs',
    'InsightFiltersFindingProviderFieldsSeverityOriginalArgs',
    'InsightFiltersFindingProviderFieldsTypeArgs',
    'InsightFiltersFirstObservedAtArgs',
    'InsightFiltersFirstObservedAtDateRangeArgs',
    'InsightFiltersGeneratorIdArgs',
    'InsightFiltersIdArgs',
    'InsightFiltersKeywordArgs',
    'InsightFiltersLastObservedAtArgs',
    'InsightFiltersLastObservedAtDateRangeArgs',
    'InsightFiltersMalwareNameArgs',
    'InsightFiltersMalwarePathArgs',
    'InsightFiltersMalwareStateArgs',
    'InsightFiltersMalwareTypeArgs',
    'InsightFiltersNetworkDestinationDomainArgs',
    'InsightFiltersNetworkDestinationIpv4Args',
    'InsightFiltersNetworkDestinationIpv6Args',
    'InsightFiltersNetworkDestinationPortArgs',
    'InsightFiltersNetworkDirectionArgs',
    'InsightFiltersNetworkProtocolArgs',
    'InsightFiltersNetworkSourceDomainArgs',
    'InsightFiltersNetworkSourceIpv4Args',
    'InsightFiltersNetworkSourceIpv6Args',
    'InsightFiltersNetworkSourceMacArgs',
    'InsightFiltersNetworkSourcePortArgs',
    'InsightFiltersNoteTextArgs',
    'InsightFiltersNoteUpdatedAtArgs',
    'InsightFiltersNoteUpdatedAtDateRangeArgs',
    'InsightFiltersNoteUpdatedByArgs',
    'InsightFiltersProcessLaunchedAtArgs',
    'InsightFiltersProcessLaunchedAtDateRangeArgs',
    'InsightFiltersProcessNameArgs',
    'InsightFiltersProcessParentPidArgs',
    'InsightFiltersProcessPathArgs',
    'InsightFiltersProcessPidArgs',
    'InsightFiltersProcessTerminatedAtArgs',
    'InsightFiltersProcessTerminatedAtDateRangeArgs',
    'InsightFiltersProductArnArgs',
    'InsightFiltersProductFieldArgs',
    'InsightFiltersProductNameArgs',
    'InsightFiltersRecommendationTextArgs',
    'InsightFiltersRecordStateArgs',
    'InsightFiltersRelatedFindingsIdArgs',
    'InsightFiltersRelatedFindingsProductArnArgs',
    'InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs',
    'InsightFiltersResourceAwsEc2InstanceImageIdArgs',
    'InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs',
    'InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs',
    'InsightFiltersResourceAwsEc2InstanceKeyNameArgs',
    'InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs',
    'InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs',
    'InsightFiltersResourceAwsEc2InstanceSubnetIdArgs',
    'InsightFiltersResourceAwsEc2InstanceTypeArgs',
    'InsightFiltersResourceAwsEc2InstanceVpcIdArgs',
    'InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs',
    'InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs',
    'InsightFiltersResourceAwsIamAccessKeyStatusArgs',
    'InsightFiltersResourceAwsIamAccessKeyUserNameArgs',
    'InsightFiltersResourceAwsS3BucketOwnerIdArgs',
    'InsightFiltersResourceAwsS3BucketOwnerNameArgs',
    'InsightFiltersResourceContainerImageIdArgs',
    'InsightFiltersResourceContainerImageNameArgs',
    'InsightFiltersResourceContainerLaunchedAtArgs',
    'InsightFiltersResourceContainerLaunchedAtDateRangeArgs',
    'InsightFiltersResourceContainerNameArgs',
    'InsightFiltersResourceDetailsOtherArgs',
    'InsightFiltersResourceIdArgs',
    'InsightFiltersResourcePartitionArgs',
    'InsightFiltersResourceRegionArgs',
    'InsightFiltersResourceTagArgs',
    'InsightFiltersResourceTypeArgs',
    'InsightFiltersSeverityLabelArgs',
    'InsightFiltersSourceUrlArgs',
    'InsightFiltersThreatIntelIndicatorCategoryArgs',
    'InsightFiltersThreatIntelIndicatorLastObservedAtArgs',
    'InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs',
    'InsightFiltersThreatIntelIndicatorSourceArgs',
    'InsightFiltersThreatIntelIndicatorSourceUrlArgs',
    'InsightFiltersThreatIntelIndicatorTypeArgs',
    'InsightFiltersThreatIntelIndicatorValueArgs',
    'InsightFiltersTitleArgs',
    'InsightFiltersTypeArgs',
    'InsightFiltersUpdatedAtArgs',
    'InsightFiltersUpdatedAtDateRangeArgs',
    'InsightFiltersUserDefinedValueArgs',
    'InsightFiltersVerificationStateArgs',
    'InsightFiltersWorkflowStatusArgs',
]

@pulumi.input_type
class AutomationRuleActionArgs:
    def __init__(__self__, *,
                 finding_fields_update: Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AutomationRuleActionFindingFieldsUpdateArgs'] finding_fields_update: A block that specifies that the automation rule action is an update to a finding field.  Documented below.
        :param pulumi.Input[str] type: Specifies that the rule action should update the `Types` finding field. The `Types` finding field classifies findings in the format of namespace/category/classifier.
        """
        if finding_fields_update is not None:
            pulumi.set(__self__, "finding_fields_update", finding_fields_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="findingFieldsUpdate")
    def finding_fields_update(self) -> Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateArgs']]:
        """
        A block that specifies that the automation rule action is an update to a finding field.  Documented below.
        """
        return pulumi.get(self, "finding_fields_update")

    @finding_fields_update.setter
    def finding_fields_update(self, value: Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateArgs']]):
        pulumi.set(self, "finding_fields_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies that the rule action should update the `Types` finding field. The `Types` finding field classifies findings in the format of namespace/category/classifier.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AutomationRuleActionFindingFieldsUpdateArgs:
    def __init__(__self__, *,
                 confidence: Optional[pulumi.Input[int]] = None,
                 criticality: Optional[pulumi.Input[int]] = None,
                 note: Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateNoteArgs']] = None,
                 related_findings: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleActionFindingFieldsUpdateRelatedFindingArgs']]]] = None,
                 severity: Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateSeverityArgs']] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_defined_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 verification_state: Optional[pulumi.Input[str]] = None,
                 workflow: Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateWorkflowArgs']] = None):
        """
        :param pulumi.Input[int] confidence: The rule action updates the `Confidence` field of a finding.
        :param pulumi.Input[int] criticality: The rule action updates the `Criticality` field of a finding.
        :param pulumi.Input['AutomationRuleActionFindingFieldsUpdateNoteArgs'] note: A resource block that updates the note. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleActionFindingFieldsUpdateRelatedFindingArgs']]] related_findings: A resource block that the rule action updates the `RelatedFindings` field of a finding. Documented below.
        :param pulumi.Input['AutomationRuleActionFindingFieldsUpdateSeverityArgs'] severity: A resource block that updates to the severity information for a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] types: The rule action updates the `Types` field of a finding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_defined_fields: The rule action updates the `UserDefinedFields` field of a finding.
        :param pulumi.Input[str] verification_state: The rule action updates the `VerificationState` field of a finding. The allowed values are the following `UNKNOWN`, `TRUE_POSITIVE`, `FALSE_POSITIVE` and `BENIGN_POSITIVE`.
        :param pulumi.Input['AutomationRuleActionFindingFieldsUpdateWorkflowArgs'] workflow: A resource block that is used to update information about the investigation into the finding. Documented below.
        """
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if related_findings is not None:
            pulumi.set(__self__, "related_findings", related_findings)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if types is not None:
            pulumi.set(__self__, "types", types)
        if user_defined_fields is not None:
            pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        if verification_state is not None:
            pulumi.set(__self__, "verification_state", verification_state)
        if workflow is not None:
            pulumi.set(__self__, "workflow", workflow)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input[int]]:
        """
        The rule action updates the `Confidence` field of a finding.
        """
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "confidence", value)

    @property
    @pulumi.getter
    def criticality(self) -> Optional[pulumi.Input[int]]:
        """
        The rule action updates the `Criticality` field of a finding.
        """
        return pulumi.get(self, "criticality")

    @criticality.setter
    def criticality(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "criticality", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateNoteArgs']]:
        """
        A resource block that updates the note. Documented below.
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateNoteArgs']]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="relatedFindings")
    def related_findings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleActionFindingFieldsUpdateRelatedFindingArgs']]]]:
        """
        A resource block that the rule action updates the `RelatedFindings` field of a finding. Documented below.
        """
        return pulumi.get(self, "related_findings")

    @related_findings.setter
    def related_findings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleActionFindingFieldsUpdateRelatedFindingArgs']]]]):
        pulumi.set(self, "related_findings", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateSeverityArgs']]:
        """
        A resource block that updates to the severity information for a finding. Documented below.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateSeverityArgs']]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The rule action updates the `Types` field of a finding.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "types", value)

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The rule action updates the `UserDefinedFields` field of a finding.
        """
        return pulumi.get(self, "user_defined_fields")

    @user_defined_fields.setter
    def user_defined_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_defined_fields", value)

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[pulumi.Input[str]]:
        """
        The rule action updates the `VerificationState` field of a finding. The allowed values are the following `UNKNOWN`, `TRUE_POSITIVE`, `FALSE_POSITIVE` and `BENIGN_POSITIVE`.
        """
        return pulumi.get(self, "verification_state")

    @verification_state.setter
    def verification_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verification_state", value)

    @property
    @pulumi.getter
    def workflow(self) -> Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateWorkflowArgs']]:
        """
        A resource block that is used to update information about the investigation into the finding. Documented below.
        """
        return pulumi.get(self, "workflow")

    @workflow.setter
    def workflow(self, value: Optional[pulumi.Input['AutomationRuleActionFindingFieldsUpdateWorkflowArgs']]):
        pulumi.set(self, "workflow", value)


@pulumi.input_type
class AutomationRuleActionFindingFieldsUpdateNoteArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 updated_by: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: The updated note text.
        :param pulumi.Input[str] updated_by: The principal that updated the note.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The updated note text.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Input[str]:
        """
        The principal that updated the note.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "updated_by", value)


@pulumi.input_type
class AutomationRuleActionFindingFieldsUpdateRelatedFindingArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 product_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: The product-generated identifier for a related finding.
        :param pulumi.Input[str] product_arn: The ARN of the product that generated a related finding.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "product_arn", product_arn)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The product-generated identifier for a related finding.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the product that generated a related finding.
        """
        return pulumi.get(self, "product_arn")

    @product_arn.setter
    def product_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_arn", value)


@pulumi.input_type
class AutomationRuleActionFindingFieldsUpdateSeverityArgs:
    def __init__(__self__, *,
                 label: Optional[pulumi.Input[str]] = None,
                 product: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] label: The severity value of the finding. The allowed values are the following `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH` and `CRITICAL`.
        :param pulumi.Input[float] product: The native severity as defined by the AWS service or integrated partner product that generated the finding.
        """
        if label is not None:
            pulumi.set(__self__, "label", label)
        if product is not None:
            pulumi.set(__self__, "product", product)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The severity value of the finding. The allowed values are the following `INFORMATIONAL`, `LOW`, `MEDIUM`, `HIGH` and `CRITICAL`.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input[float]]:
        """
        The native severity as defined by the AWS service or integrated partner product that generated the finding.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "product", value)


@pulumi.input_type
class AutomationRuleActionFindingFieldsUpdateWorkflowArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The status of the investigation into the finding. The allowed values are the following `NEW`, `NOTIFIED`, `RESOLVED` and `SUPPRESSED`.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the investigation into the finding. The allowed values are the following `NEW`, `NOTIFIED`, `RESOLVED` and `SUPPRESSED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AutomationRuleCriteriaArgs:
    def __init__(__self__, *,
                 aws_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaAwsAccountIdArgs']]]] = None,
                 aws_account_names: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaAwsAccountNameArgs']]]] = None,
                 company_names: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCompanyNameArgs']]]] = None,
                 compliance_associated_standards_ids: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceAssociatedStandardsIdArgs']]]] = None,
                 compliance_security_control_ids: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceSecurityControlIdArgs']]]] = None,
                 compliance_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceStatusArgs']]]] = None,
                 confidences: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaConfidenceArgs']]]] = None,
                 created_ats: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCreatedAtArgs']]]] = None,
                 criticalities: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCriticalityArgs']]]] = None,
                 descriptions: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaDescriptionArgs']]]] = None,
                 first_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaFirstObservedAtArgs']]]] = None,
                 generator_ids: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaGeneratorIdArgs']]]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaIdArgs']]]] = None,
                 last_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaLastObservedAtArgs']]]] = None,
                 note_texts: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteTextArgs']]]] = None,
                 note_updated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteUpdatedAtArgs']]]] = None,
                 note_updated_bies: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteUpdatedByArgs']]]] = None,
                 product_arns: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaProductArnArgs']]]] = None,
                 product_names: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaProductNameArgs']]]] = None,
                 record_states: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRecordStateArgs']]]] = None,
                 related_findings_ids: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRelatedFindingsIdArgs']]]] = None,
                 related_findings_product_arns: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRelatedFindingsProductArnArgs']]]] = None,
                 resource_application_arns: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceApplicationArnArgs']]]] = None,
                 resource_application_names: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceApplicationNameArgs']]]] = None,
                 resource_details_others: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceDetailsOtherArgs']]]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceIdArgs']]]] = None,
                 resource_partitions: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourcePartitionArgs']]]] = None,
                 resource_regions: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceRegionArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceTagArgs']]]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceTypeArgs']]]] = None,
                 severity_labels: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaSeverityLabelArgs']]]] = None,
                 source_urls: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaSourceUrlArgs']]]] = None,
                 titles: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaTitleArgs']]]] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaTypeArgs']]]] = None,
                 updated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaUpdatedAtArgs']]]] = None,
                 user_defined_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaUserDefinedFieldArgs']]]] = None,
                 verification_states: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaVerificationStateArgs']]]] = None,
                 workflow_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaWorkflowStatusArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaAwsAccountIdArgs']]] aws_account_ids: The AWS account ID in which a finding was generated. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaAwsAccountNameArgs']]] aws_account_names: The name of the AWS account in which a finding was generated. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCompanyNameArgs']]] company_names: The name of the company for the product that generated the finding. For control-based findings, the company is AWS. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceAssociatedStandardsIdArgs']]] compliance_associated_standards_ids: The unique identifier of a standard in which a control is enabled. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceSecurityControlIdArgs']]] compliance_security_control_ids: The security control ID for which a finding was generated. Security control IDs are the same across standards. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceStatusArgs']]] compliance_statuses: The result of a security check. This field is only used for findings generated from controls. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaConfidenceArgs']]] confidences: The likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. `Confidence` is scored on a 0–100 basis using a ratio scale. A value of `0` means 0 percent confidence, and a value of `100` means 100 percent confidence. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCreatedAtArgs']]] created_ats: A timestamp that indicates when this finding record was created. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCriticalityArgs']]] criticalities: The level of importance that is assigned to the resources that are associated with a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaDescriptionArgs']]] descriptions: A finding's description. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaFirstObservedAtArgs']]] first_observed_ats: A timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings product. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaGeneratorIdArgs']]] generator_ids: The identifier for the solution-specific component that generated a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaIdArgs']]] ids: The product-specific identifier for a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaLastObservedAtArgs']]] last_observed_ats: A timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings product. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteTextArgs']]] note_texts: The text of a user-defined note that's added to a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteUpdatedAtArgs']]] note_updated_ats: The timestamp of when the note was updated. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteUpdatedByArgs']]] note_updated_bies: The principal that created a note. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaProductArnArgs']]] product_arns: The Amazon Resource Name (ARN) for a third-party product that generated a finding in Security Hub. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaProductNameArgs']]] product_names: Provides the name of the product that generated the finding. For control-based findings, the product name is Security Hub. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRecordStateArgs']]] record_states: Provides the current state of a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRelatedFindingsIdArgs']]] related_findings_ids: The product-generated identifier for a related finding.  Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRelatedFindingsProductArnArgs']]] related_findings_product_arns: The ARN for the product that generated a related finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceApplicationArnArgs']]] resource_application_arns: The Amazon Resource Name (ARN) of the application that is related to a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceApplicationNameArgs']]] resource_application_names: The name of the application that is related to a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceDetailsOtherArgs']]] resource_details_others: Custom fields and values about the resource that a finding pertains to. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceIdArgs']]] resource_ids: The identifier for the given resource type. For AWS resources that are identified by Amazon Resource Names (ARNs), this is the ARN. For AWS resources that lack ARNs, this is the identifier as defined by the AWS service that created the resource. For non-AWS resources, this is a unique identifier that is associated with the resource. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourcePartitionArgs']]] resource_partitions: The partition in which the resource that the finding pertains to is located. A partition is a group of AWS Regions. Each AWS account is scoped to one partition. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceRegionArgs']]] resource_regions: The AWS Region where the resource that a finding pertains to is located. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceTagArgs']]] resource_tags: A list of AWS tags associated with a resource at the time the finding was processed. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceTypeArgs']]] resource_types: The type of resource that the finding pertains to. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaSeverityLabelArgs']]] severity_labels: The severity value of the finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaSourceUrlArgs']]] source_urls: Provides a URL that links to a page about the current finding in the finding product. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaTitleArgs']]] titles: A finding's title. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaTypeArgs']]] types: One or more finding types in the format of namespace/category/classifier that classify a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaUpdatedAtArgs']]] updated_ats: A timestamp that indicates when the finding record was most recently updated. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaUserDefinedFieldArgs']]] user_defined_fields: A list of user-defined name and value string pairs added to a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaVerificationStateArgs']]] verification_states: Provides the veracity of a finding. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaWorkflowStatusArgs']]] workflow_statuses: Provides information about the status of the investigation into a finding. Documented below.
        """
        if aws_account_ids is not None:
            pulumi.set(__self__, "aws_account_ids", aws_account_ids)
        if aws_account_names is not None:
            pulumi.set(__self__, "aws_account_names", aws_account_names)
        if company_names is not None:
            pulumi.set(__self__, "company_names", company_names)
        if compliance_associated_standards_ids is not None:
            pulumi.set(__self__, "compliance_associated_standards_ids", compliance_associated_standards_ids)
        if compliance_security_control_ids is not None:
            pulumi.set(__self__, "compliance_security_control_ids", compliance_security_control_ids)
        if compliance_statuses is not None:
            pulumi.set(__self__, "compliance_statuses", compliance_statuses)
        if confidences is not None:
            pulumi.set(__self__, "confidences", confidences)
        if created_ats is not None:
            pulumi.set(__self__, "created_ats", created_ats)
        if criticalities is not None:
            pulumi.set(__self__, "criticalities", criticalities)
        if descriptions is not None:
            pulumi.set(__self__, "descriptions", descriptions)
        if first_observed_ats is not None:
            pulumi.set(__self__, "first_observed_ats", first_observed_ats)
        if generator_ids is not None:
            pulumi.set(__self__, "generator_ids", generator_ids)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if last_observed_ats is not None:
            pulumi.set(__self__, "last_observed_ats", last_observed_ats)
        if note_texts is not None:
            pulumi.set(__self__, "note_texts", note_texts)
        if note_updated_ats is not None:
            pulumi.set(__self__, "note_updated_ats", note_updated_ats)
        if note_updated_bies is not None:
            pulumi.set(__self__, "note_updated_bies", note_updated_bies)
        if product_arns is not None:
            pulumi.set(__self__, "product_arns", product_arns)
        if product_names is not None:
            pulumi.set(__self__, "product_names", product_names)
        if record_states is not None:
            pulumi.set(__self__, "record_states", record_states)
        if related_findings_ids is not None:
            pulumi.set(__self__, "related_findings_ids", related_findings_ids)
        if related_findings_product_arns is not None:
            pulumi.set(__self__, "related_findings_product_arns", related_findings_product_arns)
        if resource_application_arns is not None:
            pulumi.set(__self__, "resource_application_arns", resource_application_arns)
        if resource_application_names is not None:
            pulumi.set(__self__, "resource_application_names", resource_application_names)
        if resource_details_others is not None:
            pulumi.set(__self__, "resource_details_others", resource_details_others)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_partitions is not None:
            pulumi.set(__self__, "resource_partitions", resource_partitions)
        if resource_regions is not None:
            pulumi.set(__self__, "resource_regions", resource_regions)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if severity_labels is not None:
            pulumi.set(__self__, "severity_labels", severity_labels)
        if source_urls is not None:
            pulumi.set(__self__, "source_urls", source_urls)
        if titles is not None:
            pulumi.set(__self__, "titles", titles)
        if types is not None:
            pulumi.set(__self__, "types", types)
        if updated_ats is not None:
            pulumi.set(__self__, "updated_ats", updated_ats)
        if user_defined_fields is not None:
            pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        if verification_states is not None:
            pulumi.set(__self__, "verification_states", verification_states)
        if workflow_statuses is not None:
            pulumi.set(__self__, "workflow_statuses", workflow_statuses)

    @property
    @pulumi.getter(name="awsAccountIds")
    def aws_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaAwsAccountIdArgs']]]]:
        """
        The AWS account ID in which a finding was generated. Documented below.
        """
        return pulumi.get(self, "aws_account_ids")

    @aws_account_ids.setter
    def aws_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaAwsAccountIdArgs']]]]):
        pulumi.set(self, "aws_account_ids", value)

    @property
    @pulumi.getter(name="awsAccountNames")
    def aws_account_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaAwsAccountNameArgs']]]]:
        """
        The name of the AWS account in which a finding was generated. Documented below.
        """
        return pulumi.get(self, "aws_account_names")

    @aws_account_names.setter
    def aws_account_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaAwsAccountNameArgs']]]]):
        pulumi.set(self, "aws_account_names", value)

    @property
    @pulumi.getter(name="companyNames")
    def company_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCompanyNameArgs']]]]:
        """
        The name of the company for the product that generated the finding. For control-based findings, the company is AWS. Documented below.
        """
        return pulumi.get(self, "company_names")

    @company_names.setter
    def company_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCompanyNameArgs']]]]):
        pulumi.set(self, "company_names", value)

    @property
    @pulumi.getter(name="complianceAssociatedStandardsIds")
    def compliance_associated_standards_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceAssociatedStandardsIdArgs']]]]:
        """
        The unique identifier of a standard in which a control is enabled. Documented below.
        """
        return pulumi.get(self, "compliance_associated_standards_ids")

    @compliance_associated_standards_ids.setter
    def compliance_associated_standards_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceAssociatedStandardsIdArgs']]]]):
        pulumi.set(self, "compliance_associated_standards_ids", value)

    @property
    @pulumi.getter(name="complianceSecurityControlIds")
    def compliance_security_control_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceSecurityControlIdArgs']]]]:
        """
        The security control ID for which a finding was generated. Security control IDs are the same across standards. Documented below.
        """
        return pulumi.get(self, "compliance_security_control_ids")

    @compliance_security_control_ids.setter
    def compliance_security_control_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceSecurityControlIdArgs']]]]):
        pulumi.set(self, "compliance_security_control_ids", value)

    @property
    @pulumi.getter(name="complianceStatuses")
    def compliance_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceStatusArgs']]]]:
        """
        The result of a security check. This field is only used for findings generated from controls. Documented below.
        """
        return pulumi.get(self, "compliance_statuses")

    @compliance_statuses.setter
    def compliance_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaComplianceStatusArgs']]]]):
        pulumi.set(self, "compliance_statuses", value)

    @property
    @pulumi.getter
    def confidences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaConfidenceArgs']]]]:
        """
        The likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. `Confidence` is scored on a 0–100 basis using a ratio scale. A value of `0` means 0 percent confidence, and a value of `100` means 100 percent confidence. Documented below.
        """
        return pulumi.get(self, "confidences")

    @confidences.setter
    def confidences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaConfidenceArgs']]]]):
        pulumi.set(self, "confidences", value)

    @property
    @pulumi.getter(name="createdAts")
    def created_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCreatedAtArgs']]]]:
        """
        A timestamp that indicates when this finding record was created. Documented below.
        """
        return pulumi.get(self, "created_ats")

    @created_ats.setter
    def created_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCreatedAtArgs']]]]):
        pulumi.set(self, "created_ats", value)

    @property
    @pulumi.getter
    def criticalities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCriticalityArgs']]]]:
        """
        The level of importance that is assigned to the resources that are associated with a finding. Documented below.
        """
        return pulumi.get(self, "criticalities")

    @criticalities.setter
    def criticalities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaCriticalityArgs']]]]):
        pulumi.set(self, "criticalities", value)

    @property
    @pulumi.getter
    def descriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaDescriptionArgs']]]]:
        """
        A finding's description. Documented below.
        """
        return pulumi.get(self, "descriptions")

    @descriptions.setter
    def descriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaDescriptionArgs']]]]):
        pulumi.set(self, "descriptions", value)

    @property
    @pulumi.getter(name="firstObservedAts")
    def first_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaFirstObservedAtArgs']]]]:
        """
        A timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings product. Documented below.
        """
        return pulumi.get(self, "first_observed_ats")

    @first_observed_ats.setter
    def first_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaFirstObservedAtArgs']]]]):
        pulumi.set(self, "first_observed_ats", value)

    @property
    @pulumi.getter(name="generatorIds")
    def generator_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaGeneratorIdArgs']]]]:
        """
        The identifier for the solution-specific component that generated a finding. Documented below.
        """
        return pulumi.get(self, "generator_ids")

    @generator_ids.setter
    def generator_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaGeneratorIdArgs']]]]):
        pulumi.set(self, "generator_ids", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaIdArgs']]]]:
        """
        The product-specific identifier for a finding. Documented below.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaIdArgs']]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter(name="lastObservedAts")
    def last_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaLastObservedAtArgs']]]]:
        """
        A timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings product. Documented below.
        """
        return pulumi.get(self, "last_observed_ats")

    @last_observed_ats.setter
    def last_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaLastObservedAtArgs']]]]):
        pulumi.set(self, "last_observed_ats", value)

    @property
    @pulumi.getter(name="noteTexts")
    def note_texts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteTextArgs']]]]:
        """
        The text of a user-defined note that's added to a finding. Documented below.
        """
        return pulumi.get(self, "note_texts")

    @note_texts.setter
    def note_texts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteTextArgs']]]]):
        pulumi.set(self, "note_texts", value)

    @property
    @pulumi.getter(name="noteUpdatedAts")
    def note_updated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteUpdatedAtArgs']]]]:
        """
        The timestamp of when the note was updated. Documented below.
        """
        return pulumi.get(self, "note_updated_ats")

    @note_updated_ats.setter
    def note_updated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteUpdatedAtArgs']]]]):
        pulumi.set(self, "note_updated_ats", value)

    @property
    @pulumi.getter(name="noteUpdatedBies")
    def note_updated_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteUpdatedByArgs']]]]:
        """
        The principal that created a note. Documented below.
        """
        return pulumi.get(self, "note_updated_bies")

    @note_updated_bies.setter
    def note_updated_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaNoteUpdatedByArgs']]]]):
        pulumi.set(self, "note_updated_bies", value)

    @property
    @pulumi.getter(name="productArns")
    def product_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaProductArnArgs']]]]:
        """
        The Amazon Resource Name (ARN) for a third-party product that generated a finding in Security Hub. Documented below.
        """
        return pulumi.get(self, "product_arns")

    @product_arns.setter
    def product_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaProductArnArgs']]]]):
        pulumi.set(self, "product_arns", value)

    @property
    @pulumi.getter(name="productNames")
    def product_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaProductNameArgs']]]]:
        """
        Provides the name of the product that generated the finding. For control-based findings, the product name is Security Hub. Documented below.
        """
        return pulumi.get(self, "product_names")

    @product_names.setter
    def product_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaProductNameArgs']]]]):
        pulumi.set(self, "product_names", value)

    @property
    @pulumi.getter(name="recordStates")
    def record_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRecordStateArgs']]]]:
        """
        Provides the current state of a finding. Documented below.
        """
        return pulumi.get(self, "record_states")

    @record_states.setter
    def record_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRecordStateArgs']]]]):
        pulumi.set(self, "record_states", value)

    @property
    @pulumi.getter(name="relatedFindingsIds")
    def related_findings_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRelatedFindingsIdArgs']]]]:
        """
        The product-generated identifier for a related finding.  Documented below.
        """
        return pulumi.get(self, "related_findings_ids")

    @related_findings_ids.setter
    def related_findings_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRelatedFindingsIdArgs']]]]):
        pulumi.set(self, "related_findings_ids", value)

    @property
    @pulumi.getter(name="relatedFindingsProductArns")
    def related_findings_product_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRelatedFindingsProductArnArgs']]]]:
        """
        The ARN for the product that generated a related finding. Documented below.
        """
        return pulumi.get(self, "related_findings_product_arns")

    @related_findings_product_arns.setter
    def related_findings_product_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaRelatedFindingsProductArnArgs']]]]):
        pulumi.set(self, "related_findings_product_arns", value)

    @property
    @pulumi.getter(name="resourceApplicationArns")
    def resource_application_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceApplicationArnArgs']]]]:
        """
        The Amazon Resource Name (ARN) of the application that is related to a finding. Documented below.
        """
        return pulumi.get(self, "resource_application_arns")

    @resource_application_arns.setter
    def resource_application_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceApplicationArnArgs']]]]):
        pulumi.set(self, "resource_application_arns", value)

    @property
    @pulumi.getter(name="resourceApplicationNames")
    def resource_application_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceApplicationNameArgs']]]]:
        """
        The name of the application that is related to a finding. Documented below.
        """
        return pulumi.get(self, "resource_application_names")

    @resource_application_names.setter
    def resource_application_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceApplicationNameArgs']]]]):
        pulumi.set(self, "resource_application_names", value)

    @property
    @pulumi.getter(name="resourceDetailsOthers")
    def resource_details_others(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceDetailsOtherArgs']]]]:
        """
        Custom fields and values about the resource that a finding pertains to. Documented below.
        """
        return pulumi.get(self, "resource_details_others")

    @resource_details_others.setter
    def resource_details_others(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceDetailsOtherArgs']]]]):
        pulumi.set(self, "resource_details_others", value)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceIdArgs']]]]:
        """
        The identifier for the given resource type. For AWS resources that are identified by Amazon Resource Names (ARNs), this is the ARN. For AWS resources that lack ARNs, this is the identifier as defined by the AWS service that created the resource. For non-AWS resources, this is a unique identifier that is associated with the resource. Documented below.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceIdArgs']]]]):
        pulumi.set(self, "resource_ids", value)

    @property
    @pulumi.getter(name="resourcePartitions")
    def resource_partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourcePartitionArgs']]]]:
        """
        The partition in which the resource that the finding pertains to is located. A partition is a group of AWS Regions. Each AWS account is scoped to one partition. Documented below.
        """
        return pulumi.get(self, "resource_partitions")

    @resource_partitions.setter
    def resource_partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourcePartitionArgs']]]]):
        pulumi.set(self, "resource_partitions", value)

    @property
    @pulumi.getter(name="resourceRegions")
    def resource_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceRegionArgs']]]]:
        """
        The AWS Region where the resource that a finding pertains to is located. Documented below.
        """
        return pulumi.get(self, "resource_regions")

    @resource_regions.setter
    def resource_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceRegionArgs']]]]):
        pulumi.set(self, "resource_regions", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceTagArgs']]]]:
        """
        A list of AWS tags associated with a resource at the time the finding was processed. Documented below.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceTypeArgs']]]]:
        """
        The type of resource that the finding pertains to. Documented below.
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaResourceTypeArgs']]]]):
        pulumi.set(self, "resource_types", value)

    @property
    @pulumi.getter(name="severityLabels")
    def severity_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaSeverityLabelArgs']]]]:
        """
        The severity value of the finding. Documented below.
        """
        return pulumi.get(self, "severity_labels")

    @severity_labels.setter
    def severity_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaSeverityLabelArgs']]]]):
        pulumi.set(self, "severity_labels", value)

    @property
    @pulumi.getter(name="sourceUrls")
    def source_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaSourceUrlArgs']]]]:
        """
        Provides a URL that links to a page about the current finding in the finding product. Documented below.
        """
        return pulumi.get(self, "source_urls")

    @source_urls.setter
    def source_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaSourceUrlArgs']]]]):
        pulumi.set(self, "source_urls", value)

    @property
    @pulumi.getter
    def titles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaTitleArgs']]]]:
        """
        A finding's title. Documented below.
        """
        return pulumi.get(self, "titles")

    @titles.setter
    def titles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaTitleArgs']]]]):
        pulumi.set(self, "titles", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaTypeArgs']]]]:
        """
        One or more finding types in the format of namespace/category/classifier that classify a finding. Documented below.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaTypeArgs']]]]):
        pulumi.set(self, "types", value)

    @property
    @pulumi.getter(name="updatedAts")
    def updated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaUpdatedAtArgs']]]]:
        """
        A timestamp that indicates when the finding record was most recently updated. Documented below.
        """
        return pulumi.get(self, "updated_ats")

    @updated_ats.setter
    def updated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaUpdatedAtArgs']]]]):
        pulumi.set(self, "updated_ats", value)

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaUserDefinedFieldArgs']]]]:
        """
        A list of user-defined name and value string pairs added to a finding. Documented below.
        """
        return pulumi.get(self, "user_defined_fields")

    @user_defined_fields.setter
    def user_defined_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaUserDefinedFieldArgs']]]]):
        pulumi.set(self, "user_defined_fields", value)

    @property
    @pulumi.getter(name="verificationStates")
    def verification_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaVerificationStateArgs']]]]:
        """
        Provides the veracity of a finding. Documented below.
        """
        return pulumi.get(self, "verification_states")

    @verification_states.setter
    def verification_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaVerificationStateArgs']]]]):
        pulumi.set(self, "verification_states", value)

    @property
    @pulumi.getter(name="workflowStatuses")
    def workflow_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaWorkflowStatusArgs']]]]:
        """
        Provides information about the status of the investigation into a finding. Documented below.
        """
        return pulumi.get(self, "workflow_statuses")

    @workflow_statuses.setter
    def workflow_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleCriteriaWorkflowStatusArgs']]]]):
        pulumi.set(self, "workflow_statuses", value)


@pulumi.input_type
class AutomationRuleCriteriaAwsAccountIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaAwsAccountNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaCompanyNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaComplianceAssociatedStandardsIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaComplianceSecurityControlIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaComplianceStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaConfidenceArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[float]] = None,
                 gt: Optional[pulumi.Input[float]] = None,
                 gte: Optional[pulumi.Input[float]] = None,
                 lt: Optional[pulumi.Input[float]] = None,
                 lte: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[float] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[float] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gt is not None:
            pulumi.set(__self__, "gt", gt)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lt is not None:
            pulumi.set(__self__, "lt", lt)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[float]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gt(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "gt")

    @gt.setter
    def gt(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "gt", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[float]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lt(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lt")

    @lt.setter
    def lt(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lt", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[float]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class AutomationRuleCriteriaCreatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['AutomationRuleCriteriaCreatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AutomationRuleCriteriaCreatedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['AutomationRuleCriteriaCreatedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['AutomationRuleCriteriaCreatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class AutomationRuleCriteriaCreatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaCriticalityArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[float]] = None,
                 gt: Optional[pulumi.Input[float]] = None,
                 gte: Optional[pulumi.Input[float]] = None,
                 lt: Optional[pulumi.Input[float]] = None,
                 lte: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[float] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[float] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gt is not None:
            pulumi.set(__self__, "gt", gt)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lt is not None:
            pulumi.set(__self__, "lt", lt)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[float]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gt(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "gt")

    @gt.setter
    def gt(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "gt", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[float]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lt(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lt")

    @lt.setter
    def lt(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lt", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[float]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class AutomationRuleCriteriaDescriptionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaFirstObservedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['AutomationRuleCriteriaFirstObservedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AutomationRuleCriteriaFirstObservedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['AutomationRuleCriteriaFirstObservedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['AutomationRuleCriteriaFirstObservedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class AutomationRuleCriteriaFirstObservedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaGeneratorIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaLastObservedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['AutomationRuleCriteriaLastObservedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AutomationRuleCriteriaLastObservedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['AutomationRuleCriteriaLastObservedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['AutomationRuleCriteriaLastObservedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class AutomationRuleCriteriaLastObservedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaNoteTextArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaNoteUpdatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['AutomationRuleCriteriaNoteUpdatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AutomationRuleCriteriaNoteUpdatedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['AutomationRuleCriteriaNoteUpdatedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['AutomationRuleCriteriaNoteUpdatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class AutomationRuleCriteriaNoteUpdatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaNoteUpdatedByArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaProductArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaProductNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaRecordStateArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaRelatedFindingsIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaRelatedFindingsProductArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaResourceApplicationArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaResourceApplicationNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaResourceDetailsOtherArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] key: The key of the map filter.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the map filter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaResourceIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaResourcePartitionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaResourceRegionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaResourceTagArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] key: The key of the map filter.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the map filter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaResourceTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaSeverityLabelArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaSourceUrlArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaTitleArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaUpdatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['AutomationRuleCriteriaUpdatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AutomationRuleCriteriaUpdatedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['AutomationRuleCriteriaUpdatedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['AutomationRuleCriteriaUpdatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class AutomationRuleCriteriaUpdatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaUserDefinedFieldArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] key: The key of the map filter.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the map filter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaVerificationStateArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleCriteriaWorkflowStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersArgs:
    def __init__(__self__, *,
                 aws_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersAwsAccountIdArgs']]]] = None,
                 company_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCompanyNameArgs']]]] = None,
                 compliance_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersComplianceStatusArgs']]]] = None,
                 confidences: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersConfidenceArgs']]]] = None,
                 created_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCreatedAtArgs']]]] = None,
                 criticalities: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCriticalityArgs']]]] = None,
                 descriptions: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersDescriptionArgs']]]] = None,
                 finding_provider_fields_confidences: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsConfidenceArgs']]]] = None,
                 finding_provider_fields_criticalities: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsCriticalityArgs']]]] = None,
                 finding_provider_fields_related_findings_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs']]]] = None,
                 finding_provider_fields_related_findings_product_arns: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs']]]] = None,
                 finding_provider_fields_severity_labels: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityLabelArgs']]]] = None,
                 finding_provider_fields_severity_originals: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityOriginalArgs']]]] = None,
                 finding_provider_fields_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsTypeArgs']]]] = None,
                 first_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFirstObservedAtArgs']]]] = None,
                 generator_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersGeneratorIdArgs']]]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersIdArgs']]]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersKeywordArgs']]]] = None,
                 last_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersLastObservedAtArgs']]]] = None,
                 malware_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareNameArgs']]]] = None,
                 malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwarePathArgs']]]] = None,
                 malware_states: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareStateArgs']]]] = None,
                 malware_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareTypeArgs']]]] = None,
                 network_destination_domains: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationDomainArgs']]]] = None,
                 network_destination_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv4Args']]]] = None,
                 network_destination_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv6Args']]]] = None,
                 network_destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationPortArgs']]]] = None,
                 network_directions: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDirectionArgs']]]] = None,
                 network_protocols: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkProtocolArgs']]]] = None,
                 network_source_domains: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceDomainArgs']]]] = None,
                 network_source_ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv4Args']]]] = None,
                 network_source_ipv6s: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv6Args']]]] = None,
                 network_source_macs: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceMacArgs']]]] = None,
                 network_source_ports: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourcePortArgs']]]] = None,
                 note_texts: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteTextArgs']]]] = None,
                 note_updated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedAtArgs']]]] = None,
                 note_updated_bies: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedByArgs']]]] = None,
                 process_launched_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessLaunchedAtArgs']]]] = None,
                 process_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessNameArgs']]]] = None,
                 process_parent_pids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessParentPidArgs']]]] = None,
                 process_paths: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPathArgs']]]] = None,
                 process_pids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPidArgs']]]] = None,
                 process_terminated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessTerminatedAtArgs']]]] = None,
                 product_arns: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductArnArgs']]]] = None,
                 product_fields: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductFieldArgs']]]] = None,
                 product_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductNameArgs']]]] = None,
                 recommendation_texts: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecommendationTextArgs']]]] = None,
                 record_states: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecordStateArgs']]]] = None,
                 related_findings_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsIdArgs']]]] = None,
                 related_findings_product_arns: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsProductArnArgs']]]] = None,
                 resource_aws_ec2_instance_iam_instance_profile_arns: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs']]]] = None,
                 resource_aws_ec2_instance_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceImageIdArgs']]]] = None,
                 resource_aws_ec2_instance_ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs']]]] = None,
                 resource_aws_ec2_instance_ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs']]]] = None,
                 resource_aws_ec2_instance_key_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceKeyNameArgs']]]] = None,
                 resource_aws_ec2_instance_launched_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs']]]] = None,
                 resource_aws_ec2_instance_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceSubnetIdArgs']]]] = None,
                 resource_aws_ec2_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceTypeArgs']]]] = None,
                 resource_aws_ec2_instance_vpc_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceVpcIdArgs']]]] = None,
                 resource_aws_iam_access_key_created_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs']]]] = None,
                 resource_aws_iam_access_key_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyStatusArgs']]]] = None,
                 resource_aws_iam_access_key_user_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyUserNameArgs']]]] = None,
                 resource_aws_s3_bucket_owner_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerIdArgs']]]] = None,
                 resource_aws_s3_bucket_owner_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerNameArgs']]]] = None,
                 resource_container_image_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageIdArgs']]]] = None,
                 resource_container_image_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageNameArgs']]]] = None,
                 resource_container_launched_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerLaunchedAtArgs']]]] = None,
                 resource_container_names: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerNameArgs']]]] = None,
                 resource_details_others: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceDetailsOtherArgs']]]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceIdArgs']]]] = None,
                 resource_partitions: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourcePartitionArgs']]]] = None,
                 resource_regions: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceRegionArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTagArgs']]]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTypeArgs']]]] = None,
                 severity_labels: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSeverityLabelArgs']]]] = None,
                 source_urls: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSourceUrlArgs']]]] = None,
                 threat_intel_indicator_categories: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorCategoryArgs']]]] = None,
                 threat_intel_indicator_last_observed_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtArgs']]]] = None,
                 threat_intel_indicator_source_urls: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceUrlArgs']]]] = None,
                 threat_intel_indicator_sources: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceArgs']]]] = None,
                 threat_intel_indicator_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorTypeArgs']]]] = None,
                 threat_intel_indicator_values: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorValueArgs']]]] = None,
                 titles: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTitleArgs']]]] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTypeArgs']]]] = None,
                 updated_ats: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUpdatedAtArgs']]]] = None,
                 user_defined_values: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUserDefinedValueArgs']]]] = None,
                 verification_states: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersVerificationStateArgs']]]] = None,
                 workflow_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersWorkflowStatusArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersAwsAccountIdArgs']]] aws_account_ids: AWS account ID that a finding is generated in. See String_Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersCompanyNameArgs']]] company_names: The name of the findings provider (company) that owns the solution (product) that generates findings. See String_Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersComplianceStatusArgs']]] compliance_statuses: Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersConfidenceArgs']]] confidences: A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersCreatedAtArgs']]] created_ats: An ISO8601-formatted timestamp that indicates when the security-findings provider captured the potential security issue that a finding captured. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersCriticalityArgs']]] criticalities: The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersDescriptionArgs']]] descriptions: A finding's description. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsConfidenceArgs']]] finding_provider_fields_confidences: The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsCriticalityArgs']]] finding_provider_fields_criticalities: The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs']]] finding_provider_fields_related_findings_ids: The finding identifier of a related finding that is identified by the finding provider. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs']]] finding_provider_fields_related_findings_product_arns: The ARN of the solution that generated a related finding that is identified by the finding provider. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityLabelArgs']]] finding_provider_fields_severity_labels: The finding provider value for the severity label. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityOriginalArgs']]] finding_provider_fields_severity_originals: The finding provider's original value for the severity. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsTypeArgs']]] finding_provider_fields_types: One or more finding types that the finding provider assigned to the finding. Uses the format of `namespace/category/classifier` that classify a finding. Valid namespace values include: `Software and Configuration Checks`, `TTPs`, `Effects`, `Unusual Behaviors`, and `Sensitive Data Identifications`. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersFirstObservedAtArgs']]] first_observed_ats: An ISO8601-formatted timestamp that indicates when the security-findings provider first observed the potential security issue that a finding captured. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersGeneratorIdArgs']]] generator_ids: The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersIdArgs']]] ids: The security findings provider-specific identifier for a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersKeywordArgs']]] keywords: A keyword for a finding. See Keyword Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersLastObservedAtArgs']]] last_observed_ats: An ISO8601-formatted timestamp that indicates when the security-findings provider most recently observed the potential security issue that a finding captured. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareNameArgs']]] malware_names: The name of the malware that was observed. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwarePathArgs']]] malware_paths: The filesystem path of the malware that was observed. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareStateArgs']]] malware_states: The state of the malware that was observed. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareTypeArgs']]] malware_types: The type of the malware that was observed. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationDomainArgs']]] network_destination_domains: The destination domain of network-related information about a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv4Args']]] network_destination_ipv4s: The destination IPv4 address of network-related information about a finding. See Ip Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv6Args']]] network_destination_ipv6s: The destination IPv6 address of network-related information about a finding. See Ip Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationPortArgs']]] network_destination_ports: The destination port of network-related information about a finding. See Number Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDirectionArgs']]] network_directions: Indicates the direction of network traffic associated with a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkProtocolArgs']]] network_protocols: The protocol of network-related information about a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceDomainArgs']]] network_source_domains: The source domain of network-related information about a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv4Args']]] network_source_ipv4s: The source IPv4 address of network-related information about a finding. See Ip Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv6Args']]] network_source_ipv6s: The source IPv6 address of network-related information about a finding. See Ip Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceMacArgs']]] network_source_macs: The source media access control (MAC) address of network-related information about a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourcePortArgs']]] network_source_ports: The source port of network-related information about a finding. See Number Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteTextArgs']]] note_texts: The text of a note. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedAtArgs']]] note_updated_ats: The timestamp of when the note was updated. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedByArgs']]] note_updated_bies: The principal that created a note. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessLaunchedAtArgs']]] process_launched_ats: The date/time that the process was launched. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessNameArgs']]] process_names: The name of the process. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessParentPidArgs']]] process_parent_pids: The parent process ID. See Number Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPathArgs']]] process_paths: The path to the process executable. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPidArgs']]] process_pids: The process ID. See Number Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessTerminatedAtArgs']]] process_terminated_ats: The date/time that the process was terminated. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductArnArgs']]] product_arns: The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductFieldArgs']]] product_fields: A data type where security-findings providers can include additional solution-specific details that aren't part of the defined `AwsSecurityFinding` format. See Map Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductNameArgs']]] product_names: The name of the solution (product) that generates findings. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecommendationTextArgs']]] recommendation_texts: The recommendation of what to do about the issue described in a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecordStateArgs']]] record_states: The updated record state for the finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsIdArgs']]] related_findings_ids: The solution-generated identifier for a related finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsProductArnArgs']]] related_findings_product_arns: The ARN of the solution that generated a related finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs']]] resource_aws_ec2_instance_iam_instance_profile_arns: The IAM profile ARN of the instance. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceImageIdArgs']]] resource_aws_ec2_instance_image_ids: The Amazon Machine Image (AMI) ID of the instance. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs']]] resource_aws_ec2_instance_ipv4_addresses: The IPv4 addresses associated with the instance. See Ip Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs']]] resource_aws_ec2_instance_ipv6_addresses: The IPv6 addresses associated with the instance. See Ip Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceKeyNameArgs']]] resource_aws_ec2_instance_key_names: The key name associated with the instance. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs']]] resource_aws_ec2_instance_launched_ats: The date and time the instance was launched. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceSubnetIdArgs']]] resource_aws_ec2_instance_subnet_ids: The identifier of the subnet that the instance was launched in. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceTypeArgs']]] resource_aws_ec2_instance_types: The instance type of the instance. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceVpcIdArgs']]] resource_aws_ec2_instance_vpc_ids: The identifier of the VPC that the instance was launched in. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs']]] resource_aws_iam_access_key_created_ats: The creation date/time of the IAM access key related to a finding. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyStatusArgs']]] resource_aws_iam_access_key_statuses: The status of the IAM access key related to a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyUserNameArgs']]] resource_aws_iam_access_key_user_names: The user associated with the IAM access key related to a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerIdArgs']]] resource_aws_s3_bucket_owner_ids: The canonical user ID of the owner of the S3 bucket. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerNameArgs']]] resource_aws_s3_bucket_owner_names: The display name of the owner of the S3 bucket. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageIdArgs']]] resource_container_image_ids: The identifier of the image related to a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageNameArgs']]] resource_container_image_names: The name of the image related to a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerLaunchedAtArgs']]] resource_container_launched_ats: The date/time that the container was started. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerNameArgs']]] resource_container_names: The name of the container related to a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceDetailsOtherArgs']]] resource_details_others: The details of a resource that doesn't have a specific subfield for the resource type defined. See Map Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceIdArgs']]] resource_ids: The canonical identifier for the given resource type. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourcePartitionArgs']]] resource_partitions: The canonical AWS partition name that the Region is assigned to. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceRegionArgs']]] resource_regions: The canonical AWS external Region name where this resource is located. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTagArgs']]] resource_tags: A list of AWS tags associated with a resource at the time the finding was processed. See Map Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTypeArgs']]] resource_types: Specifies the type of the resource that details are provided for. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersSeverityLabelArgs']]] severity_labels: The label of a finding's severity. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersSourceUrlArgs']]] source_urls: A URL that links to a page about the current finding in the security-findings provider's solution. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorCategoryArgs']]] threat_intel_indicator_categories: The category of a threat intelligence indicator. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtArgs']]] threat_intel_indicator_last_observed_ats: The date/time of the last observation of a threat intelligence indicator. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceUrlArgs']]] threat_intel_indicator_source_urls: The URL for more details from the source of the threat intelligence. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceArgs']]] threat_intel_indicator_sources: The source of the threat intelligence. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorTypeArgs']]] threat_intel_indicator_types: The type of a threat intelligence indicator. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorValueArgs']]] threat_intel_indicator_values: The value of a threat intelligence indicator. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersTitleArgs']]] titles: A finding's title. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersTypeArgs']]] types: A finding type in the format of `namespace/category/classifier` that classifies a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersUpdatedAtArgs']]] updated_ats: An ISO8601-formatted timestamp that indicates when the security-findings provider last updated the finding record. See Date Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersUserDefinedValueArgs']]] user_defined_values: A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. See Map Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersVerificationStateArgs']]] verification_states: The veracity of a finding. See String Filter below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['InsightFiltersWorkflowStatusArgs']]] workflow_statuses: The status of the investigation into a finding. See Workflow Status Filter below for more details.
        """
        if aws_account_ids is not None:
            pulumi.set(__self__, "aws_account_ids", aws_account_ids)
        if company_names is not None:
            pulumi.set(__self__, "company_names", company_names)
        if compliance_statuses is not None:
            pulumi.set(__self__, "compliance_statuses", compliance_statuses)
        if confidences is not None:
            pulumi.set(__self__, "confidences", confidences)
        if created_ats is not None:
            pulumi.set(__self__, "created_ats", created_ats)
        if criticalities is not None:
            pulumi.set(__self__, "criticalities", criticalities)
        if descriptions is not None:
            pulumi.set(__self__, "descriptions", descriptions)
        if finding_provider_fields_confidences is not None:
            pulumi.set(__self__, "finding_provider_fields_confidences", finding_provider_fields_confidences)
        if finding_provider_fields_criticalities is not None:
            pulumi.set(__self__, "finding_provider_fields_criticalities", finding_provider_fields_criticalities)
        if finding_provider_fields_related_findings_ids is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_ids", finding_provider_fields_related_findings_ids)
        if finding_provider_fields_related_findings_product_arns is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_product_arns", finding_provider_fields_related_findings_product_arns)
        if finding_provider_fields_severity_labels is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_labels", finding_provider_fields_severity_labels)
        if finding_provider_fields_severity_originals is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_originals", finding_provider_fields_severity_originals)
        if finding_provider_fields_types is not None:
            pulumi.set(__self__, "finding_provider_fields_types", finding_provider_fields_types)
        if first_observed_ats is not None:
            pulumi.set(__self__, "first_observed_ats", first_observed_ats)
        if generator_ids is not None:
            pulumi.set(__self__, "generator_ids", generator_ids)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if last_observed_ats is not None:
            pulumi.set(__self__, "last_observed_ats", last_observed_ats)
        if malware_names is not None:
            pulumi.set(__self__, "malware_names", malware_names)
        if malware_paths is not None:
            pulumi.set(__self__, "malware_paths", malware_paths)
        if malware_states is not None:
            pulumi.set(__self__, "malware_states", malware_states)
        if malware_types is not None:
            pulumi.set(__self__, "malware_types", malware_types)
        if network_destination_domains is not None:
            pulumi.set(__self__, "network_destination_domains", network_destination_domains)
        if network_destination_ipv4s is not None:
            pulumi.set(__self__, "network_destination_ipv4s", network_destination_ipv4s)
        if network_destination_ipv6s is not None:
            pulumi.set(__self__, "network_destination_ipv6s", network_destination_ipv6s)
        if network_destination_ports is not None:
            pulumi.set(__self__, "network_destination_ports", network_destination_ports)
        if network_directions is not None:
            pulumi.set(__self__, "network_directions", network_directions)
        if network_protocols is not None:
            pulumi.set(__self__, "network_protocols", network_protocols)
        if network_source_domains is not None:
            pulumi.set(__self__, "network_source_domains", network_source_domains)
        if network_source_ipv4s is not None:
            pulumi.set(__self__, "network_source_ipv4s", network_source_ipv4s)
        if network_source_ipv6s is not None:
            pulumi.set(__self__, "network_source_ipv6s", network_source_ipv6s)
        if network_source_macs is not None:
            pulumi.set(__self__, "network_source_macs", network_source_macs)
        if network_source_ports is not None:
            pulumi.set(__self__, "network_source_ports", network_source_ports)
        if note_texts is not None:
            pulumi.set(__self__, "note_texts", note_texts)
        if note_updated_ats is not None:
            pulumi.set(__self__, "note_updated_ats", note_updated_ats)
        if note_updated_bies is not None:
            pulumi.set(__self__, "note_updated_bies", note_updated_bies)
        if process_launched_ats is not None:
            pulumi.set(__self__, "process_launched_ats", process_launched_ats)
        if process_names is not None:
            pulumi.set(__self__, "process_names", process_names)
        if process_parent_pids is not None:
            pulumi.set(__self__, "process_parent_pids", process_parent_pids)
        if process_paths is not None:
            pulumi.set(__self__, "process_paths", process_paths)
        if process_pids is not None:
            pulumi.set(__self__, "process_pids", process_pids)
        if process_terminated_ats is not None:
            pulumi.set(__self__, "process_terminated_ats", process_terminated_ats)
        if product_arns is not None:
            pulumi.set(__self__, "product_arns", product_arns)
        if product_fields is not None:
            pulumi.set(__self__, "product_fields", product_fields)
        if product_names is not None:
            pulumi.set(__self__, "product_names", product_names)
        if recommendation_texts is not None:
            pulumi.set(__self__, "recommendation_texts", recommendation_texts)
        if record_states is not None:
            pulumi.set(__self__, "record_states", record_states)
        if related_findings_ids is not None:
            pulumi.set(__self__, "related_findings_ids", related_findings_ids)
        if related_findings_product_arns is not None:
            pulumi.set(__self__, "related_findings_product_arns", related_findings_product_arns)
        if resource_aws_ec2_instance_iam_instance_profile_arns is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_iam_instance_profile_arns", resource_aws_ec2_instance_iam_instance_profile_arns)
        if resource_aws_ec2_instance_image_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_image_ids", resource_aws_ec2_instance_image_ids)
        if resource_aws_ec2_instance_ipv4_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ipv4_addresses", resource_aws_ec2_instance_ipv4_addresses)
        if resource_aws_ec2_instance_ipv6_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ipv6_addresses", resource_aws_ec2_instance_ipv6_addresses)
        if resource_aws_ec2_instance_key_names is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_key_names", resource_aws_ec2_instance_key_names)
        if resource_aws_ec2_instance_launched_ats is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_launched_ats", resource_aws_ec2_instance_launched_ats)
        if resource_aws_ec2_instance_subnet_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_subnet_ids", resource_aws_ec2_instance_subnet_ids)
        if resource_aws_ec2_instance_types is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_types", resource_aws_ec2_instance_types)
        if resource_aws_ec2_instance_vpc_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_vpc_ids", resource_aws_ec2_instance_vpc_ids)
        if resource_aws_iam_access_key_created_ats is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_created_ats", resource_aws_iam_access_key_created_ats)
        if resource_aws_iam_access_key_statuses is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_statuses", resource_aws_iam_access_key_statuses)
        if resource_aws_iam_access_key_user_names is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_user_names", resource_aws_iam_access_key_user_names)
        if resource_aws_s3_bucket_owner_ids is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_ids", resource_aws_s3_bucket_owner_ids)
        if resource_aws_s3_bucket_owner_names is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_names", resource_aws_s3_bucket_owner_names)
        if resource_container_image_ids is not None:
            pulumi.set(__self__, "resource_container_image_ids", resource_container_image_ids)
        if resource_container_image_names is not None:
            pulumi.set(__self__, "resource_container_image_names", resource_container_image_names)
        if resource_container_launched_ats is not None:
            pulumi.set(__self__, "resource_container_launched_ats", resource_container_launched_ats)
        if resource_container_names is not None:
            pulumi.set(__self__, "resource_container_names", resource_container_names)
        if resource_details_others is not None:
            pulumi.set(__self__, "resource_details_others", resource_details_others)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_partitions is not None:
            pulumi.set(__self__, "resource_partitions", resource_partitions)
        if resource_regions is not None:
            pulumi.set(__self__, "resource_regions", resource_regions)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if severity_labels is not None:
            pulumi.set(__self__, "severity_labels", severity_labels)
        if source_urls is not None:
            pulumi.set(__self__, "source_urls", source_urls)
        if threat_intel_indicator_categories is not None:
            pulumi.set(__self__, "threat_intel_indicator_categories", threat_intel_indicator_categories)
        if threat_intel_indicator_last_observed_ats is not None:
            pulumi.set(__self__, "threat_intel_indicator_last_observed_ats", threat_intel_indicator_last_observed_ats)
        if threat_intel_indicator_source_urls is not None:
            pulumi.set(__self__, "threat_intel_indicator_source_urls", threat_intel_indicator_source_urls)
        if threat_intel_indicator_sources is not None:
            pulumi.set(__self__, "threat_intel_indicator_sources", threat_intel_indicator_sources)
        if threat_intel_indicator_types is not None:
            pulumi.set(__self__, "threat_intel_indicator_types", threat_intel_indicator_types)
        if threat_intel_indicator_values is not None:
            pulumi.set(__self__, "threat_intel_indicator_values", threat_intel_indicator_values)
        if titles is not None:
            pulumi.set(__self__, "titles", titles)
        if types is not None:
            pulumi.set(__self__, "types", types)
        if updated_ats is not None:
            pulumi.set(__self__, "updated_ats", updated_ats)
        if user_defined_values is not None:
            pulumi.set(__self__, "user_defined_values", user_defined_values)
        if verification_states is not None:
            pulumi.set(__self__, "verification_states", verification_states)
        if workflow_statuses is not None:
            pulumi.set(__self__, "workflow_statuses", workflow_statuses)

    @property
    @pulumi.getter(name="awsAccountIds")
    def aws_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersAwsAccountIdArgs']]]]:
        """
        AWS account ID that a finding is generated in. See String_Filter below for more details.
        """
        return pulumi.get(self, "aws_account_ids")

    @aws_account_ids.setter
    def aws_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersAwsAccountIdArgs']]]]):
        pulumi.set(self, "aws_account_ids", value)

    @property
    @pulumi.getter(name="companyNames")
    def company_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCompanyNameArgs']]]]:
        """
        The name of the findings provider (company) that owns the solution (product) that generates findings. See String_Filter below for more details.
        """
        return pulumi.get(self, "company_names")

    @company_names.setter
    def company_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCompanyNameArgs']]]]):
        pulumi.set(self, "company_names", value)

    @property
    @pulumi.getter(name="complianceStatuses")
    def compliance_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersComplianceStatusArgs']]]]:
        """
        Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details. See String Filter below for more details.
        """
        return pulumi.get(self, "compliance_statuses")

    @compliance_statuses.setter
    def compliance_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersComplianceStatusArgs']]]]):
        pulumi.set(self, "compliance_statuses", value)

    @property
    @pulumi.getter
    def confidences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersConfidenceArgs']]]]:
        """
        A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
        """
        return pulumi.get(self, "confidences")

    @confidences.setter
    def confidences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersConfidenceArgs']]]]):
        pulumi.set(self, "confidences", value)

    @property
    @pulumi.getter(name="createdAts")
    def created_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCreatedAtArgs']]]]:
        """
        An ISO8601-formatted timestamp that indicates when the security-findings provider captured the potential security issue that a finding captured. See Date Filter below for more details.
        """
        return pulumi.get(self, "created_ats")

    @created_ats.setter
    def created_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCreatedAtArgs']]]]):
        pulumi.set(self, "created_ats", value)

    @property
    @pulumi.getter
    def criticalities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCriticalityArgs']]]]:
        """
        The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
        """
        return pulumi.get(self, "criticalities")

    @criticalities.setter
    def criticalities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersCriticalityArgs']]]]):
        pulumi.set(self, "criticalities", value)

    @property
    @pulumi.getter
    def descriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersDescriptionArgs']]]]:
        """
        A finding's description. See String Filter below for more details.
        """
        return pulumi.get(self, "descriptions")

    @descriptions.setter
    def descriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersDescriptionArgs']]]]):
        pulumi.set(self, "descriptions", value)

    @property
    @pulumi.getter(name="findingProviderFieldsConfidences")
    def finding_provider_fields_confidences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsConfidenceArgs']]]]:
        """
        The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence. See Number Filter below for more details.
        """
        return pulumi.get(self, "finding_provider_fields_confidences")

    @finding_provider_fields_confidences.setter
    def finding_provider_fields_confidences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsConfidenceArgs']]]]):
        pulumi.set(self, "finding_provider_fields_confidences", value)

    @property
    @pulumi.getter(name="findingProviderFieldsCriticalities")
    def finding_provider_fields_criticalities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsCriticalityArgs']]]]:
        """
        The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. See Number Filter below for more details.
        """
        return pulumi.get(self, "finding_provider_fields_criticalities")

    @finding_provider_fields_criticalities.setter
    def finding_provider_fields_criticalities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsCriticalityArgs']]]]):
        pulumi.set(self, "finding_provider_fields_criticalities", value)

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsIds")
    def finding_provider_fields_related_findings_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs']]]]:
        """
        The finding identifier of a related finding that is identified by the finding provider. See String Filter below for more details.
        """
        return pulumi.get(self, "finding_provider_fields_related_findings_ids")

    @finding_provider_fields_related_findings_ids.setter
    def finding_provider_fields_related_findings_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs']]]]):
        pulumi.set(self, "finding_provider_fields_related_findings_ids", value)

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsProductArns")
    def finding_provider_fields_related_findings_product_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs']]]]:
        """
        The ARN of the solution that generated a related finding that is identified by the finding provider. See String Filter below for more details.
        """
        return pulumi.get(self, "finding_provider_fields_related_findings_product_arns")

    @finding_provider_fields_related_findings_product_arns.setter
    def finding_provider_fields_related_findings_product_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs']]]]):
        pulumi.set(self, "finding_provider_fields_related_findings_product_arns", value)

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityLabels")
    def finding_provider_fields_severity_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityLabelArgs']]]]:
        """
        The finding provider value for the severity label. See String Filter below for more details.
        """
        return pulumi.get(self, "finding_provider_fields_severity_labels")

    @finding_provider_fields_severity_labels.setter
    def finding_provider_fields_severity_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityLabelArgs']]]]):
        pulumi.set(self, "finding_provider_fields_severity_labels", value)

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityOriginals")
    def finding_provider_fields_severity_originals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityOriginalArgs']]]]:
        """
        The finding provider's original value for the severity. See String Filter below for more details.
        """
        return pulumi.get(self, "finding_provider_fields_severity_originals")

    @finding_provider_fields_severity_originals.setter
    def finding_provider_fields_severity_originals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsSeverityOriginalArgs']]]]):
        pulumi.set(self, "finding_provider_fields_severity_originals", value)

    @property
    @pulumi.getter(name="findingProviderFieldsTypes")
    def finding_provider_fields_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsTypeArgs']]]]:
        """
        One or more finding types that the finding provider assigned to the finding. Uses the format of `namespace/category/classifier` that classify a finding. Valid namespace values include: `Software and Configuration Checks`, `TTPs`, `Effects`, `Unusual Behaviors`, and `Sensitive Data Identifications`. See String Filter below for more details.
        """
        return pulumi.get(self, "finding_provider_fields_types")

    @finding_provider_fields_types.setter
    def finding_provider_fields_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFindingProviderFieldsTypeArgs']]]]):
        pulumi.set(self, "finding_provider_fields_types", value)

    @property
    @pulumi.getter(name="firstObservedAts")
    def first_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFirstObservedAtArgs']]]]:
        """
        An ISO8601-formatted timestamp that indicates when the security-findings provider first observed the potential security issue that a finding captured. See Date Filter below for more details.
        """
        return pulumi.get(self, "first_observed_ats")

    @first_observed_ats.setter
    def first_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersFirstObservedAtArgs']]]]):
        pulumi.set(self, "first_observed_ats", value)

    @property
    @pulumi.getter(name="generatorIds")
    def generator_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersGeneratorIdArgs']]]]:
        """
        The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "generator_ids")

    @generator_ids.setter
    def generator_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersGeneratorIdArgs']]]]):
        pulumi.set(self, "generator_ids", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersIdArgs']]]]:
        """
        The security findings provider-specific identifier for a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersIdArgs']]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter
    def keywords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersKeywordArgs']]]]:
        """
        A keyword for a finding. See Keyword Filter below for more details.
        """
        return pulumi.get(self, "keywords")

    @keywords.setter
    def keywords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersKeywordArgs']]]]):
        pulumi.set(self, "keywords", value)

    @property
    @pulumi.getter(name="lastObservedAts")
    def last_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersLastObservedAtArgs']]]]:
        """
        An ISO8601-formatted timestamp that indicates when the security-findings provider most recently observed the potential security issue that a finding captured. See Date Filter below for more details.
        """
        return pulumi.get(self, "last_observed_ats")

    @last_observed_ats.setter
    def last_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersLastObservedAtArgs']]]]):
        pulumi.set(self, "last_observed_ats", value)

    @property
    @pulumi.getter(name="malwareNames")
    def malware_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareNameArgs']]]]:
        """
        The name of the malware that was observed. See String Filter below for more details.
        """
        return pulumi.get(self, "malware_names")

    @malware_names.setter
    def malware_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareNameArgs']]]]):
        pulumi.set(self, "malware_names", value)

    @property
    @pulumi.getter(name="malwarePaths")
    def malware_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwarePathArgs']]]]:
        """
        The filesystem path of the malware that was observed. See String Filter below for more details.
        """
        return pulumi.get(self, "malware_paths")

    @malware_paths.setter
    def malware_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwarePathArgs']]]]):
        pulumi.set(self, "malware_paths", value)

    @property
    @pulumi.getter(name="malwareStates")
    def malware_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareStateArgs']]]]:
        """
        The state of the malware that was observed. See String Filter below for more details.
        """
        return pulumi.get(self, "malware_states")

    @malware_states.setter
    def malware_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareStateArgs']]]]):
        pulumi.set(self, "malware_states", value)

    @property
    @pulumi.getter(name="malwareTypes")
    def malware_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareTypeArgs']]]]:
        """
        The type of the malware that was observed. See String Filter below for more details.
        """
        return pulumi.get(self, "malware_types")

    @malware_types.setter
    def malware_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersMalwareTypeArgs']]]]):
        pulumi.set(self, "malware_types", value)

    @property
    @pulumi.getter(name="networkDestinationDomains")
    def network_destination_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationDomainArgs']]]]:
        """
        The destination domain of network-related information about a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "network_destination_domains")

    @network_destination_domains.setter
    def network_destination_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationDomainArgs']]]]):
        pulumi.set(self, "network_destination_domains", value)

    @property
    @pulumi.getter(name="networkDestinationIpv4s")
    def network_destination_ipv4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv4Args']]]]:
        """
        The destination IPv4 address of network-related information about a finding. See Ip Filter below for more details.
        """
        return pulumi.get(self, "network_destination_ipv4s")

    @network_destination_ipv4s.setter
    def network_destination_ipv4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv4Args']]]]):
        pulumi.set(self, "network_destination_ipv4s", value)

    @property
    @pulumi.getter(name="networkDestinationIpv6s")
    def network_destination_ipv6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv6Args']]]]:
        """
        The destination IPv6 address of network-related information about a finding. See Ip Filter below for more details.
        """
        return pulumi.get(self, "network_destination_ipv6s")

    @network_destination_ipv6s.setter
    def network_destination_ipv6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationIpv6Args']]]]):
        pulumi.set(self, "network_destination_ipv6s", value)

    @property
    @pulumi.getter(name="networkDestinationPorts")
    def network_destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationPortArgs']]]]:
        """
        The destination port of network-related information about a finding. See Number Filter below for more details.
        """
        return pulumi.get(self, "network_destination_ports")

    @network_destination_ports.setter
    def network_destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDestinationPortArgs']]]]):
        pulumi.set(self, "network_destination_ports", value)

    @property
    @pulumi.getter(name="networkDirections")
    def network_directions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDirectionArgs']]]]:
        """
        Indicates the direction of network traffic associated with a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "network_directions")

    @network_directions.setter
    def network_directions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkDirectionArgs']]]]):
        pulumi.set(self, "network_directions", value)

    @property
    @pulumi.getter(name="networkProtocols")
    def network_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkProtocolArgs']]]]:
        """
        The protocol of network-related information about a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "network_protocols")

    @network_protocols.setter
    def network_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkProtocolArgs']]]]):
        pulumi.set(self, "network_protocols", value)

    @property
    @pulumi.getter(name="networkSourceDomains")
    def network_source_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceDomainArgs']]]]:
        """
        The source domain of network-related information about a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "network_source_domains")

    @network_source_domains.setter
    def network_source_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceDomainArgs']]]]):
        pulumi.set(self, "network_source_domains", value)

    @property
    @pulumi.getter(name="networkSourceIpv4s")
    def network_source_ipv4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv4Args']]]]:
        """
        The source IPv4 address of network-related information about a finding. See Ip Filter below for more details.
        """
        return pulumi.get(self, "network_source_ipv4s")

    @network_source_ipv4s.setter
    def network_source_ipv4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv4Args']]]]):
        pulumi.set(self, "network_source_ipv4s", value)

    @property
    @pulumi.getter(name="networkSourceIpv6s")
    def network_source_ipv6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv6Args']]]]:
        """
        The source IPv6 address of network-related information about a finding. See Ip Filter below for more details.
        """
        return pulumi.get(self, "network_source_ipv6s")

    @network_source_ipv6s.setter
    def network_source_ipv6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceIpv6Args']]]]):
        pulumi.set(self, "network_source_ipv6s", value)

    @property
    @pulumi.getter(name="networkSourceMacs")
    def network_source_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceMacArgs']]]]:
        """
        The source media access control (MAC) address of network-related information about a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "network_source_macs")

    @network_source_macs.setter
    def network_source_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourceMacArgs']]]]):
        pulumi.set(self, "network_source_macs", value)

    @property
    @pulumi.getter(name="networkSourcePorts")
    def network_source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourcePortArgs']]]]:
        """
        The source port of network-related information about a finding. See Number Filter below for more details.
        """
        return pulumi.get(self, "network_source_ports")

    @network_source_ports.setter
    def network_source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNetworkSourcePortArgs']]]]):
        pulumi.set(self, "network_source_ports", value)

    @property
    @pulumi.getter(name="noteTexts")
    def note_texts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteTextArgs']]]]:
        """
        The text of a note. See String Filter below for more details.
        """
        return pulumi.get(self, "note_texts")

    @note_texts.setter
    def note_texts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteTextArgs']]]]):
        pulumi.set(self, "note_texts", value)

    @property
    @pulumi.getter(name="noteUpdatedAts")
    def note_updated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedAtArgs']]]]:
        """
        The timestamp of when the note was updated. See Date Filter below for more details.
        """
        return pulumi.get(self, "note_updated_ats")

    @note_updated_ats.setter
    def note_updated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedAtArgs']]]]):
        pulumi.set(self, "note_updated_ats", value)

    @property
    @pulumi.getter(name="noteUpdatedBies")
    def note_updated_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedByArgs']]]]:
        """
        The principal that created a note. See String Filter below for more details.
        """
        return pulumi.get(self, "note_updated_bies")

    @note_updated_bies.setter
    def note_updated_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersNoteUpdatedByArgs']]]]):
        pulumi.set(self, "note_updated_bies", value)

    @property
    @pulumi.getter(name="processLaunchedAts")
    def process_launched_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessLaunchedAtArgs']]]]:
        """
        The date/time that the process was launched. See Date Filter below for more details.
        """
        return pulumi.get(self, "process_launched_ats")

    @process_launched_ats.setter
    def process_launched_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessLaunchedAtArgs']]]]):
        pulumi.set(self, "process_launched_ats", value)

    @property
    @pulumi.getter(name="processNames")
    def process_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessNameArgs']]]]:
        """
        The name of the process. See String Filter below for more details.
        """
        return pulumi.get(self, "process_names")

    @process_names.setter
    def process_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessNameArgs']]]]):
        pulumi.set(self, "process_names", value)

    @property
    @pulumi.getter(name="processParentPids")
    def process_parent_pids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessParentPidArgs']]]]:
        """
        The parent process ID. See Number Filter below for more details.
        """
        return pulumi.get(self, "process_parent_pids")

    @process_parent_pids.setter
    def process_parent_pids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessParentPidArgs']]]]):
        pulumi.set(self, "process_parent_pids", value)

    @property
    @pulumi.getter(name="processPaths")
    def process_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPathArgs']]]]:
        """
        The path to the process executable. See String Filter below for more details.
        """
        return pulumi.get(self, "process_paths")

    @process_paths.setter
    def process_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPathArgs']]]]):
        pulumi.set(self, "process_paths", value)

    @property
    @pulumi.getter(name="processPids")
    def process_pids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPidArgs']]]]:
        """
        The process ID. See Number Filter below for more details.
        """
        return pulumi.get(self, "process_pids")

    @process_pids.setter
    def process_pids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessPidArgs']]]]):
        pulumi.set(self, "process_pids", value)

    @property
    @pulumi.getter(name="processTerminatedAts")
    def process_terminated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessTerminatedAtArgs']]]]:
        """
        The date/time that the process was terminated. See Date Filter below for more details.
        """
        return pulumi.get(self, "process_terminated_ats")

    @process_terminated_ats.setter
    def process_terminated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProcessTerminatedAtArgs']]]]):
        pulumi.set(self, "process_terminated_ats", value)

    @property
    @pulumi.getter(name="productArns")
    def product_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductArnArgs']]]]:
        """
        The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub. See String Filter below for more details.
        """
        return pulumi.get(self, "product_arns")

    @product_arns.setter
    def product_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductArnArgs']]]]):
        pulumi.set(self, "product_arns", value)

    @property
    @pulumi.getter(name="productFields")
    def product_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductFieldArgs']]]]:
        """
        A data type where security-findings providers can include additional solution-specific details that aren't part of the defined `AwsSecurityFinding` format. See Map Filter below for more details.
        """
        return pulumi.get(self, "product_fields")

    @product_fields.setter
    def product_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductFieldArgs']]]]):
        pulumi.set(self, "product_fields", value)

    @property
    @pulumi.getter(name="productNames")
    def product_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductNameArgs']]]]:
        """
        The name of the solution (product) that generates findings. See String Filter below for more details.
        """
        return pulumi.get(self, "product_names")

    @product_names.setter
    def product_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersProductNameArgs']]]]):
        pulumi.set(self, "product_names", value)

    @property
    @pulumi.getter(name="recommendationTexts")
    def recommendation_texts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecommendationTextArgs']]]]:
        """
        The recommendation of what to do about the issue described in a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "recommendation_texts")

    @recommendation_texts.setter
    def recommendation_texts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecommendationTextArgs']]]]):
        pulumi.set(self, "recommendation_texts", value)

    @property
    @pulumi.getter(name="recordStates")
    def record_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecordStateArgs']]]]:
        """
        The updated record state for the finding. See String Filter below for more details.
        """
        return pulumi.get(self, "record_states")

    @record_states.setter
    def record_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRecordStateArgs']]]]):
        pulumi.set(self, "record_states", value)

    @property
    @pulumi.getter(name="relatedFindingsIds")
    def related_findings_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsIdArgs']]]]:
        """
        The solution-generated identifier for a related finding. See String Filter below for more details.
        """
        return pulumi.get(self, "related_findings_ids")

    @related_findings_ids.setter
    def related_findings_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsIdArgs']]]]):
        pulumi.set(self, "related_findings_ids", value)

    @property
    @pulumi.getter(name="relatedFindingsProductArns")
    def related_findings_product_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsProductArnArgs']]]]:
        """
        The ARN of the solution that generated a related finding. See String Filter below for more details.
        """
        return pulumi.get(self, "related_findings_product_arns")

    @related_findings_product_arns.setter
    def related_findings_product_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersRelatedFindingsProductArnArgs']]]]):
        pulumi.set(self, "related_findings_product_arns", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIamInstanceProfileArns")
    def resource_aws_ec2_instance_iam_instance_profile_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs']]]]:
        """
        The IAM profile ARN of the instance. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_iam_instance_profile_arns")

    @resource_aws_ec2_instance_iam_instance_profile_arns.setter
    def resource_aws_ec2_instance_iam_instance_profile_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_iam_instance_profile_arns", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceImageIds")
    def resource_aws_ec2_instance_image_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceImageIdArgs']]]]:
        """
        The Amazon Machine Image (AMI) ID of the instance. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_image_ids")

    @resource_aws_ec2_instance_image_ids.setter
    def resource_aws_ec2_instance_image_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceImageIdArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_image_ids", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpv4Addresses")
    def resource_aws_ec2_instance_ipv4_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs']]]]:
        """
        The IPv4 addresses associated with the instance. See Ip Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_ipv4_addresses")

    @resource_aws_ec2_instance_ipv4_addresses.setter
    def resource_aws_ec2_instance_ipv4_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_ipv4_addresses", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpv6Addresses")
    def resource_aws_ec2_instance_ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs']]]]:
        """
        The IPv6 addresses associated with the instance. See Ip Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_ipv6_addresses")

    @resource_aws_ec2_instance_ipv6_addresses.setter
    def resource_aws_ec2_instance_ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_ipv6_addresses", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceKeyNames")
    def resource_aws_ec2_instance_key_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceKeyNameArgs']]]]:
        """
        The key name associated with the instance. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_key_names")

    @resource_aws_ec2_instance_key_names.setter
    def resource_aws_ec2_instance_key_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceKeyNameArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_key_names", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceLaunchedAts")
    def resource_aws_ec2_instance_launched_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs']]]]:
        """
        The date and time the instance was launched. See Date Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_launched_ats")

    @resource_aws_ec2_instance_launched_ats.setter
    def resource_aws_ec2_instance_launched_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_launched_ats", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceSubnetIds")
    def resource_aws_ec2_instance_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceSubnetIdArgs']]]]:
        """
        The identifier of the subnet that the instance was launched in. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_subnet_ids")

    @resource_aws_ec2_instance_subnet_ids.setter
    def resource_aws_ec2_instance_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceSubnetIdArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_subnet_ids", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceTypes")
    def resource_aws_ec2_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceTypeArgs']]]]:
        """
        The instance type of the instance. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_types")

    @resource_aws_ec2_instance_types.setter
    def resource_aws_ec2_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceTypeArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_types", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceVpcIds")
    def resource_aws_ec2_instance_vpc_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceVpcIdArgs']]]]:
        """
        The identifier of the VPC that the instance was launched in. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_vpc_ids")

    @resource_aws_ec2_instance_vpc_ids.setter
    def resource_aws_ec2_instance_vpc_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsEc2InstanceVpcIdArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_vpc_ids", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyCreatedAts")
    def resource_aws_iam_access_key_created_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs']]]]:
        """
        The creation date/time of the IAM access key related to a finding. See Date Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_created_ats")

    @resource_aws_iam_access_key_created_ats.setter
    def resource_aws_iam_access_key_created_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_created_ats", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyStatuses")
    def resource_aws_iam_access_key_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyStatusArgs']]]]:
        """
        The status of the IAM access key related to a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_statuses")

    @resource_aws_iam_access_key_statuses.setter
    def resource_aws_iam_access_key_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyStatusArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_statuses", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyUserNames")
    def resource_aws_iam_access_key_user_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyUserNameArgs']]]]:
        """
        The user associated with the IAM access key related to a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_user_names")

    @resource_aws_iam_access_key_user_names.setter
    def resource_aws_iam_access_key_user_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyUserNameArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_user_names", value)

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerIds")
    def resource_aws_s3_bucket_owner_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerIdArgs']]]]:
        """
        The canonical user ID of the owner of the S3 bucket. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_s3_bucket_owner_ids")

    @resource_aws_s3_bucket_owner_ids.setter
    def resource_aws_s3_bucket_owner_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerIdArgs']]]]):
        pulumi.set(self, "resource_aws_s3_bucket_owner_ids", value)

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerNames")
    def resource_aws_s3_bucket_owner_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerNameArgs']]]]:
        """
        The display name of the owner of the S3 bucket. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_aws_s3_bucket_owner_names")

    @resource_aws_s3_bucket_owner_names.setter
    def resource_aws_s3_bucket_owner_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceAwsS3BucketOwnerNameArgs']]]]):
        pulumi.set(self, "resource_aws_s3_bucket_owner_names", value)

    @property
    @pulumi.getter(name="resourceContainerImageIds")
    def resource_container_image_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageIdArgs']]]]:
        """
        The identifier of the image related to a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_container_image_ids")

    @resource_container_image_ids.setter
    def resource_container_image_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageIdArgs']]]]):
        pulumi.set(self, "resource_container_image_ids", value)

    @property
    @pulumi.getter(name="resourceContainerImageNames")
    def resource_container_image_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageNameArgs']]]]:
        """
        The name of the image related to a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_container_image_names")

    @resource_container_image_names.setter
    def resource_container_image_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerImageNameArgs']]]]):
        pulumi.set(self, "resource_container_image_names", value)

    @property
    @pulumi.getter(name="resourceContainerLaunchedAts")
    def resource_container_launched_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerLaunchedAtArgs']]]]:
        """
        The date/time that the container was started. See Date Filter below for more details.
        """
        return pulumi.get(self, "resource_container_launched_ats")

    @resource_container_launched_ats.setter
    def resource_container_launched_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerLaunchedAtArgs']]]]):
        pulumi.set(self, "resource_container_launched_ats", value)

    @property
    @pulumi.getter(name="resourceContainerNames")
    def resource_container_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerNameArgs']]]]:
        """
        The name of the container related to a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_container_names")

    @resource_container_names.setter
    def resource_container_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceContainerNameArgs']]]]):
        pulumi.set(self, "resource_container_names", value)

    @property
    @pulumi.getter(name="resourceDetailsOthers")
    def resource_details_others(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceDetailsOtherArgs']]]]:
        """
        The details of a resource that doesn't have a specific subfield for the resource type defined. See Map Filter below for more details.
        """
        return pulumi.get(self, "resource_details_others")

    @resource_details_others.setter
    def resource_details_others(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceDetailsOtherArgs']]]]):
        pulumi.set(self, "resource_details_others", value)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceIdArgs']]]]:
        """
        The canonical identifier for the given resource type. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceIdArgs']]]]):
        pulumi.set(self, "resource_ids", value)

    @property
    @pulumi.getter(name="resourcePartitions")
    def resource_partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourcePartitionArgs']]]]:
        """
        The canonical AWS partition name that the Region is assigned to. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_partitions")

    @resource_partitions.setter
    def resource_partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourcePartitionArgs']]]]):
        pulumi.set(self, "resource_partitions", value)

    @property
    @pulumi.getter(name="resourceRegions")
    def resource_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceRegionArgs']]]]:
        """
        The canonical AWS external Region name where this resource is located. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_regions")

    @resource_regions.setter
    def resource_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceRegionArgs']]]]):
        pulumi.set(self, "resource_regions", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTagArgs']]]]:
        """
        A list of AWS tags associated with a resource at the time the finding was processed. See Map Filter below for more details.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTypeArgs']]]]:
        """
        Specifies the type of the resource that details are provided for. See String Filter below for more details.
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersResourceTypeArgs']]]]):
        pulumi.set(self, "resource_types", value)

    @property
    @pulumi.getter(name="severityLabels")
    def severity_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSeverityLabelArgs']]]]:
        """
        The label of a finding's severity. See String Filter below for more details.
        """
        return pulumi.get(self, "severity_labels")

    @severity_labels.setter
    def severity_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSeverityLabelArgs']]]]):
        pulumi.set(self, "severity_labels", value)

    @property
    @pulumi.getter(name="sourceUrls")
    def source_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSourceUrlArgs']]]]:
        """
        A URL that links to a page about the current finding in the security-findings provider's solution. See String Filter below for more details.
        """
        return pulumi.get(self, "source_urls")

    @source_urls.setter
    def source_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersSourceUrlArgs']]]]):
        pulumi.set(self, "source_urls", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorCategories")
    def threat_intel_indicator_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorCategoryArgs']]]]:
        """
        The category of a threat intelligence indicator. See String Filter below for more details.
        """
        return pulumi.get(self, "threat_intel_indicator_categories")

    @threat_intel_indicator_categories.setter
    def threat_intel_indicator_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorCategoryArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_categories", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorLastObservedAts")
    def threat_intel_indicator_last_observed_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtArgs']]]]:
        """
        The date/time of the last observation of a threat intelligence indicator. See Date Filter below for more details.
        """
        return pulumi.get(self, "threat_intel_indicator_last_observed_ats")

    @threat_intel_indicator_last_observed_ats.setter
    def threat_intel_indicator_last_observed_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_last_observed_ats", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorSourceUrls")
    def threat_intel_indicator_source_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceUrlArgs']]]]:
        """
        The URL for more details from the source of the threat intelligence. See String Filter below for more details.
        """
        return pulumi.get(self, "threat_intel_indicator_source_urls")

    @threat_intel_indicator_source_urls.setter
    def threat_intel_indicator_source_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceUrlArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_source_urls", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorSources")
    def threat_intel_indicator_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceArgs']]]]:
        """
        The source of the threat intelligence. See String Filter below for more details.
        """
        return pulumi.get(self, "threat_intel_indicator_sources")

    @threat_intel_indicator_sources.setter
    def threat_intel_indicator_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorSourceArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_sources", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorTypes")
    def threat_intel_indicator_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorTypeArgs']]]]:
        """
        The type of a threat intelligence indicator. See String Filter below for more details.
        """
        return pulumi.get(self, "threat_intel_indicator_types")

    @threat_intel_indicator_types.setter
    def threat_intel_indicator_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorTypeArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_types", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorValues")
    def threat_intel_indicator_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorValueArgs']]]]:
        """
        The value of a threat intelligence indicator. See String Filter below for more details.
        """
        return pulumi.get(self, "threat_intel_indicator_values")

    @threat_intel_indicator_values.setter
    def threat_intel_indicator_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersThreatIntelIndicatorValueArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_values", value)

    @property
    @pulumi.getter
    def titles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTitleArgs']]]]:
        """
        A finding's title. See String Filter below for more details.
        """
        return pulumi.get(self, "titles")

    @titles.setter
    def titles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTitleArgs']]]]):
        pulumi.set(self, "titles", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTypeArgs']]]]:
        """
        A finding type in the format of `namespace/category/classifier` that classifies a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersTypeArgs']]]]):
        pulumi.set(self, "types", value)

    @property
    @pulumi.getter(name="updatedAts")
    def updated_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUpdatedAtArgs']]]]:
        """
        An ISO8601-formatted timestamp that indicates when the security-findings provider last updated the finding record. See Date Filter below for more details.
        """
        return pulumi.get(self, "updated_ats")

    @updated_ats.setter
    def updated_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUpdatedAtArgs']]]]):
        pulumi.set(self, "updated_ats", value)

    @property
    @pulumi.getter(name="userDefinedValues")
    def user_defined_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUserDefinedValueArgs']]]]:
        """
        A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. See Map Filter below for more details.
        """
        return pulumi.get(self, "user_defined_values")

    @user_defined_values.setter
    def user_defined_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersUserDefinedValueArgs']]]]):
        pulumi.set(self, "user_defined_values", value)

    @property
    @pulumi.getter(name="verificationStates")
    def verification_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersVerificationStateArgs']]]]:
        """
        The veracity of a finding. See String Filter below for more details.
        """
        return pulumi.get(self, "verification_states")

    @verification_states.setter
    def verification_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersVerificationStateArgs']]]]):
        pulumi.set(self, "verification_states", value)

    @property
    @pulumi.getter(name="workflowStatuses")
    def workflow_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersWorkflowStatusArgs']]]]:
        """
        The status of the investigation into a finding. See Workflow Status Filter below for more details.
        """
        return pulumi.get(self, "workflow_statuses")

    @workflow_statuses.setter
    def workflow_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightFiltersWorkflowStatusArgs']]]]):
        pulumi.set(self, "workflow_statuses", value)


@pulumi.input_type
class InsightFiltersAwsAccountIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersCompanyNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersComplianceStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersConfidenceArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersCreatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersCreatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersCreatedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersCreatedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersCreatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersCreatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersCriticalityArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersDescriptionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsConfidenceArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsCriticalityArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsRelatedFindingsIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsRelatedFindingsProductArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsSeverityLabelArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsSeverityOriginalArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFindingProviderFieldsTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersFirstObservedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersFirstObservedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersFirstObservedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersFirstObservedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersFirstObservedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersFirstObservedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersGeneratorIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersKeywordArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: A value for the keyword.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A value for the keyword.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersLastObservedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersLastObservedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersLastObservedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersLastObservedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersLastObservedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersLastObservedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersMalwareNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersMalwarePathArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersMalwareStateArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersMalwareTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkDestinationDomainArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkDestinationIpv4Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cidr: A finding's CIDR value.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        A finding's CIDR value.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersNetworkDestinationIpv6Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cidr: A finding's CIDR value.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        A finding's CIDR value.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersNetworkDestinationPortArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersNetworkDirectionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkProtocolArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkSourceDomainArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkSourceIpv4Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cidr: A finding's CIDR value.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        A finding's CIDR value.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersNetworkSourceIpv6Args:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cidr: A finding's CIDR value.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        A finding's CIDR value.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersNetworkSourceMacArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNetworkSourcePortArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersNoteTextArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNoteUpdatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersNoteUpdatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersNoteUpdatedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersNoteUpdatedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersNoteUpdatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersNoteUpdatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersNoteUpdatedByArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProcessLaunchedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersProcessLaunchedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersProcessLaunchedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersProcessLaunchedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersProcessLaunchedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersProcessLaunchedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProcessNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProcessParentPidArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersProcessPathArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProcessPidArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[str]] = None,
                 gte: Optional[pulumi.Input[str]] = None,
                 lte: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] eq: The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] gte: The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        :param pulumi.Input[str] lte: The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[str]]:
        """
        The equal-to condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[str]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[str]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings, provided as a String.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightFiltersProcessTerminatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersProcessTerminatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersProcessTerminatedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersProcessTerminatedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersProcessTerminatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersProcessTerminatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProductArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProductFieldArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] key: The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersProductNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersRecommendationTextArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersRecordStateArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersRelatedFindingsIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersRelatedFindingsProductArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArnArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceImageIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceIpv4AddressArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cidr: A finding's CIDR value.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        A finding's CIDR value.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceIpv6AddressArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cidr: A finding's CIDR value.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        A finding's CIDR value.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceKeyNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceLaunchedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceSubnetIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsEc2InstanceVpcIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsIamAccessKeyCreatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsIamAccessKeyStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsIamAccessKeyUserNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsS3BucketOwnerIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceAwsS3BucketOwnerNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceContainerImageIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceContainerImageNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceContainerLaunchedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersResourceContainerLaunchedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersResourceContainerLaunchedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersResourceContainerLaunchedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersResourceContainerLaunchedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersResourceContainerLaunchedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceContainerNameArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceDetailsOtherArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] key: The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceIdArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourcePartitionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceRegionArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceTagArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] key: The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersResourceTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersSeverityLabelArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersSourceUrlArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorCategoryArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorLastObservedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorLastObservedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorSourceArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorSourceUrlArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersThreatIntelIndicatorValueArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersTitleArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersTypeArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersUpdatedAtArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightFiltersUpdatedAtDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['InsightFiltersUpdatedAtDateRangeArgs'] date_range: A configuration block of the date range for the date filter. See date_range below for more details.
        :param pulumi.Input[str] end: An end date for the date filter. Required with `start` if `date_range` is not specified.
        :param pulumi.Input[str] start: A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightFiltersUpdatedAtDateRangeArgs']]:
        """
        A configuration block of the date range for the date filter. See date_range below for more details.
        """
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightFiltersUpdatedAtDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        An end date for the date filter. Required with `start` if `date_range` is not specified.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        A start date for the date filter. Required with `end` if `date_range` is not specified.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightFiltersUpdatedAtDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: A date range unit for the date filter. Valid values: `DAYS`.
        :param pulumi.Input[int] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        A date range unit for the date filter. Valid values: `DAYS`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersUserDefinedValueArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] key: The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the map filter. For example, for `ResourceTags`, `Key` identifies the name of the tag. For `UserDefinedFields`, `Key` is the name of the field.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersVerificationStateArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightFiltersWorkflowStatusArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] comparison: The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        :param pulumi.Input[str] value: A date range value for the date filter, provided as an Integer.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        """
        The condition to apply to a string value when querying for findings. Valid values include: `EQUALS` and `NOT_EQUALS`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A date range value for the date filter, provided as an Integer.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


