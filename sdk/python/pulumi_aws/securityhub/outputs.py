# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InsightFilters',
    'InsightFiltersAwsAccountId',
    'InsightFiltersCompanyName',
    'InsightFiltersComplianceStatus',
    'InsightFiltersConfidence',
    'InsightFiltersCreatedAt',
    'InsightFiltersCreatedAtDateRange',
    'InsightFiltersCriticality',
    'InsightFiltersDescription',
    'InsightFiltersFindingProviderFieldsConfidence',
    'InsightFiltersFindingProviderFieldsCriticality',
    'InsightFiltersFindingProviderFieldsRelatedFindingsId',
    'InsightFiltersFindingProviderFieldsRelatedFindingsProductArn',
    'InsightFiltersFindingProviderFieldsSeverityLabel',
    'InsightFiltersFindingProviderFieldsSeverityOriginal',
    'InsightFiltersFindingProviderFieldsType',
    'InsightFiltersFirstObservedAt',
    'InsightFiltersFirstObservedAtDateRange',
    'InsightFiltersGeneratorId',
    'InsightFiltersId',
    'InsightFiltersKeyword',
    'InsightFiltersLastObservedAt',
    'InsightFiltersLastObservedAtDateRange',
    'InsightFiltersMalwareName',
    'InsightFiltersMalwarePath',
    'InsightFiltersMalwareState',
    'InsightFiltersMalwareType',
    'InsightFiltersNetworkDestinationDomain',
    'InsightFiltersNetworkDestinationIpv4',
    'InsightFiltersNetworkDestinationIpv6',
    'InsightFiltersNetworkDestinationPort',
    'InsightFiltersNetworkDirection',
    'InsightFiltersNetworkProtocol',
    'InsightFiltersNetworkSourceDomain',
    'InsightFiltersNetworkSourceIpv4',
    'InsightFiltersNetworkSourceIpv6',
    'InsightFiltersNetworkSourceMac',
    'InsightFiltersNetworkSourcePort',
    'InsightFiltersNoteText',
    'InsightFiltersNoteUpdatedAt',
    'InsightFiltersNoteUpdatedAtDateRange',
    'InsightFiltersNoteUpdatedBy',
    'InsightFiltersProcessLaunchedAt',
    'InsightFiltersProcessLaunchedAtDateRange',
    'InsightFiltersProcessName',
    'InsightFiltersProcessParentPid',
    'InsightFiltersProcessPath',
    'InsightFiltersProcessPid',
    'InsightFiltersProcessTerminatedAt',
    'InsightFiltersProcessTerminatedAtDateRange',
    'InsightFiltersProductArn',
    'InsightFiltersProductField',
    'InsightFiltersProductName',
    'InsightFiltersRecommendationText',
    'InsightFiltersRecordState',
    'InsightFiltersRelatedFindingsId',
    'InsightFiltersRelatedFindingsProductArn',
    'InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn',
    'InsightFiltersResourceAwsEc2InstanceImageId',
    'InsightFiltersResourceAwsEc2InstanceIpv4Address',
    'InsightFiltersResourceAwsEc2InstanceIpv6Address',
    'InsightFiltersResourceAwsEc2InstanceKeyName',
    'InsightFiltersResourceAwsEc2InstanceLaunchedAt',
    'InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange',
    'InsightFiltersResourceAwsEc2InstanceSubnetId',
    'InsightFiltersResourceAwsEc2InstanceType',
    'InsightFiltersResourceAwsEc2InstanceVpcId',
    'InsightFiltersResourceAwsIamAccessKeyCreatedAt',
    'InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange',
    'InsightFiltersResourceAwsIamAccessKeyStatus',
    'InsightFiltersResourceAwsIamAccessKeyUserName',
    'InsightFiltersResourceAwsS3BucketOwnerId',
    'InsightFiltersResourceAwsS3BucketOwnerName',
    'InsightFiltersResourceContainerImageId',
    'InsightFiltersResourceContainerImageName',
    'InsightFiltersResourceContainerLaunchedAt',
    'InsightFiltersResourceContainerLaunchedAtDateRange',
    'InsightFiltersResourceContainerName',
    'InsightFiltersResourceDetailsOther',
    'InsightFiltersResourceId',
    'InsightFiltersResourcePartition',
    'InsightFiltersResourceRegion',
    'InsightFiltersResourceTag',
    'InsightFiltersResourceType',
    'InsightFiltersSeverityLabel',
    'InsightFiltersSourceUrl',
    'InsightFiltersThreatIntelIndicatorCategory',
    'InsightFiltersThreatIntelIndicatorLastObservedAt',
    'InsightFiltersThreatIntelIndicatorLastObservedAtDateRange',
    'InsightFiltersThreatIntelIndicatorSource',
    'InsightFiltersThreatIntelIndicatorSourceUrl',
    'InsightFiltersThreatIntelIndicatorType',
    'InsightFiltersThreatIntelIndicatorValue',
    'InsightFiltersTitle',
    'InsightFiltersType',
    'InsightFiltersUpdatedAt',
    'InsightFiltersUpdatedAtDateRange',
    'InsightFiltersUserDefinedValue',
    'InsightFiltersVerificationState',
    'InsightFiltersWorkflowStatus',
]

@pulumi.output_type
class InsightFilters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccountIds":
            suggest = "aws_account_ids"
        elif key == "companyNames":
            suggest = "company_names"
        elif key == "complianceStatuses":
            suggest = "compliance_statuses"
        elif key == "createdAts":
            suggest = "created_ats"
        elif key == "findingProviderFieldsConfidences":
            suggest = "finding_provider_fields_confidences"
        elif key == "findingProviderFieldsCriticalities":
            suggest = "finding_provider_fields_criticalities"
        elif key == "findingProviderFieldsRelatedFindingsIds":
            suggest = "finding_provider_fields_related_findings_ids"
        elif key == "findingProviderFieldsRelatedFindingsProductArns":
            suggest = "finding_provider_fields_related_findings_product_arns"
        elif key == "findingProviderFieldsSeverityLabels":
            suggest = "finding_provider_fields_severity_labels"
        elif key == "findingProviderFieldsSeverityOriginals":
            suggest = "finding_provider_fields_severity_originals"
        elif key == "findingProviderFieldsTypes":
            suggest = "finding_provider_fields_types"
        elif key == "firstObservedAts":
            suggest = "first_observed_ats"
        elif key == "generatorIds":
            suggest = "generator_ids"
        elif key == "lastObservedAts":
            suggest = "last_observed_ats"
        elif key == "malwareNames":
            suggest = "malware_names"
        elif key == "malwarePaths":
            suggest = "malware_paths"
        elif key == "malwareStates":
            suggest = "malware_states"
        elif key == "malwareTypes":
            suggest = "malware_types"
        elif key == "networkDestinationDomains":
            suggest = "network_destination_domains"
        elif key == "networkDestinationIpv4s":
            suggest = "network_destination_ipv4s"
        elif key == "networkDestinationIpv6s":
            suggest = "network_destination_ipv6s"
        elif key == "networkDestinationPorts":
            suggest = "network_destination_ports"
        elif key == "networkDirections":
            suggest = "network_directions"
        elif key == "networkProtocols":
            suggest = "network_protocols"
        elif key == "networkSourceDomains":
            suggest = "network_source_domains"
        elif key == "networkSourceIpv4s":
            suggest = "network_source_ipv4s"
        elif key == "networkSourceIpv6s":
            suggest = "network_source_ipv6s"
        elif key == "networkSourceMacs":
            suggest = "network_source_macs"
        elif key == "networkSourcePorts":
            suggest = "network_source_ports"
        elif key == "noteTexts":
            suggest = "note_texts"
        elif key == "noteUpdatedAts":
            suggest = "note_updated_ats"
        elif key == "noteUpdatedBies":
            suggest = "note_updated_bies"
        elif key == "processLaunchedAts":
            suggest = "process_launched_ats"
        elif key == "processNames":
            suggest = "process_names"
        elif key == "processParentPids":
            suggest = "process_parent_pids"
        elif key == "processPaths":
            suggest = "process_paths"
        elif key == "processPids":
            suggest = "process_pids"
        elif key == "processTerminatedAts":
            suggest = "process_terminated_ats"
        elif key == "productArns":
            suggest = "product_arns"
        elif key == "productFields":
            suggest = "product_fields"
        elif key == "productNames":
            suggest = "product_names"
        elif key == "recommendationTexts":
            suggest = "recommendation_texts"
        elif key == "recordStates":
            suggest = "record_states"
        elif key == "relatedFindingsIds":
            suggest = "related_findings_ids"
        elif key == "relatedFindingsProductArns":
            suggest = "related_findings_product_arns"
        elif key == "resourceAwsEc2InstanceIamInstanceProfileArns":
            suggest = "resource_aws_ec2_instance_iam_instance_profile_arns"
        elif key == "resourceAwsEc2InstanceImageIds":
            suggest = "resource_aws_ec2_instance_image_ids"
        elif key == "resourceAwsEc2InstanceIpv4Addresses":
            suggest = "resource_aws_ec2_instance_ipv4_addresses"
        elif key == "resourceAwsEc2InstanceIpv6Addresses":
            suggest = "resource_aws_ec2_instance_ipv6_addresses"
        elif key == "resourceAwsEc2InstanceKeyNames":
            suggest = "resource_aws_ec2_instance_key_names"
        elif key == "resourceAwsEc2InstanceLaunchedAts":
            suggest = "resource_aws_ec2_instance_launched_ats"
        elif key == "resourceAwsEc2InstanceSubnetIds":
            suggest = "resource_aws_ec2_instance_subnet_ids"
        elif key == "resourceAwsEc2InstanceTypes":
            suggest = "resource_aws_ec2_instance_types"
        elif key == "resourceAwsEc2InstanceVpcIds":
            suggest = "resource_aws_ec2_instance_vpc_ids"
        elif key == "resourceAwsIamAccessKeyCreatedAts":
            suggest = "resource_aws_iam_access_key_created_ats"
        elif key == "resourceAwsIamAccessKeyStatuses":
            suggest = "resource_aws_iam_access_key_statuses"
        elif key == "resourceAwsIamAccessKeyUserNames":
            suggest = "resource_aws_iam_access_key_user_names"
        elif key == "resourceAwsS3BucketOwnerIds":
            suggest = "resource_aws_s3_bucket_owner_ids"
        elif key == "resourceAwsS3BucketOwnerNames":
            suggest = "resource_aws_s3_bucket_owner_names"
        elif key == "resourceContainerImageIds":
            suggest = "resource_container_image_ids"
        elif key == "resourceContainerImageNames":
            suggest = "resource_container_image_names"
        elif key == "resourceContainerLaunchedAts":
            suggest = "resource_container_launched_ats"
        elif key == "resourceContainerNames":
            suggest = "resource_container_names"
        elif key == "resourceDetailsOthers":
            suggest = "resource_details_others"
        elif key == "resourceIds":
            suggest = "resource_ids"
        elif key == "resourcePartitions":
            suggest = "resource_partitions"
        elif key == "resourceRegions":
            suggest = "resource_regions"
        elif key == "resourceTags":
            suggest = "resource_tags"
        elif key == "resourceTypes":
            suggest = "resource_types"
        elif key == "severityLabels":
            suggest = "severity_labels"
        elif key == "sourceUrls":
            suggest = "source_urls"
        elif key == "threatIntelIndicatorCategories":
            suggest = "threat_intel_indicator_categories"
        elif key == "threatIntelIndicatorLastObservedAts":
            suggest = "threat_intel_indicator_last_observed_ats"
        elif key == "threatIntelIndicatorSourceUrls":
            suggest = "threat_intel_indicator_source_urls"
        elif key == "threatIntelIndicatorSources":
            suggest = "threat_intel_indicator_sources"
        elif key == "threatIntelIndicatorTypes":
            suggest = "threat_intel_indicator_types"
        elif key == "threatIntelIndicatorValues":
            suggest = "threat_intel_indicator_values"
        elif key == "updatedAts":
            suggest = "updated_ats"
        elif key == "userDefinedValues":
            suggest = "user_defined_values"
        elif key == "verificationStates":
            suggest = "verification_states"
        elif key == "workflowStatuses":
            suggest = "workflow_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFilters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFilters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFilters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_account_ids: Optional[Sequence['outputs.InsightFiltersAwsAccountId']] = None,
                 company_names: Optional[Sequence['outputs.InsightFiltersCompanyName']] = None,
                 compliance_statuses: Optional[Sequence['outputs.InsightFiltersComplianceStatus']] = None,
                 confidences: Optional[Sequence['outputs.InsightFiltersConfidence']] = None,
                 created_ats: Optional[Sequence['outputs.InsightFiltersCreatedAt']] = None,
                 criticalities: Optional[Sequence['outputs.InsightFiltersCriticality']] = None,
                 descriptions: Optional[Sequence['outputs.InsightFiltersDescription']] = None,
                 finding_provider_fields_confidences: Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsConfidence']] = None,
                 finding_provider_fields_criticalities: Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsCriticality']] = None,
                 finding_provider_fields_related_findings_ids: Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsRelatedFindingsId']] = None,
                 finding_provider_fields_related_findings_product_arns: Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsRelatedFindingsProductArn']] = None,
                 finding_provider_fields_severity_labels: Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsSeverityLabel']] = None,
                 finding_provider_fields_severity_originals: Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsSeverityOriginal']] = None,
                 finding_provider_fields_types: Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsType']] = None,
                 first_observed_ats: Optional[Sequence['outputs.InsightFiltersFirstObservedAt']] = None,
                 generator_ids: Optional[Sequence['outputs.InsightFiltersGeneratorId']] = None,
                 ids: Optional[Sequence['outputs.InsightFiltersId']] = None,
                 keywords: Optional[Sequence['outputs.InsightFiltersKeyword']] = None,
                 last_observed_ats: Optional[Sequence['outputs.InsightFiltersLastObservedAt']] = None,
                 malware_names: Optional[Sequence['outputs.InsightFiltersMalwareName']] = None,
                 malware_paths: Optional[Sequence['outputs.InsightFiltersMalwarePath']] = None,
                 malware_states: Optional[Sequence['outputs.InsightFiltersMalwareState']] = None,
                 malware_types: Optional[Sequence['outputs.InsightFiltersMalwareType']] = None,
                 network_destination_domains: Optional[Sequence['outputs.InsightFiltersNetworkDestinationDomain']] = None,
                 network_destination_ipv4s: Optional[Sequence['outputs.InsightFiltersNetworkDestinationIpv4']] = None,
                 network_destination_ipv6s: Optional[Sequence['outputs.InsightFiltersNetworkDestinationIpv6']] = None,
                 network_destination_ports: Optional[Sequence['outputs.InsightFiltersNetworkDestinationPort']] = None,
                 network_directions: Optional[Sequence['outputs.InsightFiltersNetworkDirection']] = None,
                 network_protocols: Optional[Sequence['outputs.InsightFiltersNetworkProtocol']] = None,
                 network_source_domains: Optional[Sequence['outputs.InsightFiltersNetworkSourceDomain']] = None,
                 network_source_ipv4s: Optional[Sequence['outputs.InsightFiltersNetworkSourceIpv4']] = None,
                 network_source_ipv6s: Optional[Sequence['outputs.InsightFiltersNetworkSourceIpv6']] = None,
                 network_source_macs: Optional[Sequence['outputs.InsightFiltersNetworkSourceMac']] = None,
                 network_source_ports: Optional[Sequence['outputs.InsightFiltersNetworkSourcePort']] = None,
                 note_texts: Optional[Sequence['outputs.InsightFiltersNoteText']] = None,
                 note_updated_ats: Optional[Sequence['outputs.InsightFiltersNoteUpdatedAt']] = None,
                 note_updated_bies: Optional[Sequence['outputs.InsightFiltersNoteUpdatedBy']] = None,
                 process_launched_ats: Optional[Sequence['outputs.InsightFiltersProcessLaunchedAt']] = None,
                 process_names: Optional[Sequence['outputs.InsightFiltersProcessName']] = None,
                 process_parent_pids: Optional[Sequence['outputs.InsightFiltersProcessParentPid']] = None,
                 process_paths: Optional[Sequence['outputs.InsightFiltersProcessPath']] = None,
                 process_pids: Optional[Sequence['outputs.InsightFiltersProcessPid']] = None,
                 process_terminated_ats: Optional[Sequence['outputs.InsightFiltersProcessTerminatedAt']] = None,
                 product_arns: Optional[Sequence['outputs.InsightFiltersProductArn']] = None,
                 product_fields: Optional[Sequence['outputs.InsightFiltersProductField']] = None,
                 product_names: Optional[Sequence['outputs.InsightFiltersProductName']] = None,
                 recommendation_texts: Optional[Sequence['outputs.InsightFiltersRecommendationText']] = None,
                 record_states: Optional[Sequence['outputs.InsightFiltersRecordState']] = None,
                 related_findings_ids: Optional[Sequence['outputs.InsightFiltersRelatedFindingsId']] = None,
                 related_findings_product_arns: Optional[Sequence['outputs.InsightFiltersRelatedFindingsProductArn']] = None,
                 resource_aws_ec2_instance_iam_instance_profile_arns: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn']] = None,
                 resource_aws_ec2_instance_image_ids: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceImageId']] = None,
                 resource_aws_ec2_instance_ipv4_addresses: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceIpv4Address']] = None,
                 resource_aws_ec2_instance_ipv6_addresses: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceIpv6Address']] = None,
                 resource_aws_ec2_instance_key_names: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceKeyName']] = None,
                 resource_aws_ec2_instance_launched_ats: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceLaunchedAt']] = None,
                 resource_aws_ec2_instance_subnet_ids: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceSubnetId']] = None,
                 resource_aws_ec2_instance_types: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceType']] = None,
                 resource_aws_ec2_instance_vpc_ids: Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceVpcId']] = None,
                 resource_aws_iam_access_key_created_ats: Optional[Sequence['outputs.InsightFiltersResourceAwsIamAccessKeyCreatedAt']] = None,
                 resource_aws_iam_access_key_statuses: Optional[Sequence['outputs.InsightFiltersResourceAwsIamAccessKeyStatus']] = None,
                 resource_aws_iam_access_key_user_names: Optional[Sequence['outputs.InsightFiltersResourceAwsIamAccessKeyUserName']] = None,
                 resource_aws_s3_bucket_owner_ids: Optional[Sequence['outputs.InsightFiltersResourceAwsS3BucketOwnerId']] = None,
                 resource_aws_s3_bucket_owner_names: Optional[Sequence['outputs.InsightFiltersResourceAwsS3BucketOwnerName']] = None,
                 resource_container_image_ids: Optional[Sequence['outputs.InsightFiltersResourceContainerImageId']] = None,
                 resource_container_image_names: Optional[Sequence['outputs.InsightFiltersResourceContainerImageName']] = None,
                 resource_container_launched_ats: Optional[Sequence['outputs.InsightFiltersResourceContainerLaunchedAt']] = None,
                 resource_container_names: Optional[Sequence['outputs.InsightFiltersResourceContainerName']] = None,
                 resource_details_others: Optional[Sequence['outputs.InsightFiltersResourceDetailsOther']] = None,
                 resource_ids: Optional[Sequence['outputs.InsightFiltersResourceId']] = None,
                 resource_partitions: Optional[Sequence['outputs.InsightFiltersResourcePartition']] = None,
                 resource_regions: Optional[Sequence['outputs.InsightFiltersResourceRegion']] = None,
                 resource_tags: Optional[Sequence['outputs.InsightFiltersResourceTag']] = None,
                 resource_types: Optional[Sequence['outputs.InsightFiltersResourceType']] = None,
                 severity_labels: Optional[Sequence['outputs.InsightFiltersSeverityLabel']] = None,
                 source_urls: Optional[Sequence['outputs.InsightFiltersSourceUrl']] = None,
                 threat_intel_indicator_categories: Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorCategory']] = None,
                 threat_intel_indicator_last_observed_ats: Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorLastObservedAt']] = None,
                 threat_intel_indicator_source_urls: Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorSourceUrl']] = None,
                 threat_intel_indicator_sources: Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorSource']] = None,
                 threat_intel_indicator_types: Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorType']] = None,
                 threat_intel_indicator_values: Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorValue']] = None,
                 titles: Optional[Sequence['outputs.InsightFiltersTitle']] = None,
                 types: Optional[Sequence['outputs.InsightFiltersType']] = None,
                 updated_ats: Optional[Sequence['outputs.InsightFiltersUpdatedAt']] = None,
                 user_defined_values: Optional[Sequence['outputs.InsightFiltersUserDefinedValue']] = None,
                 verification_states: Optional[Sequence['outputs.InsightFiltersVerificationState']] = None,
                 workflow_statuses: Optional[Sequence['outputs.InsightFiltersWorkflowStatus']] = None):
        if aws_account_ids is not None:
            pulumi.set(__self__, "aws_account_ids", aws_account_ids)
        if company_names is not None:
            pulumi.set(__self__, "company_names", company_names)
        if compliance_statuses is not None:
            pulumi.set(__self__, "compliance_statuses", compliance_statuses)
        if confidences is not None:
            pulumi.set(__self__, "confidences", confidences)
        if created_ats is not None:
            pulumi.set(__self__, "created_ats", created_ats)
        if criticalities is not None:
            pulumi.set(__self__, "criticalities", criticalities)
        if descriptions is not None:
            pulumi.set(__self__, "descriptions", descriptions)
        if finding_provider_fields_confidences is not None:
            pulumi.set(__self__, "finding_provider_fields_confidences", finding_provider_fields_confidences)
        if finding_provider_fields_criticalities is not None:
            pulumi.set(__self__, "finding_provider_fields_criticalities", finding_provider_fields_criticalities)
        if finding_provider_fields_related_findings_ids is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_ids", finding_provider_fields_related_findings_ids)
        if finding_provider_fields_related_findings_product_arns is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_product_arns", finding_provider_fields_related_findings_product_arns)
        if finding_provider_fields_severity_labels is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_labels", finding_provider_fields_severity_labels)
        if finding_provider_fields_severity_originals is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_originals", finding_provider_fields_severity_originals)
        if finding_provider_fields_types is not None:
            pulumi.set(__self__, "finding_provider_fields_types", finding_provider_fields_types)
        if first_observed_ats is not None:
            pulumi.set(__self__, "first_observed_ats", first_observed_ats)
        if generator_ids is not None:
            pulumi.set(__self__, "generator_ids", generator_ids)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if last_observed_ats is not None:
            pulumi.set(__self__, "last_observed_ats", last_observed_ats)
        if malware_names is not None:
            pulumi.set(__self__, "malware_names", malware_names)
        if malware_paths is not None:
            pulumi.set(__self__, "malware_paths", malware_paths)
        if malware_states is not None:
            pulumi.set(__self__, "malware_states", malware_states)
        if malware_types is not None:
            pulumi.set(__self__, "malware_types", malware_types)
        if network_destination_domains is not None:
            pulumi.set(__self__, "network_destination_domains", network_destination_domains)
        if network_destination_ipv4s is not None:
            pulumi.set(__self__, "network_destination_ipv4s", network_destination_ipv4s)
        if network_destination_ipv6s is not None:
            pulumi.set(__self__, "network_destination_ipv6s", network_destination_ipv6s)
        if network_destination_ports is not None:
            pulumi.set(__self__, "network_destination_ports", network_destination_ports)
        if network_directions is not None:
            pulumi.set(__self__, "network_directions", network_directions)
        if network_protocols is not None:
            pulumi.set(__self__, "network_protocols", network_protocols)
        if network_source_domains is not None:
            pulumi.set(__self__, "network_source_domains", network_source_domains)
        if network_source_ipv4s is not None:
            pulumi.set(__self__, "network_source_ipv4s", network_source_ipv4s)
        if network_source_ipv6s is not None:
            pulumi.set(__self__, "network_source_ipv6s", network_source_ipv6s)
        if network_source_macs is not None:
            pulumi.set(__self__, "network_source_macs", network_source_macs)
        if network_source_ports is not None:
            pulumi.set(__self__, "network_source_ports", network_source_ports)
        if note_texts is not None:
            pulumi.set(__self__, "note_texts", note_texts)
        if note_updated_ats is not None:
            pulumi.set(__self__, "note_updated_ats", note_updated_ats)
        if note_updated_bies is not None:
            pulumi.set(__self__, "note_updated_bies", note_updated_bies)
        if process_launched_ats is not None:
            pulumi.set(__self__, "process_launched_ats", process_launched_ats)
        if process_names is not None:
            pulumi.set(__self__, "process_names", process_names)
        if process_parent_pids is not None:
            pulumi.set(__self__, "process_parent_pids", process_parent_pids)
        if process_paths is not None:
            pulumi.set(__self__, "process_paths", process_paths)
        if process_pids is not None:
            pulumi.set(__self__, "process_pids", process_pids)
        if process_terminated_ats is not None:
            pulumi.set(__self__, "process_terminated_ats", process_terminated_ats)
        if product_arns is not None:
            pulumi.set(__self__, "product_arns", product_arns)
        if product_fields is not None:
            pulumi.set(__self__, "product_fields", product_fields)
        if product_names is not None:
            pulumi.set(__self__, "product_names", product_names)
        if recommendation_texts is not None:
            pulumi.set(__self__, "recommendation_texts", recommendation_texts)
        if record_states is not None:
            pulumi.set(__self__, "record_states", record_states)
        if related_findings_ids is not None:
            pulumi.set(__self__, "related_findings_ids", related_findings_ids)
        if related_findings_product_arns is not None:
            pulumi.set(__self__, "related_findings_product_arns", related_findings_product_arns)
        if resource_aws_ec2_instance_iam_instance_profile_arns is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_iam_instance_profile_arns", resource_aws_ec2_instance_iam_instance_profile_arns)
        if resource_aws_ec2_instance_image_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_image_ids", resource_aws_ec2_instance_image_ids)
        if resource_aws_ec2_instance_ipv4_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ipv4_addresses", resource_aws_ec2_instance_ipv4_addresses)
        if resource_aws_ec2_instance_ipv6_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ipv6_addresses", resource_aws_ec2_instance_ipv6_addresses)
        if resource_aws_ec2_instance_key_names is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_key_names", resource_aws_ec2_instance_key_names)
        if resource_aws_ec2_instance_launched_ats is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_launched_ats", resource_aws_ec2_instance_launched_ats)
        if resource_aws_ec2_instance_subnet_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_subnet_ids", resource_aws_ec2_instance_subnet_ids)
        if resource_aws_ec2_instance_types is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_types", resource_aws_ec2_instance_types)
        if resource_aws_ec2_instance_vpc_ids is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_vpc_ids", resource_aws_ec2_instance_vpc_ids)
        if resource_aws_iam_access_key_created_ats is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_created_ats", resource_aws_iam_access_key_created_ats)
        if resource_aws_iam_access_key_statuses is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_statuses", resource_aws_iam_access_key_statuses)
        if resource_aws_iam_access_key_user_names is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_user_names", resource_aws_iam_access_key_user_names)
        if resource_aws_s3_bucket_owner_ids is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_ids", resource_aws_s3_bucket_owner_ids)
        if resource_aws_s3_bucket_owner_names is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_names", resource_aws_s3_bucket_owner_names)
        if resource_container_image_ids is not None:
            pulumi.set(__self__, "resource_container_image_ids", resource_container_image_ids)
        if resource_container_image_names is not None:
            pulumi.set(__self__, "resource_container_image_names", resource_container_image_names)
        if resource_container_launched_ats is not None:
            pulumi.set(__self__, "resource_container_launched_ats", resource_container_launched_ats)
        if resource_container_names is not None:
            pulumi.set(__self__, "resource_container_names", resource_container_names)
        if resource_details_others is not None:
            pulumi.set(__self__, "resource_details_others", resource_details_others)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_partitions is not None:
            pulumi.set(__self__, "resource_partitions", resource_partitions)
        if resource_regions is not None:
            pulumi.set(__self__, "resource_regions", resource_regions)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if severity_labels is not None:
            pulumi.set(__self__, "severity_labels", severity_labels)
        if source_urls is not None:
            pulumi.set(__self__, "source_urls", source_urls)
        if threat_intel_indicator_categories is not None:
            pulumi.set(__self__, "threat_intel_indicator_categories", threat_intel_indicator_categories)
        if threat_intel_indicator_last_observed_ats is not None:
            pulumi.set(__self__, "threat_intel_indicator_last_observed_ats", threat_intel_indicator_last_observed_ats)
        if threat_intel_indicator_source_urls is not None:
            pulumi.set(__self__, "threat_intel_indicator_source_urls", threat_intel_indicator_source_urls)
        if threat_intel_indicator_sources is not None:
            pulumi.set(__self__, "threat_intel_indicator_sources", threat_intel_indicator_sources)
        if threat_intel_indicator_types is not None:
            pulumi.set(__self__, "threat_intel_indicator_types", threat_intel_indicator_types)
        if threat_intel_indicator_values is not None:
            pulumi.set(__self__, "threat_intel_indicator_values", threat_intel_indicator_values)
        if titles is not None:
            pulumi.set(__self__, "titles", titles)
        if types is not None:
            pulumi.set(__self__, "types", types)
        if updated_ats is not None:
            pulumi.set(__self__, "updated_ats", updated_ats)
        if user_defined_values is not None:
            pulumi.set(__self__, "user_defined_values", user_defined_values)
        if verification_states is not None:
            pulumi.set(__self__, "verification_states", verification_states)
        if workflow_statuses is not None:
            pulumi.set(__self__, "workflow_statuses", workflow_statuses)

    @property
    @pulumi.getter(name="awsAccountIds")
    def aws_account_ids(self) -> Optional[Sequence['outputs.InsightFiltersAwsAccountId']]:
        return pulumi.get(self, "aws_account_ids")

    @property
    @pulumi.getter(name="companyNames")
    def company_names(self) -> Optional[Sequence['outputs.InsightFiltersCompanyName']]:
        return pulumi.get(self, "company_names")

    @property
    @pulumi.getter(name="complianceStatuses")
    def compliance_statuses(self) -> Optional[Sequence['outputs.InsightFiltersComplianceStatus']]:
        return pulumi.get(self, "compliance_statuses")

    @property
    @pulumi.getter
    def confidences(self) -> Optional[Sequence['outputs.InsightFiltersConfidence']]:
        return pulumi.get(self, "confidences")

    @property
    @pulumi.getter(name="createdAts")
    def created_ats(self) -> Optional[Sequence['outputs.InsightFiltersCreatedAt']]:
        return pulumi.get(self, "created_ats")

    @property
    @pulumi.getter
    def criticalities(self) -> Optional[Sequence['outputs.InsightFiltersCriticality']]:
        return pulumi.get(self, "criticalities")

    @property
    @pulumi.getter
    def descriptions(self) -> Optional[Sequence['outputs.InsightFiltersDescription']]:
        return pulumi.get(self, "descriptions")

    @property
    @pulumi.getter(name="findingProviderFieldsConfidences")
    def finding_provider_fields_confidences(self) -> Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsConfidence']]:
        return pulumi.get(self, "finding_provider_fields_confidences")

    @property
    @pulumi.getter(name="findingProviderFieldsCriticalities")
    def finding_provider_fields_criticalities(self) -> Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsCriticality']]:
        return pulumi.get(self, "finding_provider_fields_criticalities")

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsIds")
    def finding_provider_fields_related_findings_ids(self) -> Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsRelatedFindingsId']]:
        return pulumi.get(self, "finding_provider_fields_related_findings_ids")

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsProductArns")
    def finding_provider_fields_related_findings_product_arns(self) -> Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsRelatedFindingsProductArn']]:
        return pulumi.get(self, "finding_provider_fields_related_findings_product_arns")

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityLabels")
    def finding_provider_fields_severity_labels(self) -> Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsSeverityLabel']]:
        return pulumi.get(self, "finding_provider_fields_severity_labels")

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityOriginals")
    def finding_provider_fields_severity_originals(self) -> Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsSeverityOriginal']]:
        return pulumi.get(self, "finding_provider_fields_severity_originals")

    @property
    @pulumi.getter(name="findingProviderFieldsTypes")
    def finding_provider_fields_types(self) -> Optional[Sequence['outputs.InsightFiltersFindingProviderFieldsType']]:
        return pulumi.get(self, "finding_provider_fields_types")

    @property
    @pulumi.getter(name="firstObservedAts")
    def first_observed_ats(self) -> Optional[Sequence['outputs.InsightFiltersFirstObservedAt']]:
        return pulumi.get(self, "first_observed_ats")

    @property
    @pulumi.getter(name="generatorIds")
    def generator_ids(self) -> Optional[Sequence['outputs.InsightFiltersGeneratorId']]:
        return pulumi.get(self, "generator_ids")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence['outputs.InsightFiltersId']]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def keywords(self) -> Optional[Sequence['outputs.InsightFiltersKeyword']]:
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter(name="lastObservedAts")
    def last_observed_ats(self) -> Optional[Sequence['outputs.InsightFiltersLastObservedAt']]:
        return pulumi.get(self, "last_observed_ats")

    @property
    @pulumi.getter(name="malwareNames")
    def malware_names(self) -> Optional[Sequence['outputs.InsightFiltersMalwareName']]:
        return pulumi.get(self, "malware_names")

    @property
    @pulumi.getter(name="malwarePaths")
    def malware_paths(self) -> Optional[Sequence['outputs.InsightFiltersMalwarePath']]:
        return pulumi.get(self, "malware_paths")

    @property
    @pulumi.getter(name="malwareStates")
    def malware_states(self) -> Optional[Sequence['outputs.InsightFiltersMalwareState']]:
        return pulumi.get(self, "malware_states")

    @property
    @pulumi.getter(name="malwareTypes")
    def malware_types(self) -> Optional[Sequence['outputs.InsightFiltersMalwareType']]:
        return pulumi.get(self, "malware_types")

    @property
    @pulumi.getter(name="networkDestinationDomains")
    def network_destination_domains(self) -> Optional[Sequence['outputs.InsightFiltersNetworkDestinationDomain']]:
        return pulumi.get(self, "network_destination_domains")

    @property
    @pulumi.getter(name="networkDestinationIpv4s")
    def network_destination_ipv4s(self) -> Optional[Sequence['outputs.InsightFiltersNetworkDestinationIpv4']]:
        return pulumi.get(self, "network_destination_ipv4s")

    @property
    @pulumi.getter(name="networkDestinationIpv6s")
    def network_destination_ipv6s(self) -> Optional[Sequence['outputs.InsightFiltersNetworkDestinationIpv6']]:
        return pulumi.get(self, "network_destination_ipv6s")

    @property
    @pulumi.getter(name="networkDestinationPorts")
    def network_destination_ports(self) -> Optional[Sequence['outputs.InsightFiltersNetworkDestinationPort']]:
        return pulumi.get(self, "network_destination_ports")

    @property
    @pulumi.getter(name="networkDirections")
    def network_directions(self) -> Optional[Sequence['outputs.InsightFiltersNetworkDirection']]:
        return pulumi.get(self, "network_directions")

    @property
    @pulumi.getter(name="networkProtocols")
    def network_protocols(self) -> Optional[Sequence['outputs.InsightFiltersNetworkProtocol']]:
        return pulumi.get(self, "network_protocols")

    @property
    @pulumi.getter(name="networkSourceDomains")
    def network_source_domains(self) -> Optional[Sequence['outputs.InsightFiltersNetworkSourceDomain']]:
        return pulumi.get(self, "network_source_domains")

    @property
    @pulumi.getter(name="networkSourceIpv4s")
    def network_source_ipv4s(self) -> Optional[Sequence['outputs.InsightFiltersNetworkSourceIpv4']]:
        return pulumi.get(self, "network_source_ipv4s")

    @property
    @pulumi.getter(name="networkSourceIpv6s")
    def network_source_ipv6s(self) -> Optional[Sequence['outputs.InsightFiltersNetworkSourceIpv6']]:
        return pulumi.get(self, "network_source_ipv6s")

    @property
    @pulumi.getter(name="networkSourceMacs")
    def network_source_macs(self) -> Optional[Sequence['outputs.InsightFiltersNetworkSourceMac']]:
        return pulumi.get(self, "network_source_macs")

    @property
    @pulumi.getter(name="networkSourcePorts")
    def network_source_ports(self) -> Optional[Sequence['outputs.InsightFiltersNetworkSourcePort']]:
        return pulumi.get(self, "network_source_ports")

    @property
    @pulumi.getter(name="noteTexts")
    def note_texts(self) -> Optional[Sequence['outputs.InsightFiltersNoteText']]:
        return pulumi.get(self, "note_texts")

    @property
    @pulumi.getter(name="noteUpdatedAts")
    def note_updated_ats(self) -> Optional[Sequence['outputs.InsightFiltersNoteUpdatedAt']]:
        return pulumi.get(self, "note_updated_ats")

    @property
    @pulumi.getter(name="noteUpdatedBies")
    def note_updated_bies(self) -> Optional[Sequence['outputs.InsightFiltersNoteUpdatedBy']]:
        return pulumi.get(self, "note_updated_bies")

    @property
    @pulumi.getter(name="processLaunchedAts")
    def process_launched_ats(self) -> Optional[Sequence['outputs.InsightFiltersProcessLaunchedAt']]:
        return pulumi.get(self, "process_launched_ats")

    @property
    @pulumi.getter(name="processNames")
    def process_names(self) -> Optional[Sequence['outputs.InsightFiltersProcessName']]:
        return pulumi.get(self, "process_names")

    @property
    @pulumi.getter(name="processParentPids")
    def process_parent_pids(self) -> Optional[Sequence['outputs.InsightFiltersProcessParentPid']]:
        return pulumi.get(self, "process_parent_pids")

    @property
    @pulumi.getter(name="processPaths")
    def process_paths(self) -> Optional[Sequence['outputs.InsightFiltersProcessPath']]:
        return pulumi.get(self, "process_paths")

    @property
    @pulumi.getter(name="processPids")
    def process_pids(self) -> Optional[Sequence['outputs.InsightFiltersProcessPid']]:
        return pulumi.get(self, "process_pids")

    @property
    @pulumi.getter(name="processTerminatedAts")
    def process_terminated_ats(self) -> Optional[Sequence['outputs.InsightFiltersProcessTerminatedAt']]:
        return pulumi.get(self, "process_terminated_ats")

    @property
    @pulumi.getter(name="productArns")
    def product_arns(self) -> Optional[Sequence['outputs.InsightFiltersProductArn']]:
        return pulumi.get(self, "product_arns")

    @property
    @pulumi.getter(name="productFields")
    def product_fields(self) -> Optional[Sequence['outputs.InsightFiltersProductField']]:
        return pulumi.get(self, "product_fields")

    @property
    @pulumi.getter(name="productNames")
    def product_names(self) -> Optional[Sequence['outputs.InsightFiltersProductName']]:
        return pulumi.get(self, "product_names")

    @property
    @pulumi.getter(name="recommendationTexts")
    def recommendation_texts(self) -> Optional[Sequence['outputs.InsightFiltersRecommendationText']]:
        return pulumi.get(self, "recommendation_texts")

    @property
    @pulumi.getter(name="recordStates")
    def record_states(self) -> Optional[Sequence['outputs.InsightFiltersRecordState']]:
        return pulumi.get(self, "record_states")

    @property
    @pulumi.getter(name="relatedFindingsIds")
    def related_findings_ids(self) -> Optional[Sequence['outputs.InsightFiltersRelatedFindingsId']]:
        return pulumi.get(self, "related_findings_ids")

    @property
    @pulumi.getter(name="relatedFindingsProductArns")
    def related_findings_product_arns(self) -> Optional[Sequence['outputs.InsightFiltersRelatedFindingsProductArn']]:
        return pulumi.get(self, "related_findings_product_arns")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIamInstanceProfileArns")
    def resource_aws_ec2_instance_iam_instance_profile_arns(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn']]:
        return pulumi.get(self, "resource_aws_ec2_instance_iam_instance_profile_arns")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceImageIds")
    def resource_aws_ec2_instance_image_ids(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceImageId']]:
        return pulumi.get(self, "resource_aws_ec2_instance_image_ids")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpv4Addresses")
    def resource_aws_ec2_instance_ipv4_addresses(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceIpv4Address']]:
        return pulumi.get(self, "resource_aws_ec2_instance_ipv4_addresses")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpv6Addresses")
    def resource_aws_ec2_instance_ipv6_addresses(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceIpv6Address']]:
        return pulumi.get(self, "resource_aws_ec2_instance_ipv6_addresses")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceKeyNames")
    def resource_aws_ec2_instance_key_names(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceKeyName']]:
        return pulumi.get(self, "resource_aws_ec2_instance_key_names")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceLaunchedAts")
    def resource_aws_ec2_instance_launched_ats(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceLaunchedAt']]:
        return pulumi.get(self, "resource_aws_ec2_instance_launched_ats")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceSubnetIds")
    def resource_aws_ec2_instance_subnet_ids(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceSubnetId']]:
        return pulumi.get(self, "resource_aws_ec2_instance_subnet_ids")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceTypes")
    def resource_aws_ec2_instance_types(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceType']]:
        return pulumi.get(self, "resource_aws_ec2_instance_types")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceVpcIds")
    def resource_aws_ec2_instance_vpc_ids(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsEc2InstanceVpcId']]:
        return pulumi.get(self, "resource_aws_ec2_instance_vpc_ids")

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyCreatedAts")
    def resource_aws_iam_access_key_created_ats(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsIamAccessKeyCreatedAt']]:
        return pulumi.get(self, "resource_aws_iam_access_key_created_ats")

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyStatuses")
    def resource_aws_iam_access_key_statuses(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsIamAccessKeyStatus']]:
        return pulumi.get(self, "resource_aws_iam_access_key_statuses")

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyUserNames")
    def resource_aws_iam_access_key_user_names(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsIamAccessKeyUserName']]:
        return pulumi.get(self, "resource_aws_iam_access_key_user_names")

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerIds")
    def resource_aws_s3_bucket_owner_ids(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsS3BucketOwnerId']]:
        return pulumi.get(self, "resource_aws_s3_bucket_owner_ids")

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerNames")
    def resource_aws_s3_bucket_owner_names(self) -> Optional[Sequence['outputs.InsightFiltersResourceAwsS3BucketOwnerName']]:
        return pulumi.get(self, "resource_aws_s3_bucket_owner_names")

    @property
    @pulumi.getter(name="resourceContainerImageIds")
    def resource_container_image_ids(self) -> Optional[Sequence['outputs.InsightFiltersResourceContainerImageId']]:
        return pulumi.get(self, "resource_container_image_ids")

    @property
    @pulumi.getter(name="resourceContainerImageNames")
    def resource_container_image_names(self) -> Optional[Sequence['outputs.InsightFiltersResourceContainerImageName']]:
        return pulumi.get(self, "resource_container_image_names")

    @property
    @pulumi.getter(name="resourceContainerLaunchedAts")
    def resource_container_launched_ats(self) -> Optional[Sequence['outputs.InsightFiltersResourceContainerLaunchedAt']]:
        return pulumi.get(self, "resource_container_launched_ats")

    @property
    @pulumi.getter(name="resourceContainerNames")
    def resource_container_names(self) -> Optional[Sequence['outputs.InsightFiltersResourceContainerName']]:
        return pulumi.get(self, "resource_container_names")

    @property
    @pulumi.getter(name="resourceDetailsOthers")
    def resource_details_others(self) -> Optional[Sequence['outputs.InsightFiltersResourceDetailsOther']]:
        return pulumi.get(self, "resource_details_others")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence['outputs.InsightFiltersResourceId']]:
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter(name="resourcePartitions")
    def resource_partitions(self) -> Optional[Sequence['outputs.InsightFiltersResourcePartition']]:
        return pulumi.get(self, "resource_partitions")

    @property
    @pulumi.getter(name="resourceRegions")
    def resource_regions(self) -> Optional[Sequence['outputs.InsightFiltersResourceRegion']]:
        return pulumi.get(self, "resource_regions")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[Sequence['outputs.InsightFiltersResourceTag']]:
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[Sequence['outputs.InsightFiltersResourceType']]:
        return pulumi.get(self, "resource_types")

    @property
    @pulumi.getter(name="severityLabels")
    def severity_labels(self) -> Optional[Sequence['outputs.InsightFiltersSeverityLabel']]:
        return pulumi.get(self, "severity_labels")

    @property
    @pulumi.getter(name="sourceUrls")
    def source_urls(self) -> Optional[Sequence['outputs.InsightFiltersSourceUrl']]:
        return pulumi.get(self, "source_urls")

    @property
    @pulumi.getter(name="threatIntelIndicatorCategories")
    def threat_intel_indicator_categories(self) -> Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorCategory']]:
        return pulumi.get(self, "threat_intel_indicator_categories")

    @property
    @pulumi.getter(name="threatIntelIndicatorLastObservedAts")
    def threat_intel_indicator_last_observed_ats(self) -> Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorLastObservedAt']]:
        return pulumi.get(self, "threat_intel_indicator_last_observed_ats")

    @property
    @pulumi.getter(name="threatIntelIndicatorSourceUrls")
    def threat_intel_indicator_source_urls(self) -> Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorSourceUrl']]:
        return pulumi.get(self, "threat_intel_indicator_source_urls")

    @property
    @pulumi.getter(name="threatIntelIndicatorSources")
    def threat_intel_indicator_sources(self) -> Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorSource']]:
        return pulumi.get(self, "threat_intel_indicator_sources")

    @property
    @pulumi.getter(name="threatIntelIndicatorTypes")
    def threat_intel_indicator_types(self) -> Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorType']]:
        return pulumi.get(self, "threat_intel_indicator_types")

    @property
    @pulumi.getter(name="threatIntelIndicatorValues")
    def threat_intel_indicator_values(self) -> Optional[Sequence['outputs.InsightFiltersThreatIntelIndicatorValue']]:
        return pulumi.get(self, "threat_intel_indicator_values")

    @property
    @pulumi.getter
    def titles(self) -> Optional[Sequence['outputs.InsightFiltersTitle']]:
        return pulumi.get(self, "titles")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence['outputs.InsightFiltersType']]:
        return pulumi.get(self, "types")

    @property
    @pulumi.getter(name="updatedAts")
    def updated_ats(self) -> Optional[Sequence['outputs.InsightFiltersUpdatedAt']]:
        return pulumi.get(self, "updated_ats")

    @property
    @pulumi.getter(name="userDefinedValues")
    def user_defined_values(self) -> Optional[Sequence['outputs.InsightFiltersUserDefinedValue']]:
        return pulumi.get(self, "user_defined_values")

    @property
    @pulumi.getter(name="verificationStates")
    def verification_states(self) -> Optional[Sequence['outputs.InsightFiltersVerificationState']]:
        return pulumi.get(self, "verification_states")

    @property
    @pulumi.getter(name="workflowStatuses")
    def workflow_statuses(self) -> Optional[Sequence['outputs.InsightFiltersWorkflowStatus']]:
        return pulumi.get(self, "workflow_statuses")


@pulumi.output_type
class InsightFiltersAwsAccountId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersCompanyName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersComplianceStatus(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersConfidence(dict):
    def __init__(__self__, *,
                 eq: Optional[str] = None,
                 gte: Optional[str] = None,
                 lte: Optional[str] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[str]:
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightFiltersCreatedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersCreatedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersCreatedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersCreatedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersCreatedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersCreatedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersCreatedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersCriticality(dict):
    def __init__(__self__, *,
                 eq: Optional[str] = None,
                 gte: Optional[str] = None,
                 lte: Optional[str] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[str]:
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightFiltersDescription(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersFindingProviderFieldsConfidence(dict):
    def __init__(__self__, *,
                 eq: Optional[str] = None,
                 gte: Optional[str] = None,
                 lte: Optional[str] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[str]:
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightFiltersFindingProviderFieldsCriticality(dict):
    def __init__(__self__, *,
                 eq: Optional[str] = None,
                 gte: Optional[str] = None,
                 lte: Optional[str] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[str]:
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightFiltersFindingProviderFieldsRelatedFindingsId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersFindingProviderFieldsRelatedFindingsProductArn(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersFindingProviderFieldsSeverityLabel(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersFindingProviderFieldsSeverityOriginal(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersFindingProviderFieldsType(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersFirstObservedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersFirstObservedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersFirstObservedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersFirstObservedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersFirstObservedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersFirstObservedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersFirstObservedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersGeneratorId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersKeyword(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersLastObservedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersLastObservedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersLastObservedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersLastObservedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersLastObservedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersLastObservedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersLastObservedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersMalwareName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersMalwarePath(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersMalwareState(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersMalwareType(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersNetworkDestinationDomain(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersNetworkDestinationIpv4(dict):
    def __init__(__self__, *,
                 cidr: str):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class InsightFiltersNetworkDestinationIpv6(dict):
    def __init__(__self__, *,
                 cidr: str):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class InsightFiltersNetworkDestinationPort(dict):
    def __init__(__self__, *,
                 eq: Optional[str] = None,
                 gte: Optional[str] = None,
                 lte: Optional[str] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[str]:
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightFiltersNetworkDirection(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersNetworkProtocol(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersNetworkSourceDomain(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersNetworkSourceIpv4(dict):
    def __init__(__self__, *,
                 cidr: str):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class InsightFiltersNetworkSourceIpv6(dict):
    def __init__(__self__, *,
                 cidr: str):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class InsightFiltersNetworkSourceMac(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersNetworkSourcePort(dict):
    def __init__(__self__, *,
                 eq: Optional[str] = None,
                 gte: Optional[str] = None,
                 lte: Optional[str] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[str]:
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightFiltersNoteText(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersNoteUpdatedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersNoteUpdatedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersNoteUpdatedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersNoteUpdatedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersNoteUpdatedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersNoteUpdatedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersNoteUpdatedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersNoteUpdatedBy(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersProcessLaunchedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersProcessLaunchedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersProcessLaunchedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersProcessLaunchedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersProcessLaunchedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersProcessLaunchedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersProcessLaunchedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersProcessName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersProcessParentPid(dict):
    def __init__(__self__, *,
                 eq: Optional[str] = None,
                 gte: Optional[str] = None,
                 lte: Optional[str] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[str]:
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightFiltersProcessPath(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersProcessPid(dict):
    def __init__(__self__, *,
                 eq: Optional[str] = None,
                 gte: Optional[str] = None,
                 lte: Optional[str] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[str]:
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightFiltersProcessTerminatedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersProcessTerminatedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersProcessTerminatedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersProcessTerminatedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersProcessTerminatedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersProcessTerminatedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersProcessTerminatedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersProductArn(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersProductField(dict):
    def __init__(__self__, *,
                 comparison: str,
                 key: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersProductName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersRecommendationText(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersRecordState(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersRelatedFindingsId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersRelatedFindingsProductArn(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceIamInstanceProfileArn(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceImageId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceIpv4Address(dict):
    def __init__(__self__, *,
                 cidr: str):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceIpv6Address(dict):
    def __init__(__self__, *,
                 cidr: str):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceKeyName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceLaunchedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersResourceAwsEc2InstanceLaunchedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersResourceAwsEc2InstanceLaunchedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersResourceAwsEc2InstanceLaunchedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceLaunchedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceSubnetId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceType(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsEc2InstanceVpcId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsIamAccessKeyCreatedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersResourceAwsIamAccessKeyCreatedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersResourceAwsIamAccessKeyCreatedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersResourceAwsIamAccessKeyCreatedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersResourceAwsIamAccessKeyCreatedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsIamAccessKeyStatus(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsIamAccessKeyUserName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsS3BucketOwnerId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceAwsS3BucketOwnerName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceContainerImageId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceContainerImageName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceContainerLaunchedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersResourceContainerLaunchedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersResourceContainerLaunchedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersResourceContainerLaunchedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersResourceContainerLaunchedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersResourceContainerLaunchedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersResourceContainerLaunchedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceContainerName(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceDetailsOther(dict):
    def __init__(__self__, *,
                 comparison: str,
                 key: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceId(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourcePartition(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceRegion(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceTag(dict):
    def __init__(__self__, *,
                 comparison: str,
                 key: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersResourceType(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersSeverityLabel(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersSourceUrl(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersThreatIntelIndicatorCategory(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersThreatIntelIndicatorLastObservedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersThreatIntelIndicatorLastObservedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersThreatIntelIndicatorLastObservedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersThreatIntelIndicatorLastObservedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersThreatIntelIndicatorLastObservedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersThreatIntelIndicatorLastObservedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersThreatIntelIndicatorLastObservedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersThreatIntelIndicatorSource(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersThreatIntelIndicatorSourceUrl(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersThreatIntelIndicatorType(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersThreatIntelIndicatorValue(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersTitle(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersType(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersUpdatedAt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightFiltersUpdatedAt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightFiltersUpdatedAt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightFiltersUpdatedAt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightFiltersUpdatedAtDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightFiltersUpdatedAtDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightFiltersUpdatedAtDateRange(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersUserDefinedValue(dict):
    def __init__(__self__, *,
                 comparison: str,
                 key: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersVerificationState(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightFiltersWorkflowStatus(dict):
    def __init__(__self__, *,
                 comparison: str,
                 value: str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


