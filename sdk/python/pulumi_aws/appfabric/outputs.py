# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AppAuthorizationCredential',
    'AppAuthorizationCredentialApiKeyCredential',
    'AppAuthorizationCredentialOauth2Credential',
    'AppAuthorizationTenant',
    'AppAuthorizationTimeouts',
]

@pulumi.output_type
class AppAuthorizationCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeyCredentials":
            suggest = "api_key_credentials"
        elif key == "oauth2Credential":
            suggest = "oauth2_credential"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppAuthorizationCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppAuthorizationCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppAuthorizationCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key_credentials: Optional[Sequence['outputs.AppAuthorizationCredentialApiKeyCredential']] = None,
                 oauth2_credential: Optional['outputs.AppAuthorizationCredentialOauth2Credential'] = None):
        """
        :param Sequence['AppAuthorizationCredentialApiKeyCredentialArgs'] api_key_credentials: Contains API key credential information.
        :param 'AppAuthorizationCredentialOauth2CredentialArgs' oauth2_credential: Contains OAuth2 client credential information.
        """
        if api_key_credentials is not None:
            pulumi.set(__self__, "api_key_credentials", api_key_credentials)
        if oauth2_credential is not None:
            pulumi.set(__self__, "oauth2_credential", oauth2_credential)

    @property
    @pulumi.getter(name="apiKeyCredentials")
    def api_key_credentials(self) -> Optional[Sequence['outputs.AppAuthorizationCredentialApiKeyCredential']]:
        """
        Contains API key credential information.
        """
        return pulumi.get(self, "api_key_credentials")

    @property
    @pulumi.getter(name="oauth2Credential")
    def oauth2_credential(self) -> Optional['outputs.AppAuthorizationCredentialOauth2Credential']:
        """
        Contains OAuth2 client credential information.
        """
        return pulumi.get(self, "oauth2_credential")


@pulumi.output_type
class AppAuthorizationCredentialApiKeyCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppAuthorizationCredentialApiKeyCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppAuthorizationCredentialApiKeyCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppAuthorizationCredentialApiKeyCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str):
        """
        :param str api_key: Contains API key credential information.
        """
        pulumi.set(__self__, "api_key", api_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        Contains API key credential information.
        """
        return pulumi.get(self, "api_key")


@pulumi.output_type
class AppAuthorizationCredentialOauth2Credential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppAuthorizationCredentialOauth2Credential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppAuthorizationCredentialOauth2Credential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppAuthorizationCredentialOauth2Credential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str):
        """
        :param str client_id: The client ID of the client application.
        :param str client_secret: The client secret of the client application.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the client application.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The client secret of the client application.
        """
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class AppAuthorizationTenant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tenantDisplayName":
            suggest = "tenant_display_name"
        elif key == "tenantIdentifier":
            suggest = "tenant_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppAuthorizationTenant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppAuthorizationTenant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppAuthorizationTenant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tenant_display_name: str,
                 tenant_identifier: str):
        """
        :param str tenant_display_name: The display name of the tenant.
        :param str tenant_identifier: The ID of the application tenant.
        """
        pulumi.set(__self__, "tenant_display_name", tenant_display_name)
        pulumi.set(__self__, "tenant_identifier", tenant_identifier)

    @property
    @pulumi.getter(name="tenantDisplayName")
    def tenant_display_name(self) -> str:
        """
        The display name of the tenant.
        """
        return pulumi.get(self, "tenant_display_name")

    @property
    @pulumi.getter(name="tenantIdentifier")
    def tenant_identifier(self) -> str:
        """
        The ID of the application tenant.
        """
        return pulumi.get(self, "tenant_identifier")


@pulumi.output_type
class AppAuthorizationTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


