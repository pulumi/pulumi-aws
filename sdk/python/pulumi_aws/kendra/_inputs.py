# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ExperienceConfigurationArgs',
    'ExperienceConfigurationContentSourceConfigurationArgs',
    'ExperienceConfigurationUserIdentityConfigurationArgs',
    'ExperienceEndpointArgs',
    'FaqS3PathArgs',
    'IndexCapacityUnitsArgs',
    'IndexDocumentMetadataConfigurationUpdateArgs',
    'IndexDocumentMetadataConfigurationUpdateRelevanceArgs',
    'IndexDocumentMetadataConfigurationUpdateSearchArgs',
    'IndexIndexStatisticArgs',
    'IndexIndexStatisticFaqStatisticArgs',
    'IndexIndexStatisticTextDocumentStatisticArgs',
    'IndexServerSideEncryptionConfigurationArgs',
    'IndexUserGroupResolutionConfigurationArgs',
    'IndexUserTokenConfigurationsArgs',
    'IndexUserTokenConfigurationsJsonTokenTypeConfigurationArgs',
    'IndexUserTokenConfigurationsJwtTokenTypeConfigurationArgs',
    'QuerySuggestionsBlockListSourceS3PathArgs',
    'ThesaurusSourceS3PathArgs',
]

@pulumi.input_type
class ExperienceConfigurationArgs:
    def __init__(__self__, *,
                 content_source_configuration: Optional[pulumi.Input['ExperienceConfigurationContentSourceConfigurationArgs']] = None,
                 user_identity_configuration: Optional[pulumi.Input['ExperienceConfigurationUserIdentityConfigurationArgs']] = None):
        """
        :param pulumi.Input['ExperienceConfigurationUserIdentityConfigurationArgs'] user_identity_configuration: The AWS SSO field name that contains the identifiers of your users, such as their emails. Detailed below.
        """
        if content_source_configuration is not None:
            pulumi.set(__self__, "content_source_configuration", content_source_configuration)
        if user_identity_configuration is not None:
            pulumi.set(__self__, "user_identity_configuration", user_identity_configuration)

    @property
    @pulumi.getter(name="contentSourceConfiguration")
    def content_source_configuration(self) -> Optional[pulumi.Input['ExperienceConfigurationContentSourceConfigurationArgs']]:
        return pulumi.get(self, "content_source_configuration")

    @content_source_configuration.setter
    def content_source_configuration(self, value: Optional[pulumi.Input['ExperienceConfigurationContentSourceConfigurationArgs']]):
        pulumi.set(self, "content_source_configuration", value)

    @property
    @pulumi.getter(name="userIdentityConfiguration")
    def user_identity_configuration(self) -> Optional[pulumi.Input['ExperienceConfigurationUserIdentityConfigurationArgs']]:
        """
        The AWS SSO field name that contains the identifiers of your users, such as their emails. Detailed below.
        """
        return pulumi.get(self, "user_identity_configuration")

    @user_identity_configuration.setter
    def user_identity_configuration(self, value: Optional[pulumi.Input['ExperienceConfigurationUserIdentityConfigurationArgs']]):
        pulumi.set(self, "user_identity_configuration", value)


@pulumi.input_type
class ExperienceConfigurationContentSourceConfigurationArgs:
    def __init__(__self__, *,
                 data_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 direct_put_content: Optional[pulumi.Input[bool]] = None,
                 faq_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_source_ids: The identifiers of the data sources you want to use for your Amazon Kendra experience. Maximum number of 100 items.
        :param pulumi.Input[bool] direct_put_content: Whether to use documents you indexed directly using the `BatchPutDocument API`. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] faq_ids: The identifier of the FAQs that you want to use for your Amazon Kendra experience. Maximum number of 100 items.
        """
        if data_source_ids is not None:
            pulumi.set(__self__, "data_source_ids", data_source_ids)
        if direct_put_content is not None:
            pulumi.set(__self__, "direct_put_content", direct_put_content)
        if faq_ids is not None:
            pulumi.set(__self__, "faq_ids", faq_ids)

    @property
    @pulumi.getter(name="dataSourceIds")
    def data_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The identifiers of the data sources you want to use for your Amazon Kendra experience. Maximum number of 100 items.
        """
        return pulumi.get(self, "data_source_ids")

    @data_source_ids.setter
    def data_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "data_source_ids", value)

    @property
    @pulumi.getter(name="directPutContent")
    def direct_put_content(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use documents you indexed directly using the `BatchPutDocument API`. Defaults to `false`.
        """
        return pulumi.get(self, "direct_put_content")

    @direct_put_content.setter
    def direct_put_content(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "direct_put_content", value)

    @property
    @pulumi.getter(name="faqIds")
    def faq_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The identifier of the FAQs that you want to use for your Amazon Kendra experience. Maximum number of 100 items.
        """
        return pulumi.get(self, "faq_ids")

    @faq_ids.setter
    def faq_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "faq_ids", value)


@pulumi.input_type
class ExperienceConfigurationUserIdentityConfigurationArgs:
    def __init__(__self__, *,
                 identity_attribute_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] identity_attribute_name: The AWS SSO field name that contains the identifiers of your users, such as their emails.
        """
        pulumi.set(__self__, "identity_attribute_name", identity_attribute_name)

    @property
    @pulumi.getter(name="identityAttributeName")
    def identity_attribute_name(self) -> pulumi.Input[str]:
        """
        The AWS SSO field name that contains the identifiers of your users, such as their emails.
        """
        return pulumi.get(self, "identity_attribute_name")

    @identity_attribute_name.setter
    def identity_attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_attribute_name", value)


@pulumi.input_type
class ExperienceEndpointArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] endpoint: The endpoint of your Amazon Kendra experience.
        :param pulumi.Input[str] endpoint_type: The type of endpoint for your Amazon Kendra experience.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint of your Amazon Kendra experience.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of endpoint for your Amazon Kendra experience.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_type", value)


@pulumi.input_type
class FaqS3PathArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket: The name of the S3 bucket that contains the file.
        :param pulumi.Input[str] key: The name of the file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of the S3 bucket that contains the file.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The name of the file.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class IndexCapacityUnitsArgs:
    def __init__(__self__, *,
                 query_capacity_units: Optional[pulumi.Input[int]] = None,
                 storage_capacity_units: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] query_capacity_units: The amount of extra query capacity for an index and GetQuerySuggestions capacity. For more information, refer to [QueryCapacityUnits](https://docs.aws.amazon.com/kendra/latest/dg/API_CapacityUnitsConfiguration.html#Kendra-Type-CapacityUnitsConfiguration-QueryCapacityUnits).
        :param pulumi.Input[int] storage_capacity_units: The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. Minimum value of 0.
        """
        if query_capacity_units is not None:
            pulumi.set(__self__, "query_capacity_units", query_capacity_units)
        if storage_capacity_units is not None:
            pulumi.set(__self__, "storage_capacity_units", storage_capacity_units)

    @property
    @pulumi.getter(name="queryCapacityUnits")
    def query_capacity_units(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of extra query capacity for an index and GetQuerySuggestions capacity. For more information, refer to [QueryCapacityUnits](https://docs.aws.amazon.com/kendra/latest/dg/API_CapacityUnitsConfiguration.html#Kendra-Type-CapacityUnitsConfiguration-QueryCapacityUnits).
        """
        return pulumi.get(self, "query_capacity_units")

    @query_capacity_units.setter
    def query_capacity_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_capacity_units", value)

    @property
    @pulumi.getter(name="storageCapacityUnits")
    def storage_capacity_units(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. Minimum value of 0.
        """
        return pulumi.get(self, "storage_capacity_units")

    @storage_capacity_units.setter
    def storage_capacity_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_capacity_units", value)


@pulumi.input_type
class IndexDocumentMetadataConfigurationUpdateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 relevances: Optional[pulumi.Input[Sequence[pulumi.Input['IndexDocumentMetadataConfigurationUpdateRelevanceArgs']]]] = None,
                 searches: Optional[pulumi.Input[Sequence[pulumi.Input['IndexDocumentMetadataConfigurationUpdateSearchArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Specifies the name of the Index.
        :param pulumi.Input[Sequence[pulumi.Input['IndexDocumentMetadataConfigurationUpdateRelevanceArgs']]] relevances: A block that provides manual tuning parameters to determine how the field affects the search results. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['IndexDocumentMetadataConfigurationUpdateSearchArgs']]] searches: A block that provides information about how the field is used during a search. Documented below.
        :param pulumi.Input[str] type: The data type of the index field. Valid values are `STRING_VALUE`, `STRING_LIST_VALUE`, `LONG_VALUE`, `DATE_VALUE`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if relevances is not None:
            pulumi.set(__self__, "relevances", relevances)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the Index.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def relevances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IndexDocumentMetadataConfigurationUpdateRelevanceArgs']]]]:
        """
        A block that provides manual tuning parameters to determine how the field affects the search results. Documented below.
        """
        return pulumi.get(self, "relevances")

    @relevances.setter
    def relevances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IndexDocumentMetadataConfigurationUpdateRelevanceArgs']]]]):
        pulumi.set(self, "relevances", value)

    @property
    @pulumi.getter
    def searches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IndexDocumentMetadataConfigurationUpdateSearchArgs']]]]:
        """
        A block that provides information about how the field is used during a search. Documented below.
        """
        return pulumi.get(self, "searches")

    @searches.setter
    def searches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IndexDocumentMetadataConfigurationUpdateSearchArgs']]]]):
        pulumi.set(self, "searches", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The data type of the index field. Valid values are `STRING_VALUE`, `STRING_LIST_VALUE`, `LONG_VALUE`, `DATE_VALUE`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class IndexDocumentMetadataConfigurationUpdateRelevanceArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 freshness: Optional[pulumi.Input[bool]] = None,
                 importance: Optional[pulumi.Input[int]] = None,
                 rank_order: Optional[pulumi.Input[str]] = None,
                 values_importance_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[str] duration: Specifies the time period that the boost applies to. For more information, refer to [Duration](https://docs.aws.amazon.com/kendra/latest/dg/API_Relevance.html#Kendra-Type-Relevance-Duration).
        :param pulumi.Input[bool] freshness: Indicates that this field determines how "fresh" a document is. For more information, refer to [Freshness](https://docs.aws.amazon.com/kendra/latest/dg/API_Relevance.html#Kendra-Type-Relevance-Freshness).
        :param pulumi.Input[int] importance: The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers. Minimum value of 1. Maximum value of 10.
        :param pulumi.Input[str] rank_order: Determines how values should be interpreted. For more information, refer to [RankOrder](https://docs.aws.amazon.com/kendra/latest/dg/API_Relevance.html#Kendra-Type-Relevance-RankOrder).
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] values_importance_map: A list of values that should be given a different boost when they appear in the result list. For more information, refer to [ValueImportanceMap](https://docs.aws.amazon.com/kendra/latest/dg/API_Relevance.html#Kendra-Type-Relevance-ValueImportanceMap).
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if freshness is not None:
            pulumi.set(__self__, "freshness", freshness)
        if importance is not None:
            pulumi.set(__self__, "importance", importance)
        if rank_order is not None:
            pulumi.set(__self__, "rank_order", rank_order)
        if values_importance_map is not None:
            pulumi.set(__self__, "values_importance_map", values_importance_map)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the time period that the boost applies to. For more information, refer to [Duration](https://docs.aws.amazon.com/kendra/latest/dg/API_Relevance.html#Kendra-Type-Relevance-Duration).
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def freshness(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that this field determines how "fresh" a document is. For more information, refer to [Freshness](https://docs.aws.amazon.com/kendra/latest/dg/API_Relevance.html#Kendra-Type-Relevance-Freshness).
        """
        return pulumi.get(self, "freshness")

    @freshness.setter
    def freshness(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "freshness", value)

    @property
    @pulumi.getter
    def importance(self) -> Optional[pulumi.Input[int]]:
        """
        The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers. Minimum value of 1. Maximum value of 10.
        """
        return pulumi.get(self, "importance")

    @importance.setter
    def importance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "importance", value)

    @property
    @pulumi.getter(name="rankOrder")
    def rank_order(self) -> Optional[pulumi.Input[str]]:
        """
        Determines how values should be interpreted. For more information, refer to [RankOrder](https://docs.aws.amazon.com/kendra/latest/dg/API_Relevance.html#Kendra-Type-Relevance-RankOrder).
        """
        return pulumi.get(self, "rank_order")

    @rank_order.setter
    def rank_order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rank_order", value)

    @property
    @pulumi.getter(name="valuesImportanceMap")
    def values_importance_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        """
        A list of values that should be given a different boost when they appear in the result list. For more information, refer to [ValueImportanceMap](https://docs.aws.amazon.com/kendra/latest/dg/API_Relevance.html#Kendra-Type-Relevance-ValueImportanceMap).
        """
        return pulumi.get(self, "values_importance_map")

    @values_importance_map.setter
    def values_importance_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "values_importance_map", value)


@pulumi.input_type
class IndexDocumentMetadataConfigurationUpdateSearchArgs:
    def __init__(__self__, *,
                 displayable: Optional[pulumi.Input[bool]] = None,
                 facetable: Optional[pulumi.Input[bool]] = None,
                 searchable: Optional[pulumi.Input[bool]] = None,
                 sortable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] displayable: Determines whether the field is returned in the query response. The default is `true`.
        :param pulumi.Input[bool] facetable: Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is `false`.
        :param pulumi.Input[bool] searchable: Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is `true` for `string` fields and `false` for `number` and `date` fields.
        :param pulumi.Input[bool] sortable: Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is `false`.
        """
        if displayable is not None:
            pulumi.set(__self__, "displayable", displayable)
        if facetable is not None:
            pulumi.set(__self__, "facetable", facetable)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)
        if sortable is not None:
            pulumi.set(__self__, "sortable", sortable)

    @property
    @pulumi.getter
    def displayable(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the field is returned in the query response. The default is `true`.
        """
        return pulumi.get(self, "displayable")

    @displayable.setter
    def displayable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "displayable", value)

    @property
    @pulumi.getter
    def facetable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is `false`.
        """
        return pulumi.get(self, "facetable")

    @facetable.setter
    def facetable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facetable", value)

    @property
    @pulumi.getter
    def searchable(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is `true` for `string` fields and `false` for `number` and `date` fields.
        """
        return pulumi.get(self, "searchable")

    @searchable.setter
    def searchable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "searchable", value)

    @property
    @pulumi.getter
    def sortable(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is `false`.
        """
        return pulumi.get(self, "sortable")

    @sortable.setter
    def sortable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sortable", value)


@pulumi.input_type
class IndexIndexStatisticArgs:
    def __init__(__self__, *,
                 faq_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['IndexIndexStatisticFaqStatisticArgs']]]] = None,
                 text_document_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['IndexIndexStatisticTextDocumentStatisticArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['IndexIndexStatisticFaqStatisticArgs']]] faq_statistics: A block that specifies the number of question and answer topics in the index. Documented below.
        :param pulumi.Input[Sequence[pulumi.Input['IndexIndexStatisticTextDocumentStatisticArgs']]] text_document_statistics: A block that specifies the number of text documents indexed.
        """
        if faq_statistics is not None:
            pulumi.set(__self__, "faq_statistics", faq_statistics)
        if text_document_statistics is not None:
            pulumi.set(__self__, "text_document_statistics", text_document_statistics)

    @property
    @pulumi.getter(name="faqStatistics")
    def faq_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IndexIndexStatisticFaqStatisticArgs']]]]:
        """
        A block that specifies the number of question and answer topics in the index. Documented below.
        """
        return pulumi.get(self, "faq_statistics")

    @faq_statistics.setter
    def faq_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IndexIndexStatisticFaqStatisticArgs']]]]):
        pulumi.set(self, "faq_statistics", value)

    @property
    @pulumi.getter(name="textDocumentStatistics")
    def text_document_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IndexIndexStatisticTextDocumentStatisticArgs']]]]:
        """
        A block that specifies the number of text documents indexed.
        """
        return pulumi.get(self, "text_document_statistics")

    @text_document_statistics.setter
    def text_document_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IndexIndexStatisticTextDocumentStatisticArgs']]]]):
        pulumi.set(self, "text_document_statistics", value)


@pulumi.input_type
class IndexIndexStatisticFaqStatisticArgs:
    def __init__(__self__, *,
                 indexed_question_answers_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] indexed_question_answers_count: The total number of FAQ questions and answers contained in the index.
        """
        if indexed_question_answers_count is not None:
            pulumi.set(__self__, "indexed_question_answers_count", indexed_question_answers_count)

    @property
    @pulumi.getter(name="indexedQuestionAnswersCount")
    def indexed_question_answers_count(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of FAQ questions and answers contained in the index.
        """
        return pulumi.get(self, "indexed_question_answers_count")

    @indexed_question_answers_count.setter
    def indexed_question_answers_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "indexed_question_answers_count", value)


@pulumi.input_type
class IndexIndexStatisticTextDocumentStatisticArgs:
    def __init__(__self__, *,
                 indexed_text_bytes: Optional[pulumi.Input[int]] = None,
                 indexed_text_documents_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] indexed_text_bytes: The total size, in bytes, of the indexed documents.
        :param pulumi.Input[int] indexed_text_documents_count: The number of text documents indexed.
        """
        if indexed_text_bytes is not None:
            pulumi.set(__self__, "indexed_text_bytes", indexed_text_bytes)
        if indexed_text_documents_count is not None:
            pulumi.set(__self__, "indexed_text_documents_count", indexed_text_documents_count)

    @property
    @pulumi.getter(name="indexedTextBytes")
    def indexed_text_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The total size, in bytes, of the indexed documents.
        """
        return pulumi.get(self, "indexed_text_bytes")

    @indexed_text_bytes.setter
    def indexed_text_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "indexed_text_bytes", value)

    @property
    @pulumi.getter(name="indexedTextDocumentsCount")
    def indexed_text_documents_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of text documents indexed.
        """
        return pulumi.get(self, "indexed_text_documents_count")

    @indexed_text_documents_count.setter
    def indexed_text_documents_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "indexed_text_documents_count", value)


@pulumi.input_type
class IndexServerSideEncryptionConfigurationArgs:
    def __init__(__self__, *,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_id: The identifier of the AWS KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the AWS KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class IndexUserGroupResolutionConfigurationArgs:
    def __init__(__self__, *,
                 user_group_resolution_mode: pulumi.Input[str]):
        """
        :param pulumi.Input[str] user_group_resolution_mode: The identity store provider (mode) you want to use to fetch access levels of groups and users. AWS Single Sign-On is currently the only available mode. Your users and groups must exist in an AWS SSO identity source in order to use this mode. Valid Values are `AWS_SSO` or `NONE`.
        """
        pulumi.set(__self__, "user_group_resolution_mode", user_group_resolution_mode)

    @property
    @pulumi.getter(name="userGroupResolutionMode")
    def user_group_resolution_mode(self) -> pulumi.Input[str]:
        """
        The identity store provider (mode) you want to use to fetch access levels of groups and users. AWS Single Sign-On is currently the only available mode. Your users and groups must exist in an AWS SSO identity source in order to use this mode. Valid Values are `AWS_SSO` or `NONE`.
        """
        return pulumi.get(self, "user_group_resolution_mode")

    @user_group_resolution_mode.setter
    def user_group_resolution_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_group_resolution_mode", value)


@pulumi.input_type
class IndexUserTokenConfigurationsArgs:
    def __init__(__self__, *,
                 json_token_type_configuration: Optional[pulumi.Input['IndexUserTokenConfigurationsJsonTokenTypeConfigurationArgs']] = None,
                 jwt_token_type_configuration: Optional[pulumi.Input['IndexUserTokenConfigurationsJwtTokenTypeConfigurationArgs']] = None):
        """
        :param pulumi.Input['IndexUserTokenConfigurationsJsonTokenTypeConfigurationArgs'] json_token_type_configuration: A block that specifies the information about the JSON token type configuration.
        :param pulumi.Input['IndexUserTokenConfigurationsJwtTokenTypeConfigurationArgs'] jwt_token_type_configuration: A block that specifies the information about the JWT token type configuration.
        """
        if json_token_type_configuration is not None:
            pulumi.set(__self__, "json_token_type_configuration", json_token_type_configuration)
        if jwt_token_type_configuration is not None:
            pulumi.set(__self__, "jwt_token_type_configuration", jwt_token_type_configuration)

    @property
    @pulumi.getter(name="jsonTokenTypeConfiguration")
    def json_token_type_configuration(self) -> Optional[pulumi.Input['IndexUserTokenConfigurationsJsonTokenTypeConfigurationArgs']]:
        """
        A block that specifies the information about the JSON token type configuration.
        """
        return pulumi.get(self, "json_token_type_configuration")

    @json_token_type_configuration.setter
    def json_token_type_configuration(self, value: Optional[pulumi.Input['IndexUserTokenConfigurationsJsonTokenTypeConfigurationArgs']]):
        pulumi.set(self, "json_token_type_configuration", value)

    @property
    @pulumi.getter(name="jwtTokenTypeConfiguration")
    def jwt_token_type_configuration(self) -> Optional[pulumi.Input['IndexUserTokenConfigurationsJwtTokenTypeConfigurationArgs']]:
        """
        A block that specifies the information about the JWT token type configuration.
        """
        return pulumi.get(self, "jwt_token_type_configuration")

    @jwt_token_type_configuration.setter
    def jwt_token_type_configuration(self, value: Optional[pulumi.Input['IndexUserTokenConfigurationsJwtTokenTypeConfigurationArgs']]):
        pulumi.set(self, "jwt_token_type_configuration", value)


@pulumi.input_type
class IndexUserTokenConfigurationsJsonTokenTypeConfigurationArgs:
    def __init__(__self__, *,
                 group_attribute_field: pulumi.Input[str],
                 user_name_attribute_field: pulumi.Input[str]):
        """
        :param pulumi.Input[str] group_attribute_field: The group attribute field. Minimum length of 1. Maximum length of 2048.
        :param pulumi.Input[str] user_name_attribute_field: The user name attribute field. Minimum length of 1. Maximum length of 2048.
        """
        pulumi.set(__self__, "group_attribute_field", group_attribute_field)
        pulumi.set(__self__, "user_name_attribute_field", user_name_attribute_field)

    @property
    @pulumi.getter(name="groupAttributeField")
    def group_attribute_field(self) -> pulumi.Input[str]:
        """
        The group attribute field. Minimum length of 1. Maximum length of 2048.
        """
        return pulumi.get(self, "group_attribute_field")

    @group_attribute_field.setter
    def group_attribute_field(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_attribute_field", value)

    @property
    @pulumi.getter(name="userNameAttributeField")
    def user_name_attribute_field(self) -> pulumi.Input[str]:
        """
        The user name attribute field. Minimum length of 1. Maximum length of 2048.
        """
        return pulumi.get(self, "user_name_attribute_field")

    @user_name_attribute_field.setter
    def user_name_attribute_field(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name_attribute_field", value)


@pulumi.input_type
class IndexUserTokenConfigurationsJwtTokenTypeConfigurationArgs:
    def __init__(__self__, *,
                 key_location: pulumi.Input[str],
                 claim_regex: Optional[pulumi.Input[str]] = None,
                 group_attribute_field: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 secrets_manager_arn: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user_name_attribute_field: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_location: The location of the key. Valid values are `URL` or `SECRET_MANAGER`
        :param pulumi.Input[str] claim_regex: The regular expression that identifies the claim. Minimum length of 1. Maximum length of 100.
        :param pulumi.Input[str] group_attribute_field: The group attribute field. Minimum length of 1. Maximum length of 100.
        :param pulumi.Input[str] issuer: The issuer of the token. Minimum length of 1. Maximum length of 65.
        :param pulumi.Input[str] secrets_manager_arn: The Amazon Resource Name (ARN) of the secret.
        :param pulumi.Input[str] url: The signing key URL. Valid pattern is `^(https?|ftp|file):\\/\\/([^\\s]*)`
        :param pulumi.Input[str] user_name_attribute_field: The user name attribute field. Minimum length of 1. Maximum length of 100.
        """
        pulumi.set(__self__, "key_location", key_location)
        if claim_regex is not None:
            pulumi.set(__self__, "claim_regex", claim_regex)
        if group_attribute_field is not None:
            pulumi.set(__self__, "group_attribute_field", group_attribute_field)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if secrets_manager_arn is not None:
            pulumi.set(__self__, "secrets_manager_arn", secrets_manager_arn)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if user_name_attribute_field is not None:
            pulumi.set(__self__, "user_name_attribute_field", user_name_attribute_field)

    @property
    @pulumi.getter(name="keyLocation")
    def key_location(self) -> pulumi.Input[str]:
        """
        The location of the key. Valid values are `URL` or `SECRET_MANAGER`
        """
        return pulumi.get(self, "key_location")

    @key_location.setter
    def key_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_location", value)

    @property
    @pulumi.getter(name="claimRegex")
    def claim_regex(self) -> Optional[pulumi.Input[str]]:
        """
        The regular expression that identifies the claim. Minimum length of 1. Maximum length of 100.
        """
        return pulumi.get(self, "claim_regex")

    @claim_regex.setter
    def claim_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "claim_regex", value)

    @property
    @pulumi.getter(name="groupAttributeField")
    def group_attribute_field(self) -> Optional[pulumi.Input[str]]:
        """
        The group attribute field. Minimum length of 1. Maximum length of 100.
        """
        return pulumi.get(self, "group_attribute_field")

    @group_attribute_field.setter
    def group_attribute_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_attribute_field", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The issuer of the token. Minimum length of 1. Maximum length of 65.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="secretsManagerArn")
    def secrets_manager_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the secret.
        """
        return pulumi.get(self, "secrets_manager_arn")

    @secrets_manager_arn.setter
    def secrets_manager_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets_manager_arn", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The signing key URL. Valid pattern is `^(https?|ftp|file):\\/\\/([^\\s]*)`
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="userNameAttributeField")
    def user_name_attribute_field(self) -> Optional[pulumi.Input[str]]:
        """
        The user name attribute field. Minimum length of 1. Maximum length of 100.
        """
        return pulumi.get(self, "user_name_attribute_field")

    @user_name_attribute_field.setter
    def user_name_attribute_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name_attribute_field", value)


@pulumi.input_type
class QuerySuggestionsBlockListSourceS3PathArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket: The name of the S3 bucket that contains the file.
        :param pulumi.Input[str] key: The name of the file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of the S3 bucket that contains the file.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The name of the file.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ThesaurusSourceS3PathArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket: The name of the S3 bucket that contains the file.
        :param pulumi.Input[str] key: The name of the file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of the S3 bucket that contains the file.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The name of the file.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


