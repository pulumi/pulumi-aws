# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AssessmentTemplateEventSubscriptionArgs',
]

@pulumi.input_type
class AssessmentTemplateEventSubscriptionArgs:
    def __init__(__self__, *,
                 event: pulumi.Input[str],
                 topic_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] event: The event for which you want to receive SNS notifications. Valid values are `ASSESSMENT_RUN_STARTED`, `ASSESSMENT_RUN_COMPLETED`, `ASSESSMENT_RUN_STATE_CHANGED`, and `FINDING_REPORTED`.
        :param pulumi.Input[str] topic_arn: The ARN of the SNS topic to which notifications are sent.
        """
        AssessmentTemplateEventSubscriptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event=event,
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event: Optional[pulumi.Input[str]] = None,
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if event is None:
            raise TypeError("Missing 'event' argument")
        if topic_arn is None and 'topicArn' in kwargs:
            topic_arn = kwargs['topicArn']
        if topic_arn is None:
            raise TypeError("Missing 'topic_arn' argument")

        _setter("event", event)
        _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Input[str]:
        """
        The event for which you want to receive SNS notifications. Valid values are `ASSESSMENT_RUN_STARTED`, `ASSESSMENT_RUN_COMPLETED`, `ASSESSMENT_RUN_STATE_CHANGED`, and `FINDING_REPORTED`.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: pulumi.Input[str]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the SNS topic to which notifications are sent.
        """
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_arn", value)


