# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GroupExternalId',
    'UserAddresses',
    'UserEmails',
    'UserExternalId',
    'UserName',
    'UserPhoneNumbers',
    'GetGroupAlternateIdentifierResult',
    'GetGroupAlternateIdentifierExternalIdResult',
    'GetGroupAlternateIdentifierUniqueAttributeResult',
    'GetGroupExternalIdResult',
    'GetGroupFilterResult',
    'GetUserAddressResult',
    'GetUserAlternateIdentifierResult',
    'GetUserAlternateIdentifierExternalIdResult',
    'GetUserAlternateIdentifierUniqueAttributeResult',
    'GetUserEmailResult',
    'GetUserExternalIdResult',
    'GetUserFilterResult',
    'GetUserNameResult',
    'GetUserPhoneNumberResult',
]

@pulumi.output_type
class GroupExternalId(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 issuer: Optional[str] = None):
        """
        :param str id: The identifier issued to this resource by an external identity provider.
        :param str issuer: The issuer for an external identifier.
        """
        GroupExternalId._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            issuer=issuer,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             issuer: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if issuer is not None:
            _setter("issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier issued to this resource by an external identity provider.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        """
        The issuer for an external identifier.
        """
        return pulumi.get(self, "issuer")


@pulumi.output_type
class UserAddresses(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postalCode":
            suggest = "postal_code"
        elif key == "streetAddress":
            suggest = "street_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAddresses. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAddresses.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAddresses.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country: Optional[str] = None,
                 formatted: Optional[str] = None,
                 locality: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 primary: Optional[bool] = None,
                 region: Optional[str] = None,
                 street_address: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str country: The country that this address is in.
        :param str formatted: The name that is typically displayed when the address is shown for display.
        :param str locality: The address locality.
        :param str postal_code: The postal code of the address.
        :param bool primary: When `true`, this is the primary address associated with the user.
        :param str region: The region of the address.
        :param str street_address: The street of the address.
        :param str type: The type of address.
        """
        UserAddresses._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country=country,
            formatted=formatted,
            locality=locality,
            postal_code=postal_code,
            primary=primary,
            region=region,
            street_address=street_address,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country: Optional[str] = None,
             formatted: Optional[str] = None,
             locality: Optional[str] = None,
             postal_code: Optional[str] = None,
             primary: Optional[bool] = None,
             region: Optional[str] = None,
             street_address: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if postal_code is None and 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if street_address is None and 'streetAddress' in kwargs:
            street_address = kwargs['streetAddress']

        if country is not None:
            _setter("country", country)
        if formatted is not None:
            _setter("formatted", formatted)
        if locality is not None:
            _setter("locality", locality)
        if postal_code is not None:
            _setter("postal_code", postal_code)
        if primary is not None:
            _setter("primary", primary)
        if region is not None:
            _setter("region", region)
        if street_address is not None:
            _setter("street_address", street_address)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        The country that this address is in.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        """
        The name that is typically displayed when the address is shown for display.
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        """
        The address locality.
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        The postal code of the address.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        When `true`, this is the primary address associated with the user.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the address.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[str]:
        """
        The street of the address.
        """
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of address.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class UserEmails(dict):
    def __init__(__self__, *,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool primary: When `true`, this is the primary email associated with the user.
        :param str type: The type of email.
        :param str value: The email address. This value must be unique across the identity store.
        """
        UserEmails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            primary=primary,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             primary: Optional[bool] = None,
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if primary is not None:
            _setter("primary", primary)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        When `true`, this is the primary email associated with the user.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of email.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The email address. This value must be unique across the identity store.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserExternalId(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 issuer: Optional[str] = None):
        """
        :param str id: The identifier issued to this resource by an external identity provider.
        :param str issuer: The issuer for an external identifier.
        """
        UserExternalId._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            issuer=issuer,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             issuer: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if issuer is not None:
            _setter("issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The identifier issued to this resource by an external identity provider.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        """
        The issuer for an external identifier.
        """
        return pulumi.get(self, "issuer")


@pulumi.output_type
class UserName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "honorificPrefix":
            suggest = "honorific_prefix"
        elif key == "honorificSuffix":
            suggest = "honorific_suffix"
        elif key == "middleName":
            suggest = "middle_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_name: str,
                 given_name: str,
                 formatted: Optional[str] = None,
                 honorific_prefix: Optional[str] = None,
                 honorific_suffix: Optional[str] = None,
                 middle_name: Optional[str] = None):
        """
        :param str family_name: The family name of the user.
        :param str given_name: The given name of the user.
               
               The following arguments are optional:
        :param str formatted: The name that is typically displayed when the name is shown for display.
        :param str honorific_prefix: The honorific prefix of the user.
        :param str honorific_suffix: The honorific suffix of the user.
        :param str middle_name: The middle name of the user.
        """
        UserName._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            family_name=family_name,
            given_name=given_name,
            formatted=formatted,
            honorific_prefix=honorific_prefix,
            honorific_suffix=honorific_suffix,
            middle_name=middle_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             family_name: Optional[str] = None,
             given_name: Optional[str] = None,
             formatted: Optional[str] = None,
             honorific_prefix: Optional[str] = None,
             honorific_suffix: Optional[str] = None,
             middle_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if family_name is None and 'familyName' in kwargs:
            family_name = kwargs['familyName']
        if family_name is None:
            raise TypeError("Missing 'family_name' argument")
        if given_name is None and 'givenName' in kwargs:
            given_name = kwargs['givenName']
        if given_name is None:
            raise TypeError("Missing 'given_name' argument")
        if honorific_prefix is None and 'honorificPrefix' in kwargs:
            honorific_prefix = kwargs['honorificPrefix']
        if honorific_suffix is None and 'honorificSuffix' in kwargs:
            honorific_suffix = kwargs['honorificSuffix']
        if middle_name is None and 'middleName' in kwargs:
            middle_name = kwargs['middleName']

        _setter("family_name", family_name)
        _setter("given_name", given_name)
        if formatted is not None:
            _setter("formatted", formatted)
        if honorific_prefix is not None:
            _setter("honorific_prefix", honorific_prefix)
        if honorific_suffix is not None:
            _setter("honorific_suffix", honorific_suffix)
        if middle_name is not None:
            _setter("middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        """
        The family name of the user.
        """
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        """
        The given name of the user.

        The following arguments are optional:
        """
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        """
        The name that is typically displayed when the name is shown for display.
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> Optional[str]:
        """
        The honorific prefix of the user.
        """
        return pulumi.get(self, "honorific_prefix")

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> Optional[str]:
        """
        The honorific suffix of the user.
        """
        return pulumi.get(self, "honorific_suffix")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        """
        The middle name of the user.
        """
        return pulumi.get(self, "middle_name")


@pulumi.output_type
class UserPhoneNumbers(dict):
    def __init__(__self__, *,
                 primary: Optional[bool] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool primary: When `true`, this is the primary phone number associated with the user.
        :param str type: The type of phone number.
        :param str value: The user's phone number.
        """
        UserPhoneNumbers._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            primary=primary,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             primary: Optional[bool] = None,
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if primary is not None:
            _setter("primary", primary)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        When `true`, this is the primary phone number associated with the user.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of phone number.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The user's phone number.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGroupAlternateIdentifierResult(dict):
    def __init__(__self__, *,
                 external_id: Optional['outputs.GetGroupAlternateIdentifierExternalIdResult'] = None,
                 unique_attribute: Optional['outputs.GetGroupAlternateIdentifierUniqueAttributeResult'] = None):
        """
        :param 'GetGroupAlternateIdentifierExternalIdArgs' external_id: Configuration block for filtering by the identifier issued by an external identity provider. Detailed below.
        :param 'GetGroupAlternateIdentifierUniqueAttributeArgs' unique_attribute: An entity attribute that's unique to a specific entity. Detailed below.
               
               > Exactly one of the above arguments must be provided.
        """
        GetGroupAlternateIdentifierResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            external_id=external_id,
            unique_attribute=unique_attribute,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             external_id: Optional['outputs.GetGroupAlternateIdentifierExternalIdResult'] = None,
             unique_attribute: Optional['outputs.GetGroupAlternateIdentifierUniqueAttributeResult'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if external_id is None and 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if unique_attribute is None and 'uniqueAttribute' in kwargs:
            unique_attribute = kwargs['uniqueAttribute']

        if external_id is not None:
            _setter("external_id", external_id)
        if unique_attribute is not None:
            _setter("unique_attribute", unique_attribute)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional['outputs.GetGroupAlternateIdentifierExternalIdResult']:
        """
        Configuration block for filtering by the identifier issued by an external identity provider. Detailed below.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="uniqueAttribute")
    def unique_attribute(self) -> Optional['outputs.GetGroupAlternateIdentifierUniqueAttributeResult']:
        """
        An entity attribute that's unique to a specific entity. Detailed below.

        > Exactly one of the above arguments must be provided.
        """
        return pulumi.get(self, "unique_attribute")


@pulumi.output_type
class GetGroupAlternateIdentifierExternalIdResult(dict):
    def __init__(__self__, *,
                 id: str,
                 issuer: str):
        """
        :param str id: The identifier issued to this resource by an external identity provider.
        :param str issuer: The issuer for an external identifier.
        """
        GetGroupAlternateIdentifierExternalIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            issuer=issuer,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             issuer: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if issuer is None:
            raise TypeError("Missing 'issuer' argument")

        _setter("id", id)
        _setter("issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier issued to this resource by an external identity provider.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        The issuer for an external identifier.
        """
        return pulumi.get(self, "issuer")


@pulumi.output_type
class GetGroupAlternateIdentifierUniqueAttributeResult(dict):
    def __init__(__self__, *,
                 attribute_path: str,
                 attribute_value: str):
        """
        :param str attribute_path: Attribute path that is used to specify which attribute name to search. For example: `DisplayName`. Refer to the [Group data type](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html).
        :param str attribute_value: Value for an attribute.
        """
        GetGroupAlternateIdentifierUniqueAttributeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_path=attribute_path,
            attribute_value=attribute_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_path: Optional[str] = None,
             attribute_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute_path is None and 'attributePath' in kwargs:
            attribute_path = kwargs['attributePath']
        if attribute_path is None:
            raise TypeError("Missing 'attribute_path' argument")
        if attribute_value is None and 'attributeValue' in kwargs:
            attribute_value = kwargs['attributeValue']
        if attribute_value is None:
            raise TypeError("Missing 'attribute_value' argument")

        _setter("attribute_path", attribute_path)
        _setter("attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributePath")
    def attribute_path(self) -> str:
        """
        Attribute path that is used to specify which attribute name to search. For example: `DisplayName`. Refer to the [Group data type](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html).
        """
        return pulumi.get(self, "attribute_path")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        """
        Value for an attribute.
        """
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetGroupExternalIdResult(dict):
    def __init__(__self__, *,
                 id: str,
                 issuer: str):
        """
        :param str id: The identifier issued to this resource by an external identity provider.
        :param str issuer: The issuer for an external identifier.
        """
        GetGroupExternalIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            issuer=issuer,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             issuer: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if issuer is None:
            raise TypeError("Missing 'issuer' argument")

        _setter("id", id)
        _setter("issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier issued to this resource by an external identity provider.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        The issuer for an external identifier.
        """
        return pulumi.get(self, "issuer")


@pulumi.output_type
class GetGroupFilterResult(dict):
    def __init__(__self__, *,
                 attribute_path: str,
                 attribute_value: str):
        """
        :param str attribute_path: Attribute path that is used to specify which attribute name to search. Currently, `DisplayName` is the only valid attribute path.
        :param str attribute_value: Value for an attribute.
        """
        GetGroupFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_path=attribute_path,
            attribute_value=attribute_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_path: Optional[str] = None,
             attribute_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute_path is None and 'attributePath' in kwargs:
            attribute_path = kwargs['attributePath']
        if attribute_path is None:
            raise TypeError("Missing 'attribute_path' argument")
        if attribute_value is None and 'attributeValue' in kwargs:
            attribute_value = kwargs['attributeValue']
        if attribute_value is None:
            raise TypeError("Missing 'attribute_value' argument")

        _setter("attribute_path", attribute_path)
        _setter("attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributePath")
    def attribute_path(self) -> str:
        """
        Attribute path that is used to specify which attribute name to search. Currently, `DisplayName` is the only valid attribute path.
        """
        return pulumi.get(self, "attribute_path")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        """
        Value for an attribute.
        """
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetUserAddressResult(dict):
    def __init__(__self__, *,
                 country: str,
                 formatted: str,
                 locality: str,
                 postal_code: str,
                 primary: bool,
                 region: str,
                 street_address: str,
                 type: str):
        """
        :param str country: The country that this address is in.
        :param str formatted: The name that is typically displayed when the name is shown for display.
        :param str locality: The address locality.
        :param str postal_code: The postal code of the address.
        :param bool primary: When `true`, this is the primary phone number associated with the user.
        :param str region: The region of the address.
        :param str street_address: The street of the address.
        :param str type: The type of phone number.
        """
        GetUserAddressResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country=country,
            formatted=formatted,
            locality=locality,
            postal_code=postal_code,
            primary=primary,
            region=region,
            street_address=street_address,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country: Optional[str] = None,
             formatted: Optional[str] = None,
             locality: Optional[str] = None,
             postal_code: Optional[str] = None,
             primary: Optional[bool] = None,
             region: Optional[str] = None,
             street_address: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if country is None:
            raise TypeError("Missing 'country' argument")
        if formatted is None:
            raise TypeError("Missing 'formatted' argument")
        if locality is None:
            raise TypeError("Missing 'locality' argument")
        if postal_code is None and 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if postal_code is None:
            raise TypeError("Missing 'postal_code' argument")
        if primary is None:
            raise TypeError("Missing 'primary' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")
        if street_address is None and 'streetAddress' in kwargs:
            street_address = kwargs['streetAddress']
        if street_address is None:
            raise TypeError("Missing 'street_address' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("country", country)
        _setter("formatted", formatted)
        _setter("locality", locality)
        _setter("postal_code", postal_code)
        _setter("primary", primary)
        _setter("region", region)
        _setter("street_address", street_address)
        _setter("type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        The country that this address is in.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        """
        The name that is typically displayed when the name is shown for display.
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> str:
        """
        The address locality.
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        """
        The postal code of the address.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        When `true`, this is the primary phone number associated with the user.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the address.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> str:
        """
        The street of the address.
        """
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of phone number.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserAlternateIdentifierResult(dict):
    def __init__(__self__, *,
                 external_id: Optional['outputs.GetUserAlternateIdentifierExternalIdResult'] = None,
                 unique_attribute: Optional['outputs.GetUserAlternateIdentifierUniqueAttributeResult'] = None):
        """
        :param 'GetUserAlternateIdentifierExternalIdArgs' external_id: Configuration block for filtering by the identifier issued by an external identity provider. Detailed below.
        :param 'GetUserAlternateIdentifierUniqueAttributeArgs' unique_attribute: An entity attribute that's unique to a specific entity. Detailed below.
               
               > Exactly one of the above arguments must be provided.
        """
        GetUserAlternateIdentifierResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            external_id=external_id,
            unique_attribute=unique_attribute,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             external_id: Optional['outputs.GetUserAlternateIdentifierExternalIdResult'] = None,
             unique_attribute: Optional['outputs.GetUserAlternateIdentifierUniqueAttributeResult'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if external_id is None and 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if unique_attribute is None and 'uniqueAttribute' in kwargs:
            unique_attribute = kwargs['uniqueAttribute']

        if external_id is not None:
            _setter("external_id", external_id)
        if unique_attribute is not None:
            _setter("unique_attribute", unique_attribute)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional['outputs.GetUserAlternateIdentifierExternalIdResult']:
        """
        Configuration block for filtering by the identifier issued by an external identity provider. Detailed below.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="uniqueAttribute")
    def unique_attribute(self) -> Optional['outputs.GetUserAlternateIdentifierUniqueAttributeResult']:
        """
        An entity attribute that's unique to a specific entity. Detailed below.

        > Exactly one of the above arguments must be provided.
        """
        return pulumi.get(self, "unique_attribute")


@pulumi.output_type
class GetUserAlternateIdentifierExternalIdResult(dict):
    def __init__(__self__, *,
                 id: str,
                 issuer: str):
        """
        :param str id: The identifier issued to this resource by an external identity provider.
        :param str issuer: The issuer for an external identifier.
        """
        GetUserAlternateIdentifierExternalIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            issuer=issuer,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             issuer: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if issuer is None:
            raise TypeError("Missing 'issuer' argument")

        _setter("id", id)
        _setter("issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier issued to this resource by an external identity provider.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        The issuer for an external identifier.
        """
        return pulumi.get(self, "issuer")


@pulumi.output_type
class GetUserAlternateIdentifierUniqueAttributeResult(dict):
    def __init__(__self__, *,
                 attribute_path: str,
                 attribute_value: str):
        """
        :param str attribute_path: Attribute path that is used to specify which attribute name to search. For example: `UserName`. Refer to the [User data type](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html).
        :param str attribute_value: Value for an attribute.
        """
        GetUserAlternateIdentifierUniqueAttributeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_path=attribute_path,
            attribute_value=attribute_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_path: Optional[str] = None,
             attribute_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute_path is None and 'attributePath' in kwargs:
            attribute_path = kwargs['attributePath']
        if attribute_path is None:
            raise TypeError("Missing 'attribute_path' argument")
        if attribute_value is None and 'attributeValue' in kwargs:
            attribute_value = kwargs['attributeValue']
        if attribute_value is None:
            raise TypeError("Missing 'attribute_value' argument")

        _setter("attribute_path", attribute_path)
        _setter("attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributePath")
    def attribute_path(self) -> str:
        """
        Attribute path that is used to specify which attribute name to search. For example: `UserName`. Refer to the [User data type](https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html).
        """
        return pulumi.get(self, "attribute_path")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        """
        Value for an attribute.
        """
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetUserEmailResult(dict):
    def __init__(__self__, *,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param bool primary: When `true`, this is the primary phone number associated with the user.
        :param str type: The type of phone number.
        :param str value: The user's phone number.
        """
        GetUserEmailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            primary=primary,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             primary: Optional[bool] = None,
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if primary is None:
            raise TypeError("Missing 'primary' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("primary", primary)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        When `true`, this is the primary phone number associated with the user.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of phone number.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The user's phone number.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserExternalIdResult(dict):
    def __init__(__self__, *,
                 id: str,
                 issuer: str):
        """
        :param str id: The identifier issued to this resource by an external identity provider.
        :param str issuer: The issuer for an external identifier.
        """
        GetUserExternalIdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            issuer=issuer,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             issuer: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if issuer is None:
            raise TypeError("Missing 'issuer' argument")

        _setter("id", id)
        _setter("issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier issued to this resource by an external identity provider.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        The issuer for an external identifier.
        """
        return pulumi.get(self, "issuer")


@pulumi.output_type
class GetUserFilterResult(dict):
    def __init__(__self__, *,
                 attribute_path: str,
                 attribute_value: str):
        """
        :param str attribute_path: Attribute path that is used to specify which attribute name to search. Currently, `UserName` is the only valid attribute path.
        :param str attribute_value: Value for an attribute.
        """
        GetUserFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_path=attribute_path,
            attribute_value=attribute_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_path: Optional[str] = None,
             attribute_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute_path is None and 'attributePath' in kwargs:
            attribute_path = kwargs['attributePath']
        if attribute_path is None:
            raise TypeError("Missing 'attribute_path' argument")
        if attribute_value is None and 'attributeValue' in kwargs:
            attribute_value = kwargs['attributeValue']
        if attribute_value is None:
            raise TypeError("Missing 'attribute_value' argument")

        _setter("attribute_path", attribute_path)
        _setter("attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributePath")
    def attribute_path(self) -> str:
        """
        Attribute path that is used to specify which attribute name to search. Currently, `UserName` is the only valid attribute path.
        """
        return pulumi.get(self, "attribute_path")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        """
        Value for an attribute.
        """
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetUserNameResult(dict):
    def __init__(__self__, *,
                 family_name: str,
                 formatted: str,
                 given_name: str,
                 honorific_prefix: str,
                 honorific_suffix: str,
                 middle_name: str):
        """
        :param str family_name: The family name of the user.
        :param str formatted: The name that is typically displayed when the name is shown for display.
        :param str given_name: The given name of the user.
        :param str honorific_prefix: The honorific prefix of the user.
        :param str honorific_suffix: The honorific suffix of the user.
        :param str middle_name: The middle name of the user.
        """
        GetUserNameResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            family_name=family_name,
            formatted=formatted,
            given_name=given_name,
            honorific_prefix=honorific_prefix,
            honorific_suffix=honorific_suffix,
            middle_name=middle_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             family_name: Optional[str] = None,
             formatted: Optional[str] = None,
             given_name: Optional[str] = None,
             honorific_prefix: Optional[str] = None,
             honorific_suffix: Optional[str] = None,
             middle_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if family_name is None and 'familyName' in kwargs:
            family_name = kwargs['familyName']
        if family_name is None:
            raise TypeError("Missing 'family_name' argument")
        if formatted is None:
            raise TypeError("Missing 'formatted' argument")
        if given_name is None and 'givenName' in kwargs:
            given_name = kwargs['givenName']
        if given_name is None:
            raise TypeError("Missing 'given_name' argument")
        if honorific_prefix is None and 'honorificPrefix' in kwargs:
            honorific_prefix = kwargs['honorificPrefix']
        if honorific_prefix is None:
            raise TypeError("Missing 'honorific_prefix' argument")
        if honorific_suffix is None and 'honorificSuffix' in kwargs:
            honorific_suffix = kwargs['honorificSuffix']
        if honorific_suffix is None:
            raise TypeError("Missing 'honorific_suffix' argument")
        if middle_name is None and 'middleName' in kwargs:
            middle_name = kwargs['middleName']
        if middle_name is None:
            raise TypeError("Missing 'middle_name' argument")

        _setter("family_name", family_name)
        _setter("formatted", formatted)
        _setter("given_name", given_name)
        _setter("honorific_prefix", honorific_prefix)
        _setter("honorific_suffix", honorific_suffix)
        _setter("middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        """
        The family name of the user.
        """
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        """
        The name that is typically displayed when the name is shown for display.
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        """
        The given name of the user.
        """
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> str:
        """
        The honorific prefix of the user.
        """
        return pulumi.get(self, "honorific_prefix")

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> str:
        """
        The honorific suffix of the user.
        """
        return pulumi.get(self, "honorific_suffix")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> str:
        """
        The middle name of the user.
        """
        return pulumi.get(self, "middle_name")


@pulumi.output_type
class GetUserPhoneNumberResult(dict):
    def __init__(__self__, *,
                 primary: bool,
                 type: str,
                 value: str):
        """
        :param bool primary: When `true`, this is the primary phone number associated with the user.
        :param str type: The type of phone number.
        :param str value: The user's phone number.
        """
        GetUserPhoneNumberResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            primary=primary,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             primary: Optional[bool] = None,
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if primary is None:
            raise TypeError("Missing 'primary' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("primary", primary)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def primary(self) -> bool:
        """
        When `true`, this is the primary phone number associated with the user.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of phone number.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The user's phone number.
        """
        return pulumi.get(self, "value")


