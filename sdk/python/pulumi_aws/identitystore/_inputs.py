# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GroupExternalIdArgs',
    'UserAddressesArgs',
    'UserEmailsArgs',
    'UserExternalIdArgs',
    'UserNameArgs',
    'UserPhoneNumbersArgs',
    'GetGroupAlternateIdentifierArgs',
    'GetGroupAlternateIdentifierExternalIdArgs',
    'GetGroupAlternateIdentifierUniqueAttributeArgs',
    'GetGroupFilterArgs',
    'GetUserAlternateIdentifierArgs',
    'GetUserAlternateIdentifierExternalIdArgs',
    'GetUserAlternateIdentifierUniqueAttributeArgs',
    'GetUserFilterArgs',
]

@pulumi.input_type
class GroupExternalIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class UserAddressesArgs:
    def __init__(__self__, *,
                 country: Optional[pulumi.Input[str]] = None,
                 formatted: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 street_address: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def formatted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "formatted")

    @formatted.setter
    def formatted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "formatted", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_address")

    @street_address.setter
    def street_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_address", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class UserEmailsArgs:
    def __init__(__self__, *,
                 primary: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UserExternalIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class UserNameArgs:
    def __init__(__self__, *,
                 family_name: pulumi.Input[str],
                 given_name: pulumi.Input[str],
                 formatted: Optional[pulumi.Input[str]] = None,
                 honorific_prefix: Optional[pulumi.Input[str]] = None,
                 honorific_suffix: Optional[pulumi.Input[str]] = None,
                 middle_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "given_name", given_name)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if honorific_prefix is not None:
            pulumi.set(__self__, "honorific_prefix", honorific_prefix)
        if honorific_suffix is not None:
            pulumi.set(__self__, "honorific_suffix", honorific_suffix)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "family_name")

    @family_name.setter
    def family_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "family_name", value)

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "given_name")

    @given_name.setter
    def given_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "given_name", value)

    @property
    @pulumi.getter
    def formatted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "formatted")

    @formatted.setter
    def formatted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "formatted", value)

    @property
    @pulumi.getter(name="honorificPrefix")
    def honorific_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "honorific_prefix")

    @honorific_prefix.setter
    def honorific_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "honorific_prefix", value)

    @property
    @pulumi.getter(name="honorificSuffix")
    def honorific_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "honorific_suffix")

    @honorific_suffix.setter
    def honorific_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "honorific_suffix", value)

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "middle_name")

    @middle_name.setter
    def middle_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "middle_name", value)


@pulumi.input_type
class UserPhoneNumbersArgs:
    def __init__(__self__, *,
                 primary: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGroupAlternateIdentifierArgs:
    def __init__(__self__, *,
                 external_id: Optional['GetGroupAlternateIdentifierExternalIdArgs'] = None,
                 unique_attribute: Optional['GetGroupAlternateIdentifierUniqueAttributeArgs'] = None):
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if unique_attribute is not None:
            pulumi.set(__self__, "unique_attribute", unique_attribute)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional['GetGroupAlternateIdentifierExternalIdArgs']:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional['GetGroupAlternateIdentifierExternalIdArgs']):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="uniqueAttribute")
    def unique_attribute(self) -> Optional['GetGroupAlternateIdentifierUniqueAttributeArgs']:
        return pulumi.get(self, "unique_attribute")

    @unique_attribute.setter
    def unique_attribute(self, value: Optional['GetGroupAlternateIdentifierUniqueAttributeArgs']):
        pulumi.set(self, "unique_attribute", value)


@pulumi.input_type
class GetGroupAlternateIdentifierExternalIdArgs:
    def __init__(__self__, *,
                 id: str,
                 issuer: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: str):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class GetGroupAlternateIdentifierUniqueAttributeArgs:
    def __init__(__self__, *,
                 attribute_path: str,
                 attribute_value: str):
        pulumi.set(__self__, "attribute_path", attribute_path)
        pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributePath")
    def attribute_path(self) -> str:
        return pulumi.get(self, "attribute_path")

    @attribute_path.setter
    def attribute_path(self, value: str):
        pulumi.set(self, "attribute_path", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: str):
        pulumi.set(self, "attribute_value", value)


@pulumi.input_type
class GetGroupFilterArgs:
    def __init__(__self__, *,
                 attribute_path: str,
                 attribute_value: str):
        pulumi.set(__self__, "attribute_path", attribute_path)
        pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributePath")
    def attribute_path(self) -> str:
        return pulumi.get(self, "attribute_path")

    @attribute_path.setter
    def attribute_path(self, value: str):
        pulumi.set(self, "attribute_path", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: str):
        pulumi.set(self, "attribute_value", value)


@pulumi.input_type
class GetUserAlternateIdentifierArgs:
    def __init__(__self__, *,
                 external_id: Optional['GetUserAlternateIdentifierExternalIdArgs'] = None,
                 unique_attribute: Optional['GetUserAlternateIdentifierUniqueAttributeArgs'] = None):
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if unique_attribute is not None:
            pulumi.set(__self__, "unique_attribute", unique_attribute)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional['GetUserAlternateIdentifierExternalIdArgs']:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional['GetUserAlternateIdentifierExternalIdArgs']):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="uniqueAttribute")
    def unique_attribute(self) -> Optional['GetUserAlternateIdentifierUniqueAttributeArgs']:
        return pulumi.get(self, "unique_attribute")

    @unique_attribute.setter
    def unique_attribute(self, value: Optional['GetUserAlternateIdentifierUniqueAttributeArgs']):
        pulumi.set(self, "unique_attribute", value)


@pulumi.input_type
class GetUserAlternateIdentifierExternalIdArgs:
    def __init__(__self__, *,
                 id: str,
                 issuer: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: str):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class GetUserAlternateIdentifierUniqueAttributeArgs:
    def __init__(__self__, *,
                 attribute_path: str,
                 attribute_value: str):
        pulumi.set(__self__, "attribute_path", attribute_path)
        pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributePath")
    def attribute_path(self) -> str:
        return pulumi.get(self, "attribute_path")

    @attribute_path.setter
    def attribute_path(self, value: str):
        pulumi.set(self, "attribute_path", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: str):
        pulumi.set(self, "attribute_value", value)


@pulumi.input_type
class GetUserFilterArgs:
    def __init__(__self__, *,
                 attribute_path: str,
                 attribute_value: str):
        pulumi.set(__self__, "attribute_path", attribute_path)
        pulumi.set(__self__, "attribute_value", attribute_value)

    @property
    @pulumi.getter(name="attributePath")
    def attribute_path(self) -> str:
        return pulumi.get(self, "attribute_path")

    @attribute_path.setter
    def attribute_path(self, value: str):
        pulumi.set(self, "attribute_path", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> str:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: str):
        pulumi.set(self, "attribute_value", value)


