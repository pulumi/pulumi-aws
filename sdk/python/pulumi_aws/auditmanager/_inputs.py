# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AssessmentAssessmentReportsDestinationArgs',
    'AssessmentRoleArgs',
    'AssessmentRolesAllArgs',
    'AssessmentScopeArgs',
    'AssessmentScopeAwsAccountArgs',
    'AssessmentScopeAwsServiceArgs',
    'ControlControlMappingSourceArgs',
    'ControlControlMappingSourceSourceKeywordArgs',
    'FrameworkControlSetArgs',
    'FrameworkControlSetControlArgs',
    'GetControlControlMappingSourceArgs',
    'GetControlControlMappingSourceSourceKeywordArgs',
    'GetFrameworkControlSetArgs',
    'GetFrameworkControlSetControlArgs',
]

@pulumi.input_type
class AssessmentAssessmentReportsDestinationArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 destination_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] destination: Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
        :param pulumi.Input[str] destination_type: Destination type. Currently, `S3` is the only valid value.
        """
        AssessmentAssessmentReportsDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            destination_type=destination_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[pulumi.Input[str]] = None,
             destination_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination is None:
            raise TypeError("Missing 'destination' argument")
        if destination_type is None and 'destinationType' in kwargs:
            destination_type = kwargs['destinationType']
        if destination_type is None:
            raise TypeError("Missing 'destination_type' argument")

        _setter("destination", destination)
        _setter("destination_type", destination_type)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        """
        Destination type. Currently, `S3` is the only valid value.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)


@pulumi.input_type
class AssessmentRoleArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 role_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] role_arn: Amazon Resource Name (ARN) of the IAM role.
        :param pulumi.Input[str] role_type: Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
        """
        AssessmentRoleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            role_type=role_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: Optional[pulumi.Input[str]] = None,
             role_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if role_type is None and 'roleType' in kwargs:
            role_type = kwargs['roleType']
        if role_type is None:
            raise TypeError("Missing 'role_type' argument")

        _setter("role_arn", role_arn)
        _setter("role_type", role_type)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        Amazon Resource Name (ARN) of the IAM role.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> pulumi.Input[str]:
        """
        Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_type", value)


@pulumi.input_type
class AssessmentRolesAllArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 role_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] role_arn: Amazon Resource Name (ARN) of the IAM role.
        :param pulumi.Input[str] role_type: Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
        """
        AssessmentRolesAllArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            role_type=role_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: Optional[pulumi.Input[str]] = None,
             role_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if role_type is None and 'roleType' in kwargs:
            role_type = kwargs['roleType']
        if role_type is None:
            raise TypeError("Missing 'role_type' argument")

        _setter("role_arn", role_arn)
        _setter("role_type", role_type)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        Amazon Resource Name (ARN) of the IAM role.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> pulumi.Input[str]:
        """
        Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_type", value)


@pulumi.input_type
class AssessmentScopeArgs:
    def __init__(__self__, *,
                 aws_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsAccountArgs']]]] = None,
                 aws_services: Optional[pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsServiceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsAccountArgs']]] aws_accounts: Amazon Web Services accounts that are in scope for the assessment. See `aws_accounts` below.
        :param pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsServiceArgs']]] aws_services: Amazon Web Services services that are included in the scope of the assessment. See `aws_services` below.
        """
        AssessmentScopeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_accounts=aws_accounts,
            aws_services=aws_services,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsAccountArgs']]]] = None,
             aws_services: Optional[pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsServiceArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if aws_accounts is None and 'awsAccounts' in kwargs:
            aws_accounts = kwargs['awsAccounts']
        if aws_services is None and 'awsServices' in kwargs:
            aws_services = kwargs['awsServices']

        if aws_accounts is not None:
            _setter("aws_accounts", aws_accounts)
        if aws_services is not None:
            _setter("aws_services", aws_services)

    @property
    @pulumi.getter(name="awsAccounts")
    def aws_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsAccountArgs']]]]:
        """
        Amazon Web Services accounts that are in scope for the assessment. See `aws_accounts` below.
        """
        return pulumi.get(self, "aws_accounts")

    @aws_accounts.setter
    def aws_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsAccountArgs']]]]):
        pulumi.set(self, "aws_accounts", value)

    @property
    @pulumi.getter(name="awsServices")
    def aws_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsServiceArgs']]]]:
        """
        Amazon Web Services services that are included in the scope of the assessment. See `aws_services` below.
        """
        return pulumi.get(self, "aws_services")

    @aws_services.setter
    def aws_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AssessmentScopeAwsServiceArgs']]]]):
        pulumi.set(self, "aws_services", value)


@pulumi.input_type
class AssessmentScopeAwsAccountArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: Identifier for the Amazon Web Services account.
        """
        AssessmentScopeAwsAccountArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Identifier for the Amazon Web Services account.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class AssessmentScopeAwsServiceArgs:
    def __init__(__self__, *,
                 service_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] service_name: Name of the Amazon Web Service.
        """
        AssessmentScopeAwsServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if service_name is None and 'serviceName' in kwargs:
            service_name = kwargs['serviceName']
        if service_name is None:
            raise TypeError("Missing 'service_name' argument")

        _setter("service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        Name of the Amazon Web Service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class ControlControlMappingSourceArgs:
    def __init__(__self__, *,
                 source_name: pulumi.Input[str],
                 source_set_up_option: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 source_description: Optional[pulumi.Input[str]] = None,
                 source_frequency: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_keyword: Optional[pulumi.Input['ControlControlMappingSourceSourceKeywordArgs']] = None,
                 troubleshooting_text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source_name: Name of the source.
        :param pulumi.Input[str] source_set_up_option: The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
        :param pulumi.Input[str] source_type: Type of data source for evidence collection. If `source_set_up_option` is manual, the only valid value is `MANUAL`. If `source_set_up_option` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.
               
               The following arguments are optional:
        :param pulumi.Input[str] source_description: Description of the source.
        :param pulumi.Input[str] source_frequency: Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
        :param pulumi.Input['ControlControlMappingSourceSourceKeywordArgs'] source_keyword: The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See `source_keyword` below.
        :param pulumi.Input[str] troubleshooting_text: Instructions for troubleshooting the control.
        """
        ControlControlMappingSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_name=source_name,
            source_set_up_option=source_set_up_option,
            source_type=source_type,
            source_description=source_description,
            source_frequency=source_frequency,
            source_id=source_id,
            source_keyword=source_keyword,
            troubleshooting_text=troubleshooting_text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_name: Optional[pulumi.Input[str]] = None,
             source_set_up_option: Optional[pulumi.Input[str]] = None,
             source_type: Optional[pulumi.Input[str]] = None,
             source_description: Optional[pulumi.Input[str]] = None,
             source_frequency: Optional[pulumi.Input[str]] = None,
             source_id: Optional[pulumi.Input[str]] = None,
             source_keyword: Optional[pulumi.Input['ControlControlMappingSourceSourceKeywordArgs']] = None,
             troubleshooting_text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if source_name is None and 'sourceName' in kwargs:
            source_name = kwargs['sourceName']
        if source_name is None:
            raise TypeError("Missing 'source_name' argument")
        if source_set_up_option is None and 'sourceSetUpOption' in kwargs:
            source_set_up_option = kwargs['sourceSetUpOption']
        if source_set_up_option is None:
            raise TypeError("Missing 'source_set_up_option' argument")
        if source_type is None and 'sourceType' in kwargs:
            source_type = kwargs['sourceType']
        if source_type is None:
            raise TypeError("Missing 'source_type' argument")
        if source_description is None and 'sourceDescription' in kwargs:
            source_description = kwargs['sourceDescription']
        if source_frequency is None and 'sourceFrequency' in kwargs:
            source_frequency = kwargs['sourceFrequency']
        if source_id is None and 'sourceId' in kwargs:
            source_id = kwargs['sourceId']
        if source_keyword is None and 'sourceKeyword' in kwargs:
            source_keyword = kwargs['sourceKeyword']
        if troubleshooting_text is None and 'troubleshootingText' in kwargs:
            troubleshooting_text = kwargs['troubleshootingText']

        _setter("source_name", source_name)
        _setter("source_set_up_option", source_set_up_option)
        _setter("source_type", source_type)
        if source_description is not None:
            _setter("source_description", source_description)
        if source_frequency is not None:
            _setter("source_frequency", source_frequency)
        if source_id is not None:
            _setter("source_id", source_id)
        if source_keyword is not None:
            _setter("source_keyword", source_keyword)
        if troubleshooting_text is not None:
            _setter("troubleshooting_text", troubleshooting_text)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Input[str]:
        """
        Name of the source.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="sourceSetUpOption")
    def source_set_up_option(self) -> pulumi.Input[str]:
        """
        The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
        """
        return pulumi.get(self, "source_set_up_option")

    @source_set_up_option.setter
    def source_set_up_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_set_up_option", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        Type of data source for evidence collection. If `source_set_up_option` is manual, the only valid value is `MANUAL`. If `source_set_up_option` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.

        The following arguments are optional:
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="sourceDescription")
    def source_description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the source.
        """
        return pulumi.get(self, "source_description")

    @source_description.setter
    def source_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_description", value)

    @property
    @pulumi.getter(name="sourceFrequency")
    def source_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
        """
        return pulumi.get(self, "source_frequency")

    @source_frequency.setter
    def source_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_frequency", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceKeyword")
    def source_keyword(self) -> Optional[pulumi.Input['ControlControlMappingSourceSourceKeywordArgs']]:
        """
        The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See `source_keyword` below.
        """
        return pulumi.get(self, "source_keyword")

    @source_keyword.setter
    def source_keyword(self, value: Optional[pulumi.Input['ControlControlMappingSourceSourceKeywordArgs']]):
        pulumi.set(self, "source_keyword", value)

    @property
    @pulumi.getter(name="troubleshootingText")
    def troubleshooting_text(self) -> Optional[pulumi.Input[str]]:
        """
        Instructions for troubleshooting the control.
        """
        return pulumi.get(self, "troubleshooting_text")

    @troubleshooting_text.setter
    def troubleshooting_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "troubleshooting_text", value)


@pulumi.input_type
class ControlControlMappingSourceSourceKeywordArgs:
    def __init__(__self__, *,
                 keyword_input_type: pulumi.Input[str],
                 keyword_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] keyword_input_type: Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
        :param pulumi.Input[str] keyword_value: The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
        """
        ControlControlMappingSourceSourceKeywordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            keyword_input_type=keyword_input_type,
            keyword_value=keyword_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             keyword_input_type: Optional[pulumi.Input[str]] = None,
             keyword_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if keyword_input_type is None and 'keywordInputType' in kwargs:
            keyword_input_type = kwargs['keywordInputType']
        if keyword_input_type is None:
            raise TypeError("Missing 'keyword_input_type' argument")
        if keyword_value is None and 'keywordValue' in kwargs:
            keyword_value = kwargs['keywordValue']
        if keyword_value is None:
            raise TypeError("Missing 'keyword_value' argument")

        _setter("keyword_input_type", keyword_input_type)
        _setter("keyword_value", keyword_value)

    @property
    @pulumi.getter(name="keywordInputType")
    def keyword_input_type(self) -> pulumi.Input[str]:
        """
        Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
        """
        return pulumi.get(self, "keyword_input_type")

    @keyword_input_type.setter
    def keyword_input_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyword_input_type", value)

    @property
    @pulumi.getter(name="keywordValue")
    def keyword_value(self) -> pulumi.Input[str]:
        """
        The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
        """
        return pulumi.get(self, "keyword_value")

    @keyword_value.setter
    def keyword_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyword_value", value)


@pulumi.input_type
class FrameworkControlSetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 controls: Optional[pulumi.Input[Sequence[pulumi.Input['FrameworkControlSetControlArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the control set.
        :param pulumi.Input[Sequence[pulumi.Input['FrameworkControlSetControlArgs']]] controls: List of controls within the control set. See `controls` below.
        :param pulumi.Input[str] id: Unique identifier of the control.
        """
        FrameworkControlSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            controls=controls,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             controls: Optional[pulumi.Input[Sequence[pulumi.Input['FrameworkControlSetControlArgs']]]] = None,
             id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("name", name)
        if controls is not None:
            _setter("controls", controls)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the control set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FrameworkControlSetControlArgs']]]]:
        """
        List of controls within the control set. See `controls` below.
        """
        return pulumi.get(self, "controls")

    @controls.setter
    def controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FrameworkControlSetControlArgs']]]]):
        pulumi.set(self, "controls", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the control.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FrameworkControlSetControlArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: Unique identifier of the control.
        """
        FrameworkControlSetControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Unique identifier of the control.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GetControlControlMappingSourceArgs:
    def __init__(__self__, *,
                 source_description: str,
                 source_frequency: str,
                 source_id: str,
                 source_name: str,
                 source_set_up_option: str,
                 source_type: str,
                 troubleshooting_text: str,
                 source_keyword: Optional['GetControlControlMappingSourceSourceKeywordArgs'] = None):
        GetControlControlMappingSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_description=source_description,
            source_frequency=source_frequency,
            source_id=source_id,
            source_name=source_name,
            source_set_up_option=source_set_up_option,
            source_type=source_type,
            troubleshooting_text=troubleshooting_text,
            source_keyword=source_keyword,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_description: Optional[str] = None,
             source_frequency: Optional[str] = None,
             source_id: Optional[str] = None,
             source_name: Optional[str] = None,
             source_set_up_option: Optional[str] = None,
             source_type: Optional[str] = None,
             troubleshooting_text: Optional[str] = None,
             source_keyword: Optional['GetControlControlMappingSourceSourceKeywordArgs'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if source_description is None and 'sourceDescription' in kwargs:
            source_description = kwargs['sourceDescription']
        if source_description is None:
            raise TypeError("Missing 'source_description' argument")
        if source_frequency is None and 'sourceFrequency' in kwargs:
            source_frequency = kwargs['sourceFrequency']
        if source_frequency is None:
            raise TypeError("Missing 'source_frequency' argument")
        if source_id is None and 'sourceId' in kwargs:
            source_id = kwargs['sourceId']
        if source_id is None:
            raise TypeError("Missing 'source_id' argument")
        if source_name is None and 'sourceName' in kwargs:
            source_name = kwargs['sourceName']
        if source_name is None:
            raise TypeError("Missing 'source_name' argument")
        if source_set_up_option is None and 'sourceSetUpOption' in kwargs:
            source_set_up_option = kwargs['sourceSetUpOption']
        if source_set_up_option is None:
            raise TypeError("Missing 'source_set_up_option' argument")
        if source_type is None and 'sourceType' in kwargs:
            source_type = kwargs['sourceType']
        if source_type is None:
            raise TypeError("Missing 'source_type' argument")
        if troubleshooting_text is None and 'troubleshootingText' in kwargs:
            troubleshooting_text = kwargs['troubleshootingText']
        if troubleshooting_text is None:
            raise TypeError("Missing 'troubleshooting_text' argument")
        if source_keyword is None and 'sourceKeyword' in kwargs:
            source_keyword = kwargs['sourceKeyword']

        _setter("source_description", source_description)
        _setter("source_frequency", source_frequency)
        _setter("source_id", source_id)
        _setter("source_name", source_name)
        _setter("source_set_up_option", source_set_up_option)
        _setter("source_type", source_type)
        _setter("troubleshooting_text", troubleshooting_text)
        if source_keyword is not None:
            _setter("source_keyword", source_keyword)

    @property
    @pulumi.getter(name="sourceDescription")
    def source_description(self) -> str:
        return pulumi.get(self, "source_description")

    @source_description.setter
    def source_description(self, value: str):
        pulumi.set(self, "source_description", value)

    @property
    @pulumi.getter(name="sourceFrequency")
    def source_frequency(self) -> str:
        return pulumi.get(self, "source_frequency")

    @source_frequency.setter
    def source_frequency(self, value: str):
        pulumi.set(self, "source_frequency", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> str:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: str):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: str):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="sourceSetUpOption")
    def source_set_up_option(self) -> str:
        return pulumi.get(self, "source_set_up_option")

    @source_set_up_option.setter
    def source_set_up_option(self, value: str):
        pulumi.set(self, "source_set_up_option", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: str):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="troubleshootingText")
    def troubleshooting_text(self) -> str:
        return pulumi.get(self, "troubleshooting_text")

    @troubleshooting_text.setter
    def troubleshooting_text(self, value: str):
        pulumi.set(self, "troubleshooting_text", value)

    @property
    @pulumi.getter(name="sourceKeyword")
    def source_keyword(self) -> Optional['GetControlControlMappingSourceSourceKeywordArgs']:
        return pulumi.get(self, "source_keyword")

    @source_keyword.setter
    def source_keyword(self, value: Optional['GetControlControlMappingSourceSourceKeywordArgs']):
        pulumi.set(self, "source_keyword", value)


@pulumi.input_type
class GetControlControlMappingSourceSourceKeywordArgs:
    def __init__(__self__, *,
                 keyword_input_type: str,
                 keyword_value: str):
        GetControlControlMappingSourceSourceKeywordArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            keyword_input_type=keyword_input_type,
            keyword_value=keyword_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             keyword_input_type: Optional[str] = None,
             keyword_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if keyword_input_type is None and 'keywordInputType' in kwargs:
            keyword_input_type = kwargs['keywordInputType']
        if keyword_input_type is None:
            raise TypeError("Missing 'keyword_input_type' argument")
        if keyword_value is None and 'keywordValue' in kwargs:
            keyword_value = kwargs['keywordValue']
        if keyword_value is None:
            raise TypeError("Missing 'keyword_value' argument")

        _setter("keyword_input_type", keyword_input_type)
        _setter("keyword_value", keyword_value)

    @property
    @pulumi.getter(name="keywordInputType")
    def keyword_input_type(self) -> str:
        return pulumi.get(self, "keyword_input_type")

    @keyword_input_type.setter
    def keyword_input_type(self, value: str):
        pulumi.set(self, "keyword_input_type", value)

    @property
    @pulumi.getter(name="keywordValue")
    def keyword_value(self) -> str:
        return pulumi.get(self, "keyword_value")

    @keyword_value.setter
    def keyword_value(self, value: str):
        pulumi.set(self, "keyword_value", value)


@pulumi.input_type
class GetFrameworkControlSetArgs:
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 controls: Optional[Sequence['GetFrameworkControlSetControlArgs']] = None):
        """
        :param str name: Name of the framework.
        """
        GetFrameworkControlSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            controls=controls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             name: Optional[str] = None,
             controls: Optional[Sequence['GetFrameworkControlSetControlArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("id", id)
        _setter("name", name)
        if controls is not None:
            _setter("controls", controls)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the framework.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def controls(self) -> Optional[Sequence['GetFrameworkControlSetControlArgs']]:
        return pulumi.get(self, "controls")

    @controls.setter
    def controls(self, value: Optional[Sequence['GetFrameworkControlSetControlArgs']]):
        pulumi.set(self, "controls", value)


@pulumi.input_type
class GetFrameworkControlSetControlArgs:
    def __init__(__self__, *,
                 id: str):
        GetFrameworkControlSetControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)


