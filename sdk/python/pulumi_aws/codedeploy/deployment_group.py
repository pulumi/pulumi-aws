# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class DeploymentGroup(pulumi.CustomResource):
    """
    Provides a CodeDeploy Deployment Group for a CodeDeploy Application
    """
    def __init__(__self__, __name__, __opts__=None, alarm_configuration=None, app_name=None, auto_rollback_configuration=None, autoscaling_groups=None, blue_green_deployment_config=None, deployment_config_name=None, deployment_group_name=None, deployment_style=None, ec2_tag_filters=None, ec2_tag_sets=None, load_balancer_info=None, on_premises_instance_tag_filters=None, service_role_arn=None, trigger_configurations=None):
        """Create a DeploymentGroup resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['alarmConfiguration'] = alarm_configuration

        if not app_name:
            raise TypeError('Missing required property app_name')
        __props__['appName'] = app_name

        __props__['autoRollbackConfiguration'] = auto_rollback_configuration

        __props__['autoscalingGroups'] = autoscaling_groups

        __props__['blueGreenDeploymentConfig'] = blue_green_deployment_config

        __props__['deploymentConfigName'] = deployment_config_name

        if not deployment_group_name:
            raise TypeError('Missing required property deployment_group_name')
        __props__['deploymentGroupName'] = deployment_group_name

        __props__['deploymentStyle'] = deployment_style

        __props__['ec2TagFilters'] = ec2_tag_filters

        __props__['ec2TagSets'] = ec2_tag_sets

        __props__['loadBalancerInfo'] = load_balancer_info

        __props__['onPremisesInstanceTagFilters'] = on_premises_instance_tag_filters

        if not service_role_arn:
            raise TypeError('Missing required property service_role_arn')
        __props__['serviceRoleArn'] = service_role_arn

        __props__['triggerConfigurations'] = trigger_configurations

        super(DeploymentGroup, __self__).__init__(
            'aws:codedeploy/deploymentGroup:DeploymentGroup',
            __name__,
            __props__,
            __opts__)

