# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DeploymentConfigMinimumHealthyHosts',
    'DeploymentConfigTrafficRoutingConfig',
    'DeploymentConfigTrafficRoutingConfigTimeBasedCanary',
    'DeploymentConfigTrafficRoutingConfigTimeBasedLinear',
    'DeploymentGroupAlarmConfiguration',
    'DeploymentGroupAutoRollbackConfiguration',
    'DeploymentGroupBlueGreenDeploymentConfig',
    'DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption',
    'DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption',
    'DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess',
    'DeploymentGroupDeploymentStyle',
    'DeploymentGroupEc2TagFilter',
    'DeploymentGroupEc2TagSet',
    'DeploymentGroupEc2TagSetEc2TagFilter',
    'DeploymentGroupEcsService',
    'DeploymentGroupLoadBalancerInfo',
    'DeploymentGroupLoadBalancerInfoElbInfo',
    'DeploymentGroupLoadBalancerInfoTargetGroupInfo',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfo',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup',
    'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute',
    'DeploymentGroupOnPremisesInstanceTagFilter',
    'DeploymentGroupTriggerConfiguration',
]

@pulumi.output_type
class DeploymentConfigMinimumHealthyHosts(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[int] = None):
        """
        :param str type: The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
        :param int value: The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
               a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
               deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
               When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
        """
        DeploymentConfigMinimumHealthyHosts._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
        a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
        deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
        When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentConfigTrafficRoutingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeBasedCanary":
            suggest = "time_based_canary"
        elif key == "timeBasedLinear":
            suggest = "time_based_linear"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigTrafficRoutingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigTrafficRoutingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigTrafficRoutingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_based_canary: Optional['outputs.DeploymentConfigTrafficRoutingConfigTimeBasedCanary'] = None,
                 time_based_linear: Optional['outputs.DeploymentConfigTrafficRoutingConfigTimeBasedLinear'] = None,
                 type: Optional[str] = None):
        """
        :param 'DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs' time_based_canary: The time based canary configuration information. If `type` is `TimeBasedLinear`, use `time_based_linear` instead.
        :param 'DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs' time_based_linear: The time based linear configuration information. If `type` is `TimeBasedCanary`, use `time_based_canary` instead.
        :param str type: Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
        """
        DeploymentConfigTrafficRoutingConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            time_based_canary=time_based_canary,
            time_based_linear=time_based_linear,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             time_based_canary: Optional['outputs.DeploymentConfigTrafficRoutingConfigTimeBasedCanary'] = None,
             time_based_linear: Optional['outputs.DeploymentConfigTrafficRoutingConfigTimeBasedLinear'] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if time_based_canary is None and 'timeBasedCanary' in kwargs:
            time_based_canary = kwargs['timeBasedCanary']
        if time_based_linear is None and 'timeBasedLinear' in kwargs:
            time_based_linear = kwargs['timeBasedLinear']

        if time_based_canary is not None:
            _setter("time_based_canary", time_based_canary)
        if time_based_linear is not None:
            _setter("time_based_linear", time_based_linear)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="timeBasedCanary")
    def time_based_canary(self) -> Optional['outputs.DeploymentConfigTrafficRoutingConfigTimeBasedCanary']:
        """
        The time based canary configuration information. If `type` is `TimeBasedLinear`, use `time_based_linear` instead.
        """
        return pulumi.get(self, "time_based_canary")

    @property
    @pulumi.getter(name="timeBasedLinear")
    def time_based_linear(self) -> Optional['outputs.DeploymentConfigTrafficRoutingConfigTimeBasedLinear']:
        """
        The time based linear configuration information. If `type` is `TimeBasedCanary`, use `time_based_canary` instead.
        """
        return pulumi.get(self, "time_based_linear")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentConfigTrafficRoutingConfigTimeBasedCanary(dict):
    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 percentage: Optional[int] = None):
        """
        :param int interval: The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
        :param int percentage: The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
        """
        DeploymentConfigTrafficRoutingConfigTimeBasedCanary._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interval=interval,
            percentage=percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interval: Optional[int] = None,
             percentage: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if interval is not None:
            _setter("interval", interval)
        if percentage is not None:
            _setter("percentage", percentage)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        """
        The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class DeploymentConfigTrafficRoutingConfigTimeBasedLinear(dict):
    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 percentage: Optional[int] = None):
        """
        :param int interval: The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
        :param int percentage: The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
        """
        DeploymentConfigTrafficRoutingConfigTimeBasedLinear._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interval=interval,
            percentage=percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interval: Optional[int] = None,
             percentage: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if interval is not None:
            _setter("interval", interval)
        if percentage is not None:
            _setter("percentage", percentage)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        """
        The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class DeploymentGroupAlarmConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignorePollAlarmFailure":
            suggest = "ignore_poll_alarm_failure"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupAlarmConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupAlarmConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupAlarmConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarms: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 ignore_poll_alarm_failure: Optional[bool] = None):
        """
        :param Sequence[str] alarms: A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
        :param bool enabled: Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
        :param bool ignore_poll_alarm_failure: Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
        """
        DeploymentGroupAlarmConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alarms=alarms,
            enabled=enabled,
            ignore_poll_alarm_failure=ignore_poll_alarm_failure,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alarms: Optional[Sequence[str]] = None,
             enabled: Optional[bool] = None,
             ignore_poll_alarm_failure: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ignore_poll_alarm_failure is None and 'ignorePollAlarmFailure' in kwargs:
            ignore_poll_alarm_failure = kwargs['ignorePollAlarmFailure']

        if alarms is not None:
            _setter("alarms", alarms)
        if enabled is not None:
            _setter("enabled", enabled)
        if ignore_poll_alarm_failure is not None:
            _setter("ignore_poll_alarm_failure", ignore_poll_alarm_failure)

    @property
    @pulumi.getter
    def alarms(self) -> Optional[Sequence[str]]:
        """
        A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
        """
        return pulumi.get(self, "alarms")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ignorePollAlarmFailure")
    def ignore_poll_alarm_failure(self) -> Optional[bool]:
        """
        Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
        """
        return pulumi.get(self, "ignore_poll_alarm_failure")


@pulumi.output_type
class DeploymentGroupAutoRollbackConfiguration(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 events: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        :param Sequence[str] events: The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE`, `DEPLOYMENT_STOP_ON_ALARM` and `DEPLOYMENT_STOP_ON_REQUEST`.
               
               _Only one `auto_rollback_configuration` is allowed_.
        """
        DeploymentGroupAutoRollbackConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            events=events,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             events: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)
        if events is not None:
            _setter("events", events)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        """
        The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE`, `DEPLOYMENT_STOP_ON_ALARM` and `DEPLOYMENT_STOP_ON_REQUEST`.

        _Only one `auto_rollback_configuration` is allowed_.
        """
        return pulumi.get(self, "events")


@pulumi.output_type
class DeploymentGroupBlueGreenDeploymentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentReadyOption":
            suggest = "deployment_ready_option"
        elif key == "greenFleetProvisioningOption":
            suggest = "green_fleet_provisioning_option"
        elif key == "terminateBlueInstancesOnDeploymentSuccess":
            suggest = "terminate_blue_instances_on_deployment_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupBlueGreenDeploymentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupBlueGreenDeploymentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupBlueGreenDeploymentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_ready_option: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption'] = None,
                 green_fleet_provisioning_option: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption'] = None,
                 terminate_blue_instances_on_deployment_success: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess'] = None):
        """
        :param 'DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs' deployment_ready_option: Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
        :param 'DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs' green_fleet_provisioning_option: Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
        :param 'DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs' terminate_blue_instances_on_deployment_success: Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
               
               _Only one `blue_green_deployment_config` is allowed_.
        """
        DeploymentGroupBlueGreenDeploymentConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deployment_ready_option=deployment_ready_option,
            green_fleet_provisioning_option=green_fleet_provisioning_option,
            terminate_blue_instances_on_deployment_success=terminate_blue_instances_on_deployment_success,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deployment_ready_option: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption'] = None,
             green_fleet_provisioning_option: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption'] = None,
             terminate_blue_instances_on_deployment_success: Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if deployment_ready_option is None and 'deploymentReadyOption' in kwargs:
            deployment_ready_option = kwargs['deploymentReadyOption']
        if green_fleet_provisioning_option is None and 'greenFleetProvisioningOption' in kwargs:
            green_fleet_provisioning_option = kwargs['greenFleetProvisioningOption']
        if terminate_blue_instances_on_deployment_success is None and 'terminateBlueInstancesOnDeploymentSuccess' in kwargs:
            terminate_blue_instances_on_deployment_success = kwargs['terminateBlueInstancesOnDeploymentSuccess']

        if deployment_ready_option is not None:
            _setter("deployment_ready_option", deployment_ready_option)
        if green_fleet_provisioning_option is not None:
            _setter("green_fleet_provisioning_option", green_fleet_provisioning_option)
        if terminate_blue_instances_on_deployment_success is not None:
            _setter("terminate_blue_instances_on_deployment_success", terminate_blue_instances_on_deployment_success)

    @property
    @pulumi.getter(name="deploymentReadyOption")
    def deployment_ready_option(self) -> Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption']:
        """
        Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
        """
        return pulumi.get(self, "deployment_ready_option")

    @property
    @pulumi.getter(name="greenFleetProvisioningOption")
    def green_fleet_provisioning_option(self) -> Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption']:
        """
        Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
        """
        return pulumi.get(self, "green_fleet_provisioning_option")

    @property
    @pulumi.getter(name="terminateBlueInstancesOnDeploymentSuccess")
    def terminate_blue_instances_on_deployment_success(self) -> Optional['outputs.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess']:
        """
        Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).

        _Only one `blue_green_deployment_config` is allowed_.
        """
        return pulumi.get(self, "terminate_blue_instances_on_deployment_success")


@pulumi.output_type
class DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionOnTimeout":
            suggest = "action_on_timeout"
        elif key == "waitTimeInMinutes":
            suggest = "wait_time_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_on_timeout: Optional[str] = None,
                 wait_time_in_minutes: Optional[int] = None):
        """
        :param str action_on_timeout: When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
        :param int wait_time_in_minutes: The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
        """
        DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_on_timeout=action_on_timeout,
            wait_time_in_minutes=wait_time_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_on_timeout: Optional[str] = None,
             wait_time_in_minutes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if action_on_timeout is None and 'actionOnTimeout' in kwargs:
            action_on_timeout = kwargs['actionOnTimeout']
        if wait_time_in_minutes is None and 'waitTimeInMinutes' in kwargs:
            wait_time_in_minutes = kwargs['waitTimeInMinutes']

        if action_on_timeout is not None:
            _setter("action_on_timeout", action_on_timeout)
        if wait_time_in_minutes is not None:
            _setter("wait_time_in_minutes", wait_time_in_minutes)

    @property
    @pulumi.getter(name="actionOnTimeout")
    def action_on_timeout(self) -> Optional[str]:
        """
        When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
        """
        return pulumi.get(self, "action_on_timeout")

    @property
    @pulumi.getter(name="waitTimeInMinutes")
    def wait_time_in_minutes(self) -> Optional[int]:
        """
        The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
        """
        return pulumi.get(self, "wait_time_in_minutes")


@pulumi.output_type
class DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None):
        """
        :param str action: The method used to add instances to a replacement environment.
        """
        DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if action is not None:
            _setter("action", action)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The method used to add instances to a replacement environment.
        """
        return pulumi.get(self, "action")


@pulumi.output_type
class DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "terminationWaitTimeInMinutes":
            suggest = "termination_wait_time_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 termination_wait_time_in_minutes: Optional[int] = None):
        """
        :param str action: The action to take on instances in the original environment after a successful blue/green deployment.
        :param int termination_wait_time_in_minutes: The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
        """
        DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            termination_wait_time_in_minutes=termination_wait_time_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             termination_wait_time_in_minutes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if termination_wait_time_in_minutes is None and 'terminationWaitTimeInMinutes' in kwargs:
            termination_wait_time_in_minutes = kwargs['terminationWaitTimeInMinutes']

        if action is not None:
            _setter("action", action)
        if termination_wait_time_in_minutes is not None:
            _setter("termination_wait_time_in_minutes", termination_wait_time_in_minutes)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The action to take on instances in the original environment after a successful blue/green deployment.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="terminationWaitTimeInMinutes")
    def termination_wait_time_in_minutes(self) -> Optional[int]:
        """
        The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
        """
        return pulumi.get(self, "termination_wait_time_in_minutes")


@pulumi.output_type
class DeploymentGroupDeploymentStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentOption":
            suggest = "deployment_option"
        elif key == "deploymentType":
            suggest = "deployment_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupDeploymentStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupDeploymentStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupDeploymentStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_option: Optional[str] = None,
                 deployment_type: Optional[str] = None):
        """
        :param str deployment_option: Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
        :param str deployment_type: Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
               
               _Only one `deployment_style` is allowed_.
        """
        DeploymentGroupDeploymentStyle._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deployment_option=deployment_option,
            deployment_type=deployment_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deployment_option: Optional[str] = None,
             deployment_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if deployment_option is None and 'deploymentOption' in kwargs:
            deployment_option = kwargs['deploymentOption']
        if deployment_type is None and 'deploymentType' in kwargs:
            deployment_type = kwargs['deploymentType']

        if deployment_option is not None:
            _setter("deployment_option", deployment_option)
        if deployment_type is not None:
            _setter("deployment_type", deployment_type)

    @property
    @pulumi.getter(name="deploymentOption")
    def deployment_option(self) -> Optional[str]:
        """
        Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
        """
        return pulumi.get(self, "deployment_option")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        """
        Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.

        _Only one `deployment_style` is allowed_.
        """
        return pulumi.get(self, "deployment_type")


@pulumi.output_type
class DeploymentGroupEc2TagFilter(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The key of the tag filter.
        :param str type: The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        :param str value: The value of the tag filter.
               
               Multiple occurrences of `ec2_tag_filter` are allowed, where any instance that matches to at least one of the tag filters is selected.
        """
        DeploymentGroupEc2TagFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the tag filter.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the tag filter.

        Multiple occurrences of `ec2_tag_filter` are allowed, where any instance that matches to at least one of the tag filters is selected.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentGroupEc2TagSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ec2TagFilters":
            suggest = "ec2_tag_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupEc2TagSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupEc2TagSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupEc2TagSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ec2_tag_filters: Optional[Sequence['outputs.DeploymentGroupEc2TagSetEc2TagFilter']] = None):
        """
        :param Sequence['DeploymentGroupEc2TagSetEc2TagFilterArgs'] ec2_tag_filters: Tag filters associated with the deployment group. See the AWS docs for details.
        """
        DeploymentGroupEc2TagSet._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ec2_tag_filters=ec2_tag_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ec2_tag_filters: Optional[Sequence['outputs.DeploymentGroupEc2TagSetEc2TagFilter']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ec2_tag_filters is None and 'ec2TagFilters' in kwargs:
            ec2_tag_filters = kwargs['ec2TagFilters']

        if ec2_tag_filters is not None:
            _setter("ec2_tag_filters", ec2_tag_filters)

    @property
    @pulumi.getter(name="ec2TagFilters")
    def ec2_tag_filters(self) -> Optional[Sequence['outputs.DeploymentGroupEc2TagSetEc2TagFilter']]:
        """
        Tag filters associated with the deployment group. See the AWS docs for details.
        """
        return pulumi.get(self, "ec2_tag_filters")


@pulumi.output_type
class DeploymentGroupEc2TagSetEc2TagFilter(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The key of the tag filter.
        :param str type: The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        :param str value: The value of the tag filter.
               
               Multiple occurrences of `ec2_tag_filter` are allowed, where any instance that matches to at least one of the tag filters is selected.
        """
        DeploymentGroupEc2TagSetEc2TagFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the tag filter.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the tag filter.

        Multiple occurrences of `ec2_tag_filter` are allowed, where any instance that matches to at least one of the tag filters is selected.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentGroupEcsService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupEcsService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupEcsService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupEcsService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: str,
                 service_name: str):
        """
        :param str cluster_name: The name of the ECS cluster.
        :param str service_name: The name of the ECS service.
        """
        DeploymentGroupEcsService._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_name=cluster_name,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_name: Optional[str] = None,
             service_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cluster_name is None and 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if cluster_name is None:
            raise TypeError("Missing 'cluster_name' argument")
        if service_name is None and 'serviceName' in kwargs:
            service_name = kwargs['serviceName']
        if service_name is None:
            raise TypeError("Missing 'service_name' argument")

        _setter("cluster_name", cluster_name)
        _setter("service_name", service_name)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the ECS cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the ECS service.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class DeploymentGroupLoadBalancerInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elbInfos":
            suggest = "elb_infos"
        elif key == "targetGroupInfos":
            suggest = "target_group_infos"
        elif key == "targetGroupPairInfo":
            suggest = "target_group_pair_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupLoadBalancerInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupLoadBalancerInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupLoadBalancerInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 elb_infos: Optional[Sequence['outputs.DeploymentGroupLoadBalancerInfoElbInfo']] = None,
                 target_group_infos: Optional[Sequence['outputs.DeploymentGroupLoadBalancerInfoTargetGroupInfo']] = None,
                 target_group_pair_info: Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo'] = None):
        """
        :param Sequence['DeploymentGroupLoadBalancerInfoElbInfoArgs'] elb_infos: The Classic Elastic Load Balancer to use in a deployment. Conflicts with `target_group_info` and `target_group_pair_info`.
        :param Sequence['DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs'] target_group_infos: The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elb_info` and `target_group_pair_info`.
        :param 'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs' target_group_pair_info: The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elb_info` and `target_group_info`.
        """
        DeploymentGroupLoadBalancerInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elb_infos=elb_infos,
            target_group_infos=target_group_infos,
            target_group_pair_info=target_group_pair_info,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elb_infos: Optional[Sequence['outputs.DeploymentGroupLoadBalancerInfoElbInfo']] = None,
             target_group_infos: Optional[Sequence['outputs.DeploymentGroupLoadBalancerInfoTargetGroupInfo']] = None,
             target_group_pair_info: Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if elb_infos is None and 'elbInfos' in kwargs:
            elb_infos = kwargs['elbInfos']
        if target_group_infos is None and 'targetGroupInfos' in kwargs:
            target_group_infos = kwargs['targetGroupInfos']
        if target_group_pair_info is None and 'targetGroupPairInfo' in kwargs:
            target_group_pair_info = kwargs['targetGroupPairInfo']

        if elb_infos is not None:
            _setter("elb_infos", elb_infos)
        if target_group_infos is not None:
            _setter("target_group_infos", target_group_infos)
        if target_group_pair_info is not None:
            _setter("target_group_pair_info", target_group_pair_info)

    @property
    @pulumi.getter(name="elbInfos")
    def elb_infos(self) -> Optional[Sequence['outputs.DeploymentGroupLoadBalancerInfoElbInfo']]:
        """
        The Classic Elastic Load Balancer to use in a deployment. Conflicts with `target_group_info` and `target_group_pair_info`.
        """
        return pulumi.get(self, "elb_infos")

    @property
    @pulumi.getter(name="targetGroupInfos")
    def target_group_infos(self) -> Optional[Sequence['outputs.DeploymentGroupLoadBalancerInfoTargetGroupInfo']]:
        """
        The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elb_info` and `target_group_pair_info`.
        """
        return pulumi.get(self, "target_group_infos")

    @property
    @pulumi.getter(name="targetGroupPairInfo")
    def target_group_pair_info(self) -> Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo']:
        """
        The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elb_info` and `target_group_info`.
        """
        return pulumi.get(self, "target_group_pair_info")


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoElbInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
        """
        DeploymentGroupLoadBalancerInfoElbInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupInfo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
        """
        DeploymentGroupLoadBalancerInfoTargetGroupInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prodTrafficRoute":
            suggest = "prod_traffic_route"
        elif key == "targetGroups":
            suggest = "target_groups"
        elif key == "testTrafficRoute":
            suggest = "test_traffic_route"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupLoadBalancerInfoTargetGroupPairInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prod_traffic_route: 'outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute',
                 target_groups: Sequence['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup'],
                 test_traffic_route: Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute'] = None):
        """
        :param 'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs' prod_traffic_route: Configuration block for the production traffic route (documented below).
        :param Sequence['DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs'] target_groups: Configuration blocks for a target group within a target group pair (documented below).
        :param 'DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs' test_traffic_route: Configuration block for the test traffic route (documented below).
        """
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prod_traffic_route=prod_traffic_route,
            target_groups=target_groups,
            test_traffic_route=test_traffic_route,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prod_traffic_route: Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute'] = None,
             target_groups: Optional[Sequence['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup']] = None,
             test_traffic_route: Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if prod_traffic_route is None and 'prodTrafficRoute' in kwargs:
            prod_traffic_route = kwargs['prodTrafficRoute']
        if prod_traffic_route is None:
            raise TypeError("Missing 'prod_traffic_route' argument")
        if target_groups is None and 'targetGroups' in kwargs:
            target_groups = kwargs['targetGroups']
        if target_groups is None:
            raise TypeError("Missing 'target_groups' argument")
        if test_traffic_route is None and 'testTrafficRoute' in kwargs:
            test_traffic_route = kwargs['testTrafficRoute']

        _setter("prod_traffic_route", prod_traffic_route)
        _setter("target_groups", target_groups)
        if test_traffic_route is not None:
            _setter("test_traffic_route", test_traffic_route)

    @property
    @pulumi.getter(name="prodTrafficRoute")
    def prod_traffic_route(self) -> 'outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute':
        """
        Configuration block for the production traffic route (documented below).
        """
        return pulumi.get(self, "prod_traffic_route")

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Sequence['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup']:
        """
        Configuration blocks for a target group within a target group pair (documented below).
        """
        return pulumi.get(self, "target_groups")

    @property
    @pulumi.getter(name="testTrafficRoute")
    def test_traffic_route(self) -> Optional['outputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute']:
        """
        Configuration block for the test traffic route (documented below).
        """
        return pulumi.get(self, "test_traffic_route")


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerArns":
            suggest = "listener_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_arns: Sequence[str]):
        """
        :param Sequence[str] listener_arns: List of Amazon Resource Names (ARNs) of the load balancer listeners. Must contain exactly one listener ARN.
        """
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            listener_arns=listener_arns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             listener_arns: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if listener_arns is None and 'listenerArns' in kwargs:
            listener_arns = kwargs['listenerArns']
        if listener_arns is None:
            raise TypeError("Missing 'listener_arns' argument")

        _setter("listener_arns", listener_arns)

    @property
    @pulumi.getter(name="listenerArns")
    def listener_arns(self) -> Sequence[str]:
        """
        List of Amazon Resource Names (ARNs) of the load balancer listeners. Must contain exactly one listener ARN.
        """
        return pulumi.get(self, "listener_arns")


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Name of the target group.
        """
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the target group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerArns":
            suggest = "listener_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_arns: Sequence[str]):
        """
        :param Sequence[str] listener_arns: List of Amazon Resource Names (ARNs) of the load balancer listeners.
        """
        DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            listener_arns=listener_arns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             listener_arns: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if listener_arns is None and 'listenerArns' in kwargs:
            listener_arns = kwargs['listenerArns']
        if listener_arns is None:
            raise TypeError("Missing 'listener_arns' argument")

        _setter("listener_arns", listener_arns)

    @property
    @pulumi.getter(name="listenerArns")
    def listener_arns(self) -> Sequence[str]:
        """
        List of Amazon Resource Names (ARNs) of the load balancer listeners.
        """
        return pulumi.get(self, "listener_arns")


@pulumi.output_type
class DeploymentGroupOnPremisesInstanceTagFilter(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The key of the tag filter.
        :param str type: The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        :param str value: The value of the tag filter.
        """
        DeploymentGroupOnPremisesInstanceTagFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the tag filter.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the tag filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentGroupTriggerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerEvents":
            suggest = "trigger_events"
        elif key == "triggerName":
            suggest = "trigger_name"
        elif key == "triggerTargetArn":
            suggest = "trigger_target_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentGroupTriggerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentGroupTriggerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentGroupTriggerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trigger_events: Sequence[str],
                 trigger_name: str,
                 trigger_target_arn: str):
        """
        :param Sequence[str] trigger_events: The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
        :param str trigger_name: The name of the notification trigger.
        :param str trigger_target_arn: The ARN of the SNS topic through which notifications are sent.
        """
        DeploymentGroupTriggerConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trigger_events=trigger_events,
            trigger_name=trigger_name,
            trigger_target_arn=trigger_target_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trigger_events: Optional[Sequence[str]] = None,
             trigger_name: Optional[str] = None,
             trigger_target_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if trigger_events is None and 'triggerEvents' in kwargs:
            trigger_events = kwargs['triggerEvents']
        if trigger_events is None:
            raise TypeError("Missing 'trigger_events' argument")
        if trigger_name is None and 'triggerName' in kwargs:
            trigger_name = kwargs['triggerName']
        if trigger_name is None:
            raise TypeError("Missing 'trigger_name' argument")
        if trigger_target_arn is None and 'triggerTargetArn' in kwargs:
            trigger_target_arn = kwargs['triggerTargetArn']
        if trigger_target_arn is None:
            raise TypeError("Missing 'trigger_target_arn' argument")

        _setter("trigger_events", trigger_events)
        _setter("trigger_name", trigger_name)
        _setter("trigger_target_arn", trigger_target_arn)

    @property
    @pulumi.getter(name="triggerEvents")
    def trigger_events(self) -> Sequence[str]:
        """
        The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
        """
        return pulumi.get(self, "trigger_events")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> str:
        """
        The name of the notification trigger.
        """
        return pulumi.get(self, "trigger_name")

    @property
    @pulumi.getter(name="triggerTargetArn")
    def trigger_target_arn(self) -> str:
        """
        The ARN of the SNS topic through which notifications are sent.
        """
        return pulumi.get(self, "trigger_target_arn")


