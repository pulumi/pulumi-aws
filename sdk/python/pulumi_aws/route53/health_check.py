# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['HealthCheckArgs', 'HealthCheck']

@pulumi.input_type
class HealthCheckArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 child_health_threshold: Optional[pulumi.Input[int]] = None,
                 child_healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloudwatch_alarm_name: Optional[pulumi.Input[str]] = None,
                 cloudwatch_alarm_region: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 enable_sni: Optional[pulumi.Input[bool]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 insufficient_data_health_status: Optional[pulumi.Input[str]] = None,
                 invert_healthcheck: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 measure_latency: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 reference_name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_interval: Optional[pulumi.Input[int]] = None,
                 resource_path: Optional[pulumi.Input[str]] = None,
                 routing_control_arn: Optional[pulumi.Input[str]] = None,
                 search_string: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a HealthCheck resource.
        """
        pulumi.set(__self__, "type", type)
        if child_health_threshold is not None:
            pulumi.set(__self__, "child_health_threshold", child_health_threshold)
        if child_healthchecks is not None:
            pulumi.set(__self__, "child_healthchecks", child_healthchecks)
        if cloudwatch_alarm_name is not None:
            pulumi.set(__self__, "cloudwatch_alarm_name", cloudwatch_alarm_name)
        if cloudwatch_alarm_region is not None:
            pulumi.set(__self__, "cloudwatch_alarm_region", cloudwatch_alarm_region)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enable_sni is not None:
            pulumi.set(__self__, "enable_sni", enable_sni)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if insufficient_data_health_status is not None:
            pulumi.set(__self__, "insufficient_data_health_status", insufficient_data_health_status)
        if invert_healthcheck is not None:
            pulumi.set(__self__, "invert_healthcheck", invert_healthcheck)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if measure_latency is not None:
            pulumi.set(__self__, "measure_latency", measure_latency)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if reference_name is not None:
            pulumi.set(__self__, "reference_name", reference_name)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if request_interval is not None:
            pulumi.set(__self__, "request_interval", request_interval)
        if resource_path is not None:
            pulumi.set(__self__, "resource_path", resource_path)
        if routing_control_arn is not None:
            pulumi.set(__self__, "routing_control_arn", routing_control_arn)
        if search_string is not None:
            pulumi.set(__self__, "search_string", search_string)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="childHealthThreshold")
    def child_health_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "child_health_threshold")

    @child_health_threshold.setter
    def child_health_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "child_health_threshold", value)

    @property
    @pulumi.getter(name="childHealthchecks")
    def child_healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "child_healthchecks")

    @child_healthchecks.setter
    def child_healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "child_healthchecks", value)

    @property
    @pulumi.getter(name="cloudwatchAlarmName")
    def cloudwatch_alarm_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatch_alarm_name")

    @cloudwatch_alarm_name.setter
    def cloudwatch_alarm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatch_alarm_name", value)

    @property
    @pulumi.getter(name="cloudwatchAlarmRegion")
    def cloudwatch_alarm_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatch_alarm_region")

    @cloudwatch_alarm_region.setter
    def cloudwatch_alarm_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatch_alarm_region", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="enableSni")
    def enable_sni(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_sni")

    @enable_sni.setter
    def enable_sni(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_sni", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="insufficientDataHealthStatus")
    def insufficient_data_health_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "insufficient_data_health_status")

    @insufficient_data_health_status.setter
    def insufficient_data_health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insufficient_data_health_status", value)

    @property
    @pulumi.getter(name="invertHealthcheck")
    def invert_healthcheck(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invert_healthcheck")

    @invert_healthcheck.setter
    def invert_healthcheck(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invert_healthcheck", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="measureLatency")
    def measure_latency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "measure_latency")

    @measure_latency.setter
    def measure_latency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "measure_latency", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="referenceName")
    def reference_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_name")

    @reference_name.setter
    def reference_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_name", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="requestInterval")
    def request_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_interval")

    @request_interval.setter
    def request_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_interval", value)

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_path")

    @resource_path.setter
    def resource_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_path", value)

    @property
    @pulumi.getter(name="routingControlArn")
    def routing_control_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routing_control_arn")

    @routing_control_arn.setter
    def routing_control_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_control_arn", value)

    @property
    @pulumi.getter(name="searchString")
    def search_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_string")

    @search_string.setter
    def search_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_string", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _HealthCheckState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 child_health_threshold: Optional[pulumi.Input[int]] = None,
                 child_healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloudwatch_alarm_name: Optional[pulumi.Input[str]] = None,
                 cloudwatch_alarm_region: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 enable_sni: Optional[pulumi.Input[bool]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 insufficient_data_health_status: Optional[pulumi.Input[str]] = None,
                 invert_healthcheck: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 measure_latency: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 reference_name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_interval: Optional[pulumi.Input[int]] = None,
                 resource_path: Optional[pulumi.Input[str]] = None,
                 routing_control_arn: Optional[pulumi.Input[str]] = None,
                 search_string: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering HealthCheck resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if child_health_threshold is not None:
            pulumi.set(__self__, "child_health_threshold", child_health_threshold)
        if child_healthchecks is not None:
            pulumi.set(__self__, "child_healthchecks", child_healthchecks)
        if cloudwatch_alarm_name is not None:
            pulumi.set(__self__, "cloudwatch_alarm_name", cloudwatch_alarm_name)
        if cloudwatch_alarm_region is not None:
            pulumi.set(__self__, "cloudwatch_alarm_region", cloudwatch_alarm_region)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enable_sni is not None:
            pulumi.set(__self__, "enable_sni", enable_sni)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if insufficient_data_health_status is not None:
            pulumi.set(__self__, "insufficient_data_health_status", insufficient_data_health_status)
        if invert_healthcheck is not None:
            pulumi.set(__self__, "invert_healthcheck", invert_healthcheck)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if measure_latency is not None:
            pulumi.set(__self__, "measure_latency", measure_latency)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if reference_name is not None:
            pulumi.set(__self__, "reference_name", reference_name)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if request_interval is not None:
            pulumi.set(__self__, "request_interval", request_interval)
        if resource_path is not None:
            pulumi.set(__self__, "resource_path", resource_path)
        if routing_control_arn is not None:
            pulumi.set(__self__, "routing_control_arn", routing_control_arn)
        if search_string is not None:
            pulumi.set(__self__, "search_string", search_string)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="childHealthThreshold")
    def child_health_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "child_health_threshold")

    @child_health_threshold.setter
    def child_health_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "child_health_threshold", value)

    @property
    @pulumi.getter(name="childHealthchecks")
    def child_healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "child_healthchecks")

    @child_healthchecks.setter
    def child_healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "child_healthchecks", value)

    @property
    @pulumi.getter(name="cloudwatchAlarmName")
    def cloudwatch_alarm_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatch_alarm_name")

    @cloudwatch_alarm_name.setter
    def cloudwatch_alarm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatch_alarm_name", value)

    @property
    @pulumi.getter(name="cloudwatchAlarmRegion")
    def cloudwatch_alarm_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatch_alarm_region")

    @cloudwatch_alarm_region.setter
    def cloudwatch_alarm_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatch_alarm_region", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="enableSni")
    def enable_sni(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_sni")

    @enable_sni.setter
    def enable_sni(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_sni", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="insufficientDataHealthStatus")
    def insufficient_data_health_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "insufficient_data_health_status")

    @insufficient_data_health_status.setter
    def insufficient_data_health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insufficient_data_health_status", value)

    @property
    @pulumi.getter(name="invertHealthcheck")
    def invert_healthcheck(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invert_healthcheck")

    @invert_healthcheck.setter
    def invert_healthcheck(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invert_healthcheck", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="measureLatency")
    def measure_latency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "measure_latency")

    @measure_latency.setter
    def measure_latency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "measure_latency", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="referenceName")
    def reference_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_name")

    @reference_name.setter
    def reference_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_name", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="requestInterval")
    def request_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_interval")

    @request_interval.setter
    def request_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_interval", value)

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_path")

    @resource_path.setter
    def resource_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_path", value)

    @property
    @pulumi.getter(name="routingControlArn")
    def routing_control_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routing_control_arn")

    @routing_control_arn.setter
    def routing_control_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_control_arn", value)

    @property
    @pulumi.getter(name="searchString")
    def search_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_string")

    @search_string.setter
    def search_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_string", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class HealthCheck(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 child_health_threshold: Optional[pulumi.Input[int]] = None,
                 child_healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloudwatch_alarm_name: Optional[pulumi.Input[str]] = None,
                 cloudwatch_alarm_region: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 enable_sni: Optional[pulumi.Input[bool]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 insufficient_data_health_status: Optional[pulumi.Input[str]] = None,
                 invert_healthcheck: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 measure_latency: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 reference_name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_interval: Optional[pulumi.Input[int]] = None,
                 resource_path: Optional[pulumi.Input[str]] = None,
                 routing_control_arn: Optional[pulumi.Input[str]] = None,
                 search_string: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a HealthCheck resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HealthCheckArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HealthCheck resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HealthCheckArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HealthCheckArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 child_health_threshold: Optional[pulumi.Input[int]] = None,
                 child_healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloudwatch_alarm_name: Optional[pulumi.Input[str]] = None,
                 cloudwatch_alarm_region: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 enable_sni: Optional[pulumi.Input[bool]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 insufficient_data_health_status: Optional[pulumi.Input[str]] = None,
                 invert_healthcheck: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 measure_latency: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 reference_name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_interval: Optional[pulumi.Input[int]] = None,
                 resource_path: Optional[pulumi.Input[str]] = None,
                 routing_control_arn: Optional[pulumi.Input[str]] = None,
                 search_string: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HealthCheckArgs.__new__(HealthCheckArgs)

            __props__.__dict__["child_health_threshold"] = child_health_threshold
            __props__.__dict__["child_healthchecks"] = child_healthchecks
            __props__.__dict__["cloudwatch_alarm_name"] = cloudwatch_alarm_name
            __props__.__dict__["cloudwatch_alarm_region"] = cloudwatch_alarm_region
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["enable_sni"] = enable_sni
            __props__.__dict__["failure_threshold"] = failure_threshold
            __props__.__dict__["fqdn"] = fqdn
            __props__.__dict__["insufficient_data_health_status"] = insufficient_data_health_status
            __props__.__dict__["invert_healthcheck"] = invert_healthcheck
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["measure_latency"] = measure_latency
            __props__.__dict__["port"] = port
            __props__.__dict__["reference_name"] = reference_name
            __props__.__dict__["regions"] = regions
            __props__.__dict__["request_interval"] = request_interval
            __props__.__dict__["resource_path"] = resource_path
            __props__.__dict__["routing_control_arn"] = routing_control_arn
            __props__.__dict__["search_string"] = search_string
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["arn"] = None
            __props__.__dict__["tags_all"] = None
        super(HealthCheck, __self__).__init__(
            'aws:route53/healthCheck:HealthCheck',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            child_health_threshold: Optional[pulumi.Input[int]] = None,
            child_healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cloudwatch_alarm_name: Optional[pulumi.Input[str]] = None,
            cloudwatch_alarm_region: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            enable_sni: Optional[pulumi.Input[bool]] = None,
            failure_threshold: Optional[pulumi.Input[int]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            insufficient_data_health_status: Optional[pulumi.Input[str]] = None,
            invert_healthcheck: Optional[pulumi.Input[bool]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            measure_latency: Optional[pulumi.Input[bool]] = None,
            port: Optional[pulumi.Input[int]] = None,
            reference_name: Optional[pulumi.Input[str]] = None,
            regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            request_interval: Optional[pulumi.Input[int]] = None,
            resource_path: Optional[pulumi.Input[str]] = None,
            routing_control_arn: Optional[pulumi.Input[str]] = None,
            search_string: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'HealthCheck':
        """
        Get an existing HealthCheck resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HealthCheckState.__new__(_HealthCheckState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["child_health_threshold"] = child_health_threshold
        __props__.__dict__["child_healthchecks"] = child_healthchecks
        __props__.__dict__["cloudwatch_alarm_name"] = cloudwatch_alarm_name
        __props__.__dict__["cloudwatch_alarm_region"] = cloudwatch_alarm_region
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["enable_sni"] = enable_sni
        __props__.__dict__["failure_threshold"] = failure_threshold
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["insufficient_data_health_status"] = insufficient_data_health_status
        __props__.__dict__["invert_healthcheck"] = invert_healthcheck
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["measure_latency"] = measure_latency
        __props__.__dict__["port"] = port
        __props__.__dict__["reference_name"] = reference_name
        __props__.__dict__["regions"] = regions
        __props__.__dict__["request_interval"] = request_interval
        __props__.__dict__["resource_path"] = resource_path
        __props__.__dict__["routing_control_arn"] = routing_control_arn
        __props__.__dict__["search_string"] = search_string
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["type"] = type
        return HealthCheck(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="childHealthThreshold")
    def child_health_threshold(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "child_health_threshold")

    @property
    @pulumi.getter(name="childHealthchecks")
    def child_healthchecks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "child_healthchecks")

    @property
    @pulumi.getter(name="cloudwatchAlarmName")
    def cloudwatch_alarm_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cloudwatch_alarm_name")

    @property
    @pulumi.getter(name="cloudwatchAlarmRegion")
    def cloudwatch_alarm_region(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cloudwatch_alarm_region")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="enableSni")
    def enable_sni(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enable_sni")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="insufficientDataHealthStatus")
    def insufficient_data_health_status(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "insufficient_data_health_status")

    @property
    @pulumi.getter(name="invertHealthcheck")
    def invert_healthcheck(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "invert_healthcheck")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="measureLatency")
    def measure_latency(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "measure_latency")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="referenceName")
    def reference_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "reference_name")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="requestInterval")
    def request_interval(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "request_interval")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter(name="routingControlArn")
    def routing_control_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "routing_control_arn")

    @property
    @pulumi.getter(name="searchString")
    def search_string(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "search_string")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

