# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ResolverFirewallConfigArgs', 'ResolverFirewallConfig']

@pulumi.input_type
class ResolverFirewallConfigArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[str],
                 firewall_fail_open: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResolverFirewallConfig resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if firewall_fail_open is not None:
            pulumi.set(__self__, "firewall_fail_open", firewall_fail_open)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="firewallFailOpen")
    def firewall_fail_open(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_fail_open")

    @firewall_fail_open.setter
    def firewall_fail_open(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_fail_open", value)


@pulumi.input_type
class _ResolverFirewallConfigState:
    def __init__(__self__, *,
                 firewall_fail_open: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResolverFirewallConfig resources.
        """
        if firewall_fail_open is not None:
            pulumi.set(__self__, "firewall_fail_open", firewall_fail_open)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="firewallFailOpen")
    def firewall_fail_open(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_fail_open")

    @firewall_fail_open.setter
    def firewall_fail_open(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_fail_open", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)


class ResolverFirewallConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 firewall_fail_open: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ResolverFirewallConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResolverFirewallConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResolverFirewallConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResolverFirewallConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResolverFirewallConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 firewall_fail_open: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResolverFirewallConfigArgs.__new__(ResolverFirewallConfigArgs)

            __props__.__dict__["firewall_fail_open"] = firewall_fail_open
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["owner_id"] = None
        super(ResolverFirewallConfig, __self__).__init__(
            'aws:route53/resolverFirewallConfig:ResolverFirewallConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            firewall_fail_open: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            resource_id: Optional[pulumi.Input[str]] = None) -> 'ResolverFirewallConfig':
        """
        Get an existing ResolverFirewallConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResolverFirewallConfigState.__new__(_ResolverFirewallConfigState)

        __props__.__dict__["firewall_fail_open"] = firewall_fail_open
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["resource_id"] = resource_id
        return ResolverFirewallConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="firewallFailOpen")
    def firewall_fail_open(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firewall_fail_open")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_id")

