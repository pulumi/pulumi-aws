# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class StaticIp(pulumi.CustomResource):
    """
    Allocates a static IP address.
    
    ~> **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
    """
    def __init__(__self__, __name__, __opts__=None, name=None):
        """Create a StaticIp resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name for the allocated static IP
        """
        __props__['name'] = name

        __self__.arn = pulumi.runtime.UNKNOWN
        """
        The ARN of the Lightsail static IP
        """
        __self__.ip_address = pulumi.runtime.UNKNOWN
        """
        The allocated static IP address
        """
        __self__.support_code = pulumi.runtime.UNKNOWN
        """
        The support code.
        """

        super(StaticIp, __self__).__init__(
            'aws:lightsail/staticIp:StaticIp',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'ipAddress' in outs:
            self.ip_address = outs['ipAddress']
        if 'name' in outs:
            self.name = outs['name']
        if 'supportCode' in outs:
            self.support_code = outs['supportCode']
