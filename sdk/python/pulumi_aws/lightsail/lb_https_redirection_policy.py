# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LbHttpsRedirectionPolicyArgs', 'LbHttpsRedirectionPolicy']

@pulumi.input_type
class LbHttpsRedirectionPolicyArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 lb_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a LbHttpsRedirectionPolicy resource.
        :param pulumi.Input[bool] enabled: - The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
        :param pulumi.Input[str] lb_name: The name of the load balancer to which you want to enable http to https redirection.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "lb_name", lb_name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        - The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="lbName")
    def lb_name(self) -> pulumi.Input[str]:
        """
        The name of the load balancer to which you want to enable http to https redirection.
        """
        return pulumi.get(self, "lb_name")

    @lb_name.setter
    def lb_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "lb_name", value)


@pulumi.input_type
class _LbHttpsRedirectionPolicyState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 lb_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LbHttpsRedirectionPolicy resources.
        :param pulumi.Input[bool] enabled: - The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
        :param pulumi.Input[str] lb_name: The name of the load balancer to which you want to enable http to https redirection.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if lb_name is not None:
            pulumi.set(__self__, "lb_name", lb_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        - The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="lbName")
    def lb_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the load balancer to which you want to enable http to https redirection.
        """
        return pulumi.get(self, "lb_name")

    @lb_name.setter
    def lb_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_name", value)


class LbHttpsRedirectionPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 lb_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configures Https Redirection for a Lightsail Load Balancer. A valid Certificate must be attached to the load balancer in order to enable https redirection.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test_lb = aws.lightsail.Lb("testLb",
            health_check_path="/",
            instance_port=80,
            tags={
                "foo": "bar",
            })
        test_lb_certificate = aws.lightsail.LbCertificate("testLbCertificate",
            lb_name=test_lb.id,
            domain_name="test.com")
        test_lb_certificate_attachment = aws.lightsail.LbCertificateAttachment("testLbCertificateAttachment",
            lb_name=test_lb.name,
            certificate_name=test_lb_certificate.name)
        test_lb_https_redirection_policy = aws.lightsail.LbHttpsRedirectionPolicy("testLbHttpsRedirectionPolicy",
            lb_name=test_lb.name,
            enabled=True)
        ```

        ## Import

        `aws_lightsail_lb_https_redirection_policy` can be imported by using the `lb_name` attribute, e.g.,

        ```sh
         $ pulumi import aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy test example-load-balancer
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: - The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
        :param pulumi.Input[str] lb_name: The name of the load balancer to which you want to enable http to https redirection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbHttpsRedirectionPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configures Https Redirection for a Lightsail Load Balancer. A valid Certificate must be attached to the load balancer in order to enable https redirection.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test_lb = aws.lightsail.Lb("testLb",
            health_check_path="/",
            instance_port=80,
            tags={
                "foo": "bar",
            })
        test_lb_certificate = aws.lightsail.LbCertificate("testLbCertificate",
            lb_name=test_lb.id,
            domain_name="test.com")
        test_lb_certificate_attachment = aws.lightsail.LbCertificateAttachment("testLbCertificateAttachment",
            lb_name=test_lb.name,
            certificate_name=test_lb_certificate.name)
        test_lb_https_redirection_policy = aws.lightsail.LbHttpsRedirectionPolicy("testLbHttpsRedirectionPolicy",
            lb_name=test_lb.name,
            enabled=True)
        ```

        ## Import

        `aws_lightsail_lb_https_redirection_policy` can be imported by using the `lb_name` attribute, e.g.,

        ```sh
         $ pulumi import aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy test example-load-balancer
        ```

        :param str resource_name: The name of the resource.
        :param LbHttpsRedirectionPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbHttpsRedirectionPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 lb_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbHttpsRedirectionPolicyArgs.__new__(LbHttpsRedirectionPolicyArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if lb_name is None and not opts.urn:
                raise TypeError("Missing required property 'lb_name'")
            __props__.__dict__["lb_name"] = lb_name
        super(LbHttpsRedirectionPolicy, __self__).__init__(
            'aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            lb_name: Optional[pulumi.Input[str]] = None) -> 'LbHttpsRedirectionPolicy':
        """
        Get an existing LbHttpsRedirectionPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: - The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
        :param pulumi.Input[str] lb_name: The name of the load balancer to which you want to enable http to https redirection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbHttpsRedirectionPolicyState.__new__(_LbHttpsRedirectionPolicyState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["lb_name"] = lb_name
        return LbHttpsRedirectionPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        - The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="lbName")
    def lb_name(self) -> pulumi.Output[str]:
        """
        The name of the load balancer to which you want to enable http to https redirection.
        """
        return pulumi.get(self, "lb_name")

