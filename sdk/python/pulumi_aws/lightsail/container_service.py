# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerServiceArgs', 'ContainerService']

@pulumi.input_type
class ContainerServiceArgs:
    def __init__(__self__, *,
                 power: pulumi.Input[str],
                 scale: pulumi.Input[int],
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_registry_access: Optional[pulumi.Input['ContainerServicePrivateRegistryAccessArgs']] = None,
                 public_domain_names: Optional[pulumi.Input['ContainerServicePublicDomainNamesArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ContainerService resource.
        """
        pulumi.set(__self__, "power", power)
        pulumi.set(__self__, "scale", scale)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_registry_access is not None:
            pulumi.set(__self__, "private_registry_access", private_registry_access)
        if public_domain_names is not None:
            pulumi.set(__self__, "public_domain_names", public_domain_names)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def power(self) -> pulumi.Input[str]:
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: pulumi.Input[str]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter
    def scale(self) -> pulumi.Input[int]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: pulumi.Input[int]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateRegistryAccess")
    def private_registry_access(self) -> Optional[pulumi.Input['ContainerServicePrivateRegistryAccessArgs']]:
        return pulumi.get(self, "private_registry_access")

    @private_registry_access.setter
    def private_registry_access(self, value: Optional[pulumi.Input['ContainerServicePrivateRegistryAccessArgs']]):
        pulumi.set(self, "private_registry_access", value)

    @property
    @pulumi.getter(name="publicDomainNames")
    def public_domain_names(self) -> Optional[pulumi.Input['ContainerServicePublicDomainNamesArgs']]:
        return pulumi.get(self, "public_domain_names")

    @public_domain_names.setter
    def public_domain_names(self, value: Optional[pulumi.Input['ContainerServicePublicDomainNamesArgs']]):
        pulumi.set(self, "public_domain_names", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ContainerServiceState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 power: Optional[pulumi.Input[str]] = None,
                 power_id: Optional[pulumi.Input[str]] = None,
                 principal_arn: Optional[pulumi.Input[str]] = None,
                 private_domain_name: Optional[pulumi.Input[str]] = None,
                 private_registry_access: Optional[pulumi.Input['ContainerServicePrivateRegistryAccessArgs']] = None,
                 public_domain_names: Optional[pulumi.Input['ContainerServicePublicDomainNamesArgs']] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ContainerService resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_id is not None:
            pulumi.set(__self__, "power_id", power_id)
        if principal_arn is not None:
            pulumi.set(__self__, "principal_arn", principal_arn)
        if private_domain_name is not None:
            pulumi.set(__self__, "private_domain_name", private_domain_name)
        if private_registry_access is not None:
            pulumi.set(__self__, "private_registry_access", private_registry_access)
        if public_domain_names is not None:
            pulumi.set(__self__, "public_domain_names", public_domain_names)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerId")
    def power_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_id")

    @power_id.setter
    def power_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_id", value)

    @property
    @pulumi.getter(name="principalArn")
    def principal_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal_arn")

    @principal_arn.setter
    def principal_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_arn", value)

    @property
    @pulumi.getter(name="privateDomainName")
    def private_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_domain_name")

    @private_domain_name.setter
    def private_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_domain_name", value)

    @property
    @pulumi.getter(name="privateRegistryAccess")
    def private_registry_access(self) -> Optional[pulumi.Input['ContainerServicePrivateRegistryAccessArgs']]:
        return pulumi.get(self, "private_registry_access")

    @private_registry_access.setter
    def private_registry_access(self, value: Optional[pulumi.Input['ContainerServicePrivateRegistryAccessArgs']]):
        pulumi.set(self, "private_registry_access", value)

    @property
    @pulumi.getter(name="publicDomainNames")
    def public_domain_names(self) -> Optional[pulumi.Input['ContainerServicePublicDomainNamesArgs']]:
        return pulumi.get(self, "public_domain_names")

    @public_domain_names.setter
    def public_domain_names(self, value: Optional[pulumi.Input['ContainerServicePublicDomainNamesArgs']]):
        pulumi.set(self, "public_domain_names", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class ContainerService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 power: Optional[pulumi.Input[str]] = None,
                 private_registry_access: Optional[pulumi.Input[pulumi.InputType['ContainerServicePrivateRegistryAccessArgs']]] = None,
                 public_domain_names: Optional[pulumi.Input[pulumi.InputType['ContainerServicePublicDomainNamesArgs']]] = None,
                 scale: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a ContainerService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 power: Optional[pulumi.Input[str]] = None,
                 private_registry_access: Optional[pulumi.Input[pulumi.InputType['ContainerServicePrivateRegistryAccessArgs']]] = None,
                 public_domain_names: Optional[pulumi.Input[pulumi.InputType['ContainerServicePublicDomainNamesArgs']]] = None,
                 scale: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerServiceArgs.__new__(ContainerServiceArgs)

            __props__.__dict__["is_disabled"] = is_disabled
            __props__.__dict__["name"] = name
            if power is None and not opts.urn:
                raise TypeError("Missing required property 'power'")
            __props__.__dict__["power"] = power
            __props__.__dict__["private_registry_access"] = private_registry_access
            __props__.__dict__["public_domain_names"] = public_domain_names
            if scale is None and not opts.urn:
                raise TypeError("Missing required property 'scale'")
            __props__.__dict__["scale"] = scale
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["availability_zone"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["power_id"] = None
            __props__.__dict__["principal_arn"] = None
            __props__.__dict__["private_domain_name"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["tags_all"] = None
            __props__.__dict__["url"] = None
        super(ContainerService, __self__).__init__(
            'aws:lightsail/containerService:ContainerService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            is_disabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            power: Optional[pulumi.Input[str]] = None,
            power_id: Optional[pulumi.Input[str]] = None,
            principal_arn: Optional[pulumi.Input[str]] = None,
            private_domain_name: Optional[pulumi.Input[str]] = None,
            private_registry_access: Optional[pulumi.Input[pulumi.InputType['ContainerServicePrivateRegistryAccessArgs']]] = None,
            public_domain_names: Optional[pulumi.Input[pulumi.InputType['ContainerServicePublicDomainNamesArgs']]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            scale: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'ContainerService':
        """
        Get an existing ContainerService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerServiceState.__new__(_ContainerServiceState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["is_disabled"] = is_disabled
        __props__.__dict__["name"] = name
        __props__.__dict__["power"] = power
        __props__.__dict__["power_id"] = power_id
        __props__.__dict__["principal_arn"] = principal_arn
        __props__.__dict__["private_domain_name"] = private_domain_name
        __props__.__dict__["private_registry_access"] = private_registry_access
        __props__.__dict__["public_domain_names"] = public_domain_names
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["scale"] = scale
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["url"] = url
        return ContainerService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def power(self) -> pulumi.Output[str]:
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerId")
    def power_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "power_id")

    @property
    @pulumi.getter(name="principalArn")
    def principal_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "principal_arn")

    @property
    @pulumi.getter(name="privateDomainName")
    def private_domain_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "private_domain_name")

    @property
    @pulumi.getter(name="privateRegistryAccess")
    def private_registry_access(self) -> pulumi.Output['outputs.ContainerServicePrivateRegistryAccess']:
        return pulumi.get(self, "private_registry_access")

    @property
    @pulumi.getter(name="publicDomainNames")
    def public_domain_names(self) -> pulumi.Output[Optional['outputs.ContainerServicePublicDomainNames']]:
        return pulumi.get(self, "public_domain_names")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def scale(self) -> pulumi.Output[int]:
        return pulumi.get(self, "scale")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

