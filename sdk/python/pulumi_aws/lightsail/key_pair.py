# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class KeyPair(pulumi.CustomResource):
    """
    Provides a Lightsail Key Pair, for use with Lightsail Instances. These key pairs
    are seperate from EC2 Key Pairs, and must be created or imported for use with
    Lightsail.
    
    ~> **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
    """
    def __init__(__self__, __name__, __opts__=None, name=None, name_prefix=None, pgp_key=None, public_key=None):
        """Create a KeyPair resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the Lightsail Key Pair. If omitted, a unique
        name will be generated by Terraform
        """
        __props__['name'] = name

        if name_prefix and not isinstance(name_prefix, basestring):
            raise TypeError('Expected property name_prefix to be a basestring')
        __self__.name_prefix = name_prefix
        __props__['namePrefix'] = name_prefix

        if pgp_key and not isinstance(pgp_key, basestring):
            raise TypeError('Expected property pgp_key to be a basestring')
        __self__.pgp_key = pgp_key
        """
        An optional PGP key to encrypt the resulting private
        key material. Only used when creating a new key pair
        """
        __props__['pgpKey'] = pgp_key

        if public_key and not isinstance(public_key, basestring):
            raise TypeError('Expected property public_key to be a basestring')
        __self__.public_key = public_key
        """
        The public key material. This public key will be
        imported into Lightsail
        """
        __props__['publicKey'] = public_key

        __self__.arn = pulumi.runtime.UNKNOWN
        """
        The ARN of the Lightsail key pair
        """
        __self__.encrypted_fingerprint = pulumi.runtime.UNKNOWN
        """
        The MD5 public key fingerprint for the encrypted
        private key
        """
        __self__.encrypted_private_key = pulumi.runtime.UNKNOWN
        """
        the private key material, base 64 encoded and
        encrypted with the given `pgp_key`. This is only populated when creating a new
        key and `pgp_key` is supplied
        """
        __self__.fingerprint = pulumi.runtime.UNKNOWN
        """
        The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        """
        __self__.private_key = pulumi.runtime.UNKNOWN
        """
        the private key, base64 encoded. This is only populated
        when creating a new key, and when no `pgp_key` is provided
        """

        super(KeyPair, __self__).__init__(
            'aws:lightsail/keyPair:KeyPair',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'encryptedFingerprint' in outs:
            self.encrypted_fingerprint = outs['encryptedFingerprint']
        if 'encryptedPrivateKey' in outs:
            self.encrypted_private_key = outs['encryptedPrivateKey']
        if 'fingerprint' in outs:
            self.fingerprint = outs['fingerprint']
        if 'name' in outs:
            self.name = outs['name']
        if 'namePrefix' in outs:
            self.name_prefix = outs['namePrefix']
        if 'pgpKey' in outs:
            self.pgp_key = outs['pgpKey']
        if 'privateKey' in outs:
            self.private_key = outs['privateKey']
        if 'publicKey' in outs:
            self.public_key = outs['publicKey']
