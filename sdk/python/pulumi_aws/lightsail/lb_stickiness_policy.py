# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['LbStickinessPolicyArgs', 'LbStickinessPolicy']

@pulumi.input_type
class LbStickinessPolicyArgs:
    def __init__(__self__, *,
                 cookie_duration: pulumi.Input[_builtins.int],
                 enabled: pulumi.Input[_builtins.bool],
                 lb_name: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LbStickinessPolicy resource.
        :param pulumi.Input[_builtins.int] cookie_duration: Cookie duration in seconds. This determines the length of the session stickiness.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable session stickiness for the load balancer.
        :param pulumi.Input[_builtins.str] lb_name: Name of the load balancer to which you want to enable session stickiness.
               
               The following arguments are optional:
        :param pulumi.Input[_builtins.str] region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        pulumi.set(__self__, "cookie_duration", cookie_duration)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "lb_name", lb_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cookieDuration")
    def cookie_duration(self) -> pulumi.Input[_builtins.int]:
        """
        Cookie duration in seconds. This determines the length of the session stickiness.
        """
        return pulumi.get(self, "cookie_duration")

    @cookie_duration.setter
    def cookie_duration(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "cookie_duration", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether to enable session stickiness for the load balancer.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="lbName")
    def lb_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the load balancer to which you want to enable session stickiness.

        The following arguments are optional:
        """
        return pulumi.get(self, "lb_name")

    @lb_name.setter
    def lb_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lb_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LbStickinessPolicyState:
    def __init__(__self__, *,
                 cookie_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lb_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LbStickinessPolicy resources.
        :param pulumi.Input[_builtins.int] cookie_duration: Cookie duration in seconds. This determines the length of the session stickiness.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable session stickiness for the load balancer.
        :param pulumi.Input[_builtins.str] lb_name: Name of the load balancer to which you want to enable session stickiness.
               
               The following arguments are optional:
        :param pulumi.Input[_builtins.str] region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        if cookie_duration is not None:
            pulumi.set(__self__, "cookie_duration", cookie_duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if lb_name is not None:
            pulumi.set(__self__, "lb_name", lb_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cookieDuration")
    def cookie_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Cookie duration in seconds. This determines the length of the session stickiness.
        """
        return pulumi.get(self, "cookie_duration")

    @cookie_duration.setter
    def cookie_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cookie_duration", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable session stickiness for the load balancer.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="lbName")
    def lb_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the load balancer to which you want to enable session stickiness.

        The following arguments are optional:
        """
        return pulumi.get(self, "lb_name")

    @lb_name.setter
    def lb_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("aws:lightsail/lbStickinessPolicy:LbStickinessPolicy")
class LbStickinessPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cookie_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lb_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages session stickiness for a Lightsail Load Balancer.

        Use this resource to configure session stickiness to ensure that user sessions are consistently routed to the same backend instance. This helps maintain session state for applications that store session data locally on the server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.lightsail.Lb("example",
            name="example-load-balancer",
            health_check_path="/",
            instance_port=80,
            tags={
                "foo": "bar",
            })
        example_lb_stickiness_policy = aws.lightsail.LbStickinessPolicy("example",
            lb_name=example.name,
            cookie_duration=900,
            enabled=True)
        ```

        ## Import

        Using `pulumi import`, import `aws_lightsail_lb_stickiness_policy` using the `lb_name` attribute. For example:

        ```sh
        $ pulumi import aws:lightsail/lbStickinessPolicy:LbStickinessPolicy example example-load-balancer
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] cookie_duration: Cookie duration in seconds. This determines the length of the session stickiness.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable session stickiness for the load balancer.
        :param pulumi.Input[_builtins.str] lb_name: Name of the load balancer to which you want to enable session stickiness.
               
               The following arguments are optional:
        :param pulumi.Input[_builtins.str] region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbStickinessPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages session stickiness for a Lightsail Load Balancer.

        Use this resource to configure session stickiness to ensure that user sessions are consistently routed to the same backend instance. This helps maintain session state for applications that store session data locally on the server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.lightsail.Lb("example",
            name="example-load-balancer",
            health_check_path="/",
            instance_port=80,
            tags={
                "foo": "bar",
            })
        example_lb_stickiness_policy = aws.lightsail.LbStickinessPolicy("example",
            lb_name=example.name,
            cookie_duration=900,
            enabled=True)
        ```

        ## Import

        Using `pulumi import`, import `aws_lightsail_lb_stickiness_policy` using the `lb_name` attribute. For example:

        ```sh
        $ pulumi import aws:lightsail/lbStickinessPolicy:LbStickinessPolicy example example-load-balancer
        ```

        :param str resource_name: The name of the resource.
        :param LbStickinessPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbStickinessPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cookie_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lb_name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbStickinessPolicyArgs.__new__(LbStickinessPolicyArgs)

            if cookie_duration is None and not opts.urn:
                raise TypeError("Missing required property 'cookie_duration'")
            __props__.__dict__["cookie_duration"] = cookie_duration
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if lb_name is None and not opts.urn:
                raise TypeError("Missing required property 'lb_name'")
            __props__.__dict__["lb_name"] = lb_name
            __props__.__dict__["region"] = region
        super(LbStickinessPolicy, __self__).__init__(
            'aws:lightsail/lbStickinessPolicy:LbStickinessPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cookie_duration: Optional[pulumi.Input[_builtins.int]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            lb_name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'LbStickinessPolicy':
        """
        Get an existing LbStickinessPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] cookie_duration: Cookie duration in seconds. This determines the length of the session stickiness.
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable session stickiness for the load balancer.
        :param pulumi.Input[_builtins.str] lb_name: Name of the load balancer to which you want to enable session stickiness.
               
               The following arguments are optional:
        :param pulumi.Input[_builtins.str] region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbStickinessPolicyState.__new__(_LbStickinessPolicyState)

        __props__.__dict__["cookie_duration"] = cookie_duration
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["lb_name"] = lb_name
        __props__.__dict__["region"] = region
        return LbStickinessPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cookieDuration")
    def cookie_duration(self) -> pulumi.Output[_builtins.int]:
        """
        Cookie duration in seconds. This determines the length of the session stickiness.
        """
        return pulumi.get(self, "cookie_duration")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable session stickiness for the load balancer.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="lbName")
    def lb_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the load balancer to which you want to enable session stickiness.

        The following arguments are optional:
        """
        return pulumi.get(self, "lb_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        return pulumi.get(self, "region")

