# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CertificateDomainValidationOptionArgs',
    'CertificateDomainValidationOptionArgsDict',
    'ContainerServiceDeploymentVersionContainerArgs',
    'ContainerServiceDeploymentVersionContainerArgsDict',
    'ContainerServiceDeploymentVersionPublicEndpointArgs',
    'ContainerServiceDeploymentVersionPublicEndpointArgsDict',
    'ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs',
    'ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgsDict',
    'ContainerServicePrivateRegistryAccessArgs',
    'ContainerServicePrivateRegistryAccessArgsDict',
    'ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs',
    'ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgsDict',
    'ContainerServicePublicDomainNamesArgs',
    'ContainerServicePublicDomainNamesArgsDict',
    'ContainerServicePublicDomainNamesCertificateArgs',
    'ContainerServicePublicDomainNamesCertificateArgsDict',
    'DistributionCacheBehaviorArgs',
    'DistributionCacheBehaviorArgsDict',
    'DistributionCacheBehaviorSettingsArgs',
    'DistributionCacheBehaviorSettingsArgsDict',
    'DistributionCacheBehaviorSettingsForwardedCookiesArgs',
    'DistributionCacheBehaviorSettingsForwardedCookiesArgsDict',
    'DistributionCacheBehaviorSettingsForwardedHeadersArgs',
    'DistributionCacheBehaviorSettingsForwardedHeadersArgsDict',
    'DistributionCacheBehaviorSettingsForwardedQueryStringsArgs',
    'DistributionCacheBehaviorSettingsForwardedQueryStringsArgsDict',
    'DistributionDefaultCacheBehaviorArgs',
    'DistributionDefaultCacheBehaviorArgsDict',
    'DistributionLocationArgs',
    'DistributionLocationArgsDict',
    'DistributionOriginArgs',
    'DistributionOriginArgsDict',
    'InstanceAddOnArgs',
    'InstanceAddOnArgsDict',
    'InstancePublicPortsPortInfoArgs',
    'InstancePublicPortsPortInfoArgsDict',
    'LbCertificateDomainValidationRecordArgs',
    'LbCertificateDomainValidationRecordArgsDict',
]

MYPY = False

if not MYPY:
    class CertificateDomainValidationOptionArgsDict(TypedDict):
        domain_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Domain name for which the certificate should be issued.
        """
        resource_record_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the DNS record to create to validate the certificate.
        """
        resource_record_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of DNS record to create to validate the certificate.
        """
        resource_record_value: NotRequired[pulumi.Input[builtins.str]]
        """
        Value of the DNS record to create to validate the certificate.
        """
elif False:
    CertificateDomainValidationOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CertificateDomainValidationOptionArgs:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[builtins.str]] = None,
                 resource_record_name: Optional[pulumi.Input[builtins.str]] = None,
                 resource_record_type: Optional[pulumi.Input[builtins.str]] = None,
                 resource_record_value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] domain_name: Domain name for which the certificate should be issued.
        :param pulumi.Input[builtins.str] resource_record_name: Name of the DNS record to create to validate the certificate.
        :param pulumi.Input[builtins.str] resource_record_type: Type of DNS record to create to validate the certificate.
        :param pulumi.Input[builtins.str] resource_record_value: Value of the DNS record to create to validate the certificate.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if resource_record_name is not None:
            pulumi.set(__self__, "resource_record_name", resource_record_name)
        if resource_record_type is not None:
            pulumi.set(__self__, "resource_record_type", resource_record_type)
        if resource_record_value is not None:
            pulumi.set(__self__, "resource_record_value", resource_record_value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Domain name for which the certificate should be issued.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="resourceRecordName")
    def resource_record_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the DNS record to create to validate the certificate.
        """
        return pulumi.get(self, "resource_record_name")

    @resource_record_name.setter
    def resource_record_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_record_name", value)

    @property
    @pulumi.getter(name="resourceRecordType")
    def resource_record_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of DNS record to create to validate the certificate.
        """
        return pulumi.get(self, "resource_record_type")

    @resource_record_type.setter
    def resource_record_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_record_type", value)

    @property
    @pulumi.getter(name="resourceRecordValue")
    def resource_record_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Value of the DNS record to create to validate the certificate.
        """
        return pulumi.get(self, "resource_record_value")

    @resource_record_value.setter
    def resource_record_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_record_value", value)


if not MYPY:
    class ContainerServiceDeploymentVersionContainerArgsDict(TypedDict):
        container_name: pulumi.Input[builtins.str]
        """
        Name of the container.
        """
        image: pulumi.Input[builtins.str]
        """
        Name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, `nginx:latest` or `nginx`.
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Launch command for the container. A list of strings.
        """
        environment: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of the environment variables of the container.
        """
        ports: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
        """
        Key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
        """
elif False:
    ContainerServiceDeploymentVersionContainerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerServiceDeploymentVersionContainerArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[builtins.str],
                 image: pulumi.Input[builtins.str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 ports: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] container_name: Name of the container.
        :param pulumi.Input[builtins.str] image: Name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, `nginx:latest` or `nginx`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] commands: Launch command for the container. A list of strings.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] environment: Key-value map of the environment variables of the container.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] ports: Key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "image", image)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the container.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[builtins.str]:
        """
        Name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, `nginx:latest` or `nginx`.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Launch command for the container. A list of strings.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of the environment variables of the container.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ports", value)


if not MYPY:
    class ContainerServiceDeploymentVersionPublicEndpointArgsDict(TypedDict):
        container_name: pulumi.Input[builtins.str]
        """
        Name of the container for the endpoint.
        """
        container_port: pulumi.Input[builtins.int]
        """
        Port of the container to which traffic is forwarded to.
        """
        health_check: pulumi.Input['ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgsDict']
        """
        Configuration block that describes the health check configuration of the container. See below.
        """
elif False:
    ContainerServiceDeploymentVersionPublicEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerServiceDeploymentVersionPublicEndpointArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[builtins.str],
                 container_port: pulumi.Input[builtins.int],
                 health_check: pulumi.Input['ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs']):
        """
        :param pulumi.Input[builtins.str] container_name: Name of the container for the endpoint.
        :param pulumi.Input[builtins.int] container_port: Port of the container to which traffic is forwarded to.
        :param pulumi.Input['ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs'] health_check: Configuration block that describes the health check configuration of the container. See below.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "health_check", health_check)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the container for the endpoint.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[builtins.int]:
        """
        Port of the container to which traffic is forwarded to.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Input['ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs']:
        """
        Configuration block that describes the health check configuration of the container. See below.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: pulumi.Input['ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs']):
        pulumi.set(self, "health_check", value)


if not MYPY:
    class ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgsDict(TypedDict):
        healthy_threshold: NotRequired[pulumi.Input[builtins.int]]
        """
        Number of consecutive health check successes required before moving the container to the Healthy state. Defaults to 2.
        """
        interval_seconds: NotRequired[pulumi.Input[builtins.int]]
        """
        Approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. Defaults to 5.
        """
        path: NotRequired[pulumi.Input[builtins.str]]
        """
        Path on the container on which to perform the health check. Defaults to "/".
        """
        success_codes: NotRequired[pulumi.Input[builtins.str]]
        """
        HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. Defaults to "200-499".
        """
        timeout_seconds: NotRequired[pulumi.Input[builtins.int]]
        """
        Amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. Defaults to 2.
        """
        unhealthy_threshold: NotRequired[pulumi.Input[builtins.int]]
        """
        Number of consecutive health check failures required before moving the container to the Unhealthy state. Defaults to 2.
        """
elif False:
    ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs:
    def __init__(__self__, *,
                 healthy_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 interval_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 path: Optional[pulumi.Input[builtins.str]] = None,
                 success_codes: Optional[pulumi.Input[builtins.str]] = None,
                 timeout_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.int] healthy_threshold: Number of consecutive health check successes required before moving the container to the Healthy state. Defaults to 2.
        :param pulumi.Input[builtins.int] interval_seconds: Approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. Defaults to 5.
        :param pulumi.Input[builtins.str] path: Path on the container on which to perform the health check. Defaults to "/".
        :param pulumi.Input[builtins.str] success_codes: HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. Defaults to "200-499".
        :param pulumi.Input[builtins.int] timeout_seconds: Amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. Defaults to 2.
        :param pulumi.Input[builtins.int] unhealthy_threshold: Number of consecutive health check failures required before moving the container to the Unhealthy state. Defaults to 2.
        """
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if success_codes is not None:
            pulumi.set(__self__, "success_codes", success_codes)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Number of consecutive health check successes required before moving the container to the Healthy state. Defaults to 2.
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. Defaults to 5.
        """
        return pulumi.get(self, "interval_seconds")

    @interval_seconds.setter
    def interval_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "interval_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Path on the container on which to perform the health check. Defaults to "/".
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="successCodes")
    def success_codes(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. Defaults to "200-499".
        """
        return pulumi.get(self, "success_codes")

    @success_codes.setter
    def success_codes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "success_codes", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. Defaults to 2.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Number of consecutive health check failures required before moving the container to the Unhealthy state. Defaults to 2.
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "unhealthy_threshold", value)


if not MYPY:
    class ContainerServicePrivateRegistryAccessArgsDict(TypedDict):
        ecr_image_puller_role: NotRequired[pulumi.Input['ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgsDict']]
        """
        Configuration to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
        """
elif False:
    ContainerServicePrivateRegistryAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerServicePrivateRegistryAccessArgs:
    def __init__(__self__, *,
                 ecr_image_puller_role: Optional[pulumi.Input['ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs']] = None):
        """
        :param pulumi.Input['ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs'] ecr_image_puller_role: Configuration to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
        """
        if ecr_image_puller_role is not None:
            pulumi.set(__self__, "ecr_image_puller_role", ecr_image_puller_role)

    @property
    @pulumi.getter(name="ecrImagePullerRole")
    def ecr_image_puller_role(self) -> Optional[pulumi.Input['ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs']]:
        """
        Configuration to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
        """
        return pulumi.get(self, "ecr_image_puller_role")

    @ecr_image_puller_role.setter
    def ecr_image_puller_role(self, value: Optional[pulumi.Input['ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs']]):
        pulumi.set(self, "ecr_image_puller_role", value)


if not MYPY:
    class ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgsDict(TypedDict):
        is_active: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether to activate the role. Defaults to `false`.
        """
        principal_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service.
        """
elif False:
    ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs:
    def __init__(__self__, *,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 principal_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] is_active: Whether to activate the role. Defaults to `false`.
        :param pulumi.Input[builtins.str] principal_arn: Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service.
        """
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if principal_arn is not None:
            pulumi.set(__self__, "principal_arn", principal_arn)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to activate the role. Defaults to `false`.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="principalArn")
    def principal_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service.
        """
        return pulumi.get(self, "principal_arn")

    @principal_arn.setter
    def principal_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "principal_arn", value)


if not MYPY:
    class ContainerServicePublicDomainNamesArgsDict(TypedDict):
        certificates: pulumi.Input[Sequence[pulumi.Input['ContainerServicePublicDomainNamesCertificateArgsDict']]]
        """
        Set of certificate configurations for the public domain names. Each element contains the following attributes:
        """
elif False:
    ContainerServicePublicDomainNamesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerServicePublicDomainNamesArgs:
    def __init__(__self__, *,
                 certificates: pulumi.Input[Sequence[pulumi.Input['ContainerServicePublicDomainNamesCertificateArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ContainerServicePublicDomainNamesCertificateArgs']]] certificates: Set of certificate configurations for the public domain names. Each element contains the following attributes:
        """
        pulumi.set(__self__, "certificates", certificates)

    @property
    @pulumi.getter
    def certificates(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerServicePublicDomainNamesCertificateArgs']]]:
        """
        Set of certificate configurations for the public domain names. Each element contains the following attributes:
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerServicePublicDomainNamesCertificateArgs']]]):
        pulumi.set(self, "certificates", value)


if not MYPY:
    class ContainerServicePublicDomainNamesCertificateArgsDict(TypedDict):
        certificate_name: pulumi.Input[builtins.str]
        """
        Name of the certificate.
        """
        domain_names: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        List of domain names for the certificate.
        """
elif False:
    ContainerServicePublicDomainNamesCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerServicePublicDomainNamesCertificateArgs:
    def __init__(__self__, *,
                 certificate_name: pulumi.Input[builtins.str],
                 domain_names: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        """
        :param pulumi.Input[builtins.str] certificate_name: Name of the certificate.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] domain_names: List of domain names for the certificate.
        """
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "domain_names", domain_names)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the certificate.
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        List of domain names for the certificate.
        """
        return pulumi.get(self, "domain_names")

    @domain_names.setter
    def domain_names(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "domain_names", value)


if not MYPY:
    class DistributionCacheBehaviorArgsDict(TypedDict):
        behavior: pulumi.Input[builtins.str]
        """
        Cache behavior for the specified path. Valid values: `cache`, `dont-cache`.
        """
        path: pulumi.Input[builtins.str]
        """
        Path to a directory or file to cache, or not cache. Use an asterisk symbol to specify wildcard directories (`path/to/assets/*`), and file types (`*.html`, `*.jpg`, `*.js`). Directories and file paths are case-sensitive.
        """
elif False:
    DistributionCacheBehaviorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DistributionCacheBehaviorArgs:
    def __init__(__self__, *,
                 behavior: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] behavior: Cache behavior for the specified path. Valid values: `cache`, `dont-cache`.
        :param pulumi.Input[builtins.str] path: Path to a directory or file to cache, or not cache. Use an asterisk symbol to specify wildcard directories (`path/to/assets/*`), and file types (`*.html`, `*.jpg`, `*.js`). Directories and file paths are case-sensitive.
        """
        pulumi.set(__self__, "behavior", behavior)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def behavior(self) -> pulumi.Input[builtins.str]:
        """
        Cache behavior for the specified path. Valid values: `cache`, `dont-cache`.
        """
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        Path to a directory or file to cache, or not cache. Use an asterisk symbol to specify wildcard directories (`path/to/assets/*`), and file types (`*.html`, `*.jpg`, `*.js`). Directories and file paths are case-sensitive.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)


if not MYPY:
    class DistributionCacheBehaviorSettingsArgsDict(TypedDict):
        allowed_http_methods: NotRequired[pulumi.Input[builtins.str]]
        """
        HTTP methods that are processed and forwarded to the distribution's origin.
        """
        cached_http_methods: NotRequired[pulumi.Input[builtins.str]]
        """
        HTTP method responses that are cached by your distribution.
        """
        default_ttl: NotRequired[pulumi.Input[builtins.int]]
        """
        Default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
        """
        forwarded_cookies: NotRequired[pulumi.Input['DistributionCacheBehaviorSettingsForwardedCookiesArgsDict']]
        """
        Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
        """
        forwarded_headers: NotRequired[pulumi.Input['DistributionCacheBehaviorSettingsForwardedHeadersArgsDict']]
        """
        Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
        """
        forwarded_query_strings: NotRequired[pulumi.Input['DistributionCacheBehaviorSettingsForwardedQueryStringsArgsDict']]
        """
        Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
        """
        maximum_ttl: NotRequired[pulumi.Input[builtins.int]]
        """
        Maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
        """
        minimum_ttl: NotRequired[pulumi.Input[builtins.int]]
        """
        Minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
        """
elif False:
    DistributionCacheBehaviorSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DistributionCacheBehaviorSettingsArgs:
    def __init__(__self__, *,
                 allowed_http_methods: Optional[pulumi.Input[builtins.str]] = None,
                 cached_http_methods: Optional[pulumi.Input[builtins.str]] = None,
                 default_ttl: Optional[pulumi.Input[builtins.int]] = None,
                 forwarded_cookies: Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedCookiesArgs']] = None,
                 forwarded_headers: Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedHeadersArgs']] = None,
                 forwarded_query_strings: Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedQueryStringsArgs']] = None,
                 maximum_ttl: Optional[pulumi.Input[builtins.int]] = None,
                 minimum_ttl: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] allowed_http_methods: HTTP methods that are processed and forwarded to the distribution's origin.
        :param pulumi.Input[builtins.str] cached_http_methods: HTTP method responses that are cached by your distribution.
        :param pulumi.Input[builtins.int] default_ttl: Default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
        :param pulumi.Input['DistributionCacheBehaviorSettingsForwardedCookiesArgs'] forwarded_cookies: Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
        :param pulumi.Input['DistributionCacheBehaviorSettingsForwardedHeadersArgs'] forwarded_headers: Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
        :param pulumi.Input['DistributionCacheBehaviorSettingsForwardedQueryStringsArgs'] forwarded_query_strings: Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
        :param pulumi.Input[builtins.int] maximum_ttl: Maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
        :param pulumi.Input[builtins.int] minimum_ttl: Minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
        """
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if cached_http_methods is not None:
            pulumi.set(__self__, "cached_http_methods", cached_http_methods)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if forwarded_cookies is not None:
            pulumi.set(__self__, "forwarded_cookies", forwarded_cookies)
        if forwarded_headers is not None:
            pulumi.set(__self__, "forwarded_headers", forwarded_headers)
        if forwarded_query_strings is not None:
            pulumi.set(__self__, "forwarded_query_strings", forwarded_query_strings)
        if maximum_ttl is not None:
            pulumi.set(__self__, "maximum_ttl", maximum_ttl)
        if minimum_ttl is not None:
            pulumi.set(__self__, "minimum_ttl", minimum_ttl)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        HTTP methods that are processed and forwarded to the distribution's origin.
        """
        return pulumi.get(self, "allowed_http_methods")

    @allowed_http_methods.setter
    def allowed_http_methods(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "allowed_http_methods", value)

    @property
    @pulumi.getter(name="cachedHttpMethods")
    def cached_http_methods(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        HTTP method responses that are cached by your distribution.
        """
        return pulumi.get(self, "cached_http_methods")

    @cached_http_methods.setter
    def cached_http_methods(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cached_http_methods", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
        """
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter(name="forwardedCookies")
    def forwarded_cookies(self) -> Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedCookiesArgs']]:
        """
        Cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. See below.
        """
        return pulumi.get(self, "forwarded_cookies")

    @forwarded_cookies.setter
    def forwarded_cookies(self, value: Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedCookiesArgs']]):
        pulumi.set(self, "forwarded_cookies", value)

    @property
    @pulumi.getter(name="forwardedHeaders")
    def forwarded_headers(self) -> Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedHeadersArgs']]:
        """
        Headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. See below.
        """
        return pulumi.get(self, "forwarded_headers")

    @forwarded_headers.setter
    def forwarded_headers(self, value: Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedHeadersArgs']]):
        pulumi.set(self, "forwarded_headers", value)

    @property
    @pulumi.getter(name="forwardedQueryStrings")
    def forwarded_query_strings(self) -> Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedQueryStringsArgs']]:
        """
        Query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. See below.
        """
        return pulumi.get(self, "forwarded_query_strings")

    @forwarded_query_strings.setter
    def forwarded_query_strings(self, value: Optional[pulumi.Input['DistributionCacheBehaviorSettingsForwardedQueryStringsArgs']]):
        pulumi.set(self, "forwarded_query_strings", value)

    @property
    @pulumi.getter(name="maximumTtl")
    def maximum_ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
        """
        return pulumi.get(self, "maximum_ttl")

    @maximum_ttl.setter
    def maximum_ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "maximum_ttl", value)

    @property
    @pulumi.getter(name="minimumTtl")
    def minimum_ttl(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
        """
        return pulumi.get(self, "minimum_ttl")

    @minimum_ttl.setter
    def minimum_ttl(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "minimum_ttl", value)


if not MYPY:
    class DistributionCacheBehaviorSettingsForwardedCookiesArgsDict(TypedDict):
        cookies_allow_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Specific cookies to forward to your distribution's origin.
        """
        option: NotRequired[pulumi.Input[builtins.str]]
        """
        Which cookies to forward to the distribution's origin for a cache behavior. Valid values: `all`, `none`, `allow-list`.
        """
elif False:
    DistributionCacheBehaviorSettingsForwardedCookiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DistributionCacheBehaviorSettingsForwardedCookiesArgs:
    def __init__(__self__, *,
                 cookies_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 option: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] cookies_allow_lists: Specific cookies to forward to your distribution's origin.
        :param pulumi.Input[builtins.str] option: Which cookies to forward to the distribution's origin for a cache behavior. Valid values: `all`, `none`, `allow-list`.
        """
        if cookies_allow_lists is not None:
            pulumi.set(__self__, "cookies_allow_lists", cookies_allow_lists)
        if option is not None:
            pulumi.set(__self__, "option", option)

    @property
    @pulumi.getter(name="cookiesAllowLists")
    def cookies_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Specific cookies to forward to your distribution's origin.
        """
        return pulumi.get(self, "cookies_allow_lists")

    @cookies_allow_lists.setter
    def cookies_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "cookies_allow_lists", value)

    @property
    @pulumi.getter
    def option(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Which cookies to forward to the distribution's origin for a cache behavior. Valid values: `all`, `none`, `allow-list`.
        """
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "option", value)


if not MYPY:
    class DistributionCacheBehaviorSettingsForwardedHeadersArgsDict(TypedDict):
        headers_allow_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Specific headers to forward to your distribution's origin.
        """
        option: NotRequired[pulumi.Input[builtins.str]]
        """
        Headers that you want your distribution to forward to your origin and base caching on. Valid values: `default`, `allow-list`, `all`.
        """
elif False:
    DistributionCacheBehaviorSettingsForwardedHeadersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DistributionCacheBehaviorSettingsForwardedHeadersArgs:
    def __init__(__self__, *,
                 headers_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 option: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] headers_allow_lists: Specific headers to forward to your distribution's origin.
        :param pulumi.Input[builtins.str] option: Headers that you want your distribution to forward to your origin and base caching on. Valid values: `default`, `allow-list`, `all`.
        """
        if headers_allow_lists is not None:
            pulumi.set(__self__, "headers_allow_lists", headers_allow_lists)
        if option is not None:
            pulumi.set(__self__, "option", option)

    @property
    @pulumi.getter(name="headersAllowLists")
    def headers_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Specific headers to forward to your distribution's origin.
        """
        return pulumi.get(self, "headers_allow_lists")

    @headers_allow_lists.setter
    def headers_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "headers_allow_lists", value)

    @property
    @pulumi.getter
    def option(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Headers that you want your distribution to forward to your origin and base caching on. Valid values: `default`, `allow-list`, `all`.
        """
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "option", value)


if not MYPY:
    class DistributionCacheBehaviorSettingsForwardedQueryStringsArgsDict(TypedDict):
        option: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether the distribution forwards and caches based on query strings.
        """
        query_strings_allowed_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Specific query strings that the distribution forwards to the origin.
        """
elif False:
    DistributionCacheBehaviorSettingsForwardedQueryStringsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DistributionCacheBehaviorSettingsForwardedQueryStringsArgs:
    def __init__(__self__, *,
                 option: Optional[pulumi.Input[builtins.bool]] = None,
                 query_strings_allowed_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.bool] option: Whether the distribution forwards and caches based on query strings.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] query_strings_allowed_lists: Specific query strings that the distribution forwards to the origin.
        """
        if option is not None:
            pulumi.set(__self__, "option", option)
        if query_strings_allowed_lists is not None:
            pulumi.set(__self__, "query_strings_allowed_lists", query_strings_allowed_lists)

    @property
    @pulumi.getter
    def option(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether the distribution forwards and caches based on query strings.
        """
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "option", value)

    @property
    @pulumi.getter(name="queryStringsAllowedLists")
    def query_strings_allowed_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Specific query strings that the distribution forwards to the origin.
        """
        return pulumi.get(self, "query_strings_allowed_lists")

    @query_strings_allowed_lists.setter
    def query_strings_allowed_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "query_strings_allowed_lists", value)


if not MYPY:
    class DistributionDefaultCacheBehaviorArgsDict(TypedDict):
        behavior: pulumi.Input[builtins.str]
        """
        Cache behavior of the distribution. Valid values: `cache`, `dont-cache`.
        """
elif False:
    DistributionDefaultCacheBehaviorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DistributionDefaultCacheBehaviorArgs:
    def __init__(__self__, *,
                 behavior: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] behavior: Cache behavior of the distribution. Valid values: `cache`, `dont-cache`.
        """
        pulumi.set(__self__, "behavior", behavior)

    @property
    @pulumi.getter
    def behavior(self) -> pulumi.Input[builtins.str]:
        """
        Cache behavior of the distribution. Valid values: `cache`, `dont-cache`.
        """
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "behavior", value)


if not MYPY:
    class DistributionLocationArgsDict(TypedDict):
        availability_zone: pulumi.Input[builtins.str]
        """
        Availability Zone. Follows the format us-east-2a (case-sensitive).
        """
        region_name: pulumi.Input[builtins.str]
        """
        AWS Region name.
        """
elif False:
    DistributionLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DistributionLocationArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[builtins.str],
                 region_name: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] availability_zone: Availability Zone. Follows the format us-east-2a (case-sensitive).
        :param pulumi.Input[builtins.str] region_name: AWS Region name.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[builtins.str]:
        """
        Availability Zone. Follows the format us-east-2a (case-sensitive).
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> pulumi.Input[builtins.str]:
        """
        AWS Region name.
        """
        return pulumi.get(self, "region_name")

    @region_name.setter
    def region_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region_name", value)


if not MYPY:
    class DistributionOriginArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the origin resource. Your origin can be an instance with an attached static IP, a bucket, or a load balancer that has at least one instance attached to it.
        """
        region_name: pulumi.Input[builtins.str]
        """
        AWS Region name of the origin resource.
        """
        protocol_policy: NotRequired[pulumi.Input[builtins.str]]
        """
        Protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
        """
        resource_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Lightsail resource type (e.g., Distribution).
        """
elif False:
    DistributionOriginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DistributionOriginArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 region_name: pulumi.Input[builtins.str],
                 protocol_policy: Optional[pulumi.Input[builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] name: Name of the origin resource. Your origin can be an instance with an attached static IP, a bucket, or a load balancer that has at least one instance attached to it.
        :param pulumi.Input[builtins.str] region_name: AWS Region name of the origin resource.
        :param pulumi.Input[builtins.str] protocol_policy: Protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
        :param pulumi.Input[builtins.str] resource_type: Lightsail resource type (e.g., Distribution).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region_name", region_name)
        if protocol_policy is not None:
            pulumi.set(__self__, "protocol_policy", protocol_policy)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the origin resource. Your origin can be an instance with an attached static IP, a bucket, or a load balancer that has at least one instance attached to it.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> pulumi.Input[builtins.str]:
        """
        AWS Region name of the origin resource.
        """
        return pulumi.get(self, "region_name")

    @region_name.setter
    def region_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "region_name", value)

    @property
    @pulumi.getter(name="protocolPolicy")
    def protocol_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
        """
        return pulumi.get(self, "protocol_policy")

    @protocol_policy.setter
    def protocol_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol_policy", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Lightsail resource type (e.g., Distribution).
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_type", value)


if not MYPY:
    class InstanceAddOnArgsDict(TypedDict):
        snapshot_time: pulumi.Input[builtins.str]
        """
        Daily time when an automatic snapshot will be created. Must be in HH:00 format, and in an hourly increment and specified in Coordinated Universal Time (UTC). The snapshot will be automatically created between the time specified and up to 45 minutes after.
        """
        status: pulumi.Input[builtins.str]
        """
        Status of the add-on. Valid values: `Enabled`, `Disabled`.
        """
        type: pulumi.Input[builtins.str]
        """
        Add-on type. There is currently only one valid type `AutoSnapshot`.
        """
elif False:
    InstanceAddOnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceAddOnArgs:
    def __init__(__self__, *,
                 snapshot_time: pulumi.Input[builtins.str],
                 status: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] snapshot_time: Daily time when an automatic snapshot will be created. Must be in HH:00 format, and in an hourly increment and specified in Coordinated Universal Time (UTC). The snapshot will be automatically created between the time specified and up to 45 minutes after.
        :param pulumi.Input[builtins.str] status: Status of the add-on. Valid values: `Enabled`, `Disabled`.
        :param pulumi.Input[builtins.str] type: Add-on type. There is currently only one valid type `AutoSnapshot`.
        """
        pulumi.set(__self__, "snapshot_time", snapshot_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="snapshotTime")
    def snapshot_time(self) -> pulumi.Input[builtins.str]:
        """
        Daily time when an automatic snapshot will be created. Must be in HH:00 format, and in an hourly increment and specified in Coordinated Universal Time (UTC). The snapshot will be automatically created between the time specified and up to 45 minutes after.
        """
        return pulumi.get(self, "snapshot_time")

    @snapshot_time.setter
    def snapshot_time(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "snapshot_time", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[builtins.str]:
        """
        Status of the add-on. Valid values: `Enabled`, `Disabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Add-on type. There is currently only one valid type `AutoSnapshot`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InstancePublicPortsPortInfoArgsDict(TypedDict):
        from_port: pulumi.Input[builtins.int]
        """
        First port in a range of open ports on an instance.
        """
        protocol: pulumi.Input[builtins.str]
        """
        IP protocol name. Valid values: `tcp`, `all`, `udp`, `icmp`.
        """
        to_port: pulumi.Input[builtins.int]
        """
        Last port in a range of open ports on an instance.

        The following arguments are optional:
        """
        cidr_list_aliases: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Set of CIDR aliases that define access for a preconfigured range of IP addresses.
        """
        cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Set of CIDR blocks.
        """
        ipv6_cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Set of IPv6 CIDR blocks.
        """
elif False:
    InstancePublicPortsPortInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstancePublicPortsPortInfoArgs:
    def __init__(__self__, *,
                 from_port: pulumi.Input[builtins.int],
                 protocol: pulumi.Input[builtins.str],
                 to_port: pulumi.Input[builtins.int],
                 cidr_list_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv6_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.int] from_port: First port in a range of open ports on an instance.
        :param pulumi.Input[builtins.str] protocol: IP protocol name. Valid values: `tcp`, `all`, `udp`, `icmp`.
        :param pulumi.Input[builtins.int] to_port: Last port in a range of open ports on an instance.
               
               The following arguments are optional:
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] cidr_list_aliases: Set of CIDR aliases that define access for a preconfigured range of IP addresses.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] cidrs: Set of CIDR blocks.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ipv6_cidrs: Set of IPv6 CIDR blocks.
        """
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "to_port", to_port)
        if cidr_list_aliases is not None:
            pulumi.set(__self__, "cidr_list_aliases", cidr_list_aliases)
        if cidrs is not None:
            pulumi.set(__self__, "cidrs", cidrs)
        if ipv6_cidrs is not None:
            pulumi.set(__self__, "ipv6_cidrs", ipv6_cidrs)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> pulumi.Input[builtins.int]:
        """
        First port in a range of open ports on an instance.
        """
        return pulumi.get(self, "from_port")

    @from_port.setter
    def from_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "from_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        """
        IP protocol name. Valid values: `tcp`, `all`, `udp`, `icmp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> pulumi.Input[builtins.int]:
        """
        Last port in a range of open ports on an instance.

        The following arguments are optional:
        """
        return pulumi.get(self, "to_port")

    @to_port.setter
    def to_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "to_port", value)

    @property
    @pulumi.getter(name="cidrListAliases")
    def cidr_list_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Set of CIDR aliases that define access for a preconfigured range of IP addresses.
        """
        return pulumi.get(self, "cidr_list_aliases")

    @cidr_list_aliases.setter
    def cidr_list_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "cidr_list_aliases", value)

    @property
    @pulumi.getter
    def cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Set of CIDR blocks.
        """
        return pulumi.get(self, "cidrs")

    @cidrs.setter
    def cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "cidrs", value)

    @property
    @pulumi.getter(name="ipv6Cidrs")
    def ipv6_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Set of IPv6 CIDR blocks.
        """
        return pulumi.get(self, "ipv6_cidrs")

    @ipv6_cidrs.setter
    def ipv6_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ipv6_cidrs", value)


if not MYPY:
    class LbCertificateDomainValidationRecordArgsDict(TypedDict):
        domain_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Domain name (e.g., example.com) for your SSL/TLS certificate.
        """
        resource_record_name: NotRequired[pulumi.Input[builtins.str]]
        resource_record_type: NotRequired[pulumi.Input[builtins.str]]
        resource_record_value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    LbCertificateDomainValidationRecordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LbCertificateDomainValidationRecordArgs:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[builtins.str]] = None,
                 resource_record_name: Optional[pulumi.Input[builtins.str]] = None,
                 resource_record_type: Optional[pulumi.Input[builtins.str]] = None,
                 resource_record_value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] domain_name: Domain name (e.g., example.com) for your SSL/TLS certificate.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if resource_record_name is not None:
            pulumi.set(__self__, "resource_record_name", resource_record_name)
        if resource_record_type is not None:
            pulumi.set(__self__, "resource_record_type", resource_record_type)
        if resource_record_value is not None:
            pulumi.set(__self__, "resource_record_value", resource_record_value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Domain name (e.g., example.com) for your SSL/TLS certificate.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="resourceRecordName")
    def resource_record_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "resource_record_name")

    @resource_record_name.setter
    def resource_record_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_record_name", value)

    @property
    @pulumi.getter(name="resourceRecordType")
    def resource_record_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "resource_record_type")

    @resource_record_type.setter
    def resource_record_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_record_type", value)

    @property
    @pulumi.getter(name="resourceRecordValue")
    def resource_record_value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "resource_record_value")

    @resource_record_value.setter
    def resource_record_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_record_value", value)


