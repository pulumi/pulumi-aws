# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'PipelineContentConfig',
    'PipelineContentConfigPermission',
    'PipelineNotifications',
    'PipelineThumbnailConfig',
    'PipelineThumbnailConfigPermission',
    'PresetAudio',
    'PresetAudioCodecOptions',
    'PresetThumbnails',
    'PresetVideo',
    'PresetVideoWatermark',
]

@pulumi.output_type
class PipelineContentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineContentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineContentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineContentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 storage_class: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class PipelineContentConfigPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "granteeType":
            suggest = "grantee_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineContentConfigPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineContentConfigPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineContentConfigPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accesses: Optional[Sequence[str]] = None,
                 grantee: Optional[str] = None,
                 grantee_type: Optional[str] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if grantee is not None:
            pulumi.set(__self__, "grantee", grantee)
        if grantee_type is not None:
            pulumi.set(__self__, "grantee_type", grantee_type)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def grantee(self) -> Optional[str]:
        return pulumi.get(self, "grantee")

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> Optional[str]:
        return pulumi.get(self, "grantee_type")


@pulumi.output_type
class PipelineNotifications(dict):
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 error: Optional[str] = None,
                 progressing: Optional[str] = None,
                 warning: Optional[str] = None):
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if progressing is not None:
            pulumi.set(__self__, "progressing", progressing)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter
    def error(self) -> Optional[str]:
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def progressing(self) -> Optional[str]:
        return pulumi.get(self, "progressing")

    @property
    @pulumi.getter
    def warning(self) -> Optional[str]:
        return pulumi.get(self, "warning")


@pulumi.output_type
class PipelineThumbnailConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineThumbnailConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineThumbnailConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineThumbnailConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 storage_class: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class PipelineThumbnailConfigPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "granteeType":
            suggest = "grantee_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineThumbnailConfigPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineThumbnailConfigPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineThumbnailConfigPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accesses: Optional[Sequence[str]] = None,
                 grantee: Optional[str] = None,
                 grantee_type: Optional[str] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if grantee is not None:
            pulumi.set(__self__, "grantee", grantee)
        if grantee_type is not None:
            pulumi.set(__self__, "grantee_type", grantee_type)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def grantee(self) -> Optional[str]:
        return pulumi.get(self, "grantee")

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> Optional[str]:
        return pulumi.get(self, "grantee_type")


@pulumi.output_type
class PresetAudio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioPackingMode":
            suggest = "audio_packing_mode"
        elif key == "bitRate":
            suggest = "bit_rate"
        elif key == "sampleRate":
            suggest = "sample_rate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PresetAudio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PresetAudio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PresetAudio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_packing_mode: Optional[str] = None,
                 bit_rate: Optional[str] = None,
                 channels: Optional[str] = None,
                 codec: Optional[str] = None,
                 sample_rate: Optional[str] = None):
        if audio_packing_mode is not None:
            pulumi.set(__self__, "audio_packing_mode", audio_packing_mode)
        if bit_rate is not None:
            pulumi.set(__self__, "bit_rate", bit_rate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)

    @property
    @pulumi.getter(name="audioPackingMode")
    def audio_packing_mode(self) -> Optional[str]:
        return pulumi.get(self, "audio_packing_mode")

    @property
    @pulumi.getter(name="bitRate")
    def bit_rate(self) -> Optional[str]:
        return pulumi.get(self, "bit_rate")

    @property
    @pulumi.getter
    def channels(self) -> Optional[str]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[str]:
        return pulumi.get(self, "sample_rate")


@pulumi.output_type
class PresetAudioCodecOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitDepth":
            suggest = "bit_depth"
        elif key == "bitOrder":
            suggest = "bit_order"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PresetAudioCodecOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PresetAudioCodecOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PresetAudioCodecOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bit_depth: Optional[str] = None,
                 bit_order: Optional[str] = None,
                 profile: Optional[str] = None,
                 signed: Optional[str] = None):
        if bit_depth is not None:
            pulumi.set(__self__, "bit_depth", bit_depth)
        if bit_order is not None:
            pulumi.set(__self__, "bit_order", bit_order)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if signed is not None:
            pulumi.set(__self__, "signed", signed)

    @property
    @pulumi.getter(name="bitDepth")
    def bit_depth(self) -> Optional[str]:
        return pulumi.get(self, "bit_depth")

    @property
    @pulumi.getter(name="bitOrder")
    def bit_order(self) -> Optional[str]:
        return pulumi.get(self, "bit_order")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def signed(self) -> Optional[str]:
        return pulumi.get(self, "signed")


@pulumi.output_type
class PresetThumbnails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aspectRatio":
            suggest = "aspect_ratio"
        elif key == "maxHeight":
            suggest = "max_height"
        elif key == "maxWidth":
            suggest = "max_width"
        elif key == "paddingPolicy":
            suggest = "padding_policy"
        elif key == "sizingPolicy":
            suggest = "sizing_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PresetThumbnails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PresetThumbnails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PresetThumbnails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aspect_ratio: Optional[str] = None,
                 format: Optional[str] = None,
                 interval: Optional[str] = None,
                 max_height: Optional[str] = None,
                 max_width: Optional[str] = None,
                 padding_policy: Optional[str] = None,
                 resolution: Optional[str] = None,
                 sizing_policy: Optional[str] = None):
        if aspect_ratio is not None:
            pulumi.set(__self__, "aspect_ratio", aspect_ratio)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if max_height is not None:
            pulumi.set(__self__, "max_height", max_height)
        if max_width is not None:
            pulumi.set(__self__, "max_width", max_width)
        if padding_policy is not None:
            pulumi.set(__self__, "padding_policy", padding_policy)
        if resolution is not None:
            pulumi.set(__self__, "resolution", resolution)
        if sizing_policy is not None:
            pulumi.set(__self__, "sizing_policy", sizing_policy)

    @property
    @pulumi.getter(name="aspectRatio")
    def aspect_ratio(self) -> Optional[str]:
        return pulumi.get(self, "aspect_ratio")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxHeight")
    def max_height(self) -> Optional[str]:
        return pulumi.get(self, "max_height")

    @property
    @pulumi.getter(name="maxWidth")
    def max_width(self) -> Optional[str]:
        return pulumi.get(self, "max_width")

    @property
    @pulumi.getter(name="paddingPolicy")
    def padding_policy(self) -> Optional[str]:
        return pulumi.get(self, "padding_policy")

    @property
    @pulumi.getter
    def resolution(self) -> Optional[str]:
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter(name="sizingPolicy")
    def sizing_policy(self) -> Optional[str]:
        return pulumi.get(self, "sizing_policy")


@pulumi.output_type
class PresetVideo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aspectRatio":
            suggest = "aspect_ratio"
        elif key == "bitRate":
            suggest = "bit_rate"
        elif key == "displayAspectRatio":
            suggest = "display_aspect_ratio"
        elif key == "fixedGop":
            suggest = "fixed_gop"
        elif key == "frameRate":
            suggest = "frame_rate"
        elif key == "keyframesMaxDist":
            suggest = "keyframes_max_dist"
        elif key == "maxFrameRate":
            suggest = "max_frame_rate"
        elif key == "maxHeight":
            suggest = "max_height"
        elif key == "maxWidth":
            suggest = "max_width"
        elif key == "paddingPolicy":
            suggest = "padding_policy"
        elif key == "sizingPolicy":
            suggest = "sizing_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PresetVideo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PresetVideo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PresetVideo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aspect_ratio: Optional[str] = None,
                 bit_rate: Optional[str] = None,
                 codec: Optional[str] = None,
                 display_aspect_ratio: Optional[str] = None,
                 fixed_gop: Optional[str] = None,
                 frame_rate: Optional[str] = None,
                 keyframes_max_dist: Optional[str] = None,
                 max_frame_rate: Optional[str] = None,
                 max_height: Optional[str] = None,
                 max_width: Optional[str] = None,
                 padding_policy: Optional[str] = None,
                 resolution: Optional[str] = None,
                 sizing_policy: Optional[str] = None):
        if aspect_ratio is not None:
            pulumi.set(__self__, "aspect_ratio", aspect_ratio)
        if bit_rate is not None:
            pulumi.set(__self__, "bit_rate", bit_rate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if display_aspect_ratio is not None:
            pulumi.set(__self__, "display_aspect_ratio", display_aspect_ratio)
        if fixed_gop is not None:
            pulumi.set(__self__, "fixed_gop", fixed_gop)
        if frame_rate is not None:
            pulumi.set(__self__, "frame_rate", frame_rate)
        if keyframes_max_dist is not None:
            pulumi.set(__self__, "keyframes_max_dist", keyframes_max_dist)
        if max_frame_rate is not None:
            pulumi.set(__self__, "max_frame_rate", max_frame_rate)
        if max_height is not None:
            pulumi.set(__self__, "max_height", max_height)
        if max_width is not None:
            pulumi.set(__self__, "max_width", max_width)
        if padding_policy is not None:
            pulumi.set(__self__, "padding_policy", padding_policy)
        if resolution is not None:
            pulumi.set(__self__, "resolution", resolution)
        if sizing_policy is not None:
            pulumi.set(__self__, "sizing_policy", sizing_policy)

    @property
    @pulumi.getter(name="aspectRatio")
    def aspect_ratio(self) -> Optional[str]:
        return pulumi.get(self, "aspect_ratio")

    @property
    @pulumi.getter(name="bitRate")
    def bit_rate(self) -> Optional[str]:
        return pulumi.get(self, "bit_rate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="displayAspectRatio")
    def display_aspect_ratio(self) -> Optional[str]:
        return pulumi.get(self, "display_aspect_ratio")

    @property
    @pulumi.getter(name="fixedGop")
    def fixed_gop(self) -> Optional[str]:
        return pulumi.get(self, "fixed_gop")

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> Optional[str]:
        return pulumi.get(self, "frame_rate")

    @property
    @pulumi.getter(name="keyframesMaxDist")
    def keyframes_max_dist(self) -> Optional[str]:
        return pulumi.get(self, "keyframes_max_dist")

    @property
    @pulumi.getter(name="maxFrameRate")
    def max_frame_rate(self) -> Optional[str]:
        return pulumi.get(self, "max_frame_rate")

    @property
    @pulumi.getter(name="maxHeight")
    def max_height(self) -> Optional[str]:
        return pulumi.get(self, "max_height")

    @property
    @pulumi.getter(name="maxWidth")
    def max_width(self) -> Optional[str]:
        return pulumi.get(self, "max_width")

    @property
    @pulumi.getter(name="paddingPolicy")
    def padding_policy(self) -> Optional[str]:
        return pulumi.get(self, "padding_policy")

    @property
    @pulumi.getter
    def resolution(self) -> Optional[str]:
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter(name="sizingPolicy")
    def sizing_policy(self) -> Optional[str]:
        return pulumi.get(self, "sizing_policy")


@pulumi.output_type
class PresetVideoWatermark(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "horizontalAlign":
            suggest = "horizontal_align"
        elif key == "horizontalOffset":
            suggest = "horizontal_offset"
        elif key == "maxHeight":
            suggest = "max_height"
        elif key == "maxWidth":
            suggest = "max_width"
        elif key == "sizingPolicy":
            suggest = "sizing_policy"
        elif key == "verticalAlign":
            suggest = "vertical_align"
        elif key == "verticalOffset":
            suggest = "vertical_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PresetVideoWatermark. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PresetVideoWatermark.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PresetVideoWatermark.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 horizontal_align: Optional[str] = None,
                 horizontal_offset: Optional[str] = None,
                 id: Optional[str] = None,
                 max_height: Optional[str] = None,
                 max_width: Optional[str] = None,
                 opacity: Optional[str] = None,
                 sizing_policy: Optional[str] = None,
                 target: Optional[str] = None,
                 vertical_align: Optional[str] = None,
                 vertical_offset: Optional[str] = None):
        if horizontal_align is not None:
            pulumi.set(__self__, "horizontal_align", horizontal_align)
        if horizontal_offset is not None:
            pulumi.set(__self__, "horizontal_offset", horizontal_offset)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_height is not None:
            pulumi.set(__self__, "max_height", max_height)
        if max_width is not None:
            pulumi.set(__self__, "max_width", max_width)
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if sizing_policy is not None:
            pulumi.set(__self__, "sizing_policy", sizing_policy)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)
        if vertical_offset is not None:
            pulumi.set(__self__, "vertical_offset", vertical_offset)

    @property
    @pulumi.getter(name="horizontalAlign")
    def horizontal_align(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_align")

    @property
    @pulumi.getter(name="horizontalOffset")
    def horizontal_offset(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_offset")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxHeight")
    def max_height(self) -> Optional[str]:
        return pulumi.get(self, "max_height")

    @property
    @pulumi.getter(name="maxWidth")
    def max_width(self) -> Optional[str]:
        return pulumi.get(self, "max_width")

    @property
    @pulumi.getter
    def opacity(self) -> Optional[str]:
        return pulumi.get(self, "opacity")

    @property
    @pulumi.getter(name="sizingPolicy")
    def sizing_policy(self) -> Optional[str]:
        return pulumi.get(self, "sizing_policy")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[str]:
        return pulumi.get(self, "vertical_align")

    @property
    @pulumi.getter(name="verticalOffset")
    def vertical_offset(self) -> Optional[str]:
        return pulumi.get(self, "vertical_offset")


