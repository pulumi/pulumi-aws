# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TrustAnchorNotificationSettingArgs',
    'TrustAnchorNotificationSettingArgsDict',
    'TrustAnchorSourceArgs',
    'TrustAnchorSourceArgsDict',
    'TrustAnchorSourceSourceDataArgs',
    'TrustAnchorSourceSourceDataArgsDict',
]

MYPY = False

if not MYPY:
    class TrustAnchorNotificationSettingArgsDict(TypedDict):
        channel: NotRequired[pulumi.Input[_builtins.str]]
        configured_by: NotRequired[pulumi.Input[_builtins.str]]
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether or not the Trust Anchor should be enabled.
        """
        event: NotRequired[pulumi.Input[_builtins.str]]
        threshold: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    TrustAnchorNotificationSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrustAnchorNotificationSettingArgs:
    def __init__(__self__, *,
                 channel: Optional[pulumi.Input[_builtins.str]] = None,
                 configured_by: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 event: Optional[pulumi.Input[_builtins.str]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] enabled: Whether or not the Trust Anchor should be enabled.
        """
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if configured_by is not None:
            pulumi.set(__self__, "configured_by", configured_by)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "channel", value)

    @_builtins.property
    @pulumi.getter(name="configuredBy")
    def configured_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "configured_by")

    @configured_by.setter
    def configured_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configured_by", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether or not the Trust Anchor should be enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)


if not MYPY:
    class TrustAnchorSourceArgsDict(TypedDict):
        source_data: pulumi.Input['TrustAnchorSourceSourceDataArgsDict']
        """
        The data denoting the source of trust, documented below
        """
        source_type: pulumi.Input[_builtins.str]
        """
        The type of the source of trust. Must be either `AWS_ACM_PCA` or `CERTIFICATE_BUNDLE`.
        """
elif False:
    TrustAnchorSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrustAnchorSourceArgs:
    def __init__(__self__, *,
                 source_data: pulumi.Input['TrustAnchorSourceSourceDataArgs'],
                 source_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input['TrustAnchorSourceSourceDataArgs'] source_data: The data denoting the source of trust, documented below
        :param pulumi.Input[_builtins.str] source_type: The type of the source of trust. Must be either `AWS_ACM_PCA` or `CERTIFICATE_BUNDLE`.
        """
        pulumi.set(__self__, "source_data", source_data)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="sourceData")
    def source_data(self) -> pulumi.Input['TrustAnchorSourceSourceDataArgs']:
        """
        The data denoting the source of trust, documented below
        """
        return pulumi.get(self, "source_data")

    @source_data.setter
    def source_data(self, value: pulumi.Input['TrustAnchorSourceSourceDataArgs']):
        pulumi.set(self, "source_data", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the source of trust. Must be either `AWS_ACM_PCA` or `CERTIFICATE_BUNDLE`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)


if not MYPY:
    class TrustAnchorSourceSourceDataArgsDict(TypedDict):
        acm_pca_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ARN of an ACM Private Certificate Authority.
        """
        x509_certificate_data: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TrustAnchorSourceSourceDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrustAnchorSourceSourceDataArgs:
    def __init__(__self__, *,
                 acm_pca_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 x509_certificate_data: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] acm_pca_arn: The ARN of an ACM Private Certificate Authority.
        """
        if acm_pca_arn is not None:
            pulumi.set(__self__, "acm_pca_arn", acm_pca_arn)
        if x509_certificate_data is not None:
            pulumi.set(__self__, "x509_certificate_data", x509_certificate_data)

    @_builtins.property
    @pulumi.getter(name="acmPcaArn")
    def acm_pca_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ARN of an ACM Private Certificate Authority.
        """
        return pulumi.get(self, "acm_pca_arn")

    @acm_pca_arn.setter
    def acm_pca_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acm_pca_arn", value)

    @_builtins.property
    @pulumi.getter(name="x509CertificateData")
    def x509_certificate_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "x509_certificate_data")

    @x509_certificate_data.setter
    def x509_certificate_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x509_certificate_data", value)


