# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SigningProfileArgs', 'SigningProfile']

@pulumi.input_type
class SigningProfileArgs:
    def __init__(__self__, *,
                 platform_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 signature_validity_period: Optional[pulumi.Input['SigningProfileSignatureValidityPeriodArgs']] = None,
                 signing_material: Optional[pulumi.Input['SigningProfileSigningMaterialArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SigningProfile resource.
        :param pulumi.Input[str] platform_id: The ID of the platform that is used by the target signing profile.
        :param pulumi.Input[str] name: A unique signing profile name. By default generated by the provider. Signing profile names are immutable and cannot be reused after canceled.
        :param pulumi.Input[str] name_prefix: A signing profile name prefix. The provider will generate a unique suffix. Conflicts with `name`.
        :param pulumi.Input['SigningProfileSignatureValidityPeriodArgs'] signature_validity_period: The validity period for a signing job.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A list of tags associated with the signing profile. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        pulumi.set(__self__, "platform_id", platform_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if signature_validity_period is not None:
            pulumi.set(__self__, "signature_validity_period", signature_validity_period)
        if signing_material is not None:
            pulumi.set(__self__, "signing_material", signing_material)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> pulumi.Input[str]:
        """
        The ID of the platform that is used by the target signing profile.
        """
        return pulumi.get(self, "platform_id")

    @platform_id.setter
    def platform_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "platform_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique signing profile name. By default generated by the provider. Signing profile names are immutable and cannot be reused after canceled.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        A signing profile name prefix. The provider will generate a unique suffix. Conflicts with `name`.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="signatureValidityPeriod")
    def signature_validity_period(self) -> Optional[pulumi.Input['SigningProfileSignatureValidityPeriodArgs']]:
        """
        The validity period for a signing job.
        """
        return pulumi.get(self, "signature_validity_period")

    @signature_validity_period.setter
    def signature_validity_period(self, value: Optional[pulumi.Input['SigningProfileSignatureValidityPeriodArgs']]):
        pulumi.set(self, "signature_validity_period", value)

    @property
    @pulumi.getter(name="signingMaterial")
    def signing_material(self) -> Optional[pulumi.Input['SigningProfileSigningMaterialArgs']]:
        return pulumi.get(self, "signing_material")

    @signing_material.setter
    def signing_material(self, value: Optional[pulumi.Input['SigningProfileSigningMaterialArgs']]):
        pulumi.set(self, "signing_material", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of tags associated with the signing profile. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _SigningProfileState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 platform_display_name: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[str]] = None,
                 revocation_records: Optional[pulumi.Input[Sequence[pulumi.Input['SigningProfileRevocationRecordArgs']]]] = None,
                 signature_validity_period: Optional[pulumi.Input['SigningProfileSignatureValidityPeriodArgs']] = None,
                 signing_material: Optional[pulumi.Input['SigningProfileSigningMaterialArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_arn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SigningProfile resources.
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) for the signing profile.
        :param pulumi.Input[str] name: A unique signing profile name. By default generated by the provider. Signing profile names are immutable and cannot be reused after canceled.
        :param pulumi.Input[str] name_prefix: A signing profile name prefix. The provider will generate a unique suffix. Conflicts with `name`.
        :param pulumi.Input[str] platform_display_name: A human-readable name for the signing platform associated with the signing profile.
        :param pulumi.Input[str] platform_id: The ID of the platform that is used by the target signing profile.
        :param pulumi.Input[Sequence[pulumi.Input['SigningProfileRevocationRecordArgs']]] revocation_records: Revocation information for a signing profile.
        :param pulumi.Input['SigningProfileSignatureValidityPeriodArgs'] signature_validity_period: The validity period for a signing job.
        :param pulumi.Input[str] status: The status of the target signing profile.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A list of tags associated with the signing profile. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        :param pulumi.Input[str] version: The current version of the signing profile.
        :param pulumi.Input[str] version_arn: The signing profile ARN, including the profile version.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if platform_display_name is not None:
            pulumi.set(__self__, "platform_display_name", platform_display_name)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if revocation_records is not None:
            pulumi.set(__self__, "revocation_records", revocation_records)
        if signature_validity_period is not None:
            pulumi.set(__self__, "signature_validity_period", signature_validity_period)
        if signing_material is not None:
            pulumi.set(__self__, "signing_material", signing_material)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_arn is not None:
            pulumi.set(__self__, "version_arn", version_arn)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) for the signing profile.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique signing profile name. By default generated by the provider. Signing profile names are immutable and cannot be reused after canceled.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        A signing profile name prefix. The provider will generate a unique suffix. Conflicts with `name`.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="platformDisplayName")
    def platform_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable name for the signing platform associated with the signing profile.
        """
        return pulumi.get(self, "platform_display_name")

    @platform_display_name.setter
    def platform_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_display_name", value)

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the platform that is used by the target signing profile.
        """
        return pulumi.get(self, "platform_id")

    @platform_id.setter
    def platform_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_id", value)

    @property
    @pulumi.getter(name="revocationRecords")
    def revocation_records(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SigningProfileRevocationRecordArgs']]]]:
        """
        Revocation information for a signing profile.
        """
        return pulumi.get(self, "revocation_records")

    @revocation_records.setter
    def revocation_records(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SigningProfileRevocationRecordArgs']]]]):
        pulumi.set(self, "revocation_records", value)

    @property
    @pulumi.getter(name="signatureValidityPeriod")
    def signature_validity_period(self) -> Optional[pulumi.Input['SigningProfileSignatureValidityPeriodArgs']]:
        """
        The validity period for a signing job.
        """
        return pulumi.get(self, "signature_validity_period")

    @signature_validity_period.setter
    def signature_validity_period(self, value: Optional[pulumi.Input['SigningProfileSignatureValidityPeriodArgs']]):
        pulumi.set(self, "signature_validity_period", value)

    @property
    @pulumi.getter(name="signingMaterial")
    def signing_material(self) -> Optional[pulumi.Input['SigningProfileSigningMaterialArgs']]:
        return pulumi.get(self, "signing_material")

    @signing_material.setter
    def signing_material(self, value: Optional[pulumi.Input['SigningProfileSigningMaterialArgs']]):
        pulumi.set(self, "signing_material", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the target signing profile.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of tags associated with the signing profile. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The current version of the signing profile.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionArn")
    def version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The signing profile ARN, including the profile version.
        """
        return pulumi.get(self, "version_arn")

    @version_arn.setter
    def version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_arn", value)


class SigningProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[str]] = None,
                 signature_validity_period: Optional[pulumi.Input[pulumi.InputType['SigningProfileSignatureValidityPeriodArgs']]] = None,
                 signing_material: Optional[pulumi.Input[pulumi.InputType['SigningProfileSigningMaterialArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Creates a Signer Signing Profile. A signing profile contains information about the code signing configuration parameters that can be used by a given code signing user.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test_sp = aws.signer.SigningProfile("testSp", platform_id="AWSLambda-SHA384-ECDSA")
        prod_sp = aws.signer.SigningProfile("prodSp",
            name_prefix="prod_sp_",
            platform_id="AWSLambda-SHA384-ECDSA",
            signature_validity_period=aws.signer.SigningProfileSignatureValidityPeriodArgs(
                type="YEARS",
                value=5,
            ),
            tags={
                "tag1": "value1",
                "tag2": "value2",
            })
        ```

        ## Import

        Using `pulumi import`, import Signer signing profiles using the `name`. For example:

        ```sh
         $ pulumi import aws:signer/signingProfile:SigningProfile test_signer_signing_profile test_sp_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: A unique signing profile name. By default generated by the provider. Signing profile names are immutable and cannot be reused after canceled.
        :param pulumi.Input[str] name_prefix: A signing profile name prefix. The provider will generate a unique suffix. Conflicts with `name`.
        :param pulumi.Input[str] platform_id: The ID of the platform that is used by the target signing profile.
        :param pulumi.Input[pulumi.InputType['SigningProfileSignatureValidityPeriodArgs']] signature_validity_period: The validity period for a signing job.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A list of tags associated with the signing profile. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SigningProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a Signer Signing Profile. A signing profile contains information about the code signing configuration parameters that can be used by a given code signing user.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test_sp = aws.signer.SigningProfile("testSp", platform_id="AWSLambda-SHA384-ECDSA")
        prod_sp = aws.signer.SigningProfile("prodSp",
            name_prefix="prod_sp_",
            platform_id="AWSLambda-SHA384-ECDSA",
            signature_validity_period=aws.signer.SigningProfileSignatureValidityPeriodArgs(
                type="YEARS",
                value=5,
            ),
            tags={
                "tag1": "value1",
                "tag2": "value2",
            })
        ```

        ## Import

        Using `pulumi import`, import Signer signing profiles using the `name`. For example:

        ```sh
         $ pulumi import aws:signer/signingProfile:SigningProfile test_signer_signing_profile test_sp_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK
        ```

        :param str resource_name: The name of the resource.
        :param SigningProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SigningProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[str]] = None,
                 signature_validity_period: Optional[pulumi.Input[pulumi.InputType['SigningProfileSignatureValidityPeriodArgs']]] = None,
                 signing_material: Optional[pulumi.Input[pulumi.InputType['SigningProfileSigningMaterialArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SigningProfileArgs.__new__(SigningProfileArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["name_prefix"] = name_prefix
            if platform_id is None and not opts.urn:
                raise TypeError("Missing required property 'platform_id'")
            __props__.__dict__["platform_id"] = platform_id
            __props__.__dict__["signature_validity_period"] = signature_validity_period
            __props__.__dict__["signing_material"] = signing_material
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["platform_display_name"] = None
            __props__.__dict__["revocation_records"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tags_all"] = None
            __props__.__dict__["version"] = None
            __props__.__dict__["version_arn"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["tagsAll"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SigningProfile, __self__).__init__(
            'aws:signer/signingProfile:SigningProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            name_prefix: Optional[pulumi.Input[str]] = None,
            platform_display_name: Optional[pulumi.Input[str]] = None,
            platform_id: Optional[pulumi.Input[str]] = None,
            revocation_records: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SigningProfileRevocationRecordArgs']]]]] = None,
            signature_validity_period: Optional[pulumi.Input[pulumi.InputType['SigningProfileSignatureValidityPeriodArgs']]] = None,
            signing_material: Optional[pulumi.Input[pulumi.InputType['SigningProfileSigningMaterialArgs']]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            version: Optional[pulumi.Input[str]] = None,
            version_arn: Optional[pulumi.Input[str]] = None) -> 'SigningProfile':
        """
        Get an existing SigningProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) for the signing profile.
        :param pulumi.Input[str] name: A unique signing profile name. By default generated by the provider. Signing profile names are immutable and cannot be reused after canceled.
        :param pulumi.Input[str] name_prefix: A signing profile name prefix. The provider will generate a unique suffix. Conflicts with `name`.
        :param pulumi.Input[str] platform_display_name: A human-readable name for the signing platform associated with the signing profile.
        :param pulumi.Input[str] platform_id: The ID of the platform that is used by the target signing profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SigningProfileRevocationRecordArgs']]]] revocation_records: Revocation information for a signing profile.
        :param pulumi.Input[pulumi.InputType['SigningProfileSignatureValidityPeriodArgs']] signature_validity_period: The validity period for a signing job.
        :param pulumi.Input[str] status: The status of the target signing profile.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A list of tags associated with the signing profile. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        :param pulumi.Input[str] version: The current version of the signing profile.
        :param pulumi.Input[str] version_arn: The signing profile ARN, including the profile version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SigningProfileState.__new__(_SigningProfileState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["name"] = name
        __props__.__dict__["name_prefix"] = name_prefix
        __props__.__dict__["platform_display_name"] = platform_display_name
        __props__.__dict__["platform_id"] = platform_id
        __props__.__dict__["revocation_records"] = revocation_records
        __props__.__dict__["signature_validity_period"] = signature_validity_period
        __props__.__dict__["signing_material"] = signing_material
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["version"] = version
        __props__.__dict__["version_arn"] = version_arn
        return SigningProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) for the signing profile.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique signing profile name. By default generated by the provider. Signing profile names are immutable and cannot be reused after canceled.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> pulumi.Output[str]:
        """
        A signing profile name prefix. The provider will generate a unique suffix. Conflicts with `name`.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="platformDisplayName")
    def platform_display_name(self) -> pulumi.Output[str]:
        """
        A human-readable name for the signing platform associated with the signing profile.
        """
        return pulumi.get(self, "platform_display_name")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> pulumi.Output[str]:
        """
        The ID of the platform that is used by the target signing profile.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="revocationRecords")
    def revocation_records(self) -> pulumi.Output[Sequence['outputs.SigningProfileRevocationRecord']]:
        """
        Revocation information for a signing profile.
        """
        return pulumi.get(self, "revocation_records")

    @property
    @pulumi.getter(name="signatureValidityPeriod")
    def signature_validity_period(self) -> pulumi.Output['outputs.SigningProfileSignatureValidityPeriod']:
        """
        The validity period for a signing job.
        """
        return pulumi.get(self, "signature_validity_period")

    @property
    @pulumi.getter(name="signingMaterial")
    def signing_material(self) -> pulumi.Output['outputs.SigningProfileSigningMaterial']:
        return pulumi.get(self, "signing_material")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the target signing profile.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A list of tags associated with the signing profile. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The current version of the signing profile.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionArn")
    def version_arn(self) -> pulumi.Output[str]:
        """
        The signing profile ARN, including the profile version.
        """
        return pulumi.get(self, "version_arn")

