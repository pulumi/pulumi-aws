# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CertificateDomainValidationOption',
    'CertificateOptions',
    'CertificateRenewalSummary',
    'CertificateValidationOption',
]

@pulumi.output_type
class CertificateDomainValidationOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "resourceRecordName":
            suggest = "resource_record_name"
        elif key == "resourceRecordType":
            suggest = "resource_record_type"
        elif key == "resourceRecordValue":
            suggest = "resource_record_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateDomainValidationOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateDomainValidationOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateDomainValidationOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[str] = None,
                 resource_record_name: Optional[str] = None,
                 resource_record_type: Optional[str] = None,
                 resource_record_value: Optional[str] = None):
        """
        :param str domain_name: Fully qualified domain name (FQDN) in the certificate.
        :param str resource_record_name: The name of the DNS record to create to validate the certificate
        :param str resource_record_type: The type of DNS record to create
        :param str resource_record_value: The value the DNS record needs to have
        """
        CertificateDomainValidationOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain_name=domain_name,
            resource_record_name=resource_record_name,
            resource_record_type=resource_record_type,
            resource_record_value=resource_record_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain_name: Optional[str] = None,
             resource_record_name: Optional[str] = None,
             resource_record_type: Optional[str] = None,
             resource_record_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if domain_name is None and 'domainName' in kwargs:
            domain_name = kwargs['domainName']
        if resource_record_name is None and 'resourceRecordName' in kwargs:
            resource_record_name = kwargs['resourceRecordName']
        if resource_record_type is None and 'resourceRecordType' in kwargs:
            resource_record_type = kwargs['resourceRecordType']
        if resource_record_value is None and 'resourceRecordValue' in kwargs:
            resource_record_value = kwargs['resourceRecordValue']

        if domain_name is not None:
            _setter("domain_name", domain_name)
        if resource_record_name is not None:
            _setter("resource_record_name", resource_record_name)
        if resource_record_type is not None:
            _setter("resource_record_type", resource_record_type)
        if resource_record_value is not None:
            _setter("resource_record_value", resource_record_value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        """
        Fully qualified domain name (FQDN) in the certificate.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="resourceRecordName")
    def resource_record_name(self) -> Optional[str]:
        """
        The name of the DNS record to create to validate the certificate
        """
        return pulumi.get(self, "resource_record_name")

    @property
    @pulumi.getter(name="resourceRecordType")
    def resource_record_type(self) -> Optional[str]:
        """
        The type of DNS record to create
        """
        return pulumi.get(self, "resource_record_type")

    @property
    @pulumi.getter(name="resourceRecordValue")
    def resource_record_value(self) -> Optional[str]:
        """
        The value the DNS record needs to have
        """
        return pulumi.get(self, "resource_record_value")


@pulumi.output_type
class CertificateOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateTransparencyLoggingPreference":
            suggest = "certificate_transparency_logging_preference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_transparency_logging_preference: Optional[str] = None):
        """
        :param str certificate_transparency_logging_preference: Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
        """
        CertificateOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_transparency_logging_preference=certificate_transparency_logging_preference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_transparency_logging_preference: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if certificate_transparency_logging_preference is None and 'certificateTransparencyLoggingPreference' in kwargs:
            certificate_transparency_logging_preference = kwargs['certificateTransparencyLoggingPreference']

        if certificate_transparency_logging_preference is not None:
            _setter("certificate_transparency_logging_preference", certificate_transparency_logging_preference)

    @property
    @pulumi.getter(name="certificateTransparencyLoggingPreference")
    def certificate_transparency_logging_preference(self) -> Optional[str]:
        """
        Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
        """
        return pulumi.get(self, "certificate_transparency_logging_preference")


@pulumi.output_type
class CertificateRenewalSummary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewalStatus":
            suggest = "renewal_status"
        elif key == "renewalStatusReason":
            suggest = "renewal_status_reason"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateRenewalSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateRenewalSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateRenewalSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 renewal_status: Optional[str] = None,
                 renewal_status_reason: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str renewal_status: The status of ACM's managed renewal of the certificate
        :param str renewal_status_reason: The reason that a renewal request was unsuccessful or is pending
        """
        CertificateRenewalSummary._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            renewal_status=renewal_status,
            renewal_status_reason=renewal_status_reason,
            updated_at=updated_at,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             renewal_status: Optional[str] = None,
             renewal_status_reason: Optional[str] = None,
             updated_at: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if renewal_status is None and 'renewalStatus' in kwargs:
            renewal_status = kwargs['renewalStatus']
        if renewal_status_reason is None and 'renewalStatusReason' in kwargs:
            renewal_status_reason = kwargs['renewalStatusReason']
        if updated_at is None and 'updatedAt' in kwargs:
            updated_at = kwargs['updatedAt']

        if renewal_status is not None:
            _setter("renewal_status", renewal_status)
        if renewal_status_reason is not None:
            _setter("renewal_status_reason", renewal_status_reason)
        if updated_at is not None:
            _setter("updated_at", updated_at)

    @property
    @pulumi.getter(name="renewalStatus")
    def renewal_status(self) -> Optional[str]:
        """
        The status of ACM's managed renewal of the certificate
        """
        return pulumi.get(self, "renewal_status")

    @property
    @pulumi.getter(name="renewalStatusReason")
    def renewal_status_reason(self) -> Optional[str]:
        """
        The reason that a renewal request was unsuccessful or is pending
        """
        return pulumi.get(self, "renewal_status_reason")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class CertificateValidationOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "validationDomain":
            suggest = "validation_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateValidationOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateValidationOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateValidationOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: str,
                 validation_domain: str):
        """
        :param str domain_name: Fully qualified domain name (FQDN) in the certificate.
        :param str validation_domain: Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domain_name` value or a superdomain of the `domain_name` value. For example, if you request a certificate for `"testing.example.com"`, you can specify `"example.com"` for this value.
        """
        CertificateValidationOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain_name=domain_name,
            validation_domain=validation_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain_name: Optional[str] = None,
             validation_domain: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if domain_name is None and 'domainName' in kwargs:
            domain_name = kwargs['domainName']
        if domain_name is None:
            raise TypeError("Missing 'domain_name' argument")
        if validation_domain is None and 'validationDomain' in kwargs:
            validation_domain = kwargs['validationDomain']
        if validation_domain is None:
            raise TypeError("Missing 'validation_domain' argument")

        _setter("domain_name", domain_name)
        _setter("validation_domain", validation_domain)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        Fully qualified domain name (FQDN) in the certificate.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="validationDomain")
    def validation_domain(self) -> str:
        """
        Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domain_name` value or a superdomain of the `domain_name` value. For example, if you request a certificate for `"testing.example.com"`, you can specify `"example.com"` for this value.
        """
        return pulumi.get(self, "validation_domain")


