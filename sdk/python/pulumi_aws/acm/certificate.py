# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Certificate(pulumi.CustomResource):
    """
    The ACM certificate resource allows requesting and management of certificates
    from the Amazon Certificate Manager.
    
    It deals with requesting certificates and managing their attributes and life-cycle.
    This resource does not deal with validation of a certificate but can provide inputs
    for other resources implementing the validation. It does not wait for a certificate to be issued.
    Use a `aws_acm_certificate_validation` resource for this.
    
    Most commonly, this resource is used to together with `aws_route53_record` and
    `aws_acm_certificate_validation` to request a DNS validated certificate,
    deploy the required validation records and wait for validation to complete.
    
    Domain validation through E-Mail is also supported but should be avoided as it requires a manual step outside
    of Terraform.
    
    It's recommended to specify `create_before_destroy = true` in a [lifecycle][1] block to replace a certificate
    which is currently in use (eg, by `aws_lb_listener`).
    """
    def __init__(__self__, __name__, __opts__=None, domain_name=None, subject_alternative_names=None, tags=None, validation_method=None):
        """Create a Certificate resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not domain_name:
            raise TypeError('Missing required property domain_name')
        __props__['domainName'] = domain_name

        __props__['subjectAlternativeNames'] = subject_alternative_names

        __props__['tags'] = tags

        if not validation_method:
            raise TypeError('Missing required property validation_method')
        __props__['validationMethod'] = validation_method

        __props__['arn'] = None
        __props__['domain_validation_options'] = None
        __props__['validation_emails'] = None

        super(Certificate, __self__).__init__(
            'aws:acm/certificate:Certificate',
            __name__,
            __props__,
            __opts__)

