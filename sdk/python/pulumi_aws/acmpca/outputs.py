# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CertificateAuthorityCertificateAuthorityConfiguration',
    'CertificateAuthorityCertificateAuthorityConfigurationSubject',
    'CertificateAuthorityRevocationConfiguration',
    'CertificateAuthorityRevocationConfigurationCrlConfiguration',
    'CertificateAuthorityRevocationConfigurationOcspConfiguration',
    'CertificateValidity',
    'GetCertificateAuthorityRevocationConfigurationResult',
    'GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult',
    'GetCertificateAuthorityRevocationConfigurationOcspConfigurationResult',
]

@pulumi.output_type
class CertificateAuthorityCertificateAuthorityConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyAlgorithm":
            suggest = "key_algorithm"
        elif key == "signingAlgorithm":
            suggest = "signing_algorithm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCertificateAuthorityConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCertificateAuthorityConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCertificateAuthorityConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_algorithm: str,
                 signing_algorithm: str,
                 subject: 'outputs.CertificateAuthorityCertificateAuthorityConfigurationSubject'):
        """
        :param str key_algorithm: Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
        :param str signing_algorithm: Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
        :param 'CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs' subject: Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
        """
        CertificateAuthorityCertificateAuthorityConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_algorithm=key_algorithm,
            signing_algorithm=signing_algorithm,
            subject=subject,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_algorithm: Optional[str] = None,
             signing_algorithm: Optional[str] = None,
             subject: Optional['outputs.CertificateAuthorityCertificateAuthorityConfigurationSubject'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key_algorithm is None and 'keyAlgorithm' in kwargs:
            key_algorithm = kwargs['keyAlgorithm']
        if key_algorithm is None:
            raise TypeError("Missing 'key_algorithm' argument")
        if signing_algorithm is None and 'signingAlgorithm' in kwargs:
            signing_algorithm = kwargs['signingAlgorithm']
        if signing_algorithm is None:
            raise TypeError("Missing 'signing_algorithm' argument")
        if subject is None:
            raise TypeError("Missing 'subject' argument")

        _setter("key_algorithm", key_algorithm)
        _setter("signing_algorithm", signing_algorithm)
        _setter("subject", subject)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> str:
        """
        Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
        """
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> str:
        """
        Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
        """
        return pulumi.get(self, "signing_algorithm")

    @property
    @pulumi.getter
    def subject(self) -> 'outputs.CertificateAuthorityCertificateAuthorityConfigurationSubject':
        """
        Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class CertificateAuthorityCertificateAuthorityConfigurationSubject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "distinguishedNameQualifier":
            suggest = "distinguished_name_qualifier"
        elif key == "generationQualifier":
            suggest = "generation_qualifier"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCertificateAuthorityConfigurationSubject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCertificateAuthorityConfigurationSubject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCertificateAuthorityConfigurationSubject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 state: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str common_name: Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
        :param str country: Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
        :param str distinguished_name_qualifier: Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
        :param str generation_qualifier: Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
        :param str given_name: First name. Must be less than or equal to 16 characters in length.
        :param str initials: Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
        :param str locality: Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
        :param str organization: Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
        :param str organizational_unit: Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
        :param str pseudonym: Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
        :param str state: State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
        :param str surname: Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
        :param str title: Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
        """
        CertificateAuthorityCertificateAuthorityConfigurationSubject._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            common_name=common_name,
            country=country,
            distinguished_name_qualifier=distinguished_name_qualifier,
            generation_qualifier=generation_qualifier,
            given_name=given_name,
            initials=initials,
            locality=locality,
            organization=organization,
            organizational_unit=organizational_unit,
            pseudonym=pseudonym,
            state=state,
            surname=surname,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             common_name: Optional[str] = None,
             country: Optional[str] = None,
             distinguished_name_qualifier: Optional[str] = None,
             generation_qualifier: Optional[str] = None,
             given_name: Optional[str] = None,
             initials: Optional[str] = None,
             locality: Optional[str] = None,
             organization: Optional[str] = None,
             organizational_unit: Optional[str] = None,
             pseudonym: Optional[str] = None,
             state: Optional[str] = None,
             surname: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if common_name is None and 'commonName' in kwargs:
            common_name = kwargs['commonName']
        if distinguished_name_qualifier is None and 'distinguishedNameQualifier' in kwargs:
            distinguished_name_qualifier = kwargs['distinguishedNameQualifier']
        if generation_qualifier is None and 'generationQualifier' in kwargs:
            generation_qualifier = kwargs['generationQualifier']
        if given_name is None and 'givenName' in kwargs:
            given_name = kwargs['givenName']
        if organizational_unit is None and 'organizationalUnit' in kwargs:
            organizational_unit = kwargs['organizationalUnit']

        if common_name is not None:
            _setter("common_name", common_name)
        if country is not None:
            _setter("country", country)
        if distinguished_name_qualifier is not None:
            _setter("distinguished_name_qualifier", distinguished_name_qualifier)
        if generation_qualifier is not None:
            _setter("generation_qualifier", generation_qualifier)
        if given_name is not None:
            _setter("given_name", given_name)
        if initials is not None:
            _setter("initials", initials)
        if locality is not None:
            _setter("locality", locality)
        if organization is not None:
            _setter("organization", organization)
        if organizational_unit is not None:
            _setter("organizational_unit", organizational_unit)
        if pseudonym is not None:
            _setter("pseudonym", pseudonym)
        if state is not None:
            _setter("state", state)
        if surname is not None:
            _setter("surname", surname)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        """
        Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        """
        Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        """
        Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
        """
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        """
        First name. Must be less than or equal to 16 characters in length.
        """
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        """
        Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
        """
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        """
        Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        """
        Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        """
        Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
        """
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        """
        Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
        """
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class CertificateAuthorityRevocationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crlConfiguration":
            suggest = "crl_configuration"
        elif key == "ocspConfiguration":
            suggest = "ocsp_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityRevocationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityRevocationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityRevocationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 crl_configuration: Optional['outputs.CertificateAuthorityRevocationConfigurationCrlConfiguration'] = None,
                 ocsp_configuration: Optional['outputs.CertificateAuthorityRevocationConfigurationOcspConfiguration'] = None):
        """
        :param 'CertificateAuthorityRevocationConfigurationCrlConfigurationArgs' crl_configuration: Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
        :param 'CertificateAuthorityRevocationConfigurationOcspConfigurationArgs' ocsp_configuration: Nested argument containing configuration of
               the custom OCSP responder endpoint. Defined below.
        """
        CertificateAuthorityRevocationConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            crl_configuration=crl_configuration,
            ocsp_configuration=ocsp_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             crl_configuration: Optional['outputs.CertificateAuthorityRevocationConfigurationCrlConfiguration'] = None,
             ocsp_configuration: Optional['outputs.CertificateAuthorityRevocationConfigurationOcspConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if crl_configuration is None and 'crlConfiguration' in kwargs:
            crl_configuration = kwargs['crlConfiguration']
        if ocsp_configuration is None and 'ocspConfiguration' in kwargs:
            ocsp_configuration = kwargs['ocspConfiguration']

        if crl_configuration is not None:
            _setter("crl_configuration", crl_configuration)
        if ocsp_configuration is not None:
            _setter("ocsp_configuration", ocsp_configuration)

    @property
    @pulumi.getter(name="crlConfiguration")
    def crl_configuration(self) -> Optional['outputs.CertificateAuthorityRevocationConfigurationCrlConfiguration']:
        """
        Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
        """
        return pulumi.get(self, "crl_configuration")

    @property
    @pulumi.getter(name="ocspConfiguration")
    def ocsp_configuration(self) -> Optional['outputs.CertificateAuthorityRevocationConfigurationOcspConfiguration']:
        """
        Nested argument containing configuration of
        the custom OCSP responder endpoint. Defined below.
        """
        return pulumi.get(self, "ocsp_configuration")


@pulumi.output_type
class CertificateAuthorityRevocationConfigurationCrlConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customCname":
            suggest = "custom_cname"
        elif key == "expirationInDays":
            suggest = "expiration_in_days"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3ObjectAcl":
            suggest = "s3_object_acl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityRevocationConfigurationCrlConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityRevocationConfigurationCrlConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityRevocationConfigurationCrlConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_cname: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expiration_in_days: Optional[int] = None,
                 s3_bucket_name: Optional[str] = None,
                 s3_object_acl: Optional[str] = None):
        """
        :param str custom_cname: Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
        :param bool enabled: Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
        :param int expiration_in_days: Number of days until a certificate expires. Must be between 1 and 5000.
        :param str s3_bucket_name: Name of the S3 bucket that contains the CRL. If you do not provide a value for the `custom_cname` argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.
        :param str s3_object_acl: Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to `PUBLIC_READ`.
        """
        CertificateAuthorityRevocationConfigurationCrlConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_cname=custom_cname,
            enabled=enabled,
            expiration_in_days=expiration_in_days,
            s3_bucket_name=s3_bucket_name,
            s3_object_acl=s3_object_acl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_cname: Optional[str] = None,
             enabled: Optional[bool] = None,
             expiration_in_days: Optional[int] = None,
             s3_bucket_name: Optional[str] = None,
             s3_object_acl: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if custom_cname is None and 'customCname' in kwargs:
            custom_cname = kwargs['customCname']
        if expiration_in_days is None and 'expirationInDays' in kwargs:
            expiration_in_days = kwargs['expirationInDays']
        if s3_bucket_name is None and 's3BucketName' in kwargs:
            s3_bucket_name = kwargs['s3BucketName']
        if s3_object_acl is None and 's3ObjectAcl' in kwargs:
            s3_object_acl = kwargs['s3ObjectAcl']

        if custom_cname is not None:
            _setter("custom_cname", custom_cname)
        if enabled is not None:
            _setter("enabled", enabled)
        if expiration_in_days is not None:
            _setter("expiration_in_days", expiration_in_days)
        if s3_bucket_name is not None:
            _setter("s3_bucket_name", s3_bucket_name)
        if s3_object_acl is not None:
            _setter("s3_object_acl", s3_object_acl)

    @property
    @pulumi.getter(name="customCname")
    def custom_cname(self) -> Optional[str]:
        """
        Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
        """
        return pulumi.get(self, "custom_cname")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expirationInDays")
    def expiration_in_days(self) -> Optional[int]:
        """
        Number of days until a certificate expires. Must be between 1 and 5000.
        """
        return pulumi.get(self, "expiration_in_days")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> Optional[str]:
        """
        Name of the S3 bucket that contains the CRL. If you do not provide a value for the `custom_cname` argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.
        """
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3ObjectAcl")
    def s3_object_acl(self) -> Optional[str]:
        """
        Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to `PUBLIC_READ`.
        """
        return pulumi.get(self, "s3_object_acl")


@pulumi.output_type
class CertificateAuthorityRevocationConfigurationOcspConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocspCustomCname":
            suggest = "ocsp_custom_cname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityRevocationConfigurationOcspConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityRevocationConfigurationOcspConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityRevocationConfigurationOcspConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 ocsp_custom_cname: Optional[str] = None):
        """
        :param bool enabled: Boolean value that specifies whether a custom OCSP responder is enabled.
        :param str ocsp_custom_cname: CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as "http://" or "https://".
        """
        CertificateAuthorityRevocationConfigurationOcspConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            ocsp_custom_cname=ocsp_custom_cname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             ocsp_custom_cname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if ocsp_custom_cname is None and 'ocspCustomCname' in kwargs:
            ocsp_custom_cname = kwargs['ocspCustomCname']

        _setter("enabled", enabled)
        if ocsp_custom_cname is not None:
            _setter("ocsp_custom_cname", ocsp_custom_cname)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean value that specifies whether a custom OCSP responder is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ocspCustomCname")
    def ocsp_custom_cname(self) -> Optional[str]:
        """
        CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as "http://" or "https://".
        """
        return pulumi.get(self, "ocsp_custom_cname")


@pulumi.output_type
class CertificateValidity(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        """
        :param str type: Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
        :param str value: If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
        """
        CertificateValidity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificateAuthorityRevocationConfigurationResult(dict):
    def __init__(__self__, *,
                 crl_configurations: Sequence['outputs.GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult'],
                 ocsp_configurations: Sequence['outputs.GetCertificateAuthorityRevocationConfigurationOcspConfigurationResult']):
        GetCertificateAuthorityRevocationConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            crl_configurations=crl_configurations,
            ocsp_configurations=ocsp_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             crl_configurations: Optional[Sequence['outputs.GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult']] = None,
             ocsp_configurations: Optional[Sequence['outputs.GetCertificateAuthorityRevocationConfigurationOcspConfigurationResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if crl_configurations is None and 'crlConfigurations' in kwargs:
            crl_configurations = kwargs['crlConfigurations']
        if crl_configurations is None:
            raise TypeError("Missing 'crl_configurations' argument")
        if ocsp_configurations is None and 'ocspConfigurations' in kwargs:
            ocsp_configurations = kwargs['ocspConfigurations']
        if ocsp_configurations is None:
            raise TypeError("Missing 'ocsp_configurations' argument")

        _setter("crl_configurations", crl_configurations)
        _setter("ocsp_configurations", ocsp_configurations)

    @property
    @pulumi.getter(name="crlConfigurations")
    def crl_configurations(self) -> Sequence['outputs.GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult']:
        return pulumi.get(self, "crl_configurations")

    @property
    @pulumi.getter(name="ocspConfigurations")
    def ocsp_configurations(self) -> Sequence['outputs.GetCertificateAuthorityRevocationConfigurationOcspConfigurationResult']:
        return pulumi.get(self, "ocsp_configurations")


@pulumi.output_type
class GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult(dict):
    def __init__(__self__, *,
                 custom_cname: str,
                 enabled: bool,
                 expiration_in_days: int,
                 s3_bucket_name: str,
                 s3_object_acl: str):
        GetCertificateAuthorityRevocationConfigurationCrlConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_cname=custom_cname,
            enabled=enabled,
            expiration_in_days=expiration_in_days,
            s3_bucket_name=s3_bucket_name,
            s3_object_acl=s3_object_acl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_cname: Optional[str] = None,
             enabled: Optional[bool] = None,
             expiration_in_days: Optional[int] = None,
             s3_bucket_name: Optional[str] = None,
             s3_object_acl: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if custom_cname is None and 'customCname' in kwargs:
            custom_cname = kwargs['customCname']
        if custom_cname is None:
            raise TypeError("Missing 'custom_cname' argument")
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if expiration_in_days is None and 'expirationInDays' in kwargs:
            expiration_in_days = kwargs['expirationInDays']
        if expiration_in_days is None:
            raise TypeError("Missing 'expiration_in_days' argument")
        if s3_bucket_name is None and 's3BucketName' in kwargs:
            s3_bucket_name = kwargs['s3BucketName']
        if s3_bucket_name is None:
            raise TypeError("Missing 's3_bucket_name' argument")
        if s3_object_acl is None and 's3ObjectAcl' in kwargs:
            s3_object_acl = kwargs['s3ObjectAcl']
        if s3_object_acl is None:
            raise TypeError("Missing 's3_object_acl' argument")

        _setter("custom_cname", custom_cname)
        _setter("enabled", enabled)
        _setter("expiration_in_days", expiration_in_days)
        _setter("s3_bucket_name", s3_bucket_name)
        _setter("s3_object_acl", s3_object_acl)

    @property
    @pulumi.getter(name="customCname")
    def custom_cname(self) -> str:
        return pulumi.get(self, "custom_cname")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expirationInDays")
    def expiration_in_days(self) -> int:
        return pulumi.get(self, "expiration_in_days")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3ObjectAcl")
    def s3_object_acl(self) -> str:
        return pulumi.get(self, "s3_object_acl")


@pulumi.output_type
class GetCertificateAuthorityRevocationConfigurationOcspConfigurationResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 ocsp_custom_cname: str):
        GetCertificateAuthorityRevocationConfigurationOcspConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            ocsp_custom_cname=ocsp_custom_cname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             ocsp_custom_cname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if ocsp_custom_cname is None and 'ocspCustomCname' in kwargs:
            ocsp_custom_cname = kwargs['ocspCustomCname']
        if ocsp_custom_cname is None:
            raise TypeError("Missing 'ocsp_custom_cname' argument")

        _setter("enabled", enabled)
        _setter("ocsp_custom_cname", ocsp_custom_cname)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ocspCustomCname")
    def ocsp_custom_cname(self) -> str:
        return pulumi.get(self, "ocsp_custom_cname")


