# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GlobalTable(pulumi.CustomResource):
    arn: pulumi.Output[str]
    """
    The ARN of the DynamoDB Global Table
    """
    name: pulumi.Output[str]
    """
    The name of the global table. Must match underlying DynamoDB Table names in all regions.
    """
    replicas: pulumi.Output[list]
    """
    Underlying DynamoDB Table. At least 1 replica must be defined. See below.
    """
    def __init__(__self__, resource_name, opts=None, name=None, replicas=None, __name__=None, __opts__=None):
        """
        Provides a resource to manage a DynamoDB Global Table. These are layered on top of existing DynamoDB Tables.
        
        > Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the global table. Must match underlying DynamoDB Table names in all regions.
        :param pulumi.Input[list] replicas: Underlying DynamoDB Table. At least 1 replica must be defined. See below.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['name'] = name

        if replicas is None:
            raise TypeError("Missing required property 'replicas'")
        __props__['replicas'] = replicas

        __props__['arn'] = None

        super(GlobalTable, __self__).__init__(
            'aws:dynamodb/globalTable:GlobalTable',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

