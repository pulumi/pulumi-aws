# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class TableItem(pulumi.CustomResource):
    """
    Provides a DynamoDB table item resource
    
    -> **Note:** This resource is not meant to be used for managing large amounts of data in your table, it is not designed to scale.
      You should perform **regular backups** of all data in the table, see [AWS docs for more](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/BackupRestore.html).
    """
    def __init__(__self__, __name__, __opts__=None, hash_key=None, item=None, range_key=None, table_name=None):
        """Create a TableItem resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not hash_key:
            raise TypeError('Missing required property hash_key')
        elif not isinstance(hash_key, basestring):
            raise TypeError('Expected property hash_key to be a basestring')
        __self__.hash_key = hash_key
        """
        Hash key to use for lookups and identification of the item
        """
        __props__['hashKey'] = hash_key

        if not item:
            raise TypeError('Missing required property item')
        elif not isinstance(item, basestring):
            raise TypeError('Expected property item to be a basestring')
        __self__.item = item
        """
        JSON representation of a map of attribute name/value pairs, one for each attribute.
        Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
        """
        __props__['item'] = item

        if range_key and not isinstance(range_key, basestring):
            raise TypeError('Expected property range_key to be a basestring')
        __self__.range_key = range_key
        """
        Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
        """
        __props__['rangeKey'] = range_key

        if not table_name:
            raise TypeError('Missing required property table_name')
        elif not isinstance(table_name, basestring):
            raise TypeError('Expected property table_name to be a basestring')
        __self__.table_name = table_name
        """
        The name of the table to contain the item.
        """
        __props__['tableName'] = table_name

        super(TableItem, __self__).__init__(
            'aws:dynamodb/tableItem:TableItem',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'hashKey' in outs:
            self.hash_key = outs['hashKey']
        if 'item' in outs:
            self.item = outs['item']
        if 'rangeKey' in outs:
            self.range_key = outs['rangeKey']
        if 'tableName' in outs:
            self.table_name = outs['tableName']
