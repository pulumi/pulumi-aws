# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GroupInsightsConfigurationArgs',
]

@pulumi.input_type
class GroupInsightsConfigurationArgs:
    def __init__(__self__, *,
                 insights_enabled: pulumi.Input[bool],
                 notifications_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] insights_enabled: Specifies whether insights are enabled.
        :param pulumi.Input[bool] notifications_enabled: Specifies whether insight notifications are enabled.
        """
        GroupInsightsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            insights_enabled=insights_enabled,
            notifications_enabled=notifications_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             insights_enabled: Optional[pulumi.Input[bool]] = None,
             notifications_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if insights_enabled is None and 'insightsEnabled' in kwargs:
            insights_enabled = kwargs['insightsEnabled']
        if insights_enabled is None:
            raise TypeError("Missing 'insights_enabled' argument")
        if notifications_enabled is None and 'notificationsEnabled' in kwargs:
            notifications_enabled = kwargs['notificationsEnabled']

        _setter("insights_enabled", insights_enabled)
        if notifications_enabled is not None:
            _setter("notifications_enabled", notifications_enabled)

    @property
    @pulumi.getter(name="insightsEnabled")
    def insights_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether insights are enabled.
        """
        return pulumi.get(self, "insights_enabled")

    @insights_enabled.setter
    def insights_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "insights_enabled", value)

    @property
    @pulumi.getter(name="notificationsEnabled")
    def notifications_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether insight notifications are enabled.
        """
        return pulumi.get(self, "notifications_enabled")

    @notifications_enabled.setter
    def notifications_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notifications_enabled", value)


