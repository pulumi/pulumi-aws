// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS EC2 (Elastic Compute Cloud) Verified Access Endpoint.
 *
 * ## Example Usage
 * ### ALB Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.verifiedaccess.Endpoint("example", {
 *     applicationDomain: "example.com",
 *     attachmentType: "vpc",
 *     description: "example",
 *     domainCertificateArn: aws_acm_certificate.example.arn,
 *     endpointDomainPrefix: "example",
 *     endpointType: "load-balancer",
 *     loadBalancerOptions: {
 *         loadBalancerArn: aws_lb.example.arn,
 *         port: 443,
 *         protocol: "https",
 *         subnetIds: .map(subnet => (subnet.id)),
 *     },
 *     securityGroupIds: [aws_security_group.example.id],
 *     verifiedAccessGroupId: aws_verifiedaccess_group.example.id,
 * });
 * ```
 * ### Network Interface Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.verifiedaccess.Endpoint("example", {
 *     applicationDomain: "example.com",
 *     attachmentType: "vpc",
 *     description: "example",
 *     domainCertificateArn: aws_acm_certificate.example.arn,
 *     endpointDomainPrefix: "example",
 *     endpointType: "network-interface",
 *     networkInterfaceOptions: {
 *         networkInterfaceId: aws_network_interface.example.id,
 *         port: 443,
 *         protocol: "https",
 *     },
 *     securityGroupIds: [aws_security_group.example.id],
 *     verifiedAccessGroupId: aws_verifiedaccess_group.example.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Verified Access Instances using the
 *
 * `id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:verifiedaccess/endpoint:Endpoint example vae-8012925589
 * ```
 */
export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:verifiedaccess/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    /**
     * The DNS name for users to reach your application.
     */
    public readonly applicationDomain!: pulumi.Output<string>;
    /**
     * The type of attachment. Currently, only `vpc` is supported.
     */
    public readonly attachmentType!: pulumi.Output<string>;
    /**
     * A description for the Verified Access endpoint.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Returned if endpoint has a device trust provider attached.
     */
    public /*out*/ readonly deviceValidationDomain!: pulumi.Output<string>;
    /**
     * The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
     */
    public readonly domainCertificateArn!: pulumi.Output<string>;
    /**
     * A DNS name that is generated for the endpoint.
     */
    public /*out*/ readonly endpointDomain!: pulumi.Output<string>;
    /**
     * A custom identifier that is prepended to the DNS name that is generated for the endpoint.
     */
    public readonly endpointDomainPrefix!: pulumi.Output<string>;
    /**
     * The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
     */
    public readonly endpointType!: pulumi.Output<string>;
    /**
     * The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
     */
    public readonly loadBalancerOptions!: pulumi.Output<outputs.verifiedaccess.EndpointLoadBalancerOptions | undefined>;
    /**
     * The network interface details. This parameter is required if the endpoint type is `network-interface`.
     */
    public readonly networkInterfaceOptions!: pulumi.Output<outputs.verifiedaccess.EndpointNetworkInterfaceOptions | undefined>;
    /**
     * List of the the security groups IDs to associate with the Verified Access endpoint.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * The options in use for server side encryption.
     */
    public readonly sseSpecification!: pulumi.Output<outputs.verifiedaccess.EndpointSseSpecification>;
    /**
     * Key-value tags for the Verified Access Endpoint. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The ID of the Verified Access group to associate the endpoint with.
     *
     * The following arguments are optional:
     */
    public readonly verifiedAccessGroupId!: pulumi.Output<string>;
    public /*out*/ readonly verifiedAccessInstanceId!: pulumi.Output<string>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointState | undefined;
            resourceInputs["applicationDomain"] = state ? state.applicationDomain : undefined;
            resourceInputs["attachmentType"] = state ? state.attachmentType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceValidationDomain"] = state ? state.deviceValidationDomain : undefined;
            resourceInputs["domainCertificateArn"] = state ? state.domainCertificateArn : undefined;
            resourceInputs["endpointDomain"] = state ? state.endpointDomain : undefined;
            resourceInputs["endpointDomainPrefix"] = state ? state.endpointDomainPrefix : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["loadBalancerOptions"] = state ? state.loadBalancerOptions : undefined;
            resourceInputs["networkInterfaceOptions"] = state ? state.networkInterfaceOptions : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["sseSpecification"] = state ? state.sseSpecification : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["verifiedAccessGroupId"] = state ? state.verifiedAccessGroupId : undefined;
            resourceInputs["verifiedAccessInstanceId"] = state ? state.verifiedAccessInstanceId : undefined;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if ((!args || args.applicationDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationDomain'");
            }
            if ((!args || args.attachmentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attachmentType'");
            }
            if ((!args || args.domainCertificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainCertificateArn'");
            }
            if ((!args || args.endpointDomainPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointDomainPrefix'");
            }
            if ((!args || args.endpointType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointType'");
            }
            if ((!args || args.verifiedAccessGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'verifiedAccessGroupId'");
            }
            resourceInputs["applicationDomain"] = args ? args.applicationDomain : undefined;
            resourceInputs["attachmentType"] = args ? args.attachmentType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainCertificateArn"] = args ? args.domainCertificateArn : undefined;
            resourceInputs["endpointDomainPrefix"] = args ? args.endpointDomainPrefix : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["loadBalancerOptions"] = args ? args.loadBalancerOptions : undefined;
            resourceInputs["networkInterfaceOptions"] = args ? args.networkInterfaceOptions : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["sseSpecification"] = args ? args.sseSpecification : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["verifiedAccessGroupId"] = args ? args.verifiedAccessGroupId : undefined;
            resourceInputs["deviceValidationDomain"] = undefined /*out*/;
            resourceInputs["endpointDomain"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["verifiedAccessInstanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    /**
     * The DNS name for users to reach your application.
     */
    applicationDomain?: pulumi.Input<string>;
    /**
     * The type of attachment. Currently, only `vpc` is supported.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * A description for the Verified Access endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * Returned if endpoint has a device trust provider attached.
     */
    deviceValidationDomain?: pulumi.Input<string>;
    /**
     * The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
     */
    domainCertificateArn?: pulumi.Input<string>;
    /**
     * A DNS name that is generated for the endpoint.
     */
    endpointDomain?: pulumi.Input<string>;
    /**
     * A custom identifier that is prepended to the DNS name that is generated for the endpoint.
     */
    endpointDomainPrefix?: pulumi.Input<string>;
    /**
     * The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
     */
    endpointType?: pulumi.Input<string>;
    /**
     * The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
     */
    loadBalancerOptions?: pulumi.Input<inputs.verifiedaccess.EndpointLoadBalancerOptions>;
    /**
     * The network interface details. This parameter is required if the endpoint type is `network-interface`.
     */
    networkInterfaceOptions?: pulumi.Input<inputs.verifiedaccess.EndpointNetworkInterfaceOptions>;
    /**
     * List of the the security groups IDs to associate with the Verified Access endpoint.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The options in use for server side encryption.
     */
    sseSpecification?: pulumi.Input<inputs.verifiedaccess.EndpointSseSpecification>;
    /**
     * Key-value tags for the Verified Access Endpoint. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the Verified Access group to associate the endpoint with.
     *
     * The following arguments are optional:
     */
    verifiedAccessGroupId?: pulumi.Input<string>;
    verifiedAccessInstanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * The DNS name for users to reach your application.
     */
    applicationDomain: pulumi.Input<string>;
    /**
     * The type of attachment. Currently, only `vpc` is supported.
     */
    attachmentType: pulumi.Input<string>;
    /**
     * A description for the Verified Access endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
     */
    domainCertificateArn: pulumi.Input<string>;
    /**
     * A custom identifier that is prepended to the DNS name that is generated for the endpoint.
     */
    endpointDomainPrefix: pulumi.Input<string>;
    /**
     * The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
     */
    endpointType: pulumi.Input<string>;
    /**
     * The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
     */
    loadBalancerOptions?: pulumi.Input<inputs.verifiedaccess.EndpointLoadBalancerOptions>;
    /**
     * The network interface details. This parameter is required if the endpoint type is `network-interface`.
     */
    networkInterfaceOptions?: pulumi.Input<inputs.verifiedaccess.EndpointNetworkInterfaceOptions>;
    /**
     * List of the the security groups IDs to associate with the Verified Access endpoint.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The options in use for server side encryption.
     */
    sseSpecification?: pulumi.Input<inputs.verifiedaccess.EndpointSseSpecification>;
    /**
     * Key-value tags for the Verified Access Endpoint. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the Verified Access group to associate the endpoint with.
     *
     * The following arguments are optional:
     */
    verifiedAccessGroupId: pulumi.Input<string>;
}
