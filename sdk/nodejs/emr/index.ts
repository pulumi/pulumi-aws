// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BlockPublicAccessConfigurationArgs, BlockPublicAccessConfigurationState } from "./blockPublicAccessConfiguration";
export type BlockPublicAccessConfiguration = import("./blockPublicAccessConfiguration").BlockPublicAccessConfiguration;
export const BlockPublicAccessConfiguration: typeof import("./blockPublicAccessConfiguration").BlockPublicAccessConfiguration = null as any;
utilities.lazyLoad(exports, ["BlockPublicAccessConfiguration"], () => require("./blockPublicAccessConfiguration"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetReleaseLabelsArgs, GetReleaseLabelsResult, GetReleaseLabelsOutputArgs } from "./getReleaseLabels";
export const getReleaseLabels: typeof import("./getReleaseLabels").getReleaseLabels = null as any;
export const getReleaseLabelsOutput: typeof import("./getReleaseLabels").getReleaseLabelsOutput = null as any;
utilities.lazyLoad(exports, ["getReleaseLabels","getReleaseLabelsOutput"], () => require("./getReleaseLabels"));

export { InstanceFleetArgs, InstanceFleetState } from "./instanceFleet";
export type InstanceFleet = import("./instanceFleet").InstanceFleet;
export const InstanceFleet: typeof import("./instanceFleet").InstanceFleet = null as any;
utilities.lazyLoad(exports, ["InstanceFleet"], () => require("./instanceFleet"));

export { InstanceGroupArgs, InstanceGroupState } from "./instanceGroup";
export type InstanceGroup = import("./instanceGroup").InstanceGroup;
export const InstanceGroup: typeof import("./instanceGroup").InstanceGroup = null as any;
utilities.lazyLoad(exports, ["InstanceGroup"], () => require("./instanceGroup"));

export { ManagedScalingPolicyArgs, ManagedScalingPolicyState } from "./managedScalingPolicy";
export type ManagedScalingPolicy = import("./managedScalingPolicy").ManagedScalingPolicy;
export const ManagedScalingPolicy: typeof import("./managedScalingPolicy").ManagedScalingPolicy = null as any;
utilities.lazyLoad(exports, ["ManagedScalingPolicy"], () => require("./managedScalingPolicy"));

export { SecurityConfigurationArgs, SecurityConfigurationState } from "./securityConfiguration";
export type SecurityConfiguration = import("./securityConfiguration").SecurityConfiguration;
export const SecurityConfiguration: typeof import("./securityConfiguration").SecurityConfiguration = null as any;
utilities.lazyLoad(exports, ["SecurityConfiguration"], () => require("./securityConfiguration"));

export { StudioArgs, StudioState } from "./studio";
export type Studio = import("./studio").Studio;
export const Studio: typeof import("./studio").Studio = null as any;
utilities.lazyLoad(exports, ["Studio"], () => require("./studio"));

export { StudioSessionMappingArgs, StudioSessionMappingState } from "./studioSessionMapping";
export type StudioSessionMapping = import("./studioSessionMapping").StudioSessionMapping;
export const StudioSessionMapping: typeof import("./studioSessionMapping").StudioSessionMapping = null as any;
utilities.lazyLoad(exports, ["StudioSessionMapping"], () => require("./studioSessionMapping"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:emr/blockPublicAccessConfiguration:BlockPublicAccessConfiguration":
                return new BlockPublicAccessConfiguration(name, <any>undefined, { urn })
            case "aws:emr/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws:emr/instanceFleet:InstanceFleet":
                return new InstanceFleet(name, <any>undefined, { urn })
            case "aws:emr/instanceGroup:InstanceGroup":
                return new InstanceGroup(name, <any>undefined, { urn })
            case "aws:emr/managedScalingPolicy:ManagedScalingPolicy":
                return new ManagedScalingPolicy(name, <any>undefined, { urn })
            case "aws:emr/securityConfiguration:SecurityConfiguration":
                return new SecurityConfiguration(name, <any>undefined, { urn })
            case "aws:emr/studio:Studio":
                return new Studio(name, <any>undefined, { urn })
            case "aws:emr/studioSessionMapping:StudioSessionMapping":
                return new StudioSessionMapping(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "emr/blockPublicAccessConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "emr/cluster", _module)
pulumi.runtime.registerResourceModule("aws", "emr/instanceFleet", _module)
pulumi.runtime.registerResourceModule("aws", "emr/instanceGroup", _module)
pulumi.runtime.registerResourceModule("aws", "emr/managedScalingPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "emr/securityConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "emr/studio", _module)
pulumi.runtime.registerResourceModule("aws", "emr/studioSessionMapping", _module)
