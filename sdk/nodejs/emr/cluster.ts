// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:emr/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly additionalInfo!: pulumi.Output<string | undefined>;
    public readonly applications!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoTerminationPolicy!: pulumi.Output<outputs.emr.ClusterAutoTerminationPolicy | undefined>;
    public readonly autoscalingRole!: pulumi.Output<string | undefined>;
    public readonly bootstrapActions!: pulumi.Output<outputs.emr.ClusterBootstrapAction[] | undefined>;
    public /*out*/ readonly clusterState!: pulumi.Output<string>;
    public readonly configurations!: pulumi.Output<string | undefined>;
    public readonly configurationsJson!: pulumi.Output<string | undefined>;
    public readonly coreInstanceFleet!: pulumi.Output<outputs.emr.ClusterCoreInstanceFleet>;
    public readonly coreInstanceGroup!: pulumi.Output<outputs.emr.ClusterCoreInstanceGroup>;
    public readonly customAmiId!: pulumi.Output<string | undefined>;
    public readonly ebsRootVolumeSize!: pulumi.Output<number | undefined>;
    public readonly ec2Attributes!: pulumi.Output<outputs.emr.ClusterEc2Attributes | undefined>;
    public readonly keepJobFlowAliveWhenNoSteps!: pulumi.Output<boolean>;
    public readonly kerberosAttributes!: pulumi.Output<outputs.emr.ClusterKerberosAttributes | undefined>;
    public readonly listStepsStates!: pulumi.Output<string[] | undefined>;
    public readonly logEncryptionKmsKeyId!: pulumi.Output<string | undefined>;
    public readonly logUri!: pulumi.Output<string | undefined>;
    public readonly masterInstanceFleet!: pulumi.Output<outputs.emr.ClusterMasterInstanceFleet>;
    public readonly masterInstanceGroup!: pulumi.Output<outputs.emr.ClusterMasterInstanceGroup>;
    public /*out*/ readonly masterPublicDns!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly releaseLabel!: pulumi.Output<string>;
    public readonly scaleDownBehavior!: pulumi.Output<string>;
    public readonly securityConfiguration!: pulumi.Output<string | undefined>;
    public readonly serviceRole!: pulumi.Output<string>;
    public readonly stepConcurrencyLevel!: pulumi.Output<number | undefined>;
    public readonly steps!: pulumi.Output<outputs.emr.ClusterStep[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly terminationProtection!: pulumi.Output<boolean>;
    public readonly visibleToAllUsers!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["additionalInfo"] = state ? state.additionalInfo : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoTerminationPolicy"] = state ? state.autoTerminationPolicy : undefined;
            resourceInputs["autoscalingRole"] = state ? state.autoscalingRole : undefined;
            resourceInputs["bootstrapActions"] = state ? state.bootstrapActions : undefined;
            resourceInputs["clusterState"] = state ? state.clusterState : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["configurationsJson"] = state ? state.configurationsJson : undefined;
            resourceInputs["coreInstanceFleet"] = state ? state.coreInstanceFleet : undefined;
            resourceInputs["coreInstanceGroup"] = state ? state.coreInstanceGroup : undefined;
            resourceInputs["customAmiId"] = state ? state.customAmiId : undefined;
            resourceInputs["ebsRootVolumeSize"] = state ? state.ebsRootVolumeSize : undefined;
            resourceInputs["ec2Attributes"] = state ? state.ec2Attributes : undefined;
            resourceInputs["keepJobFlowAliveWhenNoSteps"] = state ? state.keepJobFlowAliveWhenNoSteps : undefined;
            resourceInputs["kerberosAttributes"] = state ? state.kerberosAttributes : undefined;
            resourceInputs["listStepsStates"] = state ? state.listStepsStates : undefined;
            resourceInputs["logEncryptionKmsKeyId"] = state ? state.logEncryptionKmsKeyId : undefined;
            resourceInputs["logUri"] = state ? state.logUri : undefined;
            resourceInputs["masterInstanceFleet"] = state ? state.masterInstanceFleet : undefined;
            resourceInputs["masterInstanceGroup"] = state ? state.masterInstanceGroup : undefined;
            resourceInputs["masterPublicDns"] = state ? state.masterPublicDns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["releaseLabel"] = state ? state.releaseLabel : undefined;
            resourceInputs["scaleDownBehavior"] = state ? state.scaleDownBehavior : undefined;
            resourceInputs["securityConfiguration"] = state ? state.securityConfiguration : undefined;
            resourceInputs["serviceRole"] = state ? state.serviceRole : undefined;
            resourceInputs["stepConcurrencyLevel"] = state ? state.stepConcurrencyLevel : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["visibleToAllUsers"] = state ? state.visibleToAllUsers : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.releaseLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseLabel'");
            }
            if ((!args || args.serviceRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceRole'");
            }
            resourceInputs["additionalInfo"] = args ? args.additionalInfo : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["autoTerminationPolicy"] = args ? args.autoTerminationPolicy : undefined;
            resourceInputs["autoscalingRole"] = args ? args.autoscalingRole : undefined;
            resourceInputs["bootstrapActions"] = args ? args.bootstrapActions : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["configurationsJson"] = args ? args.configurationsJson : undefined;
            resourceInputs["coreInstanceFleet"] = args ? args.coreInstanceFleet : undefined;
            resourceInputs["coreInstanceGroup"] = args ? args.coreInstanceGroup : undefined;
            resourceInputs["customAmiId"] = args ? args.customAmiId : undefined;
            resourceInputs["ebsRootVolumeSize"] = args ? args.ebsRootVolumeSize : undefined;
            resourceInputs["ec2Attributes"] = args ? args.ec2Attributes : undefined;
            resourceInputs["keepJobFlowAliveWhenNoSteps"] = args ? args.keepJobFlowAliveWhenNoSteps : undefined;
            resourceInputs["kerberosAttributes"] = args ? args.kerberosAttributes : undefined;
            resourceInputs["listStepsStates"] = args ? args.listStepsStates : undefined;
            resourceInputs["logEncryptionKmsKeyId"] = args ? args.logEncryptionKmsKeyId : undefined;
            resourceInputs["logUri"] = args ? args.logUri : undefined;
            resourceInputs["masterInstanceFleet"] = args ? args.masterInstanceFleet : undefined;
            resourceInputs["masterInstanceGroup"] = args ? args.masterInstanceGroup : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["releaseLabel"] = args ? args.releaseLabel : undefined;
            resourceInputs["scaleDownBehavior"] = args ? args.scaleDownBehavior : undefined;
            resourceInputs["securityConfiguration"] = args ? args.securityConfiguration : undefined;
            resourceInputs["serviceRole"] = args ? args.serviceRole : undefined;
            resourceInputs["stepConcurrencyLevel"] = args ? args.stepConcurrencyLevel : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["visibleToAllUsers"] = args ? args.visibleToAllUsers : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterState"] = undefined /*out*/;
            resourceInputs["masterPublicDns"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    additionalInfo?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    arn?: pulumi.Input<string>;
    autoTerminationPolicy?: pulumi.Input<inputs.emr.ClusterAutoTerminationPolicy>;
    autoscalingRole?: pulumi.Input<string>;
    bootstrapActions?: pulumi.Input<pulumi.Input<inputs.emr.ClusterBootstrapAction>[]>;
    clusterState?: pulumi.Input<string>;
    configurations?: pulumi.Input<string>;
    configurationsJson?: pulumi.Input<string>;
    coreInstanceFleet?: pulumi.Input<inputs.emr.ClusterCoreInstanceFleet>;
    coreInstanceGroup?: pulumi.Input<inputs.emr.ClusterCoreInstanceGroup>;
    customAmiId?: pulumi.Input<string>;
    ebsRootVolumeSize?: pulumi.Input<number>;
    ec2Attributes?: pulumi.Input<inputs.emr.ClusterEc2Attributes>;
    keepJobFlowAliveWhenNoSteps?: pulumi.Input<boolean>;
    kerberosAttributes?: pulumi.Input<inputs.emr.ClusterKerberosAttributes>;
    listStepsStates?: pulumi.Input<pulumi.Input<string>[]>;
    logEncryptionKmsKeyId?: pulumi.Input<string>;
    logUri?: pulumi.Input<string>;
    masterInstanceFleet?: pulumi.Input<inputs.emr.ClusterMasterInstanceFleet>;
    masterInstanceGroup?: pulumi.Input<inputs.emr.ClusterMasterInstanceGroup>;
    masterPublicDns?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    releaseLabel?: pulumi.Input<string>;
    scaleDownBehavior?: pulumi.Input<string>;
    securityConfiguration?: pulumi.Input<string>;
    serviceRole?: pulumi.Input<string>;
    stepConcurrencyLevel?: pulumi.Input<number>;
    steps?: pulumi.Input<pulumi.Input<inputs.emr.ClusterStep>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    terminationProtection?: pulumi.Input<boolean>;
    visibleToAllUsers?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    additionalInfo?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    autoTerminationPolicy?: pulumi.Input<inputs.emr.ClusterAutoTerminationPolicy>;
    autoscalingRole?: pulumi.Input<string>;
    bootstrapActions?: pulumi.Input<pulumi.Input<inputs.emr.ClusterBootstrapAction>[]>;
    configurations?: pulumi.Input<string>;
    configurationsJson?: pulumi.Input<string>;
    coreInstanceFleet?: pulumi.Input<inputs.emr.ClusterCoreInstanceFleet>;
    coreInstanceGroup?: pulumi.Input<inputs.emr.ClusterCoreInstanceGroup>;
    customAmiId?: pulumi.Input<string>;
    ebsRootVolumeSize?: pulumi.Input<number>;
    ec2Attributes?: pulumi.Input<inputs.emr.ClusterEc2Attributes>;
    keepJobFlowAliveWhenNoSteps?: pulumi.Input<boolean>;
    kerberosAttributes?: pulumi.Input<inputs.emr.ClusterKerberosAttributes>;
    listStepsStates?: pulumi.Input<pulumi.Input<string>[]>;
    logEncryptionKmsKeyId?: pulumi.Input<string>;
    logUri?: pulumi.Input<string>;
    masterInstanceFleet?: pulumi.Input<inputs.emr.ClusterMasterInstanceFleet>;
    masterInstanceGroup?: pulumi.Input<inputs.emr.ClusterMasterInstanceGroup>;
    name?: pulumi.Input<string>;
    releaseLabel: pulumi.Input<string>;
    scaleDownBehavior?: pulumi.Input<string>;
    securityConfiguration?: pulumi.Input<string>;
    serviceRole: pulumi.Input<string>;
    stepConcurrencyLevel?: pulumi.Input<number>;
    steps?: pulumi.Input<pulumi.Input<inputs.emr.ClusterStep>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    terminationProtection?: pulumi.Input<boolean>;
    visibleToAllUsers?: pulumi.Input<boolean>;
}
