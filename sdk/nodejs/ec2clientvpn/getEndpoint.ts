// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getEndpoint(args?: GetEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetEndpointResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:ec2clientvpn/getEndpoint:getEndpoint", {
        "clientVpnEndpointId": args.clientVpnEndpointId,
        "filters": args.filters,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getEndpoint.
 */
export interface GetEndpointArgs {
    clientVpnEndpointId?: string;
    filters?: inputs.ec2clientvpn.GetEndpointFilter[];
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getEndpoint.
 */
export interface GetEndpointResult {
    readonly arn: string;
    readonly authenticationOptions: outputs.ec2clientvpn.GetEndpointAuthenticationOption[];
    readonly clientCidrBlock: string;
    readonly clientConnectOptions: outputs.ec2clientvpn.GetEndpointClientConnectOption[];
    readonly clientLoginBannerOptions: outputs.ec2clientvpn.GetEndpointClientLoginBannerOption[];
    readonly clientVpnEndpointId: string;
    readonly connectionLogOptions: outputs.ec2clientvpn.GetEndpointConnectionLogOption[];
    readonly description: string;
    readonly dnsName: string;
    readonly dnsServers: string[];
    readonly filters?: outputs.ec2clientvpn.GetEndpointFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly securityGroupIds: string[];
    readonly selfServicePortal: string;
    readonly serverCertificateArn: string;
    readonly sessionTimeoutHours: number;
    readonly splitTunnel: boolean;
    readonly tags: {[key: string]: string};
    readonly transportProtocol: string;
    readonly vpcId: string;
    readonly vpnPort: number;
}
export function getEndpointOutput(args?: GetEndpointOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEndpointResult> {
    return pulumi.output(args).apply((a: any) => getEndpoint(a, opts))
}

/**
 * A collection of arguments for invoking getEndpoint.
 */
export interface GetEndpointOutputArgs {
    clientVpnEndpointId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.ec2clientvpn.GetEndpointFilterArgs>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
