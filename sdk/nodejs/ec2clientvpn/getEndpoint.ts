// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Get information on an EC2 Client VPN endpoint.
 *
 * ## Example Usage
 * ### By Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.ec2clientvpn.getEndpoint({
 *     filters: [{
 *         name: "tag:Name",
 *         values: ["ExampleVpn"],
 *     }],
 * });
 * ```
 * ### By Identifier
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.ec2clientvpn.getEndpoint({
 *     clientVpnEndpointId: "cvpn-endpoint-083cf50d6eb314f21",
 * });
 * ```
 */
export function getEndpoint(args?: GetEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetEndpointResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:ec2clientvpn/getEndpoint:getEndpoint", {
        "clientVpnEndpointId": args.clientVpnEndpointId,
        "filters": args.filters,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getEndpoint.
 */
export interface GetEndpointArgs {
    /**
     * ID of the Client VPN endpoint.
     */
    clientVpnEndpointId?: string;
    /**
     * One or more configuration blocks containing name-values filters. Detailed below.
     */
    filters?: inputs.ec2clientvpn.GetEndpointFilter[];
    /**
     * Map of tags, each pair of which must exactly match a pair on the desired endpoint.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getEndpoint.
 */
export interface GetEndpointResult {
    /**
     * The ARN of the Client VPN endpoint.
     */
    readonly arn: string;
    /**
     * Information about the authentication method used by the Client VPN endpoint.
     */
    readonly authenticationOptions: outputs.ec2clientvpn.GetEndpointAuthenticationOption[];
    /**
     * IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
     */
    readonly clientCidrBlock: string;
    /**
     * The options for managing connection authorization for new client connections.
     */
    readonly clientConnectOptions: outputs.ec2clientvpn.GetEndpointClientConnectOption[];
    /**
     * Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
     */
    readonly clientLoginBannerOptions: outputs.ec2clientvpn.GetEndpointClientLoginBannerOption[];
    readonly clientVpnEndpointId: string;
    /**
     * Information about the client connection logging options for the Client VPN endpoint.
     */
    readonly connectionLogOptions: outputs.ec2clientvpn.GetEndpointConnectionLogOption[];
    /**
     * Brief description of the endpoint.
     */
    readonly description: string;
    /**
     * DNS name to be used by clients when connecting to the Client VPN endpoint.
     */
    readonly dnsName: string;
    /**
     * Information about the DNS servers to be used for DNS resolution.
     */
    readonly dnsServers: string[];
    readonly filters?: outputs.ec2clientvpn.GetEndpointFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * IDs of the security groups for the target network associated with the Client VPN endpoint.
     */
    readonly securityGroupIds: string[];
    /**
     * Whether the self-service portal for the Client VPN endpoint is enabled.
     */
    readonly selfServicePortal: string;
    /**
     * The URL of the self-service portal.
     */
    readonly selfServicePortalUrl: string;
    /**
     * The ARN of the server certificate.
     */
    readonly serverCertificateArn: string;
    /**
     * The maximum VPN session duration time in hours.
     */
    readonly sessionTimeoutHours: number;
    /**
     * Whether split-tunnel is enabled in the AWS Client VPN endpoint.
     */
    readonly splitTunnel: boolean;
    readonly tags: {[key: string]: string};
    /**
     * Transport protocol used by the Client VPN endpoint.
     */
    readonly transportProtocol: string;
    /**
     * ID of the VPC associated with the Client VPN endpoint.
     */
    readonly vpcId: string;
    /**
     * Port number for the Client VPN endpoint.
     */
    readonly vpnPort: number;
}
/**
 * Get information on an EC2 Client VPN endpoint.
 *
 * ## Example Usage
 * ### By Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.ec2clientvpn.getEndpoint({
 *     filters: [{
 *         name: "tag:Name",
 *         values: ["ExampleVpn"],
 *     }],
 * });
 * ```
 * ### By Identifier
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.ec2clientvpn.getEndpoint({
 *     clientVpnEndpointId: "cvpn-endpoint-083cf50d6eb314f21",
 * });
 * ```
 */
export function getEndpointOutput(args?: GetEndpointOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEndpointResult> {
    return pulumi.output(args).apply((a: any) => getEndpoint(a, opts))
}

/**
 * A collection of arguments for invoking getEndpoint.
 */
export interface GetEndpointOutputArgs {
    /**
     * ID of the Client VPN endpoint.
     */
    clientVpnEndpointId?: pulumi.Input<string>;
    /**
     * One or more configuration blocks containing name-values filters. Detailed below.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.ec2clientvpn.GetEndpointFilterArgs>[]>;
    /**
     * Map of tags, each pair of which must exactly match a pair on the desired endpoint.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
