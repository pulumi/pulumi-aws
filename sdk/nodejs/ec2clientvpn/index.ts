// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AuthorizationRuleArgs, AuthorizationRuleState } from "./authorizationRule";
export type AuthorizationRule = import("./authorizationRule").AuthorizationRule;
export const AuthorizationRule: typeof import("./authorizationRule").AuthorizationRule = null as any;

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;

export { GetEndpointArgs, GetEndpointResult, GetEndpointOutputArgs } from "./getEndpoint";
export const getEndpoint: typeof import("./getEndpoint").getEndpoint = null as any;
export const getEndpointOutput: typeof import("./getEndpoint").getEndpointOutput = null as any;

export { NetworkAssociationArgs, NetworkAssociationState } from "./networkAssociation";
export type NetworkAssociation = import("./networkAssociation").NetworkAssociation;
export const NetworkAssociation: typeof import("./networkAssociation").NetworkAssociation = null as any;

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;

utilities.lazyLoad(exports, ["AuthorizationRule"], () => require("./authorizationRule"));
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));
utilities.lazyLoad(exports, ["getEndpoint","getEndpointOutput"], () => require("./getEndpoint"));
utilities.lazyLoad(exports, ["NetworkAssociation"], () => require("./networkAssociation"));
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:ec2clientvpn/authorizationRule:AuthorizationRule":
                return new AuthorizationRule(name, <any>undefined, { urn })
            case "aws:ec2clientvpn/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "aws:ec2clientvpn/networkAssociation:NetworkAssociation":
                return new NetworkAssociation(name, <any>undefined, { urn })
            case "aws:ec2clientvpn/route:Route":
                return new Route(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ec2clientvpn/authorizationRule", _module)
pulumi.runtime.registerResourceModule("aws", "ec2clientvpn/endpoint", _module)
pulumi.runtime.registerResourceModule("aws", "ec2clientvpn/networkAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2clientvpn/route", _module)
