// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:kinesisanalyticsv2/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    public readonly applicationConfiguration!: pulumi.Output<outputs.kinesisanalyticsv2.ApplicationApplicationConfiguration>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cloudwatchLoggingOptions!: pulumi.Output<outputs.kinesisanalyticsv2.ApplicationCloudwatchLoggingOptions | undefined>;
    public /*out*/ readonly createTimestamp!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly forceStop!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly lastUpdateTimestamp!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly runtimeEnvironment!: pulumi.Output<string>;
    public readonly serviceExecutionRole!: pulumi.Output<string>;
    public readonly startApplication!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly versionId!: pulumi.Output<number>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["applicationConfiguration"] = state ? state.applicationConfiguration : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cloudwatchLoggingOptions"] = state ? state.cloudwatchLoggingOptions : undefined;
            resourceInputs["createTimestamp"] = state ? state.createTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forceStop"] = state ? state.forceStop : undefined;
            resourceInputs["lastUpdateTimestamp"] = state ? state.lastUpdateTimestamp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["runtimeEnvironment"] = state ? state.runtimeEnvironment : undefined;
            resourceInputs["serviceExecutionRole"] = state ? state.serviceExecutionRole : undefined;
            resourceInputs["startApplication"] = state ? state.startApplication : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if ((!args || args.runtimeEnvironment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeEnvironment'");
            }
            if ((!args || args.serviceExecutionRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceExecutionRole'");
            }
            resourceInputs["applicationConfiguration"] = args ? args.applicationConfiguration : undefined;
            resourceInputs["cloudwatchLoggingOptions"] = args ? args.cloudwatchLoggingOptions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forceStop"] = args ? args.forceStop : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["runtimeEnvironment"] = args ? args.runtimeEnvironment : undefined;
            resourceInputs["serviceExecutionRole"] = args ? args.serviceExecutionRole : undefined;
            resourceInputs["startApplication"] = args ? args.startApplication : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTimestamp"] = undefined /*out*/;
            resourceInputs["lastUpdateTimestamp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    applicationConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfiguration>;
    arn?: pulumi.Input<string>;
    cloudwatchLoggingOptions?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationCloudwatchLoggingOptions>;
    createTimestamp?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    forceStop?: pulumi.Input<boolean>;
    lastUpdateTimestamp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    runtimeEnvironment?: pulumi.Input<string>;
    serviceExecutionRole?: pulumi.Input<string>;
    startApplication?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    versionId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    applicationConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfiguration>;
    cloudwatchLoggingOptions?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationCloudwatchLoggingOptions>;
    description?: pulumi.Input<string>;
    forceStop?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    runtimeEnvironment: pulumi.Input<string>;
    serviceExecutionRole: pulumi.Input<string>;
    startApplication?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
