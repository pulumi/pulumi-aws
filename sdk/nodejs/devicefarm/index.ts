// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DevicePoolArgs, DevicePoolState } from "./devicePool";
export type DevicePool = import("./devicePool").DevicePool;
export const DevicePool: typeof import("./devicePool").DevicePool = null as any;
utilities.lazyLoad(exports, ["DevicePool"], () => require("./devicePool"));

export { InstanceProfileArgs, InstanceProfileState } from "./instanceProfile";
export type InstanceProfile = import("./instanceProfile").InstanceProfile;
export const InstanceProfile: typeof import("./instanceProfile").InstanceProfile = null as any;
utilities.lazyLoad(exports, ["InstanceProfile"], () => require("./instanceProfile"));

export { NetworkProfileArgs, NetworkProfileState } from "./networkProfile";
export type NetworkProfile = import("./networkProfile").NetworkProfile;
export const NetworkProfile: typeof import("./networkProfile").NetworkProfile = null as any;
utilities.lazyLoad(exports, ["NetworkProfile"], () => require("./networkProfile"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { TestGridProjectArgs, TestGridProjectState } from "./testGridProject";
export type TestGridProject = import("./testGridProject").TestGridProject;
export const TestGridProject: typeof import("./testGridProject").TestGridProject = null as any;
utilities.lazyLoad(exports, ["TestGridProject"], () => require("./testGridProject"));

export { UploadArgs, UploadState } from "./upload";
export type Upload = import("./upload").Upload;
export const Upload: typeof import("./upload").Upload = null as any;
utilities.lazyLoad(exports, ["Upload"], () => require("./upload"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:devicefarm/devicePool:DevicePool":
                return new DevicePool(name, <any>undefined, { urn })
            case "aws:devicefarm/instanceProfile:InstanceProfile":
                return new InstanceProfile(name, <any>undefined, { urn })
            case "aws:devicefarm/networkProfile:NetworkProfile":
                return new NetworkProfile(name, <any>undefined, { urn })
            case "aws:devicefarm/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "aws:devicefarm/testGridProject:TestGridProject":
                return new TestGridProject(name, <any>undefined, { urn })
            case "aws:devicefarm/upload:Upload":
                return new Upload(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "devicefarm/devicePool", _module)
pulumi.runtime.registerResourceModule("aws", "devicefarm/instanceProfile", _module)
pulumi.runtime.registerResourceModule("aws", "devicefarm/networkProfile", _module)
pulumi.runtime.registerResourceModule("aws", "devicefarm/project", _module)
pulumi.runtime.registerResourceModule("aws", "devicefarm/testGridProject", _module)
pulumi.runtime.registerResourceModule("aws", "devicefarm/upload", _module)
