// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NetworkProfile extends pulumi.CustomResource {
    /**
     * Get an existing NetworkProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkProfileState, opts?: pulumi.CustomResourceOptions): NetworkProfile {
        return new NetworkProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:devicefarm/networkProfile:NetworkProfile';

    /**
     * Returns true if the given object is an instance of NetworkProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkProfile.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly downlinkBandwidthBits!: pulumi.Output<number | undefined>;
    public readonly downlinkDelayMs!: pulumi.Output<number | undefined>;
    public readonly downlinkJitterMs!: pulumi.Output<number | undefined>;
    public readonly downlinkLossPercent!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly uplinkBandwidthBits!: pulumi.Output<number | undefined>;
    public readonly uplinkDelayMs!: pulumi.Output<number | undefined>;
    public readonly uplinkJitterMs!: pulumi.Output<number | undefined>;
    public readonly uplinkLossPercent!: pulumi.Output<number | undefined>;

    /**
     * Create a NetworkProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkProfileArgs | NetworkProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkProfileState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["downlinkBandwidthBits"] = state ? state.downlinkBandwidthBits : undefined;
            resourceInputs["downlinkDelayMs"] = state ? state.downlinkDelayMs : undefined;
            resourceInputs["downlinkJitterMs"] = state ? state.downlinkJitterMs : undefined;
            resourceInputs["downlinkLossPercent"] = state ? state.downlinkLossPercent : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectArn"] = state ? state.projectArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uplinkBandwidthBits"] = state ? state.uplinkBandwidthBits : undefined;
            resourceInputs["uplinkDelayMs"] = state ? state.uplinkDelayMs : undefined;
            resourceInputs["uplinkJitterMs"] = state ? state.uplinkJitterMs : undefined;
            resourceInputs["uplinkLossPercent"] = state ? state.uplinkLossPercent : undefined;
        } else {
            const args = argsOrState as NetworkProfileArgs | undefined;
            if ((!args || args.projectArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectArn'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["downlinkBandwidthBits"] = args ? args.downlinkBandwidthBits : undefined;
            resourceInputs["downlinkDelayMs"] = args ? args.downlinkDelayMs : undefined;
            resourceInputs["downlinkJitterMs"] = args ? args.downlinkJitterMs : undefined;
            resourceInputs["downlinkLossPercent"] = args ? args.downlinkLossPercent : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectArn"] = args ? args.projectArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uplinkBandwidthBits"] = args ? args.uplinkBandwidthBits : undefined;
            resourceInputs["uplinkDelayMs"] = args ? args.uplinkDelayMs : undefined;
            resourceInputs["uplinkJitterMs"] = args ? args.uplinkJitterMs : undefined;
            resourceInputs["uplinkLossPercent"] = args ? args.uplinkLossPercent : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkProfile resources.
 */
export interface NetworkProfileState {
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    downlinkBandwidthBits?: pulumi.Input<number>;
    downlinkDelayMs?: pulumi.Input<number>;
    downlinkJitterMs?: pulumi.Input<number>;
    downlinkLossPercent?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    projectArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    uplinkBandwidthBits?: pulumi.Input<number>;
    uplinkDelayMs?: pulumi.Input<number>;
    uplinkJitterMs?: pulumi.Input<number>;
    uplinkLossPercent?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NetworkProfile resource.
 */
export interface NetworkProfileArgs {
    description?: pulumi.Input<string>;
    downlinkBandwidthBits?: pulumi.Input<number>;
    downlinkDelayMs?: pulumi.Input<number>;
    downlinkJitterMs?: pulumi.Input<number>;
    downlinkLossPercent?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    projectArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    uplinkBandwidthBits?: pulumi.Input<number>;
    uplinkDelayMs?: pulumi.Input<number>;
    uplinkJitterMs?: pulumi.Input<number>;
    uplinkLossPercent?: pulumi.Input<number>;
}
