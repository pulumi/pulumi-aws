// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Upload extends pulumi.CustomResource {
    /**
     * Get an existing Upload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UploadState, opts?: pulumi.CustomResourceOptions): Upload {
        return new Upload(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:devicefarm/upload:Upload';

    /**
     * Returns true if the given object is an instance of Upload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Upload {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Upload.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly category!: pulumi.Output<string>;
    public readonly contentType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly metadata!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectArn!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Upload resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UploadArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UploadArgs | UploadState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UploadState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectArn"] = state ? state.projectArn : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as UploadArgs | undefined;
            if ((!args || args.projectArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectArn'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectArn"] = args ? args.projectArn : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Upload.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Upload resources.
 */
export interface UploadState {
    arn?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectArn?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Upload resource.
 */
export interface UploadArgs {
    contentType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectArn: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
