// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Service Catalog AppRegistry Attribute Group Association.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.servicecatalog.AppregistryApplication("example", {name: "example-app"});
 * const exampleAppregistryAttributeGroup = new aws.servicecatalog.AppregistryAttributeGroup("example", {
 *     name: "example",
 *     description: "example description",
 *     attributes: JSON.stringify({
 *         app: "exampleapp",
 *         group: "examplegroup",
 *     }),
 * });
 * const exampleAppregistryAttributeGroupAssociation = new aws.servicecatalog.AppregistryAttributeGroupAssociation("example", {
 *     applicationId: example.id,
 *     attributeGroupId: exampleAppregistryAttributeGroup.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Service Catalog AppRegistry Attribute Group Association using `application_id` and `attribute_group_id` arguments separated by a comma (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:servicecatalog/appregistryAttributeGroupAssociation:AppregistryAttributeGroupAssociation example 12456778723424sdffsdfsdq34,12234t3564dsfsdf34asff4ww3
 * ```
 */
export class AppregistryAttributeGroupAssociation extends pulumi.CustomResource {
    /**
     * Get an existing AppregistryAttributeGroupAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppregistryAttributeGroupAssociationState, opts?: pulumi.CustomResourceOptions): AppregistryAttributeGroupAssociation {
        return new AppregistryAttributeGroupAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:servicecatalog/appregistryAttributeGroupAssociation:AppregistryAttributeGroupAssociation';

    /**
     * Returns true if the given object is an instance of AppregistryAttributeGroupAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppregistryAttributeGroupAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppregistryAttributeGroupAssociation.__pulumiType;
    }

    /**
     * ID of the application.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * ID of the attribute group to associate with the application.
     */
    public readonly attributeGroupId!: pulumi.Output<string>;

    /**
     * Create a AppregistryAttributeGroupAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppregistryAttributeGroupAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppregistryAttributeGroupAssociationArgs | AppregistryAttributeGroupAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppregistryAttributeGroupAssociationState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["attributeGroupId"] = state ? state.attributeGroupId : undefined;
        } else {
            const args = argsOrState as AppregistryAttributeGroupAssociationArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.attributeGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributeGroupId'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["attributeGroupId"] = args ? args.attributeGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppregistryAttributeGroupAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppregistryAttributeGroupAssociation resources.
 */
export interface AppregistryAttributeGroupAssociationState {
    /**
     * ID of the application.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * ID of the attribute group to associate with the application.
     */
    attributeGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppregistryAttributeGroupAssociation resource.
 */
export interface AppregistryAttributeGroupAssociationArgs {
    /**
     * ID of the application.
     */
    applicationId: pulumi.Input<string>;
    /**
     * ID of the attribute group to associate with the application.
     */
    attributeGroupId: pulumi.Input<string>;
}
