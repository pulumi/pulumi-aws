// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Service Catalog AppRegistry Application.
 *
 * > An AWS Service Catalog AppRegistry Application is displayed in the AWS Console under "MyApplications".
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.servicecatalog.AppregistryApplication("example", {name: "example-app"});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Connecting Resources
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.servicecatalog.AppregistryApplication("example", {name: "example-app"});
 * const bucket = new aws.s3.BucketV2("bucket", {
 *     bucket: "example-bucket",
 *     tags: {
 *         awsApplication: example.arn,
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import AWS Service Catalog AppRegistry Application using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:servicecatalog/appregistryApplication:AppregistryApplication example application-id-12345678
 * ```
 */
export class AppregistryApplication extends pulumi.CustomResource {
    /**
     * Get an existing AppregistryApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppregistryApplicationState, opts?: pulumi.CustomResourceOptions): AppregistryApplication {
        return new AppregistryApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:servicecatalog/appregistryApplication:AppregistryApplication';

    /**
     * Returns true if the given object is an instance of AppregistryApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppregistryApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppregistryApplication.__pulumiType;
    }

    /**
     * ARN (Amazon Resource Name) of the application.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Description of the application.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the application. The name must be unique within an AWS region.
     *
     * The following arguments are optional:
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AppregistryApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AppregistryApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppregistryApplicationArgs | AppregistryApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppregistryApplicationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AppregistryApplicationArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppregistryApplication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppregistryApplication resources.
 */
export interface AppregistryApplicationState {
    /**
     * ARN (Amazon Resource Name) of the application.
     */
    arn?: pulumi.Input<string>;
    /**
     * Description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the application. The name must be unique within an AWS region.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppregistryApplication resource.
 */
export interface AppregistryApplicationArgs {
    /**
     * Description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the application. The name must be unique within an AWS region.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
}
