// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class ProvisionedProduct extends pulumi.CustomResource {
    /**
     * Get an existing ProvisionedProduct resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProvisionedProductState, opts?: pulumi.CustomResourceOptions): ProvisionedProduct {
        return new ProvisionedProduct(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:servicecatalog/provisionedProduct:ProvisionedProduct';

    /**
     * Returns true if the given object is an instance of ProvisionedProduct.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProvisionedProduct {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProvisionedProduct.__pulumiType;
    }

    public readonly acceptLanguage!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly cloudwatchDashboardNames!: pulumi.Output<string[]>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly lastProvisioningRecordId!: pulumi.Output<string>;
    public /*out*/ readonly lastRecordId!: pulumi.Output<string>;
    public /*out*/ readonly lastSuccessfulProvisioningRecordId!: pulumi.Output<string>;
    public /*out*/ readonly launchRoleArn!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationArns!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly outputs!: pulumi.Output<outputs.servicecatalog.ProvisionedProductOutput[]>;
    public readonly pathId!: pulumi.Output<string>;
    public readonly pathName!: pulumi.Output<string | undefined>;
    public readonly productId!: pulumi.Output<string>;
    public readonly productName!: pulumi.Output<string | undefined>;
    public readonly provisioningArtifactId!: pulumi.Output<string>;
    public readonly provisioningArtifactName!: pulumi.Output<string | undefined>;
    public readonly provisioningParameters!: pulumi.Output<outputs.servicecatalog.ProvisionedProductProvisioningParameter[] | undefined>;
    public readonly retainPhysicalResources!: pulumi.Output<boolean | undefined>;
    public readonly stackSetProvisioningPreferences!: pulumi.Output<outputs.servicecatalog.ProvisionedProductStackSetProvisioningPreferences | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly statusMessage!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ProvisionedProduct resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProvisionedProductArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProvisionedProductArgs | ProvisionedProductState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProvisionedProductState | undefined;
            resourceInputs["acceptLanguage"] = state ? state.acceptLanguage : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cloudwatchDashboardNames"] = state ? state.cloudwatchDashboardNames : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["lastProvisioningRecordId"] = state ? state.lastProvisioningRecordId : undefined;
            resourceInputs["lastRecordId"] = state ? state.lastRecordId : undefined;
            resourceInputs["lastSuccessfulProvisioningRecordId"] = state ? state.lastSuccessfulProvisioningRecordId : undefined;
            resourceInputs["launchRoleArn"] = state ? state.launchRoleArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationArns"] = state ? state.notificationArns : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["pathId"] = state ? state.pathId : undefined;
            resourceInputs["pathName"] = state ? state.pathName : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["productName"] = state ? state.productName : undefined;
            resourceInputs["provisioningArtifactId"] = state ? state.provisioningArtifactId : undefined;
            resourceInputs["provisioningArtifactName"] = state ? state.provisioningArtifactName : undefined;
            resourceInputs["provisioningParameters"] = state ? state.provisioningParameters : undefined;
            resourceInputs["retainPhysicalResources"] = state ? state.retainPhysicalResources : undefined;
            resourceInputs["stackSetProvisioningPreferences"] = state ? state.stackSetProvisioningPreferences : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusMessage"] = state ? state.statusMessage : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ProvisionedProductArgs | undefined;
            resourceInputs["acceptLanguage"] = args ? args.acceptLanguage : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationArns"] = args ? args.notificationArns : undefined;
            resourceInputs["pathId"] = args ? args.pathId : undefined;
            resourceInputs["pathName"] = args ? args.pathName : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["productName"] = args ? args.productName : undefined;
            resourceInputs["provisioningArtifactId"] = args ? args.provisioningArtifactId : undefined;
            resourceInputs["provisioningArtifactName"] = args ? args.provisioningArtifactName : undefined;
            resourceInputs["provisioningParameters"] = args ? args.provisioningParameters : undefined;
            resourceInputs["retainPhysicalResources"] = args ? args.retainPhysicalResources : undefined;
            resourceInputs["stackSetProvisioningPreferences"] = args ? args.stackSetProvisioningPreferences : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["cloudwatchDashboardNames"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastProvisioningRecordId"] = undefined /*out*/;
            resourceInputs["lastRecordId"] = undefined /*out*/;
            resourceInputs["lastSuccessfulProvisioningRecordId"] = undefined /*out*/;
            resourceInputs["launchRoleArn"] = undefined /*out*/;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProvisionedProduct.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProvisionedProduct resources.
 */
export interface ProvisionedProductState {
    acceptLanguage?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    cloudwatchDashboardNames?: pulumi.Input<pulumi.Input<string>[]>;
    createdTime?: pulumi.Input<string>;
    ignoreErrors?: pulumi.Input<boolean>;
    lastProvisioningRecordId?: pulumi.Input<string>;
    lastRecordId?: pulumi.Input<string>;
    lastSuccessfulProvisioningRecordId?: pulumi.Input<string>;
    launchRoleArn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationArns?: pulumi.Input<pulumi.Input<string>[]>;
    outputs?: pulumi.Input<pulumi.Input<inputs.servicecatalog.ProvisionedProductOutput>[]>;
    pathId?: pulumi.Input<string>;
    pathName?: pulumi.Input<string>;
    productId?: pulumi.Input<string>;
    productName?: pulumi.Input<string>;
    provisioningArtifactId?: pulumi.Input<string>;
    provisioningArtifactName?: pulumi.Input<string>;
    provisioningParameters?: pulumi.Input<pulumi.Input<inputs.servicecatalog.ProvisionedProductProvisioningParameter>[]>;
    retainPhysicalResources?: pulumi.Input<boolean>;
    stackSetProvisioningPreferences?: pulumi.Input<inputs.servicecatalog.ProvisionedProductStackSetProvisioningPreferences>;
    status?: pulumi.Input<string>;
    statusMessage?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProvisionedProduct resource.
 */
export interface ProvisionedProductArgs {
    acceptLanguage?: pulumi.Input<string>;
    ignoreErrors?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    notificationArns?: pulumi.Input<pulumi.Input<string>[]>;
    pathId?: pulumi.Input<string>;
    pathName?: pulumi.Input<string>;
    productId?: pulumi.Input<string>;
    productName?: pulumi.Input<string>;
    provisioningArtifactId?: pulumi.Input<string>;
    provisioningArtifactName?: pulumi.Input<string>;
    provisioningParameters?: pulumi.Input<pulumi.Input<inputs.servicecatalog.ProvisionedProductProvisioningParameter>[]>;
    retainPhysicalResources?: pulumi.Input<boolean>;
    stackSetProvisioningPreferences?: pulumi.Input<inputs.servicecatalog.ProvisionedProductStackSetProvisioningPreferences>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
