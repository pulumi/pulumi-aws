// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BudgetResourceAssociationArgs, BudgetResourceAssociationState } from "./budgetResourceAssociation";
export type BudgetResourceAssociation = import("./budgetResourceAssociation").BudgetResourceAssociation;
export const BudgetResourceAssociation: typeof import("./budgetResourceAssociation").BudgetResourceAssociation = null as any;
utilities.lazyLoad(exports, ["BudgetResourceAssociation"], () => require("./budgetResourceAssociation"));

export { ConstraintArgs, ConstraintState } from "./constraint";
export type Constraint = import("./constraint").Constraint;
export const Constraint: typeof import("./constraint").Constraint = null as any;
utilities.lazyLoad(exports, ["Constraint"], () => require("./constraint"));

export { GetConstraintArgs, GetConstraintResult, GetConstraintOutputArgs } from "./getConstraint";
export const getConstraint: typeof import("./getConstraint").getConstraint = null as any;
export const getConstraintOutput: typeof import("./getConstraint").getConstraintOutput = null as any;
utilities.lazyLoad(exports, ["getConstraint","getConstraintOutput"], () => require("./getConstraint"));

export { GetLaunchPathsArgs, GetLaunchPathsResult, GetLaunchPathsOutputArgs } from "./getLaunchPaths";
export const getLaunchPaths: typeof import("./getLaunchPaths").getLaunchPaths = null as any;
export const getLaunchPathsOutput: typeof import("./getLaunchPaths").getLaunchPathsOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchPaths","getLaunchPathsOutput"], () => require("./getLaunchPaths"));

export { GetPortfolioArgs, GetPortfolioResult, GetPortfolioOutputArgs } from "./getPortfolio";
export const getPortfolio: typeof import("./getPortfolio").getPortfolio = null as any;
export const getPortfolioOutput: typeof import("./getPortfolio").getPortfolioOutput = null as any;
utilities.lazyLoad(exports, ["getPortfolio","getPortfolioOutput"], () => require("./getPortfolio"));

export { GetPortfolioConstraintsArgs, GetPortfolioConstraintsResult, GetPortfolioConstraintsOutputArgs } from "./getPortfolioConstraints";
export const getPortfolioConstraints: typeof import("./getPortfolioConstraints").getPortfolioConstraints = null as any;
export const getPortfolioConstraintsOutput: typeof import("./getPortfolioConstraints").getPortfolioConstraintsOutput = null as any;
utilities.lazyLoad(exports, ["getPortfolioConstraints","getPortfolioConstraintsOutput"], () => require("./getPortfolioConstraints"));

export { GetProductArgs, GetProductResult, GetProductOutputArgs } from "./getProduct";
export const getProduct: typeof import("./getProduct").getProduct = null as any;
export const getProductOutput: typeof import("./getProduct").getProductOutput = null as any;
utilities.lazyLoad(exports, ["getProduct","getProductOutput"], () => require("./getProduct"));

export { OrganizationsAccessArgs, OrganizationsAccessState } from "./organizationsAccess";
export type OrganizationsAccess = import("./organizationsAccess").OrganizationsAccess;
export const OrganizationsAccess: typeof import("./organizationsAccess").OrganizationsAccess = null as any;
utilities.lazyLoad(exports, ["OrganizationsAccess"], () => require("./organizationsAccess"));

export { PortfolioArgs, PortfolioState } from "./portfolio";
export type Portfolio = import("./portfolio").Portfolio;
export const Portfolio: typeof import("./portfolio").Portfolio = null as any;
utilities.lazyLoad(exports, ["Portfolio"], () => require("./portfolio"));

export { PortfolioShareArgs, PortfolioShareState } from "./portfolioShare";
export type PortfolioShare = import("./portfolioShare").PortfolioShare;
export const PortfolioShare: typeof import("./portfolioShare").PortfolioShare = null as any;
utilities.lazyLoad(exports, ["PortfolioShare"], () => require("./portfolioShare"));

export { PrincipalPortfolioAssociationArgs, PrincipalPortfolioAssociationState } from "./principalPortfolioAssociation";
export type PrincipalPortfolioAssociation = import("./principalPortfolioAssociation").PrincipalPortfolioAssociation;
export const PrincipalPortfolioAssociation: typeof import("./principalPortfolioAssociation").PrincipalPortfolioAssociation = null as any;
utilities.lazyLoad(exports, ["PrincipalPortfolioAssociation"], () => require("./principalPortfolioAssociation"));

export { ProductArgs, ProductState } from "./product";
export type Product = import("./product").Product;
export const Product: typeof import("./product").Product = null as any;
utilities.lazyLoad(exports, ["Product"], () => require("./product"));

export { ProductPortfolioAssociationArgs, ProductPortfolioAssociationState } from "./productPortfolioAssociation";
export type ProductPortfolioAssociation = import("./productPortfolioAssociation").ProductPortfolioAssociation;
export const ProductPortfolioAssociation: typeof import("./productPortfolioAssociation").ProductPortfolioAssociation = null as any;
utilities.lazyLoad(exports, ["ProductPortfolioAssociation"], () => require("./productPortfolioAssociation"));

export { ProvisionedProductArgs, ProvisionedProductState } from "./provisionedProduct";
export type ProvisionedProduct = import("./provisionedProduct").ProvisionedProduct;
export const ProvisionedProduct: typeof import("./provisionedProduct").ProvisionedProduct = null as any;
utilities.lazyLoad(exports, ["ProvisionedProduct"], () => require("./provisionedProduct"));

export { ProvisioningArtifactArgs, ProvisioningArtifactState } from "./provisioningArtifact";
export type ProvisioningArtifact = import("./provisioningArtifact").ProvisioningArtifact;
export const ProvisioningArtifact: typeof import("./provisioningArtifact").ProvisioningArtifact = null as any;
utilities.lazyLoad(exports, ["ProvisioningArtifact"], () => require("./provisioningArtifact"));

export { ServiceActionArgs, ServiceActionState } from "./serviceAction";
export type ServiceAction = import("./serviceAction").ServiceAction;
export const ServiceAction: typeof import("./serviceAction").ServiceAction = null as any;
utilities.lazyLoad(exports, ["ServiceAction"], () => require("./serviceAction"));

export { TagOptionArgs, TagOptionState } from "./tagOption";
export type TagOption = import("./tagOption").TagOption;
export const TagOption: typeof import("./tagOption").TagOption = null as any;
utilities.lazyLoad(exports, ["TagOption"], () => require("./tagOption"));

export { TagOptionResourceAssociationArgs, TagOptionResourceAssociationState } from "./tagOptionResourceAssociation";
export type TagOptionResourceAssociation = import("./tagOptionResourceAssociation").TagOptionResourceAssociation;
export const TagOptionResourceAssociation: typeof import("./tagOptionResourceAssociation").TagOptionResourceAssociation = null as any;
utilities.lazyLoad(exports, ["TagOptionResourceAssociation"], () => require("./tagOptionResourceAssociation"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:servicecatalog/budgetResourceAssociation:BudgetResourceAssociation":
                return new BudgetResourceAssociation(name, <any>undefined, { urn })
            case "aws:servicecatalog/constraint:Constraint":
                return new Constraint(name, <any>undefined, { urn })
            case "aws:servicecatalog/organizationsAccess:OrganizationsAccess":
                return new OrganizationsAccess(name, <any>undefined, { urn })
            case "aws:servicecatalog/portfolio:Portfolio":
                return new Portfolio(name, <any>undefined, { urn })
            case "aws:servicecatalog/portfolioShare:PortfolioShare":
                return new PortfolioShare(name, <any>undefined, { urn })
            case "aws:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation":
                return new PrincipalPortfolioAssociation(name, <any>undefined, { urn })
            case "aws:servicecatalog/product:Product":
                return new Product(name, <any>undefined, { urn })
            case "aws:servicecatalog/productPortfolioAssociation:ProductPortfolioAssociation":
                return new ProductPortfolioAssociation(name, <any>undefined, { urn })
            case "aws:servicecatalog/provisionedProduct:ProvisionedProduct":
                return new ProvisionedProduct(name, <any>undefined, { urn })
            case "aws:servicecatalog/provisioningArtifact:ProvisioningArtifact":
                return new ProvisioningArtifact(name, <any>undefined, { urn })
            case "aws:servicecatalog/serviceAction:ServiceAction":
                return new ServiceAction(name, <any>undefined, { urn })
            case "aws:servicecatalog/tagOption:TagOption":
                return new TagOption(name, <any>undefined, { urn })
            case "aws:servicecatalog/tagOptionResourceAssociation:TagOptionResourceAssociation":
                return new TagOptionResourceAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "servicecatalog/budgetResourceAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/constraint", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/organizationsAccess", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/portfolio", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/portfolioShare", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/principalPortfolioAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/product", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/productPortfolioAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/provisionedProduct", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/provisioningArtifact", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/serviceAction", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/tagOption", _module)
pulumi.runtime.registerResourceModule("aws", "servicecatalog/tagOptionResourceAssociation", _module)
