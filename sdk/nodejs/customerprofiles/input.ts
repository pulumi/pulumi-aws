// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface DomainMatching {
    /**
     * A block that specifies the configuration about the auto-merging process. Documented below.
     */
    autoMerging?: pulumi.Input<inputs.DomainMatchingAutoMerging>;
    /**
     * The flag that enables the matching process of duplicate profiles.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * A block that specifies the configuration for exporting Identity Resolution results. Documented below.
     */
    exportingConfig?: pulumi.Input<inputs.DomainMatchingExportingConfig>;
    /**
     * A block that specifies the day and time when you want to start the Identity Resolution Job every week. Documented below.
     */
    jobSchedule?: pulumi.Input<inputs.DomainMatchingJobSchedule>;
}
export interface DomainMatchingAutoMerging {
    /**
     * A block that specifies how the auto-merging process should resolve conflicts between different profiles. Documented below.
     */
    conflictResolution?: pulumi.Input<inputs.DomainMatchingAutoMergingConflictResolution>;
    /**
     * A block that specifies a list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged. Documented below.
     * * `minAllowedConfidenceScoreForMerging ` - (Optional) A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
     */
    consolidation?: pulumi.Input<inputs.DomainMatchingAutoMergingConsolidation>;
    /**
     * The flag that enables the auto-merging of duplicate profiles.
     */
    enabled: pulumi.Input<boolean>;
    minAllowedConfidenceScoreForMerging?: pulumi.Input<number>;
}
export interface DomainMatchingAutoMergingConflictResolution {
    /**
     * How the auto-merging process should resolve conflicts between different profiles. Valid values are `RECENCY` and `SOURCE`
     */
    conflictResolvingModel: pulumi.Input<string>;
    /**
     * The `ObjectType` name that is used to resolve profile merging conflicts when choosing `SOURCE` as the `ConflictResolvingModel`.
     */
    sourceName?: pulumi.Input<string>;
}
export interface DomainMatchingAutoMergingConsolidation {
    /**
     * A list of matching criteria.
     */
    matchingAttributesLists: pulumi.Input<pulumi.Input<pulumi.Input<string>[]>[]>;
}
export interface DomainMatchingExportingConfig {
    s3Exporting?: pulumi.Input<inputs.DomainMatchingExportingConfigS3Exporting>;
}
export interface DomainMatchingExportingConfigS3Exporting {
    s3BucketName: pulumi.Input<string>;
    s3KeyName?: pulumi.Input<string>;
}
export interface DomainMatchingJobSchedule {
    /**
     * The day when the Identity Resolution Job should run every week.
     */
    dayOfTheWeek: pulumi.Input<string>;
    /**
     * The time when the Identity Resolution Job should run every week.
     */
    time: pulumi.Input<string>;
}
export interface DomainRuleBasedMatching {
    /**
     * A block that configures information about the `AttributeTypesSelector` where the rule-based identity resolution uses to match profiles. Documented below.
     */
    attributeTypesSelector?: pulumi.Input<inputs.DomainRuleBasedMatchingAttributeTypesSelector>;
    /**
     * A block that specifies how the auto-merging process should resolve conflicts between different profiles. Documented below.
     */
    conflictResolution?: pulumi.Input<inputs.DomainRuleBasedMatchingConflictResolution>;
    /**
     * The flag that enables the rule-based matching process of duplicate profiles.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * A block that specifies the configuration for exporting Identity Resolution results. Documented below.
     */
    exportingConfig?: pulumi.Input<inputs.DomainRuleBasedMatchingExportingConfig>;
    /**
     * A block that configures how the rule-based matching process should match profiles. You can have up to 15 `rule` in the `natchingRules`. Documented below.
     */
    matchingRules?: pulumi.Input<pulumi.Input<inputs.DomainRuleBasedMatchingMatchingRule>[]>;
    /**
     * Indicates the maximum allowed rule level for matching.
     */
    maxAllowedRuleLevelForMatching?: pulumi.Input<number>;
    /**
     * Indicates the maximum allowed rule level for merging.
     */
    maxAllowedRuleLevelForMerging?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}
export interface DomainRuleBasedMatchingAttributeTypesSelector {
    /**
     * The `Address` type. You can choose from `Address`, `BusinessAddress`, `MaillingAddress`, and `ShippingAddress`.
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configures the `AttributeMatchingModel`, you can either choose `ONE_TO_ONE` or `MANY_TO_MANY`.
     */
    attributeMatchingModel: pulumi.Input<string>;
    /**
     * The `Email` type. You can choose from `EmailAddress`, `BusinessEmailAddress` and `PersonalEmailAddress`.
     */
    emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `PhoneNumber` type. You can choose from `PhoneNumber`, `HomePhoneNumber`, and `MobilePhoneNumber`.
     */
    phoneNumbers?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface DomainRuleBasedMatchingConflictResolution {
    /**
     * How the auto-merging process should resolve conflicts between different profiles. Valid values are `RECENCY` and `SOURCE`
     */
    conflictResolvingModel: pulumi.Input<string>;
    /**
     * The `ObjectType` name that is used to resolve profile merging conflicts when choosing `SOURCE` as the `ConflictResolvingModel`.
     */
    sourceName?: pulumi.Input<string>;
}
export interface DomainRuleBasedMatchingExportingConfig {
    s3Exporting?: pulumi.Input<inputs.DomainRuleBasedMatchingExportingConfigS3Exporting>;
}
export interface DomainRuleBasedMatchingExportingConfigS3Exporting {
    s3BucketName: pulumi.Input<string>;
    s3KeyName?: pulumi.Input<string>;
}
export interface DomainRuleBasedMatchingMatchingRule {
    /**
     * A single rule level of the `matchRules`. Configures how the rule-based matching process should match profiles.
     */
    rules: pulumi.Input<pulumi.Input<string>[]>;
}
export interface ProfileAddress {
    /**
     * The first line of a customer address.
     */
    address1?: pulumi.Input<string>;
    /**
     * The second line of a customer address.
     */
    address2?: pulumi.Input<string>;
    /**
     * The third line of a customer address.
     */
    address3?: pulumi.Input<string>;
    /**
     * The fourth line of a customer address.
     */
    address4?: pulumi.Input<string>;
    /**
     * The city in which a customer lives.
     */
    city?: pulumi.Input<string>;
    /**
     * The country in which a customer lives.
     */
    country?: pulumi.Input<string>;
    /**
     * The county in which a customer lives.
     */
    county?: pulumi.Input<string>;
    /**
     * The postal code of a customer address.
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The province in which a customer lives.
     */
    province?: pulumi.Input<string>;
    /**
     * The state in which a customer lives.
     */
    state?: pulumi.Input<string>;
}
export interface ProfileBillingAddress {
    address1?: pulumi.Input<string>;
    address2?: pulumi.Input<string>;
    address3?: pulumi.Input<string>;
    address4?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    county?: pulumi.Input<string>;
    postalCode?: pulumi.Input<string>;
    province?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
export interface ProfileMailingAddress {
    address1?: pulumi.Input<string>;
    address2?: pulumi.Input<string>;
    address3?: pulumi.Input<string>;
    address4?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    county?: pulumi.Input<string>;
    postalCode?: pulumi.Input<string>;
    province?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
export interface ProfileShippingAddress {
    address1?: pulumi.Input<string>;
    address2?: pulumi.Input<string>;
    address3?: pulumi.Input<string>;
    address4?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    county?: pulumi.Input<string>;
    postalCode?: pulumi.Input<string>;
    province?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
