// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterPolicyArgs, ClusterPolicyState } from "./clusterPolicy";
export type ClusterPolicy = import("./clusterPolicy").ClusterPolicy;
export const ClusterPolicy: typeof import("./clusterPolicy").ClusterPolicy = null as any;
utilities.lazyLoad(exports, ["ClusterPolicy"], () => require("./clusterPolicy"));

export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { GetBrokerNodesArgs, GetBrokerNodesResult, GetBrokerNodesOutputArgs } from "./getBrokerNodes";
export const getBrokerNodes: typeof import("./getBrokerNodes").getBrokerNodes = null as any;
export const getBrokerNodesOutput: typeof import("./getBrokerNodes").getBrokerNodesOutput = null as any;
utilities.lazyLoad(exports, ["getBrokerNodes","getBrokerNodesOutput"], () => require("./getBrokerNodes"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetConfigurationArgs, GetConfigurationResult, GetConfigurationOutputArgs } from "./getConfiguration";
export const getConfiguration: typeof import("./getConfiguration").getConfiguration = null as any;
export const getConfigurationOutput: typeof import("./getConfiguration").getConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getConfiguration","getConfigurationOutput"], () => require("./getConfiguration"));

export { GetKafkaVersionArgs, GetKafkaVersionResult, GetKafkaVersionOutputArgs } from "./getKafkaVersion";
export const getKafkaVersion: typeof import("./getKafkaVersion").getKafkaVersion = null as any;
export const getKafkaVersionOutput: typeof import("./getKafkaVersion").getKafkaVersionOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaVersion","getKafkaVersionOutput"], () => require("./getKafkaVersion"));

export { GetVpcConnectionArgs, GetVpcConnectionResult, GetVpcConnectionOutputArgs } from "./getVpcConnection";
export const getVpcConnection: typeof import("./getVpcConnection").getVpcConnection = null as any;
export const getVpcConnectionOutput: typeof import("./getVpcConnection").getVpcConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVpcConnection","getVpcConnectionOutput"], () => require("./getVpcConnection"));

export { ScramSecretAssociationArgs, ScramSecretAssociationState } from "./scramSecretAssociation";
export type ScramSecretAssociation = import("./scramSecretAssociation").ScramSecretAssociation;
export const ScramSecretAssociation: typeof import("./scramSecretAssociation").ScramSecretAssociation = null as any;
utilities.lazyLoad(exports, ["ScramSecretAssociation"], () => require("./scramSecretAssociation"));

export { ServerlessClusterArgs, ServerlessClusterState } from "./serverlessCluster";
export type ServerlessCluster = import("./serverlessCluster").ServerlessCluster;
export const ServerlessCluster: typeof import("./serverlessCluster").ServerlessCluster = null as any;
utilities.lazyLoad(exports, ["ServerlessCluster"], () => require("./serverlessCluster"));

export { VpcConnectionArgs, VpcConnectionState } from "./vpcConnection";
export type VpcConnection = import("./vpcConnection").VpcConnection;
export const VpcConnection: typeof import("./vpcConnection").VpcConnection = null as any;
utilities.lazyLoad(exports, ["VpcConnection"], () => require("./vpcConnection"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:msk/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws:msk/clusterPolicy:ClusterPolicy":
                return new ClusterPolicy(name, <any>undefined, { urn })
            case "aws:msk/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "aws:msk/scramSecretAssociation:ScramSecretAssociation":
                return new ScramSecretAssociation(name, <any>undefined, { urn })
            case "aws:msk/serverlessCluster:ServerlessCluster":
                return new ServerlessCluster(name, <any>undefined, { urn })
            case "aws:msk/vpcConnection:VpcConnection":
                return new VpcConnection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "msk/cluster", _module)
pulumi.runtime.registerResourceModule("aws", "msk/clusterPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "msk/configuration", _module)
pulumi.runtime.registerResourceModule("aws", "msk/scramSecretAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "msk/serverlessCluster", _module)
pulumi.runtime.registerResourceModule("aws", "msk/vpcConnection", _module)
