// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Managed Streaming for Kafka Cluster Policy.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const currentCallerIdentity = aws.getCallerIdentity({});
 * const currentPartition = aws.getPartition({});
 * const example = new aws.msk.ClusterPolicy("example", {
 *     clusterArn: aws_msk_cluster.example.arn,
 *     policy: Promise.all([currentPartition, currentCallerIdentity]).then(([currentPartition, currentCallerIdentity]) => JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Sid: "ExampleMskClusterPolicy",
 *             Effect: "Allow",
 *             Principal: {
 *                 AWS: `arn:${currentPartition.partition}:iam::${currentCallerIdentity.accountId}:root`,
 *             },
 *             Action: [
 *                 "kafka:Describe*",
 *                 "kafka:Get*",
 *                 "kafka:CreateVpcConnection",
 *                 "kafka:GetBootstrapBrokers",
 *             ],
 *             Resource: aws_msk_cluster.example.arn,
 *         }],
 *     })),
 * });
 * ```
 *
 * ## Import
 *
 * In TODO v1.5.0 and later, use an `import` block to import Managed Streaming for Kafka Cluster Policy using the `cluster_arn. For exampleterraform import {
 *
 *  to = aws_msk_cluster_policy.example
 *
 *  id = "arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3" } Using `TODO import`, import Managed Streaming for Kafka Cluster Policy using the `cluster_arn`. For exampleconsole % TODO import aws_msk_cluster_policy.example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
 */
export class ClusterPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ClusterPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterPolicyState, opts?: pulumi.CustomResourceOptions): ClusterPolicy {
        return new ClusterPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:msk/clusterPolicy:ClusterPolicy';

    /**
     * Returns true if the given object is an instance of ClusterPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterPolicy.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) that uniquely identifies the cluster.
     */
    public readonly clusterArn!: pulumi.Output<string>;
    public /*out*/ readonly currentVersion!: pulumi.Output<string>;
    /**
     * Resource policy for cluster.
     */
    public readonly policy!: pulumi.Output<string>;

    /**
     * Create a ClusterPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterPolicyArgs | ClusterPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterPolicyState | undefined;
            resourceInputs["clusterArn"] = state ? state.clusterArn : undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
        } else {
            const args = argsOrState as ClusterPolicyArgs | undefined;
            if ((!args || args.clusterArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterArn'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            resourceInputs["clusterArn"] = args ? args.clusterArn : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["currentVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterPolicy resources.
 */
export interface ClusterPolicyState {
    /**
     * The Amazon Resource Name (ARN) that uniquely identifies the cluster.
     */
    clusterArn?: pulumi.Input<string>;
    currentVersion?: pulumi.Input<string>;
    /**
     * Resource policy for cluster.
     */
    policy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterPolicy resource.
 */
export interface ClusterPolicyArgs {
    /**
     * The Amazon Resource Name (ARN) that uniquely identifies the cluster.
     */
    clusterArn: pulumi.Input<string>;
    /**
     * Resource policy for cluster.
     */
    policy: pulumi.Input<string>;
}
