// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages AWS Managed Streaming for Kafka cluster
 * 
 * > **NOTE:** This AWS service is in Preview and may change before General Availability release. Backwards compatibility is not guaranteed between Terraform AWS Provider releases.
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:msk/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the MSK cluster.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A comma separated list of one or more hostname:port pairs of kafka brokers suitable to boostrap connectivity to the kafka cluster.
     * * `encryption_info.0.encryption_at_rest_kms_key_arn` - The ARN of the KMS key used for encryption at rest of the broker data volumes.
     */
    public /*out*/ readonly bootstrapBrokers!: pulumi.Output<string>;
    /**
     * Nested data for configuring the broker nodes of the Kafka cluster.
     */
    public readonly brokerNodeGroupInfo!: pulumi.Output<{ azDistribution?: string, clientSubnets: string[], ebsVolumeSize: number, instanceType: string, securityGroups: string[] }>;
    /**
     * Name of the MSK cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Nested data for specifying encryption at rest info.  See below.
     */
    public readonly encryptionInfo!: pulumi.Output<{ encryptionAtRestKmsKeyArn: string }>;
    /**
     * Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
     */
    public readonly enhancedMonitoring!: pulumi.Output<string | undefined>;
    /**
     * Specify the desired Kafka software version.
     */
    public readonly kafkaVersion!: pulumi.Output<string>;
    /**
     * The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
     */
    public readonly numberOfBrokerNodes!: pulumi.Output<number>;
    /**
     * A mapping of tags to assign to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * A comma separated list of one or more IP:port pairs to use to connect to the Apache Zookeeper cluster.
     */
    public /*out*/ readonly zookeeperConnectString!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClusterState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["bootstrapBrokers"] = state ? state.bootstrapBrokers : undefined;
            inputs["brokerNodeGroupInfo"] = state ? state.brokerNodeGroupInfo : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["encryptionInfo"] = state ? state.encryptionInfo : undefined;
            inputs["enhancedMonitoring"] = state ? state.enhancedMonitoring : undefined;
            inputs["kafkaVersion"] = state ? state.kafkaVersion : undefined;
            inputs["numberOfBrokerNodes"] = state ? state.numberOfBrokerNodes : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["zookeeperConnectString"] = state ? state.zookeeperConnectString : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (!args || args.brokerNodeGroupInfo === undefined) {
                throw new Error("Missing required property 'brokerNodeGroupInfo'");
            }
            if (!args || args.clusterName === undefined) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (!args || args.kafkaVersion === undefined) {
                throw new Error("Missing required property 'kafkaVersion'");
            }
            if (!args || args.numberOfBrokerNodes === undefined) {
                throw new Error("Missing required property 'numberOfBrokerNodes'");
            }
            inputs["brokerNodeGroupInfo"] = args ? args.brokerNodeGroupInfo : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["encryptionInfo"] = args ? args.encryptionInfo : undefined;
            inputs["enhancedMonitoring"] = args ? args.enhancedMonitoring : undefined;
            inputs["kafkaVersion"] = args ? args.kafkaVersion : undefined;
            inputs["numberOfBrokerNodes"] = args ? args.numberOfBrokerNodes : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["bootstrapBrokers"] = undefined /*out*/;
            inputs["zookeeperConnectString"] = undefined /*out*/;
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Amazon Resource Name (ARN) of the MSK cluster.
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * A comma separated list of one or more hostname:port pairs of kafka brokers suitable to boostrap connectivity to the kafka cluster.
     * * `encryption_info.0.encryption_at_rest_kms_key_arn` - The ARN of the KMS key used for encryption at rest of the broker data volumes.
     */
    readonly bootstrapBrokers?: pulumi.Input<string>;
    /**
     * Nested data for configuring the broker nodes of the Kafka cluster.
     */
    readonly brokerNodeGroupInfo?: pulumi.Input<{ azDistribution?: pulumi.Input<string>, clientSubnets: pulumi.Input<pulumi.Input<string>[]>, ebsVolumeSize: pulumi.Input<number>, instanceType: pulumi.Input<string>, securityGroups: pulumi.Input<pulumi.Input<string>[]> }>;
    /**
     * Name of the MSK cluster.
     */
    readonly clusterName?: pulumi.Input<string>;
    /**
     * Nested data for specifying encryption at rest info.  See below.
     */
    readonly encryptionInfo?: pulumi.Input<{ encryptionAtRestKmsKeyArn?: pulumi.Input<string> }>;
    /**
     * Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
     */
    readonly enhancedMonitoring?: pulumi.Input<string>;
    /**
     * Specify the desired Kafka software version.
     */
    readonly kafkaVersion?: pulumi.Input<string>;
    /**
     * The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
     */
    readonly numberOfBrokerNodes?: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource
     */
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A comma separated list of one or more IP:port pairs to use to connect to the Apache Zookeeper cluster.
     */
    readonly zookeeperConnectString?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Nested data for configuring the broker nodes of the Kafka cluster.
     */
    readonly brokerNodeGroupInfo: pulumi.Input<{ azDistribution?: pulumi.Input<string>, clientSubnets: pulumi.Input<pulumi.Input<string>[]>, ebsVolumeSize: pulumi.Input<number>, instanceType: pulumi.Input<string>, securityGroups: pulumi.Input<pulumi.Input<string>[]> }>;
    /**
     * Name of the MSK cluster.
     */
    readonly clusterName: pulumi.Input<string>;
    /**
     * Nested data for specifying encryption at rest info.  See below.
     */
    readonly encryptionInfo?: pulumi.Input<{ encryptionAtRestKmsKeyArn?: pulumi.Input<string> }>;
    /**
     * Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
     */
    readonly enhancedMonitoring?: pulumi.Input<string>;
    /**
     * Specify the desired Kafka software version.
     */
    readonly kafkaVersion: pulumi.Input<string>;
    /**
     * The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
     */
    readonly numberOfBrokerNodes: pulumi.Input<number>;
    /**
     * A mapping of tags to assign to the resource
     */
    readonly tags?: pulumi.Input<{[key: string]: any}>;
}
