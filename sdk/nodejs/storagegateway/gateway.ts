// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:storagegateway/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    public readonly activationKey!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly averageDownloadRateLimitInBitsPerSec!: pulumi.Output<number | undefined>;
    public readonly averageUploadRateLimitInBitsPerSec!: pulumi.Output<number | undefined>;
    public readonly cloudwatchLogGroupArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ec2InstanceId!: pulumi.Output<string>;
    public /*out*/ readonly endpointType!: pulumi.Output<string>;
    public /*out*/ readonly gatewayId!: pulumi.Output<string>;
    public readonly gatewayIpAddress!: pulumi.Output<string>;
    public readonly gatewayName!: pulumi.Output<string>;
    public /*out*/ readonly gatewayNetworkInterfaces!: pulumi.Output<outputs.storagegateway.GatewayGatewayNetworkInterface[]>;
    public readonly gatewayTimezone!: pulumi.Output<string>;
    public readonly gatewayType!: pulumi.Output<string | undefined>;
    public readonly gatewayVpcEndpoint!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hostEnvironment!: pulumi.Output<string>;
    public readonly maintenanceStartTime!: pulumi.Output<outputs.storagegateway.GatewayMaintenanceStartTime>;
    public readonly mediumChangerType!: pulumi.Output<string | undefined>;
    public readonly smbActiveDirectorySettings!: pulumi.Output<outputs.storagegateway.GatewaySmbActiveDirectorySettings | undefined>;
    public readonly smbFileShareVisibility!: pulumi.Output<boolean | undefined>;
    public readonly smbGuestPassword!: pulumi.Output<string | undefined>;
    public readonly smbSecurityStrategy!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly tapeDriveType!: pulumi.Output<string | undefined>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["activationKey"] = state ? state.activationKey : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["averageDownloadRateLimitInBitsPerSec"] = state ? state.averageDownloadRateLimitInBitsPerSec : undefined;
            resourceInputs["averageUploadRateLimitInBitsPerSec"] = state ? state.averageUploadRateLimitInBitsPerSec : undefined;
            resourceInputs["cloudwatchLogGroupArn"] = state ? state.cloudwatchLogGroupArn : undefined;
            resourceInputs["ec2InstanceId"] = state ? state.ec2InstanceId : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["gatewayIpAddress"] = state ? state.gatewayIpAddress : undefined;
            resourceInputs["gatewayName"] = state ? state.gatewayName : undefined;
            resourceInputs["gatewayNetworkInterfaces"] = state ? state.gatewayNetworkInterfaces : undefined;
            resourceInputs["gatewayTimezone"] = state ? state.gatewayTimezone : undefined;
            resourceInputs["gatewayType"] = state ? state.gatewayType : undefined;
            resourceInputs["gatewayVpcEndpoint"] = state ? state.gatewayVpcEndpoint : undefined;
            resourceInputs["hostEnvironment"] = state ? state.hostEnvironment : undefined;
            resourceInputs["maintenanceStartTime"] = state ? state.maintenanceStartTime : undefined;
            resourceInputs["mediumChangerType"] = state ? state.mediumChangerType : undefined;
            resourceInputs["smbActiveDirectorySettings"] = state ? state.smbActiveDirectorySettings : undefined;
            resourceInputs["smbFileShareVisibility"] = state ? state.smbFileShareVisibility : undefined;
            resourceInputs["smbGuestPassword"] = state ? state.smbGuestPassword : undefined;
            resourceInputs["smbSecurityStrategy"] = state ? state.smbSecurityStrategy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tapeDriveType"] = state ? state.tapeDriveType : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if ((!args || args.gatewayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayName'");
            }
            if ((!args || args.gatewayTimezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayTimezone'");
            }
            resourceInputs["activationKey"] = args ? args.activationKey : undefined;
            resourceInputs["averageDownloadRateLimitInBitsPerSec"] = args ? args.averageDownloadRateLimitInBitsPerSec : undefined;
            resourceInputs["averageUploadRateLimitInBitsPerSec"] = args ? args.averageUploadRateLimitInBitsPerSec : undefined;
            resourceInputs["cloudwatchLogGroupArn"] = args ? args.cloudwatchLogGroupArn : undefined;
            resourceInputs["gatewayIpAddress"] = args ? args.gatewayIpAddress : undefined;
            resourceInputs["gatewayName"] = args ? args.gatewayName : undefined;
            resourceInputs["gatewayTimezone"] = args ? args.gatewayTimezone : undefined;
            resourceInputs["gatewayType"] = args ? args.gatewayType : undefined;
            resourceInputs["gatewayVpcEndpoint"] = args ? args.gatewayVpcEndpoint : undefined;
            resourceInputs["maintenanceStartTime"] = args ? args.maintenanceStartTime : undefined;
            resourceInputs["mediumChangerType"] = args ? args.mediumChangerType : undefined;
            resourceInputs["smbActiveDirectorySettings"] = args ? args.smbActiveDirectorySettings : undefined;
            resourceInputs["smbFileShareVisibility"] = args ? args.smbFileShareVisibility : undefined;
            resourceInputs["smbGuestPassword"] = args?.smbGuestPassword ? pulumi.secret(args.smbGuestPassword) : undefined;
            resourceInputs["smbSecurityStrategy"] = args ? args.smbSecurityStrategy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tapeDriveType"] = args ? args.tapeDriveType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ec2InstanceId"] = undefined /*out*/;
            resourceInputs["endpointType"] = undefined /*out*/;
            resourceInputs["gatewayId"] = undefined /*out*/;
            resourceInputs["gatewayNetworkInterfaces"] = undefined /*out*/;
            resourceInputs["hostEnvironment"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["smbGuestPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Gateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    activationKey?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    averageDownloadRateLimitInBitsPerSec?: pulumi.Input<number>;
    averageUploadRateLimitInBitsPerSec?: pulumi.Input<number>;
    cloudwatchLogGroupArn?: pulumi.Input<string>;
    ec2InstanceId?: pulumi.Input<string>;
    endpointType?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    gatewayIpAddress?: pulumi.Input<string>;
    gatewayName?: pulumi.Input<string>;
    gatewayNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.storagegateway.GatewayGatewayNetworkInterface>[]>;
    gatewayTimezone?: pulumi.Input<string>;
    gatewayType?: pulumi.Input<string>;
    gatewayVpcEndpoint?: pulumi.Input<string>;
    hostEnvironment?: pulumi.Input<string>;
    maintenanceStartTime?: pulumi.Input<inputs.storagegateway.GatewayMaintenanceStartTime>;
    mediumChangerType?: pulumi.Input<string>;
    smbActiveDirectorySettings?: pulumi.Input<inputs.storagegateway.GatewaySmbActiveDirectorySettings>;
    smbFileShareVisibility?: pulumi.Input<boolean>;
    smbGuestPassword?: pulumi.Input<string>;
    smbSecurityStrategy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tapeDriveType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    activationKey?: pulumi.Input<string>;
    averageDownloadRateLimitInBitsPerSec?: pulumi.Input<number>;
    averageUploadRateLimitInBitsPerSec?: pulumi.Input<number>;
    cloudwatchLogGroupArn?: pulumi.Input<string>;
    gatewayIpAddress?: pulumi.Input<string>;
    gatewayName: pulumi.Input<string>;
    gatewayTimezone: pulumi.Input<string>;
    gatewayType?: pulumi.Input<string>;
    gatewayVpcEndpoint?: pulumi.Input<string>;
    maintenanceStartTime?: pulumi.Input<inputs.storagegateway.GatewayMaintenanceStartTime>;
    mediumChangerType?: pulumi.Input<string>;
    smbActiveDirectorySettings?: pulumi.Input<inputs.storagegateway.GatewaySmbActiveDirectorySettings>;
    smbFileShareVisibility?: pulumi.Input<boolean>;
    smbGuestPassword?: pulumi.Input<string>;
    smbSecurityStrategy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tapeDriveType?: pulumi.Input<string>;
}
