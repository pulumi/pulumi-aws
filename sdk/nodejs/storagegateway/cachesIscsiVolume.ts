// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class CachesIscsiVolume extends pulumi.CustomResource {
    /**
     * Get an existing CachesIscsiVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CachesIscsiVolumeState, opts?: pulumi.CustomResourceOptions): CachesIscsiVolume {
        return new CachesIscsiVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume';

    /**
     * Returns true if the given object is an instance of CachesIscsiVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CachesIscsiVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CachesIscsiVolume.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly chapEnabled!: pulumi.Output<boolean>;
    public readonly gatewayArn!: pulumi.Output<string>;
    public readonly kmsEncrypted!: pulumi.Output<boolean | undefined>;
    public readonly kmsKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lunNumber!: pulumi.Output<number>;
    public readonly networkInterfaceId!: pulumi.Output<string>;
    public /*out*/ readonly networkInterfacePort!: pulumi.Output<number>;
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    public readonly sourceVolumeArn!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly targetArn!: pulumi.Output<string>;
    public readonly targetName!: pulumi.Output<string>;
    public /*out*/ readonly volumeArn!: pulumi.Output<string>;
    public /*out*/ readonly volumeId!: pulumi.Output<string>;
    public readonly volumeSizeInBytes!: pulumi.Output<number>;

    /**
     * Create a CachesIscsiVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CachesIscsiVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CachesIscsiVolumeArgs | CachesIscsiVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CachesIscsiVolumeState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["chapEnabled"] = state ? state.chapEnabled : undefined;
            resourceInputs["gatewayArn"] = state ? state.gatewayArn : undefined;
            resourceInputs["kmsEncrypted"] = state ? state.kmsEncrypted : undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["lunNumber"] = state ? state.lunNumber : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["networkInterfacePort"] = state ? state.networkInterfacePort : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["sourceVolumeArn"] = state ? state.sourceVolumeArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["targetArn"] = state ? state.targetArn : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["volumeArn"] = state ? state.volumeArn : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["volumeSizeInBytes"] = state ? state.volumeSizeInBytes : undefined;
        } else {
            const args = argsOrState as CachesIscsiVolumeArgs | undefined;
            if ((!args || args.gatewayArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayArn'");
            }
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.targetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetName'");
            }
            if ((!args || args.volumeSizeInBytes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeSizeInBytes'");
            }
            resourceInputs["gatewayArn"] = args ? args.gatewayArn : undefined;
            resourceInputs["kmsEncrypted"] = args ? args.kmsEncrypted : undefined;
            resourceInputs["kmsKey"] = args ? args.kmsKey : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["sourceVolumeArn"] = args ? args.sourceVolumeArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["volumeSizeInBytes"] = args ? args.volumeSizeInBytes : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["chapEnabled"] = undefined /*out*/;
            resourceInputs["lunNumber"] = undefined /*out*/;
            resourceInputs["networkInterfacePort"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["targetArn"] = undefined /*out*/;
            resourceInputs["volumeArn"] = undefined /*out*/;
            resourceInputs["volumeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CachesIscsiVolume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CachesIscsiVolume resources.
 */
export interface CachesIscsiVolumeState {
    arn?: pulumi.Input<string>;
    chapEnabled?: pulumi.Input<boolean>;
    gatewayArn?: pulumi.Input<string>;
    kmsEncrypted?: pulumi.Input<boolean>;
    kmsKey?: pulumi.Input<string>;
    lunNumber?: pulumi.Input<number>;
    networkInterfaceId?: pulumi.Input<string>;
    networkInterfacePort?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    sourceVolumeArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetArn?: pulumi.Input<string>;
    targetName?: pulumi.Input<string>;
    volumeArn?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
    volumeSizeInBytes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CachesIscsiVolume resource.
 */
export interface CachesIscsiVolumeArgs {
    gatewayArn: pulumi.Input<string>;
    kmsEncrypted?: pulumi.Input<boolean>;
    kmsKey?: pulumi.Input<string>;
    networkInterfaceId: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    sourceVolumeArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetName: pulumi.Input<string>;
    volumeSizeInBytes: pulumi.Input<number>;
}
