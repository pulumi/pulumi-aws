// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Associate an Amazon FSx file system with the FSx File Gateway. After the association process is complete, the file shares on the Amazon FSx file system are available for access through the gateway. This operation only supports the FSx File Gateway type.
 *
 * [FSx File Gateway requirements](https://docs.aws.amazon.com/filegateway/latest/filefsxw/Requirements.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.FileSystemAssociation("example", {
 *     gatewayArn: aws_storagegateway_gateway.example.arn,
 *     locationArn: aws_fsx_windows_file_system.example.arn,
 *     username: "Admin",
 *     password: "avoid-plaintext-passwords",
 *     auditDestinationArn: aws_s3_bucket.example.arn,
 * });
 * ```
 * ## Required Services Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const awsServiceStoragegatewayAmiFILES3Latest = aws.ssm.getParameter({
 *     name: "/aws/service/storagegateway/ami/FILE_S3/latest",
 * });
 * const testInstance = new aws.ec2.Instance("testInstance", {
 *     ami: awsServiceStoragegatewayAmiFILES3Latest.then(awsServiceStoragegatewayAmiFILES3Latest => awsServiceStoragegatewayAmiFILES3Latest.value),
 *     associatePublicIpAddress: true,
 *     instanceType: data.aws_ec2_instance_type_offering.available.instance_type,
 *     vpcSecurityGroupIds: [aws_security_group.test.id],
 *     subnetId: aws_subnet.test[0].id,
 * }, {
 *     dependsOn: [
 *         aws_route.test,
 *         aws_vpc_dhcp_options_association.test,
 *     ],
 * });
 * const testGateway = new aws.storagegateway.Gateway("testGateway", {
 *     gatewayIpAddress: testInstance.publicIp,
 *     gatewayName: "test-sgw",
 *     gatewayTimezone: "GMT",
 *     gatewayType: "FILE_FSX_SMB",
 *     smbActiveDirectorySettings: {
 *         domainName: aws_directory_service_directory.test.name,
 *         password: aws_directory_service_directory.test.password,
 *         username: "Admin",
 *     },
 * });
 * const testWindowsFileSystem = new aws.fsx.WindowsFileSystem("testWindowsFileSystem", {
 *     activeDirectoryId: aws_directory_service_directory.test.id,
 *     securityGroupIds: [aws_security_group.test.id],
 *     skipFinalBackup: true,
 *     storageCapacity: 32,
 *     subnetIds: [aws_subnet.test[0].id],
 *     throughputCapacity: 8,
 * });
 * const fsx = new aws.storagegateway.FileSystemAssociation("fsx", {
 *     gatewayArn: testGateway.arn,
 *     locationArn: testWindowsFileSystem.arn,
 *     username: "Admin",
 *     password: aws_directory_service_directory.test.password,
 *     cacheAttributes: {
 *         cacheStaleTimeoutInSeconds: 400,
 *     },
 *     auditDestinationArn: aws_cloudwatch_log_group.test.arn,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_storagegateway_file_system_association` can be imported by using the FSx file system association Amazon Resource Name (ARN), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:storagegateway/fileSystemAssociation:FileSystemAssociation example arn:aws:storagegateway:us-east-1:123456789012:fs-association/fsa-0DA347732FDB40125
 * ```
 */
export class FileSystemAssociation extends pulumi.CustomResource {
    /**
     * Get an existing FileSystemAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileSystemAssociationState, opts?: pulumi.CustomResourceOptions): FileSystemAssociation {
        return new FileSystemAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:storagegateway/fileSystemAssociation:FileSystemAssociation';

    /**
     * Returns true if the given object is an instance of FileSystemAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileSystemAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystemAssociation.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the newly created file system association.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the storage used for the audit logs.
     */
    public readonly auditDestinationArn!: pulumi.Output<string | undefined>;
    /**
     * Refresh cache information. see Cache Attributes for more details.
     */
    public readonly cacheAttributes!: pulumi.Output<outputs.storagegateway.FileSystemAssociationCacheAttributes | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the gateway.
     */
    public readonly gatewayArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon FSx file system to associate with the FSx File Gateway.
     */
    public readonly locationArn!: pulumi.Output<string>;
    /**
     * The password of the user credential.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The user name of the user credential that has permission to access the root share of the Amazon FSx file system. The user account must belong to the Amazon FSx delegated admin user group.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a FileSystemAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileSystemAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileSystemAssociationArgs | FileSystemAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileSystemAssociationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["auditDestinationArn"] = state ? state.auditDestinationArn : undefined;
            resourceInputs["cacheAttributes"] = state ? state.cacheAttributes : undefined;
            resourceInputs["gatewayArn"] = state ? state.gatewayArn : undefined;
            resourceInputs["locationArn"] = state ? state.locationArn : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as FileSystemAssociationArgs | undefined;
            if ((!args || args.gatewayArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayArn'");
            }
            if ((!args || args.locationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationArn'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["auditDestinationArn"] = args ? args.auditDestinationArn : undefined;
            resourceInputs["cacheAttributes"] = args ? args.cacheAttributes : undefined;
            resourceInputs["gatewayArn"] = args ? args.gatewayArn : undefined;
            resourceInputs["locationArn"] = args ? args.locationArn : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileSystemAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileSystemAssociation resources.
 */
export interface FileSystemAssociationState {
    /**
     * Amazon Resource Name (ARN) of the newly created file system association.
     */
    arn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the storage used for the audit logs.
     */
    auditDestinationArn?: pulumi.Input<string>;
    /**
     * Refresh cache information. see Cache Attributes for more details.
     */
    cacheAttributes?: pulumi.Input<inputs.storagegateway.FileSystemAssociationCacheAttributes>;
    /**
     * The Amazon Resource Name (ARN) of the gateway.
     */
    gatewayArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon FSx file system to associate with the FSx File Gateway.
     */
    locationArn?: pulumi.Input<string>;
    /**
     * The password of the user credential.
     */
    password?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user name of the user credential that has permission to access the root share of the Amazon FSx file system. The user account must belong to the Amazon FSx delegated admin user group.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileSystemAssociation resource.
 */
export interface FileSystemAssociationArgs {
    /**
     * The Amazon Resource Name (ARN) of the storage used for the audit logs.
     */
    auditDestinationArn?: pulumi.Input<string>;
    /**
     * Refresh cache information. see Cache Attributes for more details.
     */
    cacheAttributes?: pulumi.Input<inputs.storagegateway.FileSystemAssociationCacheAttributes>;
    /**
     * The Amazon Resource Name (ARN) of the gateway.
     */
    gatewayArn: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon FSx file system to associate with the FSx File Gateway.
     */
    locationArn: pulumi.Input<string>;
    /**
     * The password of the user credential.
     */
    password: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user name of the user credential that has permission to access the root share of the Amazon FSx file system. The user account must belong to the Amazon FSx delegated admin user group.
     */
    username: pulumi.Input<string>;
}
