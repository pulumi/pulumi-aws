// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class UploadBuffer extends pulumi.CustomResource {
    /**
     * Get an existing UploadBuffer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UploadBufferState, opts?: pulumi.CustomResourceOptions): UploadBuffer {
        return new UploadBuffer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:storagegateway/uploadBuffer:UploadBuffer';

    /**
     * Returns true if the given object is an instance of UploadBuffer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UploadBuffer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UploadBuffer.__pulumiType;
    }

    public readonly diskId!: pulumi.Output<string>;
    public readonly diskPath!: pulumi.Output<string>;
    public readonly gatewayArn!: pulumi.Output<string>;

    /**
     * Create a UploadBuffer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UploadBufferArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UploadBufferArgs | UploadBufferState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UploadBufferState | undefined;
            resourceInputs["diskId"] = state ? state.diskId : undefined;
            resourceInputs["diskPath"] = state ? state.diskPath : undefined;
            resourceInputs["gatewayArn"] = state ? state.gatewayArn : undefined;
        } else {
            const args = argsOrState as UploadBufferArgs | undefined;
            if ((!args || args.gatewayArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayArn'");
            }
            resourceInputs["diskId"] = args ? args.diskId : undefined;
            resourceInputs["diskPath"] = args ? args.diskPath : undefined;
            resourceInputs["gatewayArn"] = args ? args.gatewayArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UploadBuffer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UploadBuffer resources.
 */
export interface UploadBufferState {
    diskId?: pulumi.Input<string>;
    diskPath?: pulumi.Input<string>;
    gatewayArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UploadBuffer resource.
 */
export interface UploadBufferArgs {
    diskId?: pulumi.Input<string>;
    diskPath?: pulumi.Input<string>;
    gatewayArn: pulumi.Input<string>;
}
