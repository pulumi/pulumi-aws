// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an Amazon Inspector Delegated Admin Account.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = new aws.inspector2.DelegatedAdminAccount("example", {accountId: current.then(current => current.accountId)});
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_inspector2_delegated_admin_account.example
 *
 *  id = "012345678901" } Using `pulumi import`, import Inspector Delegated Admin Account using the `account_id`. For exampleconsole % pulumi import aws_inspector2_delegated_admin_account.example 012345678901
 */
export class DelegatedAdminAccount extends pulumi.CustomResource {
    /**
     * Get an existing DelegatedAdminAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DelegatedAdminAccountState, opts?: pulumi.CustomResourceOptions): DelegatedAdminAccount {
        return new DelegatedAdminAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount';

    /**
     * Returns true if the given object is an instance of DelegatedAdminAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DelegatedAdminAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DelegatedAdminAccount.__pulumiType;
    }

    /**
     * Account to enable as delegated admin account.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Status of this delegated admin account.
     */
    public /*out*/ readonly relationshipStatus!: pulumi.Output<string>;

    /**
     * Create a DelegatedAdminAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DelegatedAdminAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DelegatedAdminAccountArgs | DelegatedAdminAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DelegatedAdminAccountState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["relationshipStatus"] = state ? state.relationshipStatus : undefined;
        } else {
            const args = argsOrState as DelegatedAdminAccountArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["relationshipStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DelegatedAdminAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DelegatedAdminAccount resources.
 */
export interface DelegatedAdminAccountState {
    /**
     * Account to enable as delegated admin account.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Status of this delegated admin account.
     */
    relationshipStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DelegatedAdminAccount resource.
 */
export interface DelegatedAdminAccountArgs {
    /**
     * Account to enable as delegated admin account.
     */
    accountId: pulumi.Input<string>;
}
