// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DelegatedAdminAccountArgs, DelegatedAdminAccountState } from "./delegatedAdminAccount";
export type DelegatedAdminAccount = import("./delegatedAdminAccount").DelegatedAdminAccount;
export const DelegatedAdminAccount: typeof import("./delegatedAdminAccount").DelegatedAdminAccount = null as any;
utilities.lazyLoad(exports, ["DelegatedAdminAccount"], () => require("./delegatedAdminAccount"));

export { EnablerArgs, EnablerState } from "./enabler";
export type Enabler = import("./enabler").Enabler;
export const Enabler: typeof import("./enabler").Enabler = null as any;
utilities.lazyLoad(exports, ["Enabler"], () => require("./enabler"));

export { FilterArgs, FilterState } from "./filter";
export type Filter = import("./filter").Filter;
export const Filter: typeof import("./filter").Filter = null as any;
utilities.lazyLoad(exports, ["Filter"], () => require("./filter"));

export { MemberAssociationArgs, MemberAssociationState } from "./memberAssociation";
export type MemberAssociation = import("./memberAssociation").MemberAssociation;
export const MemberAssociation: typeof import("./memberAssociation").MemberAssociation = null as any;
utilities.lazyLoad(exports, ["MemberAssociation"], () => require("./memberAssociation"));

export { OrganizationConfigurationArgs, OrganizationConfigurationState } from "./organizationConfiguration";
export type OrganizationConfiguration = import("./organizationConfiguration").OrganizationConfiguration;
export const OrganizationConfiguration: typeof import("./organizationConfiguration").OrganizationConfiguration = null as any;
utilities.lazyLoad(exports, ["OrganizationConfiguration"], () => require("./organizationConfiguration"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount":
                return new DelegatedAdminAccount(name, <any>undefined, { urn })
            case "aws:inspector2/enabler:Enabler":
                return new Enabler(name, <any>undefined, { urn })
            case "aws:inspector2/filter:Filter":
                return new Filter(name, <any>undefined, { urn })
            case "aws:inspector2/memberAssociation:MemberAssociation":
                return new MemberAssociation(name, <any>undefined, { urn })
            case "aws:inspector2/organizationConfiguration:OrganizationConfiguration":
                return new OrganizationConfiguration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "inspector2/delegatedAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "inspector2/enabler", _module)
pulumi.runtime.registerResourceModule("aws", "inspector2/filter", _module)
pulumi.runtime.registerResourceModule("aws", "inspector2/memberAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "inspector2/organizationConfiguration", _module)
