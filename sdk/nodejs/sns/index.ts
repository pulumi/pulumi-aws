// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DataProtectionPolicyArgs, DataProtectionPolicyState } from "./dataProtectionPolicy";
export type DataProtectionPolicy = import("./dataProtectionPolicy").DataProtectionPolicy;
export const DataProtectionPolicy: typeof import("./dataProtectionPolicy").DataProtectionPolicy = null as any;
utilities.lazyLoad(exports, ["DataProtectionPolicy"], () => require("./dataProtectionPolicy"));

export { GetTopicArgs, GetTopicResult, GetTopicOutputArgs } from "./getTopic";
export const getTopic: typeof import("./getTopic").getTopic = null as any;
export const getTopicOutput: typeof import("./getTopic").getTopicOutput = null as any;
utilities.lazyLoad(exports, ["getTopic","getTopicOutput"], () => require("./getTopic"));

export { PlatformApplicationArgs, PlatformApplicationState } from "./platformApplication";
export type PlatformApplication = import("./platformApplication").PlatformApplication;
export const PlatformApplication: typeof import("./platformApplication").PlatformApplication = null as any;
utilities.lazyLoad(exports, ["PlatformApplication"], () => require("./platformApplication"));

export { SmsPreferencesArgs, SmsPreferencesState } from "./smsPreferences";
export type SmsPreferences = import("./smsPreferences").SmsPreferences;
export const SmsPreferences: typeof import("./smsPreferences").SmsPreferences = null as any;
utilities.lazyLoad(exports, ["SmsPreferences"], () => require("./smsPreferences"));

export * from "./snsMixins";
export { TopicArgs, TopicState } from "./topic";
export type Topic = import("./topic").Topic;
export const Topic: typeof import("./topic").Topic = null as any;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));

export { TopicPolicyArgs, TopicPolicyState } from "./topicPolicy";
export type TopicPolicy = import("./topicPolicy").TopicPolicy;
export const TopicPolicy: typeof import("./topicPolicy").TopicPolicy = null as any;
utilities.lazyLoad(exports, ["TopicPolicy"], () => require("./topicPolicy"));

export { TopicSubscriptionArgs, TopicSubscriptionState } from "./topicSubscription";
export type TopicSubscription = import("./topicSubscription").TopicSubscription;
export const TopicSubscription: typeof import("./topicSubscription").TopicSubscription = null as any;
utilities.lazyLoad(exports, ["TopicSubscription"], () => require("./topicSubscription"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:sns/dataProtectionPolicy:DataProtectionPolicy":
                return new DataProtectionPolicy(name, <any>undefined, { urn })
            case "aws:sns/platformApplication:PlatformApplication":
                return new PlatformApplication(name, <any>undefined, { urn })
            case "aws:sns/smsPreferences:SmsPreferences":
                return new SmsPreferences(name, <any>undefined, { urn })
            case "aws:sns/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            case "aws:sns/topicPolicy:TopicPolicy":
                return new TopicPolicy(name, <any>undefined, { urn })
            case "aws:sns/topicSubscription:TopicSubscription":
                return new TopicSubscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "sns/dataProtectionPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "sns/platformApplication", _module)
pulumi.runtime.registerResourceModule("aws", "sns/smsPreferences", _module)
pulumi.runtime.registerResourceModule("aws", "sns/topic", _module)
pulumi.runtime.registerResourceModule("aws", "sns/topicPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "sns/topicSubscription", _module)
