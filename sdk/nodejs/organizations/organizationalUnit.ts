// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a resource to create an organizational unit.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.organizations.OrganizationalUnit("example", {parentId: aws_organizations_organization.example.roots[0].id});
 * ```
 */
export class OrganizationalUnit extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationalUnit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationalUnitState, opts?: pulumi.CustomResourceOptions): OrganizationalUnit {
        return new OrganizationalUnit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:organizations/organizationalUnit:OrganizationalUnit';

    /**
     * Returns true if the given object is an instance of OrganizationalUnit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationalUnit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationalUnit.__pulumiType;
    }

    /**
     * List of child accounts for this Organizational Unit. Does not return account information for child Organizational Units. All elements have these attributes:
     */
    public /*out*/ readonly accounts!: pulumi.Output<outputs.organizations.OrganizationalUnitAccount[]>;
    /**
     * ARN of the organizational unit
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name for the organizational unit
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the parent organizational unit, which may be the root
     */
    public readonly parentId!: pulumi.Output<string>;

    /**
     * Create a OrganizationalUnit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationalUnitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationalUnitArgs | OrganizationalUnitState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as OrganizationalUnitState | undefined;
            inputs["accounts"] = state ? state.accounts : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parentId"] = state ? state.parentId : undefined;
        } else {
            const args = argsOrState as OrganizationalUnitArgs | undefined;
            if (!args || args.parentId === undefined) {
                throw new Error("Missing required property 'parentId'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["parentId"] = args ? args.parentId : undefined;
            inputs["accounts"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(OrganizationalUnit.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationalUnit resources.
 */
export interface OrganizationalUnitState {
    /**
     * List of child accounts for this Organizational Unit. Does not return account information for child Organizational Units. All elements have these attributes:
     */
    readonly accounts?: pulumi.Input<pulumi.Input<inputs.organizations.OrganizationalUnitAccount>[]>;
    /**
     * ARN of the organizational unit
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The name for the organizational unit
     */
    readonly name?: pulumi.Input<string>;
    /**
     * ID of the parent organizational unit, which may be the root
     */
    readonly parentId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrganizationalUnit resource.
 */
export interface OrganizationalUnitArgs {
    /**
     * The name for the organizational unit
     */
    readonly name?: pulumi.Input<string>;
    /**
     * ID of the parent organizational unit, which may be the root
     */
    readonly parentId: pulumi.Input<string>;
}
