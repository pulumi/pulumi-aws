// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";
import * as enums from "./enums";

export interface ListenerDefaultAction {
    /**
     * Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. Detailed below.
     */
    authenticateCognito?: outputs.ListenerDefaultActionAuthenticateCognito;
    /**
     * Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. Detailed below.
     */
    authenticateOidc?: outputs.ListenerDefaultActionAuthenticateOidc;
    /**
     * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
     */
    fixedResponse?: outputs.ListenerDefaultActionFixedResponse;
    /**
     * Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`. Detailed below.
     */
    forward?: outputs.ListenerDefaultActionForward;
    /**
     * Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`.
     */
    order: number;
    /**
     * Configuration block for creating a redirect action. Required if `type` is `redirect`. Detailed below.
     */
    redirect?: outputs.ListenerDefaultActionRedirect;
    /**
     * ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
     */
    targetGroupArn?: string;
    /**
     * Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
     *
     * The following arguments are optional:
     */
    type: string;
}
export interface ListenerDefaultActionAuthenticateCognito {
    /**
     * Query parameters to include in the redirect request to the authorization endpoint. Max: 10. Detailed below.
     */
    authenticationRequestExtraParams?: {[key: string]: string};
    /**
     * Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
     */
    onUnauthenticatedRequest: string;
    /**
     * Set of user claims to be requested from the IdP.
     */
    scope: string;
    /**
     * Name of the cookie used to maintain session information.
     */
    sessionCookieName: string;
    /**
     * Maximum duration of the authentication session, in seconds.
     */
    sessionTimeout: number;
    /**
     * ARN of the Cognito user pool.
     */
    userPoolArn: string;
    /**
     * ID of the Cognito user pool client.
     */
    userPoolClientId: string;
    /**
     * Domain prefix or fully-qualified domain name of the Cognito user pool.
     *
     * The following arguments are optional:
     */
    userPoolDomain: string;
}
export interface ListenerDefaultActionAuthenticateOidc {
    /**
     * Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
     */
    authenticationRequestExtraParams?: {[key: string]: string};
    /**
     * Authorization endpoint of the IdP.
     */
    authorizationEndpoint: string;
    /**
     * OAuth 2.0 client identifier.
     */
    clientId: string;
    /**
     * OAuth 2.0 client secret.
     */
    clientSecret: string;
    /**
     * OIDC issuer identifier of the IdP.
     */
    issuer: string;
    /**
     * Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
     */
    onUnauthenticatedRequest: string;
    /**
     * Set of user claims to be requested from the IdP.
     */
    scope: string;
    /**
     * Name of the cookie used to maintain session information.
     */
    sessionCookieName: string;
    /**
     * Maximum duration of the authentication session, in seconds.
     */
    sessionTimeout: number;
    /**
     * Token endpoint of the IdP.
     */
    tokenEndpoint: string;
    /**
     * User info endpoint of the IdP.
     *
     * The following arguments are optional:
     */
    userInfoEndpoint: string;
}
export interface ListenerDefaultActionFixedResponse {
    /**
     * Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
     *
     * The following arguments are optional:
     */
    contentType: string;
    /**
     * Message body.
     */
    messageBody?: string;
    /**
     * HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
     */
    statusCode: string;
}
export interface ListenerDefaultActionForward {
    /**
     * Configuration block for target group stickiness for the rule. Detailed below.
     */
    stickiness?: outputs.ListenerDefaultActionForwardStickiness;
    /**
     * Set of 1-5 target group blocks. Detailed below.
     *
     * The following arguments are optional:
     */
    targetGroups: outputs.ListenerDefaultActionForwardTargetGroup[];
}
export interface ListenerDefaultActionForwardStickiness {
    /**
     * Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
     *
     * The following arguments are optional:
     */
    duration: number;
    /**
     * Whether target group stickiness is enabled. Default is `false`.
     */
    enabled?: boolean;
}
export interface ListenerDefaultActionForwardTargetGroup {
    /**
     * ARN of the target group.
     *
     * The following arguments are optional:
     */
    arn: string;
    /**
     * Weight. The range is 0 to 999.
     */
    weight?: number;
}
export interface ListenerDefaultActionRedirect {
    /**
     * Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
     */
    host?: string;
    /**
     * Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
     */
    path?: string;
    /**
     * Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
     */
    port?: string;
    /**
     * Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
     */
    protocol?: string;
    /**
     * Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
     */
    query?: string;
    /**
     * HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
     *
     * The following arguments are optional:
     */
    statusCode: string;
}
export interface ListenerMutualAuthentication {
    /**
     * Whether client certificate expiry is ignored. Default is `false`.
     */
    ignoreClientCertificateExpiry?: boolean;
    /**
     * Valid values are `off`, `verify` and `passthrough`.
     */
    mode: string;
    /**
     * ARN of the elbv2 Trust Store.
     */
    trustStoreArn?: string;
}
export interface ListenerRuleAction {
    /**
     * Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
     */
    authenticateCognito?: outputs.ListenerRuleActionAuthenticateCognito;
    /**
     * Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
     */
    authenticateOidc?: outputs.ListenerRuleActionAuthenticateOidc;
    /**
     * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
     */
    fixedResponse?: outputs.ListenerRuleActionFixedResponse;
    /**
     * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
     */
    forward?: outputs.ListenerRuleActionForward;
    order: number;
    /**
     * Information for creating a redirect action. Required if `type` is `redirect`.
     */
    redirect?: outputs.ListenerRuleActionRedirect;
    /**
     * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
     */
    targetGroupArn?: string;
    /**
     * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
     */
    type: string;
}
export interface ListenerRuleActionAuthenticateCognito {
    /**
     * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
     */
    authenticationRequestExtraParams?: {[key: string]: string};
    /**
     * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
     */
    onUnauthenticatedRequest: string;
    /**
     * The set of user claims to be requested from the IdP.
     */
    scope?: string;
    /**
     * The name of the cookie used to maintain session information.
     */
    sessionCookieName?: string;
    /**
     * The maximum duration of the authentication session, in seconds.
     */
    sessionTimeout?: number;
    /**
     * The ARN of the Cognito user pool.
     */
    userPoolArn: string;
    /**
     * The ID of the Cognito user pool client.
     */
    userPoolClientId: string;
    /**
     * The domain prefix or fully-qualified domain name of the Cognito user pool.
     */
    userPoolDomain: string;
}
export interface ListenerRuleActionAuthenticateOidc {
    /**
     * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
     */
    authenticationRequestExtraParams?: {[key: string]: string};
    /**
     * The authorization endpoint of the IdP.
     */
    authorizationEndpoint: string;
    /**
     * The OAuth 2.0 client identifier.
     */
    clientId: string;
    /**
     * The OAuth 2.0 client secret.
     */
    clientSecret: string;
    /**
     * The OIDC issuer identifier of the IdP.
     */
    issuer: string;
    /**
     * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
     */
    onUnauthenticatedRequest: string;
    /**
     * The set of user claims to be requested from the IdP.
     */
    scope?: string;
    /**
     * The name of the cookie used to maintain session information.
     */
    sessionCookieName?: string;
    /**
     * The maximum duration of the authentication session, in seconds.
     */
    sessionTimeout?: number;
    /**
     * The token endpoint of the IdP.
     */
    tokenEndpoint: string;
    /**
     * The user info endpoint of the IdP.
     */
    userInfoEndpoint: string;
}
export interface ListenerRuleActionFixedResponse {
    /**
     * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
     */
    contentType: string;
    /**
     * The message body.
     */
    messageBody?: string;
    /**
     * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
     */
    statusCode: string;
}
export interface ListenerRuleActionForward {
    /**
     * The target group stickiness for the rule.
     */
    stickiness?: outputs.ListenerRuleActionForwardStickiness;
    /**
     * One or more target groups block.
     */
    targetGroups: outputs.ListenerRuleActionForwardTargetGroup[];
}
export interface ListenerRuleActionForwardStickiness {
    /**
     * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
     */
    duration: number;
    /**
     * Indicates whether target group stickiness is enabled.
     */
    enabled?: boolean;
}
export interface ListenerRuleActionForwardTargetGroup {
    /**
     * The Amazon Resource Name (ARN) of the target group.
     */
    arn: string;
    /**
     * The weight. The range is 0 to 999.
     */
    weight?: number;
}
export interface ListenerRuleActionRedirect {
    /**
     * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
     */
    host?: string;
    /**
     * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
     */
    path?: string;
    /**
     * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
     */
    port?: string;
    /**
     * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
     */
    protocol?: string;
    /**
     * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
     */
    query?: string;
    /**
     * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
     */
    statusCode: string;
}
export interface ListenerRuleCondition {
    /**
     * Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
     */
    hostHeader?: outputs.ListenerRuleConditionHostHeader;
    /**
     * HTTP headers to match. HTTP Header block fields documented below.
     */
    httpHeader?: outputs.ListenerRuleConditionHttpHeader;
    /**
     * Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
     */
    httpRequestMethod?: outputs.ListenerRuleConditionHttpRequestMethod;
    /**
     * Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `queryString` condition.
     */
    pathPattern?: outputs.ListenerRuleConditionPathPattern;
    /**
     * Query strings to match. Query String block fields documented below.
     */
    queryStrings?: outputs.ListenerRuleConditionQueryString[];
    /**
     * Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `httpHeader` condition instead.
     *
     * > **NOTE::** Exactly one of `hostHeader`, `httpHeader`, `httpRequestMethod`, `pathPattern`, `queryString` or `sourceIp` must be set per condition.
     */
    sourceIp?: outputs.ListenerRuleConditionSourceIp;
}
export interface ListenerRuleConditionHostHeader {
    values: string[];
}
export interface ListenerRuleConditionHttpHeader {
    /**
     * Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
     */
    httpHeaderName: string;
    /**
     * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
     */
    values: string[];
}
export interface ListenerRuleConditionHttpRequestMethod {
    values: string[];
}
export interface ListenerRuleConditionPathPattern {
    values: string[];
}
export interface ListenerRuleConditionQueryString {
    /**
     * Query string key pattern to match.
     */
    key?: string;
    /**
     * Query string value pattern to match.
     */
    value: string;
}
export interface ListenerRuleConditionSourceIp {
    values: string[];
}
export interface LoadBalancerAccessLogs {
    /**
     * S3 bucket name to store the logs in.
     */
    bucket: string;
    /**
     * Boolean to enable / disable `accessLogs`. Defaults to `false`, even when `bucket` is specified.
     */
    enabled?: boolean;
    /**
     * S3 bucket prefix. Logs are stored in the root if not configured.
     */
    prefix?: string;
}
export interface LoadBalancerConnectionLogs {
    /**
     * S3 bucket name to store the logs in.
     */
    bucket: string;
    /**
     * Boolean to enable / disable `connectionLogs`. Defaults to `false`, even when `bucket` is specified.
     */
    enabled?: boolean;
    /**
     * S3 bucket prefix. Logs are stored in the root if not configured.
     */
    prefix?: string;
}
export interface LoadBalancerSubnetMapping {
    /**
     * Allocation ID of the Elastic IP address for an internet-facing load balancer.
     */
    allocationId?: string;
    /**
     * IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
     */
    ipv6Address?: string;
    outpostId: string;
    /**
     * Private IPv4 address for an internal load balancer.
     */
    privateIpv4Address?: string;
    /**
     * ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
     */
    subnetId: string;
}
export interface TargetGroupHealthCheck {
    /**
     * Whether health checks are enabled. Defaults to `true`.
     */
    enabled?: boolean;
    /**
     * Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
     */
    healthyThreshold?: number;
    /**
     * Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
     */
    interval?: number;
    /**
     * The HTTP or gRPC codes to use when checking for a successful response from a target.
     * The `health_check.protocol` must be one of `HTTP` or `HTTPS` or the `targetType` must be `lambda`.
     * Values can be comma-separated individual values (e.g., "200,202") or a range of values (e.g., "200-299").
     * * For gRPC-based target groups (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocolVersion` is `GRPC`), values can be between `0` and `99`. The default is `12`.
     * * When used with an Application Load Balancer (i.e., the `protocol` is one of `HTTP` or `HTTPS` and the `protocolVersion` is not `GRPC`), values can be between `200` and `499`. The default is `200`.
     * * When used with a Network Load Balancer (i.e., the `protocol` is one of `TCP`, `TCP_UDP`, `UDP`, or `TLS`), values can be between `200` and `599`. The default is `200-399`.
     * * When the `targetType` is `lambda`, values can be between `200` and `499`. The default is `200`.
     */
    matcher: string;
    /**
     * Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
     * * For HTTP and HTTPS health checks, the default is `/`.
     * * For gRPC health checks, the default is `/Amazon Web Services.ALB/healthcheck`.
     */
    path: string;
    /**
     * The port the load balancer uses when performing health checks on targets.
     * Valid values are either `traffic-port`, to use the same port as the target group, or a valid port number between `1` and `65536`.
     * Default is `traffic-port`.
     */
    port?: string;
    /**
     * Protocol the load balancer uses when performing health checks on targets.
     * Must be one of `TCP`, `HTTP`, or `HTTPS`.
     * The `TCP` protocol is not supported for health checks if the protocol of the target group is `HTTP` or `HTTPS`.
     * Default is `HTTP`.
     * Cannot be specified when the `targetType` is `lambda`.
     */
    protocol?: string;
    /**
     * Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
     */
    timeout: number;
    /**
     * Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
     */
    unhealthyThreshold?: number;
}
export interface TargetGroupStickiness {
    /**
     * Only used when the type is `lbCookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
     */
    cookieDuration?: number;
    /**
     * Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `appCookie`.
     */
    cookieName?: string;
    /**
     * Boolean to enable / disable `stickiness`. Default is `true`.
     */
    enabled?: boolean;
    /**
     * The type of sticky sessions. The only current possible values are `lbCookie`, `appCookie` for ALBs, `sourceIp` for NLBs, and `sourceIpDestIp`, `sourceIpDestIpProto` for GWLBs.
     */
    type: string;
}
export interface TargetGroupTargetFailover {
    /**
     * Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `noRebalance`. Must match the attribute value set for `onUnhealthy`. Default: `noRebalance`.
     */
    onDeregistration: string;
    /**
     * Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `noRebalance`. Must match the attribute value set for `onDeregistration`. Default: `noRebalance`.
     */
    onUnhealthy: string;
}
export interface TargetGroupTargetHealthState {
    /**
     * Indicates whether the load balancer terminates connections to unhealthy targets. Possible values are `true` or `false`. Default: `true`.
     */
    enableUnhealthyConnectionTermination: boolean;
}
export interface GetListenerDefaultAction {
    authenticateCognitos: outputs.GetListenerDefaultActionAuthenticateCognito[];
    authenticateOidcs: outputs.GetListenerDefaultActionAuthenticateOidc[];
    fixedResponses: outputs.GetListenerDefaultActionFixedResponse[];
    forwards: outputs.GetListenerDefaultActionForward[];
    order: number;
    redirects: outputs.GetListenerDefaultActionRedirect[];
    targetGroupArn: string;
    type: string;
}
export interface GetListenerDefaultActionAuthenticateCognito {
    authenticationRequestExtraParams: {[key: string]: string};
    onUnauthenticatedRequest: string;
    scope: string;
    sessionCookieName: string;
    sessionTimeout: number;
    userPoolArn: string;
    userPoolClientId: string;
    userPoolDomain: string;
}
export interface GetListenerDefaultActionAuthenticateOidc {
    authenticationRequestExtraParams: {[key: string]: string};
    authorizationEndpoint: string;
    clientId: string;
    clientSecret: string;
    issuer: string;
    onUnauthenticatedRequest: string;
    scope: string;
    sessionCookieName: string;
    sessionTimeout: number;
    tokenEndpoint: string;
    userInfoEndpoint: string;
}
export interface GetListenerDefaultActionFixedResponse {
    contentType: string;
    messageBody: string;
    statusCode: string;
}
export interface GetListenerDefaultActionForward {
    stickinesses: outputs.GetListenerDefaultActionForwardStickiness[];
    targetGroups: outputs.GetListenerDefaultActionForwardTargetGroup[];
}
export interface GetListenerDefaultActionForwardStickiness {
    duration: number;
    enabled: boolean;
}
export interface GetListenerDefaultActionForwardTargetGroup {
    /**
     * ARN of the listener. Required if `loadBalancerArn` and `port` is not set.
     */
    arn: string;
    weight: number;
}
export interface GetListenerDefaultActionRedirect {
    host: string;
    path: string;
    /**
     * Port of the listener. Required if `arn` is not set.
     */
    port: string;
    protocol: string;
    query: string;
    statusCode: string;
}
export interface GetListenerMutualAuthentication {
    ignoreClientCertificateExpiry: boolean;
    mode: string;
    trustStoreArn: string;
}
export interface GetLoadBalancerAccessLogs {
    bucket: string;
    enabled: boolean;
    prefix: string;
}
export interface GetLoadBalancerConnectionLog {
    bucket: string;
    enabled: boolean;
    prefix: string;
}
export interface GetLoadBalancerSubnetMapping {
    allocationId: string;
    ipv6Address: string;
    outpostId: string;
    privateIpv4Address: string;
    subnetId: string;
}
export interface GetTargetGroupHealthCheck {
    enabled: boolean;
    healthyThreshold: number;
    interval: number;
    matcher: string;
    path: string;
    port: string;
    protocol: string;
    timeout: number;
    unhealthyThreshold: number;
}
export interface GetTargetGroupStickiness {
    cookieDuration: number;
    cookieName: string;
    enabled: boolean;
    type: string;
}
