// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";
import * as enums from "./enums";

export interface RoleInlinePolicy {
    /**
     * Name of the role policy.
     */
    name: string;
    /**
     * Policy document as a JSON formatted string.
     */
    policy?: string;
}
export interface GetAccessKeysAccessKey {
    /**
     * Access key ID.
     */
    accessKeyId: string;
    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the access key was created.
     */
    createDate: string;
    /**
     * Access key status. Possible values are `Active` and `Inactive`.
     */
    status: string;
}
export interface GetGroupUser {
    /**
     * User ARN.
     */
    arn: string;
    /**
     * Path to the IAM user.
     */
    path: string;
    /**
     * Stable and unique string identifying the IAM user.
     */
    userId: string;
    /**
     * Name of the IAM user.
     */
    userName: string;
}
export interface GetPrincipalPolicySimulationResult {
    /**
     * The name of the single IAM action used for this particular request.
     */
    actionName: string;
    /**
     * `true` if `decision` is "allowed", and `false` otherwise.
     */
    allowed: boolean;
    /**
     * The raw decision determined from all of the policies in scope; either "allowed", "explicitDeny", or "implicitDeny".
     */
    decision: string;
    /**
     * A map of arbitrary metadata entries returned by the policy simulator for this request.
     */
    decisionDetails: {[key: string]: string};
    /**
     * A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `sourcePolicyId` and `sourcePolicyType` to identify one of the policies.
     */
    matchedStatements: outputs.GetPrincipalPolicySimulationResultMatchedStatement[];
    /**
     * A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
     */
    missingContextKeys: string[];
    /**
     * ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
     */
    resourceArn: string;
}
export interface GetPrincipalPolicySimulationResultMatchedStatement {
    /**
     * Identifier of one of the policies used as input to the simulation.
     */
    sourcePolicyId: string;
    /**
     * The type of the policy identified in source_policy_id.
     */
    sourcePolicyType: string;
}
export interface GetRoleRoleLastUsed {
    /**
     * The date and time, in RFC 3339 format, that the role was last used.
     */
    lastUsedDate: string;
    /**
     * The name of the AWS Region in which the role was last used.
     */
    region: string;
}
