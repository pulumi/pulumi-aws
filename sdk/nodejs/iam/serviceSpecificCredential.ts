// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ServiceSpecificCredential extends pulumi.CustomResource {
    /**
     * Get an existing ServiceSpecificCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceSpecificCredentialState, opts?: pulumi.CustomResourceOptions): ServiceSpecificCredential {
        return new ServiceSpecificCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iam/serviceSpecificCredential:ServiceSpecificCredential';

    /**
     * Returns true if the given object is an instance of ServiceSpecificCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceSpecificCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceSpecificCredential.__pulumiType;
    }

    public readonly serviceName!: pulumi.Output<string>;
    public /*out*/ readonly servicePassword!: pulumi.Output<string>;
    public /*out*/ readonly serviceSpecificCredentialId!: pulumi.Output<string>;
    public /*out*/ readonly serviceUserName!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a ServiceSpecificCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceSpecificCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceSpecificCredentialArgs | ServiceSpecificCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceSpecificCredentialState | undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["servicePassword"] = state ? state.servicePassword : undefined;
            resourceInputs["serviceSpecificCredentialId"] = state ? state.serviceSpecificCredentialId : undefined;
            resourceInputs["serviceUserName"] = state ? state.serviceUserName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as ServiceSpecificCredentialArgs | undefined;
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["servicePassword"] = undefined /*out*/;
            resourceInputs["serviceSpecificCredentialId"] = undefined /*out*/;
            resourceInputs["serviceUserName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["servicePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceSpecificCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceSpecificCredential resources.
 */
export interface ServiceSpecificCredentialState {
    serviceName?: pulumi.Input<string>;
    servicePassword?: pulumi.Input<string>;
    serviceSpecificCredentialId?: pulumi.Input<string>;
    serviceUserName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceSpecificCredential resource.
 */
export interface ServiceSpecificCredentialArgs {
    serviceName: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    userName: pulumi.Input<string>;
}
