// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an IAM Service Specific Credential.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.iam.User("example", {name: "example"});
 * const exampleServiceSpecificCredential = new aws.iam.ServiceSpecificCredential("example", {
 *     serviceName: "codecommit.amazonaws.com",
 *     userName: example.name,
 * });
 * ```
 *
 * ### Bedrock API Key with Expiration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.iam.User("example", {name: "example"});
 * const bedrock = new aws.iam.ServiceSpecificCredential("bedrock", {
 *     serviceName: "bedrock.amazonaws.com",
 *     userName: example.name,
 *     credentialAgeDays: 30,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import IAM Service Specific Credentials using the `service_name:user_name:service_specific_credential_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:iam/serviceSpecificCredential:ServiceSpecificCredential default `codecommit.amazonaws.com:example:some-id`
 * ```
 */
export class ServiceSpecificCredential extends pulumi.CustomResource {
    /**
     * Get an existing ServiceSpecificCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceSpecificCredentialState, opts?: pulumi.CustomResourceOptions): ServiceSpecificCredential {
        return new ServiceSpecificCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iam/serviceSpecificCredential:ServiceSpecificCredential';

    /**
     * Returns true if the given object is an instance of ServiceSpecificCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceSpecificCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceSpecificCredential.__pulumiType;
    }

    /**
     * The date and time, in RFC3339 format, when the service-specific credential was created.
     */
    declare public /*out*/ readonly createDate: pulumi.Output<string>;
    /**
     * The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
     */
    declare public readonly credentialAgeDays: pulumi.Output<number | undefined>;
    /**
     * The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
     */
    declare public /*out*/ readonly expirationDate: pulumi.Output<string>;
    /**
     * For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
     */
    declare public /*out*/ readonly serviceCredentialAlias: pulumi.Output<string>;
    /**
     * For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
     */
    declare public /*out*/ readonly serviceCredentialSecret: pulumi.Output<string>;
    /**
     * The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
     */
    declare public readonly serviceName: pulumi.Output<string>;
    /**
     * The generated password for the service-specific credential. This value is only available when the credential is created.
     */
    declare public /*out*/ readonly servicePassword: pulumi.Output<string>;
    /**
     * The unique identifier for the service-specific credential.
     */
    declare public /*out*/ readonly serviceSpecificCredentialId: pulumi.Output<string>;
    /**
     * The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
     */
    declare public /*out*/ readonly serviceUserName: pulumi.Output<string>;
    /**
     * The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
     */
    declare public readonly status: pulumi.Output<string | undefined>;
    /**
     * The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     */
    declare public readonly userName: pulumi.Output<string>;

    /**
     * Create a ServiceSpecificCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceSpecificCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceSpecificCredentialArgs | ServiceSpecificCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceSpecificCredentialState | undefined;
            resourceInputs["createDate"] = state?.createDate;
            resourceInputs["credentialAgeDays"] = state?.credentialAgeDays;
            resourceInputs["expirationDate"] = state?.expirationDate;
            resourceInputs["serviceCredentialAlias"] = state?.serviceCredentialAlias;
            resourceInputs["serviceCredentialSecret"] = state?.serviceCredentialSecret;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["servicePassword"] = state?.servicePassword;
            resourceInputs["serviceSpecificCredentialId"] = state?.serviceSpecificCredentialId;
            resourceInputs["serviceUserName"] = state?.serviceUserName;
            resourceInputs["status"] = state?.status;
            resourceInputs["userName"] = state?.userName;
        } else {
            const args = argsOrState as ServiceSpecificCredentialArgs | undefined;
            if (args?.serviceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (args?.userName === undefined && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["credentialAgeDays"] = args?.credentialAgeDays;
            resourceInputs["serviceName"] = args?.serviceName;
            resourceInputs["status"] = args?.status;
            resourceInputs["userName"] = args?.userName;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["serviceCredentialAlias"] = undefined /*out*/;
            resourceInputs["serviceCredentialSecret"] = undefined /*out*/;
            resourceInputs["servicePassword"] = undefined /*out*/;
            resourceInputs["serviceSpecificCredentialId"] = undefined /*out*/;
            resourceInputs["serviceUserName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["serviceCredentialSecret", "servicePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceSpecificCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceSpecificCredential resources.
 */
export interface ServiceSpecificCredentialState {
    /**
     * The date and time, in RFC3339 format, when the service-specific credential was created.
     */
    createDate?: pulumi.Input<string>;
    /**
     * The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
     */
    credentialAgeDays?: pulumi.Input<number>;
    /**
     * The date and time, in RFC3339 format, when the service specific credential expires. This field is only present for Bedrock API keys that were created with an expiration period.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * For Bedrock API keys, this is the public portion of the credential that includes the IAM user name and a suffix containing version and creation information.
     */
    serviceCredentialAlias?: pulumi.Input<string>;
    /**
     * For Bedrock API keys, this is the secret portion of the credential that should be used to authenticate API calls. This value is only available when the credential is created.
     */
    serviceCredentialSecret?: pulumi.Input<string>;
    /**
     * The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The generated password for the service-specific credential. This value is only available when the credential is created.
     */
    servicePassword?: pulumi.Input<string>;
    /**
     * The unique identifier for the service-specific credential.
     */
    serviceSpecificCredentialId?: pulumi.Input<string>;
    /**
     * The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
     */
    serviceUserName?: pulumi.Input<string>;
    /**
     * The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceSpecificCredential resource.
 */
export interface ServiceSpecificCredentialArgs {
    /**
     * The number of days until the service specific credential expires. This field is only valid for Bedrock API keys and must be between 1 and 36600 (approximately 100 years). When not specified, the credential will not expire.
     */
    credentialAgeDays?: pulumi.Input<number>;
    /**
     * The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials. Supported services are `codecommit.amazonaws.com`, `bedrock.amazonaws.com`, and `cassandra.amazonaws.com`.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The status to be assigned to the service-specific credential. Valid values are `Active`, `Inactive`, and `Expired`. Default value is `Active`. Note that `Expired` is only used for read operations and cannot be set manually.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
     */
    userName: pulumi.Input<string>;
}
