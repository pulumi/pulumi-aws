// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import {PolicyDocument} from "./index";

export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iam/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly assumeRolePolicy!: pulumi.Output<string>;
    public /*out*/ readonly createDate!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly forceDetachPolicies!: pulumi.Output<boolean | undefined>;
    public readonly inlinePolicies!: pulumi.Output<outputs.iam.RoleInlinePolicy[]>;
    public readonly managedPolicyArns!: pulumi.Output<string[]>;
    public readonly maxSessionDuration!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string | undefined>;
    public readonly permissionsBoundary!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly uniqueId!: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["assumeRolePolicy"] = state ? state.assumeRolePolicy : undefined;
            resourceInputs["createDate"] = state ? state.createDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forceDetachPolicies"] = state ? state.forceDetachPolicies : undefined;
            resourceInputs["inlinePolicies"] = state ? state.inlinePolicies : undefined;
            resourceInputs["managedPolicyArns"] = state ? state.managedPolicyArns : undefined;
            resourceInputs["maxSessionDuration"] = state ? state.maxSessionDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["permissionsBoundary"] = state ? state.permissionsBoundary : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["uniqueId"] = state ? state.uniqueId : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if ((!args || args.assumeRolePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assumeRolePolicy'");
            }
            resourceInputs["assumeRolePolicy"] = args ? args.assumeRolePolicy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forceDetachPolicies"] = args ? args.forceDetachPolicies : undefined;
            resourceInputs["inlinePolicies"] = args ? args.inlinePolicies : undefined;
            resourceInputs["managedPolicyArns"] = args ? args.managedPolicyArns : undefined;
            resourceInputs["maxSessionDuration"] = args ? args.maxSessionDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["permissionsBoundary"] = args ? args.permissionsBoundary : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    arn?: pulumi.Input<string>;
    assumeRolePolicy?: pulumi.Input<string | PolicyDocument>;
    createDate?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    forceDetachPolicies?: pulumi.Input<boolean>;
    inlinePolicies?: pulumi.Input<pulumi.Input<inputs.iam.RoleInlinePolicy>[]>;
    managedPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    maxSessionDuration?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    permissionsBoundary?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uniqueId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    assumeRolePolicy: pulumi.Input<string | PolicyDocument>;
    description?: pulumi.Input<string>;
    forceDetachPolicies?: pulumi.Input<boolean>;
    inlinePolicies?: pulumi.Input<pulumi.Input<inputs.iam.RoleInlinePolicy>[]>;
    managedPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    maxSessionDuration?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    permissionsBoundary?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
