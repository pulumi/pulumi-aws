// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Generates an IAM policy document in JSON format for use with resources that expect policy documents such as `aws.iam.Policy`.
 *
 * Using this data source to generate policy documents is *optional*. It is also valid to use literal JSON strings in your configuration or to use the `file` interpolation function to read a raw JSON policy document from a file.
 *
 * ## Example Usage
 * ### Basic Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.iam.getPolicyDocument({
 *     statements: [
 *         {
 *             sid: "1",
 *             actions: [
 *                 "s3:ListAllMyBuckets",
 *                 "s3:GetBucketLocation",
 *             ],
 *             resources: ["arn:aws:s3:::*"],
 *         },
 *         {
 *             actions: ["s3:ListBucket"],
 *             resources: [`arn:aws:s3:::${s3BucketName}`],
 *             conditions: [{
 *                 test: "StringLike",
 *                 variable: "s3:prefix",
 *                 values: [
 *                     "",
 *                     "home/",
 *                     "home/&{aws:username}/",
 *                 ],
 *             }],
 *         },
 *         {
 *             actions: ["s3:*"],
 *             resources: [
 *                 `arn:aws:s3:::${s3BucketName}/home/&{aws:username}`,
 *                 `arn:aws:s3:::${s3BucketName}/home/&{aws:username}/*`,
 *             ],
 *         },
 *     ],
 * });
 * const examplePolicy = new aws.iam.Policy("example", {
 *     name: "example_policy",
 *     path: "/",
 *     policy: example.then(example => example.json),
 * });
 * ```
 * ### Example Assume-Role Policy with Multiple Principals
 *
 * You can specify multiple principal blocks with different types. You can also use this data source to generate an assume-role policy.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const eventStreamBucketRoleAssumeRolePolicy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [
 *             {
 *                 type: "Service",
 *                 identifiers: ["firehose.amazonaws.com"],
 *             },
 *             {
 *                 type: "AWS",
 *                 identifiers: [trustedRoleArn],
 *             },
 *             {
 *                 type: "Federated",
 *                 identifiers: [
 *                     `arn:aws:iam::${accountId}:saml-provider/${providerName}`,
 *                     "cognito-identity.amazonaws.com",
 *                 ],
 *             },
 *         ],
 *     }],
 * });
 * ```
 */
export function getPolicyDocument(args?: GetPolicyDocumentArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyDocumentResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:iam/getPolicyDocument:getPolicyDocument", {
        "overridePolicyDocuments": args.overridePolicyDocuments,
        "policyId": args.policyId,
        "sourcePolicyDocuments": args.sourcePolicyDocuments,
        "statements": args.statements,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getPolicyDocument.
 */
export interface GetPolicyDocumentArgs {
    /**
     * List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid` from earlier documents in the list. Statements with non-blank `sid`s will also override statements with the same `sid` from `sourcePolicyDocuments`.  Non-overriding statements will be added to the exported document.
     */
    overridePolicyDocuments?: string[];
    /**
     * ID for the policy document.
     */
    policyId?: string;
    /**
     * List of IAM policy documents that are merged together into the exported document. Statements defined in `sourcePolicyDocuments` must have unique `sid`s. Statements with the same `sid` from `overridePolicyDocuments` will override source statements.
     */
    sourcePolicyDocuments?: string[];
    /**
     * Configuration block for a policy statement. Detailed below.
     */
    statements?: inputs.iam.GetPolicyDocumentStatement[];
    /**
     * IAM policy document version. Valid values are `2008-10-17` and `2012-10-17`. Defaults to `2012-10-17`. For more information, see the [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html).
     */
    version?: string;
}

/**
 * A collection of values returned by getPolicyDocument.
 */
export interface GetPolicyDocumentResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Standard JSON policy document rendered based on the arguments above.
     */
    readonly json: string;
    readonly overridePolicyDocuments?: string[];
    readonly policyId?: string;
    readonly sourcePolicyDocuments?: string[];
    readonly statements?: outputs.iam.GetPolicyDocumentStatement[];
    readonly version?: string;
}
/**
 * Generates an IAM policy document in JSON format for use with resources that expect policy documents such as `aws.iam.Policy`.
 *
 * Using this data source to generate policy documents is *optional*. It is also valid to use literal JSON strings in your configuration or to use the `file` interpolation function to read a raw JSON policy document from a file.
 *
 * ## Example Usage
 * ### Basic Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.iam.getPolicyDocument({
 *     statements: [
 *         {
 *             sid: "1",
 *             actions: [
 *                 "s3:ListAllMyBuckets",
 *                 "s3:GetBucketLocation",
 *             ],
 *             resources: ["arn:aws:s3:::*"],
 *         },
 *         {
 *             actions: ["s3:ListBucket"],
 *             resources: [`arn:aws:s3:::${s3BucketName}`],
 *             conditions: [{
 *                 test: "StringLike",
 *                 variable: "s3:prefix",
 *                 values: [
 *                     "",
 *                     "home/",
 *                     "home/&{aws:username}/",
 *                 ],
 *             }],
 *         },
 *         {
 *             actions: ["s3:*"],
 *             resources: [
 *                 `arn:aws:s3:::${s3BucketName}/home/&{aws:username}`,
 *                 `arn:aws:s3:::${s3BucketName}/home/&{aws:username}/*`,
 *             ],
 *         },
 *     ],
 * });
 * const examplePolicy = new aws.iam.Policy("example", {
 *     name: "example_policy",
 *     path: "/",
 *     policy: example.then(example => example.json),
 * });
 * ```
 * ### Example Assume-Role Policy with Multiple Principals
 *
 * You can specify multiple principal blocks with different types. You can also use this data source to generate an assume-role policy.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const eventStreamBucketRoleAssumeRolePolicy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [
 *             {
 *                 type: "Service",
 *                 identifiers: ["firehose.amazonaws.com"],
 *             },
 *             {
 *                 type: "AWS",
 *                 identifiers: [trustedRoleArn],
 *             },
 *             {
 *                 type: "Federated",
 *                 identifiers: [
 *                     `arn:aws:iam::${accountId}:saml-provider/${providerName}`,
 *                     "cognito-identity.amazonaws.com",
 *                 ],
 *             },
 *         ],
 *     }],
 * });
 * ```
 */
export function getPolicyDocumentOutput(args?: GetPolicyDocumentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyDocumentResult> {
    return pulumi.output(args).apply((a: any) => getPolicyDocument(a, opts))
}

/**
 * A collection of arguments for invoking getPolicyDocument.
 */
export interface GetPolicyDocumentOutputArgs {
    /**
     * List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid` from earlier documents in the list. Statements with non-blank `sid`s will also override statements with the same `sid` from `sourcePolicyDocuments`.  Non-overriding statements will be added to the exported document.
     */
    overridePolicyDocuments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID for the policy document.
     */
    policyId?: pulumi.Input<string>;
    /**
     * List of IAM policy documents that are merged together into the exported document. Statements defined in `sourcePolicyDocuments` must have unique `sid`s. Statements with the same `sid` from `overridePolicyDocuments` will override source statements.
     */
    sourcePolicyDocuments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration block for a policy statement. Detailed below.
     */
    statements?: pulumi.Input<pulumi.Input<inputs.iam.GetPolicyDocumentStatementArgs>[]>;
    /**
     * IAM policy document version. Valid values are `2008-10-17` and `2012-10-17`. Defaults to `2012-10-17`. For more information, see the [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html).
     */
    version?: pulumi.Input<string>;
}
