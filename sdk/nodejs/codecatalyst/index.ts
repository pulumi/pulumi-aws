// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DevEnvironmentArgs, DevEnvironmentState } from "./devEnvironment";
export type DevEnvironment = import("./devEnvironment").DevEnvironment;
export const DevEnvironment: typeof import("./devEnvironment").DevEnvironment = null as any;
utilities.lazyLoad(exports, ["DevEnvironment"], () => require("./devEnvironment"));

export { GetDevEnvironmentArgs, GetDevEnvironmentResult, GetDevEnvironmentOutputArgs } from "./getDevEnvironment";
export const getDevEnvironment: typeof import("./getDevEnvironment").getDevEnvironment = null as any;
export const getDevEnvironmentOutput: typeof import("./getDevEnvironment").getDevEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getDevEnvironment","getDevEnvironmentOutput"], () => require("./getDevEnvironment"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { SourceRepositoryArgs, SourceRepositoryState } from "./sourceRepository";
export type SourceRepository = import("./sourceRepository").SourceRepository;
export const SourceRepository: typeof import("./sourceRepository").SourceRepository = null as any;
utilities.lazyLoad(exports, ["SourceRepository"], () => require("./sourceRepository"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:codecatalyst/devEnvironment:DevEnvironment":
                return new DevEnvironment(name, <any>undefined, { urn })
            case "aws:codecatalyst/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "aws:codecatalyst/sourceRepository:SourceRepository":
                return new SourceRepository(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "codecatalyst/devEnvironment", _module)
pulumi.runtime.registerResourceModule("aws", "codecatalyst/project", _module)
pulumi.runtime.registerResourceModule("aws", "codecatalyst/sourceRepository", _module)
