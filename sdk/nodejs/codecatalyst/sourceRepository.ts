// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS CodeCatalyst Source Repository.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.codecatalyst.SourceRepository("example", {
 *     projectName: "example-project",
 *     spaceName: "example-space",
 * });
 * ```
 *
 * ## Import
 *
 * In TODO v1.5.0 and later, use an `import` block to import CodeCatalyst Source Repository using the `example_id_arg`. For exampleterraform import {
 *
 *  to = aws_codecatalyst_source_repository.example
 *
 *  id = "source_repository-id-12345678" } Using `TODO import`, import CodeCatalyst Source Repository using the `example_id_arg`. For exampleconsole % TODO import aws_codecatalyst_source_repository.example source_repository-id-12345678
 */
export class SourceRepository extends pulumi.CustomResource {
    /**
     * Get an existing SourceRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceRepositoryState, opts?: pulumi.CustomResourceOptions): SourceRepository {
        return new SourceRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:codecatalyst/sourceRepository:SourceRepository';

    /**
     * Returns true if the given object is an instance of SourceRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceRepository.__pulumiType;
    }

    /**
     * The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the project in the CodeCatalyst space.
     *
     * The following arguments are optional:
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The name of the CodeCatalyst space.
     */
    public readonly spaceName!: pulumi.Output<string>;

    /**
     * Create a SourceRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceRepositoryArgs | SourceRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceRepositoryState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["spaceName"] = state ? state.spaceName : undefined;
        } else {
            const args = argsOrState as SourceRepositoryArgs | undefined;
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.spaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spaceName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["spaceName"] = args ? args.spaceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SourceRepository resources.
 */
export interface SourceRepositoryState {
    /**
     * The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the project in the CodeCatalyst space.
     *
     * The following arguments are optional:
     */
    projectName?: pulumi.Input<string>;
    /**
     * The name of the CodeCatalyst space.
     */
    spaceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourceRepository resource.
 */
export interface SourceRepositoryArgs {
    /**
     * The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the project in the CodeCatalyst space.
     *
     * The following arguments are optional:
     */
    projectName: pulumi.Input<string>;
    /**
     * The name of the CodeCatalyst space.
     */
    spaceName: pulumi.Input<string>;
}
