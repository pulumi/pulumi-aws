// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class StandardsControl extends pulumi.CustomResource {
    /**
     * Get an existing StandardsControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StandardsControlState, opts?: pulumi.CustomResourceOptions): StandardsControl {
        return new StandardsControl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:securityhub/standardsControl:StandardsControl';

    /**
     * Returns true if the given object is an instance of StandardsControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StandardsControl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StandardsControl.__pulumiType;
    }

    public /*out*/ readonly controlId!: pulumi.Output<string>;
    public readonly controlStatus!: pulumi.Output<string>;
    public /*out*/ readonly controlStatusUpdatedAt!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public readonly disabledReason!: pulumi.Output<string>;
    public /*out*/ readonly relatedRequirements!: pulumi.Output<string[]>;
    public /*out*/ readonly remediationUrl!: pulumi.Output<string>;
    public /*out*/ readonly severityRating!: pulumi.Output<string>;
    public readonly standardsControlArn!: pulumi.Output<string>;
    public /*out*/ readonly title!: pulumi.Output<string>;

    /**
     * Create a StandardsControl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StandardsControlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StandardsControlArgs | StandardsControlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StandardsControlState | undefined;
            resourceInputs["controlId"] = state ? state.controlId : undefined;
            resourceInputs["controlStatus"] = state ? state.controlStatus : undefined;
            resourceInputs["controlStatusUpdatedAt"] = state ? state.controlStatusUpdatedAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabledReason"] = state ? state.disabledReason : undefined;
            resourceInputs["relatedRequirements"] = state ? state.relatedRequirements : undefined;
            resourceInputs["remediationUrl"] = state ? state.remediationUrl : undefined;
            resourceInputs["severityRating"] = state ? state.severityRating : undefined;
            resourceInputs["standardsControlArn"] = state ? state.standardsControlArn : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as StandardsControlArgs | undefined;
            if ((!args || args.controlStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlStatus'");
            }
            if ((!args || args.standardsControlArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'standardsControlArn'");
            }
            resourceInputs["controlStatus"] = args ? args.controlStatus : undefined;
            resourceInputs["disabledReason"] = args ? args.disabledReason : undefined;
            resourceInputs["standardsControlArn"] = args ? args.standardsControlArn : undefined;
            resourceInputs["controlId"] = undefined /*out*/;
            resourceInputs["controlStatusUpdatedAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["relatedRequirements"] = undefined /*out*/;
            resourceInputs["remediationUrl"] = undefined /*out*/;
            resourceInputs["severityRating"] = undefined /*out*/;
            resourceInputs["title"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StandardsControl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StandardsControl resources.
 */
export interface StandardsControlState {
    controlId?: pulumi.Input<string>;
    controlStatus?: pulumi.Input<string>;
    controlStatusUpdatedAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabledReason?: pulumi.Input<string>;
    relatedRequirements?: pulumi.Input<pulumi.Input<string>[]>;
    remediationUrl?: pulumi.Input<string>;
    severityRating?: pulumi.Input<string>;
    standardsControlArn?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StandardsControl resource.
 */
export interface StandardsControlArgs {
    controlStatus: pulumi.Input<string>;
    disabledReason?: pulumi.Input<string>;
    standardsControlArn: pulumi.Input<string>;
}
