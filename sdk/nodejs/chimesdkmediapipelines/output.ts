// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface MediaInsightsPipelineConfigurationElement {
    /**
     * Configuration for Amazon Transcribe Call Analytics processor.
     */
    amazonTranscribeCallAnalyticsProcessorConfiguration?: outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration;
    /**
     * Configuration for Amazon Transcribe processor.
     */
    amazonTranscribeProcessorConfiguration?: outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration;
    /**
     * Configuration for Kinesis Data Stream sink.
     */
    kinesisDataStreamSinkConfiguration?: outputs.MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration;
    /**
     * Configuration for Lambda Function sink.
     */
    lambdaFunctionSinkConfiguration?: outputs.MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration;
    /**
     * Configuration for S3 recording sink.
     */
    s3RecordingSinkConfiguration?: outputs.MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration;
    /**
     * Configuration for SNS Topic sink.
     */
    snsTopicSinkConfiguration?: outputs.MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration;
    /**
     * Configuration for SQS Queue sink.
     */
    sqsQueueSinkConfiguration?: outputs.MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration;
    /**
     * Element type.
     */
    type: string;
    /**
     * Configuration for Voice analytics processor.
     */
    voiceAnalyticsProcessorConfiguration?: outputs.MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration;
}
export interface MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration {
    /**
     * Filter for category events to be delivered to insights target.
     */
    callAnalyticsStreamCategories?: string[];
    /**
     * Labels all personally identifiable information (PII) identified in Utterance events.
     */
    contentIdentificationType?: string;
    /**
     * Redacts all personally identifiable information (PII) identified in Utterance events.
     */
    contentRedactionType?: string;
    /**
     * Enables partial result stabilization in Utterance events.
     */
    enablePartialResultsStabilization?: boolean;
    /**
     * Filters partial Utterance events from delivery to the insights target.
     */
    filterPartialResults?: boolean;
    /**
     * Language code for the transcription model.
     */
    languageCode: string;
    /**
     * Name of custom language model for transcription.
     */
    languageModelName?: string;
    /**
     * Level of stability to use when partial results stabilization is enabled.
     */
    partialResultsStability?: string;
    /**
     * Types of personally identifiable information (PII) to redact from an Utterance event.
     */
    piiEntityTypes?: string;
    /**
     * Settings for post call analytics.
     */
    postCallAnalyticsSettings?: outputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings;
    /**
     * Method for applying a vocabulary filter to Utterance events.
     */
    vocabularyFilterMethod?: string;
    /**
     * Name of the custom vocabulary filter to use when processing Utterance events.
     */
    vocabularyFilterName?: string;
    /**
     * Name of the custom vocabulary to use when processing Utterance events.
     */
    vocabularyName?: string;
}
export interface MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings {
    contentRedactionOutput?: string;
    dataAccessRoleArn: string;
    outputEncryptionKmsKeyId?: string;
    outputLocation: string;
}
export interface MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration {
    /**
     * Labels all personally identifiable information (PII) identified in Transcript events.
     */
    contentIdentificationType?: string;
    /**
     * Redacts all personally identifiable information (PII) identified in Transcript events.
     */
    contentRedactionType?: string;
    /**
     * Enables partial result stabilization in Transcript events.
     */
    enablePartialResultsStabilization?: boolean;
    /**
     * Filters partial Utterance events from delivery to the insights target.
     */
    filterPartialResults?: boolean;
    /**
     * Language code for the transcription model.
     */
    languageCode: string;
    /**
     * Name of custom language model for transcription.
     */
    languageModelName?: string;
    /**
     * Level of stability to use when partial results stabilization is enabled.
     */
    partialResultsStability?: string;
    /**
     * Types of personally identifiable information (PII) to redact from a Transcript event.
     */
    piiEntityTypes?: string;
    /**
     * Enables speaker partitioning (diarization) in your Transcript events.
     */
    showSpeakerLabel?: boolean;
    /**
     * Method for applying a vocabulary filter to Transcript events.
     */
    vocabularyFilterMethod?: string;
    /**
     * Name of the custom vocabulary filter to use when processing Transcript events.
     */
    vocabularyFilterName?: string;
    /**
     * Name of the custom vocabulary to use when processing Transcript events.
     */
    vocabularyName?: string;
}
export interface MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration {
    /**
     * Kinesis Data Stream to deliver results.
     */
    insightsTarget: string;
}
export interface MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration {
    /**
     * Lambda Function to deliver results.
     */
    insightsTarget: string;
}
export interface MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration {
    /**
     * S3 URI to deliver recordings.
     */
    destination?: string;
}
export interface MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration {
    /**
     * SNS topic to deliver results.
     */
    insightsTarget: string;
}
export interface MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration {
    /**
     * SQS queue to deliver results.
     */
    insightsTarget: string;
}
export interface MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration {
    /**
     * Enable speaker search.
     */
    speakerSearchStatus: string;
    /**
     * Enable voice tone analysis.
     */
    voiceToneAnalysisStatus: string;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfiguration {
    /**
     * Disables real time alert rules.
     */
    disabled: boolean;
    /**
     * Collection of real time alert rules
     */
    rules: outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule[];
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule {
    /**
     * Configuration for an issue detection rule.
     */
    issueDetectionConfiguration?: outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration;
    /**
     * Configuration for a keyword match rule.
     */
    keywordMatchConfiguration?: outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration;
    /**
     * Configuration for a sentiment rule.
     */
    sentimentConfiguration?: outputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration;
    /**
     * Rule type.
     */
    type: string;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration {
    ruleName: string;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration {
    keywords: string[];
    negate: boolean;
    ruleName: string;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration {
    ruleName: string;
    sentimentType: string;
    timePeriod: number;
}
