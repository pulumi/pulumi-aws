// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface MediaInsightsPipelineConfigurationElement {
    /**
     * Configuration for Amazon Transcribe Call Analytics processor.
     */
    amazonTranscribeCallAnalyticsProcessorConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration>;
    /**
     * Configuration for Amazon Transcribe processor.
     */
    amazonTranscribeProcessorConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration>;
    /**
     * Configuration for Kinesis Data Stream sink.
     */
    kinesisDataStreamSinkConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration>;
    /**
     * Configuration for Lambda Function sink.
     */
    lambdaFunctionSinkConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration>;
    /**
     * Configuration for S3 recording sink.
     */
    s3RecordingSinkConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration>;
    /**
     * Configuration for SNS Topic sink.
     */
    snsTopicSinkConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration>;
    /**
     * Configuration for SQS Queue sink.
     */
    sqsQueueSinkConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration>;
    /**
     * Element type.
     */
    type: pulumi.Input<string>;
    /**
     * Configuration for Voice analytics processor.
     */
    voiceAnalyticsProcessorConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration>;
}
export interface MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration {
    /**
     * Filter for category events to be delivered to insights target.
     */
    callAnalyticsStreamCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Labels all personally identifiable information (PII) identified in Utterance events.
     */
    contentIdentificationType?: pulumi.Input<string>;
    /**
     * Redacts all personally identifiable information (PII) identified in Utterance events.
     */
    contentRedactionType?: pulumi.Input<string>;
    /**
     * Enables partial result stabilization in Utterance events.
     */
    enablePartialResultsStabilization?: pulumi.Input<boolean>;
    /**
     * Filters partial Utterance events from delivery to the insights target.
     */
    filterPartialResults?: pulumi.Input<boolean>;
    /**
     * Language code for the transcription model.
     */
    languageCode: pulumi.Input<string>;
    /**
     * Name of custom language model for transcription.
     */
    languageModelName?: pulumi.Input<string>;
    /**
     * Level of stability to use when partial results stabilization is enabled.
     */
    partialResultsStability?: pulumi.Input<string>;
    /**
     * Types of personally identifiable information (PII) to redact from an Utterance event.
     */
    piiEntityTypes?: pulumi.Input<string>;
    /**
     * Settings for post call analytics.
     */
    postCallAnalyticsSettings?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings>;
    /**
     * Method for applying a vocabulary filter to Utterance events.
     */
    vocabularyFilterMethod?: pulumi.Input<string>;
    /**
     * Name of the custom vocabulary filter to use when processing Utterance events.
     */
    vocabularyFilterName?: pulumi.Input<string>;
    /**
     * Name of the custom vocabulary to use when processing Utterance events.
     */
    vocabularyName?: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings {
    contentRedactionOutput?: pulumi.Input<string>;
    dataAccessRoleArn: pulumi.Input<string>;
    outputEncryptionKmsKeyId?: pulumi.Input<string>;
    outputLocation: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration {
    /**
     * Labels all personally identifiable information (PII) identified in Transcript events.
     */
    contentIdentificationType?: pulumi.Input<string>;
    /**
     * Redacts all personally identifiable information (PII) identified in Transcript events.
     */
    contentRedactionType?: pulumi.Input<string>;
    /**
     * Enables partial result stabilization in Transcript events.
     */
    enablePartialResultsStabilization?: pulumi.Input<boolean>;
    /**
     * Filters partial Utterance events from delivery to the insights target.
     */
    filterPartialResults?: pulumi.Input<boolean>;
    /**
     * Language code for the transcription model.
     */
    languageCode: pulumi.Input<string>;
    /**
     * Name of custom language model for transcription.
     */
    languageModelName?: pulumi.Input<string>;
    /**
     * Level of stability to use when partial results stabilization is enabled.
     */
    partialResultsStability?: pulumi.Input<string>;
    /**
     * Types of personally identifiable information (PII) to redact from a Transcript event.
     */
    piiEntityTypes?: pulumi.Input<string>;
    /**
     * Enables speaker partitioning (diarization) in your Transcript events.
     */
    showSpeakerLabel?: pulumi.Input<boolean>;
    /**
     * Method for applying a vocabulary filter to Transcript events.
     */
    vocabularyFilterMethod?: pulumi.Input<string>;
    /**
     * Name of the custom vocabulary filter to use when processing Transcript events.
     */
    vocabularyFilterName?: pulumi.Input<string>;
    /**
     * Name of the custom vocabulary to use when processing Transcript events.
     */
    vocabularyName?: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration {
    /**
     * Kinesis Data Stream to deliver results.
     */
    insightsTarget: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration {
    /**
     * Lambda Function to deliver results.
     */
    insightsTarget: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration {
    /**
     * S3 URI to deliver recordings.
     */
    destination?: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration {
    /**
     * SNS topic to deliver results.
     */
    insightsTarget: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration {
    /**
     * SQS queue to deliver results.
     */
    insightsTarget: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration {
    /**
     * Enable speaker search.
     */
    speakerSearchStatus: pulumi.Input<string>;
    /**
     * Enable voice tone analysis.
     */
    voiceToneAnalysisStatus: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfiguration {
    /**
     * Disables real time alert rules.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Collection of real time alert rules
     */
    rules: pulumi.Input<pulumi.Input<inputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule>[]>;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule {
    /**
     * Configuration for an issue detection rule.
     */
    issueDetectionConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration>;
    /**
     * Configuration for a keyword match rule.
     */
    keywordMatchConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration>;
    /**
     * Configuration for a sentiment rule.
     */
    sentimentConfiguration?: pulumi.Input<inputs.MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration>;
    /**
     * Rule type.
     */
    type: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration {
    ruleName: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration {
    keywords: pulumi.Input<pulumi.Input<string>[]>;
    negate?: pulumi.Input<boolean>;
    ruleName: pulumi.Input<string>;
}
export interface MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration {
    ruleName: pulumi.Input<string>;
    sentimentType: pulumi.Input<string>;
    timePeriod: pulumi.Input<number>;
}
