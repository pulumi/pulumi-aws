// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages an RDS database cluster snapshot copy. For managing RDS database instance snapshot copies, see the `aws.rds.SnapshotCopy` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.rds.Cluster("example", {
 *     clusterIdentifier: "aurora-cluster-demo",
 *     databaseName: "test",
 *     engine: aws.rds.EngineType.AuroraMysql,
 *     masterUsername: "tfacctest",
 *     masterPassword: "avoid-plaintext-passwords",
 *     skipFinalSnapshot: true,
 * });
 * const exampleClusterSnapshot = new aws.rds.ClusterSnapshot("example", {
 *     dbClusterIdentifier: example.clusterIdentifier,
 *     dbClusterSnapshotIdentifier: "example",
 * });
 * const exampleClusterSnapshotCopy = new aws.rds.ClusterSnapshotCopy("example", {
 *     sourceDbClusterSnapshotIdentifier: exampleClusterSnapshot.dbClusterSnapshotArn,
 *     targetDbClusterSnapshotIdentifier: "example-copy",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_rds_cluster_snapshot_copy` using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy example my-snapshot
 * ```
 */
export class ClusterSnapshotCopy extends pulumi.CustomResource {
    /**
     * Get an existing ClusterSnapshotCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterSnapshotCopyState, opts?: pulumi.CustomResourceOptions): ClusterSnapshotCopy {
        return new ClusterSnapshotCopy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy';

    /**
     * Returns true if the given object is an instance of ClusterSnapshotCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterSnapshotCopy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterSnapshotCopy.__pulumiType;
    }

    /**
     * Specifies the allocated storage size in gigabytes (GB).
     */
    public /*out*/ readonly allocatedStorage!: pulumi.Output<number>;
    /**
     * Whether to copy existing tags. Defaults to `false`.
     */
    public readonly copyTags!: pulumi.Output<boolean | undefined>;
    /**
     * The Amazon Resource Name (ARN) for the DB cluster snapshot.
     */
    public /*out*/ readonly dbClusterSnapshotArn!: pulumi.Output<string>;
    /**
     * The Destination region to place snapshot copy.
     */
    public readonly destinationRegion!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the database engine.
     */
    public /*out*/ readonly engine!: pulumi.Output<string>;
    /**
     * Specifies the version of the database engine.
     */
    public /*out*/ readonly engineVersion!: pulumi.Output<string>;
    /**
     * KMS key ID.
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * License model information for the restored DB instance.
     */
    public /*out*/ readonly licenseModel!: pulumi.Output<string>;
    /**
     * URL that contains a Signature Version 4 signed request.
     */
    public readonly presignedUrl!: pulumi.Output<string | undefined>;
    /**
     * List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
     */
    public readonly sharedAccounts!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly snapshotType!: pulumi.Output<string>;
    /**
     * Identifier of the source snapshot.
     */
    public readonly sourceDbClusterSnapshotIdentifier!: pulumi.Output<string>;
    /**
     * Specifies whether the DB cluster snapshot is encrypted.
     */
    public /*out*/ readonly storageEncrypted!: pulumi.Output<boolean>;
    /**
     * Specifies the storage type associated with DB cluster snapshot.
     */
    public /*out*/ readonly storageType!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Identifier for the snapshot.
     *
     * The following arguments are optional:
     */
    public readonly targetDbClusterSnapshotIdentifier!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.rds.ClusterSnapshotCopyTimeouts | undefined>;
    /**
     * Provides the VPC ID associated with the DB cluster snapshot.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a ClusterSnapshotCopy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterSnapshotCopyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterSnapshotCopyArgs | ClusterSnapshotCopyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterSnapshotCopyState | undefined;
            resourceInputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            resourceInputs["copyTags"] = state ? state.copyTags : undefined;
            resourceInputs["dbClusterSnapshotArn"] = state ? state.dbClusterSnapshotArn : undefined;
            resourceInputs["destinationRegion"] = state ? state.destinationRegion : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["presignedUrl"] = state ? state.presignedUrl : undefined;
            resourceInputs["sharedAccounts"] = state ? state.sharedAccounts : undefined;
            resourceInputs["snapshotType"] = state ? state.snapshotType : undefined;
            resourceInputs["sourceDbClusterSnapshotIdentifier"] = state ? state.sourceDbClusterSnapshotIdentifier : undefined;
            resourceInputs["storageEncrypted"] = state ? state.storageEncrypted : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["targetDbClusterSnapshotIdentifier"] = state ? state.targetDbClusterSnapshotIdentifier : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ClusterSnapshotCopyArgs | undefined;
            if ((!args || args.sourceDbClusterSnapshotIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceDbClusterSnapshotIdentifier'");
            }
            if ((!args || args.targetDbClusterSnapshotIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDbClusterSnapshotIdentifier'");
            }
            resourceInputs["copyTags"] = args ? args.copyTags : undefined;
            resourceInputs["destinationRegion"] = args ? args.destinationRegion : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["presignedUrl"] = args ? args.presignedUrl : undefined;
            resourceInputs["sharedAccounts"] = args ? args.sharedAccounts : undefined;
            resourceInputs["sourceDbClusterSnapshotIdentifier"] = args ? args.sourceDbClusterSnapshotIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetDbClusterSnapshotIdentifier"] = args ? args.targetDbClusterSnapshotIdentifier : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["allocatedStorage"] = undefined /*out*/;
            resourceInputs["dbClusterSnapshotArn"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["licenseModel"] = undefined /*out*/;
            resourceInputs["snapshotType"] = undefined /*out*/;
            resourceInputs["storageEncrypted"] = undefined /*out*/;
            resourceInputs["storageType"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterSnapshotCopy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterSnapshotCopy resources.
 */
export interface ClusterSnapshotCopyState {
    /**
     * Specifies the allocated storage size in gigabytes (GB).
     */
    allocatedStorage?: pulumi.Input<number>;
    /**
     * Whether to copy existing tags. Defaults to `false`.
     */
    copyTags?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) for the DB cluster snapshot.
     */
    dbClusterSnapshotArn?: pulumi.Input<string>;
    /**
     * The Destination region to place snapshot copy.
     */
    destinationRegion?: pulumi.Input<string>;
    /**
     * Specifies the name of the database engine.
     */
    engine?: pulumi.Input<string>;
    /**
     * Specifies the version of the database engine.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * KMS key ID.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * License model information for the restored DB instance.
     */
    licenseModel?: pulumi.Input<string>;
    /**
     * URL that contains a Signature Version 4 signed request.
     */
    presignedUrl?: pulumi.Input<string>;
    /**
     * List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
     */
    sharedAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotType?: pulumi.Input<string>;
    /**
     * Identifier of the source snapshot.
     */
    sourceDbClusterSnapshotIdentifier?: pulumi.Input<string>;
    /**
     * Specifies whether the DB cluster snapshot is encrypted.
     */
    storageEncrypted?: pulumi.Input<boolean>;
    /**
     * Specifies the storage type associated with DB cluster snapshot.
     */
    storageType?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Identifier for the snapshot.
     *
     * The following arguments are optional:
     */
    targetDbClusterSnapshotIdentifier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.rds.ClusterSnapshotCopyTimeouts>;
    /**
     * Provides the VPC ID associated with the DB cluster snapshot.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterSnapshotCopy resource.
 */
export interface ClusterSnapshotCopyArgs {
    /**
     * Whether to copy existing tags. Defaults to `false`.
     */
    copyTags?: pulumi.Input<boolean>;
    /**
     * The Destination region to place snapshot copy.
     */
    destinationRegion?: pulumi.Input<string>;
    /**
     * KMS key ID.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * URL that contains a Signature Version 4 signed request.
     */
    presignedUrl?: pulumi.Input<string>;
    /**
     * List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
     */
    sharedAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the source snapshot.
     */
    sourceDbClusterSnapshotIdentifier: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Identifier for the snapshot.
     *
     * The following arguments are optional:
     */
    targetDbClusterSnapshotIdentifier: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.rds.ClusterSnapshotCopyTimeouts>;
}
