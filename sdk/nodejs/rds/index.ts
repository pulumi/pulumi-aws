// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterActivityStreamArgs, ClusterActivityStreamState } from "./clusterActivityStream";
export type ClusterActivityStream = import("./clusterActivityStream").ClusterActivityStream;
export const ClusterActivityStream: typeof import("./clusterActivityStream").ClusterActivityStream = null as any;
utilities.lazyLoad(exports, ["ClusterActivityStream"], () => require("./clusterActivityStream"));

export { ClusterEndpointArgs, ClusterEndpointState } from "./clusterEndpoint";
export type ClusterEndpoint = import("./clusterEndpoint").ClusterEndpoint;
export const ClusterEndpoint: typeof import("./clusterEndpoint").ClusterEndpoint = null as any;
utilities.lazyLoad(exports, ["ClusterEndpoint"], () => require("./clusterEndpoint"));

export { ClusterInstanceArgs, ClusterInstanceState } from "./clusterInstance";
export type ClusterInstance = import("./clusterInstance").ClusterInstance;
export const ClusterInstance: typeof import("./clusterInstance").ClusterInstance = null as any;
utilities.lazyLoad(exports, ["ClusterInstance"], () => require("./clusterInstance"));

export { ClusterParameterGroupArgs, ClusterParameterGroupState } from "./clusterParameterGroup";
export type ClusterParameterGroup = import("./clusterParameterGroup").ClusterParameterGroup;
export const ClusterParameterGroup: typeof import("./clusterParameterGroup").ClusterParameterGroup = null as any;
utilities.lazyLoad(exports, ["ClusterParameterGroup"], () => require("./clusterParameterGroup"));

export { ClusterRoleAssociationArgs, ClusterRoleAssociationState } from "./clusterRoleAssociation";
export type ClusterRoleAssociation = import("./clusterRoleAssociation").ClusterRoleAssociation;
export const ClusterRoleAssociation: typeof import("./clusterRoleAssociation").ClusterRoleAssociation = null as any;
utilities.lazyLoad(exports, ["ClusterRoleAssociation"], () => require("./clusterRoleAssociation"));

export { ClusterSnapshotArgs, ClusterSnapshotState } from "./clusterSnapshot";
export type ClusterSnapshot = import("./clusterSnapshot").ClusterSnapshot;
export const ClusterSnapshot: typeof import("./clusterSnapshot").ClusterSnapshot = null as any;
utilities.lazyLoad(exports, ["ClusterSnapshot"], () => require("./clusterSnapshot"));

export { CustomDbEngineVersionArgs, CustomDbEngineVersionState } from "./customDbEngineVersion";
export type CustomDbEngineVersion = import("./customDbEngineVersion").CustomDbEngineVersion;
export const CustomDbEngineVersion: typeof import("./customDbEngineVersion").CustomDbEngineVersion = null as any;
utilities.lazyLoad(exports, ["CustomDbEngineVersion"], () => require("./customDbEngineVersion"));

export * from "./engineMode";
export * from "./engineType";
export { EventSubscriptionArgs, EventSubscriptionState } from "./eventSubscription";
export type EventSubscription = import("./eventSubscription").EventSubscription;
export const EventSubscription: typeof import("./eventSubscription").EventSubscription = null as any;
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));

export { ExportTaskArgs, ExportTaskState } from "./exportTask";
export type ExportTask = import("./exportTask").ExportTask;
export const ExportTask: typeof import("./exportTask").ExportTask = null as any;
utilities.lazyLoad(exports, ["ExportTask"], () => require("./exportTask"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterSnapshotArgs, GetClusterSnapshotResult, GetClusterSnapshotOutputArgs } from "./getClusterSnapshot";
export const getClusterSnapshot: typeof import("./getClusterSnapshot").getClusterSnapshot = null as any;
export const getClusterSnapshotOutput: typeof import("./getClusterSnapshot").getClusterSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getClusterSnapshot","getClusterSnapshotOutput"], () => require("./getClusterSnapshot"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetEngineVersionArgs, GetEngineVersionResult, GetEngineVersionOutputArgs } from "./getEngineVersion";
export const getEngineVersion: typeof import("./getEngineVersion").getEngineVersion = null as any;
export const getEngineVersionOutput: typeof import("./getEngineVersion").getEngineVersionOutput = null as any;
utilities.lazyLoad(exports, ["getEngineVersion","getEngineVersionOutput"], () => require("./getEngineVersion"));

export { GetEventCategoriesArgs, GetEventCategoriesResult, GetEventCategoriesOutputArgs } from "./getEventCategories";
export const getEventCategories: typeof import("./getEventCategories").getEventCategories = null as any;
export const getEventCategoriesOutput: typeof import("./getEventCategories").getEventCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getEventCategories","getEventCategoriesOutput"], () => require("./getEventCategories"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetOrderableDbInstanceArgs, GetOrderableDbInstanceResult, GetOrderableDbInstanceOutputArgs } from "./getOrderableDbInstance";
export const getOrderableDbInstance: typeof import("./getOrderableDbInstance").getOrderableDbInstance = null as any;
export const getOrderableDbInstanceOutput: typeof import("./getOrderableDbInstance").getOrderableDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOrderableDbInstance","getOrderableDbInstanceOutput"], () => require("./getOrderableDbInstance"));

export { GetProxyArgs, GetProxyResult, GetProxyOutputArgs } from "./getProxy";
export const getProxy: typeof import("./getProxy").getProxy = null as any;
export const getProxyOutput: typeof import("./getProxy").getProxyOutput = null as any;
utilities.lazyLoad(exports, ["getProxy","getProxyOutput"], () => require("./getProxy"));

export { GetReservedInstanceOfferingArgs, GetReservedInstanceOfferingResult, GetReservedInstanceOfferingOutputArgs } from "./getReservedInstanceOffering";
export const getReservedInstanceOffering: typeof import("./getReservedInstanceOffering").getReservedInstanceOffering = null as any;
export const getReservedInstanceOfferingOutput: typeof import("./getReservedInstanceOffering").getReservedInstanceOfferingOutput = null as any;
utilities.lazyLoad(exports, ["getReservedInstanceOffering","getReservedInstanceOfferingOutput"], () => require("./getReservedInstanceOffering"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSubnetGroupArgs, GetSubnetGroupResult, GetSubnetGroupOutputArgs } from "./getSubnetGroup";
export const getSubnetGroup: typeof import("./getSubnetGroup").getSubnetGroup = null as any;
export const getSubnetGroupOutput: typeof import("./getSubnetGroup").getSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetGroup","getSubnetGroupOutput"], () => require("./getSubnetGroup"));

export { GlobalClusterArgs, GlobalClusterState } from "./globalCluster";
export type GlobalCluster = import("./globalCluster").GlobalCluster;
export const GlobalCluster: typeof import("./globalCluster").GlobalCluster = null as any;
utilities.lazyLoad(exports, ["GlobalCluster"], () => require("./globalCluster"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceAutomatedBackupsReplicationArgs, InstanceAutomatedBackupsReplicationState } from "./instanceAutomatedBackupsReplication";
export type InstanceAutomatedBackupsReplication = import("./instanceAutomatedBackupsReplication").InstanceAutomatedBackupsReplication;
export const InstanceAutomatedBackupsReplication: typeof import("./instanceAutomatedBackupsReplication").InstanceAutomatedBackupsReplication = null as any;
utilities.lazyLoad(exports, ["InstanceAutomatedBackupsReplication"], () => require("./instanceAutomatedBackupsReplication"));

export * from "./instanceType";
export { OptionGroupArgs, OptionGroupState } from "./optionGroup";
export type OptionGroup = import("./optionGroup").OptionGroup;
export const OptionGroup: typeof import("./optionGroup").OptionGroup = null as any;
utilities.lazyLoad(exports, ["OptionGroup"], () => require("./optionGroup"));

export { ParameterGroupArgs, ParameterGroupState } from "./parameterGroup";
export type ParameterGroup = import("./parameterGroup").ParameterGroup;
export const ParameterGroup: typeof import("./parameterGroup").ParameterGroup = null as any;
utilities.lazyLoad(exports, ["ParameterGroup"], () => require("./parameterGroup"));

export { ProxyArgs, ProxyState } from "./proxy";
export type Proxy = import("./proxy").Proxy;
export const Proxy: typeof import("./proxy").Proxy = null as any;
utilities.lazyLoad(exports, ["Proxy"], () => require("./proxy"));

export { ProxyDefaultTargetGroupArgs, ProxyDefaultTargetGroupState } from "./proxyDefaultTargetGroup";
export type ProxyDefaultTargetGroup = import("./proxyDefaultTargetGroup").ProxyDefaultTargetGroup;
export const ProxyDefaultTargetGroup: typeof import("./proxyDefaultTargetGroup").ProxyDefaultTargetGroup = null as any;
utilities.lazyLoad(exports, ["ProxyDefaultTargetGroup"], () => require("./proxyDefaultTargetGroup"));

export { ProxyEndpointArgs, ProxyEndpointState } from "./proxyEndpoint";
export type ProxyEndpoint = import("./proxyEndpoint").ProxyEndpoint;
export const ProxyEndpoint: typeof import("./proxyEndpoint").ProxyEndpoint = null as any;
utilities.lazyLoad(exports, ["ProxyEndpoint"], () => require("./proxyEndpoint"));

export { ProxyTargetArgs, ProxyTargetState } from "./proxyTarget";
export type ProxyTarget = import("./proxyTarget").ProxyTarget;
export const ProxyTarget: typeof import("./proxyTarget").ProxyTarget = null as any;
utilities.lazyLoad(exports, ["ProxyTarget"], () => require("./proxyTarget"));

export { ReservedInstanceArgs, ReservedInstanceState } from "./reservedInstance";
export type ReservedInstance = import("./reservedInstance").ReservedInstance;
export const ReservedInstance: typeof import("./reservedInstance").ReservedInstance = null as any;
utilities.lazyLoad(exports, ["ReservedInstance"], () => require("./reservedInstance"));

export { RoleAssociationArgs, RoleAssociationState } from "./roleAssociation";
export type RoleAssociation = import("./roleAssociation").RoleAssociation;
export const RoleAssociation: typeof import("./roleAssociation").RoleAssociation = null as any;
utilities.lazyLoad(exports, ["RoleAssociation"], () => require("./roleAssociation"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotCopyArgs, SnapshotCopyState } from "./snapshotCopy";
export type SnapshotCopy = import("./snapshotCopy").SnapshotCopy;
export const SnapshotCopy: typeof import("./snapshotCopy").SnapshotCopy = null as any;
utilities.lazyLoad(exports, ["SnapshotCopy"], () => require("./snapshotCopy"));

export * from "./storageType";
export { SubnetGroupArgs, SubnetGroupState } from "./subnetGroup";
export type SubnetGroup = import("./subnetGroup").SubnetGroup;
export const SubnetGroup: typeof import("./subnetGroup").SubnetGroup = null as any;
utilities.lazyLoad(exports, ["SubnetGroup"], () => require("./subnetGroup"));


// Export enums:
export * from "../types/enums/rds";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:rds/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws:rds/clusterActivityStream:ClusterActivityStream":
                return new ClusterActivityStream(name, <any>undefined, { urn })
            case "aws:rds/clusterEndpoint:ClusterEndpoint":
                return new ClusterEndpoint(name, <any>undefined, { urn })
            case "aws:rds/clusterInstance:ClusterInstance":
                return new ClusterInstance(name, <any>undefined, { urn })
            case "aws:rds/clusterParameterGroup:ClusterParameterGroup":
                return new ClusterParameterGroup(name, <any>undefined, { urn })
            case "aws:rds/clusterRoleAssociation:ClusterRoleAssociation":
                return new ClusterRoleAssociation(name, <any>undefined, { urn })
            case "aws:rds/clusterSnapshot:ClusterSnapshot":
                return new ClusterSnapshot(name, <any>undefined, { urn })
            case "aws:rds/customDbEngineVersion:CustomDbEngineVersion":
                return new CustomDbEngineVersion(name, <any>undefined, { urn })
            case "aws:rds/eventSubscription:EventSubscription":
                return new EventSubscription(name, <any>undefined, { urn })
            case "aws:rds/exportTask:ExportTask":
                return new ExportTask(name, <any>undefined, { urn })
            case "aws:rds/globalCluster:GlobalCluster":
                return new GlobalCluster(name, <any>undefined, { urn })
            case "aws:rds/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws:rds/instanceAutomatedBackupsReplication:InstanceAutomatedBackupsReplication":
                return new InstanceAutomatedBackupsReplication(name, <any>undefined, { urn })
            case "aws:rds/optionGroup:OptionGroup":
                return new OptionGroup(name, <any>undefined, { urn })
            case "aws:rds/parameterGroup:ParameterGroup":
                return new ParameterGroup(name, <any>undefined, { urn })
            case "aws:rds/proxy:Proxy":
                return new Proxy(name, <any>undefined, { urn })
            case "aws:rds/proxyDefaultTargetGroup:ProxyDefaultTargetGroup":
                return new ProxyDefaultTargetGroup(name, <any>undefined, { urn })
            case "aws:rds/proxyEndpoint:ProxyEndpoint":
                return new ProxyEndpoint(name, <any>undefined, { urn })
            case "aws:rds/proxyTarget:ProxyTarget":
                return new ProxyTarget(name, <any>undefined, { urn })
            case "aws:rds/reservedInstance:ReservedInstance":
                return new ReservedInstance(name, <any>undefined, { urn })
            case "aws:rds/roleAssociation:RoleAssociation":
                return new RoleAssociation(name, <any>undefined, { urn })
            case "aws:rds/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "aws:rds/snapshotCopy:SnapshotCopy":
                return new SnapshotCopy(name, <any>undefined, { urn })
            case "aws:rds/subnetGroup:SubnetGroup":
                return new SubnetGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "rds/cluster", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterActivityStream", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterInstance", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterRoleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "rds/customDbEngineVersion", _module)
pulumi.runtime.registerResourceModule("aws", "rds/eventSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "rds/exportTask", _module)
pulumi.runtime.registerResourceModule("aws", "rds/globalCluster", _module)
pulumi.runtime.registerResourceModule("aws", "rds/instance", _module)
pulumi.runtime.registerResourceModule("aws", "rds/instanceAutomatedBackupsReplication", _module)
pulumi.runtime.registerResourceModule("aws", "rds/optionGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/parameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/proxy", _module)
pulumi.runtime.registerResourceModule("aws", "rds/proxyDefaultTargetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/proxyEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "rds/proxyTarget", _module)
pulumi.runtime.registerResourceModule("aws", "rds/reservedInstance", _module)
pulumi.runtime.registerResourceModule("aws", "rds/roleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "rds/snapshot", _module)
pulumi.runtime.registerResourceModule("aws", "rds/snapshotCopy", _module)
pulumi.runtime.registerResourceModule("aws", "rds/subnetGroup", _module)
