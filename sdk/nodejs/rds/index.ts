// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./cluster";
export * from "./clusterEndpoint";
export * from "./clusterInstance";
export * from "./clusterParameterGroup";
export * from "./clusterSnapshot";
export * from "./engineMode";
export * from "./engineType";
export * from "./eventSubscription";
export * from "./getCertificate";
export * from "./getCluster";
export * from "./getClusterSnapshot";
export * from "./getEngineVersion";
export * from "./getEventCategories";
export * from "./getInstance";
export * from "./getOrderableDbInstance";
export * from "./getSnapshot";
export * from "./getSubnetGroup";
export * from "./globalCluster";
export * from "./instance";
export * from "./instanceType";
export * from "./optionGroup";
export * from "./parameterGroup";
export * from "./proxy";
export * from "./proxyDefaultTargetGroup";
export * from "./proxyTarget";
export * from "./roleAssociation";
export * from "./securityGroup";
export * from "./snapshot";
export * from "./storageType";
export * from "./subnetGroup";

// Export enums:
export * from "../types/enums/rds";

// Import resources to register:
import { Cluster } from "./cluster";
import { ClusterEndpoint } from "./clusterEndpoint";
import { ClusterInstance } from "./clusterInstance";
import { ClusterParameterGroup } from "./clusterParameterGroup";
import { ClusterSnapshot } from "./clusterSnapshot";
import { EventSubscription } from "./eventSubscription";
import { GlobalCluster } from "./globalCluster";
import { Instance } from "./instance";
import { OptionGroup } from "./optionGroup";
import { ParameterGroup } from "./parameterGroup";
import { Proxy } from "./proxy";
import { ProxyDefaultTargetGroup } from "./proxyDefaultTargetGroup";
import { ProxyTarget } from "./proxyTarget";
import { RoleAssociation } from "./roleAssociation";
import { SecurityGroup } from "./securityGroup";
import { Snapshot } from "./snapshot";
import { SubnetGroup } from "./subnetGroup";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:rds/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws:rds/clusterEndpoint:ClusterEndpoint":
                return new ClusterEndpoint(name, <any>undefined, { urn })
            case "aws:rds/clusterInstance:ClusterInstance":
                return new ClusterInstance(name, <any>undefined, { urn })
            case "aws:rds/clusterParameterGroup:ClusterParameterGroup":
                return new ClusterParameterGroup(name, <any>undefined, { urn })
            case "aws:rds/clusterSnapshot:ClusterSnapshot":
                return new ClusterSnapshot(name, <any>undefined, { urn })
            case "aws:rds/eventSubscription:EventSubscription":
                return new EventSubscription(name, <any>undefined, { urn })
            case "aws:rds/globalCluster:GlobalCluster":
                return new GlobalCluster(name, <any>undefined, { urn })
            case "aws:rds/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws:rds/optionGroup:OptionGroup":
                return new OptionGroup(name, <any>undefined, { urn })
            case "aws:rds/parameterGroup:ParameterGroup":
                return new ParameterGroup(name, <any>undefined, { urn })
            case "aws:rds/proxy:Proxy":
                return new Proxy(name, <any>undefined, { urn })
            case "aws:rds/proxyDefaultTargetGroup:ProxyDefaultTargetGroup":
                return new ProxyDefaultTargetGroup(name, <any>undefined, { urn })
            case "aws:rds/proxyTarget:ProxyTarget":
                return new ProxyTarget(name, <any>undefined, { urn })
            case "aws:rds/roleAssociation:RoleAssociation":
                return new RoleAssociation(name, <any>undefined, { urn })
            case "aws:rds/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "aws:rds/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "aws:rds/subnetGroup:SubnetGroup":
                return new SubnetGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "rds/cluster", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterInstance", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/clusterSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "rds/eventSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "rds/globalCluster", _module)
pulumi.runtime.registerResourceModule("aws", "rds/instance", _module)
pulumi.runtime.registerResourceModule("aws", "rds/optionGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/parameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/proxy", _module)
pulumi.runtime.registerResourceModule("aws", "rds/proxyDefaultTargetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/proxyTarget", _module)
pulumi.runtime.registerResourceModule("aws", "rds/roleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "rds/securityGroup", _module)
pulumi.runtime.registerResourceModule("aws", "rds/snapshot", _module)
pulumi.runtime.registerResourceModule("aws", "rds/subnetGroup", _module)
