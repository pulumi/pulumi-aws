// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Information about an RDS engine version.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.rds.getEngineVersion({
 *     engine: "mysql",
 *     preferredVersions: [
 *         "8.0.27",
 *         "8.0.26",
 *     ],
 * });
 * ```
 * ### With `filter`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.rds.getEngineVersion({
 *     engine: "aurora-postgresql",
 *     version: "10.14",
 *     includeAll: true,
 *     filters: [{
 *         name: "engine-mode",
 *         values: ["serverless"],
 *     }],
 * });
 * ```
 */
export function getEngineVersion(args: GetEngineVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetEngineVersionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:rds/getEngineVersion:getEngineVersion", {
        "defaultOnly": args.defaultOnly,
        "engine": args.engine,
        "filters": args.filters,
        "includeAll": args.includeAll,
        "latest": args.latest,
        "parameterGroupFamily": args.parameterGroupFamily,
        "preferredMajorTargets": args.preferredMajorTargets,
        "preferredUpgradeTargets": args.preferredUpgradeTargets,
        "preferredVersions": args.preferredVersions,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getEngineVersion.
 */
export interface GetEngineVersionArgs {
    /**
     * When set to `true`, the default version for the specified `engine` or combination of `engine` and major `version` will be returned. Can be used to limit responses to a single version when they would otherwise fail for returning multiple versions.
     */
    defaultOnly?: boolean;
    /**
     * Database engine. Engine values include `aurora`, `aurora-mysql`, `aurora-postgresql`, `docdb`, `mariadb`, `mysql`, `neptune`, `oracle-ee`, `oracle-se`, `oracle-se1`, `oracle-se2`, `postgres`, `sqlserver-ee`, `sqlserver-ex`, `sqlserver-se`, and `sqlserver-web`.
     *
     * The following arguments are optional:
     */
    engine: string;
    /**
     * One or more name/value pairs to filter off of. There are several valid keys; for a full reference, check out [describe-db-engine-versions in the AWS CLI reference](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/describe-db-engine-versions.html).
     */
    filters?: inputs.rds.GetEngineVersionFilter[];
    /**
     * When set to `true`, the specified `version` or member of `preferredVersions` will be returned even if it is `deprecated`. Otherwise, only `available` versions will be returned.
     */
    includeAll?: boolean;
    /**
     * When set to `true`, the data source attempts to return the most recent version matching the other criteria you provide. This differs from `defaultOnly`. For example, the latest version is not always the default. In addition, AWS may return multiple defaults depending on the criteria. Using `latest` will avoid `multiple RDS engine versions` errors. **Note:** The data source uses a best-effort approach at selecting the latest version but due to the complexity of version identifiers across engines and incomplete version date information provided by AWS, using `latest` may _not_ return the latest version in every situation.
     */
    latest?: boolean;
    /**
     * Name of a specific database parameter group family. Examples of parameter group families are `mysql8.0`, `mariadb10.4`, and `postgres12`.
     */
    parameterGroupFamily?: string;
    /**
     * Ordered list of preferred major version upgrade targets. The version corresponding to the first match in this list will be returned unless the `latest` parameter is set to `true`. If you don't configure `version`, `preferredMajorTargets`, `preferredUpgradeTargets`, and `preferredVersions`, the data source will return the default version for the engine. You can use this with other version criteria.
     */
    preferredMajorTargets?: string[];
    /**
     * Ordered list of preferred version upgrade targets. The version corresponding to the first match in this list will be returned unless the `latest` parameter is set to `true`. If you don't configure `version`, `preferredMajorTargets`, `preferredUpgradeTargets`, and `preferredVersions`, the data source will return the default version for the engine. You can use this with other version criteria.
     */
    preferredUpgradeTargets?: string[];
    /**
     * Ordered list of preferred versions. The first match in this list that matches any other criteria will be returned unless the `latest` parameter is set to `true`. If you don't configure `version`, `preferredMajorTargets`, `preferredUpgradeTargets`, and `preferredVersions`, the data source will return the default version for the engine. You can use this with other version criteria.
     */
    preferredVersions?: string[];
    version?: string;
}

/**
 * A collection of values returned by getEngineVersion.
 */
export interface GetEngineVersionResult {
    /**
     * The default character set for new instances of this engine version.
     */
    readonly defaultCharacterSet: string;
    readonly defaultOnly?: boolean;
    readonly engine: string;
    /**
     * Description of the database engine.
     */
    readonly engineDescription: string;
    /**
     * Set of log types that the database engine has available for export to CloudWatch Logs.
     */
    readonly exportableLogTypes: string[];
    readonly filters?: outputs.rds.GetEngineVersionFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeAll?: boolean;
    readonly latest?: boolean;
    readonly parameterGroupFamily: string;
    readonly preferredMajorTargets?: string[];
    readonly preferredUpgradeTargets?: string[];
    readonly preferredVersions?: string[];
    /**
     * Status of the database engine version, either available or deprecated.
     */
    readonly status: string;
    /**
     * Set of the character sets supported by this engine.
     */
    readonly supportedCharacterSets: string[];
    /**
     * Set of features supported by the database engine.
     */
    readonly supportedFeatureNames: string[];
    /**
     * Set of the supported database engine modes.
     */
    readonly supportedModes: string[];
    /**
     * Set of the time zones supported by this engine.
     */
    readonly supportedTimezones: string[];
    /**
     * Indicates whether you can use Aurora global databases with a specific database engine version.
     */
    readonly supportsGlobalDatabases: boolean;
    /**
     * Indicates whether the engine version supports exporting the log types specified by `exportableLogTypes` to CloudWatch Logs.
     */
    readonly supportsLogExportsToCloudwatch: boolean;
    /**
     * Indicates whether you can use Aurora parallel query with a specific database engine version.
     */
    readonly supportsParallelQuery: boolean;
    /**
     * Indicates whether the database engine version supports read replicas.
     */
    readonly supportsReadReplica: boolean;
    /**
     * Set of engine versions that this database engine version can be upgraded to.
     */
    readonly validUpgradeTargets: string[];
    readonly version: string;
    /**
     * Version of the database engine.
     */
    readonly versionActual: string;
    /**
     * Description of the database engine version.
     */
    readonly versionDescription: string;
}
/**
 * Information about an RDS engine version.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.rds.getEngineVersion({
 *     engine: "mysql",
 *     preferredVersions: [
 *         "8.0.27",
 *         "8.0.26",
 *     ],
 * });
 * ```
 * ### With `filter`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.rds.getEngineVersion({
 *     engine: "aurora-postgresql",
 *     version: "10.14",
 *     includeAll: true,
 *     filters: [{
 *         name: "engine-mode",
 *         values: ["serverless"],
 *     }],
 * });
 * ```
 */
export function getEngineVersionOutput(args: GetEngineVersionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEngineVersionResult> {
    return pulumi.output(args).apply((a: any) => getEngineVersion(a, opts))
}

/**
 * A collection of arguments for invoking getEngineVersion.
 */
export interface GetEngineVersionOutputArgs {
    /**
     * When set to `true`, the default version for the specified `engine` or combination of `engine` and major `version` will be returned. Can be used to limit responses to a single version when they would otherwise fail for returning multiple versions.
     */
    defaultOnly?: pulumi.Input<boolean>;
    /**
     * Database engine. Engine values include `aurora`, `aurora-mysql`, `aurora-postgresql`, `docdb`, `mariadb`, `mysql`, `neptune`, `oracle-ee`, `oracle-se`, `oracle-se1`, `oracle-se2`, `postgres`, `sqlserver-ee`, `sqlserver-ex`, `sqlserver-se`, and `sqlserver-web`.
     *
     * The following arguments are optional:
     */
    engine: pulumi.Input<string>;
    /**
     * One or more name/value pairs to filter off of. There are several valid keys; for a full reference, check out [describe-db-engine-versions in the AWS CLI reference](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/describe-db-engine-versions.html).
     */
    filters?: pulumi.Input<pulumi.Input<inputs.rds.GetEngineVersionFilterArgs>[]>;
    /**
     * When set to `true`, the specified `version` or member of `preferredVersions` will be returned even if it is `deprecated`. Otherwise, only `available` versions will be returned.
     */
    includeAll?: pulumi.Input<boolean>;
    /**
     * When set to `true`, the data source attempts to return the most recent version matching the other criteria you provide. This differs from `defaultOnly`. For example, the latest version is not always the default. In addition, AWS may return multiple defaults depending on the criteria. Using `latest` will avoid `multiple RDS engine versions` errors. **Note:** The data source uses a best-effort approach at selecting the latest version but due to the complexity of version identifiers across engines and incomplete version date information provided by AWS, using `latest` may _not_ return the latest version in every situation.
     */
    latest?: pulumi.Input<boolean>;
    /**
     * Name of a specific database parameter group family. Examples of parameter group families are `mysql8.0`, `mariadb10.4`, and `postgres12`.
     */
    parameterGroupFamily?: pulumi.Input<string>;
    /**
     * Ordered list of preferred major version upgrade targets. The version corresponding to the first match in this list will be returned unless the `latest` parameter is set to `true`. If you don't configure `version`, `preferredMajorTargets`, `preferredUpgradeTargets`, and `preferredVersions`, the data source will return the default version for the engine. You can use this with other version criteria.
     */
    preferredMajorTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ordered list of preferred version upgrade targets. The version corresponding to the first match in this list will be returned unless the `latest` parameter is set to `true`. If you don't configure `version`, `preferredMajorTargets`, `preferredUpgradeTargets`, and `preferredVersions`, the data source will return the default version for the engine. You can use this with other version criteria.
     */
    preferredUpgradeTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ordered list of preferred versions. The first match in this list that matches any other criteria will be returned unless the `latest` parameter is set to `true`. If you don't configure `version`, `preferredMajorTargets`, `preferredUpgradeTargets`, and `preferredVersions`, the data source will return the default version for the engine. You can use this with other version criteria.
     */
    preferredVersions?: pulumi.Input<pulumi.Input<string>[]>;
    version?: pulumi.Input<string>;
}
