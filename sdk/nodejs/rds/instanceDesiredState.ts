// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS RDS (Relational Database) RDS Instance State.
 *
 * > Destruction of this resource is a no-op and **will not** modify the instance state
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.rds.InstanceDesiredState("test", {
 *     identifier: testAwsDbInstance.identifier,
 *     state: "available",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import RDS (Relational Database) RDS Instance State using the `example_id_arg`. For example:
 *
 * ```sh
 * $ pulumi import aws:rds/instanceDesiredState:InstanceDesiredState example rds_instance_state-id-12345678
 * ```
 */
export class InstanceDesiredState extends pulumi.CustomResource {
    /**
     * Get an existing InstanceDesiredState resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceDesiredStateState, opts?: pulumi.CustomResourceOptions): InstanceDesiredState {
        return new InstanceDesiredState(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rds/instanceDesiredState:InstanceDesiredState';

    /**
     * Returns true if the given object is an instance of InstanceDesiredState.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceDesiredState {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceDesiredState.__pulumiType;
    }

    /**
     * DB Instance Identifier
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Configured state of the DB Instance. Valid values are `available` and `stopped`.
     */
    public readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.rds.InstanceDesiredStateTimeouts | undefined>;

    /**
     * Create a InstanceDesiredState resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceDesiredStateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceDesiredStateArgs | InstanceDesiredStateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceDesiredStateState | undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as InstanceDesiredStateArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceDesiredState.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceDesiredState resources.
 */
export interface InstanceDesiredStateState {
    /**
     * DB Instance Identifier
     */
    identifier?: pulumi.Input<string>;
    /**
     * Configured state of the DB Instance. Valid values are `available` and `stopped`.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.rds.InstanceDesiredStateTimeouts>;
}

/**
 * The set of arguments for constructing a InstanceDesiredState resource.
 */
export interface InstanceDesiredStateArgs {
    /**
     * DB Instance Identifier
     */
    identifier: pulumi.Input<string>;
    /**
     * Configured state of the DB Instance. Valid values are `available` and `stopped`.
     */
    state: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.rds.InstanceDesiredStateTimeouts>;
}
