// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SnapshotCopy extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotCopyState, opts?: pulumi.CustomResourceOptions): SnapshotCopy {
        return new SnapshotCopy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rds/snapshotCopy:SnapshotCopy';

    /**
     * Returns true if the given object is an instance of SnapshotCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapshotCopy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotCopy.__pulumiType;
    }

    public /*out*/ readonly allocatedStorage!: pulumi.Output<number>;
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    public readonly copyTags!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly dbSnapshotArn!: pulumi.Output<string>;
    public readonly destinationRegion!: pulumi.Output<string | undefined>;
    public /*out*/ readonly encrypted!: pulumi.Output<boolean>;
    public /*out*/ readonly engine!: pulumi.Output<string>;
    public /*out*/ readonly engineVersion!: pulumi.Output<string>;
    public /*out*/ readonly iops!: pulumi.Output<number>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly licenseModel!: pulumi.Output<string>;
    public readonly optionGroupName!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    public readonly presignedUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly snapshotType!: pulumi.Output<string>;
    public readonly sourceDbSnapshotIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly sourceRegion!: pulumi.Output<string>;
    public /*out*/ readonly storageType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly targetCustomAvailabilityZone!: pulumi.Output<string | undefined>;
    public readonly targetDbSnapshotIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a SnapshotCopy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotCopyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotCopyArgs | SnapshotCopyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotCopyState | undefined;
            resourceInputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["copyTags"] = state ? state.copyTags : undefined;
            resourceInputs["dbSnapshotArn"] = state ? state.dbSnapshotArn : undefined;
            resourceInputs["destinationRegion"] = state ? state.destinationRegion : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["optionGroupName"] = state ? state.optionGroupName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["presignedUrl"] = state ? state.presignedUrl : undefined;
            resourceInputs["snapshotType"] = state ? state.snapshotType : undefined;
            resourceInputs["sourceDbSnapshotIdentifier"] = state ? state.sourceDbSnapshotIdentifier : undefined;
            resourceInputs["sourceRegion"] = state ? state.sourceRegion : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["targetCustomAvailabilityZone"] = state ? state.targetCustomAvailabilityZone : undefined;
            resourceInputs["targetDbSnapshotIdentifier"] = state ? state.targetDbSnapshotIdentifier : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as SnapshotCopyArgs | undefined;
            if ((!args || args.sourceDbSnapshotIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceDbSnapshotIdentifier'");
            }
            if ((!args || args.targetDbSnapshotIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDbSnapshotIdentifier'");
            }
            resourceInputs["copyTags"] = args ? args.copyTags : undefined;
            resourceInputs["destinationRegion"] = args ? args.destinationRegion : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["optionGroupName"] = args ? args.optionGroupName : undefined;
            resourceInputs["presignedUrl"] = args ? args.presignedUrl : undefined;
            resourceInputs["sourceDbSnapshotIdentifier"] = args ? args.sourceDbSnapshotIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetCustomAvailabilityZone"] = args ? args.targetCustomAvailabilityZone : undefined;
            resourceInputs["targetDbSnapshotIdentifier"] = args ? args.targetDbSnapshotIdentifier : undefined;
            resourceInputs["allocatedStorage"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["dbSnapshotArn"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["iops"] = undefined /*out*/;
            resourceInputs["licenseModel"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["snapshotType"] = undefined /*out*/;
            resourceInputs["sourceRegion"] = undefined /*out*/;
            resourceInputs["storageType"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotCopy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnapshotCopy resources.
 */
export interface SnapshotCopyState {
    allocatedStorage?: pulumi.Input<number>;
    availabilityZone?: pulumi.Input<string>;
    copyTags?: pulumi.Input<boolean>;
    dbSnapshotArn?: pulumi.Input<string>;
    destinationRegion?: pulumi.Input<string>;
    encrypted?: pulumi.Input<boolean>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    kmsKeyId?: pulumi.Input<string>;
    licenseModel?: pulumi.Input<string>;
    optionGroupName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    presignedUrl?: pulumi.Input<string>;
    snapshotType?: pulumi.Input<string>;
    sourceDbSnapshotIdentifier?: pulumi.Input<string>;
    sourceRegion?: pulumi.Input<string>;
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetCustomAvailabilityZone?: pulumi.Input<string>;
    targetDbSnapshotIdentifier?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnapshotCopy resource.
 */
export interface SnapshotCopyArgs {
    copyTags?: pulumi.Input<boolean>;
    destinationRegion?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    optionGroupName?: pulumi.Input<string>;
    presignedUrl?: pulumi.Input<string>;
    sourceDbSnapshotIdentifier: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetCustomAvailabilityZone?: pulumi.Input<string>;
    targetDbSnapshotIdentifier: pulumi.Input<string>;
}
