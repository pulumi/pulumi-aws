// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.rds.getReservedInstanceOffering({
 *     dbInstanceClass: "db.t2.micro",
 *     duration: 31536000,
 *     multiAz: false,
 *     offeringType: "All Upfront",
 *     productDescription: "mysql",
 * });
 * const example = new aws.rds.ReservedInstance("example", {
 *     offeringId: test.then(test => test.offeringId),
 *     reservationId: "optionalCustomReservationID",
 *     instanceCount: 3,
 * });
 * ```
 *
 * ## Import
 *
 * RDS DB Instance Reservations can be imported using the `instance_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:rds/reservedInstance:ReservedInstance reservation_instance CustomReservationID
 * ```
 */
export class ReservedInstance extends pulumi.CustomResource {
    /**
     * Get an existing ReservedInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReservedInstanceState, opts?: pulumi.CustomResourceOptions): ReservedInstance {
        return new ReservedInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rds/reservedInstance:ReservedInstance';

    /**
     * Returns true if the given object is an instance of ReservedInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReservedInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedInstance.__pulumiType;
    }

    /**
     * ARN for the reserved DB instance.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Currency code for the reserved DB instance.
     */
    public /*out*/ readonly currencyCode!: pulumi.Output<string>;
    public /*out*/ readonly dbInstanceClass!: pulumi.Output<string>;
    /**
     * Duration of the reservation in seconds.
     */
    public /*out*/ readonly duration!: pulumi.Output<number>;
    /**
     * Fixed price charged for this reserved DB instance.
     */
    public /*out*/ readonly fixedPrice!: pulumi.Output<number>;
    /**
     * Number of instances to reserve. Default value is `1`.
     */
    public readonly instanceCount!: pulumi.Output<number | undefined>;
    /**
     * Unique identifier for the lease associated with the reserved DB instance. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
     */
    public /*out*/ readonly leaseId!: pulumi.Output<string>;
    /**
     * Whether the reservation applies to Multi-AZ deployments.
     */
    public /*out*/ readonly multiAz!: pulumi.Output<boolean>;
    /**
     * ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `aws.rds.getReservedInstanceOffering` data source.
     */
    public readonly offeringId!: pulumi.Output<string>;
    /**
     * Offering type of this reserved DB instance.
     */
    public /*out*/ readonly offeringType!: pulumi.Output<string>;
    /**
     * Description of the reserved DB instance.
     */
    public /*out*/ readonly productDescription!: pulumi.Output<string>;
    /**
     * Recurring price charged to run this reserved DB instance.
     */
    public /*out*/ readonly recurringCharges!: pulumi.Output<outputs.rds.ReservedInstanceRecurringCharge[]>;
    public readonly reservationId!: pulumi.Output<string | undefined>;
    /**
     * Time the reservation started.
     */
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    /**
     * State of the reserved DB instance.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Map of tags to assign to the DB reservation. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Hourly price charged for this reserved DB instance.
     */
    public /*out*/ readonly usagePrice!: pulumi.Output<number>;

    /**
     * Create a ReservedInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReservedInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReservedInstanceArgs | ReservedInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReservedInstanceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["currencyCode"] = state ? state.currencyCode : undefined;
            resourceInputs["dbInstanceClass"] = state ? state.dbInstanceClass : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["fixedPrice"] = state ? state.fixedPrice : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["leaseId"] = state ? state.leaseId : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["offeringId"] = state ? state.offeringId : undefined;
            resourceInputs["offeringType"] = state ? state.offeringType : undefined;
            resourceInputs["productDescription"] = state ? state.productDescription : undefined;
            resourceInputs["recurringCharges"] = state ? state.recurringCharges : undefined;
            resourceInputs["reservationId"] = state ? state.reservationId : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["usagePrice"] = state ? state.usagePrice : undefined;
        } else {
            const args = argsOrState as ReservedInstanceArgs | undefined;
            if ((!args || args.offeringId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offeringId'");
            }
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["offeringId"] = args ? args.offeringId : undefined;
            resourceInputs["reservationId"] = args ? args.reservationId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["currencyCode"] = undefined /*out*/;
            resourceInputs["dbInstanceClass"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["fixedPrice"] = undefined /*out*/;
            resourceInputs["leaseId"] = undefined /*out*/;
            resourceInputs["multiAz"] = undefined /*out*/;
            resourceInputs["offeringType"] = undefined /*out*/;
            resourceInputs["productDescription"] = undefined /*out*/;
            resourceInputs["recurringCharges"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["usagePrice"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReservedInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReservedInstance resources.
 */
export interface ReservedInstanceState {
    /**
     * ARN for the reserved DB instance.
     */
    arn?: pulumi.Input<string>;
    /**
     * Currency code for the reserved DB instance.
     */
    currencyCode?: pulumi.Input<string>;
    dbInstanceClass?: pulumi.Input<string>;
    /**
     * Duration of the reservation in seconds.
     */
    duration?: pulumi.Input<number>;
    /**
     * Fixed price charged for this reserved DB instance.
     */
    fixedPrice?: pulumi.Input<number>;
    /**
     * Number of instances to reserve. Default value is `1`.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * Unique identifier for the lease associated with the reserved DB instance. Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
     */
    leaseId?: pulumi.Input<string>;
    /**
     * Whether the reservation applies to Multi-AZ deployments.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `aws.rds.getReservedInstanceOffering` data source.
     */
    offeringId?: pulumi.Input<string>;
    /**
     * Offering type of this reserved DB instance.
     */
    offeringType?: pulumi.Input<string>;
    /**
     * Description of the reserved DB instance.
     */
    productDescription?: pulumi.Input<string>;
    /**
     * Recurring price charged to run this reserved DB instance.
     */
    recurringCharges?: pulumi.Input<pulumi.Input<inputs.rds.ReservedInstanceRecurringCharge>[]>;
    reservationId?: pulumi.Input<string>;
    /**
     * Time the reservation started.
     */
    startTime?: pulumi.Input<string>;
    /**
     * State of the reserved DB instance.
     */
    state?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the DB reservation. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Hourly price charged for this reserved DB instance.
     */
    usagePrice?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ReservedInstance resource.
 */
export interface ReservedInstanceArgs {
    /**
     * Number of instances to reserve. Default value is `1`.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * ID of the Reserved DB instance offering to purchase. To determine an `offeringId`, see the `aws.rds.getReservedInstanceOffering` data source.
     */
    offeringId: pulumi.Input<string>;
    reservationId?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the DB reservation. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
