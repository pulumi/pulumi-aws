// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ClusterEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing ClusterEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterEndpointState, opts?: pulumi.CustomResourceOptions): ClusterEndpoint {
        return new ClusterEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rds/clusterEndpoint:ClusterEndpoint';

    /**
     * Returns true if the given object is an instance of ClusterEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterEndpoint.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly clusterEndpointIdentifier!: pulumi.Output<string>;
    public readonly clusterIdentifier!: pulumi.Output<string>;
    public readonly customEndpointType!: pulumi.Output<string>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly excludedMembers!: pulumi.Output<string[] | undefined>;
    public readonly staticMembers!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ClusterEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterEndpointArgs | ClusterEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterEndpointState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["clusterEndpointIdentifier"] = state ? state.clusterEndpointIdentifier : undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["customEndpointType"] = state ? state.customEndpointType : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["excludedMembers"] = state ? state.excludedMembers : undefined;
            resourceInputs["staticMembers"] = state ? state.staticMembers : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ClusterEndpointArgs | undefined;
            if ((!args || args.clusterEndpointIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterEndpointIdentifier'");
            }
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if ((!args || args.customEndpointType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customEndpointType'");
            }
            resourceInputs["clusterEndpointIdentifier"] = args ? args.clusterEndpointIdentifier : undefined;
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["customEndpointType"] = args ? args.customEndpointType : undefined;
            resourceInputs["excludedMembers"] = args ? args.excludedMembers : undefined;
            resourceInputs["staticMembers"] = args ? args.staticMembers : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterEndpoint resources.
 */
export interface ClusterEndpointState {
    arn?: pulumi.Input<string>;
    clusterEndpointIdentifier?: pulumi.Input<string>;
    clusterIdentifier?: pulumi.Input<string>;
    customEndpointType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    excludedMembers?: pulumi.Input<pulumi.Input<string>[]>;
    staticMembers?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ClusterEndpoint resource.
 */
export interface ClusterEndpointArgs {
    clusterEndpointIdentifier: pulumi.Input<string>;
    clusterIdentifier: pulumi.Input<string>;
    customEndpointType: pulumi.Input<string>;
    excludedMembers?: pulumi.Input<pulumi.Input<string>[]>;
    staticMembers?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
