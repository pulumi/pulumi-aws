// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an custom engine version (CEV) resource for Amazon RDS Custom. For additional information, see [Working with CEVs for RDS Custom for Oracle](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html) and [Working with CEVs for RDS Custom for SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev-sqlserver.html) in the the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html).
 *
 * ## Example Usage
 *
 * ### RDS Custom for Oracle Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kms.Key("example", {description: "KMS symmetric key for RDS Custom for Oracle"});
 * const exampleCustomDbEngineVersion = new aws.rds.CustomDbEngineVersion("example", {
 *     databaseInstallationFilesS3BucketName: "DOC-EXAMPLE-BUCKET",
 *     databaseInstallationFilesS3Prefix: "1915_GI/",
 *     engine: "custom-oracle-ee-cdb",
 *     engineVersion: "19.cdb_cev1",
 *     kmsKeyId: example.arn,
 *     manifest: `  {
 * \x09"databaseInstallationFileNames":["V982063-01.zip"]
 *   }
 * `,
 *     tags: {
 *         Name: "example",
 *         Key: "value",
 *     },
 * });
 * ```
 *
 * ### RDS Custom for Oracle External Manifest Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const example = new aws.kms.Key("example", {description: "KMS symmetric key for RDS Custom for Oracle"});
 * const exampleCustomDbEngineVersion = new aws.rds.CustomDbEngineVersion("example", {
 *     databaseInstallationFilesS3BucketName: "DOC-EXAMPLE-BUCKET",
 *     databaseInstallationFilesS3Prefix: "1915_GI/",
 *     engine: "custom-oracle-ee-cdb",
 *     engineVersion: "19.cdb_cev1",
 *     kmsKeyId: example.arn,
 *     filename: "manifest_1915_GI.json",
 *     manifestHash: std.filebase64sha256({
 *         input: json,
 *     }).then(invoke => invoke.result),
 *     tags: {
 *         Name: "example",
 *         Key: "value",
 *     },
 * });
 * ```
 *
 * ### RDS Custom for SQL Server Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // CEV creation requires an AMI owned by the operator
 * const test = new aws.rds.CustomDbEngineVersion("test", {
 *     engine: "custom-sqlserver-se",
 *     engineVersion: "15.00.4249.2.cev-1",
 *     sourceImageId: "ami-0aa12345678a12ab1",
 * });
 * ```
 *
 * ### RDS Custom for SQL Server Usage with AMI from another region
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.AmiCopy("example", {
 *     name: "sqlserver-se-2019-15.00.4249.2",
 *     description: "A copy of ami-xxxxxxxx",
 *     sourceAmiId: "ami-xxxxxxxx",
 *     sourceAmiRegion: "us-east-1",
 * });
 * // CEV creation requires an AMI owned by the operator
 * const test = new aws.rds.CustomDbEngineVersion("test", {
 *     engine: "custom-sqlserver-se",
 *     engineVersion: "15.00.4249.2.cev-1",
 *     sourceImageId: example.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import custom engine versions for Amazon RDS custom using the `engine` and `engine_version` separated by a colon (`:`). For example:
 *
 * ```sh
 * $ pulumi import aws:rds/customDbEngineVersion:CustomDbEngineVersion example custom-oracle-ee-cdb:19.cdb_cev1
 * ```
 */
export class CustomDbEngineVersion extends pulumi.CustomResource {
    /**
     * Get an existing CustomDbEngineVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomDbEngineVersionState, opts?: pulumi.CustomResourceOptions): CustomDbEngineVersion {
        return new CustomDbEngineVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rds/customDbEngineVersion:CustomDbEngineVersion';

    /**
     * Returns true if the given object is an instance of CustomDbEngineVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomDbEngineVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomDbEngineVersion.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) for the custom engine version.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The date and time that the CEV was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * The name of the Amazon S3 bucket that contains the database installation files.
     */
    declare public readonly databaseInstallationFilesS3BucketName: pulumi.Output<string | undefined>;
    /**
     * The prefix for the Amazon S3 bucket that contains the database installation files.
     */
    declare public readonly databaseInstallationFilesS3Prefix: pulumi.Output<string | undefined>;
    /**
     * The name of the DB parameter group family for the CEV.
     */
    declare public /*out*/ readonly dbParameterGroupFamily: pulumi.Output<string>;
    /**
     * The description of the CEV.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the database engine. Valid values are `custom-oracle*`, `custom-sqlserver*`.
     */
    declare public readonly engine: pulumi.Output<string>;
    /**
     * The version of the database engine.
     */
    declare public readonly engineVersion: pulumi.Output<string>;
    /**
     * The name of the manifest file within the local filesystem. Conflicts with `manifest`.
     */
    declare public readonly filename: pulumi.Output<string | undefined>;
    /**
     * The ID of the AMI that was created with the CEV.
     */
    declare public /*out*/ readonly imageId: pulumi.Output<string>;
    /**
     * The ARN of the AWS KMS key that is used to encrypt the database installation files. Required for RDS Custom for Oracle.
     */
    declare public readonly kmsKeyId: pulumi.Output<string>;
    /**
     * The major version of the database engine.
     */
    declare public /*out*/ readonly majorEngineVersion: pulumi.Output<string>;
    /**
     * The manifest file, in JSON format, that contains the list of database installation files. Conflicts with `filename`.
     */
    declare public readonly manifest: pulumi.Output<string | undefined>;
    /**
     * The returned manifest file, in JSON format, service generated and often different from input `manifest`.
     */
    declare public /*out*/ readonly manifestComputed: pulumi.Output<string>;
    /**
     * Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the manifest source specified with `filename`. The usual way to set this is filebase64sha256("manifest.json") where "manifest.json" is the local filename of the manifest source.
     */
    declare public readonly manifestHash: pulumi.Output<string | undefined>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The ID of the AMI to create the CEV from. Required for RDS Custom for SQL Server. For RDS Custom for Oracle, you can specify an AMI ID that was used in a different Oracle CEV.
     */
    declare public readonly sourceImageId: pulumi.Output<string | undefined>;
    /**
     * The status of the CEV. Valid values are `available`, `inactive`, `inactive-except-restore`.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a CustomDbEngineVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomDbEngineVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomDbEngineVersionArgs | CustomDbEngineVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomDbEngineVersionState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["databaseInstallationFilesS3BucketName"] = state?.databaseInstallationFilesS3BucketName;
            resourceInputs["databaseInstallationFilesS3Prefix"] = state?.databaseInstallationFilesS3Prefix;
            resourceInputs["dbParameterGroupFamily"] = state?.dbParameterGroupFamily;
            resourceInputs["description"] = state?.description;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["engineVersion"] = state?.engineVersion;
            resourceInputs["filename"] = state?.filename;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["majorEngineVersion"] = state?.majorEngineVersion;
            resourceInputs["manifest"] = state?.manifest;
            resourceInputs["manifestComputed"] = state?.manifestComputed;
            resourceInputs["manifestHash"] = state?.manifestHash;
            resourceInputs["region"] = state?.region;
            resourceInputs["sourceImageId"] = state?.sourceImageId;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        } else {
            const args = argsOrState as CustomDbEngineVersionArgs | undefined;
            if (args?.engine === undefined && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if (args?.engineVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            resourceInputs["databaseInstallationFilesS3BucketName"] = args?.databaseInstallationFilesS3BucketName;
            resourceInputs["databaseInstallationFilesS3Prefix"] = args?.databaseInstallationFilesS3Prefix;
            resourceInputs["description"] = args?.description;
            resourceInputs["engine"] = args?.engine;
            resourceInputs["engineVersion"] = args?.engineVersion;
            resourceInputs["filename"] = args?.filename;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["manifest"] = args?.manifest;
            resourceInputs["manifestHash"] = args?.manifestHash;
            resourceInputs["region"] = args?.region;
            resourceInputs["sourceImageId"] = args?.sourceImageId;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dbParameterGroupFamily"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["majorEngineVersion"] = undefined /*out*/;
            resourceInputs["manifestComputed"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomDbEngineVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomDbEngineVersion resources.
 */
export interface CustomDbEngineVersionState {
    /**
     * The Amazon Resource Name (ARN) for the custom engine version.
     */
    arn?: pulumi.Input<string>;
    /**
     * The date and time that the CEV was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The name of the Amazon S3 bucket that contains the database installation files.
     */
    databaseInstallationFilesS3BucketName?: pulumi.Input<string>;
    /**
     * The prefix for the Amazon S3 bucket that contains the database installation files.
     */
    databaseInstallationFilesS3Prefix?: pulumi.Input<string>;
    /**
     * The name of the DB parameter group family for the CEV.
     */
    dbParameterGroupFamily?: pulumi.Input<string>;
    /**
     * The description of the CEV.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the database engine. Valid values are `custom-oracle*`, `custom-sqlserver*`.
     */
    engine?: pulumi.Input<string>;
    /**
     * The version of the database engine.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The name of the manifest file within the local filesystem. Conflicts with `manifest`.
     */
    filename?: pulumi.Input<string>;
    /**
     * The ID of the AMI that was created with the CEV.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The ARN of the AWS KMS key that is used to encrypt the database installation files. Required for RDS Custom for Oracle.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The major version of the database engine.
     */
    majorEngineVersion?: pulumi.Input<string>;
    /**
     * The manifest file, in JSON format, that contains the list of database installation files. Conflicts with `filename`.
     */
    manifest?: pulumi.Input<string>;
    /**
     * The returned manifest file, in JSON format, service generated and often different from input `manifest`.
     */
    manifestComputed?: pulumi.Input<string>;
    /**
     * Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the manifest source specified with `filename`. The usual way to set this is filebase64sha256("manifest.json") where "manifest.json" is the local filename of the manifest source.
     */
    manifestHash?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the AMI to create the CEV from. Required for RDS Custom for SQL Server. For RDS Custom for Oracle, you can specify an AMI ID that was used in a different Oracle CEV.
     */
    sourceImageId?: pulumi.Input<string>;
    /**
     * The status of the CEV. Valid values are `available`, `inactive`, `inactive-except-restore`.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a CustomDbEngineVersion resource.
 */
export interface CustomDbEngineVersionArgs {
    /**
     * The name of the Amazon S3 bucket that contains the database installation files.
     */
    databaseInstallationFilesS3BucketName?: pulumi.Input<string>;
    /**
     * The prefix for the Amazon S3 bucket that contains the database installation files.
     */
    databaseInstallationFilesS3Prefix?: pulumi.Input<string>;
    /**
     * The description of the CEV.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the database engine. Valid values are `custom-oracle*`, `custom-sqlserver*`.
     */
    engine: pulumi.Input<string>;
    /**
     * The version of the database engine.
     */
    engineVersion: pulumi.Input<string>;
    /**
     * The name of the manifest file within the local filesystem. Conflicts with `manifest`.
     */
    filename?: pulumi.Input<string>;
    /**
     * The ARN of the AWS KMS key that is used to encrypt the database installation files. Required for RDS Custom for Oracle.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The manifest file, in JSON format, that contains the list of database installation files. Conflicts with `filename`.
     */
    manifest?: pulumi.Input<string>;
    /**
     * Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the manifest source specified with `filename`. The usual way to set this is filebase64sha256("manifest.json") where "manifest.json" is the local filename of the manifest source.
     */
    manifestHash?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the AMI to create the CEV from. Required for RDS Custom for SQL Server. For RDS Custom for Oracle, you can specify an AMI ID that was used in a different Oracle CEV.
     */
    sourceImageId?: pulumi.Input<string>;
    /**
     * The status of the CEV. Valid values are `available`, `inactive`, `inactive-except-restore`.
     */
    status?: pulumi.Input<string>;
    /**
     * A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
