// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface FirewallEncryptionConfiguration {
    /**
     * The ID of the customer managed key. You can use any of the [key identifiers](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
     */
    keyId?: string;
    /**
     * The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are `CUSTOMER_KMS` and `AWS_OWNED_KMS_KEY`.
     */
    type: string;
}
export interface FirewallFirewallStatus {
    /**
     * Set of subnets configured for use by the firewall.
     */
    syncStates: outputs.FirewallFirewallStatusSyncState[];
}
export interface FirewallFirewallStatusSyncState {
    /**
     * Nested list describing the attachment status of the firewall's association with a single VPC subnet.
     */
    attachments: outputs.FirewallFirewallStatusSyncStateAttachment[];
    /**
     * The Availability Zone where the subnet is configured.
     */
    availabilityZone: string;
}
export interface FirewallFirewallStatusSyncStateAttachment {
    /**
     * The identifier of the firewall endpoint that AWS Network Firewall has instantiated in the subnet. You use this to identify the firewall endpoint in the VPC route tables, when you redirect the VPC traffic through the endpoint.
     */
    endpointId: string;
    /**
     * The unique identifier of the subnet that you've specified to be used for a firewall endpoint.
     */
    subnetId: string;
}
export interface FirewallPolicyEncryptionConfiguration {
    /**
     * The ID of the customer managed key. You can use any of the [key identifiers](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
     */
    keyId?: string;
    /**
     * The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are `CUSTOMER_KMS` and `AWS_OWNED_KMS_KEY`.
     */
    type: string;
}
export interface FirewallPolicyFirewallPolicy {
    /**
     * . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
     */
    policyVariables?: outputs.FirewallPolicyFirewallPolicyPolicyVariables;
    /**
     * Set of actions to take on a packet if it does not match any stateful rules in the policy. This can only be specified if the policy has a `statefulEngineOptions` block with a `ruleOrder` value of `STRICT_ORDER`. You can specify one of either or neither values of `aws:drop_strict` or `aws:drop_established`, as well as any combination of `aws:alert_strict` and `aws:alert_established`.
     */
    statefulDefaultActions?: string[];
    /**
     * A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
     */
    statefulEngineOptions?: outputs.FirewallPolicyFirewallPolicyStatefulEngineOptions;
    /**
     * Set of configuration blocks containing references to the stateful rule groups that are used in the policy. See Stateful Rule Group Reference below for details.
     */
    statefulRuleGroupReferences?: outputs.FirewallPolicyFirewallPolicyStatefulRuleGroupReference[];
    /**
     * Set of configuration blocks describing the custom action definitions that are available for use in the firewall policy's `statelessDefaultActions`. See Stateless Custom Action below for details.
     */
    statelessCustomActions?: outputs.FirewallPolicyFirewallPolicyStatelessCustomAction[];
    /**
     * Set of actions to take on a packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
     * In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
     */
    statelessDefaultActions: string[];
    /**
     * Set of actions to take on a fragmented packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
     * In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
     */
    statelessFragmentDefaultActions: string[];
    /**
     * Set of configuration blocks containing references to the stateless rule groups that are used in the policy. See Stateless Rule Group Reference below for details.
     */
    statelessRuleGroupReferences?: outputs.FirewallPolicyFirewallPolicyStatelessRuleGroupReference[];
    /**
     * The (ARN) of the TLS Inspection policy to attach to the FW Policy.  This must be added at creation of the resource per AWS documentation. "You can only add a TLS inspection configuration to a new policy, not to an existing policy."  This cannot be removed from a FW Policy.
     */
    tlsInspectionConfigurationArn?: string;
}
export interface FirewallPolicyFirewallPolicyPolicyVariables {
    ruleVariables?: outputs.FirewallPolicyFirewallPolicyPolicyVariablesRuleVariable[];
}
export interface FirewallPolicyFirewallPolicyPolicyVariablesRuleVariable {
    /**
     * A configuration block that defines a set of IP addresses. See IP Set below for details.
     */
    ipSet: outputs.FirewallPolicyFirewallPolicyPolicyVariablesRuleVariableIpSet;
    /**
     * An alphanumeric string to identify the `ipSet`. Valid values: `HOME_NET`
     */
    key: string;
}
export interface FirewallPolicyFirewallPolicyPolicyVariablesRuleVariableIpSet {
    /**
     * Set of IPv4 or IPv6 addresses in CIDR notation to use for the Suricata `HOME_NET` variable.
     */
    definitions: string[];
}
export interface FirewallPolicyFirewallPolicyStatefulEngineOptions {
    /**
     * Indicates how to manage the order of stateful rule evaluation for the policy. Default value: `DEFAULT_ACTION_ORDER`. Valid values: `DEFAULT_ACTION_ORDER`, `STRICT_ORDER`.
     */
    ruleOrder?: string;
    /**
     * Describes how to treat traffic which has broken midstream. Default value: `DROP`. Valid values: `DROP`, `CONTINUE`, `REJECT`.
     */
    streamExceptionPolicy?: string;
}
export interface FirewallPolicyFirewallPolicyStatefulRuleGroupReference {
    /**
     * Configuration block for override values
     */
    override?: outputs.FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceOverride;
    /**
     * An integer setting that indicates the order in which to apply the stateful rule groups in a single policy. This argument must be specified if the policy has a `statefulEngineOptions` block with a `ruleOrder` value of `STRICT_ORDER`. AWS Network Firewall applies each stateful rule group to a packet starting with the group that has the lowest priority setting.
     */
    priority?: number;
    /**
     * The Amazon Resource Name (ARN) of the stateful rule group.
     */
    resourceArn: string;
}
export interface FirewallPolicyFirewallPolicyStatefulRuleGroupReferenceOverride {
    /**
     * The action that changes the rule group from DROP to ALERT . This only applies to managed rule groups.
     */
    action?: string;
}
export interface FirewallPolicyFirewallPolicyStatelessCustomAction {
    /**
     * A configuration block describing the custom action associated with the `actionName`. See Action Definition below for details.
     */
    actionDefinition: outputs.FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinition;
    /**
     * A friendly name of the custom action.
     */
    actionName: string;
}
export interface FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinition {
    /**
     * A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
     */
    publishMetricAction: outputs.FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction;
}
export interface FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction {
    /**
     * Set of configuration blocks describing dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for more details.
     */
    dimensions: outputs.FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension[];
}
export interface FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension {
    /**
     * The string value to use in the custom metric dimension.
     */
    value: string;
}
export interface FirewallPolicyFirewallPolicyStatelessRuleGroupReference {
    /**
     * An integer setting that indicates the order in which to run the stateless rule groups in a single policy. AWS Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting.
     */
    priority: number;
    /**
     * The Amazon Resource Name (ARN) of the stateless rule group.
     */
    resourceArn: string;
}
export interface FirewallSubnetMapping {
    /**
     * The subnet's IP address type. Valida values: `"DUALSTACK"`, `"IPV4"`.
     */
    ipAddressType: string;
    /**
     * The unique identifier for the subnet.
     */
    subnetId: string;
}
export interface LoggingConfigurationLoggingConfiguration {
    /**
     * Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for `FLOW` logs and one for `ALERT` logs.
     */
    logDestinationConfigs: outputs.LoggingConfigurationLoggingConfigurationLogDestinationConfig[];
}
export interface LoggingConfigurationLoggingConfigurationLogDestinationConfig {
    /**
     * A map describing the logging destination for the chosen `logDestinationType`.
     * * For an Amazon S3 bucket, specify the key `bucketName` with the name of the bucket and optionally specify the key `prefix` with a path.
     * * For a CloudWatch log group, specify the key `logGroup` with the name of the CloudWatch log group.
     * * For a Kinesis Data Firehose delivery stream, specify the key `deliveryStream` with the name of the delivery stream.
     */
    logDestination: {[key: string]: string};
    /**
     * The location to send logs to. Valid values: `S3`, `CloudWatchLogs`, `KinesisDataFirehose`.
     */
    logDestinationType: string;
    /**
     * The type of log to send. Valid values: `ALERT` or `FLOW`. Alert logs report traffic that matches a `StatefulRule` with an action setting that sends a log message. Flow logs are standard network traffic flow logs.
     */
    logType: string;
}
export interface RuleGroupEncryptionConfiguration {
    /**
     * The ID of the customer managed key. You can use any of the [key identifiers](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
     */
    keyId?: string;
    /**
     * The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are `CUSTOMER_KMS` and `AWS_OWNED_KMS_KEY`.
     */
    type: string;
}
export interface RuleGroupRuleGroup {
    /**
     * A configuration block that defines the IP Set References for the rule group. See Reference Sets below for details. Please notes that there can only be a maximum of 5 `referenceSets` in a `ruleGroup`. See the [AWS documentation](https://docs.aws.amazon.com/network-firewall/latest/developerguide/rule-groups-ip-set-references.html#rule-groups-ip-set-reference-limits) for details.
     */
    referenceSets?: outputs.RuleGroupRuleGroupReferenceSets;
    /**
     * A configuration block that defines additional settings available to use in the rules defined in the rule group. Can only be specified for **stateful** rule groups. See Rule Variables below for details.
     */
    ruleVariables?: outputs.RuleGroupRuleGroupRuleVariables;
    /**
     * A configuration block that defines the stateful or stateless rules for the rule group. See Rules Source below for details.
     */
    rulesSource: outputs.RuleGroupRuleGroupRulesSource;
    /**
     * A configuration block that defines stateful rule options for the rule group. See Stateful Rule Options below for details.
     */
    statefulRuleOptions?: outputs.RuleGroupRuleGroupStatefulRuleOptions;
}
export interface RuleGroupRuleGroupReferenceSets {
    ipSetReferences?: outputs.RuleGroupRuleGroupReferenceSetsIpSetReference[];
}
export interface RuleGroupRuleGroupReferenceSetsIpSetReference {
    ipSetReferences: outputs.RuleGroupRuleGroupReferenceSetsIpSetReferenceIpSetReference[];
    key: string;
}
export interface RuleGroupRuleGroupReferenceSetsIpSetReferenceIpSetReference {
    /**
     * Set of Managed Prefix IP ARN(s)
     */
    referenceArn: string;
}
export interface RuleGroupRuleGroupRuleVariables {
    /**
     * Set of configuration blocks that define IP address information. See IP Sets below for details.
     */
    ipSets?: outputs.RuleGroupRuleGroupRuleVariablesIpSet[];
    /**
     * Set of configuration blocks that define port range information. See Port Sets below for details.
     */
    portSets?: outputs.RuleGroupRuleGroupRuleVariablesPortSet[];
}
export interface RuleGroupRuleGroupRuleVariablesIpSet {
    /**
     * A configuration block that defines a set of IP addresses. See IP Set below for details.
     */
    ipSet: outputs.RuleGroupRuleGroupRuleVariablesIpSetIpSet;
    /**
     * A unique alphanumeric string to identify the `ipSet`.
     */
    key: string;
}
export interface RuleGroupRuleGroupRuleVariablesIpSetIpSet {
    /**
     * Set of IP addresses and address ranges, in CIDR notation.
     */
    definitions: string[];
}
export interface RuleGroupRuleGroupRuleVariablesPortSet {
    /**
     * An unique alphanumeric string to identify the `portSet`.
     */
    key: string;
    /**
     * A configuration block that defines a set of port ranges. See Port Set below for details.
     */
    portSet: outputs.RuleGroupRuleGroupRuleVariablesPortSetPortSet;
}
export interface RuleGroupRuleGroupRuleVariablesPortSetPortSet {
    /**
     * Set of port ranges.
     */
    definitions: string[];
}
export interface RuleGroupRuleGroupRulesSource {
    /**
     * A configuration block containing **stateful** inspection criteria for a domain list rule group. See Rules Source List below for details.
     */
    rulesSourceList?: outputs.RuleGroupRuleGroupRulesSourceRulesSourceList;
    /**
     * The fully qualified name of a file in an S3 bucket that contains Suricata compatible intrusion preventions system (IPS) rules or the Suricata rules as a string. These rules contain **stateful** inspection criteria and the action to take for traffic that matches the criteria.
     */
    rulesString?: string;
    /**
     * Set of configuration blocks containing **stateful** inspection criteria for 5-tuple rules to be used together in a rule group. See Stateful Rule below for details.
     */
    statefulRules?: outputs.RuleGroupRuleGroupRulesSourceStatefulRule[];
    /**
     * A configuration block containing **stateless** inspection criteria for a stateless rule group. See Stateless Rules and Custom Actions below for details.
     */
    statelessRulesAndCustomActions?: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActions;
}
export interface RuleGroupRuleGroupRulesSourceRulesSourceList {
    /**
     * String value to specify whether domains in the target list are allowed or denied access. Valid values: `ALLOWLIST`, `DENYLIST`.
     */
    generatedRulesType: string;
    /**
     * Set of types of domain specifications that are provided in the `targets` argument. Valid values: `HTTP_HOST`, `TLS_SNI`.
     */
    targetTypes: string[];
    /**
     * Set of domains that you want to inspect for in your traffic flows.
     */
    targets: string[];
}
export interface RuleGroupRuleGroupRulesSourceStatefulRule {
    /**
     * Action to take with packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, AWS Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. Valid values: `ALERT`, `DROP`, `PASS`, or `REJECT`.
     */
    action: string;
    /**
     * A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
     */
    header: outputs.RuleGroupRuleGroupRulesSourceStatefulRuleHeader;
    /**
     * Set of configuration blocks containing additional settings for a stateful rule. See Rule Option below for details.
     */
    ruleOptions: outputs.RuleGroupRuleGroupRulesSourceStatefulRuleRuleOption[];
}
export interface RuleGroupRuleGroupRulesSourceStatefulRuleHeader {
    /**
     * The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify `ANY`.
     */
    destination: string;
    /**
     * The destination port to inspect for. To match with any address, specify `ANY`.
     */
    destinationPort: string;
    /**
     * The direction of traffic flow to inspect. Valid values: `ANY` or `FORWARD`.
     */
    direction: string;
    /**
     * The protocol to inspect. Valid values: `IP`, `TCP`, `UDP`, `ICMP`, `HTTP`, `FTP`, `TLS`, `SMB`, `DNS`, `DCERPC`, `SSH`, `SMTP`, `IMAP`, `MSN`, `KRB5`, `IKEV2`, `TFTP`, `NTP`, `DHCP`.
     */
    protocol: string;
    /**
     * The source IP address or address range for, in CIDR notation. To match with any address, specify `ANY`.
     */
    source: string;
    /**
     * The source port to inspect for. To match with any address, specify `ANY`.
     */
    sourcePort: string;
}
export interface RuleGroupRuleGroupRulesSourceStatefulRuleRuleOption {
    /**
     * Keyword defined by open source detection systems like Snort or Suricata for stateful rule inspection.
     * See [Snort General Rule Options](http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node31.html) or [Suricata Rule Options](https://suricata.readthedocs.io/en/suricata-5.0.1/rules/intro.html#rule-options) for more details.
     */
    keyword: string;
    /**
     * Set of strings for additional settings to use in stateful rule inspection.
     */
    settings?: string[];
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActions {
    /**
     * Set of configuration blocks containing custom action definitions that are available for use by the set of `stateless rule`. See Custom Action below for details.
     */
    customActions?: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction[];
    /**
     * Set of configuration blocks containing the stateless rules for use in the stateless rule group. See Stateless Rule below for details.
     */
    statelessRules: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule[];
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction {
    /**
     * A configuration block describing the custom action associated with the `actionName`. See Action Definition below for details.
     */
    actionDefinition: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition;
    /**
     * A friendly name of the custom action.
     */
    actionName: string;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition {
    /**
     * A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
     */
    publishMetricAction: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction {
    /**
     * Set of configuration blocks containing the dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for details.
     */
    dimensions: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension[];
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension {
    /**
     * The value to use in the custom metric dimension.
     */
    value: string;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule {
    /**
     * A setting that indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. AWS Network Firewall evaluates the rules in a rule group starting with the lowest priority setting.
     */
    priority: number;
    /**
     * A configuration block defining the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria. See Rule Definition below for details.
     */
    ruleDefinition: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition {
    /**
     * Set of actions to take on a packet that matches one of the stateless rule definition's `matchAttributes`. For every rule you must specify 1 standard action, and you can add custom actions. Standard actions include: `aws:pass`, `aws:drop`, `aws:forward_to_sfe`.
     */
    actions: string[];
    /**
     * A configuration block containing criteria for AWS Network Firewall to use to inspect an individual packet in stateless rule inspection. See Match Attributes below for details.
     */
    matchAttributes: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes {
    /**
     * Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See Destination Port below for details.
     */
    destinationPorts?: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort[];
    /**
     * Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See Destination below for details.
     */
    destinations?: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination[];
    /**
     * Set of protocols to inspect for, specified using the protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
     */
    protocols?: number[];
    /**
     * Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See Source Port below for details.
     */
    sourcePorts?: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort[];
    /**
     * Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See Source below for details.
     */
    sources?: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource[];
    /**
     * Set of configuration blocks containing the TCP flags and masks to inspect for. If not specified, this matches with any settings.
     */
    tcpFlags?: outputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag[];
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination {
    /**
     * An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
     */
    addressDefinition: string;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort {
    /**
     * The lower limit of the port range. This must be less than or equal to the `toPort`.
     */
    fromPort: number;
    /**
     * The upper limit of the port range. This must be greater than or equal to the `fromPort`.
     */
    toPort?: number;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource {
    /**
     * An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
     */
    addressDefinition: string;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort {
    /**
     * The lower limit of the port range. This must be less than or equal to the `toPort`.
     */
    fromPort: number;
    /**
     * The upper limit of the port range. This must be greater than or equal to the `fromPort`.
     */
    toPort?: number;
}
export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag {
    /**
     * Set of flags to look for in a packet. This setting can only specify values that are also specified in `masks`.
     * Valid values: `FIN`, `SYN`, `RST`, `PSH`, `ACK`, `URG`, `ECE`, `CWR`.
     */
    flags: string[];
    /**
     * Set of flags to consider in the inspection. To inspect all flags, leave this empty.
     * Valid values: `FIN`, `SYN`, `RST`, `PSH`, `ACK`, `URG`, `ECE`, `CWR`.
     */
    masks?: string[];
}
export interface RuleGroupRuleGroupStatefulRuleOptions {
    /**
     * Indicates how to manage the order of the rule evaluation for the rule group. Default value: `DEFAULT_ACTION_ORDER`. Valid values: `DEFAULT_ACTION_ORDER`, `STRICT_ORDER`.
     */
    ruleOrder: string;
}
export interface GetFirewallEncryptionConfiguration {
    /**
     * The ID of the AWS Key Management Service (AWS KMS) customer managed key.
     */
    keyId: string;
    /**
     * The type of the AWS Key Management Service (AWS KMS) key use by the firewall.
     */
    type: string;
}
export interface GetFirewallFirewallStatus {
    /**
     * Aggregated count of all resources used by reference sets in a firewall.
     */
    capacityUsageSummaries: outputs.GetFirewallFirewallStatusCapacityUsageSummary[];
    /**
     * Summary of sync states for all availability zones in which the firewall is configured.
     */
    configurationSyncStateSummary: string;
    status: string;
    /**
     * Set of subnets configured for use by the firewall.
     */
    syncStates: outputs.GetFirewallFirewallStatusSyncState[];
}
export interface GetFirewallFirewallStatusCapacityUsageSummary {
    /**
     * Capacity usage of CIDR blocks used by IP set references in a firewall.
     */
    cidrs: outputs.GetFirewallFirewallStatusCapacityUsageSummaryCidr[];
}
export interface GetFirewallFirewallStatusCapacityUsageSummaryCidr {
    /**
     * Available number of CIDR blocks available for use by the IP set references in a firewall.
     */
    availableCidrCount: number;
    /**
     * The list of IP set references used by a firewall.
     */
    ipSetReferences: outputs.GetFirewallFirewallStatusCapacityUsageSummaryCidrIpSetReference[];
    /**
     * Number of CIDR blocks used by the IP set references in a firewall.
     */
    utilizedCidrCount: number;
}
export interface GetFirewallFirewallStatusCapacityUsageSummaryCidrIpSetReference {
    /**
     * Total number of CIDR blocks used by the IP set references in a firewall.
     */
    resolvedCidrCount: number;
}
export interface GetFirewallFirewallStatusSyncState {
    /**
     * Nested list describing the attachment status of the firewall's association with a single VPC subnet.
     */
    attachments: outputs.GetFirewallFirewallStatusSyncStateAttachment[];
    /**
     * The Availability Zone where the subnet is configured.
     */
    availabilityZone: string;
}
export interface GetFirewallFirewallStatusSyncStateAttachment {
    /**
     * The identifier of the firewall endpoint that AWS Network Firewall has instantiated in the subnet. You use this to identify the firewall endpoint in the VPC route tables, when you redirect the VPC traffic through the endpoint.
     */
    endpointId: string;
    status: string;
    /**
     * The unique identifier for the subnet.
     */
    subnetId: string;
}
export interface GetFirewallPolicyFirewallPolicy {
    statefulDefaultActions: string[];
    statefulEngineOptions: outputs.GetFirewallPolicyFirewallPolicyStatefulEngineOption[];
    statefulRuleGroupReferences: outputs.GetFirewallPolicyFirewallPolicyStatefulRuleGroupReference[];
    statelessCustomActions: outputs.GetFirewallPolicyFirewallPolicyStatelessCustomAction[];
    statelessDefaultActions: string[];
    statelessFragmentDefaultActions: string[];
    statelessRuleGroupReferences: outputs.GetFirewallPolicyFirewallPolicyStatelessRuleGroupReference[];
    tlsInspectionConfigurationArn: string;
}
export interface GetFirewallPolicyFirewallPolicyStatefulEngineOption {
    ruleOrder: string;
    streamExceptionPolicy: string;
}
export interface GetFirewallPolicyFirewallPolicyStatefulRuleGroupReference {
    overrides?: outputs.GetFirewallPolicyFirewallPolicyStatefulRuleGroupReferenceOverride[];
    priority: number;
    resourceArn: string;
}
export interface GetFirewallPolicyFirewallPolicyStatefulRuleGroupReferenceOverride {
    action?: string;
}
export interface GetFirewallPolicyFirewallPolicyStatelessCustomAction {
    actionDefinitions: outputs.GetFirewallPolicyFirewallPolicyStatelessCustomActionActionDefinition[];
    actionName: string;
}
export interface GetFirewallPolicyFirewallPolicyStatelessCustomActionActionDefinition {
    publishMetricActions: outputs.GetFirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction[];
}
export interface GetFirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction {
    dimensions: outputs.GetFirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension[];
}
export interface GetFirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension {
    value: string;
}
export interface GetFirewallPolicyFirewallPolicyStatelessRuleGroupReference {
    priority: number;
    resourceArn: string;
}
export interface GetFirewallSubnetMapping {
    /**
     * The unique identifier for the subnet.
     */
    subnetId: string;
}
