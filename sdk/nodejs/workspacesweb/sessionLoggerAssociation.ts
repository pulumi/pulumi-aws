// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS WorkSpaces Web Session Logger Association.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import WorkSpaces Web Session Logger Association using the `session_logger_arn,portal_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:workspacesweb/sessionLoggerAssociation:SessionLoggerAssociation example arn:aws:workspaces-web:us-west-2:123456789012:sessionLogger/session_logger-id-12345678,arn:aws:workspaces-web:us-west-2:123456789012:portal/portal-id-12345678
 * ```
 */
export class SessionLoggerAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SessionLoggerAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SessionLoggerAssociationState, opts?: pulumi.CustomResourceOptions): SessionLoggerAssociation {
        return new SessionLoggerAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:workspacesweb/sessionLoggerAssociation:SessionLoggerAssociation';

    /**
     * Returns true if the given object is an instance of SessionLoggerAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SessionLoggerAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SessionLoggerAssociation.__pulumiType;
    }

    /**
     * ARN of the web portal.
     */
    public readonly portalArn!: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * ARN of the session logger.
     *
     * The following arguments are optional:
     */
    public readonly sessionLoggerArn!: pulumi.Output<string>;

    /**
     * Create a SessionLoggerAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SessionLoggerAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SessionLoggerAssociationArgs | SessionLoggerAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SessionLoggerAssociationState | undefined;
            resourceInputs["portalArn"] = state ? state.portalArn : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sessionLoggerArn"] = state ? state.sessionLoggerArn : undefined;
        } else {
            const args = argsOrState as SessionLoggerAssociationArgs | undefined;
            if ((!args || args.portalArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portalArn'");
            }
            if ((!args || args.sessionLoggerArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sessionLoggerArn'");
            }
            resourceInputs["portalArn"] = args ? args.portalArn : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sessionLoggerArn"] = args ? args.sessionLoggerArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SessionLoggerAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SessionLoggerAssociation resources.
 */
export interface SessionLoggerAssociationState {
    /**
     * ARN of the web portal.
     */
    portalArn?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * ARN of the session logger.
     *
     * The following arguments are optional:
     */
    sessionLoggerArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SessionLoggerAssociation resource.
 */
export interface SessionLoggerAssociationArgs {
    /**
     * ARN of the web portal.
     */
    portalArn: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * ARN of the session logger.
     *
     * The following arguments are optional:
     */
    sessionLoggerArn: pulumi.Input<string>;
}
