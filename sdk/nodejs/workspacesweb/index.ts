// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BrowserSettingsArgs, BrowserSettingsState } from "./browserSettings";
export type BrowserSettings = import("./browserSettings").BrowserSettings;
export const BrowserSettings: typeof import("./browserSettings").BrowserSettings = null as any;
utilities.lazyLoad(exports, ["BrowserSettings"], () => require("./browserSettings"));

export { BrowserSettingsAssociationArgs, BrowserSettingsAssociationState } from "./browserSettingsAssociation";
export type BrowserSettingsAssociation = import("./browserSettingsAssociation").BrowserSettingsAssociation;
export const BrowserSettingsAssociation: typeof import("./browserSettingsAssociation").BrowserSettingsAssociation = null as any;
utilities.lazyLoad(exports, ["BrowserSettingsAssociation"], () => require("./browserSettingsAssociation"));

export { DataProtectionSettingsArgs, DataProtectionSettingsState } from "./dataProtectionSettings";
export type DataProtectionSettings = import("./dataProtectionSettings").DataProtectionSettings;
export const DataProtectionSettings: typeof import("./dataProtectionSettings").DataProtectionSettings = null as any;
utilities.lazyLoad(exports, ["DataProtectionSettings"], () => require("./dataProtectionSettings"));

export { DataProtectionSettingsAssociationArgs, DataProtectionSettingsAssociationState } from "./dataProtectionSettingsAssociation";
export type DataProtectionSettingsAssociation = import("./dataProtectionSettingsAssociation").DataProtectionSettingsAssociation;
export const DataProtectionSettingsAssociation: typeof import("./dataProtectionSettingsAssociation").DataProtectionSettingsAssociation = null as any;
utilities.lazyLoad(exports, ["DataProtectionSettingsAssociation"], () => require("./dataProtectionSettingsAssociation"));

export { IdentityProviderArgs, IdentityProviderState } from "./identityProvider";
export type IdentityProvider = import("./identityProvider").IdentityProvider;
export const IdentityProvider: typeof import("./identityProvider").IdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));

export { IpAccessSettingsArgs, IpAccessSettingsState } from "./ipAccessSettings";
export type IpAccessSettings = import("./ipAccessSettings").IpAccessSettings;
export const IpAccessSettings: typeof import("./ipAccessSettings").IpAccessSettings = null as any;
utilities.lazyLoad(exports, ["IpAccessSettings"], () => require("./ipAccessSettings"));

export { IpAccessSettingsAssociationArgs, IpAccessSettingsAssociationState } from "./ipAccessSettingsAssociation";
export type IpAccessSettingsAssociation = import("./ipAccessSettingsAssociation").IpAccessSettingsAssociation;
export const IpAccessSettingsAssociation: typeof import("./ipAccessSettingsAssociation").IpAccessSettingsAssociation = null as any;
utilities.lazyLoad(exports, ["IpAccessSettingsAssociation"], () => require("./ipAccessSettingsAssociation"));

export { NetworkSettingsArgs, NetworkSettingsState } from "./networkSettings";
export type NetworkSettings = import("./networkSettings").NetworkSettings;
export const NetworkSettings: typeof import("./networkSettings").NetworkSettings = null as any;
utilities.lazyLoad(exports, ["NetworkSettings"], () => require("./networkSettings"));

export { NetworkSettingsAssociationArgs, NetworkSettingsAssociationState } from "./networkSettingsAssociation";
export type NetworkSettingsAssociation = import("./networkSettingsAssociation").NetworkSettingsAssociation;
export const NetworkSettingsAssociation: typeof import("./networkSettingsAssociation").NetworkSettingsAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkSettingsAssociation"], () => require("./networkSettingsAssociation"));

export { PortalArgs, PortalState } from "./portal";
export type Portal = import("./portal").Portal;
export const Portal: typeof import("./portal").Portal = null as any;
utilities.lazyLoad(exports, ["Portal"], () => require("./portal"));

export { SessionLoggerArgs, SessionLoggerState } from "./sessionLogger";
export type SessionLogger = import("./sessionLogger").SessionLogger;
export const SessionLogger: typeof import("./sessionLogger").SessionLogger = null as any;
utilities.lazyLoad(exports, ["SessionLogger"], () => require("./sessionLogger"));

export { SessionLoggerAssociationArgs, SessionLoggerAssociationState } from "./sessionLoggerAssociation";
export type SessionLoggerAssociation = import("./sessionLoggerAssociation").SessionLoggerAssociation;
export const SessionLoggerAssociation: typeof import("./sessionLoggerAssociation").SessionLoggerAssociation = null as any;
utilities.lazyLoad(exports, ["SessionLoggerAssociation"], () => require("./sessionLoggerAssociation"));

export { TrustStoreArgs, TrustStoreState } from "./trustStore";
export type TrustStore = import("./trustStore").TrustStore;
export const TrustStore: typeof import("./trustStore").TrustStore = null as any;
utilities.lazyLoad(exports, ["TrustStore"], () => require("./trustStore"));

export { TrustStoreAssociationArgs, TrustStoreAssociationState } from "./trustStoreAssociation";
export type TrustStoreAssociation = import("./trustStoreAssociation").TrustStoreAssociation;
export const TrustStoreAssociation: typeof import("./trustStoreAssociation").TrustStoreAssociation = null as any;
utilities.lazyLoad(exports, ["TrustStoreAssociation"], () => require("./trustStoreAssociation"));

export { UserAccessLoggingSettingsArgs, UserAccessLoggingSettingsState } from "./userAccessLoggingSettings";
export type UserAccessLoggingSettings = import("./userAccessLoggingSettings").UserAccessLoggingSettings;
export const UserAccessLoggingSettings: typeof import("./userAccessLoggingSettings").UserAccessLoggingSettings = null as any;
utilities.lazyLoad(exports, ["UserAccessLoggingSettings"], () => require("./userAccessLoggingSettings"));

export { UserAccessLoggingSettingsAssociationArgs, UserAccessLoggingSettingsAssociationState } from "./userAccessLoggingSettingsAssociation";
export type UserAccessLoggingSettingsAssociation = import("./userAccessLoggingSettingsAssociation").UserAccessLoggingSettingsAssociation;
export const UserAccessLoggingSettingsAssociation: typeof import("./userAccessLoggingSettingsAssociation").UserAccessLoggingSettingsAssociation = null as any;
utilities.lazyLoad(exports, ["UserAccessLoggingSettingsAssociation"], () => require("./userAccessLoggingSettingsAssociation"));

export { UserSettingsArgs, UserSettingsState } from "./userSettings";
export type UserSettings = import("./userSettings").UserSettings;
export const UserSettings: typeof import("./userSettings").UserSettings = null as any;
utilities.lazyLoad(exports, ["UserSettings"], () => require("./userSettings"));

export { UserSettingsAssociationArgs, UserSettingsAssociationState } from "./userSettingsAssociation";
export type UserSettingsAssociation = import("./userSettingsAssociation").UserSettingsAssociation;
export const UserSettingsAssociation: typeof import("./userSettingsAssociation").UserSettingsAssociation = null as any;
utilities.lazyLoad(exports, ["UserSettingsAssociation"], () => require("./userSettingsAssociation"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:workspacesweb/browserSettings:BrowserSettings":
                return new BrowserSettings(name, <any>undefined, { urn })
            case "aws:workspacesweb/browserSettingsAssociation:BrowserSettingsAssociation":
                return new BrowserSettingsAssociation(name, <any>undefined, { urn })
            case "aws:workspacesweb/dataProtectionSettings:DataProtectionSettings":
                return new DataProtectionSettings(name, <any>undefined, { urn })
            case "aws:workspacesweb/dataProtectionSettingsAssociation:DataProtectionSettingsAssociation":
                return new DataProtectionSettingsAssociation(name, <any>undefined, { urn })
            case "aws:workspacesweb/identityProvider:IdentityProvider":
                return new IdentityProvider(name, <any>undefined, { urn })
            case "aws:workspacesweb/ipAccessSettings:IpAccessSettings":
                return new IpAccessSettings(name, <any>undefined, { urn })
            case "aws:workspacesweb/ipAccessSettingsAssociation:IpAccessSettingsAssociation":
                return new IpAccessSettingsAssociation(name, <any>undefined, { urn })
            case "aws:workspacesweb/networkSettings:NetworkSettings":
                return new NetworkSettings(name, <any>undefined, { urn })
            case "aws:workspacesweb/networkSettingsAssociation:NetworkSettingsAssociation":
                return new NetworkSettingsAssociation(name, <any>undefined, { urn })
            case "aws:workspacesweb/portal:Portal":
                return new Portal(name, <any>undefined, { urn })
            case "aws:workspacesweb/sessionLogger:SessionLogger":
                return new SessionLogger(name, <any>undefined, { urn })
            case "aws:workspacesweb/sessionLoggerAssociation:SessionLoggerAssociation":
                return new SessionLoggerAssociation(name, <any>undefined, { urn })
            case "aws:workspacesweb/trustStore:TrustStore":
                return new TrustStore(name, <any>undefined, { urn })
            case "aws:workspacesweb/trustStoreAssociation:TrustStoreAssociation":
                return new TrustStoreAssociation(name, <any>undefined, { urn })
            case "aws:workspacesweb/userAccessLoggingSettings:UserAccessLoggingSettings":
                return new UserAccessLoggingSettings(name, <any>undefined, { urn })
            case "aws:workspacesweb/userAccessLoggingSettingsAssociation:UserAccessLoggingSettingsAssociation":
                return new UserAccessLoggingSettingsAssociation(name, <any>undefined, { urn })
            case "aws:workspacesweb/userSettings:UserSettings":
                return new UserSettings(name, <any>undefined, { urn })
            case "aws:workspacesweb/userSettingsAssociation:UserSettingsAssociation":
                return new UserSettingsAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "workspacesweb/browserSettings", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/browserSettingsAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/dataProtectionSettings", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/dataProtectionSettingsAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/identityProvider", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/ipAccessSettings", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/ipAccessSettingsAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/networkSettings", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/networkSettingsAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/portal", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/sessionLogger", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/sessionLoggerAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/trustStore", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/trustStoreAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/userAccessLoggingSettings", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/userAccessLoggingSettingsAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/userSettings", _module)
pulumi.runtime.registerResourceModule("aws", "workspacesweb/userSettingsAssociation", _module)
