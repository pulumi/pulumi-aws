// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages [DynamoDB Global Tables V1 (version 2017.11.29)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html). These are layered on top of existing DynamoDB Tables.
 *
 * > **NOTE:** To instead manage [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html), use the `aws.dynamodb.Table` resource `replica` configuration block.
 *
 * > Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const us_east_1 = new aws.Provider("us-east-1", {region: "us-east-1"});
 * const us_west_2 = new aws.Provider("us-west-2", {region: "us-west-2"});
 * const us_east_1Table = new aws.dynamodb.Table("us-east-1Table", {
 *     hashKey: "myAttribute",
 *     streamEnabled: true,
 *     streamViewType: "NEW_AND_OLD_IMAGES",
 *     readCapacity: 1,
 *     writeCapacity: 1,
 *     attributes: [{
 *         name: "myAttribute",
 *         type: "S",
 *     }],
 * }, {
 *     provider: aws["us-east-1"],
 * });
 * const us_west_2Table = new aws.dynamodb.Table("us-west-2Table", {
 *     hashKey: "myAttribute",
 *     streamEnabled: true,
 *     streamViewType: "NEW_AND_OLD_IMAGES",
 *     readCapacity: 1,
 *     writeCapacity: 1,
 *     attributes: [{
 *         name: "myAttribute",
 *         type: "S",
 *     }],
 * }, {
 *     provider: aws["us-west-2"],
 * });
 * const myTable = new aws.dynamodb.GlobalTable("myTable", {replicas: [
 *     {
 *         regionName: "us-east-1",
 *     },
 *     {
 *         regionName: "us-west-2",
 *     },
 * ]}, {
 *     provider: aws["us-east-1"],
 *     dependsOn: [
 *         us_east_1Table,
 *         us_west_2Table,
 *     ],
 * });
 * ```
 */
export class GlobalTable extends pulumi.CustomResource {
    /**
     * Get an existing GlobalTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalTableState, opts?: pulumi.CustomResourceOptions): GlobalTable {
        return new GlobalTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:dynamodb/globalTable:GlobalTable';

    /**
     * Returns true if the given object is an instance of GlobalTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalTable.__pulumiType;
    }

    /**
     * The ARN of the DynamoDB Global Table
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name of the global table. Must match underlying DynamoDB Table names in all regions.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Underlying DynamoDB Table. At least 1 replica must be defined. See below.
     */
    public readonly replicas!: pulumi.Output<outputs.dynamodb.GlobalTableReplica[]>;

    /**
     * Create a GlobalTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalTableArgs | GlobalTableState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as GlobalTableState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["replicas"] = state ? state.replicas : undefined;
        } else {
            const args = argsOrState as GlobalTableArgs | undefined;
            if (!args || args.replicas === undefined) {
                throw new Error("Missing required property 'replicas'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["replicas"] = args ? args.replicas : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(GlobalTable.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalTable resources.
 */
export interface GlobalTableState {
    /**
     * The ARN of the DynamoDB Global Table
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The name of the global table. Must match underlying DynamoDB Table names in all regions.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Underlying DynamoDB Table. At least 1 replica must be defined. See below.
     */
    readonly replicas?: pulumi.Input<pulumi.Input<inputs.dynamodb.GlobalTableReplica>[]>;
}

/**
 * The set of arguments for constructing a GlobalTable resource.
 */
export interface GlobalTableArgs {
    /**
     * The name of the global table. Must match underlying DynamoDB Table names in all regions.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Underlying DynamoDB Table. At least 1 replica must be defined. See below.
     */
    readonly replicas: pulumi.Input<pulumi.Input<inputs.dynamodb.GlobalTableReplica>[]>;
}
