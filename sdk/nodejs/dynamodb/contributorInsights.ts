// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a DynamoDB contributor insights resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.dynamodb.ContributorInsights("test", {tableName: "ExampleTableName"});
 * ```
 *
 * ## Import
 *
 * `aws_dynamodb_contributor_insights` can be imported using the format `name:table_name/index:index_name`, followed by the account number, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:dynamodb/contributorInsights:ContributorInsights test name:ExampleTableName/index:ExampleIndexName/123456789012
 * ```
 */
export class ContributorInsights extends pulumi.CustomResource {
    /**
     * Get an existing ContributorInsights resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContributorInsightsState, opts?: pulumi.CustomResourceOptions): ContributorInsights {
        return new ContributorInsights(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:dynamodb/contributorInsights:ContributorInsights';

    /**
     * Returns true if the given object is an instance of ContributorInsights.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContributorInsights {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContributorInsights.__pulumiType;
    }

    /**
     * The global secondary index name
     */
    public readonly indexName!: pulumi.Output<string | undefined>;
    /**
     * The name of the table to enable contributor insights
     */
    public readonly tableName!: pulumi.Output<string>;

    /**
     * Create a ContributorInsights resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContributorInsightsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContributorInsightsArgs | ContributorInsightsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContributorInsightsState | undefined;
            resourceInputs["indexName"] = state ? state.indexName : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
        } else {
            const args = argsOrState as ContributorInsightsArgs | undefined;
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            resourceInputs["indexName"] = args ? args.indexName : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContributorInsights.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContributorInsights resources.
 */
export interface ContributorInsightsState {
    /**
     * The global secondary index name
     */
    indexName?: pulumi.Input<string>;
    /**
     * The name of the table to enable contributor insights
     */
    tableName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContributorInsights resource.
 */
export interface ContributorInsightsArgs {
    /**
     * The global secondary index name
     */
    indexName?: pulumi.Input<string>;
    /**
     * The name of the table to enable contributor insights
     */
    tableName: pulumi.Input<string>;
}
