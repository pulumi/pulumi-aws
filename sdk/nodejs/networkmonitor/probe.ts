// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Network Monitor Probe.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.networkmonitor.Monitor("example", {
 *     aggregationPeriod: 30,
 *     monitorName: "example",
 * });
 * const exampleProbe = new aws.networkmonitor.Probe("example", {
 *     monitorName: example.monitorName,
 *     destination: "127.0.0.1",
 *     destinationPort: 80,
 *     protocol: "TCP",
 *     sourceArn: exampleAwsSubnet.arn,
 *     packetSize: 200,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_networkmonitor_probe` using the monitor name and probe id. For example:
 *
 * ```sh
 * $ pulumi import aws:networkmonitor/probe:Probe example monitor-7786087912324693644,probe-3qm8p693i4fi1h8lqylzkbp42e
 * ```
 */
export class Probe extends pulumi.CustomResource {
    /**
     * Get an existing Probe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProbeState, opts?: pulumi.CustomResourceOptions): Probe {
        return new Probe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:networkmonitor/probe:Probe';

    /**
     * Returns true if the given object is an instance of Probe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Probe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Probe.__pulumiType;
    }

    declare public /*out*/ readonly addressFamily: pulumi.Output<string>;
    /**
     * The ARN of the attachment.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The destination IP address. This must be either IPV4 or IPV6.
     */
    declare public readonly destination: pulumi.Output<string>;
    /**
     * The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     */
    declare public readonly destinationPort: pulumi.Output<number | undefined>;
    /**
     * The name of the monitor.
     */
    declare public readonly monitorName: pulumi.Output<string>;
    /**
     * The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     */
    declare public readonly packetSize: pulumi.Output<number>;
    declare public /*out*/ readonly probeId: pulumi.Output<string>;
    /**
     * The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The ARN of the subnet.
     */
    declare public readonly sourceArn: pulumi.Output<string>;
    /**
     * Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Probe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProbeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProbeArgs | ProbeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProbeState | undefined;
            resourceInputs["addressFamily"] = state?.addressFamily;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["destinationPort"] = state?.destinationPort;
            resourceInputs["monitorName"] = state?.monitorName;
            resourceInputs["packetSize"] = state?.packetSize;
            resourceInputs["probeId"] = state?.probeId;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["region"] = state?.region;
            resourceInputs["sourceArn"] = state?.sourceArn;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ProbeArgs | undefined;
            if (args?.destination === undefined && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if (args?.monitorName === undefined && !opts.urn) {
                throw new Error("Missing required property 'monitorName'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.sourceArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceArn'");
            }
            resourceInputs["destination"] = args?.destination;
            resourceInputs["destinationPort"] = args?.destinationPort;
            resourceInputs["monitorName"] = args?.monitorName;
            resourceInputs["packetSize"] = args?.packetSize;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["region"] = args?.region;
            resourceInputs["sourceArn"] = args?.sourceArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["addressFamily"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["probeId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Probe.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Probe resources.
 */
export interface ProbeState {
    addressFamily?: pulumi.Input<string>;
    /**
     * The ARN of the attachment.
     */
    arn?: pulumi.Input<string>;
    /**
     * The destination IP address. This must be either IPV4 or IPV6.
     */
    destination?: pulumi.Input<string>;
    /**
     * The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * The name of the monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     */
    packetSize?: pulumi.Input<number>;
    probeId?: pulumi.Input<string>;
    /**
     * The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The ARN of the subnet.
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Probe resource.
 */
export interface ProbeArgs {
    /**
     * The destination IP address. This must be either IPV4 or IPV6.
     */
    destination: pulumi.Input<string>;
    /**
     * The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * The name of the monitor.
     */
    monitorName: pulumi.Input<string>;
    /**
     * The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
     */
    packetSize?: pulumi.Input<number>;
    /**
     * The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
     */
    protocol: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The ARN of the subnet.
     */
    sourceArn: pulumi.Input<string>;
    /**
     * Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
