// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS AppFabric Ingestion Destination.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appfabric.IngestionDestination("example", {
 *     appBundleArn: exampleAwsAppfabricAppBundle.arn,
 *     ingestionArn: exampleAwsAppfabricIngestion.arn,
 *     processingConfiguration: {
 *         auditLog: {
 *             format: "json",
 *             schema: "raw",
 *         },
 *     },
 *     destinationConfiguration: {
 *         auditLog: {
 *             destination: {
 *                 s3Bucket: {
 *                     bucketName: exampleAwsS3Bucket.bucket,
 *                 },
 *             },
 *         },
 *     },
 * });
 * ```
 */
export class IngestionDestination extends pulumi.CustomResource {
    /**
     * Get an existing IngestionDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IngestionDestinationState, opts?: pulumi.CustomResourceOptions): IngestionDestination {
        return new IngestionDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appfabric/ingestionDestination:IngestionDestination';

    /**
     * Returns true if the given object is an instance of IngestionDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IngestionDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IngestionDestination.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the app bundle to use for the request.
     */
    public readonly appBundleArn!: pulumi.Output<string>;
    /**
     * ARN of the Ingestion Destination.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Contains information about the destination of ingested data.
     */
    public readonly destinationConfiguration!: pulumi.Output<outputs.appfabric.IngestionDestinationDestinationConfiguration | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the ingestion to use for the request.
     */
    public readonly ingestionArn!: pulumi.Output<string>;
    /**
     * Contains information about how ingested data is processed.
     */
    public readonly processingConfiguration!: pulumi.Output<outputs.appfabric.IngestionDestinationProcessingConfiguration | undefined>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.appfabric.IngestionDestinationTimeouts | undefined>;

    /**
     * Create a IngestionDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IngestionDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IngestionDestinationArgs | IngestionDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IngestionDestinationState | undefined;
            resourceInputs["appBundleArn"] = state ? state.appBundleArn : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["destinationConfiguration"] = state ? state.destinationConfiguration : undefined;
            resourceInputs["ingestionArn"] = state ? state.ingestionArn : undefined;
            resourceInputs["processingConfiguration"] = state ? state.processingConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as IngestionDestinationArgs | undefined;
            if ((!args || args.appBundleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appBundleArn'");
            }
            if ((!args || args.ingestionArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingestionArn'");
            }
            resourceInputs["appBundleArn"] = args ? args.appBundleArn : undefined;
            resourceInputs["destinationConfiguration"] = args ? args.destinationConfiguration : undefined;
            resourceInputs["ingestionArn"] = args ? args.ingestionArn : undefined;
            resourceInputs["processingConfiguration"] = args ? args.processingConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IngestionDestination.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IngestionDestination resources.
 */
export interface IngestionDestinationState {
    /**
     * The Amazon Resource Name (ARN) of the app bundle to use for the request.
     */
    appBundleArn?: pulumi.Input<string>;
    /**
     * ARN of the Ingestion Destination.
     */
    arn?: pulumi.Input<string>;
    /**
     * Contains information about the destination of ingested data.
     */
    destinationConfiguration?: pulumi.Input<inputs.appfabric.IngestionDestinationDestinationConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the ingestion to use for the request.
     */
    ingestionArn?: pulumi.Input<string>;
    /**
     * Contains information about how ingested data is processed.
     */
    processingConfiguration?: pulumi.Input<inputs.appfabric.IngestionDestinationProcessingConfiguration>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.appfabric.IngestionDestinationTimeouts>;
}

/**
 * The set of arguments for constructing a IngestionDestination resource.
 */
export interface IngestionDestinationArgs {
    /**
     * The Amazon Resource Name (ARN) of the app bundle to use for the request.
     */
    appBundleArn: pulumi.Input<string>;
    /**
     * Contains information about the destination of ingested data.
     */
    destinationConfiguration?: pulumi.Input<inputs.appfabric.IngestionDestinationDestinationConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the ingestion to use for the request.
     */
    ingestionArn: pulumi.Input<string>;
    /**
     * Contains information about how ingested data is processed.
     */
    processingConfiguration?: pulumi.Input<inputs.appfabric.IngestionDestinationProcessingConfiguration>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.appfabric.IngestionDestinationTimeouts>;
}
