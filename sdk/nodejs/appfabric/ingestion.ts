// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS AppFabric Ingestion.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appfabric.Ingestion("example", {
 *     app: "OKTA",
 *     appBundleArn: exampleAwsAppfabricAppBundle.arn,
 *     tenantId: "example.okta.com",
 *     ingestionType: "auditLog",
 *     tags: {
 *         Environment: "test",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import AppFabric Ingestion using the `app_bundle_identifier` and `arn` separated by `,`. For example:
 *
 * ```sh
 * $ pulumi import aws:appfabric/ingestion:Ingestion example arn:aws:appfabric:[region]:[account]:appbundle/a9b91477-8831-43c0-970c-xxxxxxxxxx,arn:aws:appfabric:[region]:[account]:appbundle/a9b91477-8831-43c0-970c-xxxxxxxxxx/ingestion/32251416-710b-4425-96ca-xxxxxxxxxx
 * ```
 */
export class Ingestion extends pulumi.CustomResource {
    /**
     * Get an existing Ingestion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IngestionState, opts?: pulumi.CustomResourceOptions): Ingestion {
        return new Ingestion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appfabric/ingestion:Ingestion';

    /**
     * Returns true if the given object is an instance of Ingestion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ingestion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ingestion.__pulumiType;
    }

    /**
     * Name of the application.
     * Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
     */
    public readonly app!: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the app bundle to use for the request.
     */
    public readonly appBundleArn!: pulumi.Output<string>;
    /**
     * ARN of the Ingestion.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Ingestion type. Valid values are `auditLog`.
     */
    public readonly ingestionType!: pulumi.Output<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * ID of the application tenant.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a Ingestion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IngestionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IngestionArgs | IngestionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IngestionState | undefined;
            resourceInputs["app"] = state ? state.app : undefined;
            resourceInputs["appBundleArn"] = state ? state.appBundleArn : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["ingestionType"] = state ? state.ingestionType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as IngestionArgs | undefined;
            if ((!args || args.app === undefined) && !opts.urn) {
                throw new Error("Missing required property 'app'");
            }
            if ((!args || args.appBundleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appBundleArn'");
            }
            if ((!args || args.ingestionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingestionType'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["app"] = args ? args.app : undefined;
            resourceInputs["appBundleArn"] = args ? args.appBundleArn : undefined;
            resourceInputs["ingestionType"] = args ? args.ingestionType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ingestion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ingestion resources.
 */
export interface IngestionState {
    /**
     * Name of the application.
     * Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
     */
    app?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the app bundle to use for the request.
     */
    appBundleArn?: pulumi.Input<string>;
    /**
     * ARN of the Ingestion.
     */
    arn?: pulumi.Input<string>;
    /**
     * Ingestion type. Valid values are `auditLog`.
     */
    ingestionType?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the application tenant.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ingestion resource.
 */
export interface IngestionArgs {
    /**
     * Name of the application.
     * Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
     */
    app: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the app bundle to use for the request.
     */
    appBundleArn: pulumi.Input<string>;
    /**
     * Ingestion type. Valid values are `auditLog`.
     */
    ingestionType: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the application tenant.
     */
    tenantId: pulumi.Input<string>;
}
