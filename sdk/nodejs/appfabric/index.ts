// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppAuthorizationArgs, AppAuthorizationState } from "./appAuthorization";
export type AppAuthorization = import("./appAuthorization").AppAuthorization;
export const AppAuthorization: typeof import("./appAuthorization").AppAuthorization = null as any;
utilities.lazyLoad(exports, ["AppAuthorization"], () => require("./appAuthorization"));

export { AppAuthorizationConnectionArgs, AppAuthorizationConnectionState } from "./appAuthorizationConnection";
export type AppAuthorizationConnection = import("./appAuthorizationConnection").AppAuthorizationConnection;
export const AppAuthorizationConnection: typeof import("./appAuthorizationConnection").AppAuthorizationConnection = null as any;
utilities.lazyLoad(exports, ["AppAuthorizationConnection"], () => require("./appAuthorizationConnection"));

export { AppBundleArgs, AppBundleState } from "./appBundle";
export type AppBundle = import("./appBundle").AppBundle;
export const AppBundle: typeof import("./appBundle").AppBundle = null as any;
utilities.lazyLoad(exports, ["AppBundle"], () => require("./appBundle"));

export { IngestionArgs, IngestionState } from "./ingestion";
export type Ingestion = import("./ingestion").Ingestion;
export const Ingestion: typeof import("./ingestion").Ingestion = null as any;
utilities.lazyLoad(exports, ["Ingestion"], () => require("./ingestion"));

export { IngestionDestinationArgs, IngestionDestinationState } from "./ingestionDestination";
export type IngestionDestination = import("./ingestionDestination").IngestionDestination;
export const IngestionDestination: typeof import("./ingestionDestination").IngestionDestination = null as any;
utilities.lazyLoad(exports, ["IngestionDestination"], () => require("./ingestionDestination"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:appfabric/appAuthorization:AppAuthorization":
                return new AppAuthorization(name, <any>undefined, { urn })
            case "aws:appfabric/appAuthorizationConnection:AppAuthorizationConnection":
                return new AppAuthorizationConnection(name, <any>undefined, { urn })
            case "aws:appfabric/appBundle:AppBundle":
                return new AppBundle(name, <any>undefined, { urn })
            case "aws:appfabric/ingestion:Ingestion":
                return new Ingestion(name, <any>undefined, { urn })
            case "aws:appfabric/ingestionDestination:IngestionDestination":
                return new IngestionDestination(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "appfabric/appAuthorization", _module)
pulumi.runtime.registerResourceModule("aws", "appfabric/appAuthorizationConnection", _module)
pulumi.runtime.registerResourceModule("aws", "appfabric/appBundle", _module)
pulumi.runtime.registerResourceModule("aws", "appfabric/ingestion", _module)
pulumi.runtime.registerResourceModule("aws", "appfabric/ingestionDestination", _module)
