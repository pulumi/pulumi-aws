// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a DAX Cluster resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bar = new aws.dax.Cluster("bar", {
 *     clusterName: "cluster-example",
 *     iamRoleArn: example.arn,
 *     nodeType: "dax.r4.large",
 *     replicationFactor: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import DAX Clusters using the `cluster_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:dax/cluster:Cluster my_cluster my_cluster
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:dax/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The ARN of the DAX cluster
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * List of Availability Zones in which the
     * nodes will be created
     */
    declare public readonly availabilityZones: pulumi.Output<string[] | undefined>;
    /**
     * The DNS name of the DAX cluster without the port appended
     */
    declare public /*out*/ readonly clusterAddress: pulumi.Output<string>;
    /**
     * The type of encryption the
     * cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
     * Default value is `NONE`.
     */
    declare public readonly clusterEndpointEncryptionType: pulumi.Output<string | undefined>;
    /**
     * Group identifier. DAX converts this name to
     * lowercase
     */
    declare public readonly clusterName: pulumi.Output<string>;
    /**
     * The configuration endpoint for this DAX cluster,
     * consisting of a DNS name and a port number
     */
    declare public /*out*/ readonly configurationEndpoint: pulumi.Output<string>;
    /**
     * Description for the cluster
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A valid Amazon Resource Name (ARN) that identifies
     * an IAM role. At runtime, DAX will assume this role and use the role's
     * permissions to access DynamoDB on your behalf
     */
    declare public readonly iamRoleArn: pulumi.Output<string>;
    /**
     * Specifies the weekly time range for when
     * maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
     * (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
     * `sun:05:00-sun:09:00`
     */
    declare public readonly maintenanceWindow: pulumi.Output<string>;
    /**
     * The compute and memory capacity of the nodes. See
     * [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
     */
    declare public readonly nodeType: pulumi.Output<string>;
    /**
     * List of node objects including `id`, `address`, `port` and
     * `availabilityZone`. Referenceable e.g., as
     * `${aws_dax_cluster.test.nodes.0.address}`
     */
    declare public /*out*/ readonly nodes: pulumi.Output<outputs.dax.ClusterNode[]>;
    /**
     * An Amazon Resource Name (ARN) of an
     * SNS topic to send DAX notifications to. Example:
     * `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     */
    declare public readonly notificationTopicArn: pulumi.Output<string | undefined>;
    /**
     * Name of the parameter group to associate
     * with this DAX cluster
     */
    declare public readonly parameterGroupName: pulumi.Output<string>;
    /**
     * The port used by the configuration endpoint
     */
    declare public /*out*/ readonly port: pulumi.Output<number>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The number of nodes in the DAX cluster. A
     * replication factor of 1 will create a single-node cluster, without any read
     * replicas
     */
    declare public readonly replicationFactor: pulumi.Output<number>;
    /**
     * One or more VPC security groups associated
     * with the cluster
     */
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    /**
     * Encrypt at rest options
     */
    declare public readonly serverSideEncryption: pulumi.Output<outputs.dax.ClusterServerSideEncryption | undefined>;
    /**
     * Name of the subnet group to be used for the
     * cluster
     */
    declare public readonly subnetGroupName: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["availabilityZones"] = state?.availabilityZones;
            resourceInputs["clusterAddress"] = state?.clusterAddress;
            resourceInputs["clusterEndpointEncryptionType"] = state?.clusterEndpointEncryptionType;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["configurationEndpoint"] = state?.configurationEndpoint;
            resourceInputs["description"] = state?.description;
            resourceInputs["iamRoleArn"] = state?.iamRoleArn;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["nodeType"] = state?.nodeType;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["notificationTopicArn"] = state?.notificationTopicArn;
            resourceInputs["parameterGroupName"] = state?.parameterGroupName;
            resourceInputs["port"] = state?.port;
            resourceInputs["region"] = state?.region;
            resourceInputs["replicationFactor"] = state?.replicationFactor;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["serverSideEncryption"] = state?.serverSideEncryption;
            resourceInputs["subnetGroupName"] = state?.subnetGroupName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.clusterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (args?.iamRoleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if (args?.nodeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            if (args?.replicationFactor === undefined && !opts.urn) {
                throw new Error("Missing required property 'replicationFactor'");
            }
            resourceInputs["availabilityZones"] = args?.availabilityZones;
            resourceInputs["clusterEndpointEncryptionType"] = args?.clusterEndpointEncryptionType;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["description"] = args?.description;
            resourceInputs["iamRoleArn"] = args?.iamRoleArn;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["nodeType"] = args?.nodeType;
            resourceInputs["notificationTopicArn"] = args?.notificationTopicArn;
            resourceInputs["parameterGroupName"] = args?.parameterGroupName;
            resourceInputs["region"] = args?.region;
            resourceInputs["replicationFactor"] = args?.replicationFactor;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["serverSideEncryption"] = args?.serverSideEncryption;
            resourceInputs["subnetGroupName"] = args?.subnetGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterAddress"] = undefined /*out*/;
            resourceInputs["configurationEndpoint"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The ARN of the DAX cluster
     */
    arn?: pulumi.Input<string>;
    /**
     * List of Availability Zones in which the
     * nodes will be created
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DNS name of the DAX cluster without the port appended
     */
    clusterAddress?: pulumi.Input<string>;
    /**
     * The type of encryption the
     * cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
     * Default value is `NONE`.
     */
    clusterEndpointEncryptionType?: pulumi.Input<string>;
    /**
     * Group identifier. DAX converts this name to
     * lowercase
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The configuration endpoint for this DAX cluster,
     * consisting of a DNS name and a port number
     */
    configurationEndpoint?: pulumi.Input<string>;
    /**
     * Description for the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * A valid Amazon Resource Name (ARN) that identifies
     * an IAM role. At runtime, DAX will assume this role and use the role's
     * permissions to access DynamoDB on your behalf
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Specifies the weekly time range for when
     * maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
     * (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
     * `sun:05:00-sun:09:00`
     */
    maintenanceWindow?: pulumi.Input<string>;
    /**
     * The compute and memory capacity of the nodes. See
     * [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
     */
    nodeType?: pulumi.Input<string>;
    /**
     * List of node objects including `id`, `address`, `port` and
     * `availabilityZone`. Referenceable e.g., as
     * `${aws_dax_cluster.test.nodes.0.address}`
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.dax.ClusterNode>[]>;
    /**
     * An Amazon Resource Name (ARN) of an
     * SNS topic to send DAX notifications to. Example:
     * `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     */
    notificationTopicArn?: pulumi.Input<string>;
    /**
     * Name of the parameter group to associate
     * with this DAX cluster
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The port used by the configuration endpoint
     */
    port?: pulumi.Input<number>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The number of nodes in the DAX cluster. A
     * replication factor of 1 will create a single-node cluster, without any read
     * replicas
     */
    replicationFactor?: pulumi.Input<number>;
    /**
     * One or more VPC security groups associated
     * with the cluster
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Encrypt at rest options
     */
    serverSideEncryption?: pulumi.Input<inputs.dax.ClusterServerSideEncryption>;
    /**
     * Name of the subnet group to be used for the
     * cluster
     */
    subnetGroupName?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * List of Availability Zones in which the
     * nodes will be created
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of encryption the
     * cluster's endpoint should support. Valid values are: `NONE` and `TLS`.
     * Default value is `NONE`.
     */
    clusterEndpointEncryptionType?: pulumi.Input<string>;
    /**
     * Group identifier. DAX converts this name to
     * lowercase
     */
    clusterName: pulumi.Input<string>;
    /**
     * Description for the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * A valid Amazon Resource Name (ARN) that identifies
     * an IAM role. At runtime, DAX will assume this role and use the role's
     * permissions to access DynamoDB on your behalf
     */
    iamRoleArn: pulumi.Input<string>;
    /**
     * Specifies the weekly time range for when
     * maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
     * (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
     * `sun:05:00-sun:09:00`
     */
    maintenanceWindow?: pulumi.Input<string>;
    /**
     * The compute and memory capacity of the nodes. See
     * [Nodes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.concepts.cluster.html#DAX.concepts.nodes) for supported node types
     */
    nodeType: pulumi.Input<string>;
    /**
     * An Amazon Resource Name (ARN) of an
     * SNS topic to send DAX notifications to. Example:
     * `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     */
    notificationTopicArn?: pulumi.Input<string>;
    /**
     * Name of the parameter group to associate
     * with this DAX cluster
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The number of nodes in the DAX cluster. A
     * replication factor of 1 will create a single-node cluster, without any read
     * replicas
     */
    replicationFactor: pulumi.Input<number>;
    /**
     * One or more VPC security groups associated
     * with the cluster
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Encrypt at rest options
     */
    serverSideEncryption?: pulumi.Input<inputs.dax.ClusterServerSideEncryption>;
    /**
     * Name of the subnet group to be used for the
     * cluster
     */
    subnetGroupName?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
