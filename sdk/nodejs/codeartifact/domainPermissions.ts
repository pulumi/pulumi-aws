// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CodeArtifact Domains Permissions Policy Resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleKey = new aws.kms.Key("exampleKey", {description: "domain key"});
 * const exampleDomain = new aws.codeartifact.Domain("exampleDomain", {
 *     domain: "example.com",
 *     encryptionKey: exampleKey.arn,
 * });
 * const test = new aws.codeartifact.DomainPermissions("test", {
 *     domain: exampleDomain.domain,
 *     policyDocument: pulumi.interpolate`{
 *     "Version": "2012-10-17",
 *     "Statement": [
 *         {
 *             "Action": "codeartifact:CreateRepository",
 *             "Effect": "Allow",
 *             "Principal": "*",
 *             "Resource": "${exampleDomain.arn}"
 *         }
 *     ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * CodeArtifact Domain Permissions Policies can be imported using the CodeArtifact Domain ARN, e.g.
 *
 * ```sh
 *  $ pulumi import aws:codeartifact/domainPermissions:DomainPermissions example arn:aws:codeartifact:us-west-2:012345678912:domain/tf-acc-test-1928056699409417367
 * ```
 */
export class DomainPermissions extends pulumi.CustomResource {
    /**
     * Get an existing DomainPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainPermissionsState, opts?: pulumi.CustomResourceOptions): DomainPermissions {
        return new DomainPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:codeartifact/domainPermissions:DomainPermissions';

    /**
     * Returns true if the given object is an instance of DomainPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainPermissions.__pulumiType;
    }

    /**
     * The name of the domain on which to set the resource policy.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The account number of the AWS account that owns the domain.
     */
    public readonly domainOwner!: pulumi.Output<string>;
    /**
     * A JSON policy string to be set as the access control resource policy on the provided domain.
     */
    public readonly policyDocument!: pulumi.Output<string>;
    /**
     * The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
     */
    public readonly policyRevision!: pulumi.Output<string>;
    /**
     * The ARN of the resource associated with the resource policy.
     */
    public /*out*/ readonly resourceArn!: pulumi.Output<string>;

    /**
     * Create a DomainPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainPermissionsArgs | DomainPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DomainPermissionsState | undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["domainOwner"] = state ? state.domainOwner : undefined;
            inputs["policyDocument"] = state ? state.policyDocument : undefined;
            inputs["policyRevision"] = state ? state.policyRevision : undefined;
            inputs["resourceArn"] = state ? state.resourceArn : undefined;
        } else {
            const args = argsOrState as DomainPermissionsArgs | undefined;
            if ((!args || args.domain === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.policyDocument === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'policyDocument'");
            }
            inputs["domain"] = args ? args.domain : undefined;
            inputs["domainOwner"] = args ? args.domainOwner : undefined;
            inputs["policyDocument"] = args ? args.policyDocument : undefined;
            inputs["policyRevision"] = args ? args.policyRevision : undefined;
            inputs["resourceArn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DomainPermissions.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainPermissions resources.
 */
export interface DomainPermissionsState {
    /**
     * The name of the domain on which to set the resource policy.
     */
    readonly domain?: pulumi.Input<string>;
    /**
     * The account number of the AWS account that owns the domain.
     */
    readonly domainOwner?: pulumi.Input<string>;
    /**
     * A JSON policy string to be set as the access control resource policy on the provided domain.
     */
    readonly policyDocument?: pulumi.Input<string>;
    /**
     * The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
     */
    readonly policyRevision?: pulumi.Input<string>;
    /**
     * The ARN of the resource associated with the resource policy.
     */
    readonly resourceArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DomainPermissions resource.
 */
export interface DomainPermissionsArgs {
    /**
     * The name of the domain on which to set the resource policy.
     */
    readonly domain: pulumi.Input<string>;
    /**
     * The account number of the AWS account that owns the domain.
     */
    readonly domainOwner?: pulumi.Input<string>;
    /**
     * A JSON policy string to be set as the access control resource policy on the provided domain.
     */
    readonly policyDocument: pulumi.Input<string>;
    /**
     * The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.
     */
    readonly policyRevision?: pulumi.Input<string>;
}
