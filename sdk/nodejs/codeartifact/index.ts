// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;

export { DomainPermissionsArgs, DomainPermissionsState } from "./domainPermissions";
export type DomainPermissions = import("./domainPermissions").DomainPermissions;
export const DomainPermissions: typeof import("./domainPermissions").DomainPermissions = null as any;

export { GetAuthorizationTokenArgs, GetAuthorizationTokenResult, GetAuthorizationTokenOutputArgs } from "./getAuthorizationToken";
export const getAuthorizationToken: typeof import("./getAuthorizationToken").getAuthorizationToken = null as any;
export const getAuthorizationTokenOutput: typeof import("./getAuthorizationToken").getAuthorizationTokenOutput = null as any;

export { GetRepositoryEndpointArgs, GetRepositoryEndpointResult, GetRepositoryEndpointOutputArgs } from "./getRepositoryEndpoint";
export const getRepositoryEndpoint: typeof import("./getRepositoryEndpoint").getRepositoryEndpoint = null as any;
export const getRepositoryEndpointOutput: typeof import("./getRepositoryEndpoint").getRepositoryEndpointOutput = null as any;

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;

export { RepositoryPermissionsPolicyArgs, RepositoryPermissionsPolicyState } from "./repositoryPermissionsPolicy";
export type RepositoryPermissionsPolicy = import("./repositoryPermissionsPolicy").RepositoryPermissionsPolicy;
export const RepositoryPermissionsPolicy: typeof import("./repositoryPermissionsPolicy").RepositoryPermissionsPolicy = null as any;

utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));
utilities.lazyLoad(exports, ["DomainPermissions"], () => require("./domainPermissions"));
utilities.lazyLoad(exports, ["getAuthorizationToken","getAuthorizationTokenOutput"], () => require("./getAuthorizationToken"));
utilities.lazyLoad(exports, ["getRepositoryEndpoint","getRepositoryEndpointOutput"], () => require("./getRepositoryEndpoint"));
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));
utilities.lazyLoad(exports, ["RepositoryPermissionsPolicy"], () => require("./repositoryPermissionsPolicy"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:codeartifact/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "aws:codeartifact/domainPermissions:DomainPermissions":
                return new DomainPermissions(name, <any>undefined, { urn })
            case "aws:codeartifact/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "aws:codeartifact/repositoryPermissionsPolicy:RepositoryPermissionsPolicy":
                return new RepositoryPermissionsPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "codeartifact/domain", _module)
pulumi.runtime.registerResourceModule("aws", "codeartifact/domainPermissions", _module)
pulumi.runtime.registerResourceModule("aws", "codeartifact/repository", _module)
pulumi.runtime.registerResourceModule("aws", "codeartifact/repositoryPermissionsPolicy", _module)
