// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages an AWS DocDB (DocumentDB) Elastic Cluster.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import DocDB (DocumentDB) Elastic Cluster using the `arn` argument. For example,
 *
 * ```sh
 *  $ pulumi import aws:docdb/elasticCluster:ElasticCluster example arn:aws:docdb-elastic:us-east-1:000011112222:cluster/12345678-7abc-def0-1234-56789abcdef
 * ```
 */
export class ElasticCluster extends pulumi.CustomResource {
    /**
     * Get an existing ElasticCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticClusterState, opts?: pulumi.CustomResourceOptions): ElasticCluster {
        return new ElasticCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:docdb/elasticCluster:ElasticCluster';

    /**
     * Returns true if the given object is an instance of ElasticCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticCluster.__pulumiType;
    }

    /**
     * Name of the Elastic DocumentDB cluster administrator
     */
    public readonly adminUserName!: pulumi.Output<string>;
    /**
     * Password for the Elastic DocumentDB cluster administrator. Can contain any printable ASCII characters. Must be at least 8 characters
     */
    public readonly adminUserPassword!: pulumi.Output<string>;
    /**
     * ARN of the DocumentDB Elastic Cluster
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Authentication type for the Elastic DocumentDB cluster. Valid values are `PLAIN_TEXT` and `SECRET_ARN`
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * The DNS address of the DocDB instance
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * ARN of a KMS key that is used to encrypt the Elastic DocumentDB cluster. If not specified, the default encryption key that KMS creates for your account is used.
     */
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * Name of the Elastic DocumentDB cluster
     */
    public readonly name!: pulumi.Output<string>;
    public readonly preferredMaintenanceWindow!: pulumi.Output<string>;
    /**
     * Number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64
     */
    public readonly shardCapacity!: pulumi.Output<number>;
    /**
     * Number of shards assigned to the elastic cluster. Maximum is 32
     *
     * The following arguments are optional:
     */
    public readonly shardCount!: pulumi.Output<number>;
    /**
     * IDs of subnets in which the Elastic DocumentDB Cluster operates.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.docdb.ElasticClusterTimeouts | undefined>;
    /**
     * List of VPC security groups to associate with the Elastic DocumentDB Cluster
     */
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a ElasticCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticClusterArgs | ElasticClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticClusterState | undefined;
            resourceInputs["adminUserName"] = state ? state.adminUserName : undefined;
            resourceInputs["adminUserPassword"] = state ? state.adminUserPassword : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            resourceInputs["shardCapacity"] = state ? state.shardCapacity : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as ElasticClusterArgs | undefined;
            if ((!args || args.adminUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUserName'");
            }
            if ((!args || args.adminUserPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUserPassword'");
            }
            if ((!args || args.authType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            if ((!args || args.shardCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardCapacity'");
            }
            if ((!args || args.shardCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardCount'");
            }
            resourceInputs["adminUserName"] = args ? args.adminUserName : undefined;
            resourceInputs["adminUserPassword"] = args?.adminUserPassword ? pulumi.secret(args.adminUserPassword) : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            resourceInputs["shardCapacity"] = args ? args.shardCapacity : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminUserPassword", "tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ElasticCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElasticCluster resources.
 */
export interface ElasticClusterState {
    /**
     * Name of the Elastic DocumentDB cluster administrator
     */
    adminUserName?: pulumi.Input<string>;
    /**
     * Password for the Elastic DocumentDB cluster administrator. Can contain any printable ASCII characters. Must be at least 8 characters
     */
    adminUserPassword?: pulumi.Input<string>;
    /**
     * ARN of the DocumentDB Elastic Cluster
     */
    arn?: pulumi.Input<string>;
    /**
     * Authentication type for the Elastic DocumentDB cluster. Valid values are `PLAIN_TEXT` and `SECRET_ARN`
     */
    authType?: pulumi.Input<string>;
    /**
     * The DNS address of the DocDB instance
     */
    endpoint?: pulumi.Input<string>;
    /**
     * ARN of a KMS key that is used to encrypt the Elastic DocumentDB cluster. If not specified, the default encryption key that KMS creates for your account is used.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Name of the Elastic DocumentDB cluster
     */
    name?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    /**
     * Number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64
     */
    shardCapacity?: pulumi.Input<number>;
    /**
     * Number of shards assigned to the elastic cluster. Maximum is 32
     *
     * The following arguments are optional:
     */
    shardCount?: pulumi.Input<number>;
    /**
     * IDs of subnets in which the Elastic DocumentDB Cluster operates.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.docdb.ElasticClusterTimeouts>;
    /**
     * List of VPC security groups to associate with the Elastic DocumentDB Cluster
     */
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ElasticCluster resource.
 */
export interface ElasticClusterArgs {
    /**
     * Name of the Elastic DocumentDB cluster administrator
     */
    adminUserName: pulumi.Input<string>;
    /**
     * Password for the Elastic DocumentDB cluster administrator. Can contain any printable ASCII characters. Must be at least 8 characters
     */
    adminUserPassword: pulumi.Input<string>;
    /**
     * Authentication type for the Elastic DocumentDB cluster. Valid values are `PLAIN_TEXT` and `SECRET_ARN`
     */
    authType: pulumi.Input<string>;
    /**
     * ARN of a KMS key that is used to encrypt the Elastic DocumentDB cluster. If not specified, the default encryption key that KMS creates for your account is used.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Name of the Elastic DocumentDB cluster
     */
    name?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    /**
     * Number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64
     */
    shardCapacity: pulumi.Input<number>;
    /**
     * Number of shards assigned to the elastic cluster. Maximum is 32
     *
     * The following arguments are optional:
     */
    shardCount: pulumi.Input<number>;
    /**
     * IDs of subnets in which the Elastic DocumentDB Cluster operates.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.docdb.ElasticClusterTimeouts>;
    /**
     * List of VPC security groups to associate with the Elastic DocumentDB Cluster
     */
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
