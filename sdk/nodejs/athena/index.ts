// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DataCatalogArgs, DataCatalogState } from "./dataCatalog";
export type DataCatalog = import("./dataCatalog").DataCatalog;
export const DataCatalog: typeof import("./dataCatalog").DataCatalog = null as any;
utilities.lazyLoad(exports, ["DataCatalog"], () => require("./dataCatalog"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { GetNamedQueryArgs, GetNamedQueryResult, GetNamedQueryOutputArgs } from "./getNamedQuery";
export const getNamedQuery: typeof import("./getNamedQuery").getNamedQuery = null as any;
export const getNamedQueryOutput: typeof import("./getNamedQuery").getNamedQueryOutput = null as any;
utilities.lazyLoad(exports, ["getNamedQuery","getNamedQueryOutput"], () => require("./getNamedQuery"));

export { NamedQueryArgs, NamedQueryState } from "./namedQuery";
export type NamedQuery = import("./namedQuery").NamedQuery;
export const NamedQuery: typeof import("./namedQuery").NamedQuery = null as any;
utilities.lazyLoad(exports, ["NamedQuery"], () => require("./namedQuery"));

export { PreparedStatementArgs, PreparedStatementState } from "./preparedStatement";
export type PreparedStatement = import("./preparedStatement").PreparedStatement;
export const PreparedStatement: typeof import("./preparedStatement").PreparedStatement = null as any;
utilities.lazyLoad(exports, ["PreparedStatement"], () => require("./preparedStatement"));

export { WorkgroupArgs, WorkgroupState } from "./workgroup";
export type Workgroup = import("./workgroup").Workgroup;
export const Workgroup: typeof import("./workgroup").Workgroup = null as any;
utilities.lazyLoad(exports, ["Workgroup"], () => require("./workgroup"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:athena/dataCatalog:DataCatalog":
                return new DataCatalog(name, <any>undefined, { urn })
            case "aws:athena/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "aws:athena/namedQuery:NamedQuery":
                return new NamedQuery(name, <any>undefined, { urn })
            case "aws:athena/preparedStatement:PreparedStatement":
                return new PreparedStatement(name, <any>undefined, { urn })
            case "aws:athena/workgroup:Workgroup":
                return new Workgroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "athena/dataCatalog", _module)
pulumi.runtime.registerResourceModule("aws", "athena/database", _module)
pulumi.runtime.registerResourceModule("aws", "athena/namedQuery", _module)
pulumi.runtime.registerResourceModule("aws", "athena/preparedStatement", _module)
pulumi.runtime.registerResourceModule("aws", "athena/workgroup", _module)
