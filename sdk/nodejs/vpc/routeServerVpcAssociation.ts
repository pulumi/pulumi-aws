// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a resource for managing association between VPC (Virtual Private Cloud) route server and a VPC.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.vpc.RouteServerVpcAssociation("example", {
 *     routeServerId: exampleAwsVpcRouteServer.routeServerId,
 *     vpcId: exampleAwsVpc.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, to  to import VPC (Virtual Private Cloud) Route Server Association using the associated resource ID and VPC Id separated by a comma (,). For example:
 *
 * ```sh
 * $ pulumi import aws:vpc/routeServerVpcAssociation:RouteServerVpcAssociation example rs-12345678,vpc-0f001273ec18911b1
 * ```
 */
export class RouteServerVpcAssociation extends pulumi.CustomResource {
    /**
     * Get an existing RouteServerVpcAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteServerVpcAssociationState, opts?: pulumi.CustomResourceOptions): RouteServerVpcAssociation {
        return new RouteServerVpcAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:vpc/routeServerVpcAssociation:RouteServerVpcAssociation';

    /**
     * Returns true if the given object is an instance of RouteServerVpcAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteServerVpcAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteServerVpcAssociation.__pulumiType;
    }

    /**
     * The unique identifier for the route server to be associated.
     */
    public readonly routeServerId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.vpc.RouteServerVpcAssociationTimeouts | undefined>;
    /**
     * The ID of the VPC to associate with the route server.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a RouteServerVpcAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteServerVpcAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteServerVpcAssociationArgs | RouteServerVpcAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteServerVpcAssociationState | undefined;
            resourceInputs["routeServerId"] = state ? state.routeServerId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as RouteServerVpcAssociationArgs | undefined;
            if ((!args || args.routeServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeServerId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["routeServerId"] = args ? args.routeServerId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteServerVpcAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteServerVpcAssociation resources.
 */
export interface RouteServerVpcAssociationState {
    /**
     * The unique identifier for the route server to be associated.
     */
    routeServerId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.vpc.RouteServerVpcAssociationTimeouts>;
    /**
     * The ID of the VPC to associate with the route server.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteServerVpcAssociation resource.
 */
export interface RouteServerVpcAssociationArgs {
    /**
     * The unique identifier for the route server to be associated.
     */
    routeServerId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.vpc.RouteServerVpcAssociationTimeouts>;
    /**
     * The ID of the VPC to associate with the route server.
     */
    vpcId: pulumi.Input<string>;
}
