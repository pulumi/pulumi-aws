// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an inbound (ingress) rule for a security group.
 *
 * When specifying an inbound rule for your security group in a VPC, the configuration must include a source for the traffic.
 *
 * > **NOTE on Security Groups and Security Group Rules:** this provider currently provides a Security Group resource with `ingress` and `egress` rules defined in-line and a Security Group Rule resource which manages one or more `ingress` or
 * `egress` rules. Both of these resource were added before AWS assigned a [security group rule unique ID](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules.html), and they do not work well in all scenarios using the`description` and `tags` attributes, which rely on the unique ID.
 * The `aws.vpc.SecurityGroupIngressRule` resource has been added to address these limitations and should be used for all new security group rules.
 * You should not use the `aws.vpc.SecurityGroupIngressRule` resource in conjunction with an `aws.ec2.SecurityGroup` resource with in-line rules or with `aws.ec2.SecurityGroupRule` resources defined for the same Security Group, as rule conflicts may occur and rules will be overwritten.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.vpc.SecurityGroupIngressRule("example", {
 *     securityGroupId: aws_security_group.example.id,
 *     cidrIpv4: "10.0.0.0/8",
 *     fromPort: 80,
 *     ipProtocol: "tcp",
 *     toPort: 80,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import security group ingress rules using the `security_group_rule_id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:vpc/securityGroupIngressRule:SecurityGroupIngressRule example sgr-02108b27edd666983
 * ```
 */
export class SecurityGroupIngressRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroupIngressRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGroupIngressRuleState, opts?: pulumi.CustomResourceOptions): SecurityGroupIngressRule {
        return new SecurityGroupIngressRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:vpc/securityGroupIngressRule:SecurityGroupIngressRule';

    /**
     * Returns true if the given object is an instance of SecurityGroupIngressRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroupIngressRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroupIngressRule.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the security group rule.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The source IPv4 CIDR range.
     */
    public readonly cidrIpv4!: pulumi.Output<string | undefined>;
    /**
     * The source IPv6 CIDR range.
     */
    public readonly cidrIpv6!: pulumi.Output<string | undefined>;
    /**
     * The security group rule description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
     */
    public readonly fromPort!: pulumi.Output<number | undefined>;
    /**
     * The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
     */
    public readonly ipProtocol!: pulumi.Output<string>;
    /**
     * The ID of the source prefix list.
     */
    public readonly prefixListId!: pulumi.Output<string | undefined>;
    /**
     * The source security group that is referenced in the rule.
     */
    public readonly referencedSecurityGroupId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the security group.
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    /**
     * The ID of the security group rule.
     */
    public /*out*/ readonly securityGroupRuleId!: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
     */
    public readonly toPort!: pulumi.Output<number | undefined>;

    /**
     * Create a SecurityGroupIngressRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGroupIngressRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGroupIngressRuleArgs | SecurityGroupIngressRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGroupIngressRuleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cidrIpv4"] = state ? state.cidrIpv4 : undefined;
            resourceInputs["cidrIpv6"] = state ? state.cidrIpv6 : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fromPort"] = state ? state.fromPort : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["prefixListId"] = state ? state.prefixListId : undefined;
            resourceInputs["referencedSecurityGroupId"] = state ? state.referencedSecurityGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["securityGroupRuleId"] = state ? state.securityGroupRuleId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["toPort"] = state ? state.toPort : undefined;
        } else {
            const args = argsOrState as SecurityGroupIngressRuleArgs | undefined;
            if ((!args || args.ipProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipProtocol'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["cidrIpv4"] = args ? args.cidrIpv4 : undefined;
            resourceInputs["cidrIpv6"] = args ? args.cidrIpv6 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fromPort"] = args ? args.fromPort : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["prefixListId"] = args ? args.prefixListId : undefined;
            resourceInputs["referencedSecurityGroupId"] = args ? args.referencedSecurityGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toPort"] = args ? args.toPort : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["securityGroupRuleId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecurityGroupIngressRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityGroupIngressRule resources.
 */
export interface SecurityGroupIngressRuleState {
    /**
     * The Amazon Resource Name (ARN) of the security group rule.
     */
    arn?: pulumi.Input<string>;
    /**
     * The source IPv4 CIDR range.
     */
    cidrIpv4?: pulumi.Input<string>;
    /**
     * The source IPv6 CIDR range.
     */
    cidrIpv6?: pulumi.Input<string>;
    /**
     * The security group rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
     */
    fromPort?: pulumi.Input<number>;
    /**
     * The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * The ID of the source prefix list.
     */
    prefixListId?: pulumi.Input<string>;
    /**
     * The source security group that is referenced in the rule.
     */
    referencedSecurityGroupId?: pulumi.Input<string>;
    /**
     * The ID of the security group.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The ID of the security group rule.
     */
    securityGroupRuleId?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
     */
    toPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SecurityGroupIngressRule resource.
 */
export interface SecurityGroupIngressRuleArgs {
    /**
     * The source IPv4 CIDR range.
     */
    cidrIpv4?: pulumi.Input<string>;
    /**
     * The source IPv6 CIDR range.
     */
    cidrIpv6?: pulumi.Input<string>;
    /**
     * The security group rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
     */
    fromPort?: pulumi.Input<number>;
    /**
     * The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
     */
    ipProtocol: pulumi.Input<string>;
    /**
     * The ID of the source prefix list.
     */
    prefixListId?: pulumi.Input<string>;
    /**
     * The source security group that is referenced in the rule.
     */
    referencedSecurityGroupId?: pulumi.Input<string>;
    /**
     * The ID of the security group.
     */
    securityGroupId: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
     */
    toPort?: pulumi.Input<number>;
}
