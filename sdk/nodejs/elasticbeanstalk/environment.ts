// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import {Application, ApplicationVersion} from "./index";

/**
 * Provides an Elastic Beanstalk Environment Resource. Elastic Beanstalk allows
 * you to deploy and manage applications in the AWS cloud without worrying about
 * the infrastructure that runs those applications.
 *
 * Environments are often things such as `development`, `integration`, or
 * `production`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const tftest = new aws.elasticbeanstalk.Application("tftest", {
 *     name: "tf-test-name",
 *     description: "tf-test-desc",
 * });
 * const tfenvtest = new aws.elasticbeanstalk.Environment("tfenvtest", {
 *     name: "tf-test-name",
 *     application: tftest.name,
 *     solutionStackName: "64bit Amazon Linux 2015.03 v2.0.3 running Go 1.4",
 * });
 * ```
 *
 * ## Option Settings
 *
 * Some options can be stack-specific, check [AWS Docs](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html)
 * for supported options and examples.
 *
 * The `setting` and `allSettings` mappings support the following format:
 *
 * * `namespace` - unique namespace identifying the option's associated AWS resource
 * * `name` - name of the configuration option
 * * `value` - value for the configuration option
 * * `resource` - (Optional) resource name for [scheduled action](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html#command-options-general-autoscalingscheduledaction)
 *
 * ### Example With Options
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const tftest = new aws.elasticbeanstalk.Application("tftest", {
 *     name: "tf-test-name",
 *     description: "tf-test-desc",
 * });
 * const tfenvtest = new aws.elasticbeanstalk.Environment("tfenvtest", {
 *     name: "tf-test-name",
 *     application: tftest.name,
 *     solutionStackName: "64bit Amazon Linux 2015.03 v2.0.3 running Go 1.4",
 *     settings: [
 *         {
 *             namespace: "aws:ec2:vpc",
 *             name: "VPCId",
 *             value: "vpc-xxxxxxxx",
 *         },
 *         {
 *             namespace: "aws:ec2:vpc",
 *             name: "Subnets",
 *             value: "subnet-xxxxxxxx",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Elastic Beanstalk Environments using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:elasticbeanstalk/environment:Environment prodenv e-rpqsewtp2j
 * ```
 */
export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentState, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticbeanstalk/environment:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    /**
     * List of all option settings configured in this Environment. These
     * are a combination of default settings and their overrides from `setting` in
     * the configuration.
     */
    declare public /*out*/ readonly allSettings: pulumi.Output<outputs.elasticbeanstalk.EnvironmentAllSetting[]>;
    /**
     * Name of the application that contains the version
     * to be deployed
     */
    declare public readonly application: pulumi.Output<string>;
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The autoscaling groups used by this Environment.
     */
    declare public /*out*/ readonly autoscalingGroups: pulumi.Output<string[]>;
    /**
     * Fully qualified DNS name for this Environment.
     */
    declare public /*out*/ readonly cname: pulumi.Output<string>;
    /**
     * Prefix to use for the fully qualified DNS name of
     * the Environment.
     */
    declare public readonly cnamePrefix: pulumi.Output<string>;
    /**
     * Short description of the Environment
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The URL to the Load Balancer for this Environment
     */
    declare public /*out*/ readonly endpointUrl: pulumi.Output<string>;
    /**
     * Instances used by this Environment.
     */
    declare public /*out*/ readonly instances: pulumi.Output<string[]>;
    /**
     * Launch configurations in use by this Environment.
     */
    declare public /*out*/ readonly launchConfigurations: pulumi.Output<string[]>;
    /**
     * Elastic load balancers in use by this Environment.
     */
    declare public /*out*/ readonly loadBalancers: pulumi.Output<string[]>;
    /**
     * A unique name for this Environment. This name is used
     * in the application URL
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the Elastic Beanstalk [Platform](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html#cfn-beanstalk-environment-platformarn)
     * to use in deployment
     */
    declare public readonly platformArn: pulumi.Output<string>;
    /**
     * The time between polling the AWS API to
     * check if changes have been applied. Use this to adjust the rate of API calls
     * for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
     * use the default behavior, which is an exponential backoff
     */
    declare public readonly pollInterval: pulumi.Output<string | undefined>;
    /**
     * SQS queues in use by this Environment.
     */
    declare public /*out*/ readonly queues: pulumi.Output<string[]>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Option settings to configure the new Environment. These
     * override specific values that are set as defaults. The format is detailed
     * below in Option Settings
     */
    declare public readonly settings: pulumi.Output<outputs.elasticbeanstalk.EnvironmentSetting[] | undefined>;
    /**
     * A solution stack to base your environment
     * off of. Example stacks can be found in the [Amazon API documentation](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)
     */
    declare public readonly solutionStackName: pulumi.Output<string>;
    /**
     * A set of tags to apply to the Environment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the Elastic Beanstalk Configuration
     * template to use in deployment
     */
    declare public readonly templateName: pulumi.Output<string | undefined>;
    /**
     * Elastic Beanstalk Environment tier. Valid values are `Worker`
     * or `WebServer`. If tier is left blank `WebServer` will be used.
     */
    declare public readonly tier: pulumi.Output<string | undefined>;
    /**
     * Autoscaling triggers in use by this Environment.
     */
    declare public /*out*/ readonly triggers: pulumi.Output<string[]>;
    /**
     * The name of the Elastic Beanstalk Application Version
     * to use in deployment.
     */
    declare public readonly version: pulumi.Output<string>;
    /**
     * The maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for an Elastic Beanstalk Environment to be in a ready state before timing
     * out.
     */
    declare public readonly waitForReadyTimeout: pulumi.Output<string | undefined>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentArgs | EnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentState | undefined;
            resourceInputs["allSettings"] = state?.allSettings;
            resourceInputs["application"] = state?.application;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["autoscalingGroups"] = state?.autoscalingGroups;
            resourceInputs["cname"] = state?.cname;
            resourceInputs["cnamePrefix"] = state?.cnamePrefix;
            resourceInputs["description"] = state?.description;
            resourceInputs["endpointUrl"] = state?.endpointUrl;
            resourceInputs["instances"] = state?.instances;
            resourceInputs["launchConfigurations"] = state?.launchConfigurations;
            resourceInputs["loadBalancers"] = state?.loadBalancers;
            resourceInputs["name"] = state?.name;
            resourceInputs["platformArn"] = state?.platformArn;
            resourceInputs["pollInterval"] = state?.pollInterval;
            resourceInputs["queues"] = state?.queues;
            resourceInputs["region"] = state?.region;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["solutionStackName"] = state?.solutionStackName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["templateName"] = state?.templateName;
            resourceInputs["tier"] = state?.tier;
            resourceInputs["triggers"] = state?.triggers;
            resourceInputs["version"] = state?.version;
            resourceInputs["waitForReadyTimeout"] = state?.waitForReadyTimeout;
        } else {
            const args = argsOrState as EnvironmentArgs | undefined;
            if (args?.application === undefined && !opts.urn) {
                throw new Error("Missing required property 'application'");
            }
            resourceInputs["application"] = args?.application;
            resourceInputs["cnamePrefix"] = args?.cnamePrefix;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["platformArn"] = args?.platformArn;
            resourceInputs["pollInterval"] = args?.pollInterval;
            resourceInputs["region"] = args?.region;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["solutionStackName"] = args?.solutionStackName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateName"] = args?.templateName;
            resourceInputs["tier"] = args?.tier;
            resourceInputs["version"] = args?.version;
            resourceInputs["waitForReadyTimeout"] = args?.waitForReadyTimeout;
            resourceInputs["allSettings"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["autoscalingGroups"] = undefined /*out*/;
            resourceInputs["cname"] = undefined /*out*/;
            resourceInputs["endpointUrl"] = undefined /*out*/;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["launchConfigurations"] = undefined /*out*/;
            resourceInputs["loadBalancers"] = undefined /*out*/;
            resourceInputs["queues"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Environment resources.
 */
export interface EnvironmentState {
    /**
     * List of all option settings configured in this Environment. These
     * are a combination of default settings and their overrides from `setting` in
     * the configuration.
     */
    allSettings?: pulumi.Input<pulumi.Input<inputs.elasticbeanstalk.EnvironmentAllSetting>[]>;
    /**
     * Name of the application that contains the version
     * to be deployed
     */
    application?: pulumi.Input<string | Application>;
    arn?: pulumi.Input<string>;
    /**
     * The autoscaling groups used by this Environment.
     */
    autoscalingGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fully qualified DNS name for this Environment.
     */
    cname?: pulumi.Input<string>;
    /**
     * Prefix to use for the fully qualified DNS name of
     * the Environment.
     */
    cnamePrefix?: pulumi.Input<string>;
    /**
     * Short description of the Environment
     */
    description?: pulumi.Input<string>;
    /**
     * The URL to the Load Balancer for this Environment
     */
    endpointUrl?: pulumi.Input<string>;
    /**
     * Instances used by this Environment.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Launch configurations in use by this Environment.
     */
    launchConfigurations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Elastic load balancers in use by this Environment.
     */
    loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A unique name for this Environment. This name is used
     * in the application URL
     */
    name?: pulumi.Input<string>;
    /**
     * The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the Elastic Beanstalk [Platform](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html#cfn-beanstalk-environment-platformarn)
     * to use in deployment
     */
    platformArn?: pulumi.Input<string>;
    /**
     * The time between polling the AWS API to
     * check if changes have been applied. Use this to adjust the rate of API calls
     * for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
     * use the default behavior, which is an exponential backoff
     */
    pollInterval?: pulumi.Input<string>;
    /**
     * SQS queues in use by this Environment.
     */
    queues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Option settings to configure the new Environment. These
     * override specific values that are set as defaults. The format is detailed
     * below in Option Settings
     */
    settings?: pulumi.Input<pulumi.Input<inputs.elasticbeanstalk.EnvironmentSetting>[]>;
    /**
     * A solution stack to base your environment
     * off of. Example stacks can be found in the [Amazon API documentation](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)
     */
    solutionStackName?: pulumi.Input<string>;
    /**
     * A set of tags to apply to the Environment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Elastic Beanstalk Configuration
     * template to use in deployment
     */
    templateName?: pulumi.Input<string>;
    /**
     * Elastic Beanstalk Environment tier. Valid values are `Worker`
     * or `WebServer`. If tier is left blank `WebServer` will be used.
     */
    tier?: pulumi.Input<string>;
    /**
     * Autoscaling triggers in use by this Environment.
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Elastic Beanstalk Application Version
     * to use in deployment.
     */
    version?: pulumi.Input<string | ApplicationVersion>;
    /**
     * The maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for an Elastic Beanstalk Environment to be in a ready state before timing
     * out.
     */
    waitForReadyTimeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    /**
     * Name of the application that contains the version
     * to be deployed
     */
    application: pulumi.Input<string | Application>;
    /**
     * Prefix to use for the fully qualified DNS name of
     * the Environment.
     */
    cnamePrefix?: pulumi.Input<string>;
    /**
     * Short description of the Environment
     */
    description?: pulumi.Input<string>;
    /**
     * A unique name for this Environment. This name is used
     * in the application URL
     */
    name?: pulumi.Input<string>;
    /**
     * The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the Elastic Beanstalk [Platform](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html#cfn-beanstalk-environment-platformarn)
     * to use in deployment
     */
    platformArn?: pulumi.Input<string>;
    /**
     * The time between polling the AWS API to
     * check if changes have been applied. Use this to adjust the rate of API calls
     * for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
     * use the default behavior, which is an exponential backoff
     */
    pollInterval?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Option settings to configure the new Environment. These
     * override specific values that are set as defaults. The format is detailed
     * below in Option Settings
     */
    settings?: pulumi.Input<pulumi.Input<inputs.elasticbeanstalk.EnvironmentSetting>[]>;
    /**
     * A solution stack to base your environment
     * off of. Example stacks can be found in the [Amazon API documentation](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)
     */
    solutionStackName?: pulumi.Input<string>;
    /**
     * A set of tags to apply to the Environment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Elastic Beanstalk Configuration
     * template to use in deployment
     */
    templateName?: pulumi.Input<string>;
    /**
     * Elastic Beanstalk Environment tier. Valid values are `Worker`
     * or `WebServer`. If tier is left blank `WebServer` will be used.
     */
    tier?: pulumi.Input<string>;
    /**
     * The name of the Elastic Beanstalk Application Version
     * to use in deployment.
     */
    version?: pulumi.Input<string | ApplicationVersion>;
    /**
     * The maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for an Elastic Beanstalk Environment to be in a ready state before timing
     * out.
     */
    waitForReadyTimeout?: pulumi.Input<string>;
}
