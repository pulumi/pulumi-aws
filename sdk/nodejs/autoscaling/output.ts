// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";
import * as enums from "./enums";

export interface GroupInitialLifecycleHook {
    defaultResult: string;
    heartbeatTimeout?: number;
    lifecycleTransition: string;
    /**
     * Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
     */
    name: string;
    notificationMetadata?: string;
    notificationTargetArn?: string;
    roleArn?: string;
}
export interface GroupInstanceMaintenancePolicy {
    /**
     * Specifies the upper limit on the number of instances that are in the InService or Pending state with a healthy status during an instance replacement activity.
     */
    maxHealthyPercentage: number;
    /**
     * Specifies the lower limit on the number of instances that must be in the InService state with a healthy status during an instance replacement activity.
     */
    minHealthyPercentage: number;
}
export interface GroupInstanceRefresh {
    /**
     * Override default parameters for Instance Refresh.
     */
    preferences?: outputs.GroupInstanceRefreshPreferences;
    /**
     * Strategy to use for instance refresh. The only allowed value is `Rolling`. See [StartInstanceRefresh Action](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_StartInstanceRefresh.html#API_StartInstanceRefresh_RequestParameters) for more information.
     */
    strategy: string;
    /**
     * Set of additional property names that will trigger an Instance Refresh. A refresh will always be triggered by a change in any of `launchConfiguration`, `launchTemplate`, or `mixedInstancesPolicy`.
     *
     * > **NOTE:** A refresh is started when any of the following Auto Scaling Group properties change: `launchConfiguration`, `launchTemplate`, `mixedInstancesPolicy`. Additional properties can be specified in the `triggers` property of `instanceRefresh`.
     *
     * > **NOTE:** A refresh will not start when `version = "$Latest"` is configured in the `launchTemplate` block. To trigger the instance refresh when a launch template is changed, configure `version` to use the `latestVersion` attribute of the `aws.ec2.LaunchTemplate` resource.
     *
     * > **NOTE:** Auto Scaling Groups support up to one active instance refresh at a time. When this resource is updated, any existing refresh is cancelled.
     *
     * > **NOTE:** Depending on health check settings and group size, an instance refresh may take a long time or fail. This resource does not wait for the instance refresh to complete.
     */
    triggers?: string[];
}
export interface GroupInstanceRefreshPreferences {
    /**
     * Alarm Specification for Instance Refresh.
     */
    alarmSpecification?: outputs.GroupInstanceRefreshPreferencesAlarmSpecification;
    /**
     * Automatically rollback if instance refresh fails. Defaults to `false`. This option may only be set to `true` when specifying a `launchTemplate` or `mixedInstancesPolicy`.
     */
    autoRollback?: boolean;
    /**
     * Number of seconds to wait after a checkpoint. Defaults to `3600`.
     */
    checkpointDelay?: string;
    /**
     * List of percentages for each checkpoint. Values must be unique and in ascending order. To replace all instances, the final number must be `100`.
     */
    checkpointPercentages?: number[];
    /**
     * Number of seconds until a newly launched instance is configured and ready to use. Default behavior is to use the Auto Scaling Group's health check grace period.
     */
    instanceWarmup?: string;
    /**
     * Amount of capacity in the Auto Scaling group that can be in service and healthy, or pending, to support your workload when an instance refresh is in place, as a percentage of the desired capacity of the Auto Scaling group. Values must be between `100` and `200`, defaults to `100`.
     */
    maxHealthyPercentage?: number;
    /**
     * Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to `90`.
     */
    minHealthyPercentage?: number;
    /**
     * Behavior when encountering instances protected from scale in are found. Available behaviors are `Refresh`, `Ignore`, and `Wait`. Default is `Ignore`.
     */
    scaleInProtectedInstances?: string;
    /**
     * Replace instances that already have your desired configuration. Defaults to `false`.
     */
    skipMatching?: boolean;
    /**
     * Behavior when encountering instances in the `Standby` state in are found. Available behaviors are `Terminate`, `Ignore`, and `Wait`. Default is `Ignore`.
     */
    standbyInstances?: string;
}
export interface GroupInstanceRefreshPreferencesAlarmSpecification {
    alarms?: string[];
}
export interface GroupLaunchTemplate {
    /**
     * ID of the launch template. Conflicts with `name`.
     */
    id: string;
    /**
     * Name of the launch template. Conflicts with `id`.
     */
    name: string;
    /**
     * Template version. Can be version number, `$Latest`, or `$Default`. (Default: `$Default`).
     */
    version: string;
}
export interface GroupMixedInstancesPolicy {
    /**
     * Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
     */
    instancesDistribution: outputs.GroupMixedInstancesPolicyInstancesDistribution;
    /**
     * Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
     */
    launchTemplate: outputs.GroupMixedInstancesPolicyLaunchTemplate;
}
export interface GroupMixedInstancesPolicyInstancesDistribution {
    onDemandAllocationStrategy: string;
    onDemandBaseCapacity: number;
    onDemandPercentageAboveBaseCapacity: number;
    spotAllocationStrategy: string;
    spotInstancePools: number;
    spotMaxPrice?: string;
}
export interface GroupMixedInstancesPolicyLaunchTemplate {
    launchTemplateSpecification: outputs.GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification;
    overrides: outputs.GroupMixedInstancesPolicyLaunchTemplateOverride[];
}
export interface GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification {
    launchTemplateId: string;
    launchTemplateName: string;
    version: string;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverride {
    instanceRequirements?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirements;
    instanceType?: string;
    launchTemplateSpecification?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification;
    weightedCapacity?: string;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirements {
    acceleratorCount?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorCount;
    acceleratorManufacturers?: string[];
    acceleratorNames?: string[];
    acceleratorTotalMemoryMib?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorTotalMemoryMib;
    acceleratorTypes?: string[];
    allowedInstanceTypes?: string[];
    bareMetal?: string;
    baselineEbsBandwidthMbps?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsBaselineEbsBandwidthMbps;
    burstablePerformance?: string;
    cpuManufacturers?: string[];
    excludedInstanceTypes?: string[];
    instanceGenerations?: string[];
    localStorage?: string;
    localStorageTypes?: string[];
    memoryGibPerVcpu?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryGibPerVcpu;
    memoryMib?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMib;
    networkBandwidthGbps?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkBandwidthGbps;
    networkInterfaceCount?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkInterfaceCount;
    onDemandMaxPricePercentageOverLowestPrice?: number;
    requireHibernateSupport?: boolean;
    spotMaxPricePercentageOverLowestPrice?: number;
    totalLocalStorageGb?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsTotalLocalStorageGb;
    vcpuCount?: outputs.GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCount;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorCount {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorTotalMemoryMib {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsBaselineEbsBandwidthMbps {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryGibPerVcpu {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMib {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkBandwidthGbps {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkInterfaceCount {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsTotalLocalStorageGb {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCount {
    max?: number;
    min?: number;
}
export interface GroupMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification {
    launchTemplateId: string;
    launchTemplateName: string;
    version: string;
}
export interface GroupTag {
    /**
     * Key
     */
    key: string;
    /**
     * Enables propagation of the tag to
     * Amazon EC2 instances launched via this ASG
     *
     * To declare multiple tags, additional `tag` blocks can be specified.
     *
     * > **NOTE:** Other AWS APIs may automatically add special tags to their associated Auto Scaling Group for management purposes, such as ECS Capacity Providers adding the `AmazonECSManaged` tag. These generally should be included in the configuration so the provider does not attempt to remove them and so if the `minSize` was greater than zero on creation, that these tag(s) are applied to any initial EC2 Instances in the Auto Scaling Group. If these tag(s) were missing in the Auto Scaling Group configuration on creation, affected EC2 Instances missing the tags may require manual intervention of adding the tags to ensure they work properly with the other AWS service.
     */
    propagateAtLaunch: boolean;
    /**
     * Value
     */
    value: string;
}
export interface GroupTrafficSource {
    /**
     * Identifies the traffic source. For Application Load Balancers, Gateway Load Balancers, Network Load Balancers, and VPC Lattice, this will be the Amazon Resource Name (ARN) for a target group in this account and Region. For Classic Load Balancers, this will be the name of the Classic Load Balancer in this account and Region.
     */
    identifier: string;
    /**
     * Provides additional context for the value of Identifier.
     * The following lists the valid values:
     * `elb` if `identifier` is the name of a Classic Load Balancer.
     * `elbv2` if `identifier` is the ARN of an Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target group.
     * `vpc-lattice` if `identifier` is the ARN of a VPC Lattice target group.
     */
    type?: string;
}
export interface GroupWarmPool {
    /**
     * Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
     */
    instanceReusePolicy?: outputs.GroupWarmPoolInstanceReusePolicy;
    /**
     * Total maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
     */
    maxGroupPreparedCapacity?: number;
    /**
     * Minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
     */
    minSize?: number;
    /**
     * Sets the instance state to transition to after the lifecycle hooks finish. Valid values are: Stopped (default), Running or Hibernated.
     */
    poolState?: string;
}
export interface GroupWarmPoolInstanceReusePolicy {
    /**
     * Whether instances in the Auto Scaling group can be returned to the warm pool on scale in.
     */
    reuseOnScaleIn?: boolean;
}
export interface PolicyPredictiveScalingConfiguration {
    /**
     * Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are `HonorMaxCapacity` or `IncreaseMaxCapacity`. Default is `HonorMaxCapacity`.
     */
    maxCapacityBreachBehavior?: string;
    /**
     * Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is `0` to `100`. If set to `0`, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
     */
    maxCapacityBuffer?: string;
    /**
     * This structure includes the metrics and target utilization to use for predictive scaling.
     */
    metricSpecification: outputs.PolicyPredictiveScalingConfigurationMetricSpecification;
    /**
     * Predictive scaling mode. Valid values are `ForecastAndScale` and `ForecastOnly`. Default is `ForecastOnly`.
     */
    mode?: string;
    /**
     * Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is `0`.
     */
    schedulingBufferTime?: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecification {
    /**
     * Customized capacity metric specification. The field is only valid when you use `customizedLoadMetricSpecification`
     */
    customizedCapacityMetricSpecification?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification;
    /**
     * Customized load metric specification.
     */
    customizedLoadMetricSpecification?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification;
    /**
     * Customized scaling metric specification.
     */
    customizedScalingMetricSpecification?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification;
    /**
     * Predefined load metric specification.
     */
    predefinedLoadMetricSpecification?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification;
    /**
     * Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
     */
    predefinedMetricPairSpecification?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification;
    /**
     * Predefined scaling metric specification.
     */
    predefinedScalingMetricSpecification?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification;
    /**
     * Target value for the metric.
     */
    targetValue: number;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification {
    /**
     * List of up to 10 structures that defines custom capacity metric in predictive scaling policy
     */
    metricDataQueries: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQuery[];
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQuery {
    /**
     * Math expression used on the returned metric. You must specify either `expression` or `metricStat`, but not both.
     */
    expression?: string;
    /**
     * Short name for the metric used in predictive scaling policy.
     */
    id: string;
    /**
     * Human-readable label for this metric or expression.
     */
    label?: string;
    /**
     * Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either `expression` or `metricStat`, but not both.
     */
    metricStat?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueryMetricStat;
    /**
     * Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
     */
    returnData?: boolean;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueryMetricStat {
    /**
     * Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
     */
    metric: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueryMetricStatMetric;
    /**
     * Statistic of the metrics to return.
     */
    stat: string;
    /**
     * Unit of the metrics to return.
     */
    unit?: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueryMetricStatMetric {
    /**
     * Dimensions of the metric.
     */
    dimensions?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueryMetricStatMetricDimension[];
    /**
     * Name of the metric.
     */
    metricName: string;
    /**
     * Namespace of the metric.
     */
    namespace: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueryMetricStatMetricDimension {
    /**
     * Name of the dimension.
     */
    name: string;
    /**
     * Value of the dimension.
     */
    value: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification {
    /**
     * List of up to 10 structures that defines custom load metric in predictive scaling policy
     */
    metricDataQueries: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQuery[];
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQuery {
    /**
     * Math expression used on the returned metric. You must specify either `expression` or `metricStat`, but not both.
     */
    expression?: string;
    /**
     * Short name for the metric used in predictive scaling policy.
     */
    id: string;
    /**
     * Human-readable label for this metric or expression.
     */
    label?: string;
    /**
     * Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either `expression` or `metricStat`, but not both.
     */
    metricStat?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueryMetricStat;
    /**
     * Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
     */
    returnData?: boolean;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueryMetricStat {
    /**
     * Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
     */
    metric: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueryMetricStatMetric;
    /**
     * Statistic of the metrics to return.
     */
    stat: string;
    /**
     * Unit of the metrics to return.
     */
    unit?: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueryMetricStatMetric {
    /**
     * Dimensions of the metric.
     */
    dimensions?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueryMetricStatMetricDimension[];
    /**
     * Name of the metric.
     */
    metricName: string;
    /**
     * Namespace of the metric.
     */
    namespace: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueryMetricStatMetricDimension {
    /**
     * Name of the dimension.
     */
    name: string;
    /**
     * Value of the dimension.
     */
    value: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification {
    /**
     * List of up to 10 structures that defines custom scaling metric in predictive scaling policy
     */
    metricDataQueries: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQuery[];
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQuery {
    /**
     * Math expression used on the returned metric. You must specify either `expression` or `metricStat`, but not both.
     */
    expression?: string;
    /**
     * Short name for the metric used in predictive scaling policy.
     */
    id: string;
    /**
     * Human-readable label for this metric or expression.
     */
    label?: string;
    /**
     * Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either `expression` or `metricStat`, but not both.
     */
    metricStat?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStat;
    /**
     * Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
     */
    returnData?: boolean;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStat {
    /**
     * Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
     */
    metric: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStatMetric;
    /**
     * Statistic of the metrics to return.
     */
    stat: string;
    /**
     * Unit of the metrics to return.
     */
    unit?: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStatMetric {
    /**
     * Dimensions of the metric.
     */
    dimensions?: outputs.PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStatMetricDimension[];
    /**
     * Name of the metric.
     */
    metricName: string;
    /**
     * Namespace of the metric.
     */
    namespace: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueryMetricStatMetricDimension {
    /**
     * Name of the dimension.
     */
    name: string;
    /**
     * Value of the dimension.
     */
    value: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification {
    /**
     * Metric type. Valid values are `ASGTotalCPUUtilization`, `ASGTotalNetworkIn`, `ASGTotalNetworkOut`, or `ALBTargetGroupRequestCount`.
     */
    predefinedMetricType: string;
    /**
     * Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). Refer to [PredefinedMetricSpecification](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredefinedMetricSpecification.html) for more information.
     */
    resourceLabel?: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification {
    /**
     * Which metrics to use. There are two different types of metrics for each metric type: one is a load metric and one is a scaling metric. For example, if the metric type is `ASGCPUUtilization`, the Auto Scaling group's total CPU metric is used as the load metric, and the average CPU metric is used for the scaling metric. Valid values are `ASGCPUUtilization`, `ASGNetworkIn`, `ASGNetworkOut`, or `ALBRequestCount`.
     */
    predefinedMetricType: string;
    /**
     * Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). Refer to [PredefinedMetricSpecification](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredefinedMetricSpecification.html) for more information.
     */
    resourceLabel?: string;
}
export interface PolicyPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification {
    /**
     * Describes a scaling metric for a predictive scaling policy. Valid values are `ASGAverageCPUUtilization`, `ASGAverageNetworkIn`, `ASGAverageNetworkOut`, or `ALBRequestCountPerTarget`.
     */
    predefinedMetricType: string;
    /**
     * Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). Refer to [PredefinedMetricSpecification](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredefinedMetricSpecification.html) for more information.
     */
    resourceLabel?: string;
}
export interface PolicyStepAdjustment {
    /**
     * Lower bound for the
     * difference between the alarm threshold and the CloudWatch metric.
     * Without a value, AWS will treat this bound as negative infinity.
     */
    metricIntervalLowerBound?: string;
    /**
     * Upper bound for the
     * difference between the alarm threshold and the CloudWatch metric.
     * Without a value, AWS will treat this bound as positive infinity. The upper bound
     * must be greater than the lower bound.
     *
     * Notice the bounds are **relative** to the alarm threshold, meaning that the starting point is not 0%, but the alarm threshold. Check the official [docs](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps) for a detailed example.
     *
     * The following arguments are only available to "TargetTrackingScaling" type policies:
     */
    metricIntervalUpperBound?: string;
    /**
     * Number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     */
    scalingAdjustment: number;
}
export interface PolicyTargetTrackingConfiguration {
    /**
     * Customized metric. Conflicts with `predefinedMetricSpecification`.
     */
    customizedMetricSpecification?: outputs.PolicyTargetTrackingConfigurationCustomizedMetricSpecification;
    /**
     * Whether scale in by the target tracking policy is disabled.
     */
    disableScaleIn?: boolean;
    /**
     * Predefined metric. Conflicts with `customizedMetricSpecification`.
     */
    predefinedMetricSpecification?: outputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecification;
    /**
     * Target value for the metric.
     */
    targetValue: number;
}
export interface PolicyTargetTrackingConfigurationCustomizedMetricSpecification {
    /**
     * Dimensions of the metric.
     */
    metricDimensions?: outputs.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension[];
    /**
     * Name of the metric.
     */
    metricName?: string;
    /**
     * Metrics to include, as a metric data query.
     */
    metrics?: outputs.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetric[];
    /**
     * Namespace of the metric.
     */
    namespace?: string;
    /**
     * Statistic of the metric.
     */
    statistic?: string;
    /**
     * Unit of the metric.
     */
    unit?: string;
}
export interface PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetric {
    /**
     * Math expression used on the returned metric. You must specify either `expression` or `metricStat`, but not both.
     */
    expression?: string;
    /**
     * Short name for the metric used in target tracking scaling policy.
     */
    id: string;
    /**
     * Human-readable label for this metric or expression.
     */
    label?: string;
    /**
     * Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either `expression` or `metricStat`, but not both.
     */
    metricStat?: outputs.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStat;
    /**
     * Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
     */
    returnData?: boolean;
}
export interface PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension {
    /**
     * Name of the dimension.
     */
    name: string;
    /**
     * Value of the dimension.
     */
    value: string;
}
export interface PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStat {
    /**
     * Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
     */
    metric: outputs.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetric;
    /**
     * Statistic of the metrics to return.
     */
    stat: string;
    /**
     * Unit of the metrics to return.
     */
    unit?: string;
}
export interface PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetric {
    /**
     * Dimensions of the metric.
     */
    dimensions?: outputs.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetricDimension[];
    /**
     * Name of the metric.
     */
    metricName: string;
    /**
     * Namespace of the metric.
     */
    namespace: string;
}
export interface PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricMetricStatMetricDimension {
    /**
     * Name of the dimension.
     */
    name: string;
    /**
     * Value of the dimension.
     */
    value: string;
}
export interface PolicyTargetTrackingConfigurationPredefinedMetricSpecification {
    /**
     * Metric type.
     */
    predefinedMetricType: string;
    /**
     * Identifies the resource associated with the metric type.
     */
    resourceLabel?: string;
}
export interface TagTag {
    /**
     * Tag name.
     */
    key: string;
    /**
     * Whether to propagate the tags to instances launched by the ASG.
     */
    propagateAtLaunch: boolean;
    /**
     * Tag value.
     */
    value: string;
}
export interface TrafficSourceAttachmentTrafficSource {
    /**
     * Identifies the traffic source. For Application Load Balancers, Gateway Load Balancers, Network Load Balancers, and VPC Lattice, this will be the Amazon Resource Name (ARN) for a target group in this account and Region. For Classic Load Balancers, this will be the name of the Classic Load Balancer in this account and Region.
     */
    identifier: string;
    /**
     * Provides additional context for the value of `identifier`.
     * The following lists the valid values:
     * `elb` if `identifier` is the name of a Classic Load Balancer.
     * `elbv2` if `identifier` is the ARN of an Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target group.
     * `vpc-lattice` if `identifier` is the ARN of a VPC Lattice target group.
     */
    type: string;
}
export interface GetGroupInstanceMaintenancePolicy {
    /**
     * Specifies the upper limit on the number of instances that are in the InService or Pending state with a healthy status during an instance replacement activity.
     */
    maxHealthyPercentage: number;
    /**
     * Specifies the lower limit on the number of instances that must be in the InService state with a healthy status during an instance replacement activity.
     */
    minHealthyPercentage: number;
}
export interface GetGroupLaunchTemplate {
    /**
     * ID of the launch template.
     */
    id: string;
    /**
     * Specify the exact name of the desired autoscaling group.
     */
    name: string;
    /**
     * Template version.
     */
    version: string;
}
export interface GetGroupMixedInstancesPolicy {
    /**
     * List of instances distribution objects.
     */
    instancesDistributions: outputs.GetGroupMixedInstancesPolicyInstancesDistribution[];
    /**
     * List of launch templates along with the overrides.
     */
    launchTemplates: outputs.GetGroupMixedInstancesPolicyLaunchTemplate[];
}
export interface GetGroupMixedInstancesPolicyInstancesDistribution {
    /**
     * Strategy used when launching on-demand instances.
     */
    onDemandAllocationStrategy: string;
    /**
     * Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances.
     */
    onDemandBaseCapacity: number;
    onDemandPercentageAboveBaseCapacity: number;
    /**
     * Strategy used when launching Spot instances.
     */
    spotAllocationStrategy: string;
    /**
     * Number of Spot pools per availability zone to allocate capacity.
     */
    spotInstancePools: number;
    /**
     * Maximum price per unit hour that the user is willing to pay for the Spot instances.
     */
    spotMaxPrice: string;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplate {
    /**
     * List of overriding launch template specification objects.
     */
    launchTemplateSpecifications: outputs.GetGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification[];
    /**
     * List of properties overriding the same properties in the launch template.
     */
    overrides: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverride[];
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification {
    /**
     * ID of the launch template.
     */
    launchTemplateId: string;
    /**
     * Name of the launch template.
     */
    launchTemplateName: string;
    /**
     * Template version.
     */
    version: string;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverride {
    /**
     * List of instance requirements objects.
     * * `acceleratorCount - List of objects describing the minimum and maximum number of accelerators for an instance type.
     */
    instanceRequirements: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirement[];
    /**
     * Overriding instance type.
     */
    instanceType: string;
    /**
     * List of overriding launch template specification objects.
     */
    launchTemplateSpecifications: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification[];
    /**
     * Number of capacity units, which gives the instance type a proportional weight to other instance types.
     */
    weightedCapacity: string;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirement {
    acceleratorCounts: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementAcceleratorCount[];
    /**
     * List of accelerator manufacturer names.
     */
    acceleratorManufacturers: string[];
    /**
     * List of accelerator names.
     */
    acceleratorNames: string[];
    /**
     * List of objects describing the minimum and maximum total memory of the accelerators.
     */
    acceleratorTotalMemoryMibs: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementAcceleratorTotalMemoryMib[];
    /**
     * List of accelerator types.
     */
    acceleratorTypes: string[];
    /**
     * List of instance types to apply the specified attributes against.
     */
    allowedInstanceTypes: string[];
    /**
     * Indicates whether bare metal instances are included, excluded, or required.
     */
    bareMetal: string;
    /**
     * List of objects describing the minimum and maximum baseline EBS bandwidth (Mbps).
     */
    baselineEbsBandwidthMbps: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementBaselineEbsBandwidthMbp[];
    /**
     * Indicates whether burstable performance instance types are included, excluded, or required.
     */
    burstablePerformance: string;
    /**
     * List of CPU manufacturer names.
     */
    cpuManufacturers: string[];
    /**
     * List of excluded instance types.
     */
    excludedInstanceTypes: string[];
    /**
     * List of instance generation names.
     */
    instanceGenerations: string[];
    /**
     * Indicates whether instance types with instance store volumes are included, excluded, or required.
     */
    localStorage: string;
    /**
     * List of local storage type names.
     */
    localStorageTypes: string[];
    /**
     * List of objects describing the minimum and maximum amount of memory (GiB) per vCPU.
     */
    memoryGibPerVcpus: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementMemoryGibPerVcpus[];
    /**
     * List of objects describing the minimum and maximum amount of memory (MiB).
     */
    memoryMibs: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementMemoryMib[];
    /**
     * List of objects describing the minimum and maximum amount of network bandwidth (Gbps).
     */
    networkBandwidthGbps: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementNetworkBandwidthGbp[];
    /**
     * List of objects describing the minimum and maximum amount of network interfaces.
     */
    networkInterfaceCounts: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementNetworkInterfaceCount[];
    /**
     * Price protection threshold for On-Demand Instances.
     */
    onDemandMaxPricePercentageOverLowestPrice: number;
    /**
     * Indicates whether instance types must support On-Demand Instance Hibernation.
     */
    requireHibernateSupport: boolean;
    /**
     * Price protection threshold for Spot Instances.
     */
    spotMaxPricePercentageOverLowestPrice: number;
    /**
     * List of objects describing the minimum and maximum total storage (GB).
     */
    totalLocalStorageGbs: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementTotalLocalStorageGb[];
    /**
     * List of objects describing the minimum and maximum number of vCPUs.
     */
    vcpuCounts: outputs.GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementVcpuCount[];
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementAcceleratorCount {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementAcceleratorTotalMemoryMib {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementBaselineEbsBandwidthMbp {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementMemoryGibPerVcpus {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementMemoryMib {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementNetworkBandwidthGbp {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementNetworkInterfaceCount {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementTotalLocalStorageGb {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementVcpuCount {
    /**
     * Maximum.
     */
    max: number;
    /**
     * Minimum.
     */
    min: number;
}
export interface GetGroupMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification {
    /**
     * ID of the launch template.
     */
    launchTemplateId: string;
    /**
     * Name of the launch template.
     */
    launchTemplateName: string;
    /**
     * Template version.
     */
    version: string;
}
export interface GetGroupTag {
    /**
     * Key.
     */
    key: string;
    /**
     * Whether the tag is propagated to Amazon EC2 instances launched via this ASG.
     */
    propagateAtLaunch: boolean;
    /**
     * Value.
     */
    value: string;
}
export interface GetGroupTrafficSource {
    /**
     * Identifies the traffic source. For Application Load Balancers, Gateway Load Balancers, Network Load Balancers, and VPC Lattice, this will be the Amazon Resource Name (ARN) for a target group in this account and Region. For Classic Load Balancers, this will be the name of the Classic Load Balancer in this account and Region.
     */
    identifier: string;
    /**
     * Traffic source type.
     */
    type: string;
}
export interface GetGroupWarmPool {
    /**
     * List of instance reuse policy objects.
     */
    instanceReusePolicies: outputs.GetGroupWarmPoolInstanceReusePolicy[];
    maxGroupPreparedCapacity: number;
    /**
     * Minimum number of instances to maintain in the warm pool.
     */
    minSize: number;
    /**
     * Instance state to transition to after the lifecycle actions are complete.
     */
    poolState: string;
}
export interface GetGroupWarmPoolInstanceReusePolicy {
    /**
     * Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in.
     */
    reuseOnScaleIn: boolean;
}
