// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

import {LaunchConfiguration, PlacementGroup} from "../ec2";
import {Metric} from "./index";

/**
 * Provides an Auto Scaling Group resource.
 *
 * > **Note:** You must specify either `launchConfiguration`, `launchTemplate`, or `mixedInstancesPolicy`.
 *
 * > **NOTE on Auto Scaling Groups and ASG Attachments:** This provider currently provides
 * both a standalone `aws.autoscaling.Attachment` resource
 * (describing an ASG attached to an ELB or ALB), and an `aws.autoscaling.Group`
 * with `loadBalancers` and `targetGroupArns` defined in-line. These two methods are not
 * mutually-exclusive. If `aws.autoscaling.Attachment` resources are used, either alone or with inline
 * `loadBalancers` or `targetGroupArns`, the `aws.autoscaling.Group` resource must be configured
 * to ignore changes to the `loadBalancers` and `targetGroupArns` arguments.
 *
 * ## Example Usage
 * ### With Latest Version Of Launch Template
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foobar = new aws.ec2.LaunchTemplate("foobar", {
 *     namePrefix: "foobar",
 *     imageId: "ami-1a2b3c",
 *     instanceType: "t2.micro",
 * });
 * const bar = new aws.autoscaling.Group("bar", {
 *     availabilityZones: ["us-east-1a"],
 *     desiredCapacity: 1,
 *     maxSize: 1,
 *     minSize: 1,
 *     launchTemplate: {
 *         id: foobar.id,
 *         version: `$Latest`,
 *     },
 * });
 * ```
 * ### Mixed Instances Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLaunchTemplate = new aws.ec2.LaunchTemplate("exampleLaunchTemplate", {
 *     namePrefix: "example",
 *     imageId: data.aws_ami.example.id,
 *     instanceType: "c5.large",
 * });
 * const exampleGroup = new aws.autoscaling.Group("exampleGroup", {
 *     availabilityZones: ["us-east-1a"],
 *     desiredCapacity: 1,
 *     maxSize: 1,
 *     minSize: 1,
 *     mixedInstancesPolicy: {
 *         launchTemplate: {
 *             launchTemplateSpecification: {
 *                 launchTemplateId: exampleLaunchTemplate.id,
 *             },
 *             overrides: [
 *                 {
 *                     instanceType: "c4.large",
 *                     weightedCapacity: "3",
 *                 },
 *                 {
 *                     instanceType: "c3.large",
 *                     weightedCapacity: "2",
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Mixed Instances Policy with Spot Instances and Capacity Rebalance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLaunchTemplate = new aws.ec2.LaunchTemplate("exampleLaunchTemplate", {
 *     namePrefix: "example",
 *     imageId: data.aws_ami.example.id,
 *     instanceType: "c5.large",
 * });
 * const exampleGroup = new aws.autoscaling.Group("exampleGroup", {
 *     capacityRebalance: true,
 *     desiredCapacity: 12,
 *     maxSize: 15,
 *     minSize: 12,
 *     vpcZoneIdentifiers: [
 *         aws_subnet.example1.id,
 *         aws_subnet.example2.id,
 *     ],
 *     mixedInstancesPolicy: {
 *         instancesDistribution: {
 *             onDemandBaseCapacity: 0,
 *             onDemandPercentageAboveBaseCapacity: 25,
 *             spotAllocationStrategy: "capacity-optimized",
 *         },
 *         launchTemplate: {
 *             launchTemplateSpecification: {
 *                 launchTemplateId: exampleLaunchTemplate.id,
 *             },
 *             overrides: [
 *                 {
 *                     instanceType: "c4.large",
 *                     weightedCapacity: "3",
 *                 },
 *                 {
 *                     instanceType: "c3.large",
 *                     weightedCapacity: "2",
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Mixed Instances Policy with Instance level LaunchTemplateSpecification Overrides
 *
 * When using a diverse instance set, some instance types might require a launch template with configuration values unique to that instance type such as a different AMI (Graviton2), architecture specific user data script, different EBS configuration, or different networking configuration.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLaunchTemplate = new aws.ec2.LaunchTemplate("exampleLaunchTemplate", {
 *     namePrefix: "example",
 *     imageId: data.aws_ami.example.id,
 *     instanceType: "c5.large",
 * });
 * const example2 = new aws.ec2.LaunchTemplate("example2", {
 *     namePrefix: "example2",
 *     imageId: data.aws_ami.example2.id,
 * });
 * const exampleGroup = new aws.autoscaling.Group("exampleGroup", {
 *     availabilityZones: ["us-east-1a"],
 *     desiredCapacity: 1,
 *     maxSize: 1,
 *     minSize: 1,
 *     mixedInstancesPolicy: {
 *         launchTemplate: {
 *             launchTemplateSpecification: {
 *                 launchTemplateId: exampleLaunchTemplate.id,
 *             },
 *             overrides: [
 *                 {
 *                     instanceType: "c4.large",
 *                     weightedCapacity: "3",
 *                 },
 *                 {
 *                     instanceType: "c6g.large",
 *                     launchTemplateSpecification: {
 *                         launchTemplateId: example2.id,
 *                     },
 *                     weightedCapacity: "2",
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Automatically refresh all instances after the group is updated
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleAmi = aws.ec2.getAmi({
 *     mostRecent: true,
 *     owners: ["amazon"],
 *     filters: [{
 *         name: "name",
 *         values: ["amzn-ami-hvm-*-x86_64-gp2"],
 *     }],
 * });
 * const exampleLaunchTemplate = new aws.ec2.LaunchTemplate("exampleLaunchTemplate", {
 *     imageId: exampleAmi.then(exampleAmi => exampleAmi.id),
 *     instanceType: "t3.nano",
 * });
 * const exampleGroup = new aws.autoscaling.Group("exampleGroup", {
 *     availabilityZones: ["us-east-1a"],
 *     desiredCapacity: 1,
 *     maxSize: 2,
 *     minSize: 1,
 *     launchTemplate: {
 *         id: exampleLaunchTemplate.id,
 *         version: exampleLaunchTemplate.latestVersion,
 *     },
 *     tags: [{
 *         key: "Key",
 *         value: "Value",
 *         propagateAtLaunch: true,
 *     }],
 *     instanceRefresh: {
 *         strategy: "Rolling",
 *         preferences: {
 *             minHealthyPercentage: 50,
 *         },
 *         triggers: ["tag"],
 *     },
 * });
 * ```
 * ### Auto Scaling group with Warm Pool
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLaunchTemplate = new aws.ec2.LaunchTemplate("exampleLaunchTemplate", {
 *     namePrefix: "example",
 *     imageId: data.aws_ami.example.id,
 *     instanceType: "c5.large",
 * });
 * const exampleGroup = new aws.autoscaling.Group("exampleGroup", {
 *     availabilityZones: ["us-east-1a"],
 *     desiredCapacity: 1,
 *     maxSize: 5,
 *     minSize: 1,
 *     warmPool: {
 *         poolState: "Stopped",
 *         minSize: 1,
 *         maxGroupPreparedCapacity: 10,
 *     },
 * });
 * ```
 * ## Waiting for Capacity
 *
 * A newly-created ASG is initially empty and begins to scale to `minSize` (or
 * `desiredCapacity`, if specified) by launching instances using the provided
 * Launch Configuration. These instances take time to launch and boot.
 *
 * On ASG Update, changes to these values also take time to result in the target
 * number of instances providing service.
 *
 * This provider provides two mechanisms to help consistently manage ASG scale up
 * time across dependent resources.
 *
 * #### Waiting for ASG Capacity
 *
 * The first is default behavior. This provider waits after ASG creation for
 * `minSize` (or `desiredCapacity`, if specified) healthy instances to show up
 * in the ASG before continuing.
 *
 * If `minSize` or `desiredCapacity` are changed in a subsequent update,
 * this provider will also wait for the correct number of healthy instances before
 * continuing.
 *
 * This provider considers an instance "healthy" when the ASG reports `HealthStatus:
 * "Healthy"` and `LifecycleState: "InService"`. See the [AWS AutoScaling
 * Docs](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/AutoScalingGroupLifecycle.html)
 * for more information on an ASG's lifecycle.
 *
 * This provider will wait for healthy instances for up to
 * `waitForCapacityTimeout`. If ASG creation is taking more than a few minutes,
 * it's worth investigating for scaling activity errors, which can be caused by
 * problems with the selected Launch Configuration.
 *
 * Setting `waitForCapacityTimeout` to `"0"` disables ASG Capacity waiting.
 *
 * #### Waiting for ELB Capacity
 *
 * The second mechanism is optional, and affects ASGs with attached ELBs specified
 * via the `loadBalancers` attribute or with ALBs specified with `targetGroupArns`.
 *
 * The `minElbCapacity` parameter causes this provider to wait for at least the
 * requested number of instances to show up `"InService"` in all attached ELBs
 * during ASG creation.  It has no effect on ASG updates.
 *
 * If `waitForElbCapacity` is set, this provider will wait for exactly that number
 * of Instances to be `"InService"` in all attached ELBs on both creation and
 * updates.
 *
 * These parameters can be used to ensure that service is being provided before
 * this provider moves on. If new instances don't pass the ELB's health checks for any
 * reason, the deployment will time out, and the ASG will be marked as
 * tainted (i.e. marked to be destroyed in a follow up run).
 *
 * As with ASG Capacity, this provider will wait for up to `waitForCapacityTimeout`
 * for the proper number of instances to be healthy.
 *
 * #### Troubleshooting Capacity Waiting Timeouts
 *
 * If ASG creation takes more than a few minutes, this could indicate one of a
 * number of configuration problems. See the [AWS Docs on Load Balancer
 * Troubleshooting](https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-troubleshooting.html)
 * for more information.
 *
 * ## Import
 *
 * Auto Scaling Groups can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:autoscaling/group:Group web web-asg
 * ```
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:autoscaling/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * The ARN for this Auto Scaling Group
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A list of one or more availability zones for the group. Used for EC2-Classic and default subnets when not specified with `vpcZoneIdentifier` argument. Conflicts with `vpcZoneIdentifier`.
     */
    public readonly availabilityZones!: pulumi.Output<string[]>;
    /**
     * Indicates whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
     */
    public readonly capacityRebalance!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     */
    public readonly defaultCooldown!: pulumi.Output<number>;
    /**
     * The number of Amazon EC2 instances that
     * should be running in the group. (See also Waiting for
     * Capacity below.)
     */
    public readonly desiredCapacity!: pulumi.Output<number>;
    /**
     * A list of metrics to collect. The allowed values are `GroupDesiredCapacity`, `GroupInServiceCapacity`, `GroupPendingCapacity`, `GroupMinSize`, `GroupMaxSize`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupStandbyCapacity`, `GroupTerminatingCapacity`, `GroupTerminatingInstances`, `GroupTotalCapacity`, `GroupTotalInstances`.
     */
    public readonly enabledMetrics!: pulumi.Output<Metric[] | undefined>;
    /**
     * Allows deleting the Auto Scaling Group without waiting
     * for all instances in the pool to terminate.  You can force an Auto Scaling Group to delete
     * even if it's in the process of scaling a resource. Normally, this provider
     * drains all the instances before deleting the group.  This bypasses that
     * behavior and potentially leaves resources dangling.
     */
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    public readonly forceDeleteWarmPool!: pulumi.Output<boolean | undefined>;
    /**
     * Time (in seconds) after instance comes into service before checking health.
     */
    public readonly healthCheckGracePeriod!: pulumi.Output<number | undefined>;
    /**
     * "EC2" or "ELB". Controls how health checking is done.
     */
    public readonly healthCheckType!: pulumi.Output<string>;
    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the Auto Scaling Group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * `aws.autoscaling.LifecycleHook`
     * resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
     * a new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
     */
    public readonly initialLifecycleHooks!: pulumi.Output<outputs.autoscaling.GroupInitialLifecycleHook[] | undefined>;
    /**
     * If this block is configured, start an
     * [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
     * when this Auto Scaling Group is updated. Defined below.
     */
    public readonly instanceRefresh!: pulumi.Output<outputs.autoscaling.GroupInstanceRefresh | undefined>;
    /**
     * The name of the launch configuration to use.
     */
    public readonly launchConfiguration!: pulumi.Output<string | undefined>;
    /**
     * Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
     */
    public readonly launchTemplate!: pulumi.Output<outputs.autoscaling.GroupLaunchTemplate | undefined>;
    /**
     * A list of elastic load balancer names to add to the autoscaling
     * group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
     */
    public readonly loadBalancers!: pulumi.Output<string[] | undefined>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 604800 and 31536000 seconds.
     */
    public readonly maxInstanceLifetime!: pulumi.Output<number | undefined>;
    /**
     * The maximum size of the Auto Scaling Group.
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     */
    public readonly metricsGranularity!: pulumi.Output<string | undefined>;
    /**
     * Setting this causes the provider to wait for
     * this number of instances from this Auto Scaling Group to show up healthy in the
     * ELB only on creation. Updates will not wait on ELB instance number changes.
     * (See also Waiting for Capacity below.)
     */
    public readonly minElbCapacity!: pulumi.Output<number | undefined>;
    /**
     * Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
     */
    public readonly mixedInstancesPolicy!: pulumi.Output<outputs.autoscaling.GroupMixedInstancesPolicy | undefined>;
    /**
     * The name of the Auto Scaling Group. By default generated by this provider.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    /**
     * The name of the placement group into which you'll launch your instances, if any.
     */
    public readonly placementGroup!: pulumi.Output<string | undefined>;
    /**
     * Allows setting instance protection. The
     * Auto Scaling Group will not select instances with this setting for termination
     * during scale in events.
     */
    public readonly protectFromScaleIn!: pulumi.Output<boolean | undefined>;
    /**
     * The ARN of the service-linked role that the ASG will use to call other AWS services
     */
    public readonly serviceLinkedRoleArn!: pulumi.Output<string>;
    /**
     * A list of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
     */
    public readonly suspendedProcesses!: pulumi.Output<string[] | undefined>;
    /**
     * Configuration block(s) containing resource tags. Conflicts with `tags`. Documented below.
     */
    public readonly tags!: pulumi.Output<outputs.autoscaling.GroupTag[] | undefined>;
    /**
     * Set of maps containing resource tags. Conflicts with `tag`. Documented below.
     */
    public readonly tagsCollection!: pulumi.Output<{[key: string]: string}[] | undefined>;
    /**
     * A set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
     */
    public readonly targetGroupArns!: pulumi.Output<string[] | undefined>;
    /**
     * A list of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
     */
    public readonly terminationPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
     */
    public readonly vpcZoneIdentifiers!: pulumi.Output<string[]>;
    /**
     * A maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for ASG instances to be healthy before timing out.  (See also Waiting
     * for Capacity below.) Setting this to "0" causes
     * this provider to skip all Capacity Waiting behavior.
     */
    public readonly waitForCapacityTimeout!: pulumi.Output<string | undefined>;
    /**
     * Setting this will cause the provider to wait
     * for exactly this number of healthy instances from this Auto Scaling Group in
     * all attached load balancers on both create and update operations. (Takes
     * precedence over `minElbCapacity` behavior.)
     * (See also Waiting for Capacity below.)
     */
    public readonly waitForElbCapacity!: pulumi.Output<number | undefined>;
    /**
     * If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
     * to the specified Auto Scaling group. Defined below
     */
    public readonly warmPool!: pulumi.Output<outputs.autoscaling.GroupWarmPool | undefined>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["capacityRebalance"] = state ? state.capacityRebalance : undefined;
            inputs["defaultCooldown"] = state ? state.defaultCooldown : undefined;
            inputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            inputs["enabledMetrics"] = state ? state.enabledMetrics : undefined;
            inputs["forceDelete"] = state ? state.forceDelete : undefined;
            inputs["forceDeleteWarmPool"] = state ? state.forceDeleteWarmPool : undefined;
            inputs["healthCheckGracePeriod"] = state ? state.healthCheckGracePeriod : undefined;
            inputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            inputs["initialLifecycleHooks"] = state ? state.initialLifecycleHooks : undefined;
            inputs["instanceRefresh"] = state ? state.instanceRefresh : undefined;
            inputs["launchConfiguration"] = state ? state.launchConfiguration : undefined;
            inputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            inputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            inputs["maxInstanceLifetime"] = state ? state.maxInstanceLifetime : undefined;
            inputs["maxSize"] = state ? state.maxSize : undefined;
            inputs["metricsGranularity"] = state ? state.metricsGranularity : undefined;
            inputs["minElbCapacity"] = state ? state.minElbCapacity : undefined;
            inputs["minSize"] = state ? state.minSize : undefined;
            inputs["mixedInstancesPolicy"] = state ? state.mixedInstancesPolicy : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["placementGroup"] = state ? state.placementGroup : undefined;
            inputs["protectFromScaleIn"] = state ? state.protectFromScaleIn : undefined;
            inputs["serviceLinkedRoleArn"] = state ? state.serviceLinkedRoleArn : undefined;
            inputs["suspendedProcesses"] = state ? state.suspendedProcesses : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsCollection"] = state ? state.tagsCollection : undefined;
            inputs["targetGroupArns"] = state ? state.targetGroupArns : undefined;
            inputs["terminationPolicies"] = state ? state.terminationPolicies : undefined;
            inputs["vpcZoneIdentifiers"] = state ? state.vpcZoneIdentifiers : undefined;
            inputs["waitForCapacityTimeout"] = state ? state.waitForCapacityTimeout : undefined;
            inputs["waitForElbCapacity"] = state ? state.waitForElbCapacity : undefined;
            inputs["warmPool"] = state ? state.warmPool : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["capacityRebalance"] = args ? args.capacityRebalance : undefined;
            inputs["defaultCooldown"] = args ? args.defaultCooldown : undefined;
            inputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            inputs["enabledMetrics"] = args ? args.enabledMetrics : undefined;
            inputs["forceDelete"] = args ? args.forceDelete : undefined;
            inputs["forceDeleteWarmPool"] = args ? args.forceDeleteWarmPool : undefined;
            inputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            inputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            inputs["initialLifecycleHooks"] = args ? args.initialLifecycleHooks : undefined;
            inputs["instanceRefresh"] = args ? args.instanceRefresh : undefined;
            inputs["launchConfiguration"] = args ? args.launchConfiguration : undefined;
            inputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            inputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            inputs["maxInstanceLifetime"] = args ? args.maxInstanceLifetime : undefined;
            inputs["maxSize"] = args ? args.maxSize : undefined;
            inputs["metricsGranularity"] = args ? args.metricsGranularity : undefined;
            inputs["minElbCapacity"] = args ? args.minElbCapacity : undefined;
            inputs["minSize"] = args ? args.minSize : undefined;
            inputs["mixedInstancesPolicy"] = args ? args.mixedInstancesPolicy : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["placementGroup"] = args ? args.placementGroup : undefined;
            inputs["protectFromScaleIn"] = args ? args.protectFromScaleIn : undefined;
            inputs["serviceLinkedRoleArn"] = args ? args.serviceLinkedRoleArn : undefined;
            inputs["suspendedProcesses"] = args ? args.suspendedProcesses : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tagsCollection"] = args ? args.tagsCollection : undefined;
            inputs["targetGroupArns"] = args ? args.targetGroupArns : undefined;
            inputs["terminationPolicies"] = args ? args.terminationPolicies : undefined;
            inputs["vpcZoneIdentifiers"] = args ? args.vpcZoneIdentifiers : undefined;
            inputs["waitForCapacityTimeout"] = args ? args.waitForCapacityTimeout : undefined;
            inputs["waitForElbCapacity"] = args ? args.waitForElbCapacity : undefined;
            inputs["warmPool"] = args ? args.warmPool : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Group.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * The ARN for this Auto Scaling Group
     */
    arn?: pulumi.Input<string>;
    /**
     * A list of one or more availability zones for the group. Used for EC2-Classic and default subnets when not specified with `vpcZoneIdentifier` argument. Conflicts with `vpcZoneIdentifier`.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
     */
    capacityRebalance?: pulumi.Input<boolean>;
    /**
     * The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     */
    defaultCooldown?: pulumi.Input<number>;
    /**
     * The number of Amazon EC2 instances that
     * should be running in the group. (See also Waiting for
     * Capacity below.)
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * A list of metrics to collect. The allowed values are `GroupDesiredCapacity`, `GroupInServiceCapacity`, `GroupPendingCapacity`, `GroupMinSize`, `GroupMaxSize`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupStandbyCapacity`, `GroupTerminatingCapacity`, `GroupTerminatingInstances`, `GroupTotalCapacity`, `GroupTotalInstances`.
     */
    enabledMetrics?: pulumi.Input<pulumi.Input<Metric>[]>;
    /**
     * Allows deleting the Auto Scaling Group without waiting
     * for all instances in the pool to terminate.  You can force an Auto Scaling Group to delete
     * even if it's in the process of scaling a resource. Normally, this provider
     * drains all the instances before deleting the group.  This bypasses that
     * behavior and potentially leaves resources dangling.
     */
    forceDelete?: pulumi.Input<boolean>;
    forceDeleteWarmPool?: pulumi.Input<boolean>;
    /**
     * Time (in seconds) after instance comes into service before checking health.
     */
    healthCheckGracePeriod?: pulumi.Input<number>;
    /**
     * "EC2" or "ELB". Controls how health checking is done.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the Auto Scaling Group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * `aws.autoscaling.LifecycleHook`
     * resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
     * a new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
     */
    initialLifecycleHooks?: pulumi.Input<pulumi.Input<inputs.autoscaling.GroupInitialLifecycleHook>[]>;
    /**
     * If this block is configured, start an
     * [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
     * when this Auto Scaling Group is updated. Defined below.
     */
    instanceRefresh?: pulumi.Input<inputs.autoscaling.GroupInstanceRefresh>;
    /**
     * The name of the launch configuration to use.
     */
    launchConfiguration?: pulumi.Input<string | LaunchConfiguration>;
    /**
     * Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
     */
    launchTemplate?: pulumi.Input<inputs.autoscaling.GroupLaunchTemplate>;
    /**
     * A list of elastic load balancer names to add to the autoscaling
     * group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
     */
    loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 604800 and 31536000 seconds.
     */
    maxInstanceLifetime?: pulumi.Input<number>;
    /**
     * The maximum size of the Auto Scaling Group.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     */
    metricsGranularity?: pulumi.Input<string | enums.autoscaling.MetricsGranularity>;
    /**
     * Setting this causes the provider to wait for
     * this number of instances from this Auto Scaling Group to show up healthy in the
     * ELB only on creation. Updates will not wait on ELB instance number changes.
     * (See also Waiting for Capacity below.)
     */
    minElbCapacity?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
     */
    minSize?: pulumi.Input<number>;
    /**
     * Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
     */
    mixedInstancesPolicy?: pulumi.Input<inputs.autoscaling.GroupMixedInstancesPolicy>;
    /**
     * The name of the Auto Scaling Group. By default generated by this provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * The name of the placement group into which you'll launch your instances, if any.
     */
    placementGroup?: pulumi.Input<string | PlacementGroup>;
    /**
     * Allows setting instance protection. The
     * Auto Scaling Group will not select instances with this setting for termination
     * during scale in events.
     */
    protectFromScaleIn?: pulumi.Input<boolean>;
    /**
     * The ARN of the service-linked role that the ASG will use to call other AWS services
     */
    serviceLinkedRoleArn?: pulumi.Input<string>;
    /**
     * A list of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
     */
    suspendedProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration block(s) containing resource tags. Conflicts with `tags`. Documented below.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.autoscaling.GroupTag>[]>;
    /**
     * Set of maps containing resource tags. Conflicts with `tag`. Documented below.
     */
    tagsCollection?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * A set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
     */
    targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
     */
    terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
     */
    vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for ASG instances to be healthy before timing out.  (See also Waiting
     * for Capacity below.) Setting this to "0" causes
     * this provider to skip all Capacity Waiting behavior.
     */
    waitForCapacityTimeout?: pulumi.Input<string>;
    /**
     * Setting this will cause the provider to wait
     * for exactly this number of healthy instances from this Auto Scaling Group in
     * all attached load balancers on both create and update operations. (Takes
     * precedence over `minElbCapacity` behavior.)
     * (See also Waiting for Capacity below.)
     */
    waitForElbCapacity?: pulumi.Input<number>;
    /**
     * If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
     * to the specified Auto Scaling group. Defined below
     */
    warmPool?: pulumi.Input<inputs.autoscaling.GroupWarmPool>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * A list of one or more availability zones for the group. Used for EC2-Classic and default subnets when not specified with `vpcZoneIdentifier` argument. Conflicts with `vpcZoneIdentifier`.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
     */
    capacityRebalance?: pulumi.Input<boolean>;
    /**
     * The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
     */
    defaultCooldown?: pulumi.Input<number>;
    /**
     * The number of Amazon EC2 instances that
     * should be running in the group. (See also Waiting for
     * Capacity below.)
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * A list of metrics to collect. The allowed values are `GroupDesiredCapacity`, `GroupInServiceCapacity`, `GroupPendingCapacity`, `GroupMinSize`, `GroupMaxSize`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupStandbyCapacity`, `GroupTerminatingCapacity`, `GroupTerminatingInstances`, `GroupTotalCapacity`, `GroupTotalInstances`.
     */
    enabledMetrics?: pulumi.Input<pulumi.Input<Metric>[]>;
    /**
     * Allows deleting the Auto Scaling Group without waiting
     * for all instances in the pool to terminate.  You can force an Auto Scaling Group to delete
     * even if it's in the process of scaling a resource. Normally, this provider
     * drains all the instances before deleting the group.  This bypasses that
     * behavior and potentially leaves resources dangling.
     */
    forceDelete?: pulumi.Input<boolean>;
    forceDeleteWarmPool?: pulumi.Input<boolean>;
    /**
     * Time (in seconds) after instance comes into service before checking health.
     */
    healthCheckGracePeriod?: pulumi.Input<number>;
    /**
     * "EC2" or "ELB". Controls how health checking is done.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * One or more
     * [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
     * to attach to the Auto Scaling Group **before** instances are launched. The
     * syntax is exactly the same as the separate
     * `aws.autoscaling.LifecycleHook`
     * resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
     * a new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.
     */
    initialLifecycleHooks?: pulumi.Input<pulumi.Input<inputs.autoscaling.GroupInitialLifecycleHook>[]>;
    /**
     * If this block is configured, start an
     * [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
     * when this Auto Scaling Group is updated. Defined below.
     */
    instanceRefresh?: pulumi.Input<inputs.autoscaling.GroupInstanceRefresh>;
    /**
     * The name of the launch configuration to use.
     */
    launchConfiguration?: pulumi.Input<string | LaunchConfiguration>;
    /**
     * Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
     */
    launchTemplate?: pulumi.Input<inputs.autoscaling.GroupLaunchTemplate>;
    /**
     * A list of elastic load balancer names to add to the autoscaling
     * group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
     */
    loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 604800 and 31536000 seconds.
     */
    maxInstanceLifetime?: pulumi.Input<number>;
    /**
     * The maximum size of the Auto Scaling Group.
     */
    maxSize: pulumi.Input<number>;
    /**
     * The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
     */
    metricsGranularity?: pulumi.Input<string | enums.autoscaling.MetricsGranularity>;
    /**
     * Setting this causes the provider to wait for
     * this number of instances from this Auto Scaling Group to show up healthy in the
     * ELB only on creation. Updates will not wait on ELB instance number changes.
     * (See also Waiting for Capacity below.)
     */
    minElbCapacity?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
     */
    minSize: pulumi.Input<number>;
    /**
     * Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
     */
    mixedInstancesPolicy?: pulumi.Input<inputs.autoscaling.GroupMixedInstancesPolicy>;
    /**
     * The name of the Auto Scaling Group. By default generated by this provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * The name of the placement group into which you'll launch your instances, if any.
     */
    placementGroup?: pulumi.Input<string | PlacementGroup>;
    /**
     * Allows setting instance protection. The
     * Auto Scaling Group will not select instances with this setting for termination
     * during scale in events.
     */
    protectFromScaleIn?: pulumi.Input<boolean>;
    /**
     * The ARN of the service-linked role that the ASG will use to call other AWS services
     */
    serviceLinkedRoleArn?: pulumi.Input<string>;
    /**
     * A list of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
     * Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
     */
    suspendedProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration block(s) containing resource tags. Conflicts with `tags`. Documented below.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.autoscaling.GroupTag>[]>;
    /**
     * Set of maps containing resource tags. Conflicts with `tag`. Documented below.
     */
    tagsCollection?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * A set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
     */
    targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
     */
    terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
     */
    vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for ASG instances to be healthy before timing out.  (See also Waiting
     * for Capacity below.) Setting this to "0" causes
     * this provider to skip all Capacity Waiting behavior.
     */
    waitForCapacityTimeout?: pulumi.Input<string>;
    /**
     * Setting this will cause the provider to wait
     * for exactly this number of healthy instances from this Auto Scaling Group in
     * all attached load balancers on both create and update operations. (Takes
     * precedence over `minElbCapacity` behavior.)
     * (See also Waiting for Capacity below.)
     */
    waitForElbCapacity?: pulumi.Input<number>;
    /**
     * If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
     * to the specified Auto Scaling group. Defined below
     */
    warmPool?: pulumi.Input<inputs.autoscaling.GroupWarmPool>;
}
