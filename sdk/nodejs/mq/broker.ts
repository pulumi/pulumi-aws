// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Broker extends pulumi.CustomResource {
    /**
     * Get an existing Broker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrokerState, opts?: pulumi.CustomResourceOptions): Broker {
        return new Broker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:mq/broker:Broker';

    /**
     * Returns true if the given object is an instance of Broker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Broker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Broker.__pulumiType;
    }

    public readonly applyImmediately!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authenticationStrategy!: pulumi.Output<string>;
    public readonly autoMinorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly brokerName!: pulumi.Output<string>;
    public readonly configuration!: pulumi.Output<outputs.mq.BrokerConfiguration>;
    public readonly deploymentMode!: pulumi.Output<string | undefined>;
    public readonly encryptionOptions!: pulumi.Output<outputs.mq.BrokerEncryptionOptions | undefined>;
    public readonly engineType!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly hostInstanceType!: pulumi.Output<string>;
    public /*out*/ readonly instances!: pulumi.Output<outputs.mq.BrokerInstance[]>;
    public readonly ldapServerMetadata!: pulumi.Output<outputs.mq.BrokerLdapServerMetadata | undefined>;
    public readonly logs!: pulumi.Output<outputs.mq.BrokerLogs | undefined>;
    public readonly maintenanceWindowStartTime!: pulumi.Output<outputs.mq.BrokerMaintenanceWindowStartTime>;
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    public readonly securityGroups!: pulumi.Output<string[] | undefined>;
    public readonly storageType!: pulumi.Output<string>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly users!: pulumi.Output<outputs.mq.BrokerUser[]>;

    /**
     * Create a Broker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BrokerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrokerArgs | BrokerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BrokerState | undefined;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationStrategy"] = state ? state.authenticationStrategy : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            resourceInputs["brokerName"] = state ? state.brokerName : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["deploymentMode"] = state ? state.deploymentMode : undefined;
            resourceInputs["encryptionOptions"] = state ? state.encryptionOptions : undefined;
            resourceInputs["engineType"] = state ? state.engineType : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["hostInstanceType"] = state ? state.hostInstanceType : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["ldapServerMetadata"] = state ? state.ldapServerMetadata : undefined;
            resourceInputs["logs"] = state ? state.logs : undefined;
            resourceInputs["maintenanceWindowStartTime"] = state ? state.maintenanceWindowStartTime : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as BrokerArgs | undefined;
            if ((!args || args.engineType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineType'");
            }
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if ((!args || args.hostInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostInstanceType'");
            }
            if ((!args || args.users === undefined) && !opts.urn) {
                throw new Error("Missing required property 'users'");
            }
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["authenticationStrategy"] = args ? args.authenticationStrategy : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["brokerName"] = args ? args.brokerName : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["deploymentMode"] = args ? args.deploymentMode : undefined;
            resourceInputs["encryptionOptions"] = args ? args.encryptionOptions : undefined;
            resourceInputs["engineType"] = args ? args.engineType : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["hostInstanceType"] = args ? args.hostInstanceType : undefined;
            resourceInputs["ldapServerMetadata"] = args ? args.ldapServerMetadata : undefined;
            resourceInputs["logs"] = args ? args.logs : undefined;
            resourceInputs["maintenanceWindowStartTime"] = args ? args.maintenanceWindowStartTime : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Broker.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Broker resources.
 */
export interface BrokerState {
    applyImmediately?: pulumi.Input<boolean>;
    arn?: pulumi.Input<string>;
    authenticationStrategy?: pulumi.Input<string>;
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    brokerName?: pulumi.Input<string>;
    configuration?: pulumi.Input<inputs.mq.BrokerConfiguration>;
    deploymentMode?: pulumi.Input<string>;
    encryptionOptions?: pulumi.Input<inputs.mq.BrokerEncryptionOptions>;
    engineType?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    hostInstanceType?: pulumi.Input<string>;
    instances?: pulumi.Input<pulumi.Input<inputs.mq.BrokerInstance>[]>;
    ldapServerMetadata?: pulumi.Input<inputs.mq.BrokerLdapServerMetadata>;
    logs?: pulumi.Input<inputs.mq.BrokerLogs>;
    maintenanceWindowStartTime?: pulumi.Input<inputs.mq.BrokerMaintenanceWindowStartTime>;
    publiclyAccessible?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    storageType?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    users?: pulumi.Input<pulumi.Input<inputs.mq.BrokerUser>[]>;
}

/**
 * The set of arguments for constructing a Broker resource.
 */
export interface BrokerArgs {
    applyImmediately?: pulumi.Input<boolean>;
    authenticationStrategy?: pulumi.Input<string>;
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    brokerName?: pulumi.Input<string>;
    configuration?: pulumi.Input<inputs.mq.BrokerConfiguration>;
    deploymentMode?: pulumi.Input<string>;
    encryptionOptions?: pulumi.Input<inputs.mq.BrokerEncryptionOptions>;
    engineType: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    hostInstanceType: pulumi.Input<string>;
    ldapServerMetadata?: pulumi.Input<inputs.mq.BrokerLdapServerMetadata>;
    logs?: pulumi.Input<inputs.mq.BrokerLogs>;
    maintenanceWindowStartTime?: pulumi.Input<inputs.mq.BrokerMaintenanceWindowStartTime>;
    publiclyAccessible?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    storageType?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    users: pulumi.Input<pulumi.Input<inputs.mq.BrokerUser>[]>;
}
