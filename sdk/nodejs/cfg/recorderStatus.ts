// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages status (recording / stopped) of an AWS Config Configuration Recorder.
 *
 * > **Note:** Starting Configuration Recorder requires a Delivery Channel to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["config.amazonaws.com"],
 *         }],
 *         actions: ["sts:AssumeRole"],
 *     }],
 * });
 * const r = new aws.iam.Role("r", {
 *     name: "example-awsconfig",
 *     assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json),
 * });
 * const fooRecorder = new aws.cfg.Recorder("foo", {
 *     name: "example",
 *     roleArn: r.arn,
 * });
 * const foo = new aws.cfg.RecorderStatus("foo", {
 *     name: fooRecorder.name,
 *     isEnabled: true,
 * });
 * const a = new aws.iam.RolePolicyAttachment("a", {
 *     role: r.name,
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWS_ConfigRole",
 * });
 * const b = new aws.s3.BucketV2("b", {bucket: "awsconfig-example"});
 * const fooDeliveryChannel = new aws.cfg.DeliveryChannel("foo", {
 *     name: "example",
 *     s3BucketName: b.bucket,
 * });
 * const p = aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         effect: "Allow",
 *         actions: ["s3:*"],
 *         resources: [
 *             b.arn,
 *             pulumi.interpolate`${b.arn}/*`,
 *         ],
 *     }],
 * });
 * const pRolePolicy = new aws.iam.RolePolicy("p", {
 *     name: "awsconfig-example",
 *     role: r.id,
 *     policy: p.apply(p => p.json),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import Configuration Recorder Status using the name of the Configuration Recorder. For example:
 *
 * ```sh
 * $ pulumi import aws:cfg/recorderStatus:RecorderStatus foo example
 * ```
 */
export class RecorderStatus extends pulumi.CustomResource {
    /**
     * Get an existing RecorderStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecorderStatusState, opts?: pulumi.CustomResourceOptions): RecorderStatus {
        return new RecorderStatus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cfg/recorderStatus:RecorderStatus';

    /**
     * Returns true if the given object is an instance of RecorderStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecorderStatus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecorderStatus.__pulumiType;
    }

    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    public readonly isEnabled!: pulumi.Output<boolean>;
    /**
     * The name of the recorder
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a RecorderStatus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecorderStatusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecorderStatusArgs | RecorderStatusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecorderStatusState | undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as RecorderStatusArgs | undefined;
            if ((!args || args.isEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isEnabled'");
            }
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecorderStatus.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RecorderStatus resources.
 */
export interface RecorderStatusState {
    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the recorder
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RecorderStatus resource.
 */
export interface RecorderStatusArgs {
    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    isEnabled: pulumi.Input<boolean>;
    /**
     * The name of the recorder
     */
    name?: pulumi.Input<string>;
}
