// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class ConformancePack extends pulumi.CustomResource {
    /**
     * Get an existing ConformancePack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConformancePackState, opts?: pulumi.CustomResourceOptions): ConformancePack {
        return new ConformancePack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cfg/conformancePack:ConformancePack';

    /**
     * Returns true if the given object is an instance of ConformancePack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConformancePack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConformancePack.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly deliveryS3Bucket!: pulumi.Output<string | undefined>;
    public readonly deliveryS3KeyPrefix!: pulumi.Output<string | undefined>;
    public readonly inputParameters!: pulumi.Output<outputs.cfg.ConformancePackInputParameter[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly templateBody!: pulumi.Output<string | undefined>;
    public readonly templateS3Uri!: pulumi.Output<string | undefined>;

    /**
     * Create a ConformancePack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConformancePackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConformancePackArgs | ConformancePackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConformancePackState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["deliveryS3Bucket"] = state ? state.deliveryS3Bucket : undefined;
            resourceInputs["deliveryS3KeyPrefix"] = state ? state.deliveryS3KeyPrefix : undefined;
            resourceInputs["inputParameters"] = state ? state.inputParameters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["templateBody"] = state ? state.templateBody : undefined;
            resourceInputs["templateS3Uri"] = state ? state.templateS3Uri : undefined;
        } else {
            const args = argsOrState as ConformancePackArgs | undefined;
            resourceInputs["deliveryS3Bucket"] = args ? args.deliveryS3Bucket : undefined;
            resourceInputs["deliveryS3KeyPrefix"] = args ? args.deliveryS3KeyPrefix : undefined;
            resourceInputs["inputParameters"] = args ? args.inputParameters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["templateBody"] = args ? args.templateBody : undefined;
            resourceInputs["templateS3Uri"] = args ? args.templateS3Uri : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConformancePack.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConformancePack resources.
 */
export interface ConformancePackState {
    arn?: pulumi.Input<string>;
    deliveryS3Bucket?: pulumi.Input<string>;
    deliveryS3KeyPrefix?: pulumi.Input<string>;
    inputParameters?: pulumi.Input<pulumi.Input<inputs.cfg.ConformancePackInputParameter>[]>;
    name?: pulumi.Input<string>;
    templateBody?: pulumi.Input<string>;
    templateS3Uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConformancePack resource.
 */
export interface ConformancePackArgs {
    deliveryS3Bucket?: pulumi.Input<string>;
    deliveryS3KeyPrefix?: pulumi.Input<string>;
    inputParameters?: pulumi.Input<pulumi.Input<inputs.cfg.ConformancePackInputParameter>[]>;
    name?: pulumi.Input<string>;
    templateBody?: pulumi.Input<string>;
    templateS3Uri?: pulumi.Input<string>;
}
