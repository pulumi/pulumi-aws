// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface FeatureEvaluationRule {
    /**
     * The name for the new feature. Minimum length of `1`. Maximum length of `127`.
     */
    name?: pulumi.Input<string>;
    /**
     * This value is `aws.evidently.splits` if this is an evaluation rule for a launch, and it is `aws.evidently.onlineab` if this is an evaluation rule for an experiment.
     */
    type?: pulumi.Input<string>;
}
export interface FeatureVariation {
    /**
     * The name of the variation. Minimum length of `1`. Maximum length of `127`.
     */
    name: pulumi.Input<string>;
    /**
     * A block that specifies the value assigned to this variation. Detailed below
     */
    value: pulumi.Input<inputs.FeatureVariationValue>;
}
export interface FeatureVariationValue {
    /**
     * If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
     */
    boolValue?: pulumi.Input<string>;
    /**
     * If this feature uses the double integer variation type, this field contains the double integer value of this variation.
     */
    doubleValue?: pulumi.Input<string>;
    /**
     * If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of `-9007199254740991`. Maximum value of `9007199254740991`.
     */
    longValue?: pulumi.Input<string>;
    /**
     * If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of `0`. Maximum length of `512`.
     */
    stringValue?: pulumi.Input<string>;
}
export interface LaunchExecution {
    /**
     * The date and time that the launch ended.
     */
    endedTime?: pulumi.Input<string>;
    /**
     * The date and time that the launch started.
     */
    startedTime?: pulumi.Input<string>;
}
export interface LaunchGroup {
    /**
     * Specifies the description of the launch group.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of the feature that the launch is using.
     */
    feature: pulumi.Input<string>;
    /**
     * Specifies the name of the lahnch group.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the feature variation to use for this launch group.
     */
    variation: pulumi.Input<string>;
}
export interface LaunchMetricMonitor {
    /**
     * A block that defines the metric. Detailed below.
     */
    metricDefinition: pulumi.Input<inputs.LaunchMetricMonitorMetricDefinition>;
}
export interface LaunchMetricMonitorMetricDefinition {
    /**
     * Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
     */
    entityIdKey: pulumi.Input<string>;
    /**
     * Specifies The EventBridge event pattern that defines how the metric is recorded.
     */
    eventPattern?: pulumi.Input<string>;
    /**
     * Specifies the name for the metric.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies a label for the units that the metric is measuring.
     */
    unitLabel?: pulumi.Input<string>;
    /**
     * Specifies the value that is tracked to produce the metric.
     */
    valueKey: pulumi.Input<string>;
}
export interface LaunchScheduledSplitsConfig {
    /**
     * One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. Detailed below.
     */
    steps: pulumi.Input<pulumi.Input<inputs.LaunchScheduledSplitsConfigStep>[]>;
}
export interface LaunchScheduledSplitsConfigStep {
    /**
     * The traffic allocation percentages among the feature variations during one step of a launch. This is a set of key-value pairs. The keys are variation names. The values represent the percentage of traffic to allocate to that variation during this step. For more information, refer to the [AWS documentation for ScheduledSplitConfig groupWeights](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ScheduledSplitConfig.html).
     */
    groupWeights: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * One or up to six blocks that specify different traffic splits for one or more audience segments. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age. Detailed below.
     */
    segmentOverrides?: pulumi.Input<pulumi.Input<inputs.LaunchScheduledSplitsConfigStepSegmentOverride>[]>;
    /**
     * Specifies the date and time that this step of the launch starts.
     */
    startTime: pulumi.Input<string>;
}
export interface LaunchScheduledSplitsConfigStepSegmentOverride {
    /**
     * Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
     */
    evaluationOrder: pulumi.Input<number>;
    /**
     * The name or ARN of the segment to use.
     */
    segment: pulumi.Input<string>;
    /**
     * The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
     */
    weights: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
}
export interface ProjectDataDelivery {
    /**
     * A block that defines the CloudWatch Log Group that stores the evaluation events. See below.
     */
    cloudwatchLogs?: pulumi.Input<inputs.ProjectDataDeliveryCloudwatchLogs>;
    /**
     * A block that defines the S3 bucket and prefix that stores the evaluation events. See below.
     */
    s3Destination?: pulumi.Input<inputs.ProjectDataDeliveryS3Destination>;
}
export interface ProjectDataDeliveryCloudwatchLogs {
    /**
     * The name of the log group where the project stores evaluation events.
     */
    logGroup?: pulumi.Input<string>;
}
export interface ProjectDataDeliveryS3Destination {
    /**
     * The name of the bucket in which Evidently stores evaluation events.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The bucket prefix in which Evidently stores evaluation events.
     */
    prefix?: pulumi.Input<string>;
}
