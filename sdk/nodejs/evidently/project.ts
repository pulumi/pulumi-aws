// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:evidently/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    public /*out*/ readonly activeExperimentCount!: pulumi.Output<number>;
    public /*out*/ readonly activeLaunchCount!: pulumi.Output<number>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly dataDelivery!: pulumi.Output<outputs.evidently.ProjectDataDelivery | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly experimentCount!: pulumi.Output<number>;
    public /*out*/ readonly featureCount!: pulumi.Output<number>;
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    public /*out*/ readonly launchCount!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["activeExperimentCount"] = state ? state.activeExperimentCount : undefined;
            resourceInputs["activeLaunchCount"] = state ? state.activeLaunchCount : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["dataDelivery"] = state ? state.dataDelivery : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["experimentCount"] = state ? state.experimentCount : undefined;
            resourceInputs["featureCount"] = state ? state.featureCount : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["launchCount"] = state ? state.launchCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["dataDelivery"] = args ? args.dataDelivery : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["activeExperimentCount"] = undefined /*out*/;
            resourceInputs["activeLaunchCount"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["experimentCount"] = undefined /*out*/;
            resourceInputs["featureCount"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["launchCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    activeExperimentCount?: pulumi.Input<number>;
    activeLaunchCount?: pulumi.Input<number>;
    arn?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    dataDelivery?: pulumi.Input<inputs.evidently.ProjectDataDelivery>;
    description?: pulumi.Input<string>;
    experimentCount?: pulumi.Input<number>;
    featureCount?: pulumi.Input<number>;
    lastUpdatedTime?: pulumi.Input<string>;
    launchCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    dataDelivery?: pulumi.Input<inputs.evidently.ProjectDataDelivery>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
