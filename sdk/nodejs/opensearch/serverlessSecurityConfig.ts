// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS OpenSearch Serverless Security Config.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_opensearchserverless_security_config.example
 *
 *  id = "saml/123456789012/example" } Using `pulumi import`, import OpenSearchServerless Access Policy using the `name` argument prefixed with the string `saml/account_id/`. For exampleconsole % pulumi import aws_opensearchserverless_security_config.example saml/123456789012/example
 */
export class ServerlessSecurityConfig extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessSecurityConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerlessSecurityConfigState, opts?: pulumi.CustomResourceOptions): ServerlessSecurityConfig {
        return new ServerlessSecurityConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig';

    /**
     * Returns true if the given object is an instance of ServerlessSecurityConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerlessSecurityConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessSecurityConfig.__pulumiType;
    }

    /**
     * Version of the configuration.
     */
    public /*out*/ readonly configVersion!: pulumi.Output<string>;
    /**
     * Description of the security configuration.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configuration block for SAML options.
     */
    public readonly samlOptions!: pulumi.Output<outputs.opensearch.ServerlessSecurityConfigSamlOptions | undefined>;
    /**
     * Type of configuration. Must be `saml`.
     *
     * The following arguments are optional:
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ServerlessSecurityConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerlessSecurityConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerlessSecurityConfigArgs | ServerlessSecurityConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerlessSecurityConfigState | undefined;
            resourceInputs["configVersion"] = state ? state.configVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["samlOptions"] = state ? state.samlOptions : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ServerlessSecurityConfigArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["samlOptions"] = args ? args.samlOptions : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["configVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessSecurityConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerlessSecurityConfig resources.
 */
export interface ServerlessSecurityConfigState {
    /**
     * Version of the configuration.
     */
    configVersion?: pulumi.Input<string>;
    /**
     * Description of the security configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration block for SAML options.
     */
    samlOptions?: pulumi.Input<inputs.opensearch.ServerlessSecurityConfigSamlOptions>;
    /**
     * Type of configuration. Must be `saml`.
     *
     * The following arguments are optional:
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerlessSecurityConfig resource.
 */
export interface ServerlessSecurityConfigArgs {
    /**
     * Description of the security configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    name: pulumi.Input<string>;
    /**
     * Configuration block for SAML options.
     */
    samlOptions?: pulumi.Input<inputs.opensearch.ServerlessSecurityConfigSamlOptions>;
    /**
     * Type of configuration. Must be `saml`.
     *
     * The following arguments are optional:
     */
    type: pulumi.Input<string>;
}
