// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opensearch/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    public readonly accessPolicies!: pulumi.Output<string>;
    public readonly advancedOptions!: pulumi.Output<{[key: string]: string}>;
    public readonly advancedSecurityOptions!: pulumi.Output<outputs.opensearch.DomainAdvancedSecurityOptions>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoTuneOptions!: pulumi.Output<outputs.opensearch.DomainAutoTuneOptions>;
    public readonly clusterConfig!: pulumi.Output<outputs.opensearch.DomainClusterConfig>;
    public readonly cognitoOptions!: pulumi.Output<outputs.opensearch.DomainCognitoOptions | undefined>;
    public readonly domainEndpointOptions!: pulumi.Output<outputs.opensearch.DomainDomainEndpointOptions>;
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly ebsOptions!: pulumi.Output<outputs.opensearch.DomainEbsOptions>;
    public readonly encryptAtRest!: pulumi.Output<outputs.opensearch.DomainEncryptAtRest>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string | undefined>;
    public /*out*/ readonly kibanaEndpoint!: pulumi.Output<string>;
    public readonly logPublishingOptions!: pulumi.Output<outputs.opensearch.DomainLogPublishingOption[] | undefined>;
    public readonly nodeToNodeEncryption!: pulumi.Output<outputs.opensearch.DomainNodeToNodeEncryption>;
    public readonly snapshotOptions!: pulumi.Output<outputs.opensearch.DomainSnapshotOptions | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly vpcOptions!: pulumi.Output<outputs.opensearch.DomainVpcOptions | undefined>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            resourceInputs["advancedOptions"] = state ? state.advancedOptions : undefined;
            resourceInputs["advancedSecurityOptions"] = state ? state.advancedSecurityOptions : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoTuneOptions"] = state ? state.autoTuneOptions : undefined;
            resourceInputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            resourceInputs["cognitoOptions"] = state ? state.cognitoOptions : undefined;
            resourceInputs["domainEndpointOptions"] = state ? state.domainEndpointOptions : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["ebsOptions"] = state ? state.ebsOptions : undefined;
            resourceInputs["encryptAtRest"] = state ? state.encryptAtRest : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["kibanaEndpoint"] = state ? state.kibanaEndpoint : undefined;
            resourceInputs["logPublishingOptions"] = state ? state.logPublishingOptions : undefined;
            resourceInputs["nodeToNodeEncryption"] = state ? state.nodeToNodeEncryption : undefined;
            resourceInputs["snapshotOptions"] = state ? state.snapshotOptions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcOptions"] = state ? state.vpcOptions : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            resourceInputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            resourceInputs["advancedOptions"] = args ? args.advancedOptions : undefined;
            resourceInputs["advancedSecurityOptions"] = args ? args.advancedSecurityOptions : undefined;
            resourceInputs["autoTuneOptions"] = args ? args.autoTuneOptions : undefined;
            resourceInputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            resourceInputs["cognitoOptions"] = args ? args.cognitoOptions : undefined;
            resourceInputs["domainEndpointOptions"] = args ? args.domainEndpointOptions : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["ebsOptions"] = args ? args.ebsOptions : undefined;
            resourceInputs["encryptAtRest"] = args ? args.encryptAtRest : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["logPublishingOptions"] = args ? args.logPublishingOptions : undefined;
            resourceInputs["nodeToNodeEncryption"] = args ? args.nodeToNodeEncryption : undefined;
            resourceInputs["snapshotOptions"] = args ? args.snapshotOptions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcOptions"] = args ? args.vpcOptions : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["kibanaEndpoint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    accessPolicies?: pulumi.Input<string>;
    advancedOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    advancedSecurityOptions?: pulumi.Input<inputs.opensearch.DomainAdvancedSecurityOptions>;
    arn?: pulumi.Input<string>;
    autoTuneOptions?: pulumi.Input<inputs.opensearch.DomainAutoTuneOptions>;
    clusterConfig?: pulumi.Input<inputs.opensearch.DomainClusterConfig>;
    cognitoOptions?: pulumi.Input<inputs.opensearch.DomainCognitoOptions>;
    domainEndpointOptions?: pulumi.Input<inputs.opensearch.DomainDomainEndpointOptions>;
    domainId?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    ebsOptions?: pulumi.Input<inputs.opensearch.DomainEbsOptions>;
    encryptAtRest?: pulumi.Input<inputs.opensearch.DomainEncryptAtRest>;
    endpoint?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    kibanaEndpoint?: pulumi.Input<string>;
    logPublishingOptions?: pulumi.Input<pulumi.Input<inputs.opensearch.DomainLogPublishingOption>[]>;
    nodeToNodeEncryption?: pulumi.Input<inputs.opensearch.DomainNodeToNodeEncryption>;
    snapshotOptions?: pulumi.Input<inputs.opensearch.DomainSnapshotOptions>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcOptions?: pulumi.Input<inputs.opensearch.DomainVpcOptions>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    accessPolicies?: pulumi.Input<string>;
    advancedOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    advancedSecurityOptions?: pulumi.Input<inputs.opensearch.DomainAdvancedSecurityOptions>;
    autoTuneOptions?: pulumi.Input<inputs.opensearch.DomainAutoTuneOptions>;
    clusterConfig?: pulumi.Input<inputs.opensearch.DomainClusterConfig>;
    cognitoOptions?: pulumi.Input<inputs.opensearch.DomainCognitoOptions>;
    domainEndpointOptions?: pulumi.Input<inputs.opensearch.DomainDomainEndpointOptions>;
    domainName?: pulumi.Input<string>;
    ebsOptions?: pulumi.Input<inputs.opensearch.DomainEbsOptions>;
    encryptAtRest?: pulumi.Input<inputs.opensearch.DomainEncryptAtRest>;
    engineVersion?: pulumi.Input<string>;
    logPublishingOptions?: pulumi.Input<pulumi.Input<inputs.opensearch.DomainLogPublishingOption>[]>;
    nodeToNodeEncryption?: pulumi.Input<inputs.opensearch.DomainNodeToNodeEncryption>;
    snapshotOptions?: pulumi.Input<inputs.opensearch.DomainSnapshotOptions>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcOptions?: pulumi.Input<inputs.opensearch.DomainVpcOptions>;
}
