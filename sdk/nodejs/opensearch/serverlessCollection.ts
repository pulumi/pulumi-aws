// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS OpenSearch Serverless Collection.
 *
 * > **NOTE:** An `aws.opensearch.ServerlessCollection` cannot be created without having an applicable encryption security policy. Use the `dependsOn` meta-argument to define this dependency.
 *
 * > **NOTE:** An `aws.opensearch.ServerlessCollection` is not accessible without configuring an applicable network security policy. Data cannot be accessed without configuring an applicable data access policy.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleServerlessSecurityPolicy = new aws.opensearch.ServerlessSecurityPolicy("exampleServerlessSecurityPolicy", {
 *     type: "encryption",
 *     policy: JSON.stringify({
 *         Rules: [{
 *             Resource: ["collection/example"],
 *             ResourceType: "collection",
 *         }],
 *         AWSOwnedKey: true,
 *     }),
 * });
 * const exampleServerlessCollection = new aws.opensearch.ServerlessCollection("exampleServerlessCollection", {}, {
 *     dependsOn: [exampleServerlessSecurityPolicy],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import OpenSearchServerless Collection using the `id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:opensearch/serverlessCollection:ServerlessCollection example example
 * ```
 */
export class ServerlessCollection extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessCollection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerlessCollectionState, opts?: pulumi.CustomResourceOptions): ServerlessCollection {
        return new ServerlessCollection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opensearch/serverlessCollection:ServerlessCollection';

    /**
     * Returns true if the given object is an instance of ServerlessCollection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerlessCollection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessCollection.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the collection.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
     */
    public /*out*/ readonly collectionEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly dashboardEndpoint!: pulumi.Output<string>;
    /**
     * Description of the collection.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ARN of the Amazon Web Services KMS key used to encrypt the collection.
     */
    public /*out*/ readonly kmsKeyArn!: pulumi.Output<string>;
    /**
     * Name of the collection.
     *
     * The following arguments are optional:
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.opensearch.ServerlessCollectionTimeouts | undefined>;
    /**
     * Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ServerlessCollection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerlessCollectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerlessCollectionArgs | ServerlessCollectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerlessCollectionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["collectionEndpoint"] = state ? state.collectionEndpoint : undefined;
            resourceInputs["dashboardEndpoint"] = state ? state.dashboardEndpoint : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ServerlessCollectionArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["collectionEndpoint"] = undefined /*out*/;
            resourceInputs["dashboardEndpoint"] = undefined /*out*/;
            resourceInputs["kmsKeyArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessCollection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerlessCollection resources.
 */
export interface ServerlessCollectionState {
    /**
     * Amazon Resource Name (ARN) of the collection.
     */
    arn?: pulumi.Input<string>;
    /**
     * Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
     */
    collectionEndpoint?: pulumi.Input<string>;
    dashboardEndpoint?: pulumi.Input<string>;
    /**
     * Description of the collection.
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN of the Amazon Web Services KMS key used to encrypt the collection.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * Name of the collection.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.opensearch.ServerlessCollectionTimeouts>;
    /**
     * Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerlessCollection resource.
 */
export interface ServerlessCollectionArgs {
    /**
     * Description of the collection.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the collection.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.opensearch.ServerlessCollectionTimeouts>;
    /**
     * Type of collection. One of `SEARCH`, `TIMESERIES`, or `VECTORSEARCH`. Defaults to `TIMESERIES`.
     */
    type?: pulumi.Input<string>;
}
