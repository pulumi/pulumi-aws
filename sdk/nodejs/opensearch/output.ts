// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface DomainAdvancedSecurityOptions {
    /**
     * Whether Anonymous auth is enabled. Enables fine-grained access control on an existing domain. Ignored unless `advancedSecurityOptions` are enabled. _Can only be enabled on an existing domain._
     */
    anonymousAuthEnabled: boolean;
    /**
     * Whether advanced security is enabled.
     */
    enabled: boolean;
    /**
     * Whether the internal user database is enabled. Default is `false`.
     */
    internalUserDatabaseEnabled?: boolean;
    /**
     * Configuration block for the main user. Detailed below.
     */
    masterUserOptions?: outputs.DomainAdvancedSecurityOptionsMasterUserOptions;
}
export interface DomainAdvancedSecurityOptionsMasterUserOptions {
    /**
     * ARN for the main user. Only specify if `internalUserDatabaseEnabled` is not set or set to `false`.
     */
    masterUserArn?: string;
    /**
     * Main user's username, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
     */
    masterUserName?: string;
    /**
     * Main user's password, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
     */
    masterUserPassword?: string;
}
export interface DomainAutoTuneOptions {
    /**
     * Auto-Tune desired state for the domain. Valid values: `ENABLED` or `DISABLED`.
     */
    desiredState: string;
    /**
     * Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
     *
     * **NOTE:** Maintenance windows are deprecated and have been replaced with [off-peak windows](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/off-peak.html). Consequently, `maintenanceSchedule` configuration blocks cannot be specified when `useOffPeakWindow` is set to `true`.
     */
    maintenanceSchedules?: outputs.DomainAutoTuneOptionsMaintenanceSchedule[];
    /**
     * Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: `DEFAULT_ROLLBACK` or `NO_ROLLBACK`.
     */
    rollbackOnDisable: string;
    /**
     * Whether to schedule Auto-Tune optimizations that require blue/green deployments during the domain's configured daily off-peak window. Defaults to `false`.
     */
    useOffPeakWindow?: boolean;
}
export interface DomainAutoTuneOptionsMaintenanceSchedule {
    /**
     * A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
     */
    cronExpressionForRecurrence: string;
    /**
     * Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
     */
    duration: outputs.DomainAutoTuneOptionsMaintenanceScheduleDuration;
    /**
     * Date and time at which to start the Auto-Tune maintenance schedule in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     */
    startAt: string;
}
export interface DomainAutoTuneOptionsMaintenanceScheduleDuration {
    /**
     * Unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: `HOURS`.
     */
    unit: string;
    /**
     * An integer specifying the value of the duration of an Auto-Tune maintenance window.
     */
    value: number;
}
export interface DomainClusterConfig {
    /**
     * Configuration block containing cold storage configuration. Detailed below.
     */
    coldStorageOptions: outputs.DomainClusterConfigColdStorageOptions;
    /**
     * Number of dedicated main nodes in the cluster.
     */
    dedicatedMasterCount?: number;
    /**
     * Whether dedicated main nodes are enabled for the cluster.
     */
    dedicatedMasterEnabled?: boolean;
    /**
     * Instance type of the dedicated main nodes in the cluster.
     */
    dedicatedMasterType?: string;
    /**
     * Number of instances in the cluster.
     */
    instanceCount?: number;
    /**
     * Instance type of data nodes in the cluster.
     */
    instanceType?: string;
    /**
     * Whether a multi-AZ domain is turned on with a standby AZ. For more information, see [Configuring a multi-AZ domain in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html).
     */
    multiAzWithStandbyEnabled?: boolean;
    /**
     * Number of warm nodes in the cluster. Valid values are between `2` and `150`. `warmCount` can be only and must be set when `warmEnabled` is set to `true`.
     */
    warmCount?: number;
    /**
     * Whether to enable warm storage.
     */
    warmEnabled?: boolean;
    /**
     * Instance type for the OpenSearch cluster's warm nodes. Valid values are `ultrawarm1.medium.search`, `ultrawarm1.large.search` and `ultrawarm1.xlarge.search`. `warmType` can be only and must be set when `warmEnabled` is set to `true`.
     */
    warmType?: string;
    /**
     * Configuration block containing zone awareness settings. Detailed below.
     */
    zoneAwarenessConfig?: outputs.DomainClusterConfigZoneAwarenessConfig;
    /**
     * Whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
     */
    zoneAwarenessEnabled?: boolean;
}
export interface DomainClusterConfigColdStorageOptions {
    /**
     * Boolean to enable cold storage for an OpenSearch domain. Defaults to `false`. Master and ultrawarm nodes must be enabled for cold storage.
     */
    enabled: boolean;
}
export interface DomainClusterConfigZoneAwarenessConfig {
    /**
     * Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
     */
    availabilityZoneCount?: number;
}
export interface DomainCognitoOptions {
    /**
     * Whether Amazon Cognito authentication with Dashboard is enabled or not. Default is `false`.
     */
    enabled?: boolean;
    /**
     * ID of the Cognito Identity Pool to use.
     */
    identityPoolId: string;
    /**
     * ARN of the IAM role that has the AmazonOpenSearchServiceCognitoAccess policy attached.
     */
    roleArn: string;
    /**
     * ID of the Cognito User Pool to use.
     */
    userPoolId: string;
}
export interface DomainDomainEndpointOptions {
    /**
     * Fully qualified domain for your custom endpoint.
     */
    customEndpoint?: string;
    /**
     * ACM certificate ARN for your custom endpoint.
     */
    customEndpointCertificateArn?: string;
    /**
     * Whether to enable custom endpoint for the OpenSearch domain.
     */
    customEndpointEnabled?: boolean;
    /**
     * Whether or not to require HTTPS. Defaults to `true`.
     */
    enforceHttps?: boolean;
    /**
     * Name of the TLS security policy that needs to be applied to the HTTPS endpoint. For valid values, refer to the [AWS documentation](https://docs.aws.amazon.com/opensearch-service/latest/APIReference/API_DomainEndpointOptions.html#opensearchservice-Type-DomainEndpointOptions-TLSSecurityPolicy). Pulumi will only perform drift detection if a configuration value is provided.
     */
    tlsSecurityPolicy: string;
}
export interface DomainEbsOptions {
    /**
     * Whether EBS volumes are attached to data nodes in the domain.
     */
    ebsEnabled: boolean;
    /**
     * Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
     */
    iops: number;
    /**
     * Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type.
     */
    throughput: number;
    /**
     * Size of EBS volumes attached to data nodes (in GiB).
     */
    volumeSize?: number;
    /**
     * Type of EBS volumes attached to data nodes.
     */
    volumeType: string;
}
export interface DomainEncryptAtRest {
    /**
     * Whether to enable encryption at rest. If the `encryptAtRest` block is not provided then this defaults to `false`. Enabling encryption on new domains requires an `engineVersion` of `OpenSearch_X.Y` or `Elasticsearch_5.1` or greater.
     */
    enabled: boolean;
    /**
     * KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN. To prevent the provider detecting unwanted changes, use the key ARN instead.
     */
    kmsKeyId: string;
}
export interface DomainLogPublishingOption {
    /**
     * ARN of the Cloudwatch log group to which log needs to be published.
     */
    cloudwatchLogGroupArn: string;
    /**
     * Whether given log publishing option is enabled or not.
     */
    enabled?: boolean;
    /**
     * Type of OpenSearch log. Valid values: `INDEX_SLOW_LOGS`, `SEARCH_SLOW_LOGS`, `ES_APPLICATION_LOGS`, `AUDIT_LOGS`.
     */
    logType: string;
}
export interface DomainNodeToNodeEncryption {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `engineVersion` of `OpenSearch_X.Y` or `Elasticsearch_6.0` or greater.
     */
    enabled: boolean;
}
export interface DomainOffPeakWindowOptions {
    /**
     * Enabled disabled toggle for off-peak update window.
     */
    enabled: boolean;
    offPeakWindow: outputs.DomainOffPeakWindowOptionsOffPeakWindow;
}
export interface DomainOffPeakWindowOptionsOffPeakWindow {
    /**
     * 10h window for updates
     */
    windowStartTime: outputs.DomainOffPeakWindowOptionsOffPeakWindowWindowStartTime;
}
export interface DomainOffPeakWindowOptionsOffPeakWindowWindowStartTime {
    hours: number;
    minutes: number;
}
export interface DomainSamlOptionsSamlOptions {
    /**
     * Whether SAML authentication is enabled.
     */
    enabled?: boolean;
    /**
     * Information from your identity provider.
     */
    idp?: outputs.DomainSamlOptionsSamlOptionsIdp;
    /**
     * This backend role from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
     */
    masterBackendRole?: string;
    /**
     * This username from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
     */
    masterUserName?: string;
    /**
     * Element of the SAML assertion to use for backend roles. Default is roles.
     */
    rolesKey?: string;
    /**
     * Duration of a session in minutes after a user logs in. Default is 60. Maximum value is 1,440.
     */
    sessionTimeoutMinutes?: number;
    /**
     * Element of the SAML assertion to use for username. Default is NameID.
     */
    subjectKey?: string;
}
export interface DomainSamlOptionsSamlOptionsIdp {
    /**
     * Unique Entity ID of the application in SAML Identity Provider.
     */
    entityId: string;
    /**
     * Metadata of the SAML application in xml format.
     */
    metadataContent: string;
}
export interface DomainSnapshotOptions {
    /**
     * Hour during which the service takes an automated daily snapshot of the indices in the domain.
     */
    automatedSnapshotStartHour: number;
}
export interface DomainSoftwareUpdateOptions {
    /**
     * Whether automatic service software updates are enabled for the domain. Defaults to `false`.
     */
    autoSoftwareUpdateEnabled: boolean;
}
export interface DomainVpcOptions {
    /**
     * If the domain was created inside a VPC, the names of the availability zones the configured `subnetIds` were created inside.
     */
    availabilityZones: string[];
    /**
     * List of VPC Security Group IDs to be applied to the OpenSearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
     */
    securityGroupIds?: string[];
    /**
     * List of VPC Subnet IDs for the OpenSearch domain endpoints to be created in.
     */
    subnetIds?: string[];
    /**
     * If the domain was created inside a VPC, the ID of the VPC.
     */
    vpcId: string;
}
export interface OutboundConnectionConnectionProperties {
    /**
     * Configuration block for cross cluster search.
     */
    crossClusterSearch?: outputs.OutboundConnectionConnectionPropertiesCrossClusterSearch;
    /**
     * The endpoint of the remote domain, is only set when `connectionMode` is `VPC_ENDPOINT` and `acceptConnection` is `TRUE`.
     */
    endpoint: string;
}
export interface OutboundConnectionConnectionPropertiesCrossClusterSearch {
    /**
     * Skips unavailable clusters and can only be used for cross-cluster searches. Accepted values are `ENABLED` or `DISABLED`.
     */
    skipUnavailable?: string;
}
export interface OutboundConnectionLocalDomainInfo {
    /**
     * The name of the local domain.
     */
    domainName: string;
    /**
     * The Account ID of the owner of the local domain.
     */
    ownerId: string;
    /**
     * The region of the local domain.
     */
    region: string;
}
export interface OutboundConnectionRemoteDomainInfo {
    /**
     * The name of the remote domain.
     */
    domainName: string;
    /**
     * The Account ID of the owner of the remote domain.
     */
    ownerId: string;
    /**
     * The region of the remote domain.
     */
    region: string;
}
export interface PackagePackageSource {
    /**
     * The name of the Amazon S3 bucket containing the package.
     */
    s3BucketName: string;
    /**
     * Key (file name) of the package.
     */
    s3Key: string;
}
export interface ServerlessCollectionTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
}
export interface ServerlessSecurityConfigSamlOptions {
    /**
     * Group attribute for this SAML integration.
     */
    groupAttribute?: string;
    /**
     * The XML IdP metadata file generated from your identity provider.
     */
    metadata: string;
    /**
     * Session timeout, in minutes. Minimum is 5 minutes and maximum is 720 minutes (12 hours). Default is 60 minutes.
     */
    sessionTimeout: number;
    /**
     * User attribute for this SAML integration.
     */
    userAttribute?: string;
}
export interface ServerlessVpcEndpointTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface VpcEndpointVpcOptions {
    availabilityZones: string[];
    /**
     * The list of security group IDs associated with the VPC endpoints for the domain. If you do not provide a security group ID, OpenSearch Service uses the default security group for the VPC.
     */
    securityGroupIds: string[];
    /**
     * A list of subnet IDs associated with the VPC endpoints for the domain. If your domain uses multiple Availability Zones, you need to provide two subnet IDs, one per zone. Otherwise, provide only one.
     */
    subnetIds: string[];
    vpcId: string;
}
export interface GetDomainAdvancedSecurityOption {
    anonymousAuthEnabled: boolean;
    /**
     * Enabled disabled toggle for off-peak update window
     */
    enabled: boolean;
    /**
     * Whether the internal user database is enabled.
     */
    internalUserDatabaseEnabled: boolean;
}
export interface GetDomainAutoTuneOption {
    /**
     * Auto-Tune desired state for the domain.
     */
    desiredState: string;
    /**
     * A list of the nested configurations for the Auto-Tune maintenance windows of the domain.
     */
    maintenanceSchedules: outputs.GetDomainAutoTuneOptionMaintenanceSchedule[];
    /**
     * Whether the domain is set to roll back to default Auto-Tune settings when disabling Auto-Tune.
     */
    rollbackOnDisable: string;
    /**
     * Whether to schedule Auto-Tune optimizations that require blue/green deployments during the domain's configured daily off-peak window.
     */
    useOffPeakWindow: boolean;
}
export interface GetDomainAutoTuneOptionMaintenanceSchedule {
    /**
     * Cron expression for an Auto-Tune maintenance schedule.
     */
    cronExpressionForRecurrence: string;
    /**
     * Configuration block for the duration of the Auto-Tune maintenance window.
     */
    durations: outputs.GetDomainAutoTuneOptionMaintenanceScheduleDuration[];
    /**
     * Date and time at which the Auto-Tune maintenance schedule starts in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     */
    startAt: string;
}
export interface GetDomainAutoTuneOptionMaintenanceScheduleDuration {
    /**
     * Unit of time.
     */
    unit: string;
    /**
     * Duration of an Auto-Tune maintenance window.
     */
    value: number;
}
export interface GetDomainClusterConfig {
    /**
     * Configuration block containing cold storage configuration.
     */
    coldStorageOptions: outputs.GetDomainClusterConfigColdStorageOption[];
    /**
     * Number of dedicated master nodes in the cluster.
     */
    dedicatedMasterCount: number;
    /**
     * Indicates whether dedicated master nodes are enabled for the cluster.
     */
    dedicatedMasterEnabled: boolean;
    /**
     * Instance type of the dedicated master nodes in the cluster.
     */
    dedicatedMasterType: string;
    /**
     * Number of instances in the cluster.
     */
    instanceCount: number;
    /**
     * Instance type of data nodes in the cluster.
     */
    instanceType: string;
    /**
     * Whether a multi-AZ domain is turned on with a standby AZ.
     */
    multiAzWithStandbyEnabled: boolean;
    /**
     * Number of warm nodes in the cluster.
     */
    warmCount: number;
    /**
     * Warm storage is enabled.
     */
    warmEnabled?: boolean;
    /**
     * Instance type for the OpenSearch cluster's warm nodes.
     */
    warmType: string;
    /**
     * Configuration block containing zone awareness settings.
     */
    zoneAwarenessConfigs: outputs.GetDomainClusterConfigZoneAwarenessConfig[];
    /**
     * Indicates whether zone awareness is enabled.
     */
    zoneAwarenessEnabled: boolean;
}
export interface GetDomainClusterConfigColdStorageOption {
    /**
     * Enabled disabled toggle for off-peak update window
     */
    enabled: boolean;
}
export interface GetDomainClusterConfigZoneAwarenessConfig {
    /**
     * Number of availability zones used.
     */
    availabilityZoneCount: number;
}
export interface GetDomainCognitoOption {
    /**
     * Enabled disabled toggle for off-peak update window
     */
    enabled: boolean;
    /**
     * Cognito Identity pool used by the domain.
     */
    identityPoolId: string;
    /**
     * IAM Role with the AmazonOpenSearchServiceCognitoAccess policy attached.
     */
    roleArn: string;
    /**
     * Cognito User pool used by the domain.
     */
    userPoolId: string;
}
export interface GetDomainEbsOption {
    /**
     * Whether EBS volumes are attached to data nodes in the domain.
     */
    ebsEnabled: boolean;
    /**
     * Baseline input/output (I/O) performance of EBS volumes attached to data nodes.
     */
    iops: number;
    /**
     * The throughput (in MiB/s) of the EBS volumes attached to data nodes.
     */
    throughput: number;
    /**
     * Size of EBS volumes attached to data nodes (in GB).
     */
    volumeSize: number;
    /**
     * Type of EBS volumes attached to data nodes.
     */
    volumeType: string;
}
export interface GetDomainEncryptionAtRest {
    /**
     * Enabled disabled toggle for off-peak update window
     */
    enabled: boolean;
    /**
     * KMS key id used to encrypt data at rest.
     */
    kmsKeyId: string;
}
export interface GetDomainLogPublishingOption {
    /**
     * CloudWatch Log Group where the logs are published.
     */
    cloudwatchLogGroupArn: string;
    /**
     * Enabled disabled toggle for off-peak update window
     */
    enabled: boolean;
    /**
     * Type of OpenSearch log being published.
     */
    logType: string;
}
export interface GetDomainNodeToNodeEncryption {
    /**
     * Enabled disabled toggle for off-peak update window
     */
    enabled: boolean;
}
export interface GetDomainSnapshotOption {
    /**
     * Hour during which the service takes an automated daily snapshot of the indices in the domain.
     */
    automatedSnapshotStartHour: number;
}
export interface GetDomainSoftwareUpdateOption {
    /**
     * Enabled or disabled.
     */
    autoSoftwareUpdateEnabled: boolean;
}
export interface GetDomainVpcOption {
    /**
     * Availability zones used by the domain.
     */
    availabilityZones: string[];
    /**
     * Security groups used by the domain.
     */
    securityGroupIds: string[];
    /**
     * Subnets used by the domain.
     */
    subnetIds: string[];
    /**
     * VPC used by the domain.
     */
    vpcId: string;
}
