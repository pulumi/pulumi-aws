// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages an [AWS Opensearch VPC Endpoint](https://docs.aws.amazon.com/opensearch-service/latest/APIReference/API_CreateVpcEndpoint.html). Creates an Amazon OpenSearch Service-managed VPC endpoint.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.opensearch.VpcEndpoint("foo", {
 *     domainArn: aws_opensearch_domain.domain_1.arn,
 *     vpcOptions: {
 *         securityGroupIds: [
 *             aws_security_group.test.id,
 *             aws_security_group.test2.id,
 *         ],
 *         subnetIds: [
 *             aws_subnet.test.id,
 *             aws_subnet.test2.id,
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * In TODO v1.5.0 and later, use an `import` block to import OpenSearch VPC endpoint connections using the `id`. For exampleterraform import {
 *
 *  to = aws_opensearch_vpc_endpoint_connection.example
 *
 *  id = "endpoint-id" } Using `TODO import`, import OpenSearch VPC endpoint connections using the `id`. For exampleconsole % TODO import aws_opensearch_vpc_endpoint_connection.example endpoint-id
 */
export class VpcEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing VpcEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcEndpointState, opts?: pulumi.CustomResourceOptions): VpcEndpoint {
        return new VpcEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opensearch/vpcEndpoint:VpcEndpoint';

    /**
     * Returns true if the given object is an instance of VpcEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpoint.__pulumiType;
    }

    /**
     * Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
     */
    public readonly domainArn!: pulumi.Output<string>;
    /**
     * The connection endpoint ID for connecting to the domain.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * Options to specify the subnets and security groups for the endpoint.
     */
    public readonly vpcOptions!: pulumi.Output<outputs.opensearch.VpcEndpointVpcOptions>;

    /**
     * Create a VpcEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcEndpointArgs | VpcEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcEndpointState | undefined;
            resourceInputs["domainArn"] = state ? state.domainArn : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["vpcOptions"] = state ? state.vpcOptions : undefined;
        } else {
            const args = argsOrState as VpcEndpointArgs | undefined;
            if ((!args || args.domainArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainArn'");
            }
            if ((!args || args.vpcOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcOptions'");
            }
            resourceInputs["domainArn"] = args ? args.domainArn : undefined;
            resourceInputs["vpcOptions"] = args ? args.vpcOptions : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcEndpoint resources.
 */
export interface VpcEndpointState {
    /**
     * Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
     */
    domainArn?: pulumi.Input<string>;
    /**
     * The connection endpoint ID for connecting to the domain.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Options to specify the subnets and security groups for the endpoint.
     */
    vpcOptions?: pulumi.Input<inputs.opensearch.VpcEndpointVpcOptions>;
}

/**
 * The set of arguments for constructing a VpcEndpoint resource.
 */
export interface VpcEndpointArgs {
    /**
     * Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
     */
    domainArn: pulumi.Input<string>;
    /**
     * Options to specify the subnets and security groups for the endpoint.
     */
    vpcOptions: pulumi.Input<inputs.opensearch.VpcEndpointVpcOptions>;
}
