// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an AWS Opensearch Package Association.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myDomain = new aws.opensearch.Domain("myDomain", {
 *     engineVersion: "Elasticsearch_7.10",
 *     clusterConfig: {
 *         instanceType: "r4.large.search",
 *     },
 * });
 * const examplePackage = new aws.opensearch.Package("examplePackage", {
 *     packageName: "example-txt",
 *     packageSource: {
 *         s3BucketName: aws_s3_bucket.my_opensearch_packages.bucket,
 *         s3Key: aws_s3_object.example.key,
 *     },
 *     packageType: "TXT-DICTIONARY",
 * });
 * const examplePackageAssociation = new aws.opensearch.PackageAssociation("examplePackageAssociation", {
 *     packageId: examplePackage.id,
 *     domainName: myDomain.domainName,
 * });
 * ```
 */
export class PackageAssociation extends pulumi.CustomResource {
    /**
     * Get an existing PackageAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackageAssociationState, opts?: pulumi.CustomResourceOptions): PackageAssociation {
        return new PackageAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opensearch/packageAssociation:PackageAssociation';

    /**
     * Returns true if the given object is an instance of PackageAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackageAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackageAssociation.__pulumiType;
    }

    /**
     * Name of the domain to associate the package with.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Internal ID of the package to associate with a domain.
     */
    public readonly packageId!: pulumi.Output<string>;
    public /*out*/ readonly referencePath!: pulumi.Output<string>;

    /**
     * Create a PackageAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackageAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackageAssociationArgs | PackageAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackageAssociationState | undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["packageId"] = state ? state.packageId : undefined;
            resourceInputs["referencePath"] = state ? state.referencePath : undefined;
        } else {
            const args = argsOrState as PackageAssociationArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.packageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageId'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["packageId"] = args ? args.packageId : undefined;
            resourceInputs["referencePath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackageAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PackageAssociation resources.
 */
export interface PackageAssociationState {
    /**
     * Name of the domain to associate the package with.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Internal ID of the package to associate with a domain.
     */
    packageId?: pulumi.Input<string>;
    referencePath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackageAssociation resource.
 */
export interface PackageAssociationArgs {
    /**
     * Name of the domain to associate the package with.
     */
    domainName: pulumi.Input<string>;
    /**
     * Internal ID of the package to associate with a domain.
     */
    packageId: pulumi.Input<string>;
}
