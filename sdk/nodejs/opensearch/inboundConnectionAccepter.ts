// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an [AWS Opensearch Inbound Connection Accepter](https://docs.aws.amazon.com/opensearch-service/latest/APIReference/API_AcceptInboundConnection.html). If connecting domains from different AWS accounts, ensure that the accepter is configured to use the AWS account where the _remote_ opensearch domain exists.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const currentCallerIdentity = aws.getCallerIdentity({});
 * const currentRegion = aws.getRegion({});
 * const fooOutboundConnection = new aws.opensearch.OutboundConnection("fooOutboundConnection", {
 *     connectionAlias: "outbound_connection",
 *     localDomainInfo: {
 *         ownerId: currentCallerIdentity.then(currentCallerIdentity => currentCallerIdentity.accountId),
 *         region: currentRegion.then(currentRegion => currentRegion.name),
 *         domainName: aws_opensearch_domain.local_domain.domain_name,
 *     },
 *     remoteDomainInfo: {
 *         ownerId: currentCallerIdentity.then(currentCallerIdentity => currentCallerIdentity.accountId),
 *         region: currentRegion.then(currentRegion => currentRegion.name),
 *         domainName: aws_opensearch_domain.remote_domain.domain_name,
 *     },
 * });
 * const fooInboundConnectionAccepter = new aws.opensearch.InboundConnectionAccepter("fooInboundConnectionAccepter", {connectionId: fooOutboundConnection.id});
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_opensearch_inbound_connection_accepter.foo
 *
 *  id = "connection-id" } Using `pulumi import`, import AWS Opensearch Inbound Connection Accepters using the Inbound Connection ID. For exampleconsole % pulumi import aws_opensearch_inbound_connection_accepter.foo connection-id
 */
export class InboundConnectionAccepter extends pulumi.CustomResource {
    /**
     * Get an existing InboundConnectionAccepter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InboundConnectionAccepterState, opts?: pulumi.CustomResourceOptions): InboundConnectionAccepter {
        return new InboundConnectionAccepter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opensearch/inboundConnectionAccepter:InboundConnectionAccepter';

    /**
     * Returns true if the given object is an instance of InboundConnectionAccepter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InboundConnectionAccepter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InboundConnectionAccepter.__pulumiType;
    }

    /**
     * Specifies the ID of the connection to accept.
     */
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * Status of the connection request.
     */
    public /*out*/ readonly connectionStatus!: pulumi.Output<string>;

    /**
     * Create a InboundConnectionAccepter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InboundConnectionAccepterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InboundConnectionAccepterArgs | InboundConnectionAccepterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InboundConnectionAccepterState | undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["connectionStatus"] = state ? state.connectionStatus : undefined;
        } else {
            const args = argsOrState as InboundConnectionAccepterArgs | undefined;
            if ((!args || args.connectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["connectionStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InboundConnectionAccepter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InboundConnectionAccepter resources.
 */
export interface InboundConnectionAccepterState {
    /**
     * Specifies the ID of the connection to accept.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * Status of the connection request.
     */
    connectionStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InboundConnectionAccepter resource.
 */
export interface InboundConnectionAccepterArgs {
    /**
     * Specifies the ID of the connection to accept.
     */
    connectionId: pulumi.Input<string>;
}
