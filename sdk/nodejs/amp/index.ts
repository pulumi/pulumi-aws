// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlertManagerDefinitionArgs, AlertManagerDefinitionState } from "./alertManagerDefinition";
export type AlertManagerDefinition = import("./alertManagerDefinition").AlertManagerDefinition;
export const AlertManagerDefinition: typeof import("./alertManagerDefinition").AlertManagerDefinition = null as any;
utilities.lazyLoad(exports, ["AlertManagerDefinition"], () => require("./alertManagerDefinition"));

export { GetDefaultScraperConfigurationArgs, GetDefaultScraperConfigurationResult, GetDefaultScraperConfigurationOutputArgs } from "./getDefaultScraperConfiguration";
export const getDefaultScraperConfiguration: typeof import("./getDefaultScraperConfiguration").getDefaultScraperConfiguration = null as any;
export const getDefaultScraperConfigurationOutput: typeof import("./getDefaultScraperConfiguration").getDefaultScraperConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultScraperConfiguration","getDefaultScraperConfigurationOutput"], () => require("./getDefaultScraperConfiguration"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { GetWorkspacesArgs, GetWorkspacesResult, GetWorkspacesOutputArgs } from "./getWorkspaces";
export const getWorkspaces: typeof import("./getWorkspaces").getWorkspaces = null as any;
export const getWorkspacesOutput: typeof import("./getWorkspaces").getWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaces","getWorkspacesOutput"], () => require("./getWorkspaces"));

export { QueryLoggingConfigurationArgs, QueryLoggingConfigurationState } from "./queryLoggingConfiguration";
export type QueryLoggingConfiguration = import("./queryLoggingConfiguration").QueryLoggingConfiguration;
export const QueryLoggingConfiguration: typeof import("./queryLoggingConfiguration").QueryLoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["QueryLoggingConfiguration"], () => require("./queryLoggingConfiguration"));

export { ResourcePolicyArgs, ResourcePolicyState } from "./resourcePolicy";
export type ResourcePolicy = import("./resourcePolicy").ResourcePolicy;
export const ResourcePolicy: typeof import("./resourcePolicy").ResourcePolicy = null as any;
utilities.lazyLoad(exports, ["ResourcePolicy"], () => require("./resourcePolicy"));

export { RuleGroupNamespaceArgs, RuleGroupNamespaceState } from "./ruleGroupNamespace";
export type RuleGroupNamespace = import("./ruleGroupNamespace").RuleGroupNamespace;
export const RuleGroupNamespace: typeof import("./ruleGroupNamespace").RuleGroupNamespace = null as any;
utilities.lazyLoad(exports, ["RuleGroupNamespace"], () => require("./ruleGroupNamespace"));

export { ScraperArgs, ScraperState } from "./scraper";
export type Scraper = import("./scraper").Scraper;
export const Scraper: typeof import("./scraper").Scraper = null as any;
utilities.lazyLoad(exports, ["Scraper"], () => require("./scraper"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceConfigurationArgs, WorkspaceConfigurationState } from "./workspaceConfiguration";
export type WorkspaceConfiguration = import("./workspaceConfiguration").WorkspaceConfiguration;
export const WorkspaceConfiguration: typeof import("./workspaceConfiguration").WorkspaceConfiguration = null as any;
utilities.lazyLoad(exports, ["WorkspaceConfiguration"], () => require("./workspaceConfiguration"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:amp/alertManagerDefinition:AlertManagerDefinition":
                return new AlertManagerDefinition(name, <any>undefined, { urn })
            case "aws:amp/queryLoggingConfiguration:QueryLoggingConfiguration":
                return new QueryLoggingConfiguration(name, <any>undefined, { urn })
            case "aws:amp/resourcePolicy:ResourcePolicy":
                return new ResourcePolicy(name, <any>undefined, { urn })
            case "aws:amp/ruleGroupNamespace:RuleGroupNamespace":
                return new RuleGroupNamespace(name, <any>undefined, { urn })
            case "aws:amp/scraper:Scraper":
                return new Scraper(name, <any>undefined, { urn })
            case "aws:amp/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "aws:amp/workspaceConfiguration:WorkspaceConfiguration":
                return new WorkspaceConfiguration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "amp/alertManagerDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "amp/queryLoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "amp/resourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "amp/ruleGroupNamespace", _module)
pulumi.runtime.registerResourceModule("aws", "amp/scraper", _module)
pulumi.runtime.registerResourceModule("aws", "amp/workspace", _module)
pulumi.runtime.registerResourceModule("aws", "amp/workspaceConfiguration", _module)
