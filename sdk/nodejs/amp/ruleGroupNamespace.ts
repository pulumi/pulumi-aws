// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Amazon Managed Service for Prometheus (AMP) Rule Group Namespace
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const demoWorkspace = new aws.amp.Workspace("demoWorkspace", {});
 * const demoRuleGroupNamespace = new aws.amp.RuleGroupNamespace("demoRuleGroupNamespace", {
 *     workspaceId: demoWorkspace.id,
 *     data: `groups:
 *   - name: test
 *     rules:
 *     - record: metric:recording_rule
 *       expr: avg(rate(container_cpu_usage_seconds_total[5m]))
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * The prometheus rule group namespace can be imported using the arn, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:amp/ruleGroupNamespace:RuleGroupNamespace demo arn:aws:aps:us-west-2:123456789012:rulegroupsnamespace/IDstring/namespace_name
 * ```
 */
export class RuleGroupNamespace extends pulumi.CustomResource {
    /**
     * Get an existing RuleGroupNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleGroupNamespaceState, opts?: pulumi.CustomResourceOptions): RuleGroupNamespace {
        return new RuleGroupNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:amp/ruleGroupNamespace:RuleGroupNamespace';

    /**
     * Returns true if the given object is an instance of RuleGroupNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleGroupNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleGroupNamespace.__pulumiType;
    }

    /**
     * the rule group namespace data that you want to be applied. See more [in AWS Docs](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-Ruler.html).
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * The name of the rule group namespace
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the prometheus workspace the rule group namespace should be linked to
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a RuleGroupNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleGroupNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleGroupNamespaceArgs | RuleGroupNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleGroupNamespaceState | undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as RuleGroupNamespaceArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleGroupNamespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleGroupNamespace resources.
 */
export interface RuleGroupNamespaceState {
    /**
     * the rule group namespace data that you want to be applied. See more [in AWS Docs](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-Ruler.html).
     */
    data?: pulumi.Input<string>;
    /**
     * The name of the rule group namespace
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the prometheus workspace the rule group namespace should be linked to
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RuleGroupNamespace resource.
 */
export interface RuleGroupNamespaceArgs {
    /**
     * the rule group namespace data that you want to be applied. See more [in AWS Docs](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-Ruler.html).
     */
    data: pulumi.Input<string>;
    /**
     * The name of the rule group namespace
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the prometheus workspace the rule group namespace should be linked to
     */
    workspaceId: pulumi.Input<string>;
}
