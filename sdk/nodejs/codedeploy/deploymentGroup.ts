// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class DeploymentGroup extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentGroupState, opts?: pulumi.CustomResourceOptions): DeploymentGroup {
        return new DeploymentGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:codedeploy/deploymentGroup:DeploymentGroup';

    /**
     * Returns true if the given object is an instance of DeploymentGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeploymentGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentGroup.__pulumiType;
    }

    public readonly alarmConfiguration!: pulumi.Output<outputs.codedeploy.DeploymentGroupAlarmConfiguration | undefined>;
    public readonly appName!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoRollbackConfiguration!: pulumi.Output<outputs.codedeploy.DeploymentGroupAutoRollbackConfiguration | undefined>;
    public readonly autoscalingGroups!: pulumi.Output<string[] | undefined>;
    public readonly blueGreenDeploymentConfig!: pulumi.Output<outputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfig>;
    public /*out*/ readonly computePlatform!: pulumi.Output<string>;
    public readonly deploymentConfigName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly deploymentGroupId!: pulumi.Output<string>;
    public readonly deploymentGroupName!: pulumi.Output<string>;
    public readonly deploymentStyle!: pulumi.Output<outputs.codedeploy.DeploymentGroupDeploymentStyle | undefined>;
    public readonly ec2TagFilters!: pulumi.Output<outputs.codedeploy.DeploymentGroupEc2TagFilter[] | undefined>;
    public readonly ec2TagSets!: pulumi.Output<outputs.codedeploy.DeploymentGroupEc2TagSet[] | undefined>;
    public readonly ecsService!: pulumi.Output<outputs.codedeploy.DeploymentGroupEcsService | undefined>;
    public readonly loadBalancerInfo!: pulumi.Output<outputs.codedeploy.DeploymentGroupLoadBalancerInfo | undefined>;
    public readonly onPremisesInstanceTagFilters!: pulumi.Output<outputs.codedeploy.DeploymentGroupOnPremisesInstanceTagFilter[] | undefined>;
    public readonly serviceRoleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly triggerConfigurations!: pulumi.Output<outputs.codedeploy.DeploymentGroupTriggerConfiguration[] | undefined>;

    /**
     * Create a DeploymentGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentGroupArgs | DeploymentGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentGroupState | undefined;
            resourceInputs["alarmConfiguration"] = state ? state.alarmConfiguration : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoRollbackConfiguration"] = state ? state.autoRollbackConfiguration : undefined;
            resourceInputs["autoscalingGroups"] = state ? state.autoscalingGroups : undefined;
            resourceInputs["blueGreenDeploymentConfig"] = state ? state.blueGreenDeploymentConfig : undefined;
            resourceInputs["computePlatform"] = state ? state.computePlatform : undefined;
            resourceInputs["deploymentConfigName"] = state ? state.deploymentConfigName : undefined;
            resourceInputs["deploymentGroupId"] = state ? state.deploymentGroupId : undefined;
            resourceInputs["deploymentGroupName"] = state ? state.deploymentGroupName : undefined;
            resourceInputs["deploymentStyle"] = state ? state.deploymentStyle : undefined;
            resourceInputs["ec2TagFilters"] = state ? state.ec2TagFilters : undefined;
            resourceInputs["ec2TagSets"] = state ? state.ec2TagSets : undefined;
            resourceInputs["ecsService"] = state ? state.ecsService : undefined;
            resourceInputs["loadBalancerInfo"] = state ? state.loadBalancerInfo : undefined;
            resourceInputs["onPremisesInstanceTagFilters"] = state ? state.onPremisesInstanceTagFilters : undefined;
            resourceInputs["serviceRoleArn"] = state ? state.serviceRoleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["triggerConfigurations"] = state ? state.triggerConfigurations : undefined;
        } else {
            const args = argsOrState as DeploymentGroupArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.deploymentGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentGroupName'");
            }
            if ((!args || args.serviceRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceRoleArn'");
            }
            resourceInputs["alarmConfiguration"] = args ? args.alarmConfiguration : undefined;
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["autoRollbackConfiguration"] = args ? args.autoRollbackConfiguration : undefined;
            resourceInputs["autoscalingGroups"] = args ? args.autoscalingGroups : undefined;
            resourceInputs["blueGreenDeploymentConfig"] = args ? args.blueGreenDeploymentConfig : undefined;
            resourceInputs["deploymentConfigName"] = args ? args.deploymentConfigName : undefined;
            resourceInputs["deploymentGroupName"] = args ? args.deploymentGroupName : undefined;
            resourceInputs["deploymentStyle"] = args ? args.deploymentStyle : undefined;
            resourceInputs["ec2TagFilters"] = args ? args.ec2TagFilters : undefined;
            resourceInputs["ec2TagSets"] = args ? args.ec2TagSets : undefined;
            resourceInputs["ecsService"] = args ? args.ecsService : undefined;
            resourceInputs["loadBalancerInfo"] = args ? args.loadBalancerInfo : undefined;
            resourceInputs["onPremisesInstanceTagFilters"] = args ? args.onPremisesInstanceTagFilters : undefined;
            resourceInputs["serviceRoleArn"] = args ? args.serviceRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["triggerConfigurations"] = args ? args.triggerConfigurations : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["computePlatform"] = undefined /*out*/;
            resourceInputs["deploymentGroupId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeploymentGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeploymentGroup resources.
 */
export interface DeploymentGroupState {
    alarmConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAlarmConfiguration>;
    appName?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    autoRollbackConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAutoRollbackConfiguration>;
    autoscalingGroups?: pulumi.Input<pulumi.Input<string>[]>;
    blueGreenDeploymentConfig?: pulumi.Input<inputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfig>;
    computePlatform?: pulumi.Input<string>;
    deploymentConfigName?: pulumi.Input<string>;
    deploymentGroupId?: pulumi.Input<string>;
    deploymentGroupName?: pulumi.Input<string>;
    deploymentStyle?: pulumi.Input<inputs.codedeploy.DeploymentGroupDeploymentStyle>;
    ec2TagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEc2TagFilter>[]>;
    ec2TagSets?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEc2TagSet>[]>;
    ecsService?: pulumi.Input<inputs.codedeploy.DeploymentGroupEcsService>;
    loadBalancerInfo?: pulumi.Input<inputs.codedeploy.DeploymentGroupLoadBalancerInfo>;
    onPremisesInstanceTagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupOnPremisesInstanceTagFilter>[]>;
    serviceRoleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    triggerConfigurations?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupTriggerConfiguration>[]>;
}

/**
 * The set of arguments for constructing a DeploymentGroup resource.
 */
export interface DeploymentGroupArgs {
    alarmConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAlarmConfiguration>;
    appName: pulumi.Input<string>;
    autoRollbackConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAutoRollbackConfiguration>;
    autoscalingGroups?: pulumi.Input<pulumi.Input<string>[]>;
    blueGreenDeploymentConfig?: pulumi.Input<inputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfig>;
    deploymentConfigName?: pulumi.Input<string>;
    deploymentGroupName: pulumi.Input<string>;
    deploymentStyle?: pulumi.Input<inputs.codedeploy.DeploymentGroupDeploymentStyle>;
    ec2TagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEc2TagFilter>[]>;
    ec2TagSets?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEc2TagSet>[]>;
    ecsService?: pulumi.Input<inputs.codedeploy.DeploymentGroupEcsService>;
    loadBalancerInfo?: pulumi.Input<inputs.codedeploy.DeploymentGroupLoadBalancerInfo>;
    onPremisesInstanceTagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupOnPremisesInstanceTagFilter>[]>;
    serviceRoleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    triggerConfigurations?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupTriggerConfiguration>[]>;
}
