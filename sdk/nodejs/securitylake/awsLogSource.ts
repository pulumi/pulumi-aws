// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an Amazon Security Lake AWS Log Source.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.securitylake.AwsLogSource("test", {source: {
 *     accounts: ["123456789012"],
 *     regions: ["eu-west-1"],
 *     sourceName: "ROUTE53",
 *     sourceVersion: "1.0",
 * }});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import AWS log sources using the source name. For example:
 *
 * ```sh
 * $ pulumi import aws:securitylake/awsLogSource:AwsLogSource example ROUTE53
 * ```
 */
export class AwsLogSource extends pulumi.CustomResource {
    /**
     * Get an existing AwsLogSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsLogSourceState, opts?: pulumi.CustomResourceOptions): AwsLogSource {
        return new AwsLogSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:securitylake/awsLogSource:AwsLogSource';

    /**
     * Returns true if the given object is an instance of AwsLogSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsLogSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsLogSource.__pulumiType;
    }

    /**
     * Specify the natively-supported AWS service to add as a source in Security Lake.
     */
    public readonly source!: pulumi.Output<outputs.securitylake.AwsLogSourceSource | undefined>;

    /**
     * Create a AwsLogSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AwsLogSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsLogSourceArgs | AwsLogSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsLogSourceState | undefined;
            resourceInputs["source"] = state ? state.source : undefined;
        } else {
            const args = argsOrState as AwsLogSourceArgs | undefined;
            resourceInputs["source"] = args ? args.source : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsLogSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsLogSource resources.
 */
export interface AwsLogSourceState {
    /**
     * Specify the natively-supported AWS service to add as a source in Security Lake.
     */
    source?: pulumi.Input<inputs.securitylake.AwsLogSourceSource>;
}

/**
 * The set of arguments for constructing a AwsLogSource resource.
 */
export interface AwsLogSourceArgs {
    /**
     * Specify the natively-supported AWS service to add as a source in Security Lake.
     */
    source?: pulumi.Input<inputs.securitylake.AwsLogSourceSource>;
}
