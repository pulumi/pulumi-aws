// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Security Lake Custom Log Source.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.securitylake.CustomLogSource("example", {
 *     sourceName: "example-name",
 *     sourceVersion: "1.0",
 *     eventClasses: ["FILE_ACTIVITY"],
 *     configuration: {
 *         crawlerConfiguration: {
 *             roleArn: customLog.arn,
 *         },
 *         providerIdentity: {
 *             externalId: "example-id",
 *             principal: "123456789012",
 *         },
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import Custom log sources using the source name. For example:
 *
 * ```sh
 * $ pulumi import aws:securitylake/customLogSource:CustomLogSource example example-name
 * ```
 */
export class CustomLogSource extends pulumi.CustomResource {
    /**
     * Get an existing CustomLogSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomLogSourceState, opts?: pulumi.CustomResourceOptions): CustomLogSource {
        return new CustomLogSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:securitylake/customLogSource:CustomLogSource';

    /**
     * Returns true if the given object is an instance of CustomLogSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomLogSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomLogSource.__pulumiType;
    }

    /**
     * The attributes of a third-party custom source.
     */
    public /*out*/ readonly attributes!: pulumi.Output<outputs.securitylake.CustomLogSourceAttribute[]>;
    /**
     * The configuration for the third-party custom source.
     */
    public readonly configuration!: pulumi.Output<outputs.securitylake.CustomLogSourceConfiguration | undefined>;
    /**
     * The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake.
     */
    public readonly eventClasses!: pulumi.Output<string[] | undefined>;
    /**
     * The details of the log provider for a third-party custom source.
     */
    public /*out*/ readonly providerDetails!: pulumi.Output<outputs.securitylake.CustomLogSourceProviderDetail[]>;
    /**
     * Specify the name for a third-party custom source. This must be a Regionally unique value.
     */
    public readonly sourceName!: pulumi.Output<string>;
    /**
     * Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
     */
    public readonly sourceVersion!: pulumi.Output<string>;

    /**
     * Create a CustomLogSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomLogSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomLogSourceArgs | CustomLogSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomLogSourceState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["eventClasses"] = state ? state.eventClasses : undefined;
            resourceInputs["providerDetails"] = state ? state.providerDetails : undefined;
            resourceInputs["sourceName"] = state ? state.sourceName : undefined;
            resourceInputs["sourceVersion"] = state ? state.sourceVersion : undefined;
        } else {
            const args = argsOrState as CustomLogSourceArgs | undefined;
            if ((!args || args.sourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceName'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["eventClasses"] = args ? args.eventClasses : undefined;
            resourceInputs["sourceName"] = args ? args.sourceName : undefined;
            resourceInputs["sourceVersion"] = args ? args.sourceVersion : undefined;
            resourceInputs["attributes"] = undefined /*out*/;
            resourceInputs["providerDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomLogSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomLogSource resources.
 */
export interface CustomLogSourceState {
    /**
     * The attributes of a third-party custom source.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.securitylake.CustomLogSourceAttribute>[]>;
    /**
     * The configuration for the third-party custom source.
     */
    configuration?: pulumi.Input<inputs.securitylake.CustomLogSourceConfiguration>;
    /**
     * The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake.
     */
    eventClasses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The details of the log provider for a third-party custom source.
     */
    providerDetails?: pulumi.Input<pulumi.Input<inputs.securitylake.CustomLogSourceProviderDetail>[]>;
    /**
     * Specify the name for a third-party custom source. This must be a Regionally unique value.
     */
    sourceName?: pulumi.Input<string>;
    /**
     * Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
     */
    sourceVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomLogSource resource.
 */
export interface CustomLogSourceArgs {
    /**
     * The configuration for the third-party custom source.
     */
    configuration?: pulumi.Input<inputs.securitylake.CustomLogSourceConfiguration>;
    /**
     * The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake.
     */
    eventClasses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify the name for a third-party custom source. This must be a Regionally unique value.
     */
    sourceName: pulumi.Input<string>;
    /**
     * Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
     */
    sourceVersion?: pulumi.Input<string>;
}
