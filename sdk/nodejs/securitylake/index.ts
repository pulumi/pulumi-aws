// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AwsLogSourceArgs, AwsLogSourceState } from "./awsLogSource";
export type AwsLogSource = import("./awsLogSource").AwsLogSource;
export const AwsLogSource: typeof import("./awsLogSource").AwsLogSource = null as any;
utilities.lazyLoad(exports, ["AwsLogSource"], () => require("./awsLogSource"));

export { CustomLogSourceArgs, CustomLogSourceState } from "./customLogSource";
export type CustomLogSource = import("./customLogSource").CustomLogSource;
export const CustomLogSource: typeof import("./customLogSource").CustomLogSource = null as any;
utilities.lazyLoad(exports, ["CustomLogSource"], () => require("./customLogSource"));

export { DataLakeArgs, DataLakeState } from "./dataLake";
export type DataLake = import("./dataLake").DataLake;
export const DataLake: typeof import("./dataLake").DataLake = null as any;
utilities.lazyLoad(exports, ["DataLake"], () => require("./dataLake"));

export { SubscriberArgs, SubscriberState } from "./subscriber";
export type Subscriber = import("./subscriber").Subscriber;
export const Subscriber: typeof import("./subscriber").Subscriber = null as any;
utilities.lazyLoad(exports, ["Subscriber"], () => require("./subscriber"));

export { SubscriberNotificationArgs, SubscriberNotificationState } from "./subscriberNotification";
export type SubscriberNotification = import("./subscriberNotification").SubscriberNotification;
export const SubscriberNotification: typeof import("./subscriberNotification").SubscriberNotification = null as any;
utilities.lazyLoad(exports, ["SubscriberNotification"], () => require("./subscriberNotification"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:securitylake/awsLogSource:AwsLogSource":
                return new AwsLogSource(name, <any>undefined, { urn })
            case "aws:securitylake/customLogSource:CustomLogSource":
                return new CustomLogSource(name, <any>undefined, { urn })
            case "aws:securitylake/dataLake:DataLake":
                return new DataLake(name, <any>undefined, { urn })
            case "aws:securitylake/subscriber:Subscriber":
                return new Subscriber(name, <any>undefined, { urn })
            case "aws:securitylake/subscriberNotification:SubscriberNotification":
                return new SubscriberNotification(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "securitylake/awsLogSource", _module)
pulumi.runtime.registerResourceModule("aws", "securitylake/customLogSource", _module)
pulumi.runtime.registerResourceModule("aws", "securitylake/dataLake", _module)
pulumi.runtime.registerResourceModule("aws", "securitylake/subscriber", _module)
pulumi.runtime.registerResourceModule("aws", "securitylake/subscriberNotification", _module)
