// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class SecretRotation extends pulumi.CustomResource {
    /**
     * Get an existing SecretRotation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretRotationState, opts?: pulumi.CustomResourceOptions): SecretRotation {
        return new SecretRotation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:secretsmanager/secretRotation:SecretRotation';

    /**
     * Returns true if the given object is an instance of SecretRotation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretRotation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretRotation.__pulumiType;
    }

    public /*out*/ readonly rotationEnabled!: pulumi.Output<boolean>;
    public readonly rotationLambdaArn!: pulumi.Output<string>;
    public readonly rotationRules!: pulumi.Output<outputs.secretsmanager.SecretRotationRotationRules>;
    public readonly secretId!: pulumi.Output<string>;

    /**
     * Create a SecretRotation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretRotationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretRotationArgs | SecretRotationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretRotationState | undefined;
            resourceInputs["rotationEnabled"] = state ? state.rotationEnabled : undefined;
            resourceInputs["rotationLambdaArn"] = state ? state.rotationLambdaArn : undefined;
            resourceInputs["rotationRules"] = state ? state.rotationRules : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
        } else {
            const args = argsOrState as SecretRotationArgs | undefined;
            if ((!args || args.rotationLambdaArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rotationLambdaArn'");
            }
            if ((!args || args.rotationRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rotationRules'");
            }
            if ((!args || args.secretId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretId'");
            }
            resourceInputs["rotationLambdaArn"] = args ? args.rotationLambdaArn : undefined;
            resourceInputs["rotationRules"] = args ? args.rotationRules : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["rotationEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretRotation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretRotation resources.
 */
export interface SecretRotationState {
    rotationEnabled?: pulumi.Input<boolean>;
    rotationLambdaArn?: pulumi.Input<string>;
    rotationRules?: pulumi.Input<inputs.secretsmanager.SecretRotationRotationRules>;
    secretId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretRotation resource.
 */
export interface SecretRotationArgs {
    rotationLambdaArn: pulumi.Input<string>;
    rotationRules: pulumi.Input<inputs.secretsmanager.SecretRotationRotationRules>;
    secretId: pulumi.Input<string>;
}
