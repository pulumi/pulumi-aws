// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Secret extends pulumi.CustomResource {
    /**
     * Get an existing Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretState, opts?: pulumi.CustomResourceOptions): Secret {
        return new Secret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:secretsmanager/secret:Secret';

    /**
     * Returns true if the given object is an instance of Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secret.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly forceOverwriteReplicaSecret!: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string>;
    public readonly policy!: pulumi.Output<string>;
    public readonly recoveryWindowInDays!: pulumi.Output<number | undefined>;
    public readonly replicas!: pulumi.Output<outputs.secretsmanager.SecretReplica[]>;
    /**
     * @deprecated Use the aws_secretsmanager_secret_rotation resource instead
     */
    public /*out*/ readonly rotationEnabled!: pulumi.Output<boolean>;
    /**
     * @deprecated Use the aws_secretsmanager_secret_rotation resource instead
     */
    public readonly rotationLambdaArn!: pulumi.Output<string>;
    /**
     * @deprecated Use the aws_secretsmanager_secret_rotation resource instead
     */
    public readonly rotationRules!: pulumi.Output<outputs.secretsmanager.SecretRotationRules>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Secret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretArgs | SecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forceOverwriteReplicaSecret"] = state ? state.forceOverwriteReplicaSecret : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["recoveryWindowInDays"] = state ? state.recoveryWindowInDays : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["rotationEnabled"] = state ? state.rotationEnabled : undefined;
            resourceInputs["rotationLambdaArn"] = state ? state.rotationLambdaArn : undefined;
            resourceInputs["rotationRules"] = state ? state.rotationRules : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as SecretArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forceOverwriteReplicaSecret"] = args ? args.forceOverwriteReplicaSecret : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["recoveryWindowInDays"] = args ? args.recoveryWindowInDays : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["rotationLambdaArn"] = args ? args.rotationLambdaArn : undefined;
            resourceInputs["rotationRules"] = args ? args.rotationRules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["rotationEnabled"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Secret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Secret resources.
 */
export interface SecretState {
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    forceOverwriteReplicaSecret?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    recoveryWindowInDays?: pulumi.Input<number>;
    replicas?: pulumi.Input<pulumi.Input<inputs.secretsmanager.SecretReplica>[]>;
    /**
     * @deprecated Use the aws_secretsmanager_secret_rotation resource instead
     */
    rotationEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Use the aws_secretsmanager_secret_rotation resource instead
     */
    rotationLambdaArn?: pulumi.Input<string>;
    /**
     * @deprecated Use the aws_secretsmanager_secret_rotation resource instead
     */
    rotationRules?: pulumi.Input<inputs.secretsmanager.SecretRotationRules>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Secret resource.
 */
export interface SecretArgs {
    description?: pulumi.Input<string>;
    forceOverwriteReplicaSecret?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    recoveryWindowInDays?: pulumi.Input<number>;
    replicas?: pulumi.Input<pulumi.Input<inputs.secretsmanager.SecretReplica>[]>;
    /**
     * @deprecated Use the aws_secretsmanager_secret_rotation resource instead
     */
    rotationLambdaArn?: pulumi.Input<string>;
    /**
     * @deprecated Use the aws_secretsmanager_secret_rotation resource instead
     */
    rotationRules?: pulumi.Input<inputs.secretsmanager.SecretRotationRules>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
