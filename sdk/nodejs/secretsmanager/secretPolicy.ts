// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage AWS Secrets Manager secret policy.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleSecret = new aws.secretsmanager.Secret("example", {name: "example"});
 * const example = aws.iam.getPolicyDocument({
 *     statements: [{
 *         sid: "EnableAnotherAWSAccountToReadTheSecret",
 *         effect: "Allow",
 *         principals: [{
 *             type: "AWS",
 *             identifiers: ["arn:aws:iam::123456789012:root"],
 *         }],
 *         actions: ["secretsmanager:GetSecretValue"],
 *         resources: ["*"],
 *     }],
 * });
 * const exampleSecretPolicy = new aws.secretsmanager.SecretPolicy("example", {
 *     secretArn: exampleSecret.arn,
 *     policy: example.then(example => example.json),
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_secretsmanager_secret_policy` using the secret Amazon Resource Name (ARN). For example:
 *
 * ```sh
 * $ pulumi import aws:secretsmanager/secretPolicy:SecretPolicy example arn:aws:secretsmanager:us-east-1:123456789012:secret:example-123456
 * ```
 */
export class SecretPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SecretPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretPolicyState, opts?: pulumi.CustomResourceOptions): SecretPolicy {
        return new SecretPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:secretsmanager/secretPolicy:SecretPolicy';

    /**
     * Returns true if the given object is an instance of SecretPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretPolicy.__pulumiType;
    }

    /**
     * Makes an optional API call to Zelkova to validate the Resource Policy to prevent broad access to your secret.
     */
    declare public readonly blockPublicPolicy: pulumi.Output<boolean | undefined>;
    /**
     * Valid JSON document representing a [resource policy](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html). Unlike `aws.secretsmanager.Secret`, where `policy` can be set to `"{}"` to delete the policy, `"{}"` is not a valid policy since `policy` is required.
     */
    declare public readonly policy: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Secret ARN.
     *
     * The following arguments are optional:
     */
    declare public readonly secretArn: pulumi.Output<string>;

    /**
     * Create a SecretPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretPolicyArgs | SecretPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretPolicyState | undefined;
            resourceInputs["blockPublicPolicy"] = state?.blockPublicPolicy;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["region"] = state?.region;
            resourceInputs["secretArn"] = state?.secretArn;
        } else {
            const args = argsOrState as SecretPolicyArgs | undefined;
            if (args?.policy === undefined && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if (args?.secretArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretArn'");
            }
            resourceInputs["blockPublicPolicy"] = args?.blockPublicPolicy;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["region"] = args?.region;
            resourceInputs["secretArn"] = args?.secretArn;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretPolicy resources.
 */
export interface SecretPolicyState {
    /**
     * Makes an optional API call to Zelkova to validate the Resource Policy to prevent broad access to your secret.
     */
    blockPublicPolicy?: pulumi.Input<boolean>;
    /**
     * Valid JSON document representing a [resource policy](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html). Unlike `aws.secretsmanager.Secret`, where `policy` can be set to `"{}"` to delete the policy, `"{}"` is not a valid policy since `policy` is required.
     */
    policy?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Secret ARN.
     *
     * The following arguments are optional:
     */
    secretArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretPolicy resource.
 */
export interface SecretPolicyArgs {
    /**
     * Makes an optional API call to Zelkova to validate the Resource Policy to prevent broad access to your secret.
     */
    blockPublicPolicy?: pulumi.Input<boolean>;
    /**
     * Valid JSON document representing a [resource policy](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html). Unlike `aws.secretsmanager.Secret`, where `policy` can be set to `"{}"` to delete the policy, `"{}"` is not a valid policy since `policy` is required.
     */
    policy: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Secret ARN.
     *
     * The following arguments are optional:
     */
    secretArn: pulumi.Input<string>;
}
