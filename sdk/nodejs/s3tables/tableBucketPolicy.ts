// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an Amazon S3 Tables Table Bucket Policy.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.iam.getPolicyDocument({
 *     statements: [{}],
 * });
 * const exampleTableBucketPolicy = new aws.s3tables.TableBucketPolicy("example", {
 *     resourcePolicy: example.then(example => example.json),
 *     tableBucketArn: exampleAwsS3tablesTableBucket.arn,
 * });
 * const test = new aws.s3tables.TableBucket("test", {name: "example-bucket"});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import S3 Tables Table Bucket Policy using the `table_bucket_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:s3tables/tableBucketPolicy:TableBucketPolicy example 'arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace'
 * ```
 */
export class TableBucketPolicy extends pulumi.CustomResource {
    /**
     * Get an existing TableBucketPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableBucketPolicyState, opts?: pulumi.CustomResourceOptions): TableBucketPolicy {
        return new TableBucketPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:s3tables/tableBucketPolicy:TableBucketPolicy';

    /**
     * Returns true if the given object is an instance of TableBucketPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TableBucketPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TableBucketPolicy.__pulumiType;
    }

    /**
     * Amazon Web Services resource-based policy document in JSON format.
     */
    public readonly resourcePolicy!: pulumi.Output<string>;
    /**
     * ARN referencing the Table Bucket that owns this policy.
     */
    public readonly tableBucketArn!: pulumi.Output<string>;

    /**
     * Create a TableBucketPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableBucketPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableBucketPolicyArgs | TableBucketPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TableBucketPolicyState | undefined;
            resourceInputs["resourcePolicy"] = state ? state.resourcePolicy : undefined;
            resourceInputs["tableBucketArn"] = state ? state.tableBucketArn : undefined;
        } else {
            const args = argsOrState as TableBucketPolicyArgs | undefined;
            if ((!args || args.resourcePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourcePolicy'");
            }
            if ((!args || args.tableBucketArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableBucketArn'");
            }
            resourceInputs["resourcePolicy"] = args ? args.resourcePolicy : undefined;
            resourceInputs["tableBucketArn"] = args ? args.tableBucketArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TableBucketPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TableBucketPolicy resources.
 */
export interface TableBucketPolicyState {
    /**
     * Amazon Web Services resource-based policy document in JSON format.
     */
    resourcePolicy?: pulumi.Input<string>;
    /**
     * ARN referencing the Table Bucket that owns this policy.
     */
    tableBucketArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TableBucketPolicy resource.
 */
export interface TableBucketPolicyArgs {
    /**
     * Amazon Web Services resource-based policy document in JSON format.
     */
    resourcePolicy: pulumi.Input<string>;
    /**
     * ARN referencing the Table Bucket that owns this policy.
     */
    tableBucketArn: pulumi.Input<string>;
}
