// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a ELBv2 Trust Store for use with Application Load Balancer Listener resources.
 *
 * ## Example Usage
 * ### Trust Store Load Balancer Listener
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lb.TrustStore("test", {
 *     caCertificatesBundleS3Bucket: "...",
 *     caCertificatesBundleS3Key: "...",
 * });
 * const example = new aws.lb.Listener("example", {
 *     loadBalancerArn: aws_lb.example.id,
 *     defaultActions: [{
 *         targetGroupArn: aws_lb_target_group.example.id,
 *         type: "forward",
 *     }],
 *     mutualAuthentication: {
 *         mode: "verify",
 *         trustStoreArn: test.arn,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Target Groups using their ARN. For example:
 *
 * ```sh
 *  $ pulumi import aws:lb/trustStore:TrustStore example arn:aws:elasticloadbalancing:us-west-2:187416307283:truststore/my-trust-store/20cfe21448b66314
 * ```
 */
export class TrustStore extends pulumi.CustomResource {
    /**
     * Get an existing TrustStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrustStoreState, opts?: pulumi.CustomResourceOptions): TrustStore {
        return new TrustStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lb/trustStore:TrustStore';

    /**
     * Returns true if the given object is an instance of TrustStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrustStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrustStore.__pulumiType;
    }

    /**
     * ARN of the Trust Store (matches `id`).
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * ARN suffix for use with CloudWatch Metrics.
     */
    public /*out*/ readonly arnSuffix!: pulumi.Output<string>;
    /**
     * S3 Bucket name holding the client certificate CA bundle.
     */
    public readonly caCertificatesBundleS3Bucket!: pulumi.Output<string>;
    /**
     * S3 Bucket name holding the client certificate CA bundle.
     */
    public readonly caCertificatesBundleS3Key!: pulumi.Output<string>;
    /**
     * Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
     */
    public readonly caCertificatesBundleS3ObjectVersion!: pulumi.Output<string | undefined>;
    /**
     * Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
     */
    public readonly namePrefix!: pulumi.Output<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a TrustStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrustStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrustStoreArgs | TrustStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrustStoreState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["arnSuffix"] = state ? state.arnSuffix : undefined;
            resourceInputs["caCertificatesBundleS3Bucket"] = state ? state.caCertificatesBundleS3Bucket : undefined;
            resourceInputs["caCertificatesBundleS3Key"] = state ? state.caCertificatesBundleS3Key : undefined;
            resourceInputs["caCertificatesBundleS3ObjectVersion"] = state ? state.caCertificatesBundleS3ObjectVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as TrustStoreArgs | undefined;
            if ((!args || args.caCertificatesBundleS3Bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCertificatesBundleS3Bucket'");
            }
            if ((!args || args.caCertificatesBundleS3Key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCertificatesBundleS3Key'");
            }
            resourceInputs["caCertificatesBundleS3Bucket"] = args ? args.caCertificatesBundleS3Bucket : undefined;
            resourceInputs["caCertificatesBundleS3Key"] = args ? args.caCertificatesBundleS3Key : undefined;
            resourceInputs["caCertificatesBundleS3ObjectVersion"] = args ? args.caCertificatesBundleS3ObjectVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["arnSuffix"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TrustStore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrustStore resources.
 */
export interface TrustStoreState {
    /**
     * ARN of the Trust Store (matches `id`).
     */
    arn?: pulumi.Input<string>;
    /**
     * ARN suffix for use with CloudWatch Metrics.
     */
    arnSuffix?: pulumi.Input<string>;
    /**
     * S3 Bucket name holding the client certificate CA bundle.
     */
    caCertificatesBundleS3Bucket?: pulumi.Input<string>;
    /**
     * S3 Bucket name holding the client certificate CA bundle.
     */
    caCertificatesBundleS3Key?: pulumi.Input<string>;
    /**
     * Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
     */
    caCertificatesBundleS3ObjectVersion?: pulumi.Input<string>;
    /**
     * Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a TrustStore resource.
 */
export interface TrustStoreArgs {
    /**
     * S3 Bucket name holding the client certificate CA bundle.
     */
    caCertificatesBundleS3Bucket: pulumi.Input<string>;
    /**
     * S3 Bucket name holding the client certificate CA bundle.
     */
    caCertificatesBundleS3Key: pulumi.Input<string>;
    /**
     * Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
     */
    caCertificatesBundleS3ObjectVersion?: pulumi.Input<string>;
    /**
     * Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
