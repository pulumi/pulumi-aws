// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lb/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    public readonly accessLogs!: pulumi.Output<outputs.lb.LoadBalancerAccessLogs | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly arnSuffix!: pulumi.Output<string>;
    public readonly customerOwnedIpv4Pool!: pulumi.Output<string | undefined>;
    public readonly desyncMitigationMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly dropInvalidHeaderFields!: pulumi.Output<boolean | undefined>;
    public readonly enableCrossZoneLoadBalancing!: pulumi.Output<boolean | undefined>;
    public readonly enableDeletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly enableHttp2!: pulumi.Output<boolean | undefined>;
    public readonly enableWafFailOpen!: pulumi.Output<boolean | undefined>;
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    public readonly internal!: pulumi.Output<boolean>;
    public readonly ipAddressType!: pulumi.Output<string>;
    public readonly loadBalancerType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public readonly preserveHostHeader!: pulumi.Output<boolean | undefined>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly subnetMappings!: pulumi.Output<outputs.lb.LoadBalancerSubnetMapping[]>;
    public readonly subnets!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public /*out*/ readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["accessLogs"] = state ? state.accessLogs : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["arnSuffix"] = state ? state.arnSuffix : undefined;
            resourceInputs["customerOwnedIpv4Pool"] = state ? state.customerOwnedIpv4Pool : undefined;
            resourceInputs["desyncMitigationMode"] = state ? state.desyncMitigationMode : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["dropInvalidHeaderFields"] = state ? state.dropInvalidHeaderFields : undefined;
            resourceInputs["enableCrossZoneLoadBalancing"] = state ? state.enableCrossZoneLoadBalancing : undefined;
            resourceInputs["enableDeletionProtection"] = state ? state.enableDeletionProtection : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["enableWafFailOpen"] = state ? state.enableWafFailOpen : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["internal"] = state ? state.internal : undefined;
            resourceInputs["ipAddressType"] = state ? state.ipAddressType : undefined;
            resourceInputs["loadBalancerType"] = state ? state.loadBalancerType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["preserveHostHeader"] = state ? state.preserveHostHeader : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["subnetMappings"] = state ? state.subnetMappings : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            resourceInputs["accessLogs"] = args ? args.accessLogs : undefined;
            resourceInputs["customerOwnedIpv4Pool"] = args ? args.customerOwnedIpv4Pool : undefined;
            resourceInputs["desyncMitigationMode"] = args ? args.desyncMitigationMode : undefined;
            resourceInputs["dropInvalidHeaderFields"] = args ? args.dropInvalidHeaderFields : undefined;
            resourceInputs["enableCrossZoneLoadBalancing"] = args ? args.enableCrossZoneLoadBalancing : undefined;
            resourceInputs["enableDeletionProtection"] = args ? args.enableDeletionProtection : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["enableWafFailOpen"] = args ? args.enableWafFailOpen : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["internal"] = args ? args.internal : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["loadBalancerType"] = args ? args.loadBalancerType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["preserveHostHeader"] = args ? args.preserveHostHeader : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["subnetMappings"] = args ? args.subnetMappings : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["arnSuffix"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "aws:elasticloadbalancingv2/loadBalancer:LoadBalancer" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    accessLogs?: pulumi.Input<inputs.lb.LoadBalancerAccessLogs>;
    arn?: pulumi.Input<string>;
    arnSuffix?: pulumi.Input<string>;
    customerOwnedIpv4Pool?: pulumi.Input<string>;
    desyncMitigationMode?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    dropInvalidHeaderFields?: pulumi.Input<boolean>;
    enableCrossZoneLoadBalancing?: pulumi.Input<boolean>;
    enableDeletionProtection?: pulumi.Input<boolean>;
    enableHttp2?: pulumi.Input<boolean>;
    enableWafFailOpen?: pulumi.Input<boolean>;
    idleTimeout?: pulumi.Input<number>;
    internal?: pulumi.Input<boolean>;
    ipAddressType?: pulumi.Input<string>;
    loadBalancerType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    preserveHostHeader?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetMappings?: pulumi.Input<pulumi.Input<inputs.lb.LoadBalancerSubnetMapping>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    accessLogs?: pulumi.Input<inputs.lb.LoadBalancerAccessLogs>;
    customerOwnedIpv4Pool?: pulumi.Input<string>;
    desyncMitigationMode?: pulumi.Input<string>;
    dropInvalidHeaderFields?: pulumi.Input<boolean>;
    enableCrossZoneLoadBalancing?: pulumi.Input<boolean>;
    enableDeletionProtection?: pulumi.Input<boolean>;
    enableHttp2?: pulumi.Input<boolean>;
    enableWafFailOpen?: pulumi.Input<boolean>;
    idleTimeout?: pulumi.Input<number>;
    internal?: pulumi.Input<boolean>;
    ipAddressType?: pulumi.Input<string>;
    loadBalancerType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    preserveHostHeader?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetMappings?: pulumi.Input<pulumi.Input<inputs.lb.LoadBalancerSubnetMapping>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
