// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetHostedZoneIdArgs, GetHostedZoneIdResult, GetHostedZoneIdOutputArgs } from "./getHostedZoneId";
export const getHostedZoneId: typeof import("./getHostedZoneId").getHostedZoneId = null as any;
export const getHostedZoneIdOutput: typeof import("./getHostedZoneId").getHostedZoneIdOutput = null as any;

export { GetListenerArgs, GetListenerResult, GetListenerOutputArgs } from "./getListener";
export const getListener: typeof import("./getListener").getListener = null as any;
export const getListenerOutput: typeof import("./getListener").getListenerOutput = null as any;

export { GetLoadBalancerArgs, GetLoadBalancerResult, GetLoadBalancerOutputArgs } from "./getLoadBalancer";
export const getLoadBalancer: typeof import("./getLoadBalancer").getLoadBalancer = null as any;
export const getLoadBalancerOutput: typeof import("./getLoadBalancer").getLoadBalancerOutput = null as any;

export { GetTargetGroupArgs, GetTargetGroupResult, GetTargetGroupOutputArgs } from "./getTargetGroup";
export const getTargetGroup: typeof import("./getTargetGroup").getTargetGroup = null as any;
export const getTargetGroupOutput: typeof import("./getTargetGroup").getTargetGroupOutput = null as any;

export { ListenerArgs, ListenerState } from "./listener";
export type Listener = import("./listener").Listener;
export const Listener: typeof import("./listener").Listener = null as any;

export { ListenerCertificateArgs, ListenerCertificateState } from "./listenerCertificate";
export type ListenerCertificate = import("./listenerCertificate").ListenerCertificate;
export const ListenerCertificate: typeof import("./listenerCertificate").ListenerCertificate = null as any;

export { ListenerRuleArgs, ListenerRuleState } from "./listenerRule";
export type ListenerRule = import("./listenerRule").ListenerRule;
export const ListenerRule: typeof import("./listenerRule").ListenerRule = null as any;

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;

export { TargetGroupArgs, TargetGroupState } from "./targetGroup";
export type TargetGroup = import("./targetGroup").TargetGroup;
export const TargetGroup: typeof import("./targetGroup").TargetGroup = null as any;

export { TargetGroupAttachmentArgs, TargetGroupAttachmentState } from "./targetGroupAttachment";
export type TargetGroupAttachment = import("./targetGroupAttachment").TargetGroupAttachment;
export const TargetGroupAttachment: typeof import("./targetGroupAttachment").TargetGroupAttachment = null as any;

utilities.lazyLoad(exports, ["getHostedZoneId","getHostedZoneIdOutput"], () => require("./getHostedZoneId"));
utilities.lazyLoad(exports, ["getListener","getListenerOutput"], () => require("./getListener"));
utilities.lazyLoad(exports, ["getLoadBalancer","getLoadBalancerOutput"], () => require("./getLoadBalancer"));
utilities.lazyLoad(exports, ["getTargetGroup","getTargetGroupOutput"], () => require("./getTargetGroup"));
utilities.lazyLoad(exports, ["Listener"], () => require("./listener"));
utilities.lazyLoad(exports, ["ListenerCertificate"], () => require("./listenerCertificate"));
utilities.lazyLoad(exports, ["ListenerRule"], () => require("./listenerRule"));
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));
utilities.lazyLoad(exports, ["TargetGroup"], () => require("./targetGroup"));
utilities.lazyLoad(exports, ["TargetGroupAttachment"], () => require("./targetGroupAttachment"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:lb/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "aws:lb/listenerCertificate:ListenerCertificate":
                return new ListenerCertificate(name, <any>undefined, { urn })
            case "aws:lb/listenerRule:ListenerRule":
                return new ListenerRule(name, <any>undefined, { urn })
            case "aws:lb/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "aws:lb/targetGroup:TargetGroup":
                return new TargetGroup(name, <any>undefined, { urn })
            case "aws:lb/targetGroupAttachment:TargetGroupAttachment":
                return new TargetGroupAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "lb/listener", _module)
pulumi.runtime.registerResourceModule("aws", "lb/listenerCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "lb/listenerRule", _module)
pulumi.runtime.registerResourceModule("aws", "lb/loadBalancer", _module)
pulumi.runtime.registerResourceModule("aws", "lb/targetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "lb/targetGroupAttachment", _module)
