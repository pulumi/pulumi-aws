// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Trail extends pulumi.CustomResource {
    /**
     * Get an existing Trail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrailState, opts?: pulumi.CustomResourceOptions): Trail {
        return new Trail(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudtrail/trail:Trail';

    /**
     * Returns true if the given object is an instance of Trail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Trail {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trail.__pulumiType;
    }

    public readonly advancedEventSelectors!: pulumi.Output<outputs.cloudtrail.TrailAdvancedEventSelector[] | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cloudWatchLogsGroupArn!: pulumi.Output<string | undefined>;
    public readonly cloudWatchLogsRoleArn!: pulumi.Output<string | undefined>;
    public readonly enableLogFileValidation!: pulumi.Output<boolean | undefined>;
    public readonly enableLogging!: pulumi.Output<boolean | undefined>;
    public readonly eventSelectors!: pulumi.Output<outputs.cloudtrail.TrailEventSelector[] | undefined>;
    public /*out*/ readonly homeRegion!: pulumi.Output<string>;
    public readonly includeGlobalServiceEvents!: pulumi.Output<boolean | undefined>;
    public readonly insightSelectors!: pulumi.Output<outputs.cloudtrail.TrailInsightSelector[] | undefined>;
    public readonly isMultiRegionTrail!: pulumi.Output<boolean | undefined>;
    public readonly isOrganizationTrail!: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly s3BucketName!: pulumi.Output<string>;
    public readonly s3KeyPrefix!: pulumi.Output<string | undefined>;
    public readonly snsTopicName!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Trail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrailArgs | TrailState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrailState | undefined;
            resourceInputs["advancedEventSelectors"] = state ? state.advancedEventSelectors : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cloudWatchLogsGroupArn"] = state ? state.cloudWatchLogsGroupArn : undefined;
            resourceInputs["cloudWatchLogsRoleArn"] = state ? state.cloudWatchLogsRoleArn : undefined;
            resourceInputs["enableLogFileValidation"] = state ? state.enableLogFileValidation : undefined;
            resourceInputs["enableLogging"] = state ? state.enableLogging : undefined;
            resourceInputs["eventSelectors"] = state ? state.eventSelectors : undefined;
            resourceInputs["homeRegion"] = state ? state.homeRegion : undefined;
            resourceInputs["includeGlobalServiceEvents"] = state ? state.includeGlobalServiceEvents : undefined;
            resourceInputs["insightSelectors"] = state ? state.insightSelectors : undefined;
            resourceInputs["isMultiRegionTrail"] = state ? state.isMultiRegionTrail : undefined;
            resourceInputs["isOrganizationTrail"] = state ? state.isOrganizationTrail : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["s3BucketName"] = state ? state.s3BucketName : undefined;
            resourceInputs["s3KeyPrefix"] = state ? state.s3KeyPrefix : undefined;
            resourceInputs["snsTopicName"] = state ? state.snsTopicName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as TrailArgs | undefined;
            if ((!args || args.s3BucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3BucketName'");
            }
            resourceInputs["advancedEventSelectors"] = args ? args.advancedEventSelectors : undefined;
            resourceInputs["cloudWatchLogsGroupArn"] = args ? args.cloudWatchLogsGroupArn : undefined;
            resourceInputs["cloudWatchLogsRoleArn"] = args ? args.cloudWatchLogsRoleArn : undefined;
            resourceInputs["enableLogFileValidation"] = args ? args.enableLogFileValidation : undefined;
            resourceInputs["enableLogging"] = args ? args.enableLogging : undefined;
            resourceInputs["eventSelectors"] = args ? args.eventSelectors : undefined;
            resourceInputs["includeGlobalServiceEvents"] = args ? args.includeGlobalServiceEvents : undefined;
            resourceInputs["insightSelectors"] = args ? args.insightSelectors : undefined;
            resourceInputs["isMultiRegionTrail"] = args ? args.isMultiRegionTrail : undefined;
            resourceInputs["isOrganizationTrail"] = args ? args.isOrganizationTrail : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["s3BucketName"] = args ? args.s3BucketName : undefined;
            resourceInputs["s3KeyPrefix"] = args ? args.s3KeyPrefix : undefined;
            resourceInputs["snsTopicName"] = args ? args.snsTopicName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["homeRegion"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Trail.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Trail resources.
 */
export interface TrailState {
    advancedEventSelectors?: pulumi.Input<pulumi.Input<inputs.cloudtrail.TrailAdvancedEventSelector>[]>;
    arn?: pulumi.Input<string>;
    cloudWatchLogsGroupArn?: pulumi.Input<string>;
    cloudWatchLogsRoleArn?: pulumi.Input<string>;
    enableLogFileValidation?: pulumi.Input<boolean>;
    enableLogging?: pulumi.Input<boolean>;
    eventSelectors?: pulumi.Input<pulumi.Input<inputs.cloudtrail.TrailEventSelector>[]>;
    homeRegion?: pulumi.Input<string>;
    includeGlobalServiceEvents?: pulumi.Input<boolean>;
    insightSelectors?: pulumi.Input<pulumi.Input<inputs.cloudtrail.TrailInsightSelector>[]>;
    isMultiRegionTrail?: pulumi.Input<boolean>;
    isOrganizationTrail?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    s3BucketName?: pulumi.Input<string>;
    s3KeyPrefix?: pulumi.Input<string>;
    snsTopicName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Trail resource.
 */
export interface TrailArgs {
    advancedEventSelectors?: pulumi.Input<pulumi.Input<inputs.cloudtrail.TrailAdvancedEventSelector>[]>;
    cloudWatchLogsGroupArn?: pulumi.Input<string>;
    cloudWatchLogsRoleArn?: pulumi.Input<string>;
    enableLogFileValidation?: pulumi.Input<boolean>;
    enableLogging?: pulumi.Input<boolean>;
    eventSelectors?: pulumi.Input<pulumi.Input<inputs.cloudtrail.TrailEventSelector>[]>;
    includeGlobalServiceEvents?: pulumi.Input<boolean>;
    insightSelectors?: pulumi.Input<pulumi.Input<inputs.cloudtrail.TrailInsightSelector>[]>;
    isMultiRegionTrail?: pulumi.Input<boolean>;
    isOrganizationTrail?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    s3BucketName: pulumi.Input<string>;
    s3KeyPrefix?: pulumi.Input<string>;
    snsTopicName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
