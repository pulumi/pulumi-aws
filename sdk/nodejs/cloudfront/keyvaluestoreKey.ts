// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS CloudFront KeyValueStore Key.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudfront.KeyValueStore("example", {
 *     name: "ExampleKeyValueStore",
 *     comment: "This is an example key value store",
 * });
 * const exampleKeyvaluestoreKey = new aws.cloudfront.KeyvaluestoreKey("example", {
 *     keyValueStoreArn: example.arn,
 *     key: "Test Key",
 *     value: "Test Value",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import CloudFront KeyValueStore Key using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudfront/keyvaluestoreKey:KeyvaluestoreKey example arn:aws:cloudfront::111111111111:key-value-store/8562g61f-caba-2845-9d99-b97diwae5d3c,someKey
 * ```
 */
export class KeyvaluestoreKey extends pulumi.CustomResource {
    /**
     * Get an existing KeyvaluestoreKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyvaluestoreKeyState, opts?: pulumi.CustomResourceOptions): KeyvaluestoreKey {
        return new KeyvaluestoreKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudfront/keyvaluestoreKey:KeyvaluestoreKey';

    /**
     * Returns true if the given object is an instance of KeyvaluestoreKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyvaluestoreKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyvaluestoreKey.__pulumiType;
    }

    /**
     * Key to put.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the Key Value Store.
     */
    public readonly keyValueStoreArn!: pulumi.Output<string>;
    /**
     * Total size of the Key Value Store in bytes.
     */
    public /*out*/ readonly totalSizeInBytes!: pulumi.Output<number>;
    /**
     * Value to put.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a KeyvaluestoreKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyvaluestoreKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyvaluestoreKeyArgs | KeyvaluestoreKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyvaluestoreKeyState | undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["keyValueStoreArn"] = state ? state.keyValueStoreArn : undefined;
            resourceInputs["totalSizeInBytes"] = state ? state.totalSizeInBytes : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as KeyvaluestoreKeyArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.keyValueStoreArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyValueStoreArn'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["keyValueStoreArn"] = args ? args.keyValueStoreArn : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["totalSizeInBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyvaluestoreKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyvaluestoreKey resources.
 */
export interface KeyvaluestoreKeyState {
    /**
     * Key to put.
     */
    key?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the Key Value Store.
     */
    keyValueStoreArn?: pulumi.Input<string>;
    /**
     * Total size of the Key Value Store in bytes.
     */
    totalSizeInBytes?: pulumi.Input<number>;
    /**
     * Value to put.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyvaluestoreKey resource.
 */
export interface KeyvaluestoreKeyArgs {
    /**
     * Key to put.
     */
    key: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the Key Value Store.
     */
    keyValueStoreArn: pulumi.Input<string>;
    /**
     * Value to put.
     */
    value: pulumi.Input<string>;
}
