// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudfront/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly code!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    public /*out*/ readonly liveStageEtag!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly publish!: pulumi.Output<boolean | undefined>;
    public readonly runtime!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["liveStageEtag"] = state ? state.liveStageEtag : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publish"] = state ? state.publish : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if ((!args || args.code === undefined) && !opts.urn) {
                throw new Error("Missing required property 'code'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publish"] = args ? args.publish : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["liveStageEtag"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Function.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    arn?: pulumi.Input<string>;
    code?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    liveStageEtag?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publish?: pulumi.Input<boolean>;
    runtime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    code: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publish?: pulumi.Input<boolean>;
    runtime: pulumi.Input<string>;
}
