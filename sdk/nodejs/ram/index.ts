// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetResourceShareArgs, GetResourceShareResult, GetResourceShareOutputArgs } from "./getResourceShare";
export const getResourceShare: typeof import("./getResourceShare").getResourceShare = null as any;
export const getResourceShareOutput: typeof import("./getResourceShare").getResourceShareOutput = null as any;

export { PrincipalAssociationArgs, PrincipalAssociationState } from "./principalAssociation";
export type PrincipalAssociation = import("./principalAssociation").PrincipalAssociation;
export const PrincipalAssociation: typeof import("./principalAssociation").PrincipalAssociation = null as any;

export { ResourceAssociationArgs, ResourceAssociationState } from "./resourceAssociation";
export type ResourceAssociation = import("./resourceAssociation").ResourceAssociation;
export const ResourceAssociation: typeof import("./resourceAssociation").ResourceAssociation = null as any;

export { ResourceShareArgs, ResourceShareState } from "./resourceShare";
export type ResourceShare = import("./resourceShare").ResourceShare;
export const ResourceShare: typeof import("./resourceShare").ResourceShare = null as any;

export { ResourceShareAccepterArgs, ResourceShareAccepterState } from "./resourceShareAccepter";
export type ResourceShareAccepter = import("./resourceShareAccepter").ResourceShareAccepter;
export const ResourceShareAccepter: typeof import("./resourceShareAccepter").ResourceShareAccepter = null as any;

utilities.lazyLoad(exports, ["getResourceShare","getResourceShareOutput"], () => require("./getResourceShare"));
utilities.lazyLoad(exports, ["PrincipalAssociation"], () => require("./principalAssociation"));
utilities.lazyLoad(exports, ["ResourceAssociation"], () => require("./resourceAssociation"));
utilities.lazyLoad(exports, ["ResourceShare"], () => require("./resourceShare"));
utilities.lazyLoad(exports, ["ResourceShareAccepter"], () => require("./resourceShareAccepter"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:ram/principalAssociation:PrincipalAssociation":
                return new PrincipalAssociation(name, <any>undefined, { urn })
            case "aws:ram/resourceAssociation:ResourceAssociation":
                return new ResourceAssociation(name, <any>undefined, { urn })
            case "aws:ram/resourceShare:ResourceShare":
                return new ResourceShare(name, <any>undefined, { urn })
            case "aws:ram/resourceShareAccepter:ResourceShareAccepter":
                return new ResourceShareAccepter(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ram/principalAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ram/resourceAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ram/resourceShare", _module)
pulumi.runtime.registerResourceModule("aws", "ram/resourceShareAccepter", _module)
