// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages a replicated Region and directory for Multi-Region replication.
 * Multi-Region replication is only supported for the Enterprise Edition of AWS Managed Microsoft AD.
 *
 * ## Import
 *
 * Using `pulumi import`, import Replicated Regions using directory ID,Region name. For example:
 *
 * ```sh
 *  $ pulumi import aws:directoryservice/serviceRegion:ServiceRegion example d-9267651497,us-east-2
 * ```
 */
export class ServiceRegion extends pulumi.CustomResource {
    /**
     * Get an existing ServiceRegion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceRegionState, opts?: pulumi.CustomResourceOptions): ServiceRegion {
        return new ServiceRegion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:directoryservice/serviceRegion:ServiceRegion';

    /**
     * Returns true if the given object is an instance of ServiceRegion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceRegion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceRegion.__pulumiType;
    }

    /**
     * The number of domain controllers desired in the replicated directory. Minimum value of `2`.
     */
    public readonly desiredNumberOfDomainControllers!: pulumi.Output<number>;
    /**
     * The identifier of the directory to which you want to add Region replication.
     */
    public readonly directoryId!: pulumi.Output<string>;
    /**
     * The name of the Region where you want to add domain controllers for replication.
     */
    public readonly regionName!: pulumi.Output<string>;
    /**
     * Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * VPC information in the replicated Region. Detailed below.
     */
    public readonly vpcSettings!: pulumi.Output<outputs.directoryservice.ServiceRegionVpcSettings>;

    /**
     * Create a ServiceRegion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceRegionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceRegionArgs | ServiceRegionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceRegionState | undefined;
            resourceInputs["desiredNumberOfDomainControllers"] = state ? state.desiredNumberOfDomainControllers : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcSettings"] = state ? state.vpcSettings : undefined;
        } else {
            const args = argsOrState as ServiceRegionArgs | undefined;
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            if ((!args || args.vpcSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcSettings'");
            }
            resourceInputs["desiredNumberOfDomainControllers"] = args ? args.desiredNumberOfDomainControllers : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcSettings"] = args ? args.vpcSettings : undefined;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceRegion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceRegion resources.
 */
export interface ServiceRegionState {
    /**
     * The number of domain controllers desired in the replicated directory. Minimum value of `2`.
     */
    desiredNumberOfDomainControllers?: pulumi.Input<number>;
    /**
     * The identifier of the directory to which you want to add Region replication.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * The name of the Region where you want to add domain controllers for replication.
     */
    regionName?: pulumi.Input<string>;
    /**
     * Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC information in the replicated Region. Detailed below.
     */
    vpcSettings?: pulumi.Input<inputs.directoryservice.ServiceRegionVpcSettings>;
}

/**
 * The set of arguments for constructing a ServiceRegion resource.
 */
export interface ServiceRegionArgs {
    /**
     * The number of domain controllers desired in the replicated directory. Minimum value of `2`.
     */
    desiredNumberOfDomainControllers?: pulumi.Input<number>;
    /**
     * The identifier of the directory to which you want to add Region replication.
     */
    directoryId: pulumi.Input<string>;
    /**
     * The name of the Region where you want to add domain controllers for replication.
     */
    regionName: pulumi.Input<string>;
    /**
     * Map of tags to assign to this resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC information in the replicated Region. Detailed below.
     */
    vpcSettings: pulumi.Input<inputs.directoryservice.ServiceRegionVpcSettings>;
}
