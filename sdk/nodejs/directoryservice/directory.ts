// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Directory extends pulumi.CustomResource {
    /**
     * Get an existing Directory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryState, opts?: pulumi.CustomResourceOptions): Directory {
        return new Directory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:directoryservice/directory:Directory';

    /**
     * Returns true if the given object is an instance of Directory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Directory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Directory.__pulumiType;
    }

    public /*out*/ readonly accessUrl!: pulumi.Output<string>;
    public readonly alias!: pulumi.Output<string>;
    public readonly connectSettings!: pulumi.Output<outputs.directoryservice.DirectoryConnectSettings | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly desiredNumberOfDomainControllers!: pulumi.Output<number>;
    public /*out*/ readonly dnsIpAddresses!: pulumi.Output<string[]>;
    public readonly edition!: pulumi.Output<string>;
    public readonly enableSso!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public /*out*/ readonly securityGroupId!: pulumi.Output<string>;
    public readonly shortName!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly vpcSettings!: pulumi.Output<outputs.directoryservice.DirectoryVpcSettings | undefined>;

    /**
     * Create a Directory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryArgs | DirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryState | undefined;
            resourceInputs["accessUrl"] = state ? state.accessUrl : undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["connectSettings"] = state ? state.connectSettings : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredNumberOfDomainControllers"] = state ? state.desiredNumberOfDomainControllers : undefined;
            resourceInputs["dnsIpAddresses"] = state ? state.dnsIpAddresses : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["enableSso"] = state ? state.enableSso : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["shortName"] = state ? state.shortName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpcSettings"] = state ? state.vpcSettings : undefined;
        } else {
            const args = argsOrState as DirectoryArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["connectSettings"] = args ? args.connectSettings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredNumberOfDomainControllers"] = args ? args.desiredNumberOfDomainControllers : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["enableSso"] = args ? args.enableSso : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["shortName"] = args ? args.shortName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpcSettings"] = args ? args.vpcSettings : undefined;
            resourceInputs["accessUrl"] = undefined /*out*/;
            resourceInputs["dnsIpAddresses"] = undefined /*out*/;
            resourceInputs["securityGroupId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Directory.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Directory resources.
 */
export interface DirectoryState {
    accessUrl?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    connectSettings?: pulumi.Input<inputs.directoryservice.DirectoryConnectSettings>;
    description?: pulumi.Input<string>;
    desiredNumberOfDomainControllers?: pulumi.Input<number>;
    dnsIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    edition?: pulumi.Input<string>;
    enableSso?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    shortName?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    vpcSettings?: pulumi.Input<inputs.directoryservice.DirectoryVpcSettings>;
}

/**
 * The set of arguments for constructing a Directory resource.
 */
export interface DirectoryArgs {
    alias?: pulumi.Input<string>;
    connectSettings?: pulumi.Input<inputs.directoryservice.DirectoryConnectSettings>;
    description?: pulumi.Input<string>;
    desiredNumberOfDomainControllers?: pulumi.Input<number>;
    edition?: pulumi.Input<string>;
    enableSso?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    shortName?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    vpcSettings?: pulumi.Input<inputs.directoryservice.DirectoryVpcSettings>;
}
