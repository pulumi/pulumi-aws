// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class RadiusSettings extends pulumi.CustomResource {
    /**
     * Get an existing RadiusSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RadiusSettingsState, opts?: pulumi.CustomResourceOptions): RadiusSettings {
        return new RadiusSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:directoryservice/radiusSettings:RadiusSettings';

    /**
     * Returns true if the given object is an instance of RadiusSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RadiusSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RadiusSettings.__pulumiType;
    }

    public readonly authenticationProtocol!: pulumi.Output<string>;
    public readonly directoryId!: pulumi.Output<string>;
    public readonly displayLabel!: pulumi.Output<string>;
    public readonly radiusPort!: pulumi.Output<number>;
    public readonly radiusRetries!: pulumi.Output<number>;
    public readonly radiusServers!: pulumi.Output<string[]>;
    public readonly radiusTimeout!: pulumi.Output<number>;
    public readonly sharedSecret!: pulumi.Output<string>;
    public readonly useSameUsername!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RadiusSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RadiusSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RadiusSettingsArgs | RadiusSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RadiusSettingsState | undefined;
            resourceInputs["authenticationProtocol"] = state ? state.authenticationProtocol : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["displayLabel"] = state ? state.displayLabel : undefined;
            resourceInputs["radiusPort"] = state ? state.radiusPort : undefined;
            resourceInputs["radiusRetries"] = state ? state.radiusRetries : undefined;
            resourceInputs["radiusServers"] = state ? state.radiusServers : undefined;
            resourceInputs["radiusTimeout"] = state ? state.radiusTimeout : undefined;
            resourceInputs["sharedSecret"] = state ? state.sharedSecret : undefined;
            resourceInputs["useSameUsername"] = state ? state.useSameUsername : undefined;
        } else {
            const args = argsOrState as RadiusSettingsArgs | undefined;
            if ((!args || args.authenticationProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationProtocol'");
            }
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if ((!args || args.displayLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayLabel'");
            }
            if ((!args || args.radiusPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'radiusPort'");
            }
            if ((!args || args.radiusRetries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'radiusRetries'");
            }
            if ((!args || args.radiusServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'radiusServers'");
            }
            if ((!args || args.radiusTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'radiusTimeout'");
            }
            if ((!args || args.sharedSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedSecret'");
            }
            resourceInputs["authenticationProtocol"] = args ? args.authenticationProtocol : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["displayLabel"] = args ? args.displayLabel : undefined;
            resourceInputs["radiusPort"] = args ? args.radiusPort : undefined;
            resourceInputs["radiusRetries"] = args ? args.radiusRetries : undefined;
            resourceInputs["radiusServers"] = args ? args.radiusServers : undefined;
            resourceInputs["radiusTimeout"] = args ? args.radiusTimeout : undefined;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
            resourceInputs["useSameUsername"] = args ? args.useSameUsername : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RadiusSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RadiusSettings resources.
 */
export interface RadiusSettingsState {
    authenticationProtocol?: pulumi.Input<string>;
    directoryId?: pulumi.Input<string>;
    displayLabel?: pulumi.Input<string>;
    radiusPort?: pulumi.Input<number>;
    radiusRetries?: pulumi.Input<number>;
    radiusServers?: pulumi.Input<pulumi.Input<string>[]>;
    radiusTimeout?: pulumi.Input<number>;
    sharedSecret?: pulumi.Input<string>;
    useSameUsername?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RadiusSettings resource.
 */
export interface RadiusSettingsArgs {
    authenticationProtocol: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
    displayLabel: pulumi.Input<string>;
    radiusPort: pulumi.Input<number>;
    radiusRetries: pulumi.Input<number>;
    radiusServers: pulumi.Input<pulumi.Input<string>[]>;
    radiusTimeout: pulumi.Input<number>;
    sharedSecret: pulumi.Input<string>;
    useSameUsername?: pulumi.Input<boolean>;
}
