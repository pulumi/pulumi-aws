// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a directory's multi-factor authentication (MFA) using a Remote Authentication Dial In User Service (RADIUS) server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.directoryservice.RadiusSettings("example", {
 *     directoryId: exampleAwsDirectoryServiceDirectory.id,
 *     authenticationProtocol: "PAP",
 *     displayLabel: "example",
 *     radiusPort: 1812,
 *     radiusRetries: 4,
 *     radiusServers: ["10.0.1.5"],
 *     radiusTimeout: 1,
 *     sharedSecret: "12345678",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import RADIUS settings using the directory ID. For example:
 *
 * ```sh
 * $ pulumi import aws:directoryservice/radiusSettings:RadiusSettings example d-926724cf57
 * ```
 */
export class RadiusSettings extends pulumi.CustomResource {
    /**
     * Get an existing RadiusSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RadiusSettingsState, opts?: pulumi.CustomResourceOptions): RadiusSettings {
        return new RadiusSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:directoryservice/radiusSettings:RadiusSettings';

    /**
     * Returns true if the given object is an instance of RadiusSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RadiusSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RadiusSettings.__pulumiType;
    }

    /**
     * The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
     */
    declare public readonly authenticationProtocol: pulumi.Output<string>;
    /**
     * The identifier of the directory for which you want to manager RADIUS settings.
     */
    declare public readonly directoryId: pulumi.Output<string>;
    /**
     * Display label.
     */
    declare public readonly displayLabel: pulumi.Output<string>;
    /**
     * The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
     */
    declare public readonly radiusPort: pulumi.Output<number>;
    /**
     * The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
     */
    declare public readonly radiusRetries: pulumi.Output<number>;
    /**
     * An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
     */
    declare public readonly radiusServers: pulumi.Output<string[]>;
    /**
     * The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
     */
    declare public readonly radiusTimeout: pulumi.Output<number>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Required for enabling RADIUS on the directory.
     */
    declare public readonly sharedSecret: pulumi.Output<string>;
    /**
     * Not currently used.
     */
    declare public readonly useSameUsername: pulumi.Output<boolean | undefined>;

    /**
     * Create a RadiusSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RadiusSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RadiusSettingsArgs | RadiusSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RadiusSettingsState | undefined;
            resourceInputs["authenticationProtocol"] = state?.authenticationProtocol;
            resourceInputs["directoryId"] = state?.directoryId;
            resourceInputs["displayLabel"] = state?.displayLabel;
            resourceInputs["radiusPort"] = state?.radiusPort;
            resourceInputs["radiusRetries"] = state?.radiusRetries;
            resourceInputs["radiusServers"] = state?.radiusServers;
            resourceInputs["radiusTimeout"] = state?.radiusTimeout;
            resourceInputs["region"] = state?.region;
            resourceInputs["sharedSecret"] = state?.sharedSecret;
            resourceInputs["useSameUsername"] = state?.useSameUsername;
        } else {
            const args = argsOrState as RadiusSettingsArgs | undefined;
            if (args?.authenticationProtocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'authenticationProtocol'");
            }
            if (args?.directoryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if (args?.displayLabel === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayLabel'");
            }
            if (args?.radiusPort === undefined && !opts.urn) {
                throw new Error("Missing required property 'radiusPort'");
            }
            if (args?.radiusRetries === undefined && !opts.urn) {
                throw new Error("Missing required property 'radiusRetries'");
            }
            if (args?.radiusServers === undefined && !opts.urn) {
                throw new Error("Missing required property 'radiusServers'");
            }
            if (args?.radiusTimeout === undefined && !opts.urn) {
                throw new Error("Missing required property 'radiusTimeout'");
            }
            if (args?.sharedSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'sharedSecret'");
            }
            resourceInputs["authenticationProtocol"] = args?.authenticationProtocol;
            resourceInputs["directoryId"] = args?.directoryId;
            resourceInputs["displayLabel"] = args?.displayLabel;
            resourceInputs["radiusPort"] = args?.radiusPort;
            resourceInputs["radiusRetries"] = args?.radiusRetries;
            resourceInputs["radiusServers"] = args?.radiusServers;
            resourceInputs["radiusTimeout"] = args?.radiusTimeout;
            resourceInputs["region"] = args?.region;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
            resourceInputs["useSameUsername"] = args?.useSameUsername;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RadiusSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RadiusSettings resources.
 */
export interface RadiusSettingsState {
    /**
     * The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
     */
    authenticationProtocol?: pulumi.Input<string>;
    /**
     * The identifier of the directory for which you want to manager RADIUS settings.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * Display label.
     */
    displayLabel?: pulumi.Input<string>;
    /**
     * The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
     */
    radiusPort?: pulumi.Input<number>;
    /**
     * The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
     */
    radiusRetries?: pulumi.Input<number>;
    /**
     * An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
     */
    radiusServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
     */
    radiusTimeout?: pulumi.Input<number>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Required for enabling RADIUS on the directory.
     */
    sharedSecret?: pulumi.Input<string>;
    /**
     * Not currently used.
     */
    useSameUsername?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RadiusSettings resource.
 */
export interface RadiusSettingsArgs {
    /**
     * The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
     */
    authenticationProtocol: pulumi.Input<string>;
    /**
     * The identifier of the directory for which you want to manager RADIUS settings.
     */
    directoryId: pulumi.Input<string>;
    /**
     * Display label.
     */
    displayLabel: pulumi.Input<string>;
    /**
     * The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
     */
    radiusPort: pulumi.Input<number>;
    /**
     * The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
     */
    radiusRetries: pulumi.Input<number>;
    /**
     * An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
     */
    radiusServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
     */
    radiusTimeout: pulumi.Input<number>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Required for enabling RADIUS on the directory.
     */
    sharedSecret: pulumi.Input<string>;
    /**
     * Not currently used.
     */
    useSameUsername?: pulumi.Input<boolean>;
}
