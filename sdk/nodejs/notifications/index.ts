// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ChannelAssociationArgs, ChannelAssociationState } from "./channelAssociation";
export type ChannelAssociation = import("./channelAssociation").ChannelAssociation;
export const ChannelAssociation: typeof import("./channelAssociation").ChannelAssociation = null as any;
utilities.lazyLoad(exports, ["ChannelAssociation"], () => require("./channelAssociation"));

export { ContactsEmailContactArgs, ContactsEmailContactState } from "./contactsEmailContact";
export type ContactsEmailContact = import("./contactsEmailContact").ContactsEmailContact;
export const ContactsEmailContact: typeof import("./contactsEmailContact").ContactsEmailContact = null as any;
utilities.lazyLoad(exports, ["ContactsEmailContact"], () => require("./contactsEmailContact"));

export { EventRuleArgs, EventRuleState } from "./eventRule";
export type EventRule = import("./eventRule").EventRule;
export const EventRule: typeof import("./eventRule").EventRule = null as any;
utilities.lazyLoad(exports, ["EventRule"], () => require("./eventRule"));

export { NotificationConfigurationArgs, NotificationConfigurationState } from "./notificationConfiguration";
export type NotificationConfiguration = import("./notificationConfiguration").NotificationConfiguration;
export const NotificationConfiguration: typeof import("./notificationConfiguration").NotificationConfiguration = null as any;
utilities.lazyLoad(exports, ["NotificationConfiguration"], () => require("./notificationConfiguration"));

export { NotificationHubArgs, NotificationHubState } from "./notificationHub";
export type NotificationHub = import("./notificationHub").NotificationHub;
export const NotificationHub: typeof import("./notificationHub").NotificationHub = null as any;
utilities.lazyLoad(exports, ["NotificationHub"], () => require("./notificationHub"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:notifications/channelAssociation:ChannelAssociation":
                return new ChannelAssociation(name, <any>undefined, { urn })
            case "aws:notifications/contactsEmailContact:ContactsEmailContact":
                return new ContactsEmailContact(name, <any>undefined, { urn })
            case "aws:notifications/eventRule:EventRule":
                return new EventRule(name, <any>undefined, { urn })
            case "aws:notifications/notificationConfiguration:NotificationConfiguration":
                return new NotificationConfiguration(name, <any>undefined, { urn })
            case "aws:notifications/notificationHub:NotificationHub":
                return new NotificationHub(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "notifications/channelAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "notifications/contactsEmailContact", _module)
pulumi.runtime.registerResourceModule("aws", "notifications/eventRule", _module)
pulumi.runtime.registerResourceModule("aws", "notifications/notificationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "notifications/notificationHub", _module)
