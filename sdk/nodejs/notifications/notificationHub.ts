// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS User Notifications Notification Hub.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.notifications.NotificationHub("example", {notificationHubRegion: "us-west-2"});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import User Notifications Notification Hub using the `notification_hub_region`. For example:
 *
 * ```sh
 * $ pulumi import aws:notifications/notificationHub:NotificationHub example us-west-2
 * ```
 */
export class NotificationHub extends pulumi.CustomResource {
    /**
     * Get an existing NotificationHub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationHubState, opts?: pulumi.CustomResourceOptions): NotificationHub {
        return new NotificationHub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:notifications/notificationHub:NotificationHub';

    /**
     * Returns true if the given object is an instance of NotificationHub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationHub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationHub.__pulumiType;
    }

    /**
     * Notification Hub region.
     */
    public readonly notificationHubRegion!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.notifications.NotificationHubTimeouts | undefined>;

    /**
     * Create a NotificationHub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationHubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationHubArgs | NotificationHubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationHubState | undefined;
            resourceInputs["notificationHubRegion"] = state ? state.notificationHubRegion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NotificationHubArgs | undefined;
            if ((!args || args.notificationHubRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationHubRegion'");
            }
            resourceInputs["notificationHubRegion"] = args ? args.notificationHubRegion : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationHub.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationHub resources.
 */
export interface NotificationHubState {
    /**
     * Notification Hub region.
     */
    notificationHubRegion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.notifications.NotificationHubTimeouts>;
}

/**
 * The set of arguments for constructing a NotificationHub resource.
 */
export interface NotificationHubArgs {
    /**
     * Notification Hub region.
     */
    notificationHubRegion: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.notifications.NotificationHubTimeouts>;
}
