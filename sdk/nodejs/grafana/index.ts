// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { LicenseAssociationArgs, LicenseAssociationState } from "./licenseAssociation";
export type LicenseAssociation = import("./licenseAssociation").LicenseAssociation;
export const LicenseAssociation: typeof import("./licenseAssociation").LicenseAssociation = null as any;
utilities.lazyLoad(exports, ["LicenseAssociation"], () => require("./licenseAssociation"));

export { RoleAssociationArgs, RoleAssociationState } from "./roleAssociation";
export type RoleAssociation = import("./roleAssociation").RoleAssociation;
export const RoleAssociation: typeof import("./roleAssociation").RoleAssociation = null as any;
utilities.lazyLoad(exports, ["RoleAssociation"], () => require("./roleAssociation"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceApiKeyArgs, WorkspaceApiKeyState } from "./workspaceApiKey";
export type WorkspaceApiKey = import("./workspaceApiKey").WorkspaceApiKey;
export const WorkspaceApiKey: typeof import("./workspaceApiKey").WorkspaceApiKey = null as any;
utilities.lazyLoad(exports, ["WorkspaceApiKey"], () => require("./workspaceApiKey"));

export { WorkspaceSamlConfigurationArgs, WorkspaceSamlConfigurationState } from "./workspaceSamlConfiguration";
export type WorkspaceSamlConfiguration = import("./workspaceSamlConfiguration").WorkspaceSamlConfiguration;
export const WorkspaceSamlConfiguration: typeof import("./workspaceSamlConfiguration").WorkspaceSamlConfiguration = null as any;
utilities.lazyLoad(exports, ["WorkspaceSamlConfiguration"], () => require("./workspaceSamlConfiguration"));

export { WorkspaceServiceAccountArgs, WorkspaceServiceAccountState } from "./workspaceServiceAccount";
export type WorkspaceServiceAccount = import("./workspaceServiceAccount").WorkspaceServiceAccount;
export const WorkspaceServiceAccount: typeof import("./workspaceServiceAccount").WorkspaceServiceAccount = null as any;
utilities.lazyLoad(exports, ["WorkspaceServiceAccount"], () => require("./workspaceServiceAccount"));

export { WorkspaceServiceAccountTokenArgs, WorkspaceServiceAccountTokenState } from "./workspaceServiceAccountToken";
export type WorkspaceServiceAccountToken = import("./workspaceServiceAccountToken").WorkspaceServiceAccountToken;
export const WorkspaceServiceAccountToken: typeof import("./workspaceServiceAccountToken").WorkspaceServiceAccountToken = null as any;
utilities.lazyLoad(exports, ["WorkspaceServiceAccountToken"], () => require("./workspaceServiceAccountToken"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:grafana/licenseAssociation:LicenseAssociation":
                return new LicenseAssociation(name, <any>undefined, { urn })
            case "aws:grafana/roleAssociation:RoleAssociation":
                return new RoleAssociation(name, <any>undefined, { urn })
            case "aws:grafana/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "aws:grafana/workspaceApiKey:WorkspaceApiKey":
                return new WorkspaceApiKey(name, <any>undefined, { urn })
            case "aws:grafana/workspaceSamlConfiguration:WorkspaceSamlConfiguration":
                return new WorkspaceSamlConfiguration(name, <any>undefined, { urn })
            case "aws:grafana/workspaceServiceAccount:WorkspaceServiceAccount":
                return new WorkspaceServiceAccount(name, <any>undefined, { urn })
            case "aws:grafana/workspaceServiceAccountToken:WorkspaceServiceAccountToken":
                return new WorkspaceServiceAccountToken(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "grafana/licenseAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "grafana/roleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "grafana/workspace", _module)
pulumi.runtime.registerResourceModule("aws", "grafana/workspaceApiKey", _module)
pulumi.runtime.registerResourceModule("aws", "grafana/workspaceSamlConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "grafana/workspaceServiceAccount", _module)
pulumi.runtime.registerResourceModule("aws", "grafana/workspaceServiceAccountToken", _module)
