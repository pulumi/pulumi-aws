// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an Amazon Managed Grafana workspace license association resource.
 *
 * ## Example Usage
 * ### Basic configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const assume = new aws.iam.Role("assume", {assumeRolePolicy: JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: [{
 *         Action: "sts:AssumeRole",
 *         Effect: "Allow",
 *         Sid: "",
 *         Principal: {
 *             Service: "grafana.amazonaws.com",
 *         },
 *     }],
 * })});
 * const exampleWorkspace = new aws.grafana.Workspace("exampleWorkspace", {
 *     accountAccessType: "CURRENT_ACCOUNT",
 *     authenticationProviders: ["SAML"],
 *     permissionType: "SERVICE_MANAGED",
 *     roleArn: assume.arn,
 * });
 * const exampleLicenseAssociation = new aws.grafana.LicenseAssociation("exampleLicenseAssociation", {
 *     licenseType: "ENTERPRISE_FREE_TRIAL",
 *     workspaceId: exampleWorkspace.id,
 * });
 * ```
 *
 * ## Import
 *
 * Grafana workspace license association can be imported using the workspace's `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:grafana/licenseAssociation:LicenseAssociation example g-2054c75a02
 * ```
 */
export class LicenseAssociation extends pulumi.CustomResource {
    /**
     * Get an existing LicenseAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseAssociationState, opts?: pulumi.CustomResourceOptions): LicenseAssociation {
        return new LicenseAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:grafana/licenseAssociation:LicenseAssociation';

    /**
     * Returns true if the given object is an instance of LicenseAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseAssociation.__pulumiType;
    }

    /**
     * If `licenseType` is set to `ENTERPRISE_FREE_TRIAL`, this is the expiration date of the free trial.
     */
    public /*out*/ readonly freeTrialExpiration!: pulumi.Output<string>;
    /**
     * If `licenseType` is set to `ENTERPRISE`, this is the expiration date of the enterprise license.
     */
    public /*out*/ readonly licenseExpiration!: pulumi.Output<string>;
    /**
     * The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
     */
    public readonly licenseType!: pulumi.Output<string>;
    /**
     * The workspace id.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a LicenseAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseAssociationArgs | LicenseAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseAssociationState | undefined;
            resourceInputs["freeTrialExpiration"] = state ? state.freeTrialExpiration : undefined;
            resourceInputs["licenseExpiration"] = state ? state.licenseExpiration : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as LicenseAssociationArgs | undefined;
            if ((!args || args.licenseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseType'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["freeTrialExpiration"] = undefined /*out*/;
            resourceInputs["licenseExpiration"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicenseAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LicenseAssociation resources.
 */
export interface LicenseAssociationState {
    /**
     * If `licenseType` is set to `ENTERPRISE_FREE_TRIAL`, this is the expiration date of the free trial.
     */
    freeTrialExpiration?: pulumi.Input<string>;
    /**
     * If `licenseType` is set to `ENTERPRISE`, this is the expiration date of the enterprise license.
     */
    licenseExpiration?: pulumi.Input<string>;
    /**
     * The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * The workspace id.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LicenseAssociation resource.
 */
export interface LicenseAssociationArgs {
    /**
     * The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
     */
    licenseType: pulumi.Input<string>;
    /**
     * The workspace id.
     */
    workspaceId: pulumi.Input<string>;
}
