// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.grafana.WorkspaceServiceAccount("example", {
 *     name: "example-admin",
 *     grafanaRole: "ADMIN",
 *     workspaceId: exampleAwsGrafanaWorkspace.id,
 * });
 * const exampleWorkspaceServiceAccountToken = new aws.grafana.WorkspaceServiceAccountToken("example", {
 *     name: "example-key",
 *     serviceAccountId: example.serviceAccountId,
 *     secondsToLive: 3600,
 *     workspaceId: exampleAwsGrafanaWorkspace.id,
 * });
 * ```
 */
export class WorkspaceServiceAccountToken extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceServiceAccountToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceServiceAccountTokenState, opts?: pulumi.CustomResourceOptions): WorkspaceServiceAccountToken {
        return new WorkspaceServiceAccountToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:grafana/workspaceServiceAccountToken:WorkspaceServiceAccountToken';

    /**
     * Returns true if the given object is an instance of WorkspaceServiceAccountToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceServiceAccountToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceServiceAccountToken.__pulumiType;
    }

    /**
     * Specifies when the service account token was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies when the service account token will expire.
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    /**
     * The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
     */
    public /*out*/ readonly key!: pulumi.Output<string>;
    /**
     * A name for the token to create. The name must be unique within the workspace.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
     */
    public readonly secondsToLive!: pulumi.Output<number>;
    /**
     * The ID of the service account for which to create a token.
     */
    public readonly serviceAccountId!: pulumi.Output<string>;
    /**
     * Identifier of the service account token in the given Grafana workspace.
     */
    public /*out*/ readonly serviceAccountTokenId!: pulumi.Output<string>;
    /**
     * The Grafana workspace with which the service account token is associated.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a WorkspaceServiceAccountToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceServiceAccountTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceServiceAccountTokenArgs | WorkspaceServiceAccountTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceServiceAccountTokenState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secondsToLive"] = state ? state.secondsToLive : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["serviceAccountTokenId"] = state ? state.serviceAccountTokenId : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as WorkspaceServiceAccountTokenArgs | undefined;
            if ((!args || args.secondsToLive === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondsToLive'");
            }
            if ((!args || args.serviceAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secondsToLive"] = args ? args.secondsToLive : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["serviceAccountTokenId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WorkspaceServiceAccountToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceServiceAccountToken resources.
 */
export interface WorkspaceServiceAccountTokenState {
    /**
     * Specifies when the service account token was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies when the service account token will expire.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
     */
    key?: pulumi.Input<string>;
    /**
     * A name for the token to create. The name must be unique within the workspace.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
     */
    secondsToLive?: pulumi.Input<number>;
    /**
     * The ID of the service account for which to create a token.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * Identifier of the service account token in the given Grafana workspace.
     */
    serviceAccountTokenId?: pulumi.Input<string>;
    /**
     * The Grafana workspace with which the service account token is associated.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceServiceAccountToken resource.
 */
export interface WorkspaceServiceAccountTokenArgs {
    /**
     * A name for the token to create. The name must be unique within the workspace.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
     */
    secondsToLive: pulumi.Input<number>;
    /**
     * The ID of the service account for which to create a token.
     */
    serviceAccountId: pulumi.Input<string>;
    /**
     * The Grafana workspace with which the service account token is associated.
     */
    workspaceId: pulumi.Input<string>;
}
