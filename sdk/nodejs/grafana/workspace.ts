// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Workspace extends pulumi.CustomResource {
    /**
     * Get an existing Workspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceState, opts?: pulumi.CustomResourceOptions): Workspace {
        return new Workspace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:grafana/workspace:Workspace';

    /**
     * Returns true if the given object is an instance of Workspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workspace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workspace.__pulumiType;
    }

    public readonly accountAccessType!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authenticationProviders!: pulumi.Output<string[]>;
    public readonly dataSources!: pulumi.Output<string[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public /*out*/ readonly grafanaVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationDestinations!: pulumi.Output<string[] | undefined>;
    public readonly organizationRoleName!: pulumi.Output<string | undefined>;
    public readonly organizationalUnits!: pulumi.Output<string[] | undefined>;
    public readonly permissionType!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly samlConfigurationStatus!: pulumi.Output<string>;
    public readonly stackSetName!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly vpcConfiguration!: pulumi.Output<outputs.grafana.WorkspaceVpcConfiguration | undefined>;

    /**
     * Create a Workspace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceArgs | WorkspaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceState | undefined;
            resourceInputs["accountAccessType"] = state ? state.accountAccessType : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationProviders"] = state ? state.authenticationProviders : undefined;
            resourceInputs["dataSources"] = state ? state.dataSources : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["grafanaVersion"] = state ? state.grafanaVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationDestinations"] = state ? state.notificationDestinations : undefined;
            resourceInputs["organizationRoleName"] = state ? state.organizationRoleName : undefined;
            resourceInputs["organizationalUnits"] = state ? state.organizationalUnits : undefined;
            resourceInputs["permissionType"] = state ? state.permissionType : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["samlConfigurationStatus"] = state ? state.samlConfigurationStatus : undefined;
            resourceInputs["stackSetName"] = state ? state.stackSetName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcConfiguration"] = state ? state.vpcConfiguration : undefined;
        } else {
            const args = argsOrState as WorkspaceArgs | undefined;
            if ((!args || args.accountAccessType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountAccessType'");
            }
            if ((!args || args.authenticationProviders === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationProviders'");
            }
            if ((!args || args.permissionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionType'");
            }
            resourceInputs["accountAccessType"] = args ? args.accountAccessType : undefined;
            resourceInputs["authenticationProviders"] = args ? args.authenticationProviders : undefined;
            resourceInputs["dataSources"] = args ? args.dataSources : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationDestinations"] = args ? args.notificationDestinations : undefined;
            resourceInputs["organizationRoleName"] = args ? args.organizationRoleName : undefined;
            resourceInputs["organizationalUnits"] = args ? args.organizationalUnits : undefined;
            resourceInputs["permissionType"] = args ? args.permissionType : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["stackSetName"] = args ? args.stackSetName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcConfiguration"] = args ? args.vpcConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["grafanaVersion"] = undefined /*out*/;
            resourceInputs["samlConfigurationStatus"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workspace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workspace resources.
 */
export interface WorkspaceState {
    accountAccessType?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    authenticationProviders?: pulumi.Input<pulumi.Input<string>[]>;
    dataSources?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    grafanaVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationDestinations?: pulumi.Input<pulumi.Input<string>[]>;
    organizationRoleName?: pulumi.Input<string>;
    organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
    permissionType?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    samlConfigurationStatus?: pulumi.Input<string>;
    stackSetName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcConfiguration?: pulumi.Input<inputs.grafana.WorkspaceVpcConfiguration>;
}

/**
 * The set of arguments for constructing a Workspace resource.
 */
export interface WorkspaceArgs {
    accountAccessType: pulumi.Input<string>;
    authenticationProviders: pulumi.Input<pulumi.Input<string>[]>;
    dataSources?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationDestinations?: pulumi.Input<pulumi.Input<string>[]>;
    organizationRoleName?: pulumi.Input<string>;
    organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
    permissionType: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    stackSetName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcConfiguration?: pulumi.Input<inputs.grafana.WorkspaceVpcConfiguration>;
}
