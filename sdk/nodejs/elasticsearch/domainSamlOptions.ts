// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Manages SAML authentication options for an AWS Elasticsearch Domain.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * from "fs";
 *
 * const exampleDomain = new aws.elasticsearch.Domain("exampleDomain", {
 *     elasticsearchVersion: "1.5",
 *     clusterConfig: {
 *         instanceType: "r4.large.elasticsearch",
 *     },
 *     snapshotOptions: {
 *         automatedSnapshotStartHour: 23,
 *     },
 *     tags: {
 *         Domain: "TestDomain",
 *     },
 * });
 * const exampleDomainSamlOptions = new aws.elasticsearch.DomainSamlOptions("exampleDomainSamlOptions", {
 *     domainName: exampleDomain.domainName,
 *     samlOptions: {
 *         enabled: true,
 *         idp: {
 *             entityId: "https://example.com",
 *             metadataContent: fs.readFileSync("./saml-metadata.xml"),
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Elasticsearch domains can be imported using the `domain_name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:elasticsearch/domainSamlOptions:DomainSamlOptions example domain_name
 * ```
 */
export class DomainSamlOptions extends pulumi.CustomResource {
    /**
     * Get an existing DomainSamlOptions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainSamlOptionsState, opts?: pulumi.CustomResourceOptions): DomainSamlOptions {
        return new DomainSamlOptions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticsearch/domainSamlOptions:DomainSamlOptions';

    /**
     * Returns true if the given object is an instance of DomainSamlOptions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainSamlOptions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainSamlOptions.__pulumiType;
    }

    /**
     * Name of the domain.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * The SAML authentication options for an AWS Elasticsearch Domain.
     */
    public readonly samlOptions!: pulumi.Output<outputs.elasticsearch.DomainSamlOptionsSamlOptions | undefined>;

    /**
     * Create a DomainSamlOptions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainSamlOptionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainSamlOptionsArgs | DomainSamlOptionsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainSamlOptionsState | undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["samlOptions"] = state ? state.samlOptions : undefined;
        } else {
            const args = argsOrState as DomainSamlOptionsArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["samlOptions"] = args ? args.samlOptions : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(DomainSamlOptions.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainSamlOptions resources.
 */
export interface DomainSamlOptionsState {
    /**
     * Name of the domain.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The SAML authentication options for an AWS Elasticsearch Domain.
     */
    samlOptions?: pulumi.Input<inputs.elasticsearch.DomainSamlOptionsSamlOptions>;
}

/**
 * The set of arguments for constructing a DomainSamlOptions resource.
 */
export interface DomainSamlOptionsArgs {
    /**
     * Name of the domain.
     */
    domainName: pulumi.Input<string>;
    /**
     * The SAML authentication options for an AWS Elasticsearch Domain.
     */
    samlOptions?: pulumi.Input<inputs.elasticsearch.DomainSamlOptionsSamlOptions>;
}
