// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The ECR Authorization Token data source allows the authorization token, proxy endpoint, token expiration date, user name and password to be retrieved for an ECR repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const token = pulumi.output(aws.ecr.getAuthorizationToken({ async: true }));
 * ```
 */
export function getAuthorizationToken(args?: GetAuthorizationTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthorizationTokenResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aws:ecr/getAuthorizationToken:getAuthorizationToken", {
        "registryId": args.registryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuthorizationToken.
 */
export interface GetAuthorizationTokenArgs {
    /**
     * AWS account ID of the ECR Repository. If not specified the default account is assumed.
     */
    readonly registryId?: string;
}

/**
 * A collection of values returned by getAuthorizationToken.
 */
export interface GetAuthorizationTokenResult {
    /**
     * Temporary IAM authentication credentials to access the ECR repository encoded in base64 in the form of `user_name:password`.
     */
    readonly authorizationToken: string;
    /**
     * The time in UTC RFC3339 format when the authorization token expires.
     */
    readonly expiresAt: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Password decoded from the authorization token.
     */
    readonly password: string;
    /**
     * The registry URL to use in the docker login command.
     */
    readonly proxyEndpoint: string;
    readonly registryId?: string;
    /**
     * User name decoded from the authorization token.
     */
    readonly userName: string;
}
