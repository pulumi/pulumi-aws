// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetAuthorizationTokenArgs, GetAuthorizationTokenResult, GetAuthorizationTokenOutputArgs } from "./getAuthorizationToken";
export const getAuthorizationToken: typeof import("./getAuthorizationToken").getAuthorizationToken = null as any;
export const getAuthorizationTokenOutput: typeof import("./getAuthorizationToken").getAuthorizationTokenOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationToken","getAuthorizationTokenOutput"], () => require("./getAuthorizationToken"));

export { GetCredentialsArgs, GetCredentialsResult, GetCredentialsOutputArgs } from "./getCredentials";
export const getCredentials: typeof import("./getCredentials").getCredentials = null as any;
export const getCredentialsOutput: typeof import("./getCredentials").getCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCredentials","getCredentialsOutput"], () => require("./getCredentials"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetPullThroughCacheRuleArgs, GetPullThroughCacheRuleResult, GetPullThroughCacheRuleOutputArgs } from "./getPullThroughCacheRule";
export const getPullThroughCacheRule: typeof import("./getPullThroughCacheRule").getPullThroughCacheRule = null as any;
export const getPullThroughCacheRuleOutput: typeof import("./getPullThroughCacheRule").getPullThroughCacheRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPullThroughCacheRule","getPullThroughCacheRuleOutput"], () => require("./getPullThroughCacheRule"));

export { GetRepositoriesResult } from "./getRepositories";
export const getRepositories: typeof import("./getRepositories").getRepositories = null as any;
export const getRepositoriesOutput: typeof import("./getRepositories").getRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositories","getRepositoriesOutput"], () => require("./getRepositories"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { LifecyclePolicyArgs, LifecyclePolicyState } from "./lifecyclePolicy";
export type LifecyclePolicy = import("./lifecyclePolicy").LifecyclePolicy;
export const LifecyclePolicy: typeof import("./lifecyclePolicy").LifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["LifecyclePolicy"], () => require("./lifecyclePolicy"));

export * from "./lifecyclePolicyDocument";
export { PullThroughCacheRuleArgs, PullThroughCacheRuleState } from "./pullThroughCacheRule";
export type PullThroughCacheRule = import("./pullThroughCacheRule").PullThroughCacheRule;
export const PullThroughCacheRule: typeof import("./pullThroughCacheRule").PullThroughCacheRule = null as any;
utilities.lazyLoad(exports, ["PullThroughCacheRule"], () => require("./pullThroughCacheRule"));

export { RegistryPolicyArgs, RegistryPolicyState } from "./registryPolicy";
export type RegistryPolicy = import("./registryPolicy").RegistryPolicy;
export const RegistryPolicy: typeof import("./registryPolicy").RegistryPolicy = null as any;
utilities.lazyLoad(exports, ["RegistryPolicy"], () => require("./registryPolicy"));

export { RegistryScanningConfigurationArgs, RegistryScanningConfigurationState } from "./registryScanningConfiguration";
export type RegistryScanningConfiguration = import("./registryScanningConfiguration").RegistryScanningConfiguration;
export const RegistryScanningConfiguration: typeof import("./registryScanningConfiguration").RegistryScanningConfiguration = null as any;
utilities.lazyLoad(exports, ["RegistryScanningConfiguration"], () => require("./registryScanningConfiguration"));

export { ReplicationConfigurationArgs, ReplicationConfigurationState } from "./replicationConfiguration";
export type ReplicationConfiguration = import("./replicationConfiguration").ReplicationConfiguration;
export const ReplicationConfiguration: typeof import("./replicationConfiguration").ReplicationConfiguration = null as any;
utilities.lazyLoad(exports, ["ReplicationConfiguration"], () => require("./replicationConfiguration"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryPolicyArgs, RepositoryPolicyState } from "./repositoryPolicy";
export type RepositoryPolicy = import("./repositoryPolicy").RepositoryPolicy;
export const RepositoryPolicy: typeof import("./repositoryPolicy").RepositoryPolicy = null as any;
utilities.lazyLoad(exports, ["RepositoryPolicy"], () => require("./repositoryPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:ecr/lifecyclePolicy:LifecyclePolicy":
                return new LifecyclePolicy(name, <any>undefined, { urn })
            case "aws:ecr/pullThroughCacheRule:PullThroughCacheRule":
                return new PullThroughCacheRule(name, <any>undefined, { urn })
            case "aws:ecr/registryPolicy:RegistryPolicy":
                return new RegistryPolicy(name, <any>undefined, { urn })
            case "aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration":
                return new RegistryScanningConfiguration(name, <any>undefined, { urn })
            case "aws:ecr/replicationConfiguration:ReplicationConfiguration":
                return new ReplicationConfiguration(name, <any>undefined, { urn })
            case "aws:ecr/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "aws:ecr/repositoryPolicy:RepositoryPolicy":
                return new RepositoryPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ecr/lifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "ecr/pullThroughCacheRule", _module)
pulumi.runtime.registerResourceModule("aws", "ecr/registryPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "ecr/registryScanningConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "ecr/replicationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "ecr/repository", _module)
pulumi.runtime.registerResourceModule("aws", "ecr/repositoryPolicy", _module)
