// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ActiveReceiptRuleSetArgs, ActiveReceiptRuleSetState } from "./activeReceiptRuleSet";
export type ActiveReceiptRuleSet = import("./activeReceiptRuleSet").ActiveReceiptRuleSet;
export const ActiveReceiptRuleSet: typeof import("./activeReceiptRuleSet").ActiveReceiptRuleSet = null as any;
utilities.lazyLoad(exports, ["ActiveReceiptRuleSet"], () => require("./activeReceiptRuleSet"));

export { ConfigurationSetArgs, ConfigurationSetState } from "./configurationSet";
export type ConfigurationSet = import("./configurationSet").ConfigurationSet;
export const ConfigurationSet: typeof import("./configurationSet").ConfigurationSet = null as any;
utilities.lazyLoad(exports, ["ConfigurationSet"], () => require("./configurationSet"));

export { DomainDkimArgs, DomainDkimState } from "./domainDkim";
export type DomainDkim = import("./domainDkim").DomainDkim;
export const DomainDkim: typeof import("./domainDkim").DomainDkim = null as any;
utilities.lazyLoad(exports, ["DomainDkim"], () => require("./domainDkim"));

export { DomainIdentityArgs, DomainIdentityState } from "./domainIdentity";
export type DomainIdentity = import("./domainIdentity").DomainIdentity;
export const DomainIdentity: typeof import("./domainIdentity").DomainIdentity = null as any;
utilities.lazyLoad(exports, ["DomainIdentity"], () => require("./domainIdentity"));

export { DomainIdentityVerificationArgs, DomainIdentityVerificationState } from "./domainIdentityVerification";
export type DomainIdentityVerification = import("./domainIdentityVerification").DomainIdentityVerification;
export const DomainIdentityVerification: typeof import("./domainIdentityVerification").DomainIdentityVerification = null as any;
utilities.lazyLoad(exports, ["DomainIdentityVerification"], () => require("./domainIdentityVerification"));

export { EmailIdentityArgs, EmailIdentityState } from "./emailIdentity";
export type EmailIdentity = import("./emailIdentity").EmailIdentity;
export const EmailIdentity: typeof import("./emailIdentity").EmailIdentity = null as any;
utilities.lazyLoad(exports, ["EmailIdentity"], () => require("./emailIdentity"));

export { EventDestinationArgs, EventDestinationState } from "./eventDestination";
export type EventDestination = import("./eventDestination").EventDestination;
export const EventDestination: typeof import("./eventDestination").EventDestination = null as any;
utilities.lazyLoad(exports, ["EventDestination"], () => require("./eventDestination"));

export { GetActiveReceiptRuleSetResult } from "./getActiveReceiptRuleSet";
export const getActiveReceiptRuleSet: typeof import("./getActiveReceiptRuleSet").getActiveReceiptRuleSet = null as any;
export const getActiveReceiptRuleSetOutput: typeof import("./getActiveReceiptRuleSet").getActiveReceiptRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getActiveReceiptRuleSet","getActiveReceiptRuleSetOutput"], () => require("./getActiveReceiptRuleSet"));

export { GetDomainIdentityArgs, GetDomainIdentityResult, GetDomainIdentityOutputArgs } from "./getDomainIdentity";
export const getDomainIdentity: typeof import("./getDomainIdentity").getDomainIdentity = null as any;
export const getDomainIdentityOutput: typeof import("./getDomainIdentity").getDomainIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getDomainIdentity","getDomainIdentityOutput"], () => require("./getDomainIdentity"));

export { GetEmailIdentityArgs, GetEmailIdentityResult, GetEmailIdentityOutputArgs } from "./getEmailIdentity";
export const getEmailIdentity: typeof import("./getEmailIdentity").getEmailIdentity = null as any;
export const getEmailIdentityOutput: typeof import("./getEmailIdentity").getEmailIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getEmailIdentity","getEmailIdentityOutput"], () => require("./getEmailIdentity"));

export { IdentityNotificationTopicArgs, IdentityNotificationTopicState } from "./identityNotificationTopic";
export type IdentityNotificationTopic = import("./identityNotificationTopic").IdentityNotificationTopic;
export const IdentityNotificationTopic: typeof import("./identityNotificationTopic").IdentityNotificationTopic = null as any;
utilities.lazyLoad(exports, ["IdentityNotificationTopic"], () => require("./identityNotificationTopic"));

export { IdentityPolicyArgs, IdentityPolicyState } from "./identityPolicy";
export type IdentityPolicy = import("./identityPolicy").IdentityPolicy;
export const IdentityPolicy: typeof import("./identityPolicy").IdentityPolicy = null as any;
utilities.lazyLoad(exports, ["IdentityPolicy"], () => require("./identityPolicy"));

export { MailFromArgs, MailFromState } from "./mailFrom";
export type MailFrom = import("./mailFrom").MailFrom;
export const MailFrom: typeof import("./mailFrom").MailFrom = null as any;
utilities.lazyLoad(exports, ["MailFrom"], () => require("./mailFrom"));

export { ReceiptFilterArgs, ReceiptFilterState } from "./receiptFilter";
export type ReceiptFilter = import("./receiptFilter").ReceiptFilter;
export const ReceiptFilter: typeof import("./receiptFilter").ReceiptFilter = null as any;
utilities.lazyLoad(exports, ["ReceiptFilter"], () => require("./receiptFilter"));

export { ReceiptRuleArgs, ReceiptRuleState } from "./receiptRule";
export type ReceiptRule = import("./receiptRule").ReceiptRule;
export const ReceiptRule: typeof import("./receiptRule").ReceiptRule = null as any;
utilities.lazyLoad(exports, ["ReceiptRule"], () => require("./receiptRule"));

export { ReceiptRuleSetArgs, ReceiptRuleSetState } from "./receiptRuleSet";
export type ReceiptRuleSet = import("./receiptRuleSet").ReceiptRuleSet;
export const ReceiptRuleSet: typeof import("./receiptRuleSet").ReceiptRuleSet = null as any;
utilities.lazyLoad(exports, ["ReceiptRuleSet"], () => require("./receiptRuleSet"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:ses/activeReceiptRuleSet:ActiveReceiptRuleSet":
                return new ActiveReceiptRuleSet(name, <any>undefined, { urn })
            case "aws:ses/configurationSet:ConfigurationSet":
                return new ConfigurationSet(name, <any>undefined, { urn })
            case "aws:ses/domainDkim:DomainDkim":
                return new DomainDkim(name, <any>undefined, { urn })
            case "aws:ses/domainIdentity:DomainIdentity":
                return new DomainIdentity(name, <any>undefined, { urn })
            case "aws:ses/domainIdentityVerification:DomainIdentityVerification":
                return new DomainIdentityVerification(name, <any>undefined, { urn })
            case "aws:ses/emailIdentity:EmailIdentity":
                return new EmailIdentity(name, <any>undefined, { urn })
            case "aws:ses/eventDestination:EventDestination":
                return new EventDestination(name, <any>undefined, { urn })
            case "aws:ses/identityNotificationTopic:IdentityNotificationTopic":
                return new IdentityNotificationTopic(name, <any>undefined, { urn })
            case "aws:ses/identityPolicy:IdentityPolicy":
                return new IdentityPolicy(name, <any>undefined, { urn })
            case "aws:ses/mailFrom:MailFrom":
                return new MailFrom(name, <any>undefined, { urn })
            case "aws:ses/receiptFilter:ReceiptFilter":
                return new ReceiptFilter(name, <any>undefined, { urn })
            case "aws:ses/receiptRule:ReceiptRule":
                return new ReceiptRule(name, <any>undefined, { urn })
            case "aws:ses/receiptRuleSet:ReceiptRuleSet":
                return new ReceiptRuleSet(name, <any>undefined, { urn })
            case "aws:ses/template:Template":
                return new Template(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ses/activeReceiptRuleSet", _module)
pulumi.runtime.registerResourceModule("aws", "ses/configurationSet", _module)
pulumi.runtime.registerResourceModule("aws", "ses/domainDkim", _module)
pulumi.runtime.registerResourceModule("aws", "ses/domainIdentity", _module)
pulumi.runtime.registerResourceModule("aws", "ses/domainIdentityVerification", _module)
pulumi.runtime.registerResourceModule("aws", "ses/emailIdentity", _module)
pulumi.runtime.registerResourceModule("aws", "ses/eventDestination", _module)
pulumi.runtime.registerResourceModule("aws", "ses/identityNotificationTopic", _module)
pulumi.runtime.registerResourceModule("aws", "ses/identityPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "ses/mailFrom", _module)
pulumi.runtime.registerResourceModule("aws", "ses/receiptFilter", _module)
pulumi.runtime.registerResourceModule("aws", "ses/receiptRule", _module)
pulumi.runtime.registerResourceModule("aws", "ses/receiptRuleSet", _module)
pulumi.runtime.registerResourceModule("aws", "ses/template", _module)
