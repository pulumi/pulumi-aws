// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to get information on an AWS Cost and Usage Report Definition.
 *
 * > *NOTE:* The AWS Cost and Usage Report service is only available in `us-east-1` currently.
 *
 * > *NOTE:* If AWS Organizations is enabled, only the master account can use this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const reportDefinition = aws.cur.getReportDefinition({
 *     reportName: "example",
 * });
 * ```
 */
export function getReportDefinition(args: GetReportDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetReportDefinitionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:cur/getReportDefinition:getReportDefinition", {
        "reportName": args.reportName,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getReportDefinition.
 */
export interface GetReportDefinitionArgs {
    /**
     * Name of the report definition to match.
     */
    reportName: string;
    /**
     * Map of key-value pairs assigned to the resource.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getReportDefinition.
 */
export interface GetReportDefinitionResult {
    /**
     * A list of additional artifacts.
     */
    readonly additionalArtifacts: string[];
    /**
     * A list of schema elements.
     */
    readonly additionalSchemaElements: string[];
    /**
     * Preferred format for report.
     */
    readonly compression: string;
    /**
     * Preferred compression format for report.
     */
    readonly format: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * If true reports are updated after they have been finalized.
     */
    readonly refreshClosedReports: boolean;
    readonly reportName: string;
    /**
     * Overwrite the previous version of each report or to deliver the report in addition to the previous versions.
     */
    readonly reportVersioning: string;
    /**
     * Name of customer S3 bucket.
     */
    readonly s3Bucket: string;
    /**
     * Preferred report path prefix.
     */
    readonly s3Prefix: string;
    /**
     * Region of customer S3 bucket.
     */
    readonly s3Region: string;
    /**
     * Map of key-value pairs assigned to the resource.
     */
    readonly tags: {[key: string]: string};
    /**
     * Frequency on which report data are measured and displayed.
     */
    readonly timeUnit: string;
}
/**
 * Use this data source to get information on an AWS Cost and Usage Report Definition.
 *
 * > *NOTE:* The AWS Cost and Usage Report service is only available in `us-east-1` currently.
 *
 * > *NOTE:* If AWS Organizations is enabled, only the master account can use this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const reportDefinition = aws.cur.getReportDefinition({
 *     reportName: "example",
 * });
 * ```
 */
export function getReportDefinitionOutput(args: GetReportDefinitionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetReportDefinitionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws:cur/getReportDefinition:getReportDefinition", {
        "reportName": args.reportName,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getReportDefinition.
 */
export interface GetReportDefinitionOutputArgs {
    /**
     * Name of the report definition to match.
     */
    reportName: pulumi.Input<string>;
    /**
     * Map of key-value pairs assigned to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
