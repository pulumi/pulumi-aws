// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS WorkSpaces Web User Settings resource. Once associated with a web portal, user settings control how users can transfer data between a streaming session and their local devices.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.workspaces.WebUserSettings("example", {
 *     copyAllowed: "Enabled",
 *     downloadAllowed: "Enabled",
 *     pasteAllowed: "Enabled",
 *     printAllowed: "Enabled",
 *     uploadAllowed: "Enabled",
 * });
 * ```
 *
 * ### With Toolbar Configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.workspaces.WebUserSettings("example", {
 *     copyAllowed: "Enabled",
 *     downloadAllowed: "Enabled",
 *     pasteAllowed: "Enabled",
 *     printAllowed: "Enabled",
 *     uploadAllowed: "Enabled",
 *     toolbarConfiguration: {
 *         toolbarType: "Docked",
 *         visualMode: "Dark",
 *         hiddenToolbarItems: [
 *             "Webcam",
 *             "Microphone",
 *         ],
 *     },
 * });
 * ```
 *
 * ### Complete Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kms.Key("example", {
 *     description: "KMS key for WorkSpaces Web User Settings",
 *     deletionWindowInDays: 7,
 * });
 * const exampleWebUserSettings = new aws.workspaces.WebUserSettings("example", {
 *     copyAllowed: "Enabled",
 *     downloadAllowed: "Enabled",
 *     pasteAllowed: "Enabled",
 *     printAllowed: "Enabled",
 *     uploadAllowed: "Enabled",
 *     deepLinkAllowed: "Enabled",
 *     disconnectTimeoutInMinutes: 30,
 *     idleDisconnectTimeoutInMinutes: 15,
 *     customerManagedKey: example.arn,
 *     additionalEncryptionContext: {
 *         Environment: "Production",
 *     },
 *     toolbarConfiguration: {
 *         toolbarType: "Docked",
 *         visualMode: "Dark",
 *         hiddenToolbarItems: [
 *             "Webcam",
 *             "Microphone",
 *         ],
 *         maxDisplayResolution: "size1920X1080",
 *     },
 *     cookieSynchronizationConfiguration: {
 *         allowlists: [{
 *             domain: "example.com",
 *             path: "/path",
 *         }],
 *         blocklists: [{
 *             domain: "blocked.com",
 *         }],
 *     },
 *     tags: {
 *         Name: "example-user-settings",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import WorkSpaces Web User Settings using the `user_settings_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:workspaces/webUserSettings:WebUserSettings example arn:aws:workspacesweb:us-west-2:123456789012:usersettings/abcdef12345
 * ```
 */
export class WebUserSettings extends pulumi.CustomResource {
    /**
     * Get an existing WebUserSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebUserSettingsState, opts?: pulumi.CustomResourceOptions): WebUserSettings {
        return new WebUserSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:workspaces/webUserSettings:WebUserSettings';

    /**
     * Returns true if the given object is an instance of WebUserSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebUserSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebUserSettings.__pulumiType;
    }

    /**
     * Additional encryption context for the user settings.
     */
    public readonly additionalEncryptionContext!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of web portal ARNs to associate with the user settings.
     */
    public /*out*/ readonly associatedPortalArns!: pulumi.Output<string[]>;
    /**
     * Configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser. Detailed below.
     */
    public readonly cookieSynchronizationConfiguration!: pulumi.Output<outputs.workspaces.WebUserSettingsCookieSynchronizationConfiguration | undefined>;
    /**
     * Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     */
    public readonly copyAllowed!: pulumi.Output<string>;
    /**
     * ARN of the customer managed KMS key.
     */
    public readonly customerManagedKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
     */
    public readonly deepLinkAllowed!: pulumi.Output<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
     */
    public readonly disconnectTimeoutInMinutes!: pulumi.Output<number | undefined>;
    /**
     * Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     */
    public readonly downloadAllowed!: pulumi.Output<string>;
    /**
     * Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
     */
    public readonly idleDisconnectTimeoutInMinutes!: pulumi.Output<number | undefined>;
    /**
     * Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     */
    public readonly pasteAllowed!: pulumi.Output<string>;
    /**
     * Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
     */
    public readonly printAllowed!: pulumi.Output<string>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Configuration of the toolbar. Detailed below.
     */
    public readonly toolbarConfiguration!: pulumi.Output<outputs.workspaces.WebUserSettingsToolbarConfiguration | undefined>;
    /**
     * Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     *
     * The following arguments are optional:
     */
    public readonly uploadAllowed!: pulumi.Output<string>;
    /**
     * ARN of the user settings resource.
     */
    public /*out*/ readonly userSettingsArn!: pulumi.Output<string>;

    /**
     * Create a WebUserSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebUserSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebUserSettingsArgs | WebUserSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebUserSettingsState | undefined;
            resourceInputs["additionalEncryptionContext"] = state ? state.additionalEncryptionContext : undefined;
            resourceInputs["associatedPortalArns"] = state ? state.associatedPortalArns : undefined;
            resourceInputs["cookieSynchronizationConfiguration"] = state ? state.cookieSynchronizationConfiguration : undefined;
            resourceInputs["copyAllowed"] = state ? state.copyAllowed : undefined;
            resourceInputs["customerManagedKey"] = state ? state.customerManagedKey : undefined;
            resourceInputs["deepLinkAllowed"] = state ? state.deepLinkAllowed : undefined;
            resourceInputs["disconnectTimeoutInMinutes"] = state ? state.disconnectTimeoutInMinutes : undefined;
            resourceInputs["downloadAllowed"] = state ? state.downloadAllowed : undefined;
            resourceInputs["idleDisconnectTimeoutInMinutes"] = state ? state.idleDisconnectTimeoutInMinutes : undefined;
            resourceInputs["pasteAllowed"] = state ? state.pasteAllowed : undefined;
            resourceInputs["printAllowed"] = state ? state.printAllowed : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["toolbarConfiguration"] = state ? state.toolbarConfiguration : undefined;
            resourceInputs["uploadAllowed"] = state ? state.uploadAllowed : undefined;
            resourceInputs["userSettingsArn"] = state ? state.userSettingsArn : undefined;
        } else {
            const args = argsOrState as WebUserSettingsArgs | undefined;
            if ((!args || args.copyAllowed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'copyAllowed'");
            }
            if ((!args || args.downloadAllowed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'downloadAllowed'");
            }
            if ((!args || args.pasteAllowed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pasteAllowed'");
            }
            if ((!args || args.printAllowed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'printAllowed'");
            }
            if ((!args || args.uploadAllowed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uploadAllowed'");
            }
            resourceInputs["additionalEncryptionContext"] = args ? args.additionalEncryptionContext : undefined;
            resourceInputs["cookieSynchronizationConfiguration"] = args ? args.cookieSynchronizationConfiguration : undefined;
            resourceInputs["copyAllowed"] = args ? args.copyAllowed : undefined;
            resourceInputs["customerManagedKey"] = args ? args.customerManagedKey : undefined;
            resourceInputs["deepLinkAllowed"] = args ? args.deepLinkAllowed : undefined;
            resourceInputs["disconnectTimeoutInMinutes"] = args ? args.disconnectTimeoutInMinutes : undefined;
            resourceInputs["downloadAllowed"] = args ? args.downloadAllowed : undefined;
            resourceInputs["idleDisconnectTimeoutInMinutes"] = args ? args.idleDisconnectTimeoutInMinutes : undefined;
            resourceInputs["pasteAllowed"] = args ? args.pasteAllowed : undefined;
            resourceInputs["printAllowed"] = args ? args.printAllowed : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toolbarConfiguration"] = args ? args.toolbarConfiguration : undefined;
            resourceInputs["uploadAllowed"] = args ? args.uploadAllowed : undefined;
            resourceInputs["associatedPortalArns"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["userSettingsArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebUserSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebUserSettings resources.
 */
export interface WebUserSettingsState {
    /**
     * Additional encryption context for the user settings.
     */
    additionalEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of web portal ARNs to associate with the user settings.
     */
    associatedPortalArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser. Detailed below.
     */
    cookieSynchronizationConfiguration?: pulumi.Input<inputs.workspaces.WebUserSettingsCookieSynchronizationConfiguration>;
    /**
     * Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     */
    copyAllowed?: pulumi.Input<string>;
    /**
     * ARN of the customer managed KMS key.
     */
    customerManagedKey?: pulumi.Input<string>;
    /**
     * Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
     */
    deepLinkAllowed?: pulumi.Input<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
     */
    disconnectTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     */
    downloadAllowed?: pulumi.Input<string>;
    /**
     * Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
     */
    idleDisconnectTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     */
    pasteAllowed?: pulumi.Input<string>;
    /**
     * Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
     */
    printAllowed?: pulumi.Input<string>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration of the toolbar. Detailed below.
     */
    toolbarConfiguration?: pulumi.Input<inputs.workspaces.WebUserSettingsToolbarConfiguration>;
    /**
     * Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     *
     * The following arguments are optional:
     */
    uploadAllowed?: pulumi.Input<string>;
    /**
     * ARN of the user settings resource.
     */
    userSettingsArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebUserSettings resource.
 */
export interface WebUserSettingsArgs {
    /**
     * Additional encryption context for the user settings.
     */
    additionalEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser. Detailed below.
     */
    cookieSynchronizationConfiguration?: pulumi.Input<inputs.workspaces.WebUserSettingsCookieSynchronizationConfiguration>;
    /**
     * Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     */
    copyAllowed: pulumi.Input<string>;
    /**
     * ARN of the customer managed KMS key.
     */
    customerManagedKey?: pulumi.Input<string>;
    /**
     * Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
     */
    deepLinkAllowed?: pulumi.Input<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
     */
    disconnectTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
     */
    downloadAllowed: pulumi.Input<string>;
    /**
     * Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
     */
    idleDisconnectTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     */
    pasteAllowed: pulumi.Input<string>;
    /**
     * Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
     */
    printAllowed: pulumi.Input<string>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration of the toolbar. Detailed below.
     */
    toolbarConfiguration?: pulumi.Input<inputs.workspaces.WebUserSettingsToolbarConfiguration>;
    /**
     * Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
     *
     * The following arguments are optional:
     */
    uploadAllowed: pulumi.Input<string>;
}
