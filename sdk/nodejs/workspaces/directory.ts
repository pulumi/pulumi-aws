// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Directory extends pulumi.CustomResource {
    /**
     * Get an existing Directory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryState, opts?: pulumi.CustomResourceOptions): Directory {
        return new Directory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:workspaces/directory:Directory';

    /**
     * Returns true if the given object is an instance of Directory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Directory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Directory.__pulumiType;
    }

    public /*out*/ readonly alias!: pulumi.Output<string>;
    public /*out*/ readonly customerUserName!: pulumi.Output<string>;
    public readonly directoryId!: pulumi.Output<string>;
    public /*out*/ readonly directoryName!: pulumi.Output<string>;
    public /*out*/ readonly directoryType!: pulumi.Output<string>;
    public /*out*/ readonly dnsIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly iamRoleId!: pulumi.Output<string>;
    public readonly ipGroupIds!: pulumi.Output<string[]>;
    public /*out*/ readonly registrationCode!: pulumi.Output<string>;
    public readonly selfServicePermissions!: pulumi.Output<outputs.workspaces.DirectorySelfServicePermissions>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly workspaceAccessProperties!: pulumi.Output<outputs.workspaces.DirectoryWorkspaceAccessProperties>;
    public readonly workspaceCreationProperties!: pulumi.Output<outputs.workspaces.DirectoryWorkspaceCreationProperties>;
    public /*out*/ readonly workspaceSecurityGroupId!: pulumi.Output<string>;

    /**
     * Create a Directory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryArgs | DirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["customerUserName"] = state ? state.customerUserName : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["directoryName"] = state ? state.directoryName : undefined;
            resourceInputs["directoryType"] = state ? state.directoryType : undefined;
            resourceInputs["dnsIpAddresses"] = state ? state.dnsIpAddresses : undefined;
            resourceInputs["iamRoleId"] = state ? state.iamRoleId : undefined;
            resourceInputs["ipGroupIds"] = state ? state.ipGroupIds : undefined;
            resourceInputs["registrationCode"] = state ? state.registrationCode : undefined;
            resourceInputs["selfServicePermissions"] = state ? state.selfServicePermissions : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["workspaceAccessProperties"] = state ? state.workspaceAccessProperties : undefined;
            resourceInputs["workspaceCreationProperties"] = state ? state.workspaceCreationProperties : undefined;
            resourceInputs["workspaceSecurityGroupId"] = state ? state.workspaceSecurityGroupId : undefined;
        } else {
            const args = argsOrState as DirectoryArgs | undefined;
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["ipGroupIds"] = args ? args.ipGroupIds : undefined;
            resourceInputs["selfServicePermissions"] = args ? args.selfServicePermissions : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workspaceAccessProperties"] = args ? args.workspaceAccessProperties : undefined;
            resourceInputs["workspaceCreationProperties"] = args ? args.workspaceCreationProperties : undefined;
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["customerUserName"] = undefined /*out*/;
            resourceInputs["directoryName"] = undefined /*out*/;
            resourceInputs["directoryType"] = undefined /*out*/;
            resourceInputs["dnsIpAddresses"] = undefined /*out*/;
            resourceInputs["iamRoleId"] = undefined /*out*/;
            resourceInputs["registrationCode"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["workspaceSecurityGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Directory.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Directory resources.
 */
export interface DirectoryState {
    alias?: pulumi.Input<string>;
    customerUserName?: pulumi.Input<string>;
    directoryId?: pulumi.Input<string>;
    directoryName?: pulumi.Input<string>;
    directoryType?: pulumi.Input<string>;
    dnsIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    iamRoleId?: pulumi.Input<string>;
    ipGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    registrationCode?: pulumi.Input<string>;
    selfServicePermissions?: pulumi.Input<inputs.workspaces.DirectorySelfServicePermissions>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    workspaceAccessProperties?: pulumi.Input<inputs.workspaces.DirectoryWorkspaceAccessProperties>;
    workspaceCreationProperties?: pulumi.Input<inputs.workspaces.DirectoryWorkspaceCreationProperties>;
    workspaceSecurityGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Directory resource.
 */
export interface DirectoryArgs {
    directoryId: pulumi.Input<string>;
    ipGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    selfServicePermissions?: pulumi.Input<inputs.workspaces.DirectorySelfServicePermissions>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    workspaceAccessProperties?: pulumi.Input<inputs.workspaces.DirectoryWorkspaceAccessProperties>;
    workspaceCreationProperties?: pulumi.Input<inputs.workspaces.DirectoryWorkspaceCreationProperties>;
}
