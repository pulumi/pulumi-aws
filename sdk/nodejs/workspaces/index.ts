// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DirectoryArgs, DirectoryState } from "./directory";
export type Directory = import("./directory").Directory;
export const Directory: typeof import("./directory").Directory = null as any;
utilities.lazyLoad(exports, ["Directory"], () => require("./directory"));

export { GetBundleArgs, GetBundleResult, GetBundleOutputArgs } from "./getBundle";
export const getBundle: typeof import("./getBundle").getBundle = null as any;
export const getBundleOutput: typeof import("./getBundle").getBundleOutput = null as any;
utilities.lazyLoad(exports, ["getBundle","getBundleOutput"], () => require("./getBundle"));

export { GetDirectoryArgs, GetDirectoryResult, GetDirectoryOutputArgs } from "./getDirectory";
export const getDirectory: typeof import("./getDirectory").getDirectory = null as any;
export const getDirectoryOutput: typeof import("./getDirectory").getDirectoryOutput = null as any;
utilities.lazyLoad(exports, ["getDirectory","getDirectoryOutput"], () => require("./getDirectory"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { IpGroupArgs, IpGroupState } from "./ipGroup";
export type IpGroup = import("./ipGroup").IpGroup;
export const IpGroup: typeof import("./ipGroup").IpGroup = null as any;
utilities.lazyLoad(exports, ["IpGroup"], () => require("./ipGroup"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:workspaces/directory:Directory":
                return new Directory(name, <any>undefined, { urn })
            case "aws:workspaces/ipGroup:IpGroup":
                return new IpGroup(name, <any>undefined, { urn })
            case "aws:workspaces/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "workspaces/directory", _module)
pulumi.runtime.registerResourceModule("aws", "workspaces/ipGroup", _module)
pulumi.runtime.registerResourceModule("aws", "workspaces/workspace", _module)
