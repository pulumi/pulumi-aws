// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS WorkSpaces Web Network Settings resource. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const example = new aws.ec2.Vpc("example", {cidrBlock: "10.0.0.0/16"});
 * const exampleSubnet: aws.ec2.Subnet[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     exampleSubnet.push(new aws.ec2.Subnet(`example-${range.value}`, {
 *         vpcId: example.id,
 *         cidrBlock: example.cidrBlock.apply(cidrBlock => std.cidrsubnetOutput({
 *             input: cidrBlock,
 *             newbits: 8,
 *             netnum: range.value,
 *         })).apply(invoke => invoke.result),
 *         availabilityZone: available.names[range.value],
 *     }));
 * }
 * const example1: aws.ec2.SecurityGroup[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     example1.push(new aws.ec2.SecurityGroup(`example1-${range.value}`, {
 *         vpcId: example.id,
 *         name: `example-sg-${range.value}$`,
 *     }));
 * }
 * const exampleWebNetworkSettings = new aws.workspaces.WebNetworkSettings("example", {
 *     vpcId: example.id,
 *     subnetIds: [
 *         exampleSubnet[0].id,
 *         exampleSubnet[1].id,
 *     ],
 *     securityGroupIds: [
 *         exampleAwsSecurityGroup[0].id,
 *         exampleAwsSecurityGroup[1].id,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import WorkSpaces Web Network Settings using the `network_settings_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:workspaces/webNetworkSettings:WebNetworkSettings example arn:aws:workspacesweb:us-west-2:123456789012:networksettings/abcdef12345
 * ```
 */
export class WebNetworkSettings extends pulumi.CustomResource {
    /**
     * Get an existing WebNetworkSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebNetworkSettingsState, opts?: pulumi.CustomResourceOptions): WebNetworkSettings {
        return new WebNetworkSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:workspaces/webNetworkSettings:WebNetworkSettings';

    /**
     * Returns true if the given object is an instance of WebNetworkSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebNetworkSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebNetworkSettings.__pulumiType;
    }

    /**
     * List of web portal ARNs associated with the network settings.
     */
    public /*out*/ readonly associatedPortalArns!: pulumi.Output<string[]>;
    /**
     * ARN of the network settings resource.
     */
    public /*out*/ readonly networkSettingsArn!: pulumi.Output<string>;
    /**
     * One or more security groups used to control access from streaming instances to your VPC.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The VPC that streaming instances will connect to.
     *
     * The following arguments are optional:
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a WebNetworkSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebNetworkSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebNetworkSettingsArgs | WebNetworkSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebNetworkSettingsState | undefined;
            resourceInputs["associatedPortalArns"] = state ? state.associatedPortalArns : undefined;
            resourceInputs["networkSettingsArn"] = state ? state.networkSettingsArn : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as WebNetworkSettingsArgs | undefined;
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["associatedPortalArns"] = undefined /*out*/;
            resourceInputs["networkSettingsArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebNetworkSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebNetworkSettings resources.
 */
export interface WebNetworkSettingsState {
    /**
     * List of web portal ARNs associated with the network settings.
     */
    associatedPortalArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ARN of the network settings resource.
     */
    networkSettingsArn?: pulumi.Input<string>;
    /**
     * One or more security groups used to control access from streaming instances to your VPC.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VPC that streaming instances will connect to.
     *
     * The following arguments are optional:
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebNetworkSettings resource.
 */
export interface WebNetworkSettingsArgs {
    /**
     * One or more security groups used to control access from streaming instances to your VPC.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The VPC that streaming instances will connect to.
     *
     * The following arguments are optional:
     */
    vpcId: pulumi.Input<string>;
}
