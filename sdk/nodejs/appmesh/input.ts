// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface GatewayRouteSpec {
    /**
     * Specification of a gRPC gateway route.
     */
    grpcRoute?: pulumi.Input<inputs.GatewayRouteSpecGrpcRoute>;
    /**
     * Specification of an HTTP/2 gateway route.
     */
    http2Route?: pulumi.Input<inputs.GatewayRouteSpecHttp2Route>;
    /**
     * Specification of an HTTP gateway route.
     */
    httpRoute?: pulumi.Input<inputs.GatewayRouteSpecHttpRoute>;
    /**
     * Priority for the gateway route, between `0` and `1000`.
     */
    priority?: pulumi.Input<number>;
}
export interface GatewayRouteSpecGrpcRoute {
    /**
     * Action to take if a match is determined.
     */
    action: pulumi.Input<inputs.GatewayRouteSpecGrpcRouteAction>;
    /**
     * Criteria for determining a request match.
     */
    match: pulumi.Input<inputs.GatewayRouteSpecGrpcRouteMatch>;
}
export interface GatewayRouteSpecGrpcRouteAction {
    /**
     * Target that traffic is routed to when a request matches the gateway route.
     */
    target: pulumi.Input<inputs.GatewayRouteSpecGrpcRouteActionTarget>;
}
export interface GatewayRouteSpecGrpcRouteActionTarget {
    /**
     * The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
     */
    port?: pulumi.Input<number>;
    /**
     * Virtual service gateway route target.
     */
    virtualService: pulumi.Input<inputs.GatewayRouteSpecGrpcRouteActionTargetVirtualService>;
}
export interface GatewayRouteSpecGrpcRouteActionTargetVirtualService {
    /**
     * Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
     */
    virtualServiceName: pulumi.Input<string>;
}
export interface GatewayRouteSpecGrpcRouteMatch {
    /**
     * The port number to match from the request.
     */
    port?: pulumi.Input<number>;
    /**
     * Fully qualified domain name for the service to match from the request.
     */
    serviceName: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2Route {
    /**
     * Action to take if a match is determined.
     */
    action: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteAction>;
    /**
     * Criteria for determining a request match.
     */
    match: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteMatch>;
}
export interface GatewayRouteSpecHttp2RouteAction {
    /**
     * Gateway route action to rewrite.
     */
    rewrite?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteActionRewrite>;
    /**
     * Target that traffic is routed to when a request matches the gateway route.
     */
    target: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteActionTarget>;
}
export interface GatewayRouteSpecHttp2RouteActionRewrite {
    /**
     * Host name to rewrite.
     */
    hostname?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteActionRewriteHostname>;
    /**
     * Exact path to rewrite.
     */
    path?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteActionRewritePath>;
    /**
     * Specified beginning characters to rewrite.
     */
    prefix?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteActionRewritePrefix>;
}
export interface GatewayRouteSpecHttp2RouteActionRewriteHostname {
    /**
     * Default target host name to write to. Valid values: `ENABLED`, `DISABLED`.
     */
    defaultTargetHostname: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteActionRewritePath {
    /**
     * The exact path to match on.
     */
    exact: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteActionRewritePrefix {
    /**
     * Default prefix used to replace the incoming route prefix when rewritten. Valid values: `ENABLED`, `DISABLED`.
     */
    defaultPrefix?: pulumi.Input<string>;
    /**
     * Value used to replace the incoming route prefix when rewritten.
     */
    value?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteActionTarget {
    /**
     * The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
     */
    port?: pulumi.Input<number>;
    /**
     * Virtual service gateway route target.
     */
    virtualService: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteActionTargetVirtualService>;
}
export interface GatewayRouteSpecHttp2RouteActionTargetVirtualService {
    /**
     * Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
     */
    virtualServiceName: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteMatch {
    /**
     * Client request headers to match on.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.GatewayRouteSpecHttp2RouteMatchHeader>[]>;
    /**
     * Host name to match on.
     */
    hostname?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteMatchHostname>;
    /**
     * Client request path to match on.
     */
    path?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteMatchPath>;
    /**
     * The port number to match from the request.
     */
    port?: pulumi.Input<number>;
    /**
     * Path to match requests with. This parameter must always start with `/`, which by itself matches all requests to the virtual service name.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Client request query parameters to match on.
     */
    queryParameters?: pulumi.Input<pulumi.Input<inputs.GatewayRouteSpecHttp2RouteMatchQueryParameter>[]>;
}
export interface GatewayRouteSpecHttp2RouteMatchHeader {
    /**
     * If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
     */
    invert?: pulumi.Input<boolean>;
    /**
     * Method and value to match the header value sent with a request. Specify one match method.
     */
    match?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteMatchHeaderMatch>;
    /**
     * Name for the HTTP header in the client request that will be matched on.
     */
    name: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteMatchHeaderMatch {
    /**
     * Header value sent by the client must match the specified value exactly.
     */
    exact?: pulumi.Input<string>;
    /**
     * Header value sent by the client must begin with the specified characters.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Object that specifies the range of numbers that the header value sent by the client must be included in.
     */
    range?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteMatchHeaderMatchRange>;
    /**
     * Header value sent by the client must include the specified characters.
     */
    regex?: pulumi.Input<string>;
    /**
     * Header value sent by the client must end with the specified characters.
     */
    suffix?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteMatchHeaderMatchRange {
    /**
     * End of the range.
     */
    end: pulumi.Input<number>;
    /**
     * Start of the range.
     */
    start: pulumi.Input<number>;
}
export interface GatewayRouteSpecHttp2RouteMatchHostname {
    /**
     * Exact host name to match on.
     */
    exact?: pulumi.Input<string>;
    /**
     * Specified ending characters of the host name to match on.
     */
    suffix?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteMatchPath {
    /**
     * The exact path to match on.
     */
    exact?: pulumi.Input<string>;
    /**
     * The regex used to match the path.
     */
    regex?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteMatchQueryParameter {
    /**
     * The query parameter to match on.
     */
    match?: pulumi.Input<inputs.GatewayRouteSpecHttp2RouteMatchQueryParameterMatch>;
    /**
     * Name for the query parameter that will be matched on.
     */
    name: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttp2RouteMatchQueryParameterMatch {
    /**
     * The exact query parameter to match on.
     */
    exact?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRoute {
    /**
     * Action to take if a match is determined.
     */
    action: pulumi.Input<inputs.GatewayRouteSpecHttpRouteAction>;
    /**
     * Criteria for determining a request match.
     */
    match: pulumi.Input<inputs.GatewayRouteSpecHttpRouteMatch>;
}
export interface GatewayRouteSpecHttpRouteAction {
    /**
     * Gateway route action to rewrite.
     */
    rewrite?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteActionRewrite>;
    /**
     * Target that traffic is routed to when a request matches the gateway route.
     */
    target: pulumi.Input<inputs.GatewayRouteSpecHttpRouteActionTarget>;
}
export interface GatewayRouteSpecHttpRouteActionRewrite {
    /**
     * Host name to rewrite.
     */
    hostname?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteActionRewriteHostname>;
    /**
     * Exact path to rewrite.
     */
    path?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteActionRewritePath>;
    /**
     * Specified beginning characters to rewrite.
     */
    prefix?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteActionRewritePrefix>;
}
export interface GatewayRouteSpecHttpRouteActionRewriteHostname {
    /**
     * Default target host name to write to. Valid values: `ENABLED`, `DISABLED`.
     */
    defaultTargetHostname: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteActionRewritePath {
    /**
     * The exact path to match on.
     */
    exact: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteActionRewritePrefix {
    /**
     * Default prefix used to replace the incoming route prefix when rewritten. Valid values: `ENABLED`, `DISABLED`.
     */
    defaultPrefix?: pulumi.Input<string>;
    /**
     * Value used to replace the incoming route prefix when rewritten.
     */
    value?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteActionTarget {
    /**
     * The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
     */
    port?: pulumi.Input<number>;
    /**
     * Virtual service gateway route target.
     */
    virtualService: pulumi.Input<inputs.GatewayRouteSpecHttpRouteActionTargetVirtualService>;
}
export interface GatewayRouteSpecHttpRouteActionTargetVirtualService {
    /**
     * Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
     */
    virtualServiceName: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteMatch {
    /**
     * Client request headers to match on.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.GatewayRouteSpecHttpRouteMatchHeader>[]>;
    /**
     * Host name to match on.
     */
    hostname?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteMatchHostname>;
    /**
     * Client request path to match on.
     */
    path?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteMatchPath>;
    /**
     * The port number to match from the request.
     */
    port?: pulumi.Input<number>;
    /**
     * Path to match requests with. This parameter must always start with `/`, which by itself matches all requests to the virtual service name.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Client request query parameters to match on.
     */
    queryParameters?: pulumi.Input<pulumi.Input<inputs.GatewayRouteSpecHttpRouteMatchQueryParameter>[]>;
}
export interface GatewayRouteSpecHttpRouteMatchHeader {
    /**
     * If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
     */
    invert?: pulumi.Input<boolean>;
    /**
     * Method and value to match the header value sent with a request. Specify one match method.
     */
    match?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteMatchHeaderMatch>;
    /**
     * Name for the HTTP header in the client request that will be matched on.
     */
    name: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteMatchHeaderMatch {
    /**
     * Header value sent by the client must match the specified value exactly.
     */
    exact?: pulumi.Input<string>;
    /**
     * Header value sent by the client must begin with the specified characters.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Object that specifies the range of numbers that the header value sent by the client must be included in.
     */
    range?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteMatchHeaderMatchRange>;
    /**
     * Header value sent by the client must include the specified characters.
     */
    regex?: pulumi.Input<string>;
    /**
     * Header value sent by the client must end with the specified characters.
     */
    suffix?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteMatchHeaderMatchRange {
    /**
     * End of the range.
     */
    end: pulumi.Input<number>;
    /**
     * Start of the range.
     */
    start: pulumi.Input<number>;
}
export interface GatewayRouteSpecHttpRouteMatchHostname {
    /**
     * Exact host name to match on.
     */
    exact?: pulumi.Input<string>;
    /**
     * Specified ending characters of the host name to match on.
     */
    suffix?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteMatchPath {
    /**
     * The exact path to match on.
     */
    exact?: pulumi.Input<string>;
    /**
     * The regex used to match the path.
     */
    regex?: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteMatchQueryParameter {
    /**
     * The query parameter to match on.
     */
    match?: pulumi.Input<inputs.GatewayRouteSpecHttpRouteMatchQueryParameterMatch>;
    /**
     * Name for the query parameter that will be matched on.
     */
    name: pulumi.Input<string>;
}
export interface GatewayRouteSpecHttpRouteMatchQueryParameterMatch {
    /**
     * The exact query parameter to match on.
     */
    exact?: pulumi.Input<string>;
}
export interface MeshSpec {
    /**
     * Egress filter rules for the service mesh.
     */
    egressFilter?: pulumi.Input<inputs.MeshSpecEgressFilter>;
    /**
     * The service discovery information for the service mesh.
     */
    serviceDiscovery?: pulumi.Input<inputs.MeshSpecServiceDiscovery>;
}
export interface MeshSpecEgressFilter {
    type?: pulumi.Input<string>;
}
export interface MeshSpecServiceDiscovery {
    ipPreference?: pulumi.Input<string>;
}
export interface RouteSpec {
    /**
     * GRPC routing information for the route.
     */
    grpcRoute?: pulumi.Input<inputs.RouteSpecGrpcRoute>;
    /**
     * HTTP/2 routing information for the route.
     */
    http2Route?: pulumi.Input<inputs.RouteSpecHttp2Route>;
    /**
     * HTTP routing information for the route.
     */
    httpRoute?: pulumi.Input<inputs.RouteSpecHttpRoute>;
    /**
     * Priority for the route, between `0` and `1000`.
     * Routes are matched based on the specified value, where `0` is the highest priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * TCP routing information for the route.
     */
    tcpRoute?: pulumi.Input<inputs.RouteSpecTcpRoute>;
}
export interface RouteSpecGrpcRoute {
    /**
     * Action to take if a match is determined.
     */
    action: pulumi.Input<inputs.RouteSpecGrpcRouteAction>;
    /**
     * Criteria for determining an gRPC request match.
     */
    match?: pulumi.Input<inputs.RouteSpecGrpcRouteMatch>;
    /**
     * Retry policy.
     */
    retryPolicy?: pulumi.Input<inputs.RouteSpecGrpcRouteRetryPolicy>;
    /**
     * Types of timeouts.
     */
    timeout?: pulumi.Input<inputs.RouteSpecGrpcRouteTimeout>;
}
export interface RouteSpecGrpcRouteAction {
    /**
     * Targets that traffic is routed to when a request matches the route.
     * You can specify one or more targets and their relative weights with which to distribute traffic.
     */
    weightedTargets: pulumi.Input<pulumi.Input<inputs.RouteSpecGrpcRouteActionWeightedTarget>[]>;
}
export interface RouteSpecGrpcRouteActionWeightedTarget {
    /**
     * The targeted port of the weighted object.
     */
    port?: pulumi.Input<number>;
    /**
     * Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
     */
    virtualNode: pulumi.Input<string>;
    /**
     * Relative weight of the weighted target. An integer between 0 and 100.
     */
    weight: pulumi.Input<number>;
}
export interface RouteSpecGrpcRouteMatch {
    /**
     * Data to match from the gRPC request.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.RouteSpecGrpcRouteMatchMetadata>[]>;
    /**
     * Method name to match from the request. If you specify a name, you must also specify a `serviceName`.
     */
    methodName?: pulumi.Input<string>;
    /**
     * The port number to match from the request.
     */
    port?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    /**
     * Fully qualified domain name for the service to match from the request.
     */
    serviceName?: pulumi.Input<string>;
}
export interface RouteSpecGrpcRouteMatchMetadata {
    /**
     * If `true`, the match is on the opposite of the `match` criteria. Default is `false`.
     */
    invert?: pulumi.Input<boolean>;
    /**
     * Data to match from the request.
     */
    match?: pulumi.Input<inputs.RouteSpecGrpcRouteMatchMetadataMatch>;
    /**
     * Name of the route. Must be between 1 and 50 characters in length.
     */
    name: pulumi.Input<string>;
}
export interface RouteSpecGrpcRouteMatchMetadataMatch {
    /**
     * Value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
     */
    exact?: pulumi.Input<string>;
    /**
     * Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Object that specifies the range of numbers that the value sent by the client must be included in.
     */
    range?: pulumi.Input<inputs.RouteSpecGrpcRouteMatchMetadataMatchRange>;
    /**
     * Value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
     */
    regex?: pulumi.Input<string>;
    /**
     * Value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
     */
    suffix?: pulumi.Input<string>;
}
export interface RouteSpecGrpcRouteMatchMetadataMatchRange {
    /**
     * End of the range.
     */
    end: pulumi.Input<number>;
    /**
     * Start of the range.
     */
    start: pulumi.Input<number>;
}
export interface RouteSpecGrpcRouteRetryPolicy {
    /**
     * List of gRPC retry events.
     * Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
     */
    grpcRetryEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of HTTP retry events.
     * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
     */
    httpRetryEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of retries.
     */
    maxRetries: pulumi.Input<number>;
    /**
     * Per-retry timeout.
     */
    perRetryTimeout: pulumi.Input<inputs.RouteSpecGrpcRouteRetryPolicyPerRetryTimeout>;
    /**
     * List of TCP retry events. The only valid value is `connection-error`.
     */
    tcpRetryEvents?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface RouteSpecGrpcRouteRetryPolicyPerRetryTimeout {
    /**
     * Retry unit. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Retry value.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecGrpcRouteTimeout {
    /**
     * Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     */
    idle?: pulumi.Input<inputs.RouteSpecGrpcRouteTimeoutIdle>;
    /**
     * Per request timeout.
     */
    perRequest?: pulumi.Input<inputs.RouteSpecGrpcRouteTimeoutPerRequest>;
}
export interface RouteSpecGrpcRouteTimeoutIdle {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecGrpcRouteTimeoutPerRequest {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecHttp2Route {
    /**
     * Action to take if a match is determined.
     */
    action: pulumi.Input<inputs.RouteSpecHttp2RouteAction>;
    /**
     * Criteria for determining an HTTP request match.
     */
    match: pulumi.Input<inputs.RouteSpecHttp2RouteMatch>;
    /**
     * Retry policy.
     */
    retryPolicy?: pulumi.Input<inputs.RouteSpecHttp2RouteRetryPolicy>;
    /**
     * Types of timeouts.
     */
    timeout?: pulumi.Input<inputs.RouteSpecHttp2RouteTimeout>;
}
export interface RouteSpecHttp2RouteAction {
    /**
     * Targets that traffic is routed to when a request matches the route.
     * You can specify one or more targets and their relative weights with which to distribute traffic.
     */
    weightedTargets: pulumi.Input<pulumi.Input<inputs.RouteSpecHttp2RouteActionWeightedTarget>[]>;
}
export interface RouteSpecHttp2RouteActionWeightedTarget {
    /**
     * The targeted port of the weighted object.
     */
    port?: pulumi.Input<number>;
    /**
     * Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
     */
    virtualNode: pulumi.Input<string>;
    /**
     * Relative weight of the weighted target. An integer between 0 and 100.
     */
    weight: pulumi.Input<number>;
}
export interface RouteSpecHttp2RouteMatch {
    /**
     * Client request headers to match on.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.RouteSpecHttp2RouteMatchHeader>[]>;
    /**
     * Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     */
    method?: pulumi.Input<string>;
    /**
     * Client request path to match on.
     */
    path?: pulumi.Input<inputs.RouteSpecHttp2RouteMatchPath>;
    /**
     * The port number to match from the request.
     */
    port?: pulumi.Input<number>;
    /**
     * Path with which to match requests.
     * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Client request query parameters to match on.
     */
    queryParameters?: pulumi.Input<pulumi.Input<inputs.RouteSpecHttp2RouteMatchQueryParameter>[]>;
    /**
     * Client request header scheme to match on. Valid values: `http`, `https`.
     */
    scheme?: pulumi.Input<string>;
}
export interface RouteSpecHttp2RouteMatchHeader {
    /**
     * If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
     */
    invert?: pulumi.Input<boolean>;
    /**
     * Method and value to match the header value sent with a request. Specify one match method.
     */
    match?: pulumi.Input<inputs.RouteSpecHttp2RouteMatchHeaderMatch>;
    /**
     * Name for the HTTP header in the client request that will be matched on.
     */
    name: pulumi.Input<string>;
}
export interface RouteSpecHttp2RouteMatchHeaderMatch {
    /**
     * Header value sent by the client must match the specified value exactly.
     */
    exact?: pulumi.Input<string>;
    /**
     * Header value sent by the client must begin with the specified characters.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Object that specifies the range of numbers that the header value sent by the client must be included in.
     */
    range?: pulumi.Input<inputs.RouteSpecHttp2RouteMatchHeaderMatchRange>;
    /**
     * Header value sent by the client must include the specified characters.
     */
    regex?: pulumi.Input<string>;
    /**
     * Header value sent by the client must end with the specified characters.
     */
    suffix?: pulumi.Input<string>;
}
export interface RouteSpecHttp2RouteMatchHeaderMatchRange {
    /**
     * End of the range.
     */
    end: pulumi.Input<number>;
    /**
     * Start of the range.
     */
    start: pulumi.Input<number>;
}
export interface RouteSpecHttp2RouteMatchPath {
    /**
     * The exact path to match on.
     */
    exact?: pulumi.Input<string>;
    /**
     * The regex used to match the path.
     */
    regex?: pulumi.Input<string>;
}
export interface RouteSpecHttp2RouteMatchQueryParameter {
    /**
     * The query parameter to match on.
     */
    match?: pulumi.Input<inputs.RouteSpecHttp2RouteMatchQueryParameterMatch>;
    /**
     * Name for the query parameter that will be matched on.
     */
    name: pulumi.Input<string>;
}
export interface RouteSpecHttp2RouteMatchQueryParameterMatch {
    /**
     * The exact query parameter to match on.
     */
    exact?: pulumi.Input<string>;
}
export interface RouteSpecHttp2RouteRetryPolicy {
    /**
     * List of HTTP retry events.
     * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
     */
    httpRetryEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of retries.
     */
    maxRetries: pulumi.Input<number>;
    /**
     * Per-retry timeout.
     */
    perRetryTimeout: pulumi.Input<inputs.RouteSpecHttp2RouteRetryPolicyPerRetryTimeout>;
    /**
     * List of TCP retry events. The only valid value is `connection-error`.
     *
     * You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
     */
    tcpRetryEvents?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface RouteSpecHttp2RouteRetryPolicyPerRetryTimeout {
    /**
     * Retry unit. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Retry value.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecHttp2RouteTimeout {
    /**
     * Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     */
    idle?: pulumi.Input<inputs.RouteSpecHttp2RouteTimeoutIdle>;
    /**
     * Per request timeout.
     */
    perRequest?: pulumi.Input<inputs.RouteSpecHttp2RouteTimeoutPerRequest>;
}
export interface RouteSpecHttp2RouteTimeoutIdle {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecHttp2RouteTimeoutPerRequest {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecHttpRoute {
    /**
     * Action to take if a match is determined.
     */
    action: pulumi.Input<inputs.RouteSpecHttpRouteAction>;
    /**
     * Criteria for determining an HTTP request match.
     */
    match: pulumi.Input<inputs.RouteSpecHttpRouteMatch>;
    /**
     * Retry policy.
     */
    retryPolicy?: pulumi.Input<inputs.RouteSpecHttpRouteRetryPolicy>;
    /**
     * Types of timeouts.
     */
    timeout?: pulumi.Input<inputs.RouteSpecHttpRouteTimeout>;
}
export interface RouteSpecHttpRouteAction {
    /**
     * Targets that traffic is routed to when a request matches the route.
     * You can specify one or more targets and their relative weights with which to distribute traffic.
     */
    weightedTargets: pulumi.Input<pulumi.Input<inputs.RouteSpecHttpRouteActionWeightedTarget>[]>;
}
export interface RouteSpecHttpRouteActionWeightedTarget {
    /**
     * The targeted port of the weighted object.
     */
    port?: pulumi.Input<number>;
    /**
     * Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
     */
    virtualNode: pulumi.Input<string>;
    /**
     * Relative weight of the weighted target. An integer between 0 and 100.
     */
    weight: pulumi.Input<number>;
}
export interface RouteSpecHttpRouteMatch {
    /**
     * Client request headers to match on.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.RouteSpecHttpRouteMatchHeader>[]>;
    /**
     * Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     */
    method?: pulumi.Input<string>;
    /**
     * Client request path to match on.
     */
    path?: pulumi.Input<inputs.RouteSpecHttpRouteMatchPath>;
    /**
     * The port number to match from the request.
     */
    port?: pulumi.Input<number>;
    /**
     * Path with which to match requests.
     * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Client request query parameters to match on.
     */
    queryParameters?: pulumi.Input<pulumi.Input<inputs.RouteSpecHttpRouteMatchQueryParameter>[]>;
    /**
     * Client request header scheme to match on. Valid values: `http`, `https`.
     */
    scheme?: pulumi.Input<string>;
}
export interface RouteSpecHttpRouteMatchHeader {
    /**
     * If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
     */
    invert?: pulumi.Input<boolean>;
    /**
     * Method and value to match the header value sent with a request. Specify one match method.
     */
    match?: pulumi.Input<inputs.RouteSpecHttpRouteMatchHeaderMatch>;
    /**
     * Name for the HTTP header in the client request that will be matched on.
     */
    name: pulumi.Input<string>;
}
export interface RouteSpecHttpRouteMatchHeaderMatch {
    /**
     * Header value sent by the client must match the specified value exactly.
     */
    exact?: pulumi.Input<string>;
    /**
     * Header value sent by the client must begin with the specified characters.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Object that specifies the range of numbers that the header value sent by the client must be included in.
     */
    range?: pulumi.Input<inputs.RouteSpecHttpRouteMatchHeaderMatchRange>;
    /**
     * Header value sent by the client must include the specified characters.
     */
    regex?: pulumi.Input<string>;
    /**
     * Header value sent by the client must end with the specified characters.
     */
    suffix?: pulumi.Input<string>;
}
export interface RouteSpecHttpRouteMatchHeaderMatchRange {
    /**
     * End of the range.
     */
    end: pulumi.Input<number>;
    /**
     * Start of the range.
     */
    start: pulumi.Input<number>;
}
export interface RouteSpecHttpRouteMatchPath {
    /**
     * The exact path to match on.
     */
    exact?: pulumi.Input<string>;
    /**
     * The regex used to match the path.
     */
    regex?: pulumi.Input<string>;
}
export interface RouteSpecHttpRouteMatchQueryParameter {
    /**
     * The query parameter to match on.
     */
    match?: pulumi.Input<inputs.RouteSpecHttpRouteMatchQueryParameterMatch>;
    /**
     * Name for the query parameter that will be matched on.
     */
    name: pulumi.Input<string>;
}
export interface RouteSpecHttpRouteMatchQueryParameterMatch {
    /**
     * The exact query parameter to match on.
     */
    exact?: pulumi.Input<string>;
}
export interface RouteSpecHttpRouteRetryPolicy {
    /**
     * List of HTTP retry events.
     * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
     */
    httpRetryEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of retries.
     */
    maxRetries: pulumi.Input<number>;
    /**
     * Per-retry timeout.
     */
    perRetryTimeout: pulumi.Input<inputs.RouteSpecHttpRouteRetryPolicyPerRetryTimeout>;
    /**
     * List of TCP retry events. The only valid value is `connection-error`.
     *
     * You must specify at least one value for `httpRetryEvents`, or at least one value for `tcpRetryEvents`.
     */
    tcpRetryEvents?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface RouteSpecHttpRouteRetryPolicyPerRetryTimeout {
    /**
     * Retry unit. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Retry value.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecHttpRouteTimeout {
    /**
     * Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     */
    idle?: pulumi.Input<inputs.RouteSpecHttpRouteTimeoutIdle>;
    /**
     * Per request timeout.
     */
    perRequest?: pulumi.Input<inputs.RouteSpecHttpRouteTimeoutPerRequest>;
}
export interface RouteSpecHttpRouteTimeoutIdle {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecHttpRouteTimeoutPerRequest {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface RouteSpecTcpRoute {
    /**
     * Action to take if a match is determined.
     */
    action: pulumi.Input<inputs.RouteSpecTcpRouteAction>;
    match?: pulumi.Input<inputs.RouteSpecTcpRouteMatch>;
    /**
     * Types of timeouts.
     */
    timeout?: pulumi.Input<inputs.RouteSpecTcpRouteTimeout>;
}
export interface RouteSpecTcpRouteAction {
    /**
     * Targets that traffic is routed to when a request matches the route.
     * You can specify one or more targets and their relative weights with which to distribute traffic.
     */
    weightedTargets: pulumi.Input<pulumi.Input<inputs.RouteSpecTcpRouteActionWeightedTarget>[]>;
}
export interface RouteSpecTcpRouteActionWeightedTarget {
    /**
     * The targeted port of the weighted object.
     */
    port?: pulumi.Input<number>;
    /**
     * Virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
     */
    virtualNode: pulumi.Input<string>;
    /**
     * Relative weight of the weighted target. An integer between 0 and 100.
     */
    weight: pulumi.Input<number>;
}
export interface RouteSpecTcpRouteMatch {
    port?: pulumi.Input<number>;
}
export interface RouteSpecTcpRouteTimeout {
    /**
     * Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     */
    idle?: pulumi.Input<inputs.RouteSpecTcpRouteTimeoutIdle>;
}
export interface RouteSpecTcpRouteTimeoutIdle {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualGatewaySpec {
    /**
     * Defaults for backends.
     */
    backendDefaults?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaults>;
    /**
     * Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
     */
    listeners: pulumi.Input<pulumi.Input<inputs.VirtualGatewaySpecListener>[]>;
    /**
     * Inbound and outbound access logging information for the virtual gateway.
     */
    logging?: pulumi.Input<inputs.VirtualGatewaySpecLogging>;
}
export interface VirtualGatewaySpecBackendDefaults {
    /**
     * Default client policy for virtual gateway backends.
     */
    clientPolicy?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicy>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicy {
    /**
     * Transport Layer Security (TLS) client policy.
     */
    tls?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTls>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTls {
    /**
     * Listener's TLS certificate.
     */
    certificate?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate>;
    /**
     * Whether the policy is enforced. Default is `true`.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * One or more ports that the policy is enforced for.
     */
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Listener's Transport Layer Security (TLS) validation context.
     */
    validation: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate {
    /**
     * Local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile>;
    /**
     * A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
    /**
     * Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    privateKey: pulumi.Input<string>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds {
    /**
     * Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation {
    /**
     * SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
     */
    subjectAlternativeNames?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames>;
    /**
     * TLS validation context trust.
     */
    trust: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
    /**
     * Criteria for determining a SAN's match.
     */
    match: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
    /**
     * Values sent must match the specified values exactly.
     */
    exacts: pulumi.Input<pulumi.Input<string>[]>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust {
    /**
     * TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
     */
    acm?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm>;
    /**
     * TLS validation context trust for a local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile>;
    /**
     * TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
    /**
     * One or more ACM ARNs.
     */
    certificateAuthorityArns: pulumi.Input<pulumi.Input<string>[]>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
}
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds {
    /**
     * Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualGatewaySpecListener {
    /**
     * Connection pool information for the listener.
     */
    connectionPool?: pulumi.Input<inputs.VirtualGatewaySpecListenerConnectionPool>;
    /**
     * Health check information for the listener.
     */
    healthCheck?: pulumi.Input<inputs.VirtualGatewaySpecListenerHealthCheck>;
    /**
     * Port mapping information for the listener.
     */
    portMapping: pulumi.Input<inputs.VirtualGatewaySpecListenerPortMapping>;
    /**
     * Transport Layer Security (TLS) properties for the listener
     */
    tls?: pulumi.Input<inputs.VirtualGatewaySpecListenerTls>;
}
export interface VirtualGatewaySpecListenerConnectionPool {
    /**
     * Connection pool information for gRPC listeners.
     */
    grpc?: pulumi.Input<inputs.VirtualGatewaySpecListenerConnectionPoolGrpc>;
    /**
     * Connection pool information for HTTP listeners.
     */
    http?: pulumi.Input<inputs.VirtualGatewaySpecListenerConnectionPoolHttp>;
    /**
     * Connection pool information for HTTP2 listeners.
     */
    http2?: pulumi.Input<inputs.VirtualGatewaySpecListenerConnectionPoolHttp2>;
}
export interface VirtualGatewaySpecListenerConnectionPoolGrpc {
    /**
     * Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
     */
    maxRequests: pulumi.Input<number>;
}
export interface VirtualGatewaySpecListenerConnectionPoolHttp2 {
    /**
     * Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
     */
    maxRequests: pulumi.Input<number>;
}
export interface VirtualGatewaySpecListenerConnectionPoolHttp {
    /**
     * Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
     */
    maxConnections: pulumi.Input<number>;
    /**
     * Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
     */
    maxPendingRequests?: pulumi.Input<number>;
}
export interface VirtualGatewaySpecListenerHealthCheck {
    /**
     * Number of consecutive successful health checks that must occur before declaring listener healthy.
     */
    healthyThreshold: pulumi.Input<number>;
    /**
     * Time period in milliseconds between each health check execution.
     */
    intervalMillis: pulumi.Input<number>;
    /**
     * Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
     */
    path?: pulumi.Input<string>;
    /**
     * Destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
     */
    port?: pulumi.Input<number>;
    /**
     * Protocol for the health check request. Valid values are `http`, `http2`, and `grpc`.
     */
    protocol: pulumi.Input<string>;
    /**
     * Amount of time to wait when receiving a response from the health check, in milliseconds.
     */
    timeoutMillis: pulumi.Input<number>;
    /**
     * Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
     */
    unhealthyThreshold: pulumi.Input<number>;
}
export interface VirtualGatewaySpecListenerPortMapping {
    /**
     * Port used for the port mapping.
     */
    port: pulumi.Input<number>;
    /**
     * Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
     */
    protocol: pulumi.Input<string>;
}
export interface VirtualGatewaySpecListenerTls {
    /**
     * Listener's TLS certificate.
     */
    certificate: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsCertificate>;
    /**
     * Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
     */
    mode: pulumi.Input<string>;
    /**
     * Listener's Transport Layer Security (TLS) validation context.
     */
    validation?: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsValidation>;
}
export interface VirtualGatewaySpecListenerTlsCertificate {
    /**
     * An AWS Certificate Manager (ACM) certificate.
     */
    acm?: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsCertificateAcm>;
    /**
     * Local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsCertificateFile>;
    /**
     * A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsCertificateSds>;
}
export interface VirtualGatewaySpecListenerTlsCertificateAcm {
    /**
     * ARN for the certificate.
     */
    certificateArn: pulumi.Input<string>;
}
export interface VirtualGatewaySpecListenerTlsCertificateFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
    /**
     * Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    privateKey: pulumi.Input<string>;
}
export interface VirtualGatewaySpecListenerTlsCertificateSds {
    /**
     * Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualGatewaySpecListenerTlsValidation {
    /**
     * SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
     */
    subjectAlternativeNames?: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames>;
    /**
     * TLS validation context trust.
     */
    trust: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsValidationTrust>;
}
export interface VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNames {
    /**
     * Criteria for determining a SAN's match.
     */
    match: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch>;
}
export interface VirtualGatewaySpecListenerTlsValidationSubjectAlternativeNamesMatch {
    /**
     * Values sent must match the specified values exactly.
     */
    exacts: pulumi.Input<pulumi.Input<string>[]>;
}
export interface VirtualGatewaySpecListenerTlsValidationTrust {
    /**
     * TLS validation context trust for a local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsValidationTrustFile>;
    /**
     * TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualGatewaySpecListenerTlsValidationTrustSds>;
}
export interface VirtualGatewaySpecListenerTlsValidationTrustFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
}
export interface VirtualGatewaySpecListenerTlsValidationTrustSds {
    /**
     * Name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualGatewaySpecLogging {
    /**
     * Access log configuration for a virtual gateway.
     */
    accessLog?: pulumi.Input<inputs.VirtualGatewaySpecLoggingAccessLog>;
}
export interface VirtualGatewaySpecLoggingAccessLog {
    /**
     * File object to send virtual gateway access logs to.
     */
    file?: pulumi.Input<inputs.VirtualGatewaySpecLoggingAccessLogFile>;
}
export interface VirtualGatewaySpecLoggingAccessLogFile {
    /**
     * The specified format for the logs.
     */
    format?: pulumi.Input<inputs.VirtualGatewaySpecLoggingAccessLogFileFormat>;
    /**
     * File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
     */
    path: pulumi.Input<string>;
}
export interface VirtualGatewaySpecLoggingAccessLogFileFormat {
    /**
     * The logging format for JSON.
     */
    jsons?: pulumi.Input<pulumi.Input<inputs.VirtualGatewaySpecLoggingAccessLogFileFormatJson>[]>;
    /**
     * The logging format for text. Must be between 1 and 1000 characters in length.
     */
    text?: pulumi.Input<string>;
}
export interface VirtualGatewaySpecLoggingAccessLogFileFormatJson {
    /**
     * The specified key for the JSON. Must be between 1 and 100 characters in length.
     */
    key: pulumi.Input<string>;
    /**
     * The specified value for the JSON. Must be between 1 and 100 characters in length.
     */
    value: pulumi.Input<string>;
}
export interface VirtualNodeSpec {
    /**
     * Defaults for backends.
     */
    backendDefaults?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaults>;
    /**
     * Backends to which the virtual node is expected to send outbound traffic.
     */
    backends?: pulumi.Input<pulumi.Input<inputs.VirtualNodeSpecBackend>[]>;
    /**
     * Listeners from which the virtual node is expected to receive inbound traffic.
     */
    listeners?: pulumi.Input<pulumi.Input<inputs.VirtualNodeSpecListener>[]>;
    /**
     * Inbound and outbound access logging information for the virtual node.
     */
    logging?: pulumi.Input<inputs.VirtualNodeSpecLogging>;
    /**
     * Service discovery information for the virtual node.
     */
    serviceDiscovery?: pulumi.Input<inputs.VirtualNodeSpecServiceDiscovery>;
}
export interface VirtualNodeSpecBackend {
    /**
     * Virtual service to use as a backend for a virtual node.
     */
    virtualService: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualService>;
}
export interface VirtualNodeSpecBackendDefaults {
    /**
     * Default client policy for virtual service backends. See above for details.
     */
    clientPolicy?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicy>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicy {
    /**
     * Transport Layer Security (TLS) client policy.
     */
    tls?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTls>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTls {
    /**
     * Listener's TLS certificate.
     */
    certificate?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate>;
    /**
     * Whether the policy is enforced. Default is `true`.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * One or more ports that the policy is enforced for.
     */
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Listener's Transport Layer Security (TLS) validation context.
     */
    validation: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate {
    /**
     * Local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile>;
    /**
     * A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
    /**
     * Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    privateKey: pulumi.Input<string>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds {
    /**
     * Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation {
    /**
     * SANs for a TLS validation context.
     */
    subjectAlternativeNames?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames>;
    /**
     * TLS validation context trust.
     */
    trust: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
    /**
     * Criteria for determining a SAN's match.
     */
    match: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
    /**
     * Values sent must match the specified values exactly.
     */
    exacts: pulumi.Input<pulumi.Input<string>[]>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust {
    /**
     * TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
     */
    acm?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm>;
    /**
     * TLS validation context trust for a local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile>;
    /**
     * TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
    /**
     * One or more ACM ARNs.
     */
    certificateAuthorityArns: pulumi.Input<pulumi.Input<string>[]>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
}
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds {
    /**
     * Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualNodeSpecBackendVirtualService {
    /**
     * Client policy for the backend.
     */
    clientPolicy?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicy>;
    /**
     * Name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
     */
    virtualServiceName: pulumi.Input<string>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicy {
    /**
     * Transport Layer Security (TLS) client policy.
     */
    tls?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTls>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTls {
    /**
     * Listener's TLS certificate.
     */
    certificate?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate>;
    /**
     * Whether the policy is enforced. Default is `true`.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * One or more ports that the policy is enforced for.
     */
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Listener's Transport Layer Security (TLS) validation context.
     */
    validation: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificate {
    /**
     * Local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile>;
    /**
     * A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
    /**
     * Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    privateKey: pulumi.Input<string>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSds {
    /**
     * Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation {
    /**
     * SANs for a TLS validation context.
     */
    subjectAlternativeNames?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames>;
    /**
     * TLS validation context trust.
     */
    trust: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames {
    /**
     * Criteria for determining a SAN's match.
     */
    match: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch {
    /**
     * Values sent must match the specified values exactly.
     */
    exacts: pulumi.Input<pulumi.Input<string>[]>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust {
    /**
     * TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
     */
    acm?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm>;
    /**
     * TLS validation context trust for a local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile>;
    /**
     * TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm {
    /**
     * One or more ACM ARNs.
     */
    certificateAuthorityArns: pulumi.Input<pulumi.Input<string>[]>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
}
export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds {
    /**
     * Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualNodeSpecListener {
    /**
     * Connection pool information for the listener.
     */
    connectionPool?: pulumi.Input<inputs.VirtualNodeSpecListenerConnectionPool>;
    /**
     * Health check information for the listener.
     */
    healthCheck?: pulumi.Input<inputs.VirtualNodeSpecListenerHealthCheck>;
    /**
     * Outlier detection information for the listener.
     */
    outlierDetection?: pulumi.Input<inputs.VirtualNodeSpecListenerOutlierDetection>;
    /**
     * Port mapping information for the listener.
     */
    portMapping: pulumi.Input<inputs.VirtualNodeSpecListenerPortMapping>;
    /**
     * Timeouts for different protocols.
     */
    timeout?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeout>;
    /**
     * Transport Layer Security (TLS) properties for the listener
     */
    tls?: pulumi.Input<inputs.VirtualNodeSpecListenerTls>;
}
export interface VirtualNodeSpecListenerConnectionPool {
    /**
     * Connection pool information for gRPC listeners.
     */
    grpc?: pulumi.Input<inputs.VirtualNodeSpecListenerConnectionPoolGrpc>;
    /**
     * Connection pool information for HTTP2 listeners.
     */
    http2s?: pulumi.Input<pulumi.Input<inputs.VirtualNodeSpecListenerConnectionPoolHttp2>[]>;
    /**
     * Connection pool information for HTTP listeners.
     */
    https?: pulumi.Input<pulumi.Input<inputs.VirtualNodeSpecListenerConnectionPoolHttp>[]>;
    /**
     * Connection pool information for TCP listeners.
     */
    tcps?: pulumi.Input<pulumi.Input<inputs.VirtualNodeSpecListenerConnectionPoolTcp>[]>;
}
export interface VirtualNodeSpecListenerConnectionPoolGrpc {
    /**
     * Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
     */
    maxRequests: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerConnectionPoolHttp2 {
    /**
     * Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
     */
    maxRequests: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerConnectionPoolHttp {
    /**
     * Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
     */
    maxConnections: pulumi.Input<number>;
    /**
     * Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
     */
    maxPendingRequests?: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerConnectionPoolTcp {
    /**
     * Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
     */
    maxConnections: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerHealthCheck {
    /**
     * Number of consecutive successful health checks that must occur before declaring listener healthy.
     */
    healthyThreshold: pulumi.Input<number>;
    /**
     * Time period in milliseconds between each health check execution.
     */
    intervalMillis: pulumi.Input<number>;
    /**
     * Destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
     */
    path?: pulumi.Input<string>;
    /**
     * Destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
     */
    port?: pulumi.Input<number>;
    /**
     * Protocol for the health check request. Valid values are `http`, `http2`, `tcp` and `grpc`.
     */
    protocol: pulumi.Input<string>;
    /**
     * Amount of time to wait when receiving a response from the health check, in milliseconds.
     */
    timeoutMillis: pulumi.Input<number>;
    /**
     * Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
     */
    unhealthyThreshold: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerOutlierDetection {
    /**
     * Base amount of time for which a host is ejected.
     */
    baseEjectionDuration: pulumi.Input<inputs.VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration>;
    /**
     * Time interval between ejection sweep analysis.
     */
    interval: pulumi.Input<inputs.VirtualNodeSpecListenerOutlierDetectionInterval>;
    /**
     * Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
     * Minimum value of `0`. Maximum value of `100`.
     */
    maxEjectionPercent: pulumi.Input<number>;
    /**
     * Number of consecutive `5xx` errors required for ejection. Minimum value of `1`.
     */
    maxServerErrors: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerOutlierDetectionInterval {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerPortMapping {
    /**
     * Port used for the port mapping.
     */
    port: pulumi.Input<number>;
    /**
     * Protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
     */
    protocol: pulumi.Input<string>;
}
export interface VirtualNodeSpecListenerTimeout {
    /**
     * Timeouts for gRPC listeners.
     */
    grpc?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutGrpc>;
    /**
     * Timeouts for HTTP listeners.
     */
    http?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutHttp>;
    /**
     * Timeouts for HTTP2 listeners.
     */
    http2?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutHttp2>;
    /**
     * Timeouts for TCP listeners.
     */
    tcp?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutTcp>;
}
export interface VirtualNodeSpecListenerTimeoutGrpc {
    /**
     * Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     */
    idle?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutGrpcIdle>;
    /**
     * Per request timeout.
     */
    perRequest?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutGrpcPerRequest>;
}
export interface VirtualNodeSpecListenerTimeoutGrpcIdle {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerTimeoutGrpcPerRequest {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerTimeoutHttp2 {
    /**
     * Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     */
    idle?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutHttp2Idle>;
    /**
     * Per request timeout.
     */
    perRequest?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutHttp2PerRequest>;
}
export interface VirtualNodeSpecListenerTimeoutHttp2Idle {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerTimeoutHttp2PerRequest {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerTimeoutHttp {
    /**
     * Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     */
    idle?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutHttpIdle>;
    /**
     * Per request timeout.
     */
    perRequest?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutHttpPerRequest>;
}
export interface VirtualNodeSpecListenerTimeoutHttpIdle {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerTimeoutHttpPerRequest {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerTimeoutTcp {
    /**
     * Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     */
    idle?: pulumi.Input<inputs.VirtualNodeSpecListenerTimeoutTcpIdle>;
}
export interface VirtualNodeSpecListenerTimeoutTcpIdle {
    /**
     * Unit of time. Valid values: `ms`, `s`.
     */
    unit: pulumi.Input<string>;
    /**
     * Number of time units. Minimum value of `0`.
     */
    value: pulumi.Input<number>;
}
export interface VirtualNodeSpecListenerTls {
    /**
     * Listener's TLS certificate.
     */
    certificate: pulumi.Input<inputs.VirtualNodeSpecListenerTlsCertificate>;
    /**
     * Listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
     */
    mode: pulumi.Input<string>;
    /**
     * Listener's Transport Layer Security (TLS) validation context.
     */
    validation?: pulumi.Input<inputs.VirtualNodeSpecListenerTlsValidation>;
}
export interface VirtualNodeSpecListenerTlsCertificate {
    /**
     * An AWS Certificate Manager (ACM) certificate.
     */
    acm?: pulumi.Input<inputs.VirtualNodeSpecListenerTlsCertificateAcm>;
    /**
     * Local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualNodeSpecListenerTlsCertificateFile>;
    /**
     * A [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualNodeSpecListenerTlsCertificateSds>;
}
export interface VirtualNodeSpecListenerTlsCertificateAcm {
    /**
     * ARN for the certificate.
     */
    certificateArn: pulumi.Input<string>;
}
export interface VirtualNodeSpecListenerTlsCertificateFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
    /**
     * Private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    privateKey: pulumi.Input<string>;
}
export interface VirtualNodeSpecListenerTlsCertificateSds {
    /**
     * Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualNodeSpecListenerTlsValidation {
    /**
     * SANs for a TLS validation context.
     */
    subjectAlternativeNames?: pulumi.Input<inputs.VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames>;
    /**
     * TLS validation context trust.
     */
    trust: pulumi.Input<inputs.VirtualNodeSpecListenerTlsValidationTrust>;
}
export interface VirtualNodeSpecListenerTlsValidationSubjectAlternativeNames {
    /**
     * Criteria for determining a SAN's match.
     */
    match: pulumi.Input<inputs.VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch>;
}
export interface VirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatch {
    /**
     * Values sent must match the specified values exactly.
     */
    exacts: pulumi.Input<pulumi.Input<string>[]>;
}
export interface VirtualNodeSpecListenerTlsValidationTrust {
    /**
     * TLS validation context trust for a local file certificate.
     */
    file?: pulumi.Input<inputs.VirtualNodeSpecListenerTlsValidationTrustFile>;
    /**
     * TLS validation context trust for a [Secret Discovery Service](https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret#secret-discovery-service-sds) certificate.
     */
    sds?: pulumi.Input<inputs.VirtualNodeSpecListenerTlsValidationTrustSds>;
}
export interface VirtualNodeSpecListenerTlsValidationTrustFile {
    /**
     * Certificate trust chain for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
     */
    certificateChain: pulumi.Input<string>;
}
export interface VirtualNodeSpecListenerTlsValidationTrustSds {
    /**
     * Name of the secret for a virtual node's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
     */
    secretName: pulumi.Input<string>;
}
export interface VirtualNodeSpecLogging {
    /**
     * Access log configuration for a virtual node.
     */
    accessLog?: pulumi.Input<inputs.VirtualNodeSpecLoggingAccessLog>;
}
export interface VirtualNodeSpecLoggingAccessLog {
    /**
     * File object to send virtual node access logs to.
     */
    file?: pulumi.Input<inputs.VirtualNodeSpecLoggingAccessLogFile>;
}
export interface VirtualNodeSpecLoggingAccessLogFile {
    /**
     * The specified format for the logs.
     */
    format?: pulumi.Input<inputs.VirtualNodeSpecLoggingAccessLogFileFormat>;
    /**
     * File path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
     */
    path: pulumi.Input<string>;
}
export interface VirtualNodeSpecLoggingAccessLogFileFormat {
    /**
     * The logging format for JSON.
     */
    jsons?: pulumi.Input<pulumi.Input<inputs.VirtualNodeSpecLoggingAccessLogFileFormatJson>[]>;
    /**
     * The logging format for text. Must be between 1 and 1000 characters in length.
     */
    text?: pulumi.Input<string>;
}
export interface VirtualNodeSpecLoggingAccessLogFileFormatJson {
    /**
     * The specified key for the JSON. Must be between 1 and 100 characters in length.
     */
    key: pulumi.Input<string>;
    /**
     * The specified value for the JSON. Must be between 1 and 100 characters in length.
     */
    value: pulumi.Input<string>;
}
export interface VirtualNodeSpecServiceDiscovery {
    /**
     * Any AWS Cloud Map information for the virtual node.
     */
    awsCloudMap?: pulumi.Input<inputs.VirtualNodeSpecServiceDiscoveryAwsCloudMap>;
    /**
     * DNS service name for the virtual node.
     */
    dns?: pulumi.Input<inputs.VirtualNodeSpecServiceDiscoveryDns>;
}
export interface VirtualNodeSpecServiceDiscoveryAwsCloudMap {
    /**
     * String map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the AWS Cloud Map namespace to use.
     * Use the `aws.servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace. Must be between 1 and 1024 characters in length.
     */
    namespaceName: pulumi.Input<string>;
    /**
     * Name of the AWS Cloud Map service to use. Use the `aws.servicediscovery.Service` resource to configure a Cloud Map service. Must be between 1 and 1024 characters in length.
     */
    serviceName: pulumi.Input<string>;
}
export interface VirtualNodeSpecServiceDiscoveryDns {
    /**
     * DNS host name for your virtual node.
     */
    hostname: pulumi.Input<string>;
    /**
     * The preferred IP version that this virtual node uses. Valid values: `IPv6_PREFERRED`, `IPv4_PREFERRED`, `IPv4_ONLY`, `IPv6_ONLY`.
     */
    ipPreference?: pulumi.Input<string>;
    /**
     * The DNS response type for the virtual node. Valid values: `LOADBALANCER`, `ENDPOINTS`.
     */
    responseType?: pulumi.Input<string>;
}
export interface VirtualRouterSpec {
    /**
     * Listeners that the virtual router is expected to receive inbound traffic from.
     * Currently only one listener is supported per virtual router.
     */
    listeners?: pulumi.Input<pulumi.Input<inputs.VirtualRouterSpecListener>[]>;
}
export interface VirtualRouterSpecListener {
    /**
     * Port mapping information for the listener.
     */
    portMapping: pulumi.Input<inputs.VirtualRouterSpecListenerPortMapping>;
}
export interface VirtualRouterSpecListenerPortMapping {
    /**
     * Port used for the port mapping.
     */
    port: pulumi.Input<number>;
    /**
     * Protocol used for the port mapping. Valid values are `http`,`http2`, `tcp` and `grpc`.
     */
    protocol: pulumi.Input<string>;
}
export interface VirtualServiceSpec {
    /**
     * App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
     */
    provider?: pulumi.Input<inputs.VirtualServiceSpecProvider>;
}
export interface VirtualServiceSpecProvider {
    /**
     * Virtual node associated with a virtual service.
     */
    virtualNode?: pulumi.Input<inputs.VirtualServiceSpecProviderVirtualNode>;
    /**
     * Virtual router associated with a virtual service.
     */
    virtualRouter?: pulumi.Input<inputs.VirtualServiceSpecProviderVirtualRouter>;
}
export interface VirtualServiceSpecProviderVirtualNode {
    /**
     * Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
     */
    virtualNodeName: pulumi.Input<string>;
}
export interface VirtualServiceSpecProviderVirtualRouter {
    /**
     * Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
     */
    virtualRouterName: pulumi.Input<string>;
}
