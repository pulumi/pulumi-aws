// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VocabularyFilter extends pulumi.CustomResource {
    /**
     * Get an existing VocabularyFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VocabularyFilterState, opts?: pulumi.CustomResourceOptions): VocabularyFilter {
        return new VocabularyFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:transcribe/vocabularyFilter:VocabularyFilter';

    /**
     * Returns true if the given object is an instance of VocabularyFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VocabularyFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VocabularyFilter.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly downloadUri!: pulumi.Output<string>;
    public readonly languageCode!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly vocabularyFilterFileUri!: pulumi.Output<string | undefined>;
    public readonly vocabularyFilterName!: pulumi.Output<string>;
    public readonly words!: pulumi.Output<string[] | undefined>;

    /**
     * Create a VocabularyFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VocabularyFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VocabularyFilterArgs | VocabularyFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VocabularyFilterState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["downloadUri"] = state ? state.downloadUri : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vocabularyFilterFileUri"] = state ? state.vocabularyFilterFileUri : undefined;
            resourceInputs["vocabularyFilterName"] = state ? state.vocabularyFilterName : undefined;
            resourceInputs["words"] = state ? state.words : undefined;
        } else {
            const args = argsOrState as VocabularyFilterArgs | undefined;
            if ((!args || args.languageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'languageCode'");
            }
            if ((!args || args.vocabularyFilterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vocabularyFilterName'");
            }
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vocabularyFilterFileUri"] = args ? args.vocabularyFilterFileUri : undefined;
            resourceInputs["vocabularyFilterName"] = args ? args.vocabularyFilterName : undefined;
            resourceInputs["words"] = args ? args.words : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["downloadUri"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VocabularyFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VocabularyFilter resources.
 */
export interface VocabularyFilterState {
    arn?: pulumi.Input<string>;
    downloadUri?: pulumi.Input<string>;
    languageCode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vocabularyFilterFileUri?: pulumi.Input<string>;
    vocabularyFilterName?: pulumi.Input<string>;
    words?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VocabularyFilter resource.
 */
export interface VocabularyFilterArgs {
    languageCode: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vocabularyFilterFileUri?: pulumi.Input<string>;
    vocabularyFilterName: pulumi.Input<string>;
    words?: pulumi.Input<pulumi.Input<string>[]>;
}
