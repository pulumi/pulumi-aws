// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Cloud Control API Resource. The configuration and lifecycle handling of these resources is proxied through Cloud Control API handlers to the backend service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudcontrol.Resource("example", {
 *     typeName: "AWS::ECS::Cluster",
 *     desiredState: JSON.stringify({
 *         ClusterName: "example",
 *         Tags: [{
 *             Key: "CostCenter",
 *             Value: "IT",
 *         }],
 *     }),
 * });
 * ```
 */
export class Resource extends pulumi.CustomResource {
    /**
     * Get an existing Resource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceState, opts?: pulumi.CustomResourceOptions): Resource {
        return new Resource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudcontrol/resource:Resource';

    /**
     * Returns true if the given object is an instance of Resource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resource.__pulumiType;
    }

    /**
     * JSON string matching the CloudFormation resource type schema with desired configuration.
     */
    public readonly desiredState!: pulumi.Output<string>;
    /**
     * JSON string matching the CloudFormation resource type schema with current configuration. Underlying attributes can be referenced via the `jsondecode()` function, for example, `jsondecode(data.aws_cloudcontrolapi_resource.example.properties)["example"]`.
     */
    public /*out*/ readonly properties!: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the IAM Role to assume for operations.
     */
    public readonly roleArn!: pulumi.Output<string | undefined>;
    /**
     * JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `aws.cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * CloudFormation resource type name. For example, `AWS::EC2::VPC`.
     */
    public readonly typeName!: pulumi.Output<string>;
    /**
     * Identifier of the CloudFormation resource type version.
     */
    public readonly typeVersionId!: pulumi.Output<string | undefined>;

    /**
     * Create a Resource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceArgs | ResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceState | undefined;
            resourceInputs["desiredState"] = state ? state.desiredState : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
            resourceInputs["typeVersionId"] = state ? state.typeVersionId : undefined;
        } else {
            const args = argsOrState as ResourceArgs | undefined;
            if ((!args || args.desiredState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desiredState'");
            }
            if ((!args || args.typeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeName'");
            }
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
            resourceInputs["typeVersionId"] = args ? args.typeVersionId : undefined;
            resourceInputs["properties"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Resource resources.
 */
export interface ResourceState {
    /**
     * JSON string matching the CloudFormation resource type schema with desired configuration.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * JSON string matching the CloudFormation resource type schema with current configuration. Underlying attributes can be referenced via the `jsondecode()` function, for example, `jsondecode(data.aws_cloudcontrolapi_resource.example.properties)["example"]`.
     */
    properties?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the IAM Role to assume for operations.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `aws.cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
     */
    schema?: pulumi.Input<string>;
    /**
     * CloudFormation resource type name. For example, `AWS::EC2::VPC`.
     */
    typeName?: pulumi.Input<string>;
    /**
     * Identifier of the CloudFormation resource type version.
     */
    typeVersionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Resource resource.
 */
export interface ResourceArgs {
    /**
     * JSON string matching the CloudFormation resource type schema with desired configuration.
     */
    desiredState: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the IAM Role to assume for operations.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `aws.cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
     */
    schema?: pulumi.Input<string>;
    /**
     * CloudFormation resource type name. For example, `AWS::EC2::VPC`.
     */
    typeName: pulumi.Input<string>;
    /**
     * Identifier of the CloudFormation resource type version.
     */
    typeVersionId?: pulumi.Input<string>;
}
