// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS SESv2 (Simple Email V2) Email Identity.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 * ### Email Address Identity
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sesv2.EmailIdentity("example", {emailIdentity: "testing@example.com"});
 * ```
 * ### Domain Identity
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sesv2.EmailIdentity("example", {emailIdentity: "example.com"});
 * ```
 * ### Configuration Set
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleConfigurationSet = new aws.sesv2.ConfigurationSet("exampleConfigurationSet", {configurationSetName: "example"});
 * const exampleEmailIdentity = new aws.sesv2.EmailIdentity("exampleEmailIdentity", {
 *     emailIdentity: "example.com",
 *     configurationSetName: exampleConfigurationSet.configurationSetName,
 * });
 * ```
 * ### DKIM Signing Attributes (BYODKIM)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sesv2.EmailIdentity("example", {
 *     dkimSigningAttributes: {
 *         domainSigningPrivateKey: "MIIJKAIBAAKCAgEA2Se7p8zvnI4yh+Gh9j2rG5e2aRXjg03Y8saiupLnadPH9xvM...",
 *         domainSigningSelector: "example",
 *     },
 *     emailIdentity: "example.com",
 * });
 * ```
 *
 * ## Import
 *
 * SESv2 (Simple Email V2) Email Identity can be imported using the `email_identity`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sesv2/emailIdentity:EmailIdentity example example.com
 * ```
 */
export class EmailIdentity extends pulumi.CustomResource {
    /**
     * Get an existing EmailIdentity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmailIdentityState, opts?: pulumi.CustomResourceOptions): EmailIdentity {
        return new EmailIdentity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:sesv2/emailIdentity:EmailIdentity';

    /**
     * Returns true if the given object is an instance of EmailIdentity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmailIdentity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmailIdentity.__pulumiType;
    }

    /**
     * ARN of the Email Identity.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
     */
    public readonly configurationSetName!: pulumi.Output<string | undefined>;
    /**
     * The configuration of the DKIM authentication settings for an email domain identity.
     */
    public readonly dkimSigningAttributes!: pulumi.Output<outputs.sesv2.EmailIdentityDkimSigningAttributes>;
    /**
     * The email address or domain to verify.
     */
    public readonly emailIdentity!: pulumi.Output<string>;
    /**
     * The email identity type. Valid values: `EMAIL_ADDRESS`, `DOMAIN`.
     */
    public /*out*/ readonly identityType!: pulumi.Output<string>;
    /**
     * (Optional) A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Specifies whether or not the identity is verified.
     */
    public /*out*/ readonly verifiedForSendingStatus!: pulumi.Output<boolean>;

    /**
     * Create a EmailIdentity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmailIdentityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmailIdentityArgs | EmailIdentityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmailIdentityState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["configurationSetName"] = state ? state.configurationSetName : undefined;
            resourceInputs["dkimSigningAttributes"] = state ? state.dkimSigningAttributes : undefined;
            resourceInputs["emailIdentity"] = state ? state.emailIdentity : undefined;
            resourceInputs["identityType"] = state ? state.identityType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["verifiedForSendingStatus"] = state ? state.verifiedForSendingStatus : undefined;
        } else {
            const args = argsOrState as EmailIdentityArgs | undefined;
            if ((!args || args.emailIdentity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emailIdentity'");
            }
            resourceInputs["configurationSetName"] = args ? args.configurationSetName : undefined;
            resourceInputs["dkimSigningAttributes"] = args ? args.dkimSigningAttributes : undefined;
            resourceInputs["emailIdentity"] = args ? args.emailIdentity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["identityType"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["verifiedForSendingStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmailIdentity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EmailIdentity resources.
 */
export interface EmailIdentityState {
    /**
     * ARN of the Email Identity.
     */
    arn?: pulumi.Input<string>;
    /**
     * The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
     */
    configurationSetName?: pulumi.Input<string>;
    /**
     * The configuration of the DKIM authentication settings for an email domain identity.
     */
    dkimSigningAttributes?: pulumi.Input<inputs.sesv2.EmailIdentityDkimSigningAttributes>;
    /**
     * The email address or domain to verify.
     */
    emailIdentity?: pulumi.Input<string>;
    /**
     * The email identity type. Valid values: `EMAIL_ADDRESS`, `DOMAIN`.
     */
    identityType?: pulumi.Input<string>;
    /**
     * (Optional) A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies whether or not the identity is verified.
     */
    verifiedForSendingStatus?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EmailIdentity resource.
 */
export interface EmailIdentityArgs {
    /**
     * The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
     */
    configurationSetName?: pulumi.Input<string>;
    /**
     * The configuration of the DKIM authentication settings for an email domain identity.
     */
    dkimSigningAttributes?: pulumi.Input<inputs.sesv2.EmailIdentityDkimSigningAttributes>;
    /**
     * The email address or domain to verify.
     */
    emailIdentity: pulumi.Input<string>;
    /**
     * (Optional) A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
