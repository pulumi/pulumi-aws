// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages a FSx for Lustre Data Repository Association. See [Linking your file system to an S3 bucket](https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html) for more information.
 *
 * > **NOTE:** Data Repository Associations are only compatible with AWS FSx for Lustre File Systems and `PERSISTENT_2` deployment type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleBucketV2 = new aws.s3.BucketV2("exampleBucketV2", {});
 * const exampleBucketAclV2 = new aws.s3.BucketAclV2("exampleBucketAclV2", {
 *     bucket: exampleBucketV2.id,
 *     acl: "private",
 * });
 * const exampleLustreFileSystem = new aws.fsx.LustreFileSystem("exampleLustreFileSystem", {
 *     storageCapacity: 1200,
 *     subnetIds: [aws_subnet.example.id],
 *     deploymentType: "PERSISTENT_2",
 *     perUnitStorageThroughput: 125,
 * });
 * const exampleDataRepositoryAssociation = new aws.fsx.DataRepositoryAssociation("exampleDataRepositoryAssociation", {
 *     fileSystemId: exampleLustreFileSystem.id,
 *     dataRepositoryPath: pulumi.interpolate`s3://${exampleBucketV2.id}`,
 *     fileSystemPath: "/my-bucket",
 *     s3: {
 *         autoExportPolicy: {
 *             events: [
 *                 "NEW",
 *                 "CHANGED",
 *                 "DELETED",
 *             ],
 *         },
 *         autoImportPolicy: {
 *             events: [
 *                 "NEW",
 *                 "CHANGED",
 *                 "DELETED",
 *             ],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * FSx Data Repository Associations can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation example dra-0b1cfaeca11088b10
 * ```
 */
export class DataRepositoryAssociation extends pulumi.CustomResource {
    /**
     * Get an existing DataRepositoryAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataRepositoryAssociationState, opts?: pulumi.CustomResourceOptions): DataRepositoryAssociation {
        return new DataRepositoryAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation';

    /**
     * Returns true if the given object is an instance of DataRepositoryAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataRepositoryAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataRepositoryAssociation.__pulumiType;
    }

    /**
     * Amazon Resource Name of the file system.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    /**
     * Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
     */
    public readonly batchImportMetaDataOnCreate!: pulumi.Output<boolean | undefined>;
    /**
     * The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
     */
    public readonly dataRepositoryPath!: pulumi.Output<string>;
    /**
     * Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
     */
    public readonly deleteDataInFilesystem!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Amazon FSx file system to on which to create a data repository association.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
     */
    public readonly fileSystemPath!: pulumi.Output<string>;
    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
     */
    public readonly importedFileChunkSize!: pulumi.Output<number>;
    /**
     * See the `s3` configuration block. Max of 1.
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
     */
    public readonly s3!: pulumi.Output<outputs.fsx.DataRepositoryAssociationS3>;
    /**
     * A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a DataRepositoryAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataRepositoryAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataRepositoryAssociationArgs | DataRepositoryAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataRepositoryAssociationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["batchImportMetaDataOnCreate"] = state ? state.batchImportMetaDataOnCreate : undefined;
            resourceInputs["dataRepositoryPath"] = state ? state.dataRepositoryPath : undefined;
            resourceInputs["deleteDataInFilesystem"] = state ? state.deleteDataInFilesystem : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["fileSystemPath"] = state ? state.fileSystemPath : undefined;
            resourceInputs["importedFileChunkSize"] = state ? state.importedFileChunkSize : undefined;
            resourceInputs["s3"] = state ? state.s3 : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as DataRepositoryAssociationArgs | undefined;
            if ((!args || args.dataRepositoryPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataRepositoryPath'");
            }
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.fileSystemPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemPath'");
            }
            resourceInputs["batchImportMetaDataOnCreate"] = args ? args.batchImportMetaDataOnCreate : undefined;
            resourceInputs["dataRepositoryPath"] = args ? args.dataRepositoryPath : undefined;
            resourceInputs["deleteDataInFilesystem"] = args ? args.deleteDataInFilesystem : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["fileSystemPath"] = args ? args.fileSystemPath : undefined;
            resourceInputs["importedFileChunkSize"] = args ? args.importedFileChunkSize : undefined;
            resourceInputs["s3"] = args ? args.s3 : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataRepositoryAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataRepositoryAssociation resources.
 */
export interface DataRepositoryAssociationState {
    /**
     * Amazon Resource Name of the file system.
     */
    arn?: pulumi.Input<string>;
    associationId?: pulumi.Input<string>;
    /**
     * Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
     */
    batchImportMetaDataOnCreate?: pulumi.Input<boolean>;
    /**
     * The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
     */
    dataRepositoryPath?: pulumi.Input<string>;
    /**
     * Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
     */
    deleteDataInFilesystem?: pulumi.Input<boolean>;
    /**
     * The ID of the Amazon FSx file system to on which to create a data repository association.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
     */
    fileSystemPath?: pulumi.Input<string>;
    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
     */
    importedFileChunkSize?: pulumi.Input<number>;
    /**
     * See the `s3` configuration block. Max of 1.
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
     */
    s3?: pulumi.Input<inputs.fsx.DataRepositoryAssociationS3>;
    /**
     * A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DataRepositoryAssociation resource.
 */
export interface DataRepositoryAssociationArgs {
    /**
     * Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
     */
    batchImportMetaDataOnCreate?: pulumi.Input<boolean>;
    /**
     * The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
     */
    dataRepositoryPath: pulumi.Input<string>;
    /**
     * Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
     */
    deleteDataInFilesystem?: pulumi.Input<boolean>;
    /**
     * The ID of the Amazon FSx file system to on which to create a data repository association.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `dataRepositoryPath`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
     */
    fileSystemPath: pulumi.Input<string>;
    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
     */
    importedFileChunkSize?: pulumi.Input<number>;
    /**
     * See the `s3` configuration block. Max of 1.
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
     */
    s3?: pulumi.Input<inputs.fsx.DataRepositoryAssociationS3>;
    /**
     * A map of tags to assign to the data repository association. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
