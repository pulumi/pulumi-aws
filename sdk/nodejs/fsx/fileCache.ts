// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class FileCache extends pulumi.CustomResource {
    /**
     * Get an existing FileCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileCacheState, opts?: pulumi.CustomResourceOptions): FileCache {
        return new FileCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:fsx/fileCache:FileCache';

    /**
     * Returns true if the given object is an instance of FileCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileCache.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly copyTagsToDataRepositoryAssociations!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly dataRepositoryAssociationIds!: pulumi.Output<string[]>;
    public readonly dataRepositoryAssociations!: pulumi.Output<outputs.fsx.FileCacheDataRepositoryAssociation[] | undefined>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public /*out*/ readonly fileCacheId!: pulumi.Output<string>;
    public readonly fileCacheType!: pulumi.Output<string>;
    public readonly fileCacheTypeVersion!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly lustreConfigurations!: pulumi.Output<outputs.fsx.FileCacheLustreConfiguration[] | undefined>;
    public /*out*/ readonly networkInterfaceIds!: pulumi.Output<string[]>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly storageCapacity!: pulumi.Output<number>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a FileCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileCacheArgs | FileCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileCacheState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["copyTagsToDataRepositoryAssociations"] = state ? state.copyTagsToDataRepositoryAssociations : undefined;
            resourceInputs["dataRepositoryAssociationIds"] = state ? state.dataRepositoryAssociationIds : undefined;
            resourceInputs["dataRepositoryAssociations"] = state ? state.dataRepositoryAssociations : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["fileCacheId"] = state ? state.fileCacheId : undefined;
            resourceInputs["fileCacheType"] = state ? state.fileCacheType : undefined;
            resourceInputs["fileCacheTypeVersion"] = state ? state.fileCacheTypeVersion : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["lustreConfigurations"] = state ? state.lustreConfigurations : undefined;
            resourceInputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["storageCapacity"] = state ? state.storageCapacity : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as FileCacheArgs | undefined;
            if ((!args || args.fileCacheType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileCacheType'");
            }
            if ((!args || args.fileCacheTypeVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileCacheTypeVersion'");
            }
            if ((!args || args.storageCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageCapacity'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["copyTagsToDataRepositoryAssociations"] = args ? args.copyTagsToDataRepositoryAssociations : undefined;
            resourceInputs["dataRepositoryAssociations"] = args ? args.dataRepositoryAssociations : undefined;
            resourceInputs["fileCacheType"] = args ? args.fileCacheType : undefined;
            resourceInputs["fileCacheTypeVersion"] = args ? args.fileCacheTypeVersion : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["lustreConfigurations"] = args ? args.lustreConfigurations : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["storageCapacity"] = args ? args.storageCapacity : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dataRepositoryAssociationIds"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["fileCacheId"] = undefined /*out*/;
            resourceInputs["networkInterfaceIds"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileCache.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileCache resources.
 */
export interface FileCacheState {
    arn?: pulumi.Input<string>;
    copyTagsToDataRepositoryAssociations?: pulumi.Input<boolean>;
    dataRepositoryAssociationIds?: pulumi.Input<pulumi.Input<string>[]>;
    dataRepositoryAssociations?: pulumi.Input<pulumi.Input<inputs.fsx.FileCacheDataRepositoryAssociation>[]>;
    dnsName?: pulumi.Input<string>;
    fileCacheId?: pulumi.Input<string>;
    fileCacheType?: pulumi.Input<string>;
    fileCacheTypeVersion?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    lustreConfigurations?: pulumi.Input<pulumi.Input<inputs.fsx.FileCacheLustreConfiguration>[]>;
    networkInterfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    ownerId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    storageCapacity?: pulumi.Input<number>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileCache resource.
 */
export interface FileCacheArgs {
    copyTagsToDataRepositoryAssociations?: pulumi.Input<boolean>;
    dataRepositoryAssociations?: pulumi.Input<pulumi.Input<inputs.fsx.FileCacheDataRepositoryAssociation>[]>;
    fileCacheType: pulumi.Input<string>;
    fileCacheTypeVersion: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    lustreConfigurations?: pulumi.Input<pulumi.Input<inputs.fsx.FileCacheLustreConfiguration>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    storageCapacity: pulumi.Input<number>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
