// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class OntapVolume extends pulumi.CustomResource {
    /**
     * Get an existing OntapVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OntapVolumeState, opts?: pulumi.CustomResourceOptions): OntapVolume {
        return new OntapVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:fsx/ontapVolume:OntapVolume';

    /**
     * Returns true if the given object is an instance of OntapVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OntapVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OntapVolume.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly fileSystemId!: pulumi.Output<string>;
    public /*out*/ readonly flexcacheEndpointType!: pulumi.Output<string>;
    public readonly junctionPath!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly ontapVolumeType!: pulumi.Output<string>;
    public readonly securityStyle!: pulumi.Output<string | undefined>;
    public readonly sizeInMegabytes!: pulumi.Output<number>;
    public readonly storageEfficiencyEnabled!: pulumi.Output<boolean>;
    public readonly storageVirtualMachineId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly tieringPolicy!: pulumi.Output<outputs.fsx.OntapVolumeTieringPolicy | undefined>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    public readonly volumeType!: pulumi.Output<string | undefined>;

    /**
     * Create a OntapVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OntapVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OntapVolumeArgs | OntapVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OntapVolumeState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["flexcacheEndpointType"] = state ? state.flexcacheEndpointType : undefined;
            resourceInputs["junctionPath"] = state ? state.junctionPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ontapVolumeType"] = state ? state.ontapVolumeType : undefined;
            resourceInputs["securityStyle"] = state ? state.securityStyle : undefined;
            resourceInputs["sizeInMegabytes"] = state ? state.sizeInMegabytes : undefined;
            resourceInputs["storageEfficiencyEnabled"] = state ? state.storageEfficiencyEnabled : undefined;
            resourceInputs["storageVirtualMachineId"] = state ? state.storageVirtualMachineId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tieringPolicy"] = state ? state.tieringPolicy : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as OntapVolumeArgs | undefined;
            if ((!args || args.junctionPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'junctionPath'");
            }
            if ((!args || args.sizeInMegabytes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeInMegabytes'");
            }
            if ((!args || args.storageEfficiencyEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageEfficiencyEnabled'");
            }
            if ((!args || args.storageVirtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageVirtualMachineId'");
            }
            resourceInputs["junctionPath"] = args ? args.junctionPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityStyle"] = args ? args.securityStyle : undefined;
            resourceInputs["sizeInMegabytes"] = args ? args.sizeInMegabytes : undefined;
            resourceInputs["storageEfficiencyEnabled"] = args ? args.storageEfficiencyEnabled : undefined;
            resourceInputs["storageVirtualMachineId"] = args ? args.storageVirtualMachineId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tieringPolicy"] = args ? args.tieringPolicy : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["fileSystemId"] = undefined /*out*/;
            resourceInputs["flexcacheEndpointType"] = undefined /*out*/;
            resourceInputs["ontapVolumeType"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OntapVolume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OntapVolume resources.
 */
export interface OntapVolumeState {
    arn?: pulumi.Input<string>;
    fileSystemId?: pulumi.Input<string>;
    flexcacheEndpointType?: pulumi.Input<string>;
    junctionPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ontapVolumeType?: pulumi.Input<string>;
    securityStyle?: pulumi.Input<string>;
    sizeInMegabytes?: pulumi.Input<number>;
    storageEfficiencyEnabled?: pulumi.Input<boolean>;
    storageVirtualMachineId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tieringPolicy?: pulumi.Input<inputs.fsx.OntapVolumeTieringPolicy>;
    uuid?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OntapVolume resource.
 */
export interface OntapVolumeArgs {
    junctionPath: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    securityStyle?: pulumi.Input<string>;
    sizeInMegabytes: pulumi.Input<number>;
    storageEfficiencyEnabled: pulumi.Input<boolean>;
    storageVirtualMachineId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tieringPolicy?: pulumi.Input<inputs.fsx.OntapVolumeTieringPolicy>;
    volumeType?: pulumi.Input<string>;
}
