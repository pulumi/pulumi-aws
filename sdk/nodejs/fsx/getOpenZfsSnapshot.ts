// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getOpenZfsSnapshot(args?: GetOpenZfsSnapshotArgs, opts?: pulumi.InvokeOptions): Promise<GetOpenZfsSnapshotResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:fsx/getOpenZfsSnapshot:getOpenZfsSnapshot", {
        "filters": args.filters,
        "mostRecent": args.mostRecent,
        "name": args.name,
        "snapshotIds": args.snapshotIds,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getOpenZfsSnapshot.
 */
export interface GetOpenZfsSnapshotArgs {
    filters?: inputs.fsx.GetOpenZfsSnapshotFilter[];
    mostRecent?: boolean;
    name?: string;
    snapshotIds?: string[];
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getOpenZfsSnapshot.
 */
export interface GetOpenZfsSnapshotResult {
    readonly arn: string;
    readonly creationTime: string;
    readonly filters?: outputs.fsx.GetOpenZfsSnapshotFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly mostRecent?: boolean;
    readonly name?: string;
    readonly snapshotId: string;
    readonly snapshotIds?: string[];
    readonly tags: {[key: string]: string};
    readonly volumeId: string;
}
export function getOpenZfsSnapshotOutput(args?: GetOpenZfsSnapshotOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOpenZfsSnapshotResult> {
    return pulumi.output(args).apply((a: any) => getOpenZfsSnapshot(a, opts))
}

/**
 * A collection of arguments for invoking getOpenZfsSnapshot.
 */
export interface GetOpenZfsSnapshotOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.fsx.GetOpenZfsSnapshotFilterArgs>[]>;
    mostRecent?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    snapshotIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
