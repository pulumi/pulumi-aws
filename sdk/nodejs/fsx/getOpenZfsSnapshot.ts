// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Use this data source to get information about an Amazon FSx for OpenZFS Snapshot for use when provisioning new Volumes.
 *
 * ## Example Usage
 * ### Root volume Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = pulumi.output(aws.fsx.getOpenZfsSnapshot({
 *     filters: [{
 *         name: "volume-id",
 *         values: ["fsvol-073a32b6098a73feb"],
 *     }],
 *     mostRecent: true,
 * }));
 * ```
 */
export function getOpenZfsSnapshot(args?: GetOpenZfsSnapshotArgs, opts?: pulumi.InvokeOptions): Promise<GetOpenZfsSnapshotResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:fsx/getOpenZfsSnapshot:getOpenZfsSnapshot", {
        "filters": args.filters,
        "mostRecent": args.mostRecent,
        "name": args.name,
        "snapshotIds": args.snapshotIds,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getOpenZfsSnapshot.
 */
export interface GetOpenZfsSnapshotArgs {
    /**
     * One or more name/value pairs to filter off of. The
     * supported names are file-system-id or volume-id.
     */
    filters?: inputs.fsx.GetOpenZfsSnapshotFilter[];
    /**
     * If more than one result is returned, use the most recent snapshot.
     */
    mostRecent?: boolean;
    /**
     * Name of the snapshot.
     */
    name?: string;
    /**
     * Returns information on a specific snapshot_id.
     */
    snapshotIds?: string[];
    /**
     * List of Tag values, with a maximum of 50 elements.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getOpenZfsSnapshot.
 */
export interface GetOpenZfsSnapshotResult {
    /**
     * Amazon Resource Name of the snapshot.
     */
    readonly arn: string;
    /**
     * Time that the resource was created.
     */
    readonly creationTime: string;
    readonly filters?: outputs.fsx.GetOpenZfsSnapshotFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly mostRecent?: boolean;
    /**
     * Name of the snapshot.
     */
    readonly name?: string;
    /**
     * ID of the snapshot.
     */
    readonly snapshotId: string;
    readonly snapshotIds?: string[];
    /**
     * List of Tag values, with a maximum of 50 elements.
     */
    readonly tags: {[key: string]: string};
    /**
     * ID of the volume that the snapshot is of.
     */
    readonly volumeId: string;
}

export function getOpenZfsSnapshotOutput(args?: GetOpenZfsSnapshotOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOpenZfsSnapshotResult> {
    return pulumi.output(args).apply(a => getOpenZfsSnapshot(a, opts))
}

/**
 * A collection of arguments for invoking getOpenZfsSnapshot.
 */
export interface GetOpenZfsSnapshotOutputArgs {
    /**
     * One or more name/value pairs to filter off of. The
     * supported names are file-system-id or volume-id.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.fsx.GetOpenZfsSnapshotFilterArgs>[]>;
    /**
     * If more than one result is returned, use the most recent snapshot.
     */
    mostRecent?: pulumi.Input<boolean>;
    /**
     * Name of the snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * Returns information on a specific snapshot_id.
     */
    snapshotIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Tag values, with a maximum of 50 elements.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
