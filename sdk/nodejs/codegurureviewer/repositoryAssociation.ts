// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS CodeGuru Reviewer Repository Association.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleKey = new aws.kms.Key("exampleKey", {});
 * const exampleRepository = new aws.codecommit.Repository("exampleRepository", {repositoryName: "example-repo"});
 * const exampleRepositoryAssociation = new aws.codegurureviewer.RepositoryAssociation("exampleRepositoryAssociation", {
 *     repository: {
 *         codecommit: {
 *             name: exampleRepository.repositoryName,
 *         },
 *     },
 *     kmsKeyDetails: {
 *         encryptionOption: "CUSTOMER_MANAGED_CMK",
 *         kmsKeyId: exampleKey.keyId,
 *     },
 * });
 * ```
 */
export class RepositoryAssociation extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryAssociationState, opts?: pulumi.CustomResourceOptions): RepositoryAssociation {
        return new RepositoryAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:codegurureviewer/repositoryAssociation:RepositoryAssociation';

    /**
     * Returns true if the given object is an instance of RepositoryAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryAssociation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) identifying the repository association.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ID of the repository association.
     */
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
     */
    public /*out*/ readonly connectionArn!: pulumi.Output<string>;
    /**
     * An object describing the KMS key to asssociate. Block is documented below.
     */
    public readonly kmsKeyDetails!: pulumi.Output<outputs.codegurureviewer.RepositoryAssociationKmsKeyDetails | undefined>;
    /**
     * The name of the third party source repository.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The username for the account that owns the repository.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * The provider type of the repository association.
     */
    public /*out*/ readonly providerType!: pulumi.Output<string>;
    /**
     * An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
     *
     * The following arguments are optional:
     */
    public readonly repository!: pulumi.Output<outputs.codegurureviewer.RepositoryAssociationRepository>;
    public /*out*/ readonly s3RepositoryDetails!: pulumi.Output<outputs.codegurureviewer.RepositoryAssociationS3RepositoryDetail[]>;
    /**
     * The state of the repository association.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * A description of why the repository association is in the current state.
     */
    public /*out*/ readonly stateReason!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a RepositoryAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryAssociationArgs | RepositoryAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryAssociationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["connectionArn"] = state ? state.connectionArn : undefined;
            resourceInputs["kmsKeyDetails"] = state ? state.kmsKeyDetails : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["s3RepositoryDetails"] = state ? state.s3RepositoryDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateReason"] = state ? state.stateReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as RepositoryAssociationArgs | undefined;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["kmsKeyDetails"] = args ? args.kmsKeyDetails : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["connectionArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["s3RepositoryDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepositoryAssociation resources.
 */
export interface RepositoryAssociationState {
    /**
     * The Amazon Resource Name (ARN) identifying the repository association.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ID of the repository association.
     */
    associationId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
     */
    connectionArn?: pulumi.Input<string>;
    /**
     * An object describing the KMS key to asssociate. Block is documented below.
     */
    kmsKeyDetails?: pulumi.Input<inputs.codegurureviewer.RepositoryAssociationKmsKeyDetails>;
    /**
     * The name of the third party source repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The username for the account that owns the repository.
     */
    owner?: pulumi.Input<string>;
    /**
     * The provider type of the repository association.
     */
    providerType?: pulumi.Input<string>;
    /**
     * An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
     *
     * The following arguments are optional:
     */
    repository?: pulumi.Input<inputs.codegurureviewer.RepositoryAssociationRepository>;
    s3RepositoryDetails?: pulumi.Input<pulumi.Input<inputs.codegurureviewer.RepositoryAssociationS3RepositoryDetail>[]>;
    /**
     * The state of the repository association.
     */
    state?: pulumi.Input<string>;
    /**
     * A description of why the repository association is in the current state.
     */
    stateReason?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a RepositoryAssociation resource.
 */
export interface RepositoryAssociationArgs {
    /**
     * An object describing the KMS key to asssociate. Block is documented below.
     */
    kmsKeyDetails?: pulumi.Input<inputs.codegurureviewer.RepositoryAssociationKmsKeyDetails>;
    /**
     * An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
     *
     * The following arguments are optional:
     */
    repository: pulumi.Input<inputs.codegurureviewer.RepositoryAssociationRepository>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
