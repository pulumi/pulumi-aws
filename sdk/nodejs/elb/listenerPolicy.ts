// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Attaches a load balancer policy to an ELB Listener.
 *
 * ## Example Usage
 */
export class ListenerPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ListenerPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerPolicyState, opts?: pulumi.CustomResourceOptions): ListenerPolicy {
        return new ListenerPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elb/listenerPolicy:ListenerPolicy';

    /**
     * Returns true if the given object is an instance of ListenerPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ListenerPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ListenerPolicy.__pulumiType;
    }

    /**
     * The load balancer to attach the policy to.
     */
    public readonly loadBalancerName!: pulumi.Output<string>;
    /**
     * The load balancer listener port to apply the policy to.
     */
    public readonly loadBalancerPort!: pulumi.Output<number>;
    /**
     * List of Policy Names to apply to the backend server.
     */
    public readonly policyNames!: pulumi.Output<string[] | undefined>;
    /**
     * Map of arbitrary keys and values that, when changed, will trigger an update.
     */
    public readonly triggers!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ListenerPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerPolicyArgs | ListenerPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerPolicyState | undefined;
            resourceInputs["loadBalancerName"] = state ? state.loadBalancerName : undefined;
            resourceInputs["loadBalancerPort"] = state ? state.loadBalancerPort : undefined;
            resourceInputs["policyNames"] = state ? state.policyNames : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        } else {
            const args = argsOrState as ListenerPolicyArgs | undefined;
            if ((!args || args.loadBalancerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerName'");
            }
            if ((!args || args.loadBalancerPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerPort'");
            }
            resourceInputs["loadBalancerName"] = args ? args.loadBalancerName : undefined;
            resourceInputs["loadBalancerPort"] = args ? args.loadBalancerPort : undefined;
            resourceInputs["policyNames"] = args ? args.policyNames : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "aws:elasticloadbalancing/listenerPolicy:ListenerPolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ListenerPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ListenerPolicy resources.
 */
export interface ListenerPolicyState {
    /**
     * The load balancer to attach the policy to.
     */
    loadBalancerName?: pulumi.Input<string>;
    /**
     * The load balancer listener port to apply the policy to.
     */
    loadBalancerPort?: pulumi.Input<number>;
    /**
     * List of Policy Names to apply to the backend server.
     */
    policyNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of arbitrary keys and values that, when changed, will trigger an update.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ListenerPolicy resource.
 */
export interface ListenerPolicyArgs {
    /**
     * The load balancer to attach the policy to.
     */
    loadBalancerName: pulumi.Input<string>;
    /**
     * The load balancer listener port to apply the policy to.
     */
    loadBalancerPort: pulumi.Input<number>;
    /**
     * List of Policy Names to apply to the backend server.
     */
    policyNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of arbitrary keys and values that, when changed, will trigger an update.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
