// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Branch extends pulumi.CustomResource {
    /**
     * Get an existing Branch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BranchState, opts?: pulumi.CustomResourceOptions): Branch {
        return new Branch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:amplify/branch:Branch';

    /**
     * Returns true if the given object is an instance of Branch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Branch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Branch.__pulumiType;
    }

    public readonly appId!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly associatedResources!: pulumi.Output<string[]>;
    public readonly backendEnvironmentArn!: pulumi.Output<string | undefined>;
    public readonly basicAuthCredentials!: pulumi.Output<string | undefined>;
    public readonly branchName!: pulumi.Output<string>;
    public /*out*/ readonly customDomains!: pulumi.Output<string[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly destinationBranch!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly enableAutoBuild!: pulumi.Output<boolean | undefined>;
    public readonly enableBasicAuth!: pulumi.Output<boolean | undefined>;
    public readonly enableNotification!: pulumi.Output<boolean | undefined>;
    public readonly enablePerformanceMode!: pulumi.Output<boolean | undefined>;
    public readonly enablePullRequestPreview!: pulumi.Output<boolean | undefined>;
    public readonly environmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly framework!: pulumi.Output<string | undefined>;
    public readonly pullRequestEnvironmentName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly sourceBranch!: pulumi.Output<string>;
    public readonly stage!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly ttl!: pulumi.Output<string | undefined>;

    /**
     * Create a Branch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BranchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BranchArgs | BranchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BranchState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associatedResources"] = state ? state.associatedResources : undefined;
            resourceInputs["backendEnvironmentArn"] = state ? state.backendEnvironmentArn : undefined;
            resourceInputs["basicAuthCredentials"] = state ? state.basicAuthCredentials : undefined;
            resourceInputs["branchName"] = state ? state.branchName : undefined;
            resourceInputs["customDomains"] = state ? state.customDomains : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationBranch"] = state ? state.destinationBranch : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enableAutoBuild"] = state ? state.enableAutoBuild : undefined;
            resourceInputs["enableBasicAuth"] = state ? state.enableBasicAuth : undefined;
            resourceInputs["enableNotification"] = state ? state.enableNotification : undefined;
            resourceInputs["enablePerformanceMode"] = state ? state.enablePerformanceMode : undefined;
            resourceInputs["enablePullRequestPreview"] = state ? state.enablePullRequestPreview : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["framework"] = state ? state.framework : undefined;
            resourceInputs["pullRequestEnvironmentName"] = state ? state.pullRequestEnvironmentName : undefined;
            resourceInputs["sourceBranch"] = state ? state.sourceBranch : undefined;
            resourceInputs["stage"] = state ? state.stage : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as BranchArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.branchName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'branchName'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["backendEnvironmentArn"] = args ? args.backendEnvironmentArn : undefined;
            resourceInputs["basicAuthCredentials"] = args?.basicAuthCredentials ? pulumi.secret(args.basicAuthCredentials) : undefined;
            resourceInputs["branchName"] = args ? args.branchName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enableAutoBuild"] = args ? args.enableAutoBuild : undefined;
            resourceInputs["enableBasicAuth"] = args ? args.enableBasicAuth : undefined;
            resourceInputs["enableNotification"] = args ? args.enableNotification : undefined;
            resourceInputs["enablePerformanceMode"] = args ? args.enablePerformanceMode : undefined;
            resourceInputs["enablePullRequestPreview"] = args ? args.enablePullRequestPreview : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["framework"] = args ? args.framework : undefined;
            resourceInputs["pullRequestEnvironmentName"] = args ? args.pullRequestEnvironmentName : undefined;
            resourceInputs["stage"] = args ? args.stage : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associatedResources"] = undefined /*out*/;
            resourceInputs["customDomains"] = undefined /*out*/;
            resourceInputs["destinationBranch"] = undefined /*out*/;
            resourceInputs["sourceBranch"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["basicAuthCredentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Branch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Branch resources.
 */
export interface BranchState {
    appId?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    associatedResources?: pulumi.Input<pulumi.Input<string>[]>;
    backendEnvironmentArn?: pulumi.Input<string>;
    basicAuthCredentials?: pulumi.Input<string>;
    branchName?: pulumi.Input<string>;
    customDomains?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    destinationBranch?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enableAutoBuild?: pulumi.Input<boolean>;
    enableBasicAuth?: pulumi.Input<boolean>;
    enableNotification?: pulumi.Input<boolean>;
    enablePerformanceMode?: pulumi.Input<boolean>;
    enablePullRequestPreview?: pulumi.Input<boolean>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    framework?: pulumi.Input<string>;
    pullRequestEnvironmentName?: pulumi.Input<string>;
    sourceBranch?: pulumi.Input<string>;
    stage?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ttl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Branch resource.
 */
export interface BranchArgs {
    appId: pulumi.Input<string>;
    backendEnvironmentArn?: pulumi.Input<string>;
    basicAuthCredentials?: pulumi.Input<string>;
    branchName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enableAutoBuild?: pulumi.Input<boolean>;
    enableBasicAuth?: pulumi.Input<boolean>;
    enableNotification?: pulumi.Input<boolean>;
    enablePerformanceMode?: pulumi.Input<boolean>;
    enablePullRequestPreview?: pulumi.Input<boolean>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    framework?: pulumi.Input<string>;
    pullRequestEnvironmentName?: pulumi.Input<string>;
    stage?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ttl?: pulumi.Input<string>;
}
