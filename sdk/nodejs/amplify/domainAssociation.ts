// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class DomainAssociation extends pulumi.CustomResource {
    /**
     * Get an existing DomainAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainAssociationState, opts?: pulumi.CustomResourceOptions): DomainAssociation {
        return new DomainAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:amplify/domainAssociation:DomainAssociation';

    /**
     * Returns true if the given object is an instance of DomainAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainAssociation.__pulumiType;
    }

    public readonly appId!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly certificateVerificationDnsRecord!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly subDomains!: pulumi.Output<outputs.amplify.DomainAssociationSubDomain[]>;
    public readonly waitForVerification!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DomainAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainAssociationArgs | DomainAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainAssociationState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificateVerificationDnsRecord"] = state ? state.certificateVerificationDnsRecord : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["subDomains"] = state ? state.subDomains : undefined;
            resourceInputs["waitForVerification"] = state ? state.waitForVerification : undefined;
        } else {
            const args = argsOrState as DomainAssociationArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.subDomains === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subDomains'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["subDomains"] = args ? args.subDomains : undefined;
            resourceInputs["waitForVerification"] = args ? args.waitForVerification : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificateVerificationDnsRecord"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainAssociation resources.
 */
export interface DomainAssociationState {
    appId?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    certificateVerificationDnsRecord?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    subDomains?: pulumi.Input<pulumi.Input<inputs.amplify.DomainAssociationSubDomain>[]>;
    waitForVerification?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DomainAssociation resource.
 */
export interface DomainAssociationArgs {
    appId: pulumi.Input<string>;
    domainName: pulumi.Input<string>;
    subDomains: pulumi.Input<pulumi.Input<inputs.amplify.DomainAssociationSubDomain>[]>;
    waitForVerification?: pulumi.Input<boolean>;
}
