// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class IpSet extends pulumi.CustomResource {
    /**
     * Get an existing IpSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpSetState, opts?: pulumi.CustomResourceOptions): IpSet {
        return new IpSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:wafv2/ipSet:IpSet';

    /**
     * Returns true if the given object is an instance of IpSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpSet.__pulumiType;
    }

    public readonly addresses!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ipAddressVersion!: pulumi.Output<string>;
    public /*out*/ readonly lockToken!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a IpSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpSetArgs | IpSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpSetState | undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipAddressVersion"] = state ? state.ipAddressVersion : undefined;
            resourceInputs["lockToken"] = state ? state.lockToken : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as IpSetArgs | undefined;
            if ((!args || args.ipAddressVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddressVersion'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipAddressVersion"] = args ? args.ipAddressVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["lockToken"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpSet resources.
 */
export interface IpSetState {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    ipAddressVersion?: pulumi.Input<string>;
    lockToken?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a IpSet resource.
 */
export interface IpSetArgs {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    ipAddressVersion: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scope: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
