// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface RegexPatternSetRegularExpression {
    /**
     * The string representing the regular expression, see the AWS WAF [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-regex-pattern-set-creating.html) for more information.
     */
    regexString: string;
}
export interface RuleGroupCustomResponseBody {
    /**
     * The payload of the custom response.
     */
    content: string;
    /**
     * The type of content in the payload that you are defining in the `content` argument. Valid values are `TEXT_PLAIN`, `TEXT_HTML`, or `APPLICATION_JSON`.
     */
    contentType: string;
    /**
     * A unique key identifying the custom response body. This is referenced by the `customResponseBodyKey` argument in the Custom Response block.
     */
    key: string;
}
export interface RuleGroupRule {
    /**
     * The action that AWS WAF should take on a web request when it matches the rule's statement. Settings at the `aws.wafv2.WebAcl` level can override the rule action setting. See Action below for details.
     */
    action: outputs.RuleGroupRuleAction;
    /**
     * Specifies how AWS WAF should handle CAPTCHA evaluations. See Captcha Configuration below for details.
     */
    captchaConfig?: outputs.RuleGroupRuleCaptchaConfig;
    /**
     * A friendly name of the rule.
     */
    name: string;
    /**
     * If you define more than one Rule in a WebACL, AWS WAF evaluates each request against the `rules` in order based on the value of `priority`. AWS WAF processes rules with lower priority first.
     */
    priority: number;
    /**
     * Labels to apply to web requests that match the rule match statement. See Rule Label below for details.
     */
    ruleLabels?: outputs.RuleGroupRuleRuleLabel[];
    /**
     * The AWS WAF processing statement for the rule, for example `byteMatchStatement` or `geoMatchStatement`. See Statement below for details.
     */
    statement: outputs.RuleGroupRuleStatement;
    /**
     * Defines and enables Amazon CloudWatch metrics and web request sample collection. See Visibility Configuration below for details.
     */
    visibilityConfig: outputs.RuleGroupRuleVisibilityConfig;
}
export interface RuleGroupRuleAction {
    /**
     * Instructs AWS WAF to allow the web request. See Allow below for details.
     */
    allow?: outputs.RuleGroupRuleActionAllow;
    /**
     * Instructs AWS WAF to block the web request. See Block below for details.
     */
    block?: outputs.RuleGroupRuleActionBlock;
    /**
     * Instructs AWS WAF to run a `CAPTCHA` check against the web request. See Captcha below for details.
     */
    captcha?: outputs.RuleGroupRuleActionCaptcha;
    /**
     * Instructs AWS WAF to run a check against the request to verify that the request is coming from a legitimate client session. See Challenge below for details.
     */
    challenge?: outputs.RuleGroupRuleActionChallenge;
    /**
     * Instructs AWS WAF to count the web request and allow it. See Count below for details.
     */
    count?: outputs.RuleGroupRuleActionCount;
}
export interface RuleGroupRuleActionAllow {
    /**
     * Defines custom handling for the web request. See Custom Request Handling below for details.
     */
    customRequestHandling?: outputs.RuleGroupRuleActionAllowCustomRequestHandling;
}
export interface RuleGroupRuleActionAllowCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See Custom HTTP Header below for details.
     */
    insertHeaders: outputs.RuleGroupRuleActionAllowCustomRequestHandlingInsertHeader[];
}
export interface RuleGroupRuleActionAllowCustomRequestHandlingInsertHeader {
    /**
     * A friendly name of the rule group.
     */
    name: string;
    value: string;
}
export interface RuleGroupRuleActionBlock {
    /**
     * Defines a custom response for the web request. See Custom Response below for details.
     */
    customResponse?: outputs.RuleGroupRuleActionBlockCustomResponse;
}
export interface RuleGroupRuleActionBlockCustomResponse {
    /**
     * References the response body that you want AWS WAF to return to the web request client. This must reference a `key` defined in a `customResponseBody` block of this resource.
     */
    customResponseBodyKey?: string;
    /**
     * The HTTP status code to return to the client.
     */
    responseCode: number;
    /**
     * The `responseHeader` blocks used to define the HTTP response headers added to the response. See Custom HTTP Header below for details.
     */
    responseHeaders?: outputs.RuleGroupRuleActionBlockCustomResponseResponseHeader[];
}
export interface RuleGroupRuleActionBlockCustomResponseResponseHeader {
    /**
     * A friendly name of the rule group.
     */
    name: string;
    value: string;
}
export interface RuleGroupRuleActionCaptcha {
    /**
     * Defines custom handling for the web request. See Custom Request Handling below for details.
     */
    customRequestHandling?: outputs.RuleGroupRuleActionCaptchaCustomRequestHandling;
}
export interface RuleGroupRuleActionCaptchaCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See Custom HTTP Header below for details.
     */
    insertHeaders: outputs.RuleGroupRuleActionCaptchaCustomRequestHandlingInsertHeader[];
}
export interface RuleGroupRuleActionCaptchaCustomRequestHandlingInsertHeader {
    /**
     * A friendly name of the rule group.
     */
    name: string;
    value: string;
}
export interface RuleGroupRuleActionChallenge {
    /**
     * Defines custom handling for the web request. See Custom Request Handling below for details.
     */
    customRequestHandling?: outputs.RuleGroupRuleActionChallengeCustomRequestHandling;
}
export interface RuleGroupRuleActionChallengeCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See Custom HTTP Header below for details.
     */
    insertHeaders: outputs.RuleGroupRuleActionChallengeCustomRequestHandlingInsertHeader[];
}
export interface RuleGroupRuleActionChallengeCustomRequestHandlingInsertHeader {
    /**
     * A friendly name of the rule group.
     */
    name: string;
    value: string;
}
export interface RuleGroupRuleActionCount {
    /**
     * Defines custom handling for the web request. See Custom Request Handling below for details.
     */
    customRequestHandling?: outputs.RuleGroupRuleActionCountCustomRequestHandling;
}
export interface RuleGroupRuleActionCountCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See Custom HTTP Header below for details.
     */
    insertHeaders: outputs.RuleGroupRuleActionCountCustomRequestHandlingInsertHeader[];
}
export interface RuleGroupRuleActionCountCustomRequestHandlingInsertHeader {
    /**
     * A friendly name of the rule group.
     */
    name: string;
    value: string;
}
export interface RuleGroupRuleCaptchaConfig {
    /**
     * Defines custom immunity time. See Immunity Time Property below for details.
     */
    immunityTimeProperty?: outputs.RuleGroupRuleCaptchaConfigImmunityTimeProperty;
}
export interface RuleGroupRuleCaptchaConfigImmunityTimeProperty {
    /**
     * The amount of time, in seconds, that a CAPTCHA or challenge timestamp is considered valid by AWS WAF. The default setting is 300.
     */
    immunityTime?: number;
}
export interface RuleGroupRuleRuleLabel {
    /**
     * The label string.
     */
    name: string;
}
export interface RuleGroupRuleStatement {
    /**
     * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
     */
    andStatement?: outputs.RuleGroupRuleStatementAndStatement;
    /**
     * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
     */
    byteMatchStatement?: outputs.RuleGroupRuleStatementByteMatchStatement;
    /**
     * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
     */
    geoMatchStatement?: outputs.RuleGroupRuleStatementGeoMatchStatement;
    /**
     * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
     */
    ipSetReferenceStatement?: outputs.RuleGroupRuleStatementIpSetReferenceStatement;
    /**
     * A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. See Label Match Statement below for details.
     */
    labelMatchStatement?: outputs.RuleGroupRuleStatementLabelMatchStatement;
    /**
     * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
     */
    notStatement?: outputs.RuleGroupRuleStatementNotStatement;
    /**
     * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
     */
    orStatement?: outputs.RuleGroupRuleStatementOrStatement;
    /**
     * A rate-based rule tracks the rate of requests for each originating `IP address`, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any `5-minute` time span. This statement can not be nested. See Rate Based Statement below for details.
     */
    rateBasedStatement?: outputs.RuleGroupRuleStatementRateBasedStatement;
    /**
     * A rule statement used to search web request components for a match against a single regular expression. See Regex Match Statement below for details.
     */
    regexMatchStatement?: outputs.RuleGroupRuleStatementRegexMatchStatement;
    /**
     * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
     */
    regexPatternSetReferenceStatement?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatement;
    /**
     * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
     */
    sizeConstraintStatement?: outputs.RuleGroupRuleStatementSizeConstraintStatement;
    /**
     * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
     */
    sqliMatchStatement?: outputs.RuleGroupRuleStatementSqliMatchStatement;
    /**
     * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
     */
    xssMatchStatement?: outputs.RuleGroupRuleStatementXssMatchStatement;
}
export interface RuleGroupRuleStatementAndStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.RuleGroupRuleStatement[];
}
export interface RuleGroupRuleStatementByteMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatch;
    /**
     * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
     */
    positionalConstraint: string;
    /**
     * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
     */
    searchString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementByteMatchStatementTextTransformation[];
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementByteMatchStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementGeoMatchStatement {
    /**
     * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
     */
    countryCodes: string[];
    /**
     * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
     */
    forwardedIpConfig?: outputs.RuleGroupRuleStatementGeoMatchStatementForwardedIpConfig;
}
export interface RuleGroupRuleStatementGeoMatchStatementForwardedIpConfig {
    /**
     * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * The name of the HTTP header to use for the IP address.
     */
    headerName: string;
}
export interface RuleGroupRuleStatementIpSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the IP Set that this statement references.
     */
    arn: string;
    /**
     * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
     */
    ipSetForwardedIpConfig?: outputs.RuleGroupRuleStatementIpSetReferenceStatementIpSetForwardedIpConfig;
}
export interface RuleGroupRuleStatementIpSetReferenceStatementIpSetForwardedIpConfig {
    /**
     * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * The name of the HTTP header to use for the IP address.
     */
    headerName: string;
    /**
     * The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
     */
    position: string;
}
export interface RuleGroupRuleStatementLabelMatchStatement {
    /**
     * The string to match against.
     */
    key: string;
    /**
     * Specify whether you want to match using the label name or just the namespace. Valid values are `LABEL` or `NAMESPACE`.
     */
    scope: string;
}
export interface RuleGroupRuleStatementNotStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.RuleGroupRuleStatement[];
}
export interface RuleGroupRuleStatementOrStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.RuleGroupRuleStatement[];
}
export interface RuleGroupRuleStatementRateBasedStatement {
    /**
     * Setting that indicates how to aggregate the request counts. Valid values include: `CONSTANT`, `CUSTOM_KEYS`, `FORWARDED_IP` or `IP`. Default: `IP`.
     */
    aggregateKeyType?: string;
    /**
     * Aggregate the request counts using one or more web request components as the aggregate keys. See `customKey` below for details.
     */
    customKeys?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKey[];
    /**
     * The amount of time, in seconds, that AWS WAF should include in its request counts, looking back from the current time. Valid values are `60`, `120`, `300`, and `600`. Defaults to `300` (5 minutes).
     *
     * **NOTE:** This setting doesn't determine how often AWS WAF checks the rate, but how far back it looks each time it checks. AWS WAF checks the rate about every 10 seconds.
     */
    evaluationWindowSec?: number;
    /**
     * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. If `aggregateKeyType` is set to `FORWARDED_IP`, this block is required. See Forwarded IP Config below for details.
     */
    forwardedIpConfig?: outputs.RuleGroupRuleStatementRateBasedStatementForwardedIpConfig;
    /**
     * The limit on requests per 5-minute period for a single originating IP address.
     */
    limit: number;
    /**
     * An optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See Statement above for details. If `aggregateKeyType` is set to `CONSTANT`, this block is required.
     */
    scopeDownStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatement;
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKey {
    /**
     * (Optional) Use the value of a cookie in the request as an aggregate key. See RateLimit `cookie` below for details.
     */
    cookie?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyCookie;
    /**
     * (Optional) Use the first IP address in an HTTP header as an aggregate key. See `forwardedIp` below for details.
     */
    forwardedIp?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyForwardedIp;
    /**
     * (Optional) Use the value of a header in the request as an aggregate key. See RateLimit `header` below for details.
     */
    header?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyHeader;
    /**
     * (Optional) Use the request's HTTP method as an aggregate key. See RateLimit `httpMethod` below for details.
     */
    httpMethod?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyHttpMethod;
    /**
     * (Optional) Use the request's originating IP address as an aggregate key. See `RateLimit ip` below for details.
     */
    ip?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyIp;
    /**
     * (Optional) Use the specified label namespace as an aggregate key. See RateLimit `labelNamespace` below for details.
     */
    labelNamespace?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyLabelNamespace;
    /**
     * (Optional) Use the specified query argument as an aggregate key. See RateLimit `queryArgument` below for details.
     */
    queryArgument?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyQueryArgument;
    /**
     * (Optional) Use the request's query string as an aggregate key. See RateLimit `queryString` below for details.
     */
    queryString?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyQueryString;
    /**
     * (Optional) Use the request's URI path as an aggregate key. See RateLimit `uriPath` below for details.
     */
    uriPath?: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyUriPath;
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyCookie {
    /**
     * A friendly name of the rule group.
     */
    name: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See Text Transformation above for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyCookieTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyCookieTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyForwardedIp {
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyHeader {
    /**
     * A friendly name of the rule group.
     */
    name: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See Text Transformation above for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyHeaderTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyHeaderTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyHttpMethod {
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyIp {
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyLabelNamespace {
    /**
     * The namespace to use for aggregation
     */
    namespace: string;
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyQueryArgument {
    /**
     * A friendly name of the rule group.
     */
    name: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See Text Transformation above for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyQueryArgumentTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyQueryArgumentTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyQueryString {
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See Text Transformation above for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyQueryStringTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyQueryStringTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyUriPath {
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See Text Transformation above for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementCustomKeyUriPathTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementCustomKeyUriPathTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementForwardedIpConfig {
    /**
     * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * The name of the HTTP header to use for the IP address.
     */
    headerName: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatement {
    andStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementAndStatement;
    byteMatchStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatement;
    geoMatchStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatement;
    ipSetReferenceStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatement;
    labelMatchStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementLabelMatchStatement;
    notStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementNotStatement;
    orStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementOrStatement;
    regexMatchStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatement;
    regexPatternSetReferenceStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatement;
    sizeConstraintStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatement;
    sqliMatchStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatement;
    xssMatchStatement?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatement;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementAndStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.RuleGroupRuleStatement[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatch;
    /**
     * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
     */
    positionalConstraint: string;
    /**
     * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
     */
    searchString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatement {
    /**
     * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
     */
    countryCodes: string[];
    /**
     * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
     */
    forwardedIpConfig?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatementForwardedIpConfig;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatementForwardedIpConfig {
    /**
     * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * The name of the HTTP header to use for the IP address.
     */
    headerName: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the IP Set that this statement references.
     */
    arn: string;
    /**
     * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
     */
    ipSetForwardedIpConfig?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatementIpSetForwardedIpConfig;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatementIpSetForwardedIpConfig {
    /**
     * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * The name of the HTTP header to use for the IP address.
     */
    headerName: string;
    /**
     * The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
     */
    position: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementLabelMatchStatement {
    /**
     * The string to match against.
     */
    key: string;
    /**
     * Specify whether you want to match using the label name or just the namespace. Valid values are `LABEL` or `NAMESPACE`.
     */
    scope: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementNotStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.RuleGroupRuleStatement[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementOrStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.RuleGroupRuleStatement[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatch;
    /**
     * The string representing the regular expression. **Note:** The fixed quota for the maximum number of characters in each regex pattern is 200, which can't be changed. See [AWS WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) for details.
     */
    regexString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
     */
    arn: string;
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatement {
    /**
     * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
     */
    comparisonOperator: string;
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatch;
    /**
     * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
     */
    size: number;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementTextTransformation[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRegexMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatch;
    /**
     * The string representing the regular expression. **Note:** The fixed quota for the maximum number of characters in each regex pattern is 200, which can't be changed. See [AWS WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) for details.
     */
    regexString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRegexMatchStatementTextTransformation[];
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRegexMatchStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementRegexMatchStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
     */
    arn: string;
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementTextTransformation[];
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatement {
    /**
     * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
     */
    comparisonOperator: string;
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatch;
    /**
     * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
     */
    size: number;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementSizeConstraintStatementTextTransformation[];
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementSizeConstraintStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementSqliMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementSqliMatchStatementTextTransformation[];
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementSqliMatchStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleStatementXssMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
     */
    fieldToMatch?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
     * At least one required.
     * See Text Transformation below for details.
     */
    textTransformations: outputs.RuleGroupRuleStatementXssMatchStatementTextTransformation[];
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers.
     */
    body?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See Cookies below for details.
     */
    cookies?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchCookies;
    /**
     * Inspect the request headers. See Header Order below for details.
     */
    headerOrders?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See Headers below for details.
     */
    headers?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchHeader[];
    ja3Fingerprint?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See JSON Body for details.
     */
    jsonBody?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See Single Header below for details.
     */
    singleHeader?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See Single Query Argument below for details.
     */
    singleQueryArgument?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchUriPath;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchAllQueryArguments {
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchBody {
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchJa3Fingerprint {
    fallbackBehavior: string;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.RuleGroupRuleStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchMethod {
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchQueryString {
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchSingleHeader {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * The name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchUriPath {
}
export interface RuleGroupRuleStatementXssMatchStatementTextTransformation {
    /**
     * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * The transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface RuleGroupRuleVisibilityConfig {
    /**
     * A boolean indicating whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
     */
    cloudwatchMetricsEnabled: boolean;
    /**
     * A friendly name of the CloudWatch metric. The name can contain only alphanumeric characters (A-Z, a-z, 0-9) hyphen(-) and underscore (_), with length from one to 128 characters. It can't contain whitespace or metric names reserved for AWS WAF, for example `All` and `Default_Action`.
     */
    metricName: string;
    /**
     * A boolean indicating whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
     */
    sampledRequestsEnabled: boolean;
}
export interface RuleGroupVisibilityConfig {
    /**
     * A boolean indicating whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
     */
    cloudwatchMetricsEnabled: boolean;
    /**
     * A friendly name of the CloudWatch metric. The name can contain only alphanumeric characters (A-Z, a-z, 0-9) hyphen(-) and underscore (_), with length from one to 128 characters. It can't contain whitespace or metric names reserved for AWS WAF, for example `All` and `Default_Action`.
     */
    metricName: string;
    /**
     * A boolean indicating whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
     */
    sampledRequestsEnabled: boolean;
}
export interface WebAclAssociationConfig {
    /**
     * Customizes the request body that your protected resource forward to AWS WAF for inspection. See `requestBody` below for details.
     */
    requestBodies?: outputs.WebAclAssociationConfigRequestBody[];
}
export interface WebAclAssociationConfigRequestBody {
    /**
     * Customizes the request body that your protected CloudFront distributions forward to AWS WAF for inspection. See `cloudfront` below for details.
     */
    cloudfronts?: outputs.WebAclAssociationConfigRequestBodyCloudfront[];
}
export interface WebAclAssociationConfigRequestBodyCloudfront {
    /**
     * Specifies the maximum size of the web request body component that an associated CloudFront distribution should send to AWS WAF for inspection. This applies to statements in the web ACL that inspect the body or JSON body. Valid values are `KB_16`, `KB_32`, `KB_48` and `KB_64`.
     */
    defaultSizeInspectionLimit: string;
}
export interface WebAclCaptchaConfig {
    /**
     * Defines custom immunity time. See `immunityTimeProperty` below for details.
     */
    immunityTimeProperty?: outputs.WebAclCaptchaConfigImmunityTimeProperty;
}
export interface WebAclCaptchaConfigImmunityTimeProperty {
    /**
     * The amount of time, in seconds, that a CAPTCHA or challenge timestamp is considered valid by AWS WAF. The default setting is 300.
     */
    immunityTime?: number;
}
export interface WebAclChallengeConfig {
    /**
     * Defines custom immunity time. See `immunityTimeProperty` below for details.
     */
    immunityTimeProperty?: outputs.WebAclChallengeConfigImmunityTimeProperty;
}
export interface WebAclChallengeConfigImmunityTimeProperty {
    /**
     * The amount of time, in seconds, that a CAPTCHA or challenge timestamp is considered valid by AWS WAF. The default setting is 300.
     */
    immunityTime?: number;
}
export interface WebAclCustomResponseBody {
    /**
     * Payload of the custom response.
     */
    content: string;
    /**
     * Type of content in the payload that you are defining in the `content` argument. Valid values are `TEXT_PLAIN`, `TEXT_HTML`, or `APPLICATION_JSON`.
     */
    contentType: string;
    /**
     * Unique key identifying the custom response body. This is referenced by the `customResponseBodyKey` argument in the `customResponse` block.
     */
    key: string;
}
export interface WebAclDefaultAction {
    /**
     * Specifies that AWS WAF should allow requests by default. See `allow` below for details.
     */
    allow?: outputs.WebAclDefaultActionAllow;
    /**
     * Specifies that AWS WAF should block requests by default. See `block` below for details.
     */
    block?: outputs.WebAclDefaultActionBlock;
}
export interface WebAclDefaultActionAllow {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclDefaultActionAllowCustomRequestHandling;
}
export interface WebAclDefaultActionAllowCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclDefaultActionAllowCustomRequestHandlingInsertHeader[];
}
export interface WebAclDefaultActionAllowCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclDefaultActionBlock {
    /**
     * Defines a custom response for the web request. See `customResponse` below for details.
     */
    customResponse?: outputs.WebAclDefaultActionBlockCustomResponse;
}
export interface WebAclDefaultActionBlockCustomResponse {
    /**
     * References the response body that you want AWS WAF to return to the web request client. This must reference a `key` defined in a `customResponseBody` block of this resource.
     */
    customResponseBodyKey?: string;
    /**
     * The HTTP status code to return to the client.
     */
    responseCode: number;
    /**
     * The `responseHeader` blocks used to define the HTTP response headers added to the response. See `responseHeader` below for details.
     */
    responseHeaders?: outputs.WebAclDefaultActionBlockCustomResponseResponseHeader[];
}
export interface WebAclDefaultActionBlockCustomResponseResponseHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclLoggingConfigurationLoggingFilter {
    /**
     * Default handling for logs that don't match any of the specified filtering conditions. Valid values for `defaultBehavior` are `KEEP` or `DROP`.
     */
    defaultBehavior: string;
    /**
     * Filter(s) that you want to apply to the logs. See Filter below for more details.
     */
    filters: outputs.WebAclLoggingConfigurationLoggingFilterFilter[];
}
export interface WebAclLoggingConfigurationLoggingFilterFilter {
    /**
     * Parameter that determines how to handle logs that meet the conditions and requirements of the filter. The valid values for `behavior` are `KEEP` or `DROP`.
     */
    behavior: string;
    /**
     * Match condition(s) for the filter. See Condition below for more details.
     */
    conditions: outputs.WebAclLoggingConfigurationLoggingFilterFilterCondition[];
    /**
     * Logic to apply to the filtering conditions. You can specify that a log must match all conditions or at least one condition in order to satisfy the filter. Valid values for `requirement` are `MEETS_ALL` or `MEETS_ANY`.
     */
    requirement: string;
}
export interface WebAclLoggingConfigurationLoggingFilterFilterCondition {
    /**
     * Configuration for a single action condition. See Action Condition below for more details.
     */
    actionCondition?: outputs.WebAclLoggingConfigurationLoggingFilterFilterConditionActionCondition;
    /**
     * Condition for a single label name. See Label Name Condition below for more details.
     */
    labelNameCondition?: outputs.WebAclLoggingConfigurationLoggingFilterFilterConditionLabelNameCondition;
}
export interface WebAclLoggingConfigurationLoggingFilterFilterConditionActionCondition {
    /**
     * Action setting that a log record must contain in order to meet the condition. Valid values for `action` are `ALLOW`, `BLOCK`, and `COUNT`.
     */
    action: string;
}
export interface WebAclLoggingConfigurationLoggingFilterFilterConditionLabelNameCondition {
    /**
     * Name of the label that a log record must contain in order to meet the condition. It must be a fully qualified label name, which includes a prefix, optional namespaces, and the label name itself. The prefix identifies the rule group or web ACL context of the rule that added the label.
     */
    labelName: string;
}
export interface WebAclLoggingConfigurationRedactedField {
    /**
     * HTTP method to be redacted. It must be specified as an empty configuration block `{}`. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclLoggingConfigurationRedactedFieldMethod;
    /**
     * Whether to redact the query string. It must be specified as an empty configuration block `{}`. The query string is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclLoggingConfigurationRedactedFieldQueryString;
    /**
     * "singleHeader" refers to the redaction of a single header. For more information, please see the details below under Single Header.
     */
    singleHeader?: outputs.WebAclLoggingConfigurationRedactedFieldSingleHeader;
    /**
     * Configuration block that redacts the request URI path. It should be specified as an empty configuration block `{}`. The URI path is the part of a web request that identifies a resource, such as `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclLoggingConfigurationRedactedFieldUriPath;
}
export interface WebAclLoggingConfigurationRedactedFieldMethod {
}
export interface WebAclLoggingConfigurationRedactedFieldQueryString {
}
export interface WebAclLoggingConfigurationRedactedFieldSingleHeader {
    /**
     * Name of the query header to redact. This setting must be provided in lowercase characters.
     */
    name: string;
}
export interface WebAclLoggingConfigurationRedactedFieldUriPath {
}
export interface WebAclRule {
    /**
     * Action that AWS WAF should take on a web request when it matches the rule's statement. This is used only for rules whose **statements do not reference a rule group**. See `action` for details.
     */
    action?: outputs.WebAclRuleAction;
    /**
     * Specifies how AWS WAF should handle CAPTCHA evaluations. See `captchaConfig` below for details.
     */
    captchaConfig?: outputs.WebAclRuleCaptchaConfig;
    /**
     * Friendly name of the rule. Note that the provider assumes that rules with names matching this pattern, `^ShieldMitigationRuleGroup_<account-id>_<web-acl-guid>_.*`, are AWS-added for [automatic application layer DDoS mitigation activities](https://docs.aws.amazon.com/waf/latest/developerguide/ddos-automatic-app-layer-response-rg.html). Such rules will be ignored by the provider unless you explicitly include them in your configuration (for example, by using the AWS CLI to discover their properties and creating matching configuration). However, since these rules are owned and managed by AWS, you may get permission errors.
     */
    name: string;
    /**
     * Override action to apply to the rules in a rule group. Used only for rule **statements that reference a rule group**, like `ruleGroupReferenceStatement` and `managedRuleGroupStatement`. See `overrideAction` below for details.
     */
    overrideAction?: outputs.WebAclRuleOverrideAction;
    /**
     * If you define more than one Rule in a WebACL, AWS WAF evaluates each request against the `rules` in order based on the value of `priority`. AWS WAF processes rules with lower priority first.
     */
    priority: number;
    /**
     * Labels to apply to web requests that match the rule match statement. See `ruleLabel` below for details.
     */
    ruleLabels?: outputs.WebAclRuleRuleLabel[];
    /**
     * The AWS WAF processing statement for the rule, for example `byteMatchStatement` or `geoMatchStatement`. See `statement` below for details.
     */
    statement: outputs.WebAclRuleStatement;
    /**
     * Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibilityConfig` below for details.
     */
    visibilityConfig: outputs.WebAclRuleVisibilityConfig;
}
export interface WebAclRuleAction {
    /**
     * Instructs AWS WAF to allow the web request. See `allow` below for details.
     */
    allow?: outputs.WebAclRuleActionAllow;
    /**
     * Instructs AWS WAF to block the web request. See `block` below for details.
     */
    block?: outputs.WebAclRuleActionBlock;
    /**
     * Instructs AWS WAF to run a Captcha check against the web request. See `captcha` below for details.
     */
    captcha?: outputs.WebAclRuleActionCaptcha;
    /**
     * Instructs AWS WAF to run a check against the request to verify that the request is coming from a legitimate client session. See `challenge` below for details.
     */
    challenge?: outputs.WebAclRuleActionChallenge;
    /**
     * Instructs AWS WAF to count the web request and allow it. See `count` below for details.
     */
    count?: outputs.WebAclRuleActionCount;
}
export interface WebAclRuleActionAllow {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleActionAllowCustomRequestHandling;
}
export interface WebAclRuleActionAllowCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleActionAllowCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleActionAllowCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleActionBlock {
    /**
     * Defines a custom response for the web request. See `customResponse` below for details.
     */
    customResponse?: outputs.WebAclRuleActionBlockCustomResponse;
}
export interface WebAclRuleActionBlockCustomResponse {
    /**
     * References the response body that you want AWS WAF to return to the web request client. This must reference a `key` defined in a `customResponseBody` block of this resource.
     */
    customResponseBodyKey?: string;
    /**
     * The HTTP status code to return to the client.
     */
    responseCode: number;
    /**
     * The `responseHeader` blocks used to define the HTTP response headers added to the response. See `responseHeader` below for details.
     */
    responseHeaders?: outputs.WebAclRuleActionBlockCustomResponseResponseHeader[];
}
export interface WebAclRuleActionBlockCustomResponseResponseHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleActionCaptcha {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleActionCaptchaCustomRequestHandling;
}
export interface WebAclRuleActionCaptchaCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleActionCaptchaCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleActionCaptchaCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleActionChallenge {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleActionChallengeCustomRequestHandling;
}
export interface WebAclRuleActionChallengeCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleActionChallengeCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleActionChallengeCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleActionCount {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleActionCountCustomRequestHandling;
}
export interface WebAclRuleActionCountCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleActionCountCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleActionCountCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleCaptchaConfig {
    /**
     * Defines custom immunity time. See `immunityTimeProperty` below for details.
     */
    immunityTimeProperty?: outputs.WebAclRuleCaptchaConfigImmunityTimeProperty;
}
export interface WebAclRuleCaptchaConfigImmunityTimeProperty {
    /**
     * The amount of time, in seconds, that a CAPTCHA or challenge timestamp is considered valid by AWS WAF. The default setting is 300.
     */
    immunityTime?: number;
}
export interface WebAclRuleOverrideAction {
    /**
     * Override the rule action setting to count (i.e., only count matches). Configured as an empty block `{}`.
     */
    count?: outputs.WebAclRuleOverrideActionCount;
    /**
     * Don't override the rule action setting. Configured as an empty block `{}`.
     */
    none?: outputs.WebAclRuleOverrideActionNone;
}
export interface WebAclRuleOverrideActionCount {
}
export interface WebAclRuleOverrideActionNone {
}
export interface WebAclRuleRuleLabel {
    /**
     * Label string.
     */
    name: string;
}
export interface WebAclRuleStatement {
    /**
     * Logical rule statement used to combine other rule statements with AND logic. See `andStatement` below for details.
     */
    andStatement?: outputs.WebAclRuleStatementAndStatement;
    /**
     * Rule statement that defines a string match search for AWS WAF to apply to web requests. See `byteMatchStatement` below for details.
     */
    byteMatchStatement?: outputs.WebAclRuleStatementByteMatchStatement;
    /**
     * Rule statement used to identify web requests based on country of origin. See `geoMatchStatement` below for details.
     */
    geoMatchStatement?: outputs.WebAclRuleStatementGeoMatchStatement;
    /**
     * Rule statement used to detect web requests coming from particular IP addresses or address ranges. See `ipSetReferenceStatement` below for details.
     */
    ipSetReferenceStatement?: outputs.WebAclRuleStatementIpSetReferenceStatement;
    /**
     * Rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. See `labelMatchStatement` below for details.
     */
    labelMatchStatement?: outputs.WebAclRuleStatementLabelMatchStatement;
    /**
     * Rule statement used to run the rules that are defined in a managed rule group.  This statement can not be nested. See `managedRuleGroupStatement` below for details.
     */
    managedRuleGroupStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatement;
    /**
     * Logical rule statement used to negate the results of another rule statement. See `notStatement` below for details.
     */
    notStatement?: outputs.WebAclRuleStatementNotStatement;
    /**
     * Logical rule statement used to combine other rule statements with OR logic. See `orStatement` below for details.
     */
    orStatement?: outputs.WebAclRuleStatementOrStatement;
    /**
     * Rate-based rule tracks the rate of requests for each originating `IP address`, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any `5-minute` time span. This statement can not be nested. See `rateBasedStatement` below for details.
     */
    rateBasedStatement?: outputs.WebAclRuleStatementRateBasedStatement;
    /**
     * Rule statement used to search web request components for a match against a single regular expression. See `regexMatchStatement` below for details.
     */
    regexMatchStatement?: outputs.WebAclRuleStatementRegexMatchStatement;
    /**
     * Rule statement used to search web request components for matches with regular expressions. See `regexPatternSetReferenceStatement` below for details.
     */
    regexPatternSetReferenceStatement?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatement;
    /**
     * Rule statement used to run the rules that are defined in an WAFv2 Rule Group. See `ruleGroupReferenceStatement` below for details.
     */
    ruleGroupReferenceStatement?: outputs.WebAclRuleStatementRuleGroupReferenceStatement;
    /**
     * Rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See `sizeConstraintStatement` below for more details.
     */
    sizeConstraintStatement?: outputs.WebAclRuleStatementSizeConstraintStatement;
    /**
     * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See `sqliMatchStatement` below for details.
     */
    sqliMatchStatement?: outputs.WebAclRuleStatementSqliMatchStatement;
    /**
     * Rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See `xssMatchStatement` below for details.
     */
    xssMatchStatement?: outputs.WebAclRuleStatementXssMatchStatement;
}
export interface WebAclRuleStatementAndStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementByteMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatch;
    /**
     * Area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
     */
    positionalConstraint: string;
    /**
     * String value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
     */
    searchString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementByteMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementByteMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementByteMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementGeoMatchStatement {
    /**
     * Array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
     */
    countryCodes: string[];
    /**
     * Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See `forwardedIpConfig` below for details.
     */
    forwardedIpConfig?: outputs.WebAclRuleStatementGeoMatchStatementForwardedIpConfig;
}
export interface WebAclRuleStatementGeoMatchStatementForwardedIpConfig {
    /**
     * Match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * Name of the HTTP header to use for the IP address.
     */
    headerName: string;
}
export interface WebAclRuleStatementIpSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the IP Set that this statement references.
     */
    arn: string;
    /**
     * Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See `ipSetForwardedIpConfig` below for more details.
     */
    ipSetForwardedIpConfig?: outputs.WebAclRuleStatementIpSetReferenceStatementIpSetForwardedIpConfig;
}
export interface WebAclRuleStatementIpSetReferenceStatementIpSetForwardedIpConfig {
    /**
     * Match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * Name of the HTTP header to use for the IP address.
     */
    headerName: string;
    /**
     * Position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
     */
    position: string;
}
export interface WebAclRuleStatementLabelMatchStatement {
    /**
     * String to match against.
     */
    key: string;
    /**
     * Specify whether you want to match using the label name or just the namespace. Valid values are `LABEL` or `NAMESPACE`.
     */
    scope: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatement {
    /**
     * Additional information that's used by a managed rule group. Only one rule attribute is allowed in each config. See `managedRuleGroupConfigs` for more details
     */
    managedRuleGroupConfigs?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfig[];
    /**
     * Name of the managed rule group.
     */
    name: string;
    /**
     * Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. See `ruleActionOverride` below for details.
     */
    ruleActionOverrides?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverride[];
    /**
     * Narrows the scope of the statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See `statement` above for details.
     */
    scopeDownStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatement;
    /**
     * Name of the managed rule group vendor.
     */
    vendorName: string;
    /**
     * Version of the managed rule group. You can set `Version_1.0` or `Version_1.1` etc. If you want to use the default version, do not set anything.
     */
    version?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfig {
    /**
     * Additional configuration for using the Account Creation Fraud Prevention managed rule group. Use this to specify information such as the registration page of your application and the type of content to accept or reject from the client.
     */
    awsManagedRulesAcfpRuleSet?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSet;
    /**
     * Additional configuration for using the Account Takeover Protection managed rule group. Use this to specify information such as the sign-in page of your application and the type of content to accept or reject from the client.
     */
    awsManagedRulesAtpRuleSet?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSet;
    /**
     * Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. See `awsManagedRulesBotControlRuleSet` for more details
     */
    awsManagedRulesBotControlRuleSet?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesBotControlRuleSet;
    /**
     * The path of the login endpoint for your application.
     */
    loginPath?: string;
    /**
     * Details about your login page password field. See `passwordField` for more details.
     */
    passwordField?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigPasswordField;
    /**
     * The payload type for your login endpoint, either JSON or form encoded.
     */
    payloadType?: string;
    /**
     * Details about your login page username field. See `usernameField` for more details.
     */
    usernameField?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigUsernameField;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSet {
    /**
     * The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept POST requests.
     */
    creationPath: string;
    /**
     * Whether or not to allow the use of regular expressions in the login page path.
     */
    enableRegexInPath?: boolean;
    /**
     * The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users. This page must accept GET text/html requests.
     */
    registrationPagePath: string;
    /**
     * The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage. See `requestInspection` for more details.
     */
    requestInspection: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspection;
    /**
     * The criteria for inspecting responses to login requests, used by the ATP rule group to track login failure rates. Note that Response Inspection is available only on web ACLs that protect CloudFront distributions. See `responseInspection` for more details.
     */
    responseInspection?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspection;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspection {
    /**
     * The names of the fields in the request payload that contain your customer's primary physical address. See `addressFields` for more details.
     */
    addressFields?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionAddressFields;
    /**
     * The name of the field in the request payload that contains your customer's email. See `emailField` for more details.
     */
    emailField?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionEmailField;
    /**
     * Details about your login page password field. See `passwordField` for more details.
     */
    passwordField?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionPasswordField;
    /**
     * The payload type for your login endpoint, either JSON or form encoded.
     */
    payloadType: string;
    /**
     * The names of the fields in the request payload that contain your customer's primary phone number. See `phoneNumberFields` for more details.
     */
    phoneNumberFields?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionPhoneNumberFields;
    /**
     * Details about your login page username field. See `usernameField` for more details.
     */
    usernameField?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionUsernameField;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionAddressFields {
    identifiers: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionEmailField {
    /**
     * The name of the field in the request payload that contains your customer's email.
     */
    identifier: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionPasswordField {
    /**
     * The name of the password field.
     */
    identifier: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionPhoneNumberFields {
    identifiers: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionUsernameField {
    /**
     * The name of the username field.
     */
    identifier: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspection {
    /**
     * Configures inspection of the response body. See `bodyContains` for more details.
     */
    bodyContains?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionBodyContains;
    /**
     * Configures inspection of the response header.See `header` for more details.
     */
    header?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionHeader;
    /**
     * Configures inspection of the response JSON. See `json` for more details.
     */
    json?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionJson;
    /**
     * Configures inspection of the response status code.See `statusCode` for more details.
     */
    statusCode?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionStatusCode;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionBodyContains {
    /**
     * Strings in the body of the response that indicate a failed login attempt.
     */
    failureStrings: string[];
    /**
     * Strings in the body of the response that indicate a successful login attempt.
     */
    successStrings: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionHeader {
    /**
     * Values in the response header with the specified name that indicate a failed login attempt.
     */
    failureValues: string[];
    /**
     * The name of the header to use.
     */
    name: string;
    /**
     * Values in the response header with the specified name that indicate a successful login attempt.
     */
    successValues: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionJson {
    failureValues: string[];
    /**
     * The identifier for the value to match against in the JSON.
     */
    identifier: string;
    successValues: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionStatusCode {
    /**
     * Status codes in the response that indicate a failed login attempt.
     */
    failureCodes: number[];
    /**
     * Status codes in the response that indicate a successful login attempt.
     */
    successCodes: number[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSet {
    /**
     * Whether or not to allow the use of regular expressions in the login page path.
     */
    enableRegexInPath?: boolean;
    /**
     * The path of the login endpoint for your application.
     */
    loginPath: string;
    /**
     * The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage. See `requestInspection` for more details.
     */
    requestInspection?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspection;
    /**
     * The criteria for inspecting responses to login requests, used by the ATP rule group to track login failure rates. Note that Response Inspection is available only on web ACLs that protect CloudFront distributions. See `responseInspection` for more details.
     */
    responseInspection?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspection;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspection {
    /**
     * Details about your login page password field. See `passwordField` for more details.
     */
    passwordField: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspectionPasswordField;
    /**
     * The payload type for your login endpoint, either JSON or form encoded.
     */
    payloadType: string;
    /**
     * Details about your login page username field. See `usernameField` for more details.
     */
    usernameField: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspectionUsernameField;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspectionPasswordField {
    /**
     * The name of the password field.
     */
    identifier: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspectionUsernameField {
    /**
     * The name of the username field.
     */
    identifier: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspection {
    /**
     * Configures inspection of the response body. See `bodyContains` for more details.
     */
    bodyContains?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionBodyContains;
    /**
     * Configures inspection of the response header.See `header` for more details.
     */
    header?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionHeader;
    /**
     * Configures inspection of the response JSON. See `json` for more details.
     */
    json?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionJson;
    /**
     * Configures inspection of the response status code.See `statusCode` for more details.
     */
    statusCode?: outputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionStatusCode;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionBodyContains {
    /**
     * Strings in the body of the response that indicate a failed login attempt.
     */
    failureStrings: string[];
    /**
     * Strings in the body of the response that indicate a successful login attempt.
     */
    successStrings: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionHeader {
    /**
     * Values in the response header with the specified name that indicate a failed login attempt.
     */
    failureValues: string[];
    /**
     * The name of the header to use.
     */
    name: string;
    /**
     * Values in the response header with the specified name that indicate a successful login attempt.
     */
    successValues: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionJson {
    failureValues: string[];
    /**
     * The identifier for the value to match against in the JSON.
     */
    identifier: string;
    successValues: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionStatusCode {
    /**
     * Status codes in the response that indicate a failed login attempt.
     */
    failureCodes: number[];
    /**
     * Status codes in the response that indicate a successful login attempt.
     */
    successCodes: number[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesBotControlRuleSet {
    /**
     * The inspection level to use for the Bot Control rule group.
     */
    inspectionLevel: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigPasswordField {
    /**
     * The name of the password field.
     */
    identifier: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigUsernameField {
    /**
     * The name of the username field.
     */
    identifier: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverride {
    /**
     * Override action to use, in place of the configured action of the rule in the rule group. See `action` for details.
     */
    actionToUse: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUse;
    /**
     * Name of the rule to override. See the [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html) for a list of names in the appropriate rule group in use.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUse {
    allow?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseAllow;
    block?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseBlock;
    captcha?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCaptcha;
    challenge?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseChallenge;
    count?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCount;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseAllow {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseAllowCustomRequestHandling;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseAllowCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseAllowCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseAllowCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseBlock {
    /**
     * Defines a custom response for the web request. See `customResponse` below for details.
     */
    customResponse?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseBlockCustomResponse;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseBlockCustomResponse {
    /**
     * References the response body that you want AWS WAF to return to the web request client. This must reference a `key` defined in a `customResponseBody` block of this resource.
     */
    customResponseBodyKey?: string;
    /**
     * The HTTP status code to return to the client.
     */
    responseCode: number;
    /**
     * The `responseHeader` blocks used to define the HTTP response headers added to the response. See `responseHeader` below for details.
     */
    responseHeaders?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseBlockCustomResponseResponseHeader[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseBlockCustomResponseResponseHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCaptcha {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCaptchaCustomRequestHandling;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCaptchaCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCaptchaCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCaptchaCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseChallenge {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseChallengeCustomRequestHandling;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseChallengeCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseChallengeCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseChallengeCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCount {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCountCustomRequestHandling;
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCountCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCountCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseCountCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatement {
    andStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementAndStatement;
    byteMatchStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatement;
    geoMatchStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementGeoMatchStatement;
    ipSetReferenceStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementIpSetReferenceStatement;
    labelMatchStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementLabelMatchStatement;
    notStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementNotStatement;
    orStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementOrStatement;
    regexMatchStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatement;
    regexPatternSetReferenceStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatement;
    sizeConstraintStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatement;
    sqliMatchStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatement;
    xssMatchStatement?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatement;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementAndStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatch;
    /**
     * Area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
     */
    positionalConstraint: string;
    /**
     * String value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
     */
    searchString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementByteMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementGeoMatchStatement {
    /**
     * Array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
     */
    countryCodes: string[];
    /**
     * Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See `forwardedIpConfig` below for details.
     */
    forwardedIpConfig?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementGeoMatchStatementForwardedIpConfig;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementGeoMatchStatementForwardedIpConfig {
    /**
     * Match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * Name of the HTTP header to use for the IP address.
     */
    headerName: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementIpSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the IP Set that this statement references.
     */
    arn: string;
    /**
     * Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See `ipSetForwardedIpConfig` below for more details.
     */
    ipSetForwardedIpConfig?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementIpSetReferenceStatementIpSetForwardedIpConfig;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementIpSetReferenceStatementIpSetForwardedIpConfig {
    /**
     * Match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * Name of the HTTP header to use for the IP address.
     */
    headerName: string;
    /**
     * Position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
     */
    position: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementLabelMatchStatement {
    /**
     * String to match against.
     */
    key: string;
    /**
     * Specify whether you want to match using the label name or just the namespace. Valid values are `LABEL` or `NAMESPACE`.
     */
    scope: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementNotStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementOrStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatch;
    /**
     * String representing the regular expression. Minimum of `1` and maximum of `512` characters.
     */
    regexString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
     */
    arn: string;
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementTextTransformation[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementRegexPatternSetReferenceStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatement {
    /**
     * Operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
     */
    comparisonOperator: string;
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatch;
    /**
     * Size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
     */
    size: number;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementTextTransformation[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSizeConstraintStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementSqliMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementXssMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementNotStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementOrStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementRateBasedStatement {
    /**
     * Setting that indicates how to aggregate the request counts. Valid values include: `CONSTANT`, `CUSTOM_KEYS`, `FORWARDED_IP`, or `IP`. Default: `IP`.
     */
    aggregateKeyType?: string;
    /**
     * Aggregate the request counts using one or more web request components as the aggregate keys. See `customKey` below for details.
     */
    customKeys?: outputs.WebAclRuleStatementRateBasedStatementCustomKey[];
    /**
     * The amount of time, in seconds, that AWS WAF should include in its request counts, looking back from the current time. Valid values are `60`, `120`, `300`, and `600`. Defaults to `300` (5 minutes).
     *
     * **NOTE:** This setting doesn't determine how often AWS WAF checks the rate, but how far back it looks each time it checks. AWS WAF checks the rate about every 10 seconds.
     */
    evaluationWindowSec?: number;
    /**
     * Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. If `aggregateKeyType` is set to `FORWARDED_IP`, this block is required. See `forwardedIpConfig` below for details.
     */
    forwardedIpConfig?: outputs.WebAclRuleStatementRateBasedStatementForwardedIpConfig;
    /**
     * Limit on requests per 5-minute period for a single originating IP address.
     */
    limit: number;
    /**
     * Optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See `statement` above for details. If `aggregateKeyType` is set to `CONSTANT`, this block is required.
     */
    scopeDownStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatement;
}
export interface WebAclRuleStatementRateBasedStatementCustomKey {
    /**
     * Use the value of a cookie in the request as an aggregate key. See RateLimit `cookie` below for details.
     */
    cookie?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyCookie;
    /**
     * Use the first IP address in an HTTP header as an aggregate key. See `forwardedIp` below for details.
     */
    forwardedIp?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyForwardedIp;
    /**
     * Use the value of a header in the request as an aggregate key. See RateLimit `header` below for details.
     */
    header?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyHeader;
    /**
     * Use the request's HTTP method as an aggregate key. See RateLimit `httpMethod` below for details.
     */
    httpMethod?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyHttpMethod;
    /**
     * Use the request's originating IP address as an aggregate key. See `RateLimit ip` below for details.
     */
    ip?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyIp;
    /**
     * Use the specified label namespace as an aggregate key. See RateLimit `labelNamespace` below for details.
     */
    labelNamespace?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyLabelNamespace;
    /**
     * Use the specified query argument as an aggregate key. See RateLimit `queryArgument` below for details.
     */
    queryArgument?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyQueryArgument;
    /**
     * Use the request's query string as an aggregate key. See RateLimit `queryString` below for details.
     */
    queryString?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyQueryString;
    /**
     * Use the request's URI path as an aggregate key. See RateLimit `uriPath` below for details.
     */
    uriPath?: outputs.WebAclRuleStatementRateBasedStatementCustomKeyUriPath;
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyCookie {
    /**
     * The name of the cookie to use.
     */
    name: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See `textTransformation` above for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementCustomKeyCookieTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyCookieTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyForwardedIp {
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyHeader {
    /**
     * The name of the header to use.
     */
    name: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See `textTransformation` above for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementCustomKeyHeaderTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyHeaderTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyHttpMethod {
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyIp {
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyLabelNamespace {
    /**
     * The namespace to use for aggregation
     */
    namespace: string;
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyQueryArgument {
    /**
     * The name of the query argument to use.
     */
    name: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See `textTransformation` above for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementCustomKeyQueryArgumentTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyQueryArgumentTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyQueryString {
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See `textTransformation` above for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementCustomKeyQueryStringTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyQueryStringTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyUriPath {
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. They are used in rate-based rule statements, to transform request components before using them as custom aggregation keys. Atleast one transformation is required. See `textTransformation` above for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementCustomKeyUriPathTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementCustomKeyUriPathTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementForwardedIpConfig {
    /**
     * Match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * Name of the HTTP header to use for the IP address.
     */
    headerName: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatement {
    andStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatement;
    byteMatchStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatement;
    geoMatchStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatement;
    ipSetReferenceStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatement;
    labelMatchStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementLabelMatchStatement;
    notStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatement;
    orStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatement;
    regexMatchStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatement;
    regexPatternSetReferenceStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatement;
    sizeConstraintStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatement;
    sqliMatchStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatement;
    xssMatchStatement?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatement;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatch;
    /**
     * Area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
     */
    positionalConstraint: string;
    /**
     * String value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
     */
    searchString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatement {
    /**
     * Array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
     */
    countryCodes: string[];
    /**
     * Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See `forwardedIpConfig` below for details.
     */
    forwardedIpConfig?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatementForwardedIpConfig;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatementForwardedIpConfig {
    /**
     * Match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * Name of the HTTP header to use for the IP address.
     */
    headerName: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the IP Set that this statement references.
     */
    arn: string;
    /**
     * Configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See `ipSetForwardedIpConfig` below for more details.
     */
    ipSetForwardedIpConfig?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatementIpSetForwardedIpConfig;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatementIpSetForwardedIpConfig {
    /**
     * Match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
    /**
     * Name of the HTTP header to use for the IP address.
     */
    headerName: string;
    /**
     * Position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
     */
    position: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementLabelMatchStatement {
    /**
     * String to match against.
     */
    key: string;
    /**
     * Specify whether you want to match using the label name or just the namespace. Valid values are `LABEL` or `NAMESPACE`.
     */
    scope: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatement {
    /**
     * The statements to combine.
     */
    statements: outputs.WebAclRuleStatement[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatch;
    /**
     * String representing the regular expression. Minimum of `1` and maximum of `512` characters.
     */
    regexString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
     */
    arn: string;
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatement {
    /**
     * Operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
     */
    comparisonOperator: string;
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatch;
    /**
     * Size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
     */
    size: number;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRegexMatchStatement {
    /**
     * The part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatch;
    /**
     * String representing the regular expression. Minimum of `1` and maximum of `512` characters.
     */
    regexString: string;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementRegexMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRegexMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementRegexMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
     */
    arn: string;
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementTextTransformation[];
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementRegexPatternSetReferenceStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementRuleGroupReferenceStatement {
    /**
     * The Amazon Resource Name (ARN) of the `aws.wafv2.RuleGroup` resource.
     */
    arn: string;
    /**
     * Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. See `ruleActionOverride` below for details.
     */
    ruleActionOverrides?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverride[];
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverride {
    /**
     * Override action to use, in place of the configured action of the rule in the rule group. See `action` for details.
     */
    actionToUse: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUse;
    /**
     * Name of the rule to override. See the [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html) for a list of names in the appropriate rule group in use.
     */
    name: string;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUse {
    allow?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllow;
    block?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlock;
    captcha?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptcha;
    challenge?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallenge;
    count?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCount;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllow {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowCustomRequestHandling;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseAllowCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlock {
    /**
     * Defines a custom response for the web request. See `customResponse` below for details.
     */
    customResponse?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockCustomResponse;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockCustomResponse {
    /**
     * References the response body that you want AWS WAF to return to the web request client. This must reference a `key` defined in a `customResponseBody` block of this resource.
     */
    customResponseBodyKey?: string;
    /**
     * The HTTP status code to return to the client.
     */
    responseCode: number;
    /**
     * The `responseHeader` blocks used to define the HTTP response headers added to the response. See `responseHeader` below for details.
     */
    responseHeaders?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockCustomResponseResponseHeader[];
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseBlockCustomResponseResponseHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptcha {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaCustomRequestHandling;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCaptchaCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallenge {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeCustomRequestHandling;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseChallengeCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCount {
    /**
     * Defines custom handling for the web request. See `customRequestHandling` below for details.
     */
    customRequestHandling?: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountCustomRequestHandling;
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountCustomRequestHandling {
    /**
     * The `insertHeader` blocks used to define HTTP headers added to the request. See `insertHeader` below for details.
     */
    insertHeaders: outputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountCustomRequestHandlingInsertHeader[];
}
export interface WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseCountCustomRequestHandlingInsertHeader {
    /**
     * Name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-`, to avoid confusion with the headers that are already in the request. For example, for the header name `sample`, AWS WAF inserts the header `x-amzn-waf-sample`.
     */
    name: string;
    /**
     * Value of the custom header.
     */
    value: string;
}
export interface WebAclRuleStatementSizeConstraintStatement {
    /**
     * Operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
     */
    comparisonOperator: string;
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatch;
    /**
     * Size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
     */
    size: number;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementSizeConstraintStatementTextTransformation[];
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementSizeConstraintStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementSqliMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementSqliMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementSqliMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementSqliMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleStatementXssMatchStatement {
    /**
     * Part of a web request that you want AWS WAF to inspect. See `fieldToMatch` below for details.
     */
    fieldToMatch?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatch;
    /**
     * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. At least one transformation is required. See `textTransformation` below for details.
     */
    textTransformations: outputs.WebAclRuleStatementXssMatchStatementTextTransformation[];
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatch {
    /**
     * Inspect all query arguments.
     */
    allQueryArguments?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchAllQueryArguments;
    /**
     * Inspect the request body, which immediately follows the request headers. See `body` below for details.
     */
    body?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchBody;
    /**
     * Inspect the cookies in the web request. See `cookies` below for details.
     */
    cookies?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchCookies;
    /**
     * Inspect a string containing the list of the request's header names, ordered as they appear in the web request that AWS WAF receives for inspection. See `headerOrder` below for details.
     */
    headerOrders?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchHeaderOrder[];
    /**
     * Inspect the request headers. See `headers` below for details.
     */
    headers?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchHeader[];
    /**
     * Inspect the JA3 fingerprint. See `ja3Fingerprint` below for details.
     */
    ja3Fingerprint?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchJa3Fingerprint;
    /**
     * Inspect the request body as JSON. See `jsonBody` for details.
     */
    jsonBody?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchJsonBody;
    /**
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
     */
    method?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchMethod;
    /**
     * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
     */
    queryString?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchQueryString;
    /**
     * Inspect a single header. See `singleHeader` below for details.
     */
    singleHeader?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchSingleHeader;
    /**
     * Inspect a single query argument. See `singleQueryArgument` below for details.
     */
    singleQueryArgument?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument;
    /**
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
     */
    uriPath?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchUriPath;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchAllQueryArguments {
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchBody {
    /**
     * What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchCookies {
    /**
     * The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either `all`, `includedCookies` or `excludedCookies`. More details: [CookieMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_CookieMatchPattern.html)
     */
    matchPatterns: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchCookiesMatchPattern[];
    /**
     * The parts of the cookies to inspect with the rule inspection criteria. If you specify All, AWS WAF inspects both keys and values. Valid values: `ALL`, `KEY`, `VALUE`
     */
    matchScope: string;
    /**
     * What AWS WAF should do if the cookies of the request are larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF. Valid values: `CONTINUE`, `MATCH`, `NO_MATCH`.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchCookiesMatchPattern {
    all?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll;
    excludedCookies?: string[];
    includedCookies?: string[];
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchCookiesMatchPatternAll {
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchHeader {
    /**
     * The filter to use to identify the subset of headers to inspect in a web request. The `matchPattern` block supports only one of the following arguments:
     */
    matchPattern: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchHeaderMatchPattern;
    /**
     * The parts of the headers to inspect with the rule inspection criteria. If you specify `All`, AWS WAF inspects both keys and values. Valid values include the following: `ALL`, `Key`, `Value`.
     */
    matchScope: string;
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchHeaderMatchPattern {
    /**
     * An empty configuration block that is used for inspecting all headers.
     */
    all?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll;
    /**
     * An array of strings that will be used for inspecting headers that do not have a key that matches one of the provided values.
     */
    excludedHeaders?: string[];
    /**
     * An array of strings that will be used for inspecting headers that have a key that matches one of the provided values.
     */
    includedHeaders?: string[];
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchHeaderMatchPatternAll {
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchHeaderOrder {
    /**
     * Oversize handling tells AWS WAF what to do with a web request when the request component that the rule inspects is over the limits. Valid values include the following: `CONTINUE`, `MATCH`, `NO_MATCH`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-oversize-handling.html) for more information.
     */
    oversizeHandling: string;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchJa3Fingerprint {
    /**
     * The match status to assign to the web request if the request doesn't have a JA3 fingerprint. Valid values include: `MATCH` or `NO_MATCH`.
     */
    fallbackBehavior: string;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchJsonBody {
    /**
     * What to do when JSON parsing fails. Defaults to evaluating up to the first parsing failure. Valid values are `EVALUATE_AS_STRING`, `MATCH` and `NO_MATCH`.
     */
    invalidFallbackBehavior?: string;
    /**
     * The patterns to look for in the JSON body. You must specify exactly one setting: either `all` or `includedPaths`. See [JsonMatchPattern](https://docs.aws.amazon.com/waf/latest/APIReference/API_JsonMatchPattern.html) for details.
     */
    matchPattern: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern;
    /**
     * The parts of the JSON to match against using the `matchPattern`. Valid values are `ALL`, `KEY` and `VALUE`.
     */
    matchScope: string;
    /**
     * What to do if the body is larger than can be inspected. Valid values are `CONTINUE` (default), `MATCH` and `NO_MATCH`.
     */
    oversizeHandling?: string;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchJsonBodyMatchPattern {
    all?: outputs.WebAclRuleStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll;
    includedPaths?: string[];
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchJsonBodyMatchPatternAll {
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchMethod {
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchQueryString {
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchSingleHeader {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument {
    /**
     * Name of the query header to inspect. This setting must be provided as lower case characters.
     */
    name: string;
}
export interface WebAclRuleStatementXssMatchStatementFieldToMatchUriPath {
}
export interface WebAclRuleStatementXssMatchStatementTextTransformation {
    /**
     * Relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
     */
    priority: number;
    /**
     * Transformation to apply, please refer to the Text Transformation [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
     */
    type: string;
}
export interface WebAclRuleVisibilityConfig {
    /**
     * Whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
     */
    cloudwatchMetricsEnabled: boolean;
    /**
     * A friendly name of the CloudWatch metric. The name can contain only alphanumeric characters (A-Z, a-z, 0-9) hyphen(-) and underscore (\_), with length from one to 128 characters. It can't contain whitespace or metric names reserved for AWS WAF, for example `All` and `Default_Action`.
     */
    metricName: string;
    /**
     * Whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
     */
    sampledRequestsEnabled: boolean;
}
export interface WebAclVisibilityConfig {
    /**
     * Whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
     */
    cloudwatchMetricsEnabled: boolean;
    /**
     * A friendly name of the CloudWatch metric. The name can contain only alphanumeric characters (A-Z, a-z, 0-9) hyphen(-) and underscore (\_), with length from one to 128 characters. It can't contain whitespace or metric names reserved for AWS WAF, for example `All` and `Default_Action`.
     */
    metricName: string;
    /**
     * Whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
     */
    sampledRequestsEnabled: boolean;
}
export interface GetRegexPatternSetRegularExpression {
    /**
     * (Required) String representing the regular expression, see the AWS WAF [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-regex-pattern-set-creating.html) for more information.
     */
    regexString: string;
}
