// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an EC2 instance state resource. This allows managing an instance power state.
 *
 * > **NOTE on Instance State Management:** AWS does not currently have an EC2 API operation to determine an instance has finished processing user data. As a result, this resource can interfere with user data processing. For example, this resource may stop an instance while the user data script is in mid run.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ubuntu = aws.ec2.getAmi({
 *     mostRecent: true,
 *     filters: [
 *         {
 *             name: "name",
 *             values: ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"],
 *         },
 *         {
 *             name: "virtualization-type",
 *             values: ["hvm"],
 *         },
 *     ],
 *     owners: ["099720109477"],
 * });
 * const testInstance = new aws.ec2.Instance("testInstance", {
 *     ami: ubuntu.then(ubuntu => ubuntu.id),
 *     instanceType: "t3.micro",
 *     tags: {
 *         Name: "HelloWorld",
 *     },
 * });
 * const testInstanceState = new aws.ec2transitgateway.InstanceState("testInstanceState", {
 *     instanceId: testInstance.id,
 *     state: "stopped",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_ec2_instance_state` can be imported by using the `instance_id` attribute, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2transitgateway/instanceState:InstanceState test i-02cae6557dfcf2f96
 * ```
 */
export class InstanceState extends pulumi.CustomResource {
    /**
     * Get an existing InstanceState resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceStateState, opts?: pulumi.CustomResourceOptions): InstanceState {
        return new InstanceState(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2transitgateway/instanceState:InstanceState';

    /**
     * Returns true if the given object is an instance of InstanceState.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceState {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceState.__pulumiType;
    }

    /**
     * Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * State of the instance. Valid values are `stopped`, `running`.
     *
     * The following arguments are optional:
     */
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a InstanceState resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceStateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceStateArgs | InstanceStateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceStateState | undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as InstanceStateArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceState.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceState resources.
 */
export interface InstanceStateState {
    /**
     * Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
     */
    force?: pulumi.Input<boolean>;
    /**
     * ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * State of the instance. Valid values are `stopped`, `running`.
     *
     * The following arguments are optional:
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceState resource.
 */
export interface InstanceStateArgs {
    /**
     * Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
     */
    force?: pulumi.Input<boolean>;
    /**
     * ID of the instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * State of the instance. Valid values are `stopped`, `running`.
     *
     * The following arguments are optional:
     */
    state: pulumi.Input<string>;
}
