// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {ARN} from "..";

export class TransitGateway extends pulumi.CustomResource {
    /**
     * Get an existing TransitGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransitGatewayState, opts?: pulumi.CustomResourceOptions): TransitGateway {
        return new TransitGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2transitgateway/transitGateway:TransitGateway';

    /**
     * Returns true if the given object is an instance of TransitGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransitGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransitGateway.__pulumiType;
    }

    public readonly amazonSideAsn!: pulumi.Output<number | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<ARN>;
    public /*out*/ readonly associationDefaultRouteTableId!: pulumi.Output<string>;
    public readonly autoAcceptSharedAttachments!: pulumi.Output<string | undefined>;
    public readonly defaultRouteTableAssociation!: pulumi.Output<string | undefined>;
    public readonly defaultRouteTablePropagation!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dnsSupport!: pulumi.Output<string | undefined>;
    public readonly multicastSupport!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public /*out*/ readonly propagationDefaultRouteTableId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly transitGatewayCidrBlocks!: pulumi.Output<string[] | undefined>;
    public readonly vpnEcmpSupport!: pulumi.Output<string | undefined>;

    /**
     * Create a TransitGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TransitGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransitGatewayArgs | TransitGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransitGatewayState | undefined;
            resourceInputs["amazonSideAsn"] = state ? state.amazonSideAsn : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associationDefaultRouteTableId"] = state ? state.associationDefaultRouteTableId : undefined;
            resourceInputs["autoAcceptSharedAttachments"] = state ? state.autoAcceptSharedAttachments : undefined;
            resourceInputs["defaultRouteTableAssociation"] = state ? state.defaultRouteTableAssociation : undefined;
            resourceInputs["defaultRouteTablePropagation"] = state ? state.defaultRouteTablePropagation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsSupport"] = state ? state.dnsSupport : undefined;
            resourceInputs["multicastSupport"] = state ? state.multicastSupport : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["propagationDefaultRouteTableId"] = state ? state.propagationDefaultRouteTableId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["transitGatewayCidrBlocks"] = state ? state.transitGatewayCidrBlocks : undefined;
            resourceInputs["vpnEcmpSupport"] = state ? state.vpnEcmpSupport : undefined;
        } else {
            const args = argsOrState as TransitGatewayArgs | undefined;
            resourceInputs["amazonSideAsn"] = args ? args.amazonSideAsn : undefined;
            resourceInputs["autoAcceptSharedAttachments"] = args ? args.autoAcceptSharedAttachments : undefined;
            resourceInputs["defaultRouteTableAssociation"] = args ? args.defaultRouteTableAssociation : undefined;
            resourceInputs["defaultRouteTablePropagation"] = args ? args.defaultRouteTablePropagation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsSupport"] = args ? args.dnsSupport : undefined;
            resourceInputs["multicastSupport"] = args ? args.multicastSupport : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitGatewayCidrBlocks"] = args ? args.transitGatewayCidrBlocks : undefined;
            resourceInputs["vpnEcmpSupport"] = args ? args.vpnEcmpSupport : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associationDefaultRouteTableId"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["propagationDefaultRouteTableId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransitGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransitGateway resources.
 */
export interface TransitGatewayState {
    amazonSideAsn?: pulumi.Input<number>;
    arn?: pulumi.Input<ARN>;
    associationDefaultRouteTableId?: pulumi.Input<string>;
    autoAcceptSharedAttachments?: pulumi.Input<string>;
    defaultRouteTableAssociation?: pulumi.Input<string>;
    defaultRouteTablePropagation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsSupport?: pulumi.Input<string>;
    multicastSupport?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    propagationDefaultRouteTableId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitGatewayCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    vpnEcmpSupport?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransitGateway resource.
 */
export interface TransitGatewayArgs {
    amazonSideAsn?: pulumi.Input<number>;
    autoAcceptSharedAttachments?: pulumi.Input<string>;
    defaultRouteTableAssociation?: pulumi.Input<string>;
    defaultRouteTablePropagation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsSupport?: pulumi.Input<string>;
    multicastSupport?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitGatewayCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    vpnEcmpSupport?: pulumi.Input<string>;
}
