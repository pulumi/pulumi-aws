// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class MulticastDomain extends pulumi.CustomResource {
    /**
     * Get an existing MulticastDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MulticastDomainState, opts?: pulumi.CustomResourceOptions): MulticastDomain {
        return new MulticastDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2transitgateway/multicastDomain:MulticastDomain';

    /**
     * Returns true if the given object is an instance of MulticastDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MulticastDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MulticastDomain.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoAcceptSharedAssociations!: pulumi.Output<string | undefined>;
    public readonly igmpv2Support!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public readonly staticSourcesSupport!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly transitGatewayId!: pulumi.Output<string>;

    /**
     * Create a MulticastDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MulticastDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MulticastDomainArgs | MulticastDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MulticastDomainState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoAcceptSharedAssociations"] = state ? state.autoAcceptSharedAssociations : undefined;
            resourceInputs["igmpv2Support"] = state ? state.igmpv2Support : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["staticSourcesSupport"] = state ? state.staticSourcesSupport : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
        } else {
            const args = argsOrState as MulticastDomainArgs | undefined;
            if ((!args || args.transitGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayId'");
            }
            resourceInputs["autoAcceptSharedAssociations"] = args ? args.autoAcceptSharedAssociations : undefined;
            resourceInputs["igmpv2Support"] = args ? args.igmpv2Support : undefined;
            resourceInputs["staticSourcesSupport"] = args ? args.staticSourcesSupport : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MulticastDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MulticastDomain resources.
 */
export interface MulticastDomainState {
    arn?: pulumi.Input<string>;
    autoAcceptSharedAssociations?: pulumi.Input<string>;
    igmpv2Support?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    staticSourcesSupport?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MulticastDomain resource.
 */
export interface MulticastDomainArgs {
    autoAcceptSharedAssociations?: pulumi.Input<string>;
    igmpv2Support?: pulumi.Input<string>;
    staticSourcesSupport?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitGatewayId: pulumi.Input<string>;
}
