// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Associates the specified subnet and transit gateway attachment with the specified transit gateway multicast domain.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleTransitGateway = new aws.ec2transitgateway.TransitGateway("exampleTransitGateway", {multicastSupport: "enable"});
 * const exampleVpcAttachment = new aws.ec2transitgateway.VpcAttachment("exampleVpcAttachment", {
 *     subnetIds: [aws_subnet.example.id],
 *     transitGatewayId: exampleTransitGateway.id,
 *     vpcId: aws_vpc.example.id,
 * });
 * const exampleMulticastDomain = new aws.ec2transitgateway.MulticastDomain("exampleMulticastDomain", {transitGatewayId: exampleTransitGateway.id});
 * const exampleMulticastDomainAssociation = new aws.ec2transitgateway.MulticastDomainAssociation("exampleMulticastDomainAssociation", {
 *     subnetId: aws_subnet.example.id,
 *     transitGatewayAttachmentId: exampleVpcAttachment.id,
 *     transitGatewayMulticastDomainId: exampleMulticastDomain.id,
 * });
 * ```
 */
export class MulticastDomainAssociation extends pulumi.CustomResource {
    /**
     * Get an existing MulticastDomainAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MulticastDomainAssociationState, opts?: pulumi.CustomResourceOptions): MulticastDomainAssociation {
        return new MulticastDomainAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2transitgateway/multicastDomainAssociation:MulticastDomainAssociation';

    /**
     * Returns true if the given object is an instance of MulticastDomainAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MulticastDomainAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MulticastDomainAssociation.__pulumiType;
    }

    /**
     * The ID of the subnet to associate with the transit gateway multicast domain.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The ID of the transit gateway attachment.
     */
    public readonly transitGatewayAttachmentId!: pulumi.Output<string>;
    /**
     * The ID of the transit gateway multicast domain.
     */
    public readonly transitGatewayMulticastDomainId!: pulumi.Output<string>;

    /**
     * Create a MulticastDomainAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MulticastDomainAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MulticastDomainAssociationArgs | MulticastDomainAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MulticastDomainAssociationState | undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["transitGatewayAttachmentId"] = state ? state.transitGatewayAttachmentId : undefined;
            resourceInputs["transitGatewayMulticastDomainId"] = state ? state.transitGatewayMulticastDomainId : undefined;
        } else {
            const args = argsOrState as MulticastDomainAssociationArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.transitGatewayAttachmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayAttachmentId'");
            }
            if ((!args || args.transitGatewayMulticastDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayMulticastDomainId'");
            }
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["transitGatewayAttachmentId"] = args ? args.transitGatewayAttachmentId : undefined;
            resourceInputs["transitGatewayMulticastDomainId"] = args ? args.transitGatewayMulticastDomainId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MulticastDomainAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MulticastDomainAssociation resources.
 */
export interface MulticastDomainAssociationState {
    /**
     * The ID of the subnet to associate with the transit gateway multicast domain.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The ID of the transit gateway attachment.
     */
    transitGatewayAttachmentId?: pulumi.Input<string>;
    /**
     * The ID of the transit gateway multicast domain.
     */
    transitGatewayMulticastDomainId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MulticastDomainAssociation resource.
 */
export interface MulticastDomainAssociationArgs {
    /**
     * The ID of the subnet to associate with the transit gateway multicast domain.
     */
    subnetId: pulumi.Input<string>;
    /**
     * The ID of the transit gateway attachment.
     */
    transitGatewayAttachmentId: pulumi.Input<string>;
    /**
     * The ID of the transit gateway multicast domain.
     */
    transitGatewayMulticastDomainId: pulumi.Input<string>;
}
