// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConnectArgs, ConnectState } from "./connect";
export type Connect = import("./connect").Connect;
export const Connect: typeof import("./connect").Connect = null as any;
utilities.lazyLoad(exports, ["Connect"], () => require("./connect"));

export { ConnectPeerArgs, ConnectPeerState } from "./connectPeer";
export type ConnectPeer = import("./connectPeer").ConnectPeer;
export const ConnectPeer: typeof import("./connectPeer").ConnectPeer = null as any;
utilities.lazyLoad(exports, ["ConnectPeer"], () => require("./connectPeer"));

export { GetAttachmentArgs, GetAttachmentResult, GetAttachmentOutputArgs } from "./getAttachment";
export const getAttachment: typeof import("./getAttachment").getAttachment = null as any;
export const getAttachmentOutput: typeof import("./getAttachment").getAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getAttachment","getAttachmentOutput"], () => require("./getAttachment"));

export { GetAttachmentsArgs, GetAttachmentsResult, GetAttachmentsOutputArgs } from "./getAttachments";
export const getAttachments: typeof import("./getAttachments").getAttachments = null as any;
export const getAttachmentsOutput: typeof import("./getAttachments").getAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAttachments","getAttachmentsOutput"], () => require("./getAttachments"));

export { GetConnectArgs, GetConnectResult, GetConnectOutputArgs } from "./getConnect";
export const getConnect: typeof import("./getConnect").getConnect = null as any;
export const getConnectOutput: typeof import("./getConnect").getConnectOutput = null as any;
utilities.lazyLoad(exports, ["getConnect","getConnectOutput"], () => require("./getConnect"));

export { GetConnectPeerArgs, GetConnectPeerResult, GetConnectPeerOutputArgs } from "./getConnectPeer";
export const getConnectPeer: typeof import("./getConnectPeer").getConnectPeer = null as any;
export const getConnectPeerOutput: typeof import("./getConnectPeer").getConnectPeerOutput = null as any;
utilities.lazyLoad(exports, ["getConnectPeer","getConnectPeerOutput"], () => require("./getConnectPeer"));

export { GetDirectConnectGatewayAttachmentArgs, GetDirectConnectGatewayAttachmentResult, GetDirectConnectGatewayAttachmentOutputArgs } from "./getDirectConnectGatewayAttachment";
export const getDirectConnectGatewayAttachment: typeof import("./getDirectConnectGatewayAttachment").getDirectConnectGatewayAttachment = null as any;
export const getDirectConnectGatewayAttachmentOutput: typeof import("./getDirectConnectGatewayAttachment").getDirectConnectGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getDirectConnectGatewayAttachment","getDirectConnectGatewayAttachmentOutput"], () => require("./getDirectConnectGatewayAttachment"));

export { GetMulticastDomainArgs, GetMulticastDomainResult, GetMulticastDomainOutputArgs } from "./getMulticastDomain";
export const getMulticastDomain: typeof import("./getMulticastDomain").getMulticastDomain = null as any;
export const getMulticastDomainOutput: typeof import("./getMulticastDomain").getMulticastDomainOutput = null as any;
utilities.lazyLoad(exports, ["getMulticastDomain","getMulticastDomainOutput"], () => require("./getMulticastDomain"));

export { GetPeeringAttachmentArgs, GetPeeringAttachmentResult, GetPeeringAttachmentOutputArgs } from "./getPeeringAttachment";
export const getPeeringAttachment: typeof import("./getPeeringAttachment").getPeeringAttachment = null as any;
export const getPeeringAttachmentOutput: typeof import("./getPeeringAttachment").getPeeringAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringAttachment","getPeeringAttachmentOutput"], () => require("./getPeeringAttachment"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetRouteTableAssociationsArgs, GetRouteTableAssociationsResult, GetRouteTableAssociationsOutputArgs } from "./getRouteTableAssociations";
export const getRouteTableAssociations: typeof import("./getRouteTableAssociations").getRouteTableAssociations = null as any;
export const getRouteTableAssociationsOutput: typeof import("./getRouteTableAssociations").getRouteTableAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTableAssociations","getRouteTableAssociationsOutput"], () => require("./getRouteTableAssociations"));

export { GetRouteTablePropagationsArgs, GetRouteTablePropagationsResult, GetRouteTablePropagationsOutputArgs } from "./getRouteTablePropagations";
export const getRouteTablePropagations: typeof import("./getRouteTablePropagations").getRouteTablePropagations = null as any;
export const getRouteTablePropagationsOutput: typeof import("./getRouteTablePropagations").getRouteTablePropagationsOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTablePropagations","getRouteTablePropagationsOutput"], () => require("./getRouteTablePropagations"));

export { GetRouteTableRoutesArgs, GetRouteTableRoutesResult, GetRouteTableRoutesOutputArgs } from "./getRouteTableRoutes";
export const getRouteTableRoutes: typeof import("./getRouteTableRoutes").getRouteTableRoutes = null as any;
export const getRouteTableRoutesOutput: typeof import("./getRouteTableRoutes").getRouteTableRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTableRoutes","getRouteTableRoutesOutput"], () => require("./getRouteTableRoutes"));

export { GetTransitGatewayArgs, GetTransitGatewayResult, GetTransitGatewayOutputArgs } from "./getTransitGateway";
export const getTransitGateway: typeof import("./getTransitGateway").getTransitGateway = null as any;
export const getTransitGatewayOutput: typeof import("./getTransitGateway").getTransitGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGateway","getTransitGatewayOutput"], () => require("./getTransitGateway"));

export { GetVpcAttachmentArgs, GetVpcAttachmentResult, GetVpcAttachmentOutputArgs } from "./getVpcAttachment";
export const getVpcAttachment: typeof import("./getVpcAttachment").getVpcAttachment = null as any;
export const getVpcAttachmentOutput: typeof import("./getVpcAttachment").getVpcAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getVpcAttachment","getVpcAttachmentOutput"], () => require("./getVpcAttachment"));

export { GetVpcAttachmentsArgs, GetVpcAttachmentsResult, GetVpcAttachmentsOutputArgs } from "./getVpcAttachments";
export const getVpcAttachments: typeof import("./getVpcAttachments").getVpcAttachments = null as any;
export const getVpcAttachmentsOutput: typeof import("./getVpcAttachments").getVpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcAttachments","getVpcAttachmentsOutput"], () => require("./getVpcAttachments"));

export { GetVpnAttachmentArgs, GetVpnAttachmentResult, GetVpnAttachmentOutputArgs } from "./getVpnAttachment";
export const getVpnAttachment: typeof import("./getVpnAttachment").getVpnAttachment = null as any;
export const getVpnAttachmentOutput: typeof import("./getVpnAttachment").getVpnAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getVpnAttachment","getVpnAttachmentOutput"], () => require("./getVpnAttachment"));

export { InstanceConnectEndpointArgs, InstanceConnectEndpointState } from "./instanceConnectEndpoint";
export type InstanceConnectEndpoint = import("./instanceConnectEndpoint").InstanceConnectEndpoint;
export const InstanceConnectEndpoint: typeof import("./instanceConnectEndpoint").InstanceConnectEndpoint = null as any;
utilities.lazyLoad(exports, ["InstanceConnectEndpoint"], () => require("./instanceConnectEndpoint"));

export { InstanceStateArgs, InstanceStateState } from "./instanceState";
export type InstanceState = import("./instanceState").InstanceState;
export const InstanceState: typeof import("./instanceState").InstanceState = null as any;
utilities.lazyLoad(exports, ["InstanceState"], () => require("./instanceState"));

export { MulticastDomainArgs, MulticastDomainState } from "./multicastDomain";
export type MulticastDomain = import("./multicastDomain").MulticastDomain;
export const MulticastDomain: typeof import("./multicastDomain").MulticastDomain = null as any;
utilities.lazyLoad(exports, ["MulticastDomain"], () => require("./multicastDomain"));

export { MulticastDomainAssociationArgs, MulticastDomainAssociationState } from "./multicastDomainAssociation";
export type MulticastDomainAssociation = import("./multicastDomainAssociation").MulticastDomainAssociation;
export const MulticastDomainAssociation: typeof import("./multicastDomainAssociation").MulticastDomainAssociation = null as any;
utilities.lazyLoad(exports, ["MulticastDomainAssociation"], () => require("./multicastDomainAssociation"));

export { MulticastGroupMemberArgs, MulticastGroupMemberState } from "./multicastGroupMember";
export type MulticastGroupMember = import("./multicastGroupMember").MulticastGroupMember;
export const MulticastGroupMember: typeof import("./multicastGroupMember").MulticastGroupMember = null as any;
utilities.lazyLoad(exports, ["MulticastGroupMember"], () => require("./multicastGroupMember"));

export { MulticastGroupSourceArgs, MulticastGroupSourceState } from "./multicastGroupSource";
export type MulticastGroupSource = import("./multicastGroupSource").MulticastGroupSource;
export const MulticastGroupSource: typeof import("./multicastGroupSource").MulticastGroupSource = null as any;
utilities.lazyLoad(exports, ["MulticastGroupSource"], () => require("./multicastGroupSource"));

export { PeeringAttachmentArgs, PeeringAttachmentState } from "./peeringAttachment";
export type PeeringAttachment = import("./peeringAttachment").PeeringAttachment;
export const PeeringAttachment: typeof import("./peeringAttachment").PeeringAttachment = null as any;
utilities.lazyLoad(exports, ["PeeringAttachment"], () => require("./peeringAttachment"));

export { PeeringAttachmentAccepterArgs, PeeringAttachmentAccepterState } from "./peeringAttachmentAccepter";
export type PeeringAttachmentAccepter = import("./peeringAttachmentAccepter").PeeringAttachmentAccepter;
export const PeeringAttachmentAccepter: typeof import("./peeringAttachmentAccepter").PeeringAttachmentAccepter = null as any;
utilities.lazyLoad(exports, ["PeeringAttachmentAccepter"], () => require("./peeringAttachmentAccepter"));

export { PolicyTableArgs, PolicyTableState } from "./policyTable";
export type PolicyTable = import("./policyTable").PolicyTable;
export const PolicyTable: typeof import("./policyTable").PolicyTable = null as any;
utilities.lazyLoad(exports, ["PolicyTable"], () => require("./policyTable"));

export { PolicyTableAssociationArgs, PolicyTableAssociationState } from "./policyTableAssociation";
export type PolicyTableAssociation = import("./policyTableAssociation").PolicyTableAssociation;
export const PolicyTableAssociation: typeof import("./policyTableAssociation").PolicyTableAssociation = null as any;
utilities.lazyLoad(exports, ["PolicyTableAssociation"], () => require("./policyTableAssociation"));

export { PrefixListReferenceArgs, PrefixListReferenceState } from "./prefixListReference";
export type PrefixListReference = import("./prefixListReference").PrefixListReference;
export const PrefixListReference: typeof import("./prefixListReference").PrefixListReference = null as any;
utilities.lazyLoad(exports, ["PrefixListReference"], () => require("./prefixListReference"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableAssociationArgs, RouteTableAssociationState } from "./routeTableAssociation";
export type RouteTableAssociation = import("./routeTableAssociation").RouteTableAssociation;
export const RouteTableAssociation: typeof import("./routeTableAssociation").RouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["RouteTableAssociation"], () => require("./routeTableAssociation"));

export { RouteTablePropagationArgs, RouteTablePropagationState } from "./routeTablePropagation";
export type RouteTablePropagation = import("./routeTablePropagation").RouteTablePropagation;
export const RouteTablePropagation: typeof import("./routeTablePropagation").RouteTablePropagation = null as any;
utilities.lazyLoad(exports, ["RouteTablePropagation"], () => require("./routeTablePropagation"));

export { TransitGatewayArgs, TransitGatewayState } from "./transitGateway";
export type TransitGateway = import("./transitGateway").TransitGateway;
export const TransitGateway: typeof import("./transitGateway").TransitGateway = null as any;
utilities.lazyLoad(exports, ["TransitGateway"], () => require("./transitGateway"));

export { VpcAttachmentArgs, VpcAttachmentState } from "./vpcAttachment";
export type VpcAttachment = import("./vpcAttachment").VpcAttachment;
export const VpcAttachment: typeof import("./vpcAttachment").VpcAttachment = null as any;
utilities.lazyLoad(exports, ["VpcAttachment"], () => require("./vpcAttachment"));

export { VpcAttachmentAccepterArgs, VpcAttachmentAccepterState } from "./vpcAttachmentAccepter";
export type VpcAttachmentAccepter = import("./vpcAttachmentAccepter").VpcAttachmentAccepter;
export const VpcAttachmentAccepter: typeof import("./vpcAttachmentAccepter").VpcAttachmentAccepter = null as any;
utilities.lazyLoad(exports, ["VpcAttachmentAccepter"], () => require("./vpcAttachmentAccepter"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:ec2transitgateway/connect:Connect":
                return new Connect(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/connectPeer:ConnectPeer":
                return new ConnectPeer(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/instanceConnectEndpoint:InstanceConnectEndpoint":
                return new InstanceConnectEndpoint(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/instanceState:InstanceState":
                return new InstanceState(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/multicastDomain:MulticastDomain":
                return new MulticastDomain(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/multicastDomainAssociation:MulticastDomainAssociation":
                return new MulticastDomainAssociation(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/multicastGroupMember:MulticastGroupMember":
                return new MulticastGroupMember(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/multicastGroupSource:MulticastGroupSource":
                return new MulticastGroupSource(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/peeringAttachment:PeeringAttachment":
                return new PeeringAttachment(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter":
                return new PeeringAttachmentAccepter(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/policyTable:PolicyTable":
                return new PolicyTable(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/policyTableAssociation:PolicyTableAssociation":
                return new PolicyTableAssociation(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/prefixListReference:PrefixListReference":
                return new PrefixListReference(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/routeTableAssociation:RouteTableAssociation":
                return new RouteTableAssociation(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/routeTablePropagation:RouteTablePropagation":
                return new RouteTablePropagation(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/transitGateway:TransitGateway":
                return new TransitGateway(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/vpcAttachment:VpcAttachment":
                return new VpcAttachment(name, <any>undefined, { urn })
            case "aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter":
                return new VpcAttachmentAccepter(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/connect", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/connectPeer", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/instanceConnectEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/instanceState", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/multicastDomain", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/multicastDomainAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/multicastGroupMember", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/multicastGroupSource", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/peeringAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/peeringAttachmentAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/policyTable", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/policyTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/prefixListReference", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/route", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/routeTable", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/routeTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/routeTablePropagation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/transitGateway", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/vpcAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "ec2transitgateway/vpcAttachmentAccepter", _module)
