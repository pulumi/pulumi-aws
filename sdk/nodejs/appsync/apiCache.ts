// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an AppSync API Cache.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "API_KEY",
 *     name: "example",
 * });
 * const exampleApiCache = new aws.appsync.ApiCache("example", {
 *     apiId: example.id,
 *     apiCachingBehavior: "FULL_REQUEST_CACHING",
 *     type: "LARGE",
 *     ttl: 900,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_appsync_api_cache` using the AppSync API ID. For example:
 *
 * ```sh
 * $ pulumi import aws:appsync/apiCache:ApiCache example xxxxx
 * ```
 */
export class ApiCache extends pulumi.CustomResource {
    /**
     * Get an existing ApiCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiCacheState, opts?: pulumi.CustomResourceOptions): ApiCache {
        return new ApiCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appsync/apiCache:ApiCache';

    /**
     * Returns true if the given object is an instance of ApiCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiCache.__pulumiType;
    }

    /**
     * Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
     */
    declare public readonly apiCachingBehavior: pulumi.Output<string>;
    /**
     * GraphQL API ID.
     */
    declare public readonly apiId: pulumi.Output<string>;
    /**
     * At-rest encryption flag for cache. You cannot update this setting after creation.
     */
    declare public readonly atRestEncryptionEnabled: pulumi.Output<boolean>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Transit encryption flag when connecting to cache. You cannot update this setting after creation.
     */
    declare public readonly transitEncryptionEnabled: pulumi.Output<boolean>;
    /**
     * TTL in seconds for cache entries.
     */
    declare public readonly ttl: pulumi.Output<number>;
    /**
     * Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a ApiCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiCacheArgs | ApiCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiCacheState | undefined;
            resourceInputs["apiCachingBehavior"] = state?.apiCachingBehavior;
            resourceInputs["apiId"] = state?.apiId;
            resourceInputs["atRestEncryptionEnabled"] = state?.atRestEncryptionEnabled;
            resourceInputs["region"] = state?.region;
            resourceInputs["transitEncryptionEnabled"] = state?.transitEncryptionEnabled;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as ApiCacheArgs | undefined;
            if (args?.apiCachingBehavior === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiCachingBehavior'");
            }
            if (args?.apiId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if (args?.ttl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apiCachingBehavior"] = args?.apiCachingBehavior;
            resourceInputs["apiId"] = args?.apiId;
            resourceInputs["atRestEncryptionEnabled"] = args?.atRestEncryptionEnabled;
            resourceInputs["region"] = args?.region;
            resourceInputs["transitEncryptionEnabled"] = args?.transitEncryptionEnabled;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiCache.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiCache resources.
 */
export interface ApiCacheState {
    /**
     * Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
     */
    apiCachingBehavior?: pulumi.Input<string>;
    /**
     * GraphQL API ID.
     */
    apiId?: pulumi.Input<string>;
    /**
     * At-rest encryption flag for cache. You cannot update this setting after creation.
     */
    atRestEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Transit encryption flag when connecting to cache. You cannot update this setting after creation.
     */
    transitEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * TTL in seconds for cache entries.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiCache resource.
 */
export interface ApiCacheArgs {
    /**
     * Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
     */
    apiCachingBehavior: pulumi.Input<string>;
    /**
     * GraphQL API ID.
     */
    apiId: pulumi.Input<string>;
    /**
     * At-rest encryption flag for cache. You cannot update this setting after creation.
     */
    atRestEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Transit encryption flag when connecting to cache. You cannot update this setting after creation.
     */
    transitEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * TTL in seconds for cache entries.
     */
    ttl: pulumi.Input<number>;
    /**
     * Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
     */
    type: pulumi.Input<string>;
}
