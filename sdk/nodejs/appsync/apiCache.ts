// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an AppSync API Cache.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleGraphQLApi = new aws.appsync.GraphQLApi("exampleGraphQLApi", {authenticationType: "API_KEY"});
 * const exampleApiCache = new aws.appsync.ApiCache("exampleApiCache", {
 *     apiId: exampleGraphQLApi.id,
 *     expires: "2018-05-03T04:00:00Z",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_appsync_api_cache` can be imported using the AppSync API ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:appsync/apiCache:ApiCache example xxxxx
 * ```
 */
export class ApiCache extends pulumi.CustomResource {
    /**
     * Get an existing ApiCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiCacheState, opts?: pulumi.CustomResourceOptions): ApiCache {
        return new ApiCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appsync/apiCache:ApiCache';

    /**
     * Returns true if the given object is an instance of ApiCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiCache.__pulumiType;
    }

    /**
     * Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
     */
    public readonly apiCachingBehavior!: pulumi.Output<string>;
    /**
     * The GraphQL API ID.
     */
    public readonly apiId!: pulumi.Output<string>;
    /**
     * At-rest encryption flag for cache. You cannot update this setting after creation.
     */
    public readonly atRestEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Transit encryption flag when connecting to cache. You cannot update this setting after creation.
     */
    public readonly transitEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * TTL in seconds for cache entries.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * The cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ApiCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiCacheArgs | ApiCacheState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiCacheState | undefined;
            inputs["apiCachingBehavior"] = state ? state.apiCachingBehavior : undefined;
            inputs["apiId"] = state ? state.apiId : undefined;
            inputs["atRestEncryptionEnabled"] = state ? state.atRestEncryptionEnabled : undefined;
            inputs["transitEncryptionEnabled"] = state ? state.transitEncryptionEnabled : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ApiCacheArgs | undefined;
            if ((!args || args.apiCachingBehavior === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiCachingBehavior'");
            }
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["apiCachingBehavior"] = args ? args.apiCachingBehavior : undefined;
            inputs["apiId"] = args ? args.apiId : undefined;
            inputs["atRestEncryptionEnabled"] = args ? args.atRestEncryptionEnabled : undefined;
            inputs["transitEncryptionEnabled"] = args ? args.transitEncryptionEnabled : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ApiCache.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiCache resources.
 */
export interface ApiCacheState {
    /**
     * Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
     */
    apiCachingBehavior?: pulumi.Input<string>;
    /**
     * The GraphQL API ID.
     */
    apiId?: pulumi.Input<string>;
    /**
     * At-rest encryption flag for cache. You cannot update this setting after creation.
     */
    atRestEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Transit encryption flag when connecting to cache. You cannot update this setting after creation.
     */
    transitEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * TTL in seconds for cache entries.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiCache resource.
 */
export interface ApiCacheArgs {
    /**
     * Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
     */
    apiCachingBehavior: pulumi.Input<string>;
    /**
     * The GraphQL API ID.
     */
    apiId: pulumi.Input<string>;
    /**
     * At-rest encryption flag for cache. You cannot update this setting after creation.
     */
    atRestEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Transit encryption flag when connecting to cache. You cannot update this setting after creation.
     */
    transitEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * TTL in seconds for cache entries.
     */
    ttl: pulumi.Input<number>;
    /**
     * The cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
     */
    type: pulumi.Input<string>;
}
