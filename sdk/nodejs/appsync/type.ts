// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an AppSync Type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleGraphQLApi = new aws.appsync.GraphQLApi("exampleGraphQLApi", {authenticationType: "API_KEY"});
 * const exampleType = new aws.appsync.Type("exampleType", {
 *     apiId: exampleGraphQLApi.id,
 *     format: "SDL",
 *     definition: `type Mutation
 *
 * {
 * putPost(id: ID!,title: String! ): Post
 *
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Appsync Types can be imported using the `id` e.g.,
 *
 * ```sh
 *  $ pulumi import aws:appsync/type:Type example api-id:format:name
 * ```
 */
export class Type extends pulumi.CustomResource {
    /**
     * Get an existing Type resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TypeState, opts?: pulumi.CustomResourceOptions): Type {
        return new Type(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appsync/type:Type';

    /**
     * Returns true if the given object is an instance of Type.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Type {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Type.__pulumiType;
    }

    /**
     * GraphQL API ID.
     */
    public readonly apiId!: pulumi.Output<string>;
    /**
     * The ARN of the type.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The type definition.
     */
    public readonly definition!: pulumi.Output<string>;
    /**
     * The type description.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The type format: `SDL` or `JSON`.
     */
    public readonly format!: pulumi.Output<string>;
    /**
     * The type name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;

    /**
     * Create a Type resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TypeArgs | TypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TypeState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as TypeArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.definition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Type.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Type resources.
 */
export interface TypeState {
    /**
     * GraphQL API ID.
     */
    apiId?: pulumi.Input<string>;
    /**
     * The ARN of the type.
     */
    arn?: pulumi.Input<string>;
    /**
     * The type definition.
     */
    definition?: pulumi.Input<string>;
    /**
     * The type description.
     */
    description?: pulumi.Input<string>;
    /**
     * The type format: `SDL` or `JSON`.
     */
    format?: pulumi.Input<string>;
    /**
     * The type name.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Type resource.
 */
export interface TypeArgs {
    /**
     * GraphQL API ID.
     */
    apiId: pulumi.Input<string>;
    /**
     * The type definition.
     */
    definition: pulumi.Input<string>;
    /**
     * The type format: `SDL` or `JSON`.
     */
    format: pulumi.Input<string>;
}
