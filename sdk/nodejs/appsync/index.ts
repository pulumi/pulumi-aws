// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiCacheArgs, ApiCacheState } from "./apiCache";
export type ApiCache = import("./apiCache").ApiCache;
export const ApiCache: typeof import("./apiCache").ApiCache = null as any;
utilities.lazyLoad(exports, ["ApiCache"], () => require("./apiCache"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { DataSourceArgs, DataSourceState } from "./dataSource";
export type DataSource = import("./dataSource").DataSource;
export const DataSource: typeof import("./dataSource").DataSource = null as any;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));

export { DomainNameArgs, DomainNameState } from "./domainName";
export type DomainName = import("./domainName").DomainName;
export const DomainName: typeof import("./domainName").DomainName = null as any;
utilities.lazyLoad(exports, ["DomainName"], () => require("./domainName"));

export { DomainNameApiAssociationArgs, DomainNameApiAssociationState } from "./domainNameApiAssociation";
export type DomainNameApiAssociation = import("./domainNameApiAssociation").DomainNameApiAssociation;
export const DomainNameApiAssociation: typeof import("./domainNameApiAssociation").DomainNameApiAssociation = null as any;
utilities.lazyLoad(exports, ["DomainNameApiAssociation"], () => require("./domainNameApiAssociation"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { GraphQLApiArgs, GraphQLApiState } from "./graphQLApi";
export type GraphQLApi = import("./graphQLApi").GraphQLApi;
export const GraphQLApi: typeof import("./graphQLApi").GraphQLApi = null as any;
utilities.lazyLoad(exports, ["GraphQLApi"], () => require("./graphQLApi"));

export { ResolverArgs, ResolverState } from "./resolver";
export type Resolver = import("./resolver").Resolver;
export const Resolver: typeof import("./resolver").Resolver = null as any;
utilities.lazyLoad(exports, ["Resolver"], () => require("./resolver"));

export { TypeArgs, TypeState } from "./type";
export type Type = import("./type").Type;
export const Type: typeof import("./type").Type = null as any;
utilities.lazyLoad(exports, ["Type"], () => require("./type"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:appsync/apiCache:ApiCache":
                return new ApiCache(name, <any>undefined, { urn })
            case "aws:appsync/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "aws:appsync/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "aws:appsync/domainName:DomainName":
                return new DomainName(name, <any>undefined, { urn })
            case "aws:appsync/domainNameApiAssociation:DomainNameApiAssociation":
                return new DomainNameApiAssociation(name, <any>undefined, { urn })
            case "aws:appsync/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "aws:appsync/graphQLApi:GraphQLApi":
                return new GraphQLApi(name, <any>undefined, { urn })
            case "aws:appsync/resolver:Resolver":
                return new Resolver(name, <any>undefined, { urn })
            case "aws:appsync/type:Type":
                return new Type(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "appsync/apiCache", _module)
pulumi.runtime.registerResourceModule("aws", "appsync/apiKey", _module)
pulumi.runtime.registerResourceModule("aws", "appsync/dataSource", _module)
pulumi.runtime.registerResourceModule("aws", "appsync/domainName", _module)
pulumi.runtime.registerResourceModule("aws", "appsync/domainNameApiAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "appsync/function", _module)
pulumi.runtime.registerResourceModule("aws", "appsync/graphQLApi", _module)
pulumi.runtime.registerResourceModule("aws", "appsync/resolver", _module)
pulumi.runtime.registerResourceModule("aws", "appsync/type", _module)
