// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Resolver extends pulumi.CustomResource {
    /**
     * Get an existing Resolver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResolverState, opts?: pulumi.CustomResourceOptions): Resolver {
        return new Resolver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appsync/resolver:Resolver';

    /**
     * Returns true if the given object is an instance of Resolver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resolver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resolver.__pulumiType;
    }

    public readonly apiId!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cachingConfig!: pulumi.Output<outputs.appsync.ResolverCachingConfig | undefined>;
    public readonly code!: pulumi.Output<string | undefined>;
    public readonly dataSource!: pulumi.Output<string | undefined>;
    public readonly field!: pulumi.Output<string>;
    public readonly kind!: pulumi.Output<string | undefined>;
    public readonly maxBatchSize!: pulumi.Output<number | undefined>;
    public readonly pipelineConfig!: pulumi.Output<outputs.appsync.ResolverPipelineConfig | undefined>;
    public readonly requestTemplate!: pulumi.Output<string | undefined>;
    public readonly responseTemplate!: pulumi.Output<string | undefined>;
    public readonly runtime!: pulumi.Output<outputs.appsync.ResolverRuntime | undefined>;
    public readonly syncConfig!: pulumi.Output<outputs.appsync.ResolverSyncConfig | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Resolver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResolverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResolverArgs | ResolverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResolverState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cachingConfig"] = state ? state.cachingConfig : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["dataSource"] = state ? state.dataSource : undefined;
            resourceInputs["field"] = state ? state.field : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["maxBatchSize"] = state ? state.maxBatchSize : undefined;
            resourceInputs["pipelineConfig"] = state ? state.pipelineConfig : undefined;
            resourceInputs["requestTemplate"] = state ? state.requestTemplate : undefined;
            resourceInputs["responseTemplate"] = state ? state.responseTemplate : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["syncConfig"] = state ? state.syncConfig : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ResolverArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.field === undefined) && !opts.urn) {
                throw new Error("Missing required property 'field'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["cachingConfig"] = args ? args.cachingConfig : undefined;
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["dataSource"] = args ? args.dataSource : undefined;
            resourceInputs["field"] = args ? args.field : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["maxBatchSize"] = args ? args.maxBatchSize : undefined;
            resourceInputs["pipelineConfig"] = args ? args.pipelineConfig : undefined;
            resourceInputs["requestTemplate"] = args ? args.requestTemplate : undefined;
            resourceInputs["responseTemplate"] = args ? args.responseTemplate : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["syncConfig"] = args ? args.syncConfig : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resolver.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Resolver resources.
 */
export interface ResolverState {
    apiId?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    cachingConfig?: pulumi.Input<inputs.appsync.ResolverCachingConfig>;
    code?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    field?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    maxBatchSize?: pulumi.Input<number>;
    pipelineConfig?: pulumi.Input<inputs.appsync.ResolverPipelineConfig>;
    requestTemplate?: pulumi.Input<string>;
    responseTemplate?: pulumi.Input<string>;
    runtime?: pulumi.Input<inputs.appsync.ResolverRuntime>;
    syncConfig?: pulumi.Input<inputs.appsync.ResolverSyncConfig>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Resolver resource.
 */
export interface ResolverArgs {
    apiId: pulumi.Input<string>;
    cachingConfig?: pulumi.Input<inputs.appsync.ResolverCachingConfig>;
    code?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    field: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    maxBatchSize?: pulumi.Input<number>;
    pipelineConfig?: pulumi.Input<inputs.appsync.ResolverPipelineConfig>;
    requestTemplate?: pulumi.Input<string>;
    responseTemplate?: pulumi.Input<string>;
    runtime?: pulumi.Input<inputs.appsync.ResolverRuntime>;
    syncConfig?: pulumi.Input<inputs.appsync.ResolverSyncConfig>;
    type: pulumi.Input<string>;
}
