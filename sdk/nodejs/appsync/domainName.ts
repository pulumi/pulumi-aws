// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an AppSync Domain Name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.DomainName("example", {
 *     domainName: "api.example.com",
 *     certificateArn: aws_acm_certificate.example.arn,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_appsync_domain_name` can be imported using the AppSync domain name, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:appsync/domainName:DomainName example example.com
 * ```
 */
export class DomainName extends pulumi.CustomResource {
    /**
     * Get an existing DomainName resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainNameState, opts?: pulumi.CustomResourceOptions): DomainName {
        return new DomainName(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appsync/domainName:DomainName';

    /**
     * Returns true if the given object is an instance of DomainName.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainName {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainName.__pulumiType;
    }

    /**
     * Domain name that AppSync provides.
     */
    public /*out*/ readonly appsyncDomainName!: pulumi.Output<string>;
    /**
     * ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
     */
    public readonly certificateArn!: pulumi.Output<string>;
    /**
     * A description of the Domain Name.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Domain name.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * ID of your Amazon Route 53 hosted zone.
     */
    public /*out*/ readonly hostedZoneId!: pulumi.Output<string>;

    /**
     * Create a DomainName resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainNameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainNameArgs | DomainNameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainNameState | undefined;
            resourceInputs["appsyncDomainName"] = state ? state.appsyncDomainName : undefined;
            resourceInputs["certificateArn"] = state ? state.certificateArn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
        } else {
            const args = argsOrState as DomainNameArgs | undefined;
            if ((!args || args.certificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateArn'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["certificateArn"] = args ? args.certificateArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["appsyncDomainName"] = undefined /*out*/;
            resourceInputs["hostedZoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainName.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainName resources.
 */
export interface DomainNameState {
    /**
     * Domain name that AppSync provides.
     */
    appsyncDomainName?: pulumi.Input<string>;
    /**
     * ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
     */
    certificateArn?: pulumi.Input<string>;
    /**
     * A description of the Domain Name.
     */
    description?: pulumi.Input<string>;
    /**
     * Domain name.
     */
    domainName?: pulumi.Input<string>;
    /**
     * ID of your Amazon Route 53 hosted zone.
     */
    hostedZoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DomainName resource.
 */
export interface DomainNameArgs {
    /**
     * ARN of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
     */
    certificateArn: pulumi.Input<string>;
    /**
     * A description of the Domain Name.
     */
    description?: pulumi.Input<string>;
    /**
     * Domain name.
     */
    domainName: pulumi.Input<string>;
}
