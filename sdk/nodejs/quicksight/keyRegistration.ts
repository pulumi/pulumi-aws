// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Registers customer managed keys in a Amazon QuickSight account.
 *
 * > Deletion of this resource clears all CMK registrations from a QuickSight account. QuickSight then uses AWS owned keys to encrypt your resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.KeyRegistration("example", {keyRegistrations: [
 *     {
 *         keyArn: example1.arn,
 *     },
 *     {
 *         keyArn: example2.arn,
 *         defaultKey: true,
 *     },
 * ]});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import QuickSight key registration using the AWS account ID. For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/keyRegistration:KeyRegistration example "012345678901"
 * ```
 */
export class KeyRegistration extends pulumi.CustomResource {
    /**
     * Get an existing KeyRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyRegistrationState, opts?: pulumi.CustomResourceOptions): KeyRegistration {
        return new KeyRegistration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:quicksight/keyRegistration:KeyRegistration';

    /**
     * Returns true if the given object is an instance of KeyRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyRegistration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyRegistration.__pulumiType;
    }

    declare public readonly awsAccountId: pulumi.Output<string>;
    /**
     * Registered keys. See key_registration.
     */
    declare public readonly keyRegistrations: pulumi.Output<outputs.quicksight.KeyRegistrationKeyRegistration[] | undefined>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a KeyRegistration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeyRegistrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyRegistrationArgs | KeyRegistrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyRegistrationState | undefined;
            resourceInputs["awsAccountId"] = state?.awsAccountId;
            resourceInputs["keyRegistrations"] = state?.keyRegistrations;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as KeyRegistrationArgs | undefined;
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["keyRegistrations"] = args?.keyRegistrations;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyRegistration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyRegistration resources.
 */
export interface KeyRegistrationState {
    awsAccountId?: pulumi.Input<string>;
    /**
     * Registered keys. See key_registration.
     */
    keyRegistrations?: pulumi.Input<pulumi.Input<inputs.quicksight.KeyRegistrationKeyRegistration>[]>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyRegistration resource.
 */
export interface KeyRegistrationArgs {
    awsAccountId?: pulumi.Input<string>;
    /**
     * Registered keys. See key_registration.
     */
    keyRegistrations?: pulumi.Input<pulumi.Input<inputs.quicksight.KeyRegistrationKeyRegistration>[]>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
}
