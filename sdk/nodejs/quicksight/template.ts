// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing a QuickSight Template.
 *
 * ## Example Usage
 *
 * ### From Source Template
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.Template("example", {
 *     templateId: "example-id",
 *     name: "example-name",
 *     versionDescription: "version",
 *     sourceEntity: {
 *         sourceTemplate: {
 *             arn: source.arn,
 *         },
 *     },
 * });
 * ```
 *
 * ### With Definition
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.Template("example", {
 *     templateId: "example-id",
 *     name: "example-name",
 *     versionDescription: "version",
 *     definition: {
 *         dataSetConfigurations: [{
 *             dataSetSchema: {
 *                 columnSchemaLists: [
 *                     {
 *                         name: "Column1",
 *                         dataType: "STRING",
 *                     },
 *                     {
 *                         name: "Column2",
 *                         dataType: "INTEGER",
 *                     },
 *                 ],
 *             },
 *             placeholder: "1",
 *         }],
 *         sheets: [{
 *             title: "Test",
 *             sheetId: "Test1",
 *             visuals: [{
 *                 barChartVisual: {
 *                     visualId: "BarChart",
 *                     chartConfiguration: {
 *                         fieldWells: {
 *                             barChartAggregatedFieldWells: {
 *                                 categories: [{
 *                                     categoricalDimensionField: {
 *                                         fieldId: "1",
 *                                         column: {
 *                                             columnName: "Column1",
 *                                             dataSetIdentifier: "1",
 *                                         },
 *                                     },
 *                                 }],
 *                                 values: [{
 *                                     numericalMeasureField: {
 *                                         fieldId: "2",
 *                                         column: {
 *                                             columnName: "Column2",
 *                                             dataSetIdentifier: "1",
 *                                         },
 *                                         aggregationFunction: {
 *                                             simpleNumericalAggregation: "SUM",
 *                                         },
 *                                     },
 *                                 }],
 *                             },
 *                         },
 *                     },
 *                 },
 *             }],
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a QuickSight Template using the AWS account ID and template ID separated by a comma (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/template:Template example 123456789012,example-id
 * ```
 */
export class Template extends pulumi.CustomResource {
    /**
     * Get an existing Template resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateState, opts?: pulumi.CustomResourceOptions): Template {
        return new Template(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:quicksight/template:Template';

    /**
     * Returns true if the given object is an instance of Template.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Template {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Template.__pulumiType;
    }

    /**
     * ARN of the template.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    declare public readonly awsAccountId: pulumi.Output<string>;
    /**
     * The time that the template was created.
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * The time that the template was last updated.
     */
    declare public /*out*/ readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * Display name for the template.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A set of resource permissions on the template. Maximum of 64 items. See permissions.
     */
    declare public readonly permissions: pulumi.Output<outputs.quicksight.TemplatePermission[] | undefined>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The entity that you are using as a source when you create the template (analysis or template). Only one of `definition` or `sourceEntity` should be configured. See source_entity.
     */
    declare public readonly sourceEntity: pulumi.Output<outputs.quicksight.TemplateSourceEntity | undefined>;
    /**
     * Amazon Resource Name (ARN) of an analysis or template that was used to create this template.
     */
    declare public /*out*/ readonly sourceEntityArn: pulumi.Output<string>;
    /**
     * The template creation status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    /**
     * Identifier for the template.
     */
    declare public readonly templateId: pulumi.Output<string>;
    /**
     * A description of the current template version being created/updated.
     *
     * The following arguments are optional:
     */
    declare public readonly versionDescription: pulumi.Output<string>;
    /**
     * The version number of the template version.
     */
    declare public /*out*/ readonly versionNumber: pulumi.Output<number>;

    /**
     * Create a Template resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateArgs | TemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["awsAccountId"] = state?.awsAccountId;
            resourceInputs["createdTime"] = state?.createdTime;
            resourceInputs["lastUpdatedTime"] = state?.lastUpdatedTime;
            resourceInputs["name"] = state?.name;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["region"] = state?.region;
            resourceInputs["sourceEntity"] = state?.sourceEntity;
            resourceInputs["sourceEntityArn"] = state?.sourceEntityArn;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["templateId"] = state?.templateId;
            resourceInputs["versionDescription"] = state?.versionDescription;
            resourceInputs["versionNumber"] = state?.versionNumber;
        } else {
            const args = argsOrState as TemplateArgs | undefined;
            if (args?.templateId === undefined && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            if (args?.versionDescription === undefined && !opts.urn) {
                throw new Error("Missing required property 'versionDescription'");
            }
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["name"] = args?.name;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["region"] = args?.region;
            resourceInputs["sourceEntity"] = args?.sourceEntity;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateId"] = args?.templateId;
            resourceInputs["versionDescription"] = args?.versionDescription;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["sourceEntityArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["versionNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Template.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Template resources.
 */
export interface TemplateState {
    /**
     * ARN of the template.
     */
    arn?: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    /**
     * The time that the template was created.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The time that the template was last updated.
     */
    lastUpdatedTime?: pulumi.Input<string>;
    /**
     * Display name for the template.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of resource permissions on the template. Maximum of 64 items. See permissions.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.TemplatePermission>[]>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The entity that you are using as a source when you create the template (analysis or template). Only one of `definition` or `sourceEntity` should be configured. See source_entity.
     */
    sourceEntity?: pulumi.Input<inputs.quicksight.TemplateSourceEntity>;
    /**
     * Amazon Resource Name (ARN) of an analysis or template that was used to create this template.
     */
    sourceEntityArn?: pulumi.Input<string>;
    /**
     * The template creation status.
     */
    status?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Identifier for the template.
     */
    templateId?: pulumi.Input<string>;
    /**
     * A description of the current template version being created/updated.
     *
     * The following arguments are optional:
     */
    versionDescription?: pulumi.Input<string>;
    /**
     * The version number of the template version.
     */
    versionNumber?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Template resource.
 */
export interface TemplateArgs {
    awsAccountId?: pulumi.Input<string>;
    /**
     * Display name for the template.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of resource permissions on the template. Maximum of 64 items. See permissions.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.TemplatePermission>[]>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The entity that you are using as a source when you create the template (analysis or template). Only one of `definition` or `sourceEntity` should be configured. See source_entity.
     */
    sourceEntity?: pulumi.Input<inputs.quicksight.TemplateSourceEntity>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Identifier for the template.
     */
    templateId: pulumi.Input<string>;
    /**
     * A description of the current template version being created/updated.
     *
     * The following arguments are optional:
     */
    versionDescription: pulumi.Input<string>;
}
