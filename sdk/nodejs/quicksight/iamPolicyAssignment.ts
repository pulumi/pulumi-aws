// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS QuickSight IAM Policy Assignment.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.IamPolicyAssignment("example", {
 *     assignmentName: "example",
 *     assignmentStatus: "ENABLED",
 *     policyArn: aws_iam_policy.example.arn,
 *     identities: {
 *         users: [aws_quicksight_user.example.user_name],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_quicksight_iam_policy_assignment.example
 *
 *  id = "123456789012,default,example" } Using `pulumi import`, import QuickSight IAM Policy Assignment using the AWS account ID, namespace, and assignment name separated by commas (`,`). For exampleconsole % pulumi import aws_quicksight_iam_policy_assignment.example 123456789012,default,example
 */
export class IamPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing IamPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamPolicyAssignmentState, opts?: pulumi.CustomResourceOptions): IamPolicyAssignment {
        return new IamPolicyAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:quicksight/iamPolicyAssignment:IamPolicyAssignment';

    /**
     * Returns true if the given object is an instance of IamPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamPolicyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamPolicyAssignment.__pulumiType;
    }

    /**
     * Assignment ID.
     */
    public /*out*/ readonly assignmentId!: pulumi.Output<string>;
    /**
     * Name of the assignment.
     */
    public readonly assignmentName!: pulumi.Output<string>;
    /**
     * Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
     *
     * The following arguments are optional:
     */
    public readonly assignmentStatus!: pulumi.Output<string>;
    /**
     * AWS account ID.
     */
    public readonly awsAccountId!: pulumi.Output<string>;
    /**
     * Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
     */
    public readonly identities!: pulumi.Output<outputs.quicksight.IamPolicyAssignmentIdentities | undefined>;
    /**
     * Namespace that contains the assignment. Defaults to `default`.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
     */
    public readonly policyArn!: pulumi.Output<string | undefined>;

    /**
     * Create a IamPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamPolicyAssignmentArgs | IamPolicyAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamPolicyAssignmentState | undefined;
            resourceInputs["assignmentId"] = state ? state.assignmentId : undefined;
            resourceInputs["assignmentName"] = state ? state.assignmentName : undefined;
            resourceInputs["assignmentStatus"] = state ? state.assignmentStatus : undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["identities"] = state ? state.identities : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["policyArn"] = state ? state.policyArn : undefined;
        } else {
            const args = argsOrState as IamPolicyAssignmentArgs | undefined;
            if ((!args || args.assignmentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assignmentName'");
            }
            if ((!args || args.assignmentStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assignmentStatus'");
            }
            resourceInputs["assignmentName"] = args ? args.assignmentName : undefined;
            resourceInputs["assignmentStatus"] = args ? args.assignmentStatus : undefined;
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["identities"] = args ? args.identities : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["policyArn"] = args ? args.policyArn : undefined;
            resourceInputs["assignmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamPolicyAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamPolicyAssignment resources.
 */
export interface IamPolicyAssignmentState {
    /**
     * Assignment ID.
     */
    assignmentId?: pulumi.Input<string>;
    /**
     * Name of the assignment.
     */
    assignmentName?: pulumi.Input<string>;
    /**
     * Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
     *
     * The following arguments are optional:
     */
    assignmentStatus?: pulumi.Input<string>;
    /**
     * AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
     */
    identities?: pulumi.Input<inputs.quicksight.IamPolicyAssignmentIdentities>;
    /**
     * Namespace that contains the assignment. Defaults to `default`.
     */
    namespace?: pulumi.Input<string>;
    /**
     * ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
     */
    policyArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamPolicyAssignment resource.
 */
export interface IamPolicyAssignmentArgs {
    /**
     * Name of the assignment.
     */
    assignmentName: pulumi.Input<string>;
    /**
     * Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
     *
     * The following arguments are optional:
     */
    assignmentStatus: pulumi.Input<string>;
    /**
     * AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
     */
    identities?: pulumi.Input<inputs.quicksight.IamPolicyAssignmentIdentities>;
    /**
     * Namespace that contains the assignment. Defaults to `default`.
     */
    namespace?: pulumi.Input<string>;
    /**
     * ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
     */
    policyArn?: pulumi.Input<string>;
}
