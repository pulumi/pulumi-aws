// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS QuickSight VPC Connection.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const vpcConnectionRole = new aws.iam.Role("vpcConnectionRole", {
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Effect: "Allow",
 *             Action: "sts:AssumeRole",
 *             Principal: {
 *                 Service: "quicksight.amazonaws.com",
 *             },
 *         }],
 *     }),
 *     inlinePolicies: [{
 *         name: "QuickSightVPCConnectionRolePolicy",
 *         policy: JSON.stringify({
 *             Version: "2012-10-17",
 *             Statement: [{
 *                 Effect: "Allow",
 *                 Action: [
 *                     "ec2:CreateNetworkInterface",
 *                     "ec2:ModifyNetworkInterfaceAttribute",
 *                     "ec2:DeleteNetworkInterface",
 *                     "ec2:DescribeSubnets",
 *                     "ec2:DescribeSecurityGroups",
 *                 ],
 *                 Resource: ["*"],
 *             }],
 *         }),
 *     }],
 * });
 * const example = new aws.quicksight.VpcConnection("example", {
 *     vpcConnectionId: "example-connection-id",
 *     roleArn: vpcConnectionRole.arn,
 *     securityGroupIds: ["sg-00000000000000000"],
 *     subnetIds: [
 *         "subnet-00000000000000000",
 *         "subnet-00000000000000001",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import QuickSight VPC connection using the AWS account ID and VPC connection ID separated by commas (`,`). For example:
 *
 * ```sh
 *  $ pulumi import aws:quicksight/vpcConnection:VpcConnection example 123456789012,example
 * ```
 */
export class VpcConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpcConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcConnectionState, opts?: pulumi.CustomResourceOptions): VpcConnection {
        return new VpcConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:quicksight/vpcConnection:VpcConnection';

    /**
     * Returns true if the given object is an instance of VpcConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcConnection.__pulumiType;
    }

    /**
     * ARN of the VPC connection.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
     */
    public /*out*/ readonly availabilityStatus!: pulumi.Output<string>;
    /**
     * AWS account ID.
     */
    public readonly awsAccountId!: pulumi.Output<string>;
    /**
     * A list of IP addresses of DNS resolver endpoints for the VPC connection.
     */
    public readonly dnsResolvers!: pulumi.Output<string[] | undefined>;
    /**
     * The display name for the VPC connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IAM role to associate with the VPC connection.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * A list of security group IDs for the VPC connection.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * A list of subnet IDs for the VPC connection.
     *
     * The following arguments are optional:
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.quicksight.VpcConnectionTimeouts | undefined>;
    /**
     * The ID of the VPC connection.
     */
    public readonly vpcConnectionId!: pulumi.Output<string>;

    /**
     * Create a VpcConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcConnectionArgs | VpcConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcConnectionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityStatus"] = state ? state.availabilityStatus : undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["dnsResolvers"] = state ? state.dnsResolvers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcConnectionId"] = state ? state.vpcConnectionId : undefined;
        } else {
            const args = argsOrState as VpcConnectionArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcConnectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcConnectionId'");
            }
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["dnsResolvers"] = args ? args.dnsResolvers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcConnectionId"] = args ? args.vpcConnectionId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityStatus"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcConnection resources.
 */
export interface VpcConnectionState {
    /**
     * ARN of the VPC connection.
     */
    arn?: pulumi.Input<string>;
    /**
     * The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
     */
    availabilityStatus?: pulumi.Input<string>;
    /**
     * AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * A list of IP addresses of DNS resolver endpoints for the VPC connection.
     */
    dnsResolvers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The display name for the VPC connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The IAM role to associate with the VPC connection.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * A list of security group IDs for the VPC connection.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs for the VPC connection.
     *
     * The following arguments are optional:
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.quicksight.VpcConnectionTimeouts>;
    /**
     * The ID of the VPC connection.
     */
    vpcConnectionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcConnection resource.
 */
export interface VpcConnectionArgs {
    /**
     * AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * A list of IP addresses of DNS resolver endpoints for the VPC connection.
     */
    dnsResolvers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The display name for the VPC connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The IAM role to associate with the VPC connection.
     */
    roleArn: pulumi.Input<string>;
    /**
     * A list of security group IDs for the VPC connection.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of subnet IDs for the VPC connection.
     *
     * The following arguments are optional:
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.quicksight.VpcConnectionTimeouts>;
    /**
     * The ID of the VPC connection.
     */
    vpcConnectionId: pulumi.Input<string>;
}
