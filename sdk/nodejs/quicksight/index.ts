// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountSubscriptionArgs, AccountSubscriptionState } from "./accountSubscription";
export type AccountSubscription = import("./accountSubscription").AccountSubscription;
export const AccountSubscription: typeof import("./accountSubscription").AccountSubscription = null as any;
utilities.lazyLoad(exports, ["AccountSubscription"], () => require("./accountSubscription"));

export { DataSetArgs, DataSetState } from "./dataSet";
export type DataSet = import("./dataSet").DataSet;
export const DataSet: typeof import("./dataSet").DataSet = null as any;
utilities.lazyLoad(exports, ["DataSet"], () => require("./dataSet"));

export { DataSourceArgs, DataSourceState } from "./dataSource";
export type DataSource = import("./dataSource").DataSource;
export const DataSource: typeof import("./dataSource").DataSource = null as any;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { GetDataSetArgs, GetDataSetResult, GetDataSetOutputArgs } from "./getDataSet";
export const getDataSet: typeof import("./getDataSet").getDataSet = null as any;
export const getDataSetOutput: typeof import("./getDataSet").getDataSetOutput = null as any;
utilities.lazyLoad(exports, ["getDataSet","getDataSetOutput"], () => require("./getDataSet"));

export { GetQuicksightGroupArgs, GetQuicksightGroupResult, GetQuicksightGroupOutputArgs } from "./getQuicksightGroup";
export const getQuicksightGroup: typeof import("./getQuicksightGroup").getQuicksightGroup = null as any;
export const getQuicksightGroupOutput: typeof import("./getQuicksightGroup").getQuicksightGroupOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightGroup","getQuicksightGroupOutput"], () => require("./getQuicksightGroup"));

export { GetQuicksightUserArgs, GetQuicksightUserResult, GetQuicksightUserOutputArgs } from "./getQuicksightUser";
export const getQuicksightUser: typeof import("./getQuicksightUser").getQuicksightUser = null as any;
export const getQuicksightUserOutput: typeof import("./getQuicksightUser").getQuicksightUserOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightUser","getQuicksightUserOutput"], () => require("./getQuicksightUser"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:quicksight/accountSubscription:AccountSubscription":
                return new AccountSubscription(name, <any>undefined, { urn })
            case "aws:quicksight/dataSet:DataSet":
                return new DataSet(name, <any>undefined, { urn })
            case "aws:quicksight/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "aws:quicksight/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "aws:quicksight/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "aws:quicksight/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "aws:quicksight/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "aws:quicksight/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "quicksight/accountSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "quicksight/dataSet", _module)
pulumi.runtime.registerResourceModule("aws", "quicksight/dataSource", _module)
pulumi.runtime.registerResourceModule("aws", "quicksight/folder", _module)
pulumi.runtime.registerResourceModule("aws", "quicksight/group", _module)
pulumi.runtime.registerResourceModule("aws", "quicksight/groupMembership", _module)
pulumi.runtime.registerResourceModule("aws", "quicksight/template", _module)
pulumi.runtime.registerResourceModule("aws", "quicksight/user", _module)
