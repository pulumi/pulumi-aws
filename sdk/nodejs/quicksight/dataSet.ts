// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing a QuickSight Data Set.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.DataSet("example", {
 *     dataSetId: "example-id",
 *     name: "example-name",
 *     importMode: "SPICE",
 *     physicalTableMaps: [{
 *         physicalTableMapId: "example-id",
 *         s3Source: {
 *             dataSourceArn: exampleAwsQuicksightDataSource.arn,
 *             inputColumns: [{
 *                 name: "Column1",
 *                 type: "STRING",
 *             }],
 *             uploadSettings: {
 *                 format: "JSON",
 *             },
 *         },
 *     }],
 * });
 * ```
 *
 * ### With Column Level Permission Rules
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.DataSet("example", {
 *     dataSetId: "example-id",
 *     name: "example-name",
 *     importMode: "SPICE",
 *     physicalTableMaps: [{
 *         physicalTableMapId: "example-id",
 *         s3Source: {
 *             dataSourceArn: exampleAwsQuicksightDataSource.arn,
 *             inputColumns: [{
 *                 name: "Column1",
 *                 type: "STRING",
 *             }],
 *             uploadSettings: {
 *                 format: "JSON",
 *             },
 *         },
 *     }],
 *     columnLevelPermissionRules: [{
 *         columnNames: ["Column1"],
 *         principals: [exampleAwsQuicksightUser.arn],
 *     }],
 * });
 * ```
 *
 * ### With Field Folders
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.DataSet("example", {
 *     dataSetId: "example-id",
 *     name: "example-name",
 *     importMode: "SPICE",
 *     physicalTableMaps: [{
 *         physicalTableMapId: "example-id",
 *         s3Source: {
 *             dataSourceArn: exampleAwsQuicksightDataSource.arn,
 *             inputColumns: [{
 *                 name: "Column1",
 *                 type: "STRING",
 *             }],
 *             uploadSettings: {
 *                 format: "JSON",
 *             },
 *         },
 *     }],
 *     fieldFolders: [{
 *         fieldFoldersId: "example-id",
 *         columns: ["Column1"],
 *         description: "example description",
 *     }],
 * });
 * ```
 *
 * ### With Permissions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.DataSet("example", {
 *     dataSetId: "example-id",
 *     name: "example-name",
 *     importMode: "SPICE",
 *     physicalTableMaps: [{
 *         physicalTableMapId: "example-id",
 *         s3Source: {
 *             dataSourceArn: exampleAwsQuicksightDataSource.arn,
 *             inputColumns: [{
 *                 name: "Column1",
 *                 type: "STRING",
 *             }],
 *             uploadSettings: {
 *                 format: "JSON",
 *             },
 *         },
 *     }],
 *     permissions: [{
 *         actions: [
 *             "quicksight:DescribeDataSet",
 *             "quicksight:DescribeDataSetPermissions",
 *             "quicksight:PassDataSet",
 *             "quicksight:DescribeIngestion",
 *             "quicksight:ListIngestions",
 *         ],
 *         principal: exampleAwsQuicksightUser.arn,
 *     }],
 * });
 * ```
 *
 * ### With Row Level Permission Tag Configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.DataSet("example", {
 *     dataSetId: "example-id",
 *     name: "example-name",
 *     importMode: "SPICE",
 *     physicalTableMaps: [{
 *         physicalTableMapId: "example-id",
 *         s3Source: {
 *             dataSourceArn: exampleAwsQuicksightDataSource.arn,
 *             inputColumns: [{
 *                 name: "Column1",
 *                 type: "STRING",
 *             }],
 *             uploadSettings: {
 *                 format: "JSON",
 *             },
 *         },
 *     }],
 *     rowLevelPermissionTagConfiguration: {
 *         status: "ENABLED",
 *         tagRules: [{
 *             columnName: "Column1",
 *             tagKey: "tagkey",
 *             matchAllValue: "*",
 *             tagMultiValueDelimiter: ",",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a QuickSight Data Set using the AWS account ID and data set ID separated by a comma (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/dataSet:DataSet example 123456789012,example-id
 * ```
 */
export class DataSet extends pulumi.CustomResource {
    /**
     * Get an existing DataSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataSetState, opts?: pulumi.CustomResourceOptions): DataSet {
        return new DataSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:quicksight/dataSet:DataSet';

    /**
     * Returns true if the given object is an instance of DataSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSet.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the data set.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    declare public readonly awsAccountId: pulumi.Output<string>;
    /**
     * Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
     */
    declare public readonly columnGroups: pulumi.Output<outputs.quicksight.DataSetColumnGroup[] | undefined>;
    /**
     * A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
     */
    declare public readonly columnLevelPermissionRules: pulumi.Output<outputs.quicksight.DataSetColumnLevelPermissionRule[] | undefined>;
    /**
     * Identifier for the data set.
     */
    declare public readonly dataSetId: pulumi.Output<string>;
    /**
     * The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
     */
    declare public readonly dataSetUsageConfiguration: pulumi.Output<outputs.quicksight.DataSetDataSetUsageConfiguration>;
    /**
     * The folder that contains fields and nested subfolders for your dataset. See field_folders.
     */
    declare public readonly fieldFolders: pulumi.Output<outputs.quicksight.DataSetFieldFolder[] | undefined>;
    /**
     * Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
     */
    declare public readonly importMode: pulumi.Output<string>;
    /**
     * Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
     */
    declare public readonly logicalTableMaps: pulumi.Output<outputs.quicksight.DataSetLogicalTableMap[]>;
    /**
     * Display name for the dataset.
     *
     * The following arguments are optional:
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The final set of columns available for use in analyses and dashboards after all data preparation and transformation steps have been applied within the data set.  See `outputColumns` Block below.
     */
    declare public /*out*/ readonly outputColumns: pulumi.Output<outputs.quicksight.DataSetOutputColumn[]>;
    /**
     * A set of resource permissions on the data source. Maximum of 64 items. See permissions.
     */
    declare public readonly permissions: pulumi.Output<outputs.quicksight.DataSetPermission[] | undefined>;
    /**
     * Declares the physical tables that are available in the underlying data sources. See physical_table_map.
     */
    declare public readonly physicalTableMaps: pulumi.Output<outputs.quicksight.DataSetPhysicalTableMap[] | undefined>;
    /**
     * The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
     */
    declare public readonly refreshProperties: pulumi.Output<outputs.quicksight.DataSetRefreshProperties | undefined>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
     */
    declare public readonly rowLevelPermissionDataSet: pulumi.Output<outputs.quicksight.DataSetRowLevelPermissionDataSet | undefined>;
    /**
     * The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
     */
    declare public readonly rowLevelPermissionTagConfiguration: pulumi.Output<outputs.quicksight.DataSetRowLevelPermissionTagConfiguration | undefined>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a DataSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataSetArgs | DataSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataSetState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["awsAccountId"] = state?.awsAccountId;
            resourceInputs["columnGroups"] = state?.columnGroups;
            resourceInputs["columnLevelPermissionRules"] = state?.columnLevelPermissionRules;
            resourceInputs["dataSetId"] = state?.dataSetId;
            resourceInputs["dataSetUsageConfiguration"] = state?.dataSetUsageConfiguration;
            resourceInputs["fieldFolders"] = state?.fieldFolders;
            resourceInputs["importMode"] = state?.importMode;
            resourceInputs["logicalTableMaps"] = state?.logicalTableMaps;
            resourceInputs["name"] = state?.name;
            resourceInputs["outputColumns"] = state?.outputColumns;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["physicalTableMaps"] = state?.physicalTableMaps;
            resourceInputs["refreshProperties"] = state?.refreshProperties;
            resourceInputs["region"] = state?.region;
            resourceInputs["rowLevelPermissionDataSet"] = state?.rowLevelPermissionDataSet;
            resourceInputs["rowLevelPermissionTagConfiguration"] = state?.rowLevelPermissionTagConfiguration;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        } else {
            const args = argsOrState as DataSetArgs | undefined;
            if (args?.dataSetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataSetId'");
            }
            if (args?.importMode === undefined && !opts.urn) {
                throw new Error("Missing required property 'importMode'");
            }
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["columnGroups"] = args?.columnGroups;
            resourceInputs["columnLevelPermissionRules"] = args?.columnLevelPermissionRules;
            resourceInputs["dataSetId"] = args?.dataSetId;
            resourceInputs["dataSetUsageConfiguration"] = args?.dataSetUsageConfiguration;
            resourceInputs["fieldFolders"] = args?.fieldFolders;
            resourceInputs["importMode"] = args?.importMode;
            resourceInputs["logicalTableMaps"] = args?.logicalTableMaps;
            resourceInputs["name"] = args?.name;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["physicalTableMaps"] = args?.physicalTableMaps;
            resourceInputs["refreshProperties"] = args?.refreshProperties;
            resourceInputs["region"] = args?.region;
            resourceInputs["rowLevelPermissionDataSet"] = args?.rowLevelPermissionDataSet;
            resourceInputs["rowLevelPermissionTagConfiguration"] = args?.rowLevelPermissionTagConfiguration;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["outputColumns"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataSet resources.
 */
export interface DataSetState {
    /**
     * Amazon Resource Name (ARN) of the data set.
     */
    arn?: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    /**
     * Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
     */
    columnGroups?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetColumnGroup>[]>;
    /**
     * A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
     */
    columnLevelPermissionRules?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetColumnLevelPermissionRule>[]>;
    /**
     * Identifier for the data set.
     */
    dataSetId?: pulumi.Input<string>;
    /**
     * The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
     */
    dataSetUsageConfiguration?: pulumi.Input<inputs.quicksight.DataSetDataSetUsageConfiguration>;
    /**
     * The folder that contains fields and nested subfolders for your dataset. See field_folders.
     */
    fieldFolders?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetFieldFolder>[]>;
    /**
     * Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
     */
    importMode?: pulumi.Input<string>;
    /**
     * Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
     */
    logicalTableMaps?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetLogicalTableMap>[]>;
    /**
     * Display name for the dataset.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * The final set of columns available for use in analyses and dashboards after all data preparation and transformation steps have been applied within the data set.  See `outputColumns` Block below.
     */
    outputColumns?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetOutputColumn>[]>;
    /**
     * A set of resource permissions on the data source. Maximum of 64 items. See permissions.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetPermission>[]>;
    /**
     * Declares the physical tables that are available in the underlying data sources. See physical_table_map.
     */
    physicalTableMaps?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetPhysicalTableMap>[]>;
    /**
     * The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
     */
    refreshProperties?: pulumi.Input<inputs.quicksight.DataSetRefreshProperties>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
     */
    rowLevelPermissionDataSet?: pulumi.Input<inputs.quicksight.DataSetRowLevelPermissionDataSet>;
    /**
     * The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
     */
    rowLevelPermissionTagConfiguration?: pulumi.Input<inputs.quicksight.DataSetRowLevelPermissionTagConfiguration>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DataSet resource.
 */
export interface DataSetArgs {
    awsAccountId?: pulumi.Input<string>;
    /**
     * Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
     */
    columnGroups?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetColumnGroup>[]>;
    /**
     * A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
     */
    columnLevelPermissionRules?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetColumnLevelPermissionRule>[]>;
    /**
     * Identifier for the data set.
     */
    dataSetId: pulumi.Input<string>;
    /**
     * The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
     */
    dataSetUsageConfiguration?: pulumi.Input<inputs.quicksight.DataSetDataSetUsageConfiguration>;
    /**
     * The folder that contains fields and nested subfolders for your dataset. See field_folders.
     */
    fieldFolders?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetFieldFolder>[]>;
    /**
     * Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
     */
    importMode: pulumi.Input<string>;
    /**
     * Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
     */
    logicalTableMaps?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetLogicalTableMap>[]>;
    /**
     * Display name for the dataset.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * A set of resource permissions on the data source. Maximum of 64 items. See permissions.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetPermission>[]>;
    /**
     * Declares the physical tables that are available in the underlying data sources. See physical_table_map.
     */
    physicalTableMaps?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetPhysicalTableMap>[]>;
    /**
     * The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
     */
    refreshProperties?: pulumi.Input<inputs.quicksight.DataSetRefreshProperties>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
     */
    rowLevelPermissionDataSet?: pulumi.Input<inputs.quicksight.DataSetRowLevelPermissionDataSet>;
    /**
     * The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
     */
    rowLevelPermissionTagConfiguration?: pulumi.Input<inputs.quicksight.DataSetRowLevelPermissionTagConfiguration>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
