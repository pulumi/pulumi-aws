// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudformation.StackInstances("example", {
 *     accounts: [
 *         "123456789012",
 *         "234567890123",
 *     ],
 *     regions: [
 *         "us-east-1",
 *         "us-west-2",
 *     ],
 *     stackSetName: exampleAwsCloudformationStackSet.name,
 * });
 * ```
 *
 * ### Example IAM Setup in Target Account
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         effect: "Allow",
 *         principals: [{
 *             identifiers: [aWSCloudFormationStackSetAdministrationRole.arn],
 *             type: "AWS",
 *         }],
 *     }],
 * });
 * const aWSCloudFormationStackSetExecutionRole = new aws.iam.Role("AWSCloudFormationStackSetExecutionRole", {
 *     assumeRolePolicy: aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy.then(aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy => aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy.json),
 *     name: "AWSCloudFormationStackSetExecutionRole",
 * });
 * // Documentation: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html
 * // Additional IAM permissions necessary depend on the resources defined in the StackSet template
 * const aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: [
 *             "cloudformation:*",
 *             "s3:*",
 *             "sns:*",
 *         ],
 *         effect: "Allow",
 *         resources: ["*"],
 *     }],
 * });
 * const aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyRolePolicy = new aws.iam.RolePolicy("AWSCloudFormationStackSetExecutionRole_MinimumExecutionPolicy", {
 *     name: "MinimumExecutionPolicy",
 *     policy: aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicy.then(aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicy => aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicy.json),
 *     role: aWSCloudFormationStackSetExecutionRole.name,
 * });
 * ```
 *
 * ### Example Deployment across Organizations account
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudformation.StackInstances("example", {
 *     deploymentTargets: {
 *         organizationalUnitIds: [exampleAwsOrganizationsOrganization.roots[0].id],
 *     },
 *     regions: [
 *         "us-west-2",
 *         "us-east-1",
 *     ],
 *     stackSetName: exampleAwsCloudformationStackSet.name,
 * });
 * ```
 *
 * ## Import
 *
 * Import CloudFormation stack instances that target OUs, using the stack set name, `call_as`, and "OU" separated by commas (`,`). For example:
 *
 * Using `pulumi import`, import CloudFormation stack instances using the stack set name and `call_as` separated by commas (`,`). If you are importing a stack instance targeting OUs, see the example below. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudformation/stackInstances:StackInstances example example,SELF
 * ```
 * Using `pulumi import`, Import CloudFormation stack instances that target OUs, using the stack set name, `call_as`, and "OU" separated by commas (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:cloudformation/stackInstances:StackInstances example example,SELF,OU
 * ```
 */
export class StackInstances extends pulumi.CustomResource {
    /**
     * Get an existing StackInstances resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackInstancesState, opts?: pulumi.CustomResourceOptions): StackInstances {
        return new StackInstances(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudformation/stackInstances:StackInstances';

    /**
     * Returns true if the given object is an instance of StackInstances.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackInstances {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackInstances.__pulumiType;
    }

    /**
     * Accounts where you want to create stack instances in the specified `regions`. You can specify either `accounts` or `deploymentTargets`, but not both.
     */
    public readonly accounts!: pulumi.Output<string[]>;
    /**
     * Whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: `SELF` (default), `DELEGATED_ADMIN`.
     */
    public readonly callAs!: pulumi.Output<string | undefined>;
    /**
     * AWS Organizations accounts for which to create stack instances in the `regions`. stack sets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for most of this argument. See deploymentTargets below.
     */
    public readonly deploymentTargets!: pulumi.Output<outputs.cloudformation.StackInstancesDeploymentTargets | undefined>;
    /**
     * Preferences for how AWS CloudFormation performs a stack set operation. See operationPreferences below.
     */
    public readonly operationPreferences!: pulumi.Output<outputs.cloudformation.StackInstancesOperationPreferences | undefined>;
    /**
     * Key-value map of input parameters to override from the stack set for these instances. This argument's drift detection is limited to the first account and region since each instance can have unique parameters.
     */
    public readonly parameterOverrides!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Regions where you want to create stack instances in the specified `accounts`.
     */
    public readonly regions!: pulumi.Output<string[]>;
    /**
     * Whether to remove the stack instances from the stack set, but not delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set. To retain the stack, ensure `retainStacks = true` has been successfully applied _before_ an apply that would destroy the resource. Defaults to `false`.
     */
    public readonly retainStacks!: pulumi.Output<boolean | undefined>;
    /**
     * List of stack instances created from an organizational unit deployment target. This may not always be set depending on whether CloudFormation returns summaries for your configuration. See `stackInstanceSummaries`.
     */
    public /*out*/ readonly stackInstanceSummaries!: pulumi.Output<outputs.cloudformation.StackInstancesStackInstanceSummary[]>;
    /**
     * Name or unique ID of the stack set that the stack instance is associated with.
     */
    public /*out*/ readonly stackSetId!: pulumi.Output<string>;
    /**
     * Name of the stack set.
     *
     * The following arguments are optional:
     */
    public readonly stackSetName!: pulumi.Output<string>;

    /**
     * Create a StackInstances resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackInstancesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackInstancesArgs | StackInstancesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackInstancesState | undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["callAs"] = state ? state.callAs : undefined;
            resourceInputs["deploymentTargets"] = state ? state.deploymentTargets : undefined;
            resourceInputs["operationPreferences"] = state ? state.operationPreferences : undefined;
            resourceInputs["parameterOverrides"] = state ? state.parameterOverrides : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["retainStacks"] = state ? state.retainStacks : undefined;
            resourceInputs["stackInstanceSummaries"] = state ? state.stackInstanceSummaries : undefined;
            resourceInputs["stackSetId"] = state ? state.stackSetId : undefined;
            resourceInputs["stackSetName"] = state ? state.stackSetName : undefined;
        } else {
            const args = argsOrState as StackInstancesArgs | undefined;
            if ((!args || args.stackSetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackSetName'");
            }
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["callAs"] = args ? args.callAs : undefined;
            resourceInputs["deploymentTargets"] = args ? args.deploymentTargets : undefined;
            resourceInputs["operationPreferences"] = args ? args.operationPreferences : undefined;
            resourceInputs["parameterOverrides"] = args ? args.parameterOverrides : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["retainStacks"] = args ? args.retainStacks : undefined;
            resourceInputs["stackSetName"] = args ? args.stackSetName : undefined;
            resourceInputs["stackInstanceSummaries"] = undefined /*out*/;
            resourceInputs["stackSetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackInstances.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StackInstances resources.
 */
export interface StackInstancesState {
    /**
     * Accounts where you want to create stack instances in the specified `regions`. You can specify either `accounts` or `deploymentTargets`, but not both.
     */
    accounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: `SELF` (default), `DELEGATED_ADMIN`.
     */
    callAs?: pulumi.Input<string>;
    /**
     * AWS Organizations accounts for which to create stack instances in the `regions`. stack sets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for most of this argument. See deploymentTargets below.
     */
    deploymentTargets?: pulumi.Input<inputs.cloudformation.StackInstancesDeploymentTargets>;
    /**
     * Preferences for how AWS CloudFormation performs a stack set operation. See operationPreferences below.
     */
    operationPreferences?: pulumi.Input<inputs.cloudformation.StackInstancesOperationPreferences>;
    /**
     * Key-value map of input parameters to override from the stack set for these instances. This argument's drift detection is limited to the first account and region since each instance can have unique parameters.
     */
    parameterOverrides?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Regions where you want to create stack instances in the specified `accounts`.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to remove the stack instances from the stack set, but not delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set. To retain the stack, ensure `retainStacks = true` has been successfully applied _before_ an apply that would destroy the resource. Defaults to `false`.
     */
    retainStacks?: pulumi.Input<boolean>;
    /**
     * List of stack instances created from an organizational unit deployment target. This may not always be set depending on whether CloudFormation returns summaries for your configuration. See `stackInstanceSummaries`.
     */
    stackInstanceSummaries?: pulumi.Input<pulumi.Input<inputs.cloudformation.StackInstancesStackInstanceSummary>[]>;
    /**
     * Name or unique ID of the stack set that the stack instance is associated with.
     */
    stackSetId?: pulumi.Input<string>;
    /**
     * Name of the stack set.
     *
     * The following arguments are optional:
     */
    stackSetName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StackInstances resource.
 */
export interface StackInstancesArgs {
    /**
     * Accounts where you want to create stack instances in the specified `regions`. You can specify either `accounts` or `deploymentTargets`, but not both.
     */
    accounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: `SELF` (default), `DELEGATED_ADMIN`.
     */
    callAs?: pulumi.Input<string>;
    /**
     * AWS Organizations accounts for which to create stack instances in the `regions`. stack sets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for most of this argument. See deploymentTargets below.
     */
    deploymentTargets?: pulumi.Input<inputs.cloudformation.StackInstancesDeploymentTargets>;
    /**
     * Preferences for how AWS CloudFormation performs a stack set operation. See operationPreferences below.
     */
    operationPreferences?: pulumi.Input<inputs.cloudformation.StackInstancesOperationPreferences>;
    /**
     * Key-value map of input parameters to override from the stack set for these instances. This argument's drift detection is limited to the first account and region since each instance can have unique parameters.
     */
    parameterOverrides?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Regions where you want to create stack instances in the specified `accounts`.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to remove the stack instances from the stack set, but not delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set. To retain the stack, ensure `retainStacks = true` has been successfully applied _before_ an apply that would destroy the resource. Defaults to `false`.
     */
    retainStacks?: pulumi.Input<boolean>;
    /**
     * Name of the stack set.
     *
     * The following arguments are optional:
     */
    stackSetName: pulumi.Input<string>;
}
