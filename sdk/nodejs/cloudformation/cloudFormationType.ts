// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class CloudFormationType extends pulumi.CustomResource {
    /**
     * Get an existing CloudFormationType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudFormationTypeState, opts?: pulumi.CustomResourceOptions): CloudFormationType {
        return new CloudFormationType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudformation/cloudFormationType:CloudFormationType';

    /**
     * Returns true if the given object is an instance of CloudFormationType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudFormationType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudFormationType.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly defaultVersionId!: pulumi.Output<string>;
    public /*out*/ readonly deprecatedStatus!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly documentationUrl!: pulumi.Output<string>;
    public readonly executionRoleArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly isDefaultVersion!: pulumi.Output<boolean>;
    public readonly loggingConfig!: pulumi.Output<outputs.cloudformation.CloudFormationTypeLoggingConfig | undefined>;
    public /*out*/ readonly provisioningType!: pulumi.Output<string>;
    public /*out*/ readonly schema!: pulumi.Output<string>;
    public readonly schemaHandlerPackage!: pulumi.Output<string>;
    public /*out*/ readonly sourceUrl!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly typeArn!: pulumi.Output<string>;
    public readonly typeName!: pulumi.Output<string>;
    public /*out*/ readonly versionId!: pulumi.Output<string>;
    public /*out*/ readonly visibility!: pulumi.Output<string>;

    /**
     * Create a CloudFormationType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudFormationTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudFormationTypeArgs | CloudFormationTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudFormationTypeState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["defaultVersionId"] = state ? state.defaultVersionId : undefined;
            resourceInputs["deprecatedStatus"] = state ? state.deprecatedStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["documentationUrl"] = state ? state.documentationUrl : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["isDefaultVersion"] = state ? state.isDefaultVersion : undefined;
            resourceInputs["loggingConfig"] = state ? state.loggingConfig : undefined;
            resourceInputs["provisioningType"] = state ? state.provisioningType : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["schemaHandlerPackage"] = state ? state.schemaHandlerPackage : undefined;
            resourceInputs["sourceUrl"] = state ? state.sourceUrl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["typeArn"] = state ? state.typeArn : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as CloudFormationTypeArgs | undefined;
            if ((!args || args.schemaHandlerPackage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaHandlerPackage'");
            }
            if ((!args || args.typeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeName'");
            }
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["loggingConfig"] = args ? args.loggingConfig : undefined;
            resourceInputs["schemaHandlerPackage"] = args ? args.schemaHandlerPackage : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["defaultVersionId"] = undefined /*out*/;
            resourceInputs["deprecatedStatus"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["documentationUrl"] = undefined /*out*/;
            resourceInputs["isDefaultVersion"] = undefined /*out*/;
            resourceInputs["provisioningType"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["sourceUrl"] = undefined /*out*/;
            resourceInputs["typeArn"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudFormationType.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudFormationType resources.
 */
export interface CloudFormationTypeState {
    arn?: pulumi.Input<string>;
    defaultVersionId?: pulumi.Input<string>;
    deprecatedStatus?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    documentationUrl?: pulumi.Input<string>;
    executionRoleArn?: pulumi.Input<string>;
    isDefaultVersion?: pulumi.Input<boolean>;
    loggingConfig?: pulumi.Input<inputs.cloudformation.CloudFormationTypeLoggingConfig>;
    provisioningType?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    schemaHandlerPackage?: pulumi.Input<string>;
    sourceUrl?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    typeArn?: pulumi.Input<string>;
    typeName?: pulumi.Input<string>;
    versionId?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudFormationType resource.
 */
export interface CloudFormationTypeArgs {
    executionRoleArn?: pulumi.Input<string>;
    loggingConfig?: pulumi.Input<inputs.cloudformation.CloudFormationTypeLoggingConfig>;
    schemaHandlerPackage: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    typeName: pulumi.Input<string>;
}
