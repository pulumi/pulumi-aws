// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class StackSet extends pulumi.CustomResource {
    /**
     * Get an existing StackSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackSetState, opts?: pulumi.CustomResourceOptions): StackSet {
        return new StackSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudformation/stackSet:StackSet';

    /**
     * Returns true if the given object is an instance of StackSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackSet.__pulumiType;
    }

    public readonly administrationRoleArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoDeployment!: pulumi.Output<outputs.cloudformation.StackSetAutoDeployment | undefined>;
    public readonly callAs!: pulumi.Output<string | undefined>;
    public readonly capabilities!: pulumi.Output<string[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly executionRoleName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly operationPreferences!: pulumi.Output<outputs.cloudformation.StackSetOperationPreferences | undefined>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly permissionModel!: pulumi.Output<string | undefined>;
    public /*out*/ readonly stackSetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly templateBody!: pulumi.Output<string>;
    public readonly templateUrl!: pulumi.Output<string | undefined>;

    /**
     * Create a StackSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StackSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackSetArgs | StackSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackSetState | undefined;
            resourceInputs["administrationRoleArn"] = state ? state.administrationRoleArn : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoDeployment"] = state ? state.autoDeployment : undefined;
            resourceInputs["callAs"] = state ? state.callAs : undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executionRoleName"] = state ? state.executionRoleName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operationPreferences"] = state ? state.operationPreferences : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["permissionModel"] = state ? state.permissionModel : undefined;
            resourceInputs["stackSetId"] = state ? state.stackSetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["templateBody"] = state ? state.templateBody : undefined;
            resourceInputs["templateUrl"] = state ? state.templateUrl : undefined;
        } else {
            const args = argsOrState as StackSetArgs | undefined;
            resourceInputs["administrationRoleArn"] = args ? args.administrationRoleArn : undefined;
            resourceInputs["autoDeployment"] = args ? args.autoDeployment : undefined;
            resourceInputs["callAs"] = args ? args.callAs : undefined;
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executionRoleName"] = args ? args.executionRoleName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operationPreferences"] = args ? args.operationPreferences : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["permissionModel"] = args ? args.permissionModel : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateBody"] = args ? args.templateBody : undefined;
            resourceInputs["templateUrl"] = args ? args.templateUrl : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["stackSetId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StackSet resources.
 */
export interface StackSetState {
    administrationRoleArn?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    autoDeployment?: pulumi.Input<inputs.cloudformation.StackSetAutoDeployment>;
    callAs?: pulumi.Input<string>;
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    executionRoleName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    operationPreferences?: pulumi.Input<inputs.cloudformation.StackSetOperationPreferences>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    permissionModel?: pulumi.Input<string>;
    stackSetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateBody?: pulumi.Input<string>;
    templateUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StackSet resource.
 */
export interface StackSetArgs {
    administrationRoleArn?: pulumi.Input<string>;
    autoDeployment?: pulumi.Input<inputs.cloudformation.StackSetAutoDeployment>;
    callAs?: pulumi.Input<string>;
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    executionRoleName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    operationPreferences?: pulumi.Input<inputs.cloudformation.StackSetOperationPreferences>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    permissionModel?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateBody?: pulumi.Input<string>;
    templateUrl?: pulumi.Input<string>;
}
