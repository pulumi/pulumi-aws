// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:acm/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly certificateAuthorityArn!: pulumi.Output<string | undefined>;
    public readonly certificateBody!: pulumi.Output<string | undefined>;
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    public readonly domainName!: pulumi.Output<string>;
    public /*out*/ readonly domainValidationOptions!: pulumi.Output<outputs.acm.CertificateDomainValidationOption[]>;
    public readonly earlyRenewalDuration!: pulumi.Output<string | undefined>;
    public readonly keyAlgorithm!: pulumi.Output<string>;
    public /*out*/ readonly notAfter!: pulumi.Output<string>;
    public /*out*/ readonly notBefore!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<outputs.acm.CertificateOptions | undefined>;
    public /*out*/ readonly pendingRenewal!: pulumi.Output<boolean>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly renewalEligibility!: pulumi.Output<string>;
    public /*out*/ readonly renewalSummaries!: pulumi.Output<outputs.acm.CertificateRenewalSummary[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subjectAlternativeNames!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public /*out*/ readonly validationEmails!: pulumi.Output<string[]>;
    public readonly validationMethod!: pulumi.Output<string>;
    public readonly validationOptions!: pulumi.Output<outputs.acm.CertificateValidationOption[] | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificateAuthorityArn"] = state ? state.certificateAuthorityArn : undefined;
            resourceInputs["certificateBody"] = state ? state.certificateBody : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainValidationOptions"] = state ? state.domainValidationOptions : undefined;
            resourceInputs["earlyRenewalDuration"] = state ? state.earlyRenewalDuration : undefined;
            resourceInputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            resourceInputs["notAfter"] = state ? state.notAfter : undefined;
            resourceInputs["notBefore"] = state ? state.notBefore : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["pendingRenewal"] = state ? state.pendingRenewal : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["renewalEligibility"] = state ? state.renewalEligibility : undefined;
            resourceInputs["renewalSummaries"] = state ? state.renewalSummaries : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validationEmails"] = state ? state.validationEmails : undefined;
            resourceInputs["validationMethod"] = state ? state.validationMethod : undefined;
            resourceInputs["validationOptions"] = state ? state.validationOptions : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            resourceInputs["certificateAuthorityArn"] = args ? args.certificateAuthorityArn : undefined;
            resourceInputs["certificateBody"] = args ? args.certificateBody : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["earlyRenewalDuration"] = args ? args.earlyRenewalDuration : undefined;
            resourceInputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["subjectAlternativeNames"] = args ? args.subjectAlternativeNames : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["validationMethod"] = args ? args.validationMethod : undefined;
            resourceInputs["validationOptions"] = args ? args.validationOptions : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainValidationOptions"] = undefined /*out*/;
            resourceInputs["notAfter"] = undefined /*out*/;
            resourceInputs["notBefore"] = undefined /*out*/;
            resourceInputs["pendingRenewal"] = undefined /*out*/;
            resourceInputs["renewalEligibility"] = undefined /*out*/;
            resourceInputs["renewalSummaries"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["validationEmails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    arn?: pulumi.Input<string>;
    certificateAuthorityArn?: pulumi.Input<string>;
    certificateBody?: pulumi.Input<string>;
    certificateChain?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    domainValidationOptions?: pulumi.Input<pulumi.Input<inputs.acm.CertificateDomainValidationOption>[]>;
    earlyRenewalDuration?: pulumi.Input<string>;
    keyAlgorithm?: pulumi.Input<string>;
    notAfter?: pulumi.Input<string>;
    notBefore?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.acm.CertificateOptions>;
    pendingRenewal?: pulumi.Input<boolean>;
    privateKey?: pulumi.Input<string>;
    renewalEligibility?: pulumi.Input<string>;
    renewalSummaries?: pulumi.Input<pulumi.Input<inputs.acm.CertificateRenewalSummary>[]>;
    status?: pulumi.Input<string>;
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    validationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    validationMethod?: pulumi.Input<string>;
    validationOptions?: pulumi.Input<pulumi.Input<inputs.acm.CertificateValidationOption>[]>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    certificateAuthorityArn?: pulumi.Input<string>;
    certificateBody?: pulumi.Input<string>;
    certificateChain?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    earlyRenewalDuration?: pulumi.Input<string>;
    keyAlgorithm?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.acm.CertificateOptions>;
    privateKey?: pulumi.Input<string>;
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    validationMethod?: pulumi.Input<string>;
    validationOptions?: pulumi.Input<pulumi.Input<inputs.acm.CertificateValidationOption>[]>;
}
