// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The ACM certificate resource allows requesting and management of certificates
 * from the Amazon Certificate Manager.
 *
 * It deals with requesting certificates and managing their attributes and life-cycle.
 * This resource does not deal with validation of a certificate but can provide inputs
 * for other resources implementing the validation. It does not wait for a certificate to be issued.
 * Use a `aws.acm.CertificateValidation` resource for this.
 *
 * Most commonly, this resource is used together with `aws.route53.Record` and
 * `aws.acm.CertificateValidation` to request a DNS validated certificate,
 * deploy the required validation records and wait for validation to complete.
 *
 * Domain validation through E-Mail is also supported but should be avoided as it requires a manual step outside
 * of this provider.
 *
 * ## Example Usage
 * ### Create Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cert = new aws.acm.Certificate("cert", {
 *     domainName: "example.com",
 *     tags: {
 *         Environment: "test",
 *     },
 *     validationMethod: "DNS",
 * });
 * ```
 * ### Custom Domain Validation Options
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cert = new aws.acm.Certificate("cert", {
 *     domainName: "testing.example.com",
 *     validationMethod: "EMAIL",
 *     validationOptions: [{
 *         domainName: "testing.example.com",
 *         validationDomain: "example.com",
 *     }],
 * });
 * ```
 * ### Existing Certificate Body Import
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as tls from "@pulumi/tls";
 *
 * const examplePrivateKey = new tls.PrivateKey("examplePrivateKey", {algorithm: "RSA"});
 * const exampleSelfSignedCert = new tls.SelfSignedCert("exampleSelfSignedCert", {
 *     keyAlgorithm: "RSA",
 *     privateKeyPem: examplePrivateKey.privateKeyPem,
 *     subjects: [{
 *         commonName: "example.com",
 *         organization: "ACME Examples, Inc",
 *     }],
 *     validityPeriodHours: 12,
 *     allowedUses: [
 *         "key_encipherment",
 *         "digital_signature",
 *         "server_auth",
 *     ],
 * });
 * const cert = new aws.acm.Certificate("cert", {
 *     privateKey: examplePrivateKey.privateKeyPem,
 *     certificateBody: exampleSelfSignedCert.certPem,
 * });
 * ```
 * ### Referencing domainValidationOptions With forEach Based Resources
 *
 * See the `aws.acm.CertificateValidation` resource for a full example of performing DNS validation.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example: aws.route53.Record[];
 * for (const range of Object.entries(.reduce((__obj, dvo) => { ...__obj, [dvo.domainName]: {
 *     name: dvo.resourceRecordName,
 *     record: dvo.resourceRecordValue,
 *     type: dvo.resourceRecordType,
 * } })).map(([k, v]) => {key: k, value: v})) {
 *     example.push(new aws.route53.Record(`example-${range.key}`, {
 *         allowOverwrite: true,
 *         name: range.value.name,
 *         records: [range.value.record],
 *         ttl: 60,
 *         type: aws.route53.recordtype.RecordType[range.value.type],
 *         zoneId: aws_route53_zone.example.zone_id,
 *     }));
 * }
 * ```
 *
 * ## Import
 *
 * Certificates can be imported using their ARN, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:acm/certificate:Certificate cert arn:aws:acm:eu-central-1:123456789012:certificate/7e7a28d2-163f-4b8f-b9cd-822f96c08d6a
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:acm/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * ARN of the certificate
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * ARN of an ACM PCA
     */
    public readonly certificateAuthorityArn!: pulumi.Output<string | undefined>;
    /**
     * Certificate's PEM-formatted public key
     */
    public readonly certificateBody!: pulumi.Output<string | undefined>;
    /**
     * Certificate's PEM-formatted chain
     * * Creating a private CA issued certificate
     */
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    /**
     * Fully qualified domain name (FQDN) in the certificate.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Set of domain validation objects which can be used to complete certificate validation. Can have more than one element, e.g., if SANs are defined. Only set if `DNS`-validation was used.
     */
    public /*out*/ readonly domainValidationOptions!: pulumi.Output<outputs.acm.CertificateDomainValidationOption[]>;
    /**
     * Expiration date and time of the certificate.
     */
    public /*out*/ readonly notAfter!: pulumi.Output<string>;
    /**
     * Start of the validity period of the certificate.
     */
    public /*out*/ readonly notBefore!: pulumi.Output<string>;
    /**
     * Configuration block used to set certificate options. Detailed below.
     */
    public readonly options!: pulumi.Output<outputs.acm.CertificateOptions | undefined>;
    /**
     * Certificate's PEM-formatted private key
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * Status of the certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`).
     */
    public readonly subjectAlternativeNames!: pulumi.Output<string[]>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * List of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.
     */
    public /*out*/ readonly validationEmails!: pulumi.Output<string[]>;
    public readonly validationMethod!: pulumi.Output<string>;
    /**
     * Configuration block used to specify information about the initial validation of each domain name. Detailed below.
     * * Importing an existing certificate
     */
    public readonly validationOptions!: pulumi.Output<outputs.acm.CertificateValidationOption[] | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificateAuthorityArn"] = state ? state.certificateAuthorityArn : undefined;
            resourceInputs["certificateBody"] = state ? state.certificateBody : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainValidationOptions"] = state ? state.domainValidationOptions : undefined;
            resourceInputs["notAfter"] = state ? state.notAfter : undefined;
            resourceInputs["notBefore"] = state ? state.notBefore : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["validationEmails"] = state ? state.validationEmails : undefined;
            resourceInputs["validationMethod"] = state ? state.validationMethod : undefined;
            resourceInputs["validationOptions"] = state ? state.validationOptions : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            resourceInputs["certificateAuthorityArn"] = args ? args.certificateAuthorityArn : undefined;
            resourceInputs["certificateBody"] = args ? args.certificateBody : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["subjectAlternativeNames"] = args ? args.subjectAlternativeNames : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["validationMethod"] = args ? args.validationMethod : undefined;
            resourceInputs["validationOptions"] = args ? args.validationOptions : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainValidationOptions"] = undefined /*out*/;
            resourceInputs["notAfter"] = undefined /*out*/;
            resourceInputs["notBefore"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["validationEmails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * ARN of the certificate
     */
    arn?: pulumi.Input<string>;
    /**
     * ARN of an ACM PCA
     */
    certificateAuthorityArn?: pulumi.Input<string>;
    /**
     * Certificate's PEM-formatted public key
     */
    certificateBody?: pulumi.Input<string>;
    /**
     * Certificate's PEM-formatted chain
     * * Creating a private CA issued certificate
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * Fully qualified domain name (FQDN) in the certificate.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Set of domain validation objects which can be used to complete certificate validation. Can have more than one element, e.g., if SANs are defined. Only set if `DNS`-validation was used.
     */
    domainValidationOptions?: pulumi.Input<pulumi.Input<inputs.acm.CertificateDomainValidationOption>[]>;
    /**
     * Expiration date and time of the certificate.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * Start of the validity period of the certificate.
     */
    notBefore?: pulumi.Input<string>;
    /**
     * Configuration block used to set certificate options. Detailed below.
     */
    options?: pulumi.Input<inputs.acm.CertificateOptions>;
    /**
     * Certificate's PEM-formatted private key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Status of the certificate.
     */
    status?: pulumi.Input<string>;
    /**
     * Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`).
     */
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.
     */
    validationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    validationMethod?: pulumi.Input<string>;
    /**
     * Configuration block used to specify information about the initial validation of each domain name. Detailed below.
     * * Importing an existing certificate
     */
    validationOptions?: pulumi.Input<pulumi.Input<inputs.acm.CertificateValidationOption>[]>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * ARN of an ACM PCA
     */
    certificateAuthorityArn?: pulumi.Input<string>;
    /**
     * Certificate's PEM-formatted public key
     */
    certificateBody?: pulumi.Input<string>;
    /**
     * Certificate's PEM-formatted chain
     * * Creating a private CA issued certificate
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * Fully qualified domain name (FQDN) in the certificate.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Configuration block used to set certificate options. Detailed below.
     */
    options?: pulumi.Input<inputs.acm.CertificateOptions>;
    /**
     * Certificate's PEM-formatted private key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`).
     */
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    validationMethod?: pulumi.Input<string>;
    /**
     * Configuration block used to specify information about the initial validation of each domain name. Detailed below.
     * * Importing an existing certificate
     */
    validationOptions?: pulumi.Input<pulumi.Input<inputs.acm.CertificateValidationOption>[]>;
}
