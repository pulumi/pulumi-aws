// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export function getCertificate(args: GetCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:acm/getCertificate:getCertificate", {
        "domain": args.domain,
        "keyTypes": args.keyTypes,
        "mostRecent": args.mostRecent,
        "statuses": args.statuses,
        "tags": args.tags,
        "types": args.types,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificate.
 */
export interface GetCertificateArgs {
    domain: string;
    keyTypes?: string[];
    mostRecent?: boolean;
    statuses?: string[];
    tags?: {[key: string]: string};
    types?: string[];
}

/**
 * A collection of values returned by getCertificate.
 */
export interface GetCertificateResult {
    readonly arn: string;
    readonly certificate: string;
    readonly certificateChain: string;
    readonly domain: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keyTypes?: string[];
    readonly mostRecent?: boolean;
    readonly status: string;
    readonly statuses?: string[];
    readonly tags: {[key: string]: string};
    readonly types?: string[];
}
export function getCertificateOutput(args: GetCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateResult> {
    return pulumi.output(args).apply((a: any) => getCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getCertificate.
 */
export interface GetCertificateOutputArgs {
    domain: pulumi.Input<string>;
    keyTypes?: pulumi.Input<pulumi.Input<string>[]>;
    mostRecent?: pulumi.Input<boolean>;
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    types?: pulumi.Input<pulumi.Input<string>[]>;
}
