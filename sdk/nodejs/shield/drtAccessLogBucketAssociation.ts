// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Shield DRT Access Log Bucket Association. Up to 10 log buckets can be associated for DRT Access sharing with the Shield Response Team (SRT).
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testDrtAccessRoleArnAssociation = new aws.shield.DrtAccessRoleArnAssociation("testDrtAccessRoleArnAssociation", {roleArn: `arn:aws:iam:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:${_var.shield_drt_access_role_name}`});
 * const testDrtAccessLogBucketAssociation = new aws.shield.DrtAccessLogBucketAssociation("testDrtAccessLogBucketAssociation", {
 *     logBucket: _var.shield_drt_access_log_bucket,
 *     roleArnAssociationId: testDrtAccessRoleArnAssociation.id,
 * });
 * ```
 */
export class DrtAccessLogBucketAssociation extends pulumi.CustomResource {
    /**
     * Get an existing DrtAccessLogBucketAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DrtAccessLogBucketAssociationState, opts?: pulumi.CustomResourceOptions): DrtAccessLogBucketAssociation {
        return new DrtAccessLogBucketAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:shield/drtAccessLogBucketAssociation:DrtAccessLogBucketAssociation';

    /**
     * Returns true if the given object is an instance of DrtAccessLogBucketAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DrtAccessLogBucketAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DrtAccessLogBucketAssociation.__pulumiType;
    }

    /**
     * The Amazon S3 bucket that contains the logs that you want to share.
     */
    public readonly logBucket!: pulumi.Output<string>;
    /**
     * The ID of the Role Arn association used for allowing Shield DRT Access.
     */
    public readonly roleArnAssociationId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.shield.DrtAccessLogBucketAssociationTimeouts | undefined>;

    /**
     * Create a DrtAccessLogBucketAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DrtAccessLogBucketAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DrtAccessLogBucketAssociationArgs | DrtAccessLogBucketAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DrtAccessLogBucketAssociationState | undefined;
            resourceInputs["logBucket"] = state ? state.logBucket : undefined;
            resourceInputs["roleArnAssociationId"] = state ? state.roleArnAssociationId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DrtAccessLogBucketAssociationArgs | undefined;
            if ((!args || args.logBucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logBucket'");
            }
            if ((!args || args.roleArnAssociationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArnAssociationId'");
            }
            resourceInputs["logBucket"] = args ? args.logBucket : undefined;
            resourceInputs["roleArnAssociationId"] = args ? args.roleArnAssociationId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DrtAccessLogBucketAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DrtAccessLogBucketAssociation resources.
 */
export interface DrtAccessLogBucketAssociationState {
    /**
     * The Amazon S3 bucket that contains the logs that you want to share.
     */
    logBucket?: pulumi.Input<string>;
    /**
     * The ID of the Role Arn association used for allowing Shield DRT Access.
     */
    roleArnAssociationId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.shield.DrtAccessLogBucketAssociationTimeouts>;
}

/**
 * The set of arguments for constructing a DrtAccessLogBucketAssociation resource.
 */
export interface DrtAccessLogBucketAssociationArgs {
    /**
     * The Amazon S3 bucket that contains the logs that you want to share.
     */
    logBucket: pulumi.Input<string>;
    /**
     * The ID of the Role Arn association used for allowing Shield DRT Access.
     */
    roleArnAssociationId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.shield.DrtAccessLogBucketAssociationTimeouts>;
}
