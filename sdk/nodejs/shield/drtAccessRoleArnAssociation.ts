// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Authorizes the Shield Response Team (SRT) using the specified role, to access your AWS account to assist with DDoS attack mitigation during potential attacks. For more information see [Configure AWS SRT Support](https://docs.aws.amazon.com/waf/latest/developerguide/authorize-srt.html)
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testRole = new aws.iam.Role("testRole", {assumeRolePolicy: JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: [{
 *         Sid: "",
 *         Effect: "Allow",
 *         Principal: {
 *             Service: "drt.shield.amazonaws.com",
 *         },
 *         Action: "sts:AssumeRole",
 *     }],
 * })});
 * const testRolePolicyAttachment = new aws.iam.RolePolicyAttachment("testRolePolicyAttachment", {
 *     role: testRole.name,
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy",
 * });
 * const testDrtAccessRoleArnAssociation = new aws.shield.DrtAccessRoleArnAssociation("testDrtAccessRoleArnAssociation", {roleArn: testRole.arn});
 * ```
 */
export class DrtAccessRoleArnAssociation extends pulumi.CustomResource {
    /**
     * Get an existing DrtAccessRoleArnAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DrtAccessRoleArnAssociationState, opts?: pulumi.CustomResourceOptions): DrtAccessRoleArnAssociation {
        return new DrtAccessRoleArnAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:shield/drtAccessRoleArnAssociation:DrtAccessRoleArnAssociation';

    /**
     * Returns true if the given object is an instance of DrtAccessRoleArnAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DrtAccessRoleArnAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DrtAccessRoleArnAssociation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
     */
    public readonly roleArn!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.shield.DrtAccessRoleArnAssociationTimeouts | undefined>;

    /**
     * Create a DrtAccessRoleArnAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DrtAccessRoleArnAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DrtAccessRoleArnAssociationArgs | DrtAccessRoleArnAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DrtAccessRoleArnAssociationState | undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DrtAccessRoleArnAssociationArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DrtAccessRoleArnAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DrtAccessRoleArnAssociation resources.
 */
export interface DrtAccessRoleArnAssociationState {
    /**
     * The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
     */
    roleArn?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.shield.DrtAccessRoleArnAssociationTimeouts>;
}

/**
 * The set of arguments for constructing a DrtAccessRoleArnAssociation resource.
 */
export interface DrtAccessRoleArnAssociationArgs {
    /**
     * The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
     */
    roleArn: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.shield.DrtAccessRoleArnAssociationTimeouts>;
}
