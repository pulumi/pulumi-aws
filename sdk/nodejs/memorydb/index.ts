// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;

export { GetAclArgs, GetAclResult, GetAclOutputArgs } from "./getAcl";
export const getAcl: typeof import("./getAcl").getAcl = null as any;
export const getAclOutput: typeof import("./getAcl").getAclOutput = null as any;

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;

export { GetParameterGroupArgs, GetParameterGroupResult, GetParameterGroupOutputArgs } from "./getParameterGroup";
export const getParameterGroup: typeof import("./getParameterGroup").getParameterGroup = null as any;
export const getParameterGroupOutput: typeof import("./getParameterGroup").getParameterGroupOutput = null as any;

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;

export { GetSubnetGroupArgs, GetSubnetGroupResult, GetSubnetGroupOutputArgs } from "./getSubnetGroup";
export const getSubnetGroup: typeof import("./getSubnetGroup").getSubnetGroup = null as any;
export const getSubnetGroupOutput: typeof import("./getSubnetGroup").getSubnetGroupOutput = null as any;

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;

export { ParameterGroupArgs, ParameterGroupState } from "./parameterGroup";
export type ParameterGroup = import("./parameterGroup").ParameterGroup;
export const ParameterGroup: typeof import("./parameterGroup").ParameterGroup = null as any;

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;

export { SubnetGroupArgs, SubnetGroupState } from "./subnetGroup";
export type SubnetGroup = import("./subnetGroup").SubnetGroup;
export const SubnetGroup: typeof import("./subnetGroup").SubnetGroup = null as any;

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;

utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
utilities.lazyLoad(exports, ["getAcl","getAclOutput"], () => require("./getAcl"));
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));
utilities.lazyLoad(exports, ["getParameterGroup","getParameterGroupOutput"], () => require("./getParameterGroup"));
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));
utilities.lazyLoad(exports, ["getSubnetGroup","getSubnetGroupOutput"], () => require("./getSubnetGroup"));
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));
utilities.lazyLoad(exports, ["ParameterGroup"], () => require("./parameterGroup"));
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));
utilities.lazyLoad(exports, ["SubnetGroup"], () => require("./subnetGroup"));
utilities.lazyLoad(exports, ["User"], () => require("./user"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:memorydb/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "aws:memorydb/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws:memorydb/parameterGroup:ParameterGroup":
                return new ParameterGroup(name, <any>undefined, { urn })
            case "aws:memorydb/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "aws:memorydb/subnetGroup:SubnetGroup":
                return new SubnetGroup(name, <any>undefined, { urn })
            case "aws:memorydb/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "memorydb/acl", _module)
pulumi.runtime.registerResourceModule("aws", "memorydb/cluster", _module)
pulumi.runtime.registerResourceModule("aws", "memorydb/parameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "memorydb/snapshot", _module)
pulumi.runtime.registerResourceModule("aws", "memorydb/subnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "memorydb/user", _module)
