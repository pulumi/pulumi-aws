// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides information about a MemoryDB Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.memorydb.getCluster({
 *     name: "my-cluster",
 * });
 * ```
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:memorydb/getCluster:getCluster", {
        "name": args.name,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * Name of the cluster.
     */
    name: string;
    /**
     * Map of tags assigned to the cluster.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    /**
     * Name of the Access Control List associated with the cluster.
     */
    readonly aclName: string;
    /**
     * ARN of the cluster.
     */
    readonly arn: string;
    /**
     * True when the cluster allows automatic minor version upgrades.
     * * `clusterEndpoint`
     */
    readonly autoMinorVersionUpgrade: boolean;
    readonly clusterEndpoints: outputs.memorydb.GetClusterClusterEndpoint[];
    /**
     * True when data tiering is enabled.
     */
    readonly dataTiering: boolean;
    /**
     * Description for the cluster.
     */
    readonly description: string;
    /**
     * Patch version number of the Redis engine used by the cluster.
     */
    readonly enginePatchVersion: string;
    /**
     * Version number of the Redis engine used by the cluster.
     */
    readonly engineVersion: string;
    /**
     * Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
     */
    readonly finalSnapshotName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ARN of the KMS key used to encrypt the cluster at rest.
     */
    readonly kmsKeyArn: string;
    /**
     * Weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). Example: `sun:23:00-mon:01:30`.
     */
    readonly maintenanceWindow: string;
    /**
     * Name of this node.
     * * `endpoint`
     */
    readonly name: string;
    /**
     * Compute and memory capacity of the nodes in the cluster.
     */
    readonly nodeType: string;
    /**
     * The number of replicas to apply to each shard.
     */
    readonly numReplicasPerShard: number;
    /**
     * Number of shards in the cluster.
     */
    readonly numShards: number;
    /**
     * The name of the parameter group associated with the cluster.
     */
    readonly parameterGroupName: string;
    /**
     * Port number that this node is listening on.
     */
    readonly port: number;
    /**
     * Set of VPC Security Group ID-s associated with this cluster.
     */
    readonly securityGroupIds: string[];
    /**
     * Set of shards in this cluster.
     */
    readonly shards: outputs.memorydb.GetClusterShard[];
    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled.
     */
    readonly snapshotRetentionLimit: number;
    /**
     * Daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
     */
    readonly snapshotWindow: string;
    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     * * `subnetGroupName` -The name of the subnet group used for the cluster.
     */
    readonly snsTopicArn: string;
    readonly subnetGroupName: string;
    /**
     * Map of tags assigned to the cluster.
     */
    readonly tags: {[key: string]: string};
    /**
     * When true, in-transit encryption is enabled for the cluster.
     */
    readonly tlsEnabled: boolean;
}
/**
 * Provides information about a MemoryDB Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.memorydb.getCluster({
 *     name: "my-cluster",
 * });
 * ```
 */
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply((a: any) => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    /**
     * Name of the cluster.
     */
    name: pulumi.Input<string>;
    /**
     * Map of tags assigned to the cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
