// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:memorydb/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly aclName!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoMinorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly clusterEndpoints!: pulumi.Output<outputs.memorydb.ClusterClusterEndpoint[]>;
    public readonly dataTiering!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly enginePatchVersion!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly finalSnapshotName!: pulumi.Output<string | undefined>;
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    public readonly maintenanceWindow!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly numReplicasPerShard!: pulumi.Output<number | undefined>;
    public readonly numShards!: pulumi.Output<number | undefined>;
    public readonly parameterGroupName!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly shards!: pulumi.Output<outputs.memorydb.ClusterShard[]>;
    public readonly snapshotArns!: pulumi.Output<string[] | undefined>;
    public readonly snapshotName!: pulumi.Output<string | undefined>;
    public readonly snapshotRetentionLimit!: pulumi.Output<number>;
    public readonly snapshotWindow!: pulumi.Output<string>;
    public readonly snsTopicArn!: pulumi.Output<string | undefined>;
    public readonly subnetGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly tlsEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["aclName"] = state ? state.aclName : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            resourceInputs["clusterEndpoints"] = state ? state.clusterEndpoints : undefined;
            resourceInputs["dataTiering"] = state ? state.dataTiering : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enginePatchVersion"] = state ? state.enginePatchVersion : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["finalSnapshotName"] = state ? state.finalSnapshotName : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["numReplicasPerShard"] = state ? state.numReplicasPerShard : undefined;
            resourceInputs["numShards"] = state ? state.numShards : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["shards"] = state ? state.shards : undefined;
            resourceInputs["snapshotArns"] = state ? state.snapshotArns : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = state ? state.snapshotWindow : undefined;
            resourceInputs["snsTopicArn"] = state ? state.snsTopicArn : undefined;
            resourceInputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tlsEnabled"] = state ? state.tlsEnabled : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.aclName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclName'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            resourceInputs["aclName"] = args ? args.aclName : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["dataTiering"] = args ? args.dataTiering : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["finalSnapshotName"] = args ? args.finalSnapshotName : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["numReplicasPerShard"] = args ? args.numReplicasPerShard : undefined;
            resourceInputs["numShards"] = args ? args.numShards : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["snapshotArns"] = args ? args.snapshotArns : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = args ? args.snapshotWindow : undefined;
            resourceInputs["snsTopicArn"] = args ? args.snsTopicArn : undefined;
            resourceInputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tlsEnabled"] = args ? args.tlsEnabled : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterEndpoints"] = undefined /*out*/;
            resourceInputs["enginePatchVersion"] = undefined /*out*/;
            resourceInputs["shards"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    aclName?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    clusterEndpoints?: pulumi.Input<pulumi.Input<inputs.memorydb.ClusterClusterEndpoint>[]>;
    dataTiering?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enginePatchVersion?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    finalSnapshotName?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    numReplicasPerShard?: pulumi.Input<number>;
    numShards?: pulumi.Input<number>;
    parameterGroupName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    shards?: pulumi.Input<pulumi.Input<inputs.memorydb.ClusterShard>[]>;
    snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotName?: pulumi.Input<string>;
    snapshotRetentionLimit?: pulumi.Input<number>;
    snapshotWindow?: pulumi.Input<string>;
    snsTopicArn?: pulumi.Input<string>;
    subnetGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    aclName: pulumi.Input<string>;
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    dataTiering?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    finalSnapshotName?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    nodeType: pulumi.Input<string>;
    numReplicasPerShard?: pulumi.Input<number>;
    numShards?: pulumi.Input<number>;
    parameterGroupName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotName?: pulumi.Input<string>;
    snapshotRetentionLimit?: pulumi.Input<number>;
    snapshotWindow?: pulumi.Input<string>;
    snsTopicArn?: pulumi.Input<string>;
    subnetGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsEnabled?: pulumi.Input<boolean>;
}
