// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Manages an Image Builder Infrastructure Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.imagebuilder.InfrastructureConfiguration("example", {
 *     description: "example description",
 *     instanceProfileName: aws_iam_instance_profile.example.name,
 *     instanceTypes: [
 *         "t2.nano",
 *         "t3.micro",
 *     ],
 *     keyPair: aws_key_pair.example.key_name,
 *     securityGroupIds: [aws_security_group.example.id],
 *     snsTopicArn: aws_sns_topic.example.arn,
 *     subnetId: aws_subnet.main.id,
 *     terminateInstanceOnFailure: true,
 *     logging: {
 *         s3Logs: {
 *             s3BucketName: aws_s3_bucket.example.bucket,
 *             s3KeyPrefix: "logs",
 *         },
 *     },
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * `aws_imagebuilder_infrastructure_configuration` can be imported using the Amazon Resource Name (ARN), e.g.
 *
 * ```sh
 *  $ pulumi import aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration example arn:aws:imagebuilder:us-east-1:123456789012:infrastructure-component/example
 * ```
 */
export class InfrastructureConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing InfrastructureConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureConfigurationState, opts?: pulumi.CustomResourceOptions): InfrastructureConfiguration {
        return new InfrastructureConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration';

    /**
     * Returns true if the given object is an instance of InfrastructureConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfrastructureConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfrastructureConfiguration.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the configuration.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Date when the configuration was created.
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * Date when the configuration was updated.
     */
    public /*out*/ readonly dateUpdated!: pulumi.Output<string>;
    /**
     * Description for the configuration.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of IAM Instance Profile.
     */
    public readonly instanceProfileName!: pulumi.Output<string>;
    /**
     * Set of EC2 Instance Types.
     */
    public readonly instanceTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Name of EC2 Key Pair.
     */
    public readonly keyPair!: pulumi.Output<string | undefined>;
    /**
     * Configuration block with logging settings. Detailed below.
     */
    public readonly logging!: pulumi.Output<outputs.imagebuilder.InfrastructureConfigurationLogging | undefined>;
    /**
     * Name for the configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     */
    public readonly resourceTags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Set of EC2 Security Group identifiers.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     */
    public readonly snsTopicArn!: pulumi.Output<string | undefined>;
    /**
     * EC2 Subnet identifier. Also requires `securityGroupIds` argument.
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;
    /**
     * Key-value map of resource tags to assign to the configuration.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     */
    public readonly terminateInstanceOnFailure!: pulumi.Output<boolean | undefined>;

    /**
     * Create a InfrastructureConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureConfigurationArgs | InfrastructureConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as InfrastructureConfigurationState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["dateCreated"] = state ? state.dateCreated : undefined;
            inputs["dateUpdated"] = state ? state.dateUpdated : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["instanceProfileName"] = state ? state.instanceProfileName : undefined;
            inputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            inputs["keyPair"] = state ? state.keyPair : undefined;
            inputs["logging"] = state ? state.logging : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceTags"] = state ? state.resourceTags : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["snsTopicArn"] = state ? state.snsTopicArn : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["terminateInstanceOnFailure"] = state ? state.terminateInstanceOnFailure : undefined;
        } else {
            const args = argsOrState as InfrastructureConfigurationArgs | undefined;
            if ((!args || args.instanceProfileName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'instanceProfileName'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["instanceProfileName"] = args ? args.instanceProfileName : undefined;
            inputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            inputs["keyPair"] = args ? args.keyPair : undefined;
            inputs["logging"] = args ? args.logging : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceTags"] = args ? args.resourceTags : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["snsTopicArn"] = args ? args.snsTopicArn : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["terminateInstanceOnFailure"] = args ? args.terminateInstanceOnFailure : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dateCreated"] = undefined /*out*/;
            inputs["dateUpdated"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(InfrastructureConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfrastructureConfiguration resources.
 */
export interface InfrastructureConfigurationState {
    /**
     * Amazon Resource Name (ARN) of the configuration.
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * Date when the configuration was created.
     */
    readonly dateCreated?: pulumi.Input<string>;
    /**
     * Date when the configuration was updated.
     */
    readonly dateUpdated?: pulumi.Input<string>;
    /**
     * Description for the configuration.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Name of IAM Instance Profile.
     */
    readonly instanceProfileName?: pulumi.Input<string>;
    /**
     * Set of EC2 Instance Types.
     */
    readonly instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of EC2 Key Pair.
     */
    readonly keyPair?: pulumi.Input<string>;
    /**
     * Configuration block with logging settings. Detailed below.
     */
    readonly logging?: pulumi.Input<inputs.imagebuilder.InfrastructureConfigurationLogging>;
    /**
     * Name for the configuration.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     */
    readonly resourceTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set of EC2 Security Group identifiers.
     */
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     */
    readonly snsTopicArn?: pulumi.Input<string>;
    /**
     * EC2 Subnet identifier. Also requires `securityGroupIds` argument.
     */
    readonly subnetId?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags to assign to the configuration.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     */
    readonly terminateInstanceOnFailure?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a InfrastructureConfiguration resource.
 */
export interface InfrastructureConfigurationArgs {
    /**
     * Description for the configuration.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Name of IAM Instance Profile.
     */
    readonly instanceProfileName: pulumi.Input<string>;
    /**
     * Set of EC2 Instance Types.
     */
    readonly instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of EC2 Key Pair.
     */
    readonly keyPair?: pulumi.Input<string>;
    /**
     * Configuration block with logging settings. Detailed below.
     */
    readonly logging?: pulumi.Input<inputs.imagebuilder.InfrastructureConfigurationLogging>;
    /**
     * Name for the configuration.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     */
    readonly resourceTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set of EC2 Security Group identifiers.
     */
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     */
    readonly snsTopicArn?: pulumi.Input<string>;
    /**
     * EC2 Subnet identifier. Also requires `securityGroupIds` argument.
     */
    readonly subnetId?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags to assign to the configuration.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     */
    readonly terminateInstanceOnFailure?: pulumi.Input<boolean>;
}
