// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages an Image Builder Infrastructure Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.imagebuilder.InfrastructureConfiguration("example", {
 *     description: "example description",
 *     instanceProfileName: exampleAwsIamInstanceProfile.name,
 *     instanceTypes: [
 *         "t2.nano",
 *         "t3.micro",
 *     ],
 *     keyPair: exampleAwsKeyPair.keyName,
 *     name: "example",
 *     securityGroupIds: [exampleAwsSecurityGroup.id],
 *     snsTopicArn: exampleAwsSnsTopic.arn,
 *     subnetId: main.id,
 *     terminateInstanceOnFailure: true,
 *     logging: {
 *         s3Logs: {
 *             s3BucketName: exampleAwsS3Bucket.bucket,
 *             s3KeyPrefix: "logs",
 *         },
 *     },
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ### Identity Schema
 *
 * #### Required
 *
 * - `arn` (String) Amazon Resource Name (ARN) of the Image Builder infrastructure configuration.
 *
 * Using `pulumi import`, import `aws_imagebuilder_infrastructure_configuration` using the Amazon Resource Name (ARN). For example:
 *
 * console
 *
 * % pulumi import aws_imagebuilder_infrastructure_configuration.example arn:aws:imagebuilder:us-east-1:123456789012:infrastructure-configuration/example
 */
export class InfrastructureConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing InfrastructureConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureConfigurationState, opts?: pulumi.CustomResourceOptions): InfrastructureConfiguration {
        return new InfrastructureConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration';

    /**
     * Returns true if the given object is an instance of InfrastructureConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfrastructureConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfrastructureConfiguration.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the configuration.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Date when the configuration was created.
     */
    declare public /*out*/ readonly dateCreated: pulumi.Output<string>;
    /**
     * Date when the configuration was updated.
     */
    declare public /*out*/ readonly dateUpdated: pulumi.Output<string>;
    /**
     * Description for the configuration.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
     */
    declare public readonly instanceMetadataOptions: pulumi.Output<outputs.imagebuilder.InfrastructureConfigurationInstanceMetadataOptions | undefined>;
    /**
     * Name of IAM Instance Profile.
     */
    declare public readonly instanceProfileName: pulumi.Output<string>;
    /**
     * Set of EC2 Instance Types.
     */
    declare public readonly instanceTypes: pulumi.Output<string[] | undefined>;
    /**
     * Name of EC2 Key Pair.
     */
    declare public readonly keyPair: pulumi.Output<string | undefined>;
    /**
     * Configuration block with logging settings. Detailed below.
     */
    declare public readonly logging: pulumi.Output<outputs.imagebuilder.InfrastructureConfigurationLogging | undefined>;
    /**
     * Name for the configuration.
     *
     * The following arguments are optional:
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Configuration block with placement settings that define where the instances that are launched from your image will run. Detailed below.
     */
    declare public readonly placement: pulumi.Output<outputs.imagebuilder.InfrastructureConfigurationPlacement | undefined>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     */
    declare public readonly resourceTags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Set of EC2 Security Group identifiers.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     */
    declare public readonly snsTopicArn: pulumi.Output<string | undefined>;
    /**
     * EC2 Subnet identifier. Also requires `securityGroupIds` argument.
     */
    declare public readonly subnetId: pulumi.Output<string | undefined>;
    /**
     * Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     */
    declare public readonly terminateInstanceOnFailure: pulumi.Output<boolean | undefined>;

    /**
     * Create a InfrastructureConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureConfigurationArgs | InfrastructureConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfrastructureConfigurationState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["dateUpdated"] = state?.dateUpdated;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceMetadataOptions"] = state?.instanceMetadataOptions;
            resourceInputs["instanceProfileName"] = state?.instanceProfileName;
            resourceInputs["instanceTypes"] = state?.instanceTypes;
            resourceInputs["keyPair"] = state?.keyPair;
            resourceInputs["logging"] = state?.logging;
            resourceInputs["name"] = state?.name;
            resourceInputs["placement"] = state?.placement;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceTags"] = state?.resourceTags;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["snsTopicArn"] = state?.snsTopicArn;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["terminateInstanceOnFailure"] = state?.terminateInstanceOnFailure;
        } else {
            const args = argsOrState as InfrastructureConfigurationArgs | undefined;
            if (args?.instanceProfileName === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceProfileName'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["instanceMetadataOptions"] = args?.instanceMetadataOptions;
            resourceInputs["instanceProfileName"] = args?.instanceProfileName;
            resourceInputs["instanceTypes"] = args?.instanceTypes;
            resourceInputs["keyPair"] = args?.keyPair;
            resourceInputs["logging"] = args?.logging;
            resourceInputs["name"] = args?.name;
            resourceInputs["placement"] = args?.placement;
            resourceInputs["region"] = args?.region;
            resourceInputs["resourceTags"] = args?.resourceTags;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["snsTopicArn"] = args?.snsTopicArn;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["terminateInstanceOnFailure"] = args?.terminateInstanceOnFailure;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateUpdated"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfrastructureConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfrastructureConfiguration resources.
 */
export interface InfrastructureConfigurationState {
    /**
     * Amazon Resource Name (ARN) of the configuration.
     */
    arn?: pulumi.Input<string>;
    /**
     * Date when the configuration was created.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * Date when the configuration was updated.
     */
    dateUpdated?: pulumi.Input<string>;
    /**
     * Description for the configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.imagebuilder.InfrastructureConfigurationInstanceMetadataOptions>;
    /**
     * Name of IAM Instance Profile.
     */
    instanceProfileName?: pulumi.Input<string>;
    /**
     * Set of EC2 Instance Types.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of EC2 Key Pair.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Configuration block with logging settings. Detailed below.
     */
    logging?: pulumi.Input<inputs.imagebuilder.InfrastructureConfigurationLogging>;
    /**
     * Name for the configuration.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration block with placement settings that define where the instances that are launched from your image will run. Detailed below.
     */
    placement?: pulumi.Input<inputs.imagebuilder.InfrastructureConfigurationPlacement>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     */
    resourceTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set of EC2 Security Group identifiers.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     */
    snsTopicArn?: pulumi.Input<string>;
    /**
     * EC2 Subnet identifier. Also requires `securityGroupIds` argument.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     */
    terminateInstanceOnFailure?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a InfrastructureConfiguration resource.
 */
export interface InfrastructureConfigurationArgs {
    /**
     * Description for the configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.imagebuilder.InfrastructureConfigurationInstanceMetadataOptions>;
    /**
     * Name of IAM Instance Profile.
     */
    instanceProfileName: pulumi.Input<string>;
    /**
     * Set of EC2 Instance Types.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of EC2 Key Pair.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Configuration block with logging settings. Detailed below.
     */
    logging?: pulumi.Input<inputs.imagebuilder.InfrastructureConfigurationLogging>;
    /**
     * Name for the configuration.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration block with placement settings that define where the instances that are launched from your image will run. Detailed below.
     */
    placement?: pulumi.Input<inputs.imagebuilder.InfrastructureConfigurationPlacement>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags to assign to infrastructure created by the configuration.
     */
    resourceTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set of EC2 Security Group identifiers.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Amazon Resource Name (ARN) of SNS Topic.
     */
    snsTopicArn?: pulumi.Input<string>;
    /**
     * EC2 Subnet identifier. Also requires `securityGroupIds` argument.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
     */
    terminateInstanceOnFailure?: pulumi.Input<boolean>;
}
