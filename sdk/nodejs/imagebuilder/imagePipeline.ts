// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages an Image Builder Image Pipeline.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.imagebuilder.ImagePipeline("example", {
 *     imageRecipeArn: aws_imagebuilder_image_recipe.example.arn,
 *     infrastructureConfigurationArn: aws_imagebuilder_infrastructure_configuration.example.arn,
 *     schedule: {
 *         scheduleExpression: "cron(0 0 * * ? *)",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_imagebuilder_image_pipeline.example
 *
 *  id = "arn:aws:imagebuilder:us-east-1:123456789012:image-pipeline/example" } Using `pulumi import`, import `aws_imagebuilder_image_pipeline` resources using the Amazon Resource Name (ARN). For exampleconsole % pulumi import aws_imagebuilder_image_pipeline.example arn:aws:imagebuilder:us-east-1:123456789012:image-pipeline/example
 */
export class ImagePipeline extends pulumi.CustomResource {
    /**
     * Get an existing ImagePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagePipelineState, opts?: pulumi.CustomResourceOptions): ImagePipeline {
        return new ImagePipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:imagebuilder/imagePipeline:ImagePipeline';

    /**
     * Returns true if the given object is an instance of ImagePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagePipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagePipeline.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the image pipeline.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the container recipe.
     */
    public readonly containerRecipeArn!: pulumi.Output<string | undefined>;
    /**
     * Date the image pipeline was created.
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * Date the image pipeline was last run.
     */
    public /*out*/ readonly dateLastRun!: pulumi.Output<string>;
    /**
     * Date the image pipeline will run next.
     */
    public /*out*/ readonly dateNextRun!: pulumi.Output<string>;
    /**
     * Date the image pipeline was updated.
     */
    public /*out*/ readonly dateUpdated!: pulumi.Output<string>;
    /**
     * Description of the image pipeline.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
     */
    public readonly distributionConfigurationArn!: pulumi.Output<string | undefined>;
    /**
     * Whether additional information about the image being created is collected. Defaults to `true`.
     */
    public readonly enhancedImageMetadataEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Amazon Resource Name (ARN) of the image recipe.
     */
    public readonly imageRecipeArn!: pulumi.Output<string | undefined>;
    /**
     * Configuration block with image tests configuration. Detailed below.
     */
    public readonly imageTestsConfiguration!: pulumi.Output<outputs.imagebuilder.ImagePipelineImageTestsConfiguration>;
    /**
     * Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
     */
    public readonly infrastructureConfigurationArn!: pulumi.Output<string>;
    /**
     * Name of the image pipeline.
     *
     * The following arguments are optional:
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Platform of the image pipeline.
     */
    public /*out*/ readonly platform!: pulumi.Output<string>;
    /**
     * Configuration block with schedule settings. Detailed below.
     */
    public readonly schedule!: pulumi.Output<outputs.imagebuilder.ImagePipelineSchedule | undefined>;
    /**
     * Status of the image pipeline. Valid values are `DISABLED` and `ENABLED`. Defaults to `ENABLED`.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Key-value map of resource tags for the image pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ImagePipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImagePipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagePipelineArgs | ImagePipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagePipelineState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["containerRecipeArn"] = state ? state.containerRecipeArn : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateLastRun"] = state ? state.dateLastRun : undefined;
            resourceInputs["dateNextRun"] = state ? state.dateNextRun : undefined;
            resourceInputs["dateUpdated"] = state ? state.dateUpdated : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["distributionConfigurationArn"] = state ? state.distributionConfigurationArn : undefined;
            resourceInputs["enhancedImageMetadataEnabled"] = state ? state.enhancedImageMetadataEnabled : undefined;
            resourceInputs["imageRecipeArn"] = state ? state.imageRecipeArn : undefined;
            resourceInputs["imageTestsConfiguration"] = state ? state.imageTestsConfiguration : undefined;
            resourceInputs["infrastructureConfigurationArn"] = state ? state.infrastructureConfigurationArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ImagePipelineArgs | undefined;
            if ((!args || args.infrastructureConfigurationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infrastructureConfigurationArn'");
            }
            resourceInputs["containerRecipeArn"] = args ? args.containerRecipeArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["distributionConfigurationArn"] = args ? args.distributionConfigurationArn : undefined;
            resourceInputs["enhancedImageMetadataEnabled"] = args ? args.enhancedImageMetadataEnabled : undefined;
            resourceInputs["imageRecipeArn"] = args ? args.imageRecipeArn : undefined;
            resourceInputs["imageTestsConfiguration"] = args ? args.imageTestsConfiguration : undefined;
            resourceInputs["infrastructureConfigurationArn"] = args ? args.infrastructureConfigurationArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateLastRun"] = undefined /*out*/;
            resourceInputs["dateNextRun"] = undefined /*out*/;
            resourceInputs["dateUpdated"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagePipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImagePipeline resources.
 */
export interface ImagePipelineState {
    /**
     * Amazon Resource Name (ARN) of the image pipeline.
     */
    arn?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the container recipe.
     */
    containerRecipeArn?: pulumi.Input<string>;
    /**
     * Date the image pipeline was created.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * Date the image pipeline was last run.
     */
    dateLastRun?: pulumi.Input<string>;
    /**
     * Date the image pipeline will run next.
     */
    dateNextRun?: pulumi.Input<string>;
    /**
     * Date the image pipeline was updated.
     */
    dateUpdated?: pulumi.Input<string>;
    /**
     * Description of the image pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
     */
    distributionConfigurationArn?: pulumi.Input<string>;
    /**
     * Whether additional information about the image being created is collected. Defaults to `true`.
     */
    enhancedImageMetadataEnabled?: pulumi.Input<boolean>;
    /**
     * Amazon Resource Name (ARN) of the image recipe.
     */
    imageRecipeArn?: pulumi.Input<string>;
    /**
     * Configuration block with image tests configuration. Detailed below.
     */
    imageTestsConfiguration?: pulumi.Input<inputs.imagebuilder.ImagePipelineImageTestsConfiguration>;
    /**
     * Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
     */
    infrastructureConfigurationArn?: pulumi.Input<string>;
    /**
     * Name of the image pipeline.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Platform of the image pipeline.
     */
    platform?: pulumi.Input<string>;
    /**
     * Configuration block with schedule settings. Detailed below.
     */
    schedule?: pulumi.Input<inputs.imagebuilder.ImagePipelineSchedule>;
    /**
     * Status of the image pipeline. Valid values are `DISABLED` and `ENABLED`. Defaults to `ENABLED`.
     */
    status?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags for the image pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ImagePipeline resource.
 */
export interface ImagePipelineArgs {
    /**
     * Amazon Resource Name (ARN) of the container recipe.
     */
    containerRecipeArn?: pulumi.Input<string>;
    /**
     * Description of the image pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
     */
    distributionConfigurationArn?: pulumi.Input<string>;
    /**
     * Whether additional information about the image being created is collected. Defaults to `true`.
     */
    enhancedImageMetadataEnabled?: pulumi.Input<boolean>;
    /**
     * Amazon Resource Name (ARN) of the image recipe.
     */
    imageRecipeArn?: pulumi.Input<string>;
    /**
     * Configuration block with image tests configuration. Detailed below.
     */
    imageTestsConfiguration?: pulumi.Input<inputs.imagebuilder.ImagePipelineImageTestsConfiguration>;
    /**
     * Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
     */
    infrastructureConfigurationArn: pulumi.Input<string>;
    /**
     * Name of the image pipeline.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration block with schedule settings. Detailed below.
     */
    schedule?: pulumi.Input<inputs.imagebuilder.ImagePipelineSchedule>;
    /**
     * Status of the image pipeline. Valid values are `DISABLED` and `ENABLED`. Defaults to `ENABLED`.
     */
    status?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags for the image pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
