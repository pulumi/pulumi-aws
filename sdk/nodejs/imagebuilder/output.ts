// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface ContainerRecipeComponent {
    /**
     * Amazon Resource Name (ARN) of the Image Builder Component to associate.
     */
    componentArn: string;
    /**
     * Configuration block(s) for parameters to configure the component. Detailed below.
     */
    parameters?: outputs.ContainerRecipeComponentParameter[];
}
export interface ContainerRecipeComponentParameter {
    /**
     * The name of the component parameter.
     */
    name: string;
    /**
     * The value for the named component parameter.
     */
    value: string;
}
export interface ContainerRecipeInstanceConfiguration {
    /**
     * Configuration block(s) with block device mappings for the container recipe. Detailed below.
     */
    blockDeviceMappings?: outputs.ContainerRecipeInstanceConfigurationBlockDeviceMapping[];
    /**
     * The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
     */
    image?: string;
}
export interface ContainerRecipeInstanceConfigurationBlockDeviceMapping {
    /**
     * Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
     */
    deviceName?: string;
    /**
     * Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
     */
    ebs?: outputs.ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs;
    /**
     * Set to `true` to remove a mapping from the parent image.
     */
    noDevice?: boolean;
    /**
     * Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
     */
    virtualName?: string;
}
export interface ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs {
    /**
     * Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
     */
    deleteOnTermination?: string;
    /**
     * Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
     */
    encrypted?: string;
    /**
     * Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
     */
    iops?: number;
    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
     */
    kmsKeyId?: string;
    /**
     * Identifier of the EC2 Volume Snapshot.
     */
    snapshotId?: string;
    /**
     * For GP3 volumes only. The throughput in MiB/s that the volume supports.
     */
    throughput?: number;
    /**
     * Size of the volume, in GiB.
     */
    volumeSize?: number;
    /**
     * Type of the volume. For example, `gp2` or `io2`.
     */
    volumeType?: string;
}
export interface ContainerRecipeTargetRepository {
    /**
     * The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
     */
    repositoryName: string;
    /**
     * The service in which this image is registered. Valid values: `ECR`.
     */
    service: string;
}
export interface DistributionConfigurationDistribution {
    /**
     * Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
     */
    amiDistributionConfiguration?: outputs.DistributionConfigurationDistributionAmiDistributionConfiguration;
    /**
     * Configuration block with container distribution settings. Detailed below.
     */
    containerDistributionConfiguration?: outputs.DistributionConfigurationDistributionContainerDistributionConfiguration;
    /**
     * Set of Windows faster-launching configurations to use for AMI distribution. Detailed below.
     */
    fastLaunchConfigurations?: outputs.DistributionConfigurationDistributionFastLaunchConfiguration[];
    /**
     * Set of launch template configuration settings that apply to image distribution. Detailed below.
     */
    launchTemplateConfigurations?: outputs.DistributionConfigurationDistributionLaunchTemplateConfiguration[];
    /**
     * Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
     */
    licenseConfigurationArns?: string[];
    /**
     * AWS Region for the distribution.
     *
     * The following arguments are optional:
     */
    region: string;
}
export interface DistributionConfigurationDistributionAmiDistributionConfiguration {
    /**
     * Key-value map of tags to apply to the distributed AMI.
     */
    amiTags?: {[key: string]: string};
    /**
     * Description to apply to the distributed AMI.
     */
    description?: string;
    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
     */
    kmsKeyId?: string;
    /**
     * Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
     */
    launchPermission?: outputs.DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission;
    /**
     * Name to apply to the distributed AMI.
     */
    name?: string;
    /**
     * Set of AWS Account identifiers to distribute the AMI.
     */
    targetAccountIds?: string[];
}
export interface DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission {
    /**
     * Set of AWS Organization ARNs to assign.
     */
    organizationArns?: string[];
    /**
     * Set of AWS Organizational Unit ARNs to assign.
     */
    organizationalUnitArns?: string[];
    /**
     * Set of EC2 launch permission user groups to assign. Use `all` to distribute a public AMI.
     */
    userGroups?: string[];
    /**
     * Set of AWS Account identifiers to assign.
     */
    userIds?: string[];
}
export interface DistributionConfigurationDistributionContainerDistributionConfiguration {
    /**
     * Set of tags that are attached to the container distribution configuration.
     */
    containerTags?: string[];
    /**
     * Description of the container distribution configuration.
     */
    description?: string;
    /**
     * Configuration block with the destination repository for the container distribution configuration.
     */
    targetRepository: outputs.DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository;
}
export interface DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository {
    /**
     * The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
     */
    repositoryName: string;
    /**
     * The service in which this image is registered. Valid values: `ECR`.
     */
    service: string;
}
export interface DistributionConfigurationDistributionFastLaunchConfiguration {
    /**
     * The owner account ID for the fast-launch enabled Windows AMI.
     */
    accountId: string;
    /**
     * A Boolean that represents the current state of faster launching for the Windows AMI. Set to `true` to start using Windows faster launching, or `false` to stop using it.
     */
    enabled: boolean;
    /**
     * Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
     */
    launchTemplate?: outputs.DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate;
    /**
     * The maximum number of parallel instances that are launched for creating resources.
     */
    maxParallelLaunches?: number;
    /**
     * Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
     */
    snapshotConfiguration?: outputs.DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration;
}
export interface DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate {
    /**
     * The ID of the launch template to use for faster launching for a Windows AMI.
     */
    launchTemplateId?: string;
    /**
     * The name of the launch template to use for faster launching for a Windows AMI.
     */
    launchTemplateName?: string;
    /**
     * The version of the launch template to use for faster launching for a Windows AMI.
     */
    launchTemplateVersion?: string;
}
export interface DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration {
    /**
     * The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
     */
    targetResourceCount?: number;
}
export interface DistributionConfigurationDistributionLaunchTemplateConfiguration {
    /**
     * The account ID that this configuration applies to.
     */
    accountId?: string;
    /**
     * Indicates whether to set the specified Amazon EC2 launch template as the default launch template. Defaults to `true`.
     */
    default?: boolean;
    /**
     * The ID of the Amazon EC2 launch template to use.
     */
    launchTemplateId: string;
}
export interface ImageImageScanningConfiguration {
    /**
     * Configuration block with ECR configuration. Detailed below.
     */
    ecrConfiguration: outputs.ImageImageScanningConfigurationEcrConfiguration;
    /**
     * Indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image. Defaults to `false`.
     */
    imageScanningEnabled?: boolean;
}
export interface ImageImageScanningConfigurationEcrConfiguration {
    /**
     * Set of tags for Image Builder to apply to the output container image that that Amazon Inspector scans.
     */
    containerTags?: string[];
    /**
     * The name of the container repository that Amazon Inspector scans to identify findings for your container images.
     */
    repositoryName?: string;
}
export interface ImageImageTestsConfiguration {
    /**
     * Whether image tests are enabled. Defaults to `true`.
     */
    imageTestsEnabled?: boolean;
    /**
     * Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
     */
    timeoutMinutes?: number;
}
export interface ImageOutputResource {
    /**
     * Set of objects with each Amazon Machine Image (AMI) created.
     */
    amis: outputs.ImageOutputResourceAmi[];
    /**
     * Set of objects with each container image created and stored in the output repository.
     */
    containers: outputs.ImageOutputResourceContainer[];
}
export interface ImageOutputResourceAmi {
    /**
     * Account identifier of the AMI.
     */
    accountId: string;
    /**
     * Description of the AMI.
     */
    description: string;
    /**
     * Identifier of the AMI.
     */
    image: string;
    /**
     * Name of the AMI.
     */
    name: string;
    /**
     * Region of the container image.
     */
    region: string;
}
export interface ImageOutputResourceContainer {
    /**
     * Set of URIs for created containers.
     */
    imageUris: string[];
    /**
     * Region of the container image.
     */
    region: string;
}
export interface ImagePipelineImageScanningConfiguration {
    /**
     * Configuration block with ECR configuration for image scanning. Detailed below.
     */
    ecrConfiguration: outputs.ImagePipelineImageScanningConfigurationEcrConfiguration;
    /**
     * Whether image scans are enabled. Defaults to `false`.
     */
    imageScanningEnabled?: boolean;
}
export interface ImagePipelineImageScanningConfigurationEcrConfiguration {
    containerTags?: string[];
    /**
     * The name of the repository to scan
     */
    repositoryName?: string;
}
export interface ImagePipelineImageTestsConfiguration {
    /**
     * Whether image tests are enabled. Defaults to `true`.
     */
    imageTestsEnabled?: boolean;
    /**
     * Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
     */
    timeoutMinutes?: number;
}
export interface ImagePipelineSchedule {
    /**
     * Condition when the pipeline should trigger a new image build. Valid values are `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE` and `EXPRESSION_MATCH_ONLY`. Defaults to `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE`.
     */
    pipelineExecutionStartCondition?: string;
    /**
     * Cron expression of how often the pipeline start condition is evaluated. For example, `cron(0 0 * * ? *)` is evaluated every day at midnight UTC. Configurations using the five field syntax that was previously accepted by the API, such as `cron(0 0 * * *)`, must be updated to the six field syntax. For more information, see the [Image Builder User Guide](https://docs.aws.amazon.com/imagebuilder/latest/userguide/cron-expressions.html).
     *
     * The following arguments are optional:
     */
    scheduleExpression: string;
    /**
     * The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the [IANA timezone format](https://www.joda.org/joda-time/timezones.html). If not specified this defaults to UTC.
     */
    timezone: string;
}
export interface ImageRecipeBlockDeviceMapping {
    /**
     * Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
     */
    deviceName?: string;
    /**
     * Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
     */
    ebs?: outputs.ImageRecipeBlockDeviceMappingEbs;
    /**
     * Set to `true` to remove a mapping from the parent image.
     */
    noDevice?: boolean;
    /**
     * Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
     */
    virtualName?: string;
}
export interface ImageRecipeBlockDeviceMappingEbs {
    /**
     * Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
     */
    deleteOnTermination?: string;
    /**
     * Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
     */
    encrypted?: string;
    /**
     * Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
     */
    iops?: number;
    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
     */
    kmsKeyId?: string;
    /**
     * Identifier of the EC2 Volume Snapshot.
     */
    snapshotId?: string;
    /**
     * For GP3 volumes only. The throughput in MiB/s that the volume supports.
     */
    throughput?: number;
    /**
     * Size of the volume, in GiB.
     */
    volumeSize?: number;
    /**
     * Type of the volume. For example, `gp2` or `io2`.
     */
    volumeType?: string;
}
export interface ImageRecipeComponent {
    /**
     * Amazon Resource Name (ARN) of the Image Builder Component to associate.
     */
    componentArn: string;
    /**
     * Configuration block(s) for parameters to configure the component. Detailed below.
     */
    parameters?: outputs.ImageRecipeComponentParameter[];
}
export interface ImageRecipeComponentParameter {
    /**
     * The name of the component parameter.
     */
    name: string;
    /**
     * The value for the named component parameter.
     */
    value: string;
}
export interface ImageRecipeSystemsManagerAgent {
    /**
     * Whether to remove the Systems Manager Agent after the image has been built. Defaults to `false`.
     */
    uninstallAfterBuild: boolean;
}
export interface ImageWorkflow {
    /**
     * The action to take if the workflow fails. Must be one of `CONTINUE` or `ABORT`.
     */
    onFailure?: string;
    /**
     * The parallel group in which to run a test Workflow.
     */
    parallelGroup?: string;
    /**
     * Configuration block for the workflow parameters. Detailed below.
     */
    parameters?: outputs.ImageWorkflowParameter[];
    /**
     * Amazon Resource Name (ARN) of the Image Builder Workflow.
     *
     * The following arguments are optional:
     */
    workflowArn: string;
}
export interface ImageWorkflowParameter {
    /**
     * The name of the Workflow parameter.
     */
    name: string;
    /**
     * The value of the Workflow parameter.
     */
    value: string;
}
export interface InfrastructureConfigurationInstanceMetadataOptions {
    /**
     * The number of hops that an instance can traverse to reach its destonation.
     */
    httpPutResponseHopLimit?: number;
    /**
     * Whether a signed token is required for instance metadata retrieval requests. Valid values: `required`, `optional`.
     */
    httpTokens?: string;
}
export interface InfrastructureConfigurationLogging {
    /**
     * Configuration block with S3 logging settings. Detailed below.
     */
    s3Logs: outputs.InfrastructureConfigurationLoggingS3Logs;
}
export interface InfrastructureConfigurationLoggingS3Logs {
    /**
     * Name of the S3 Bucket.
     *
     * The following arguments are optional:
     */
    s3BucketName: string;
    /**
     * Prefix to use for S3 logs. Defaults to `/`.
     */
    s3KeyPrefix?: string;
}
export interface GetContainerRecipeComponent {
    /**
     * ARN of the Image Builder Component.
     */
    componentArn: string;
    /**
     * Set of parameters that are used to configure the component.
     */
    parameters: outputs.GetContainerRecipeComponentParameter[];
}
export interface GetContainerRecipeComponentParameter {
    /**
     * Name of the container recipe.
     */
    name: string;
    /**
     * Value of the component parameter.
     */
    value: string;
}
export interface GetContainerRecipeInstanceConfiguration {
    /**
     * Set of objects with block device mappings for the instance configuration.
     */
    blockDeviceMappings: outputs.GetContainerRecipeInstanceConfigurationBlockDeviceMapping[];
    /**
     * AMI ID of the base image for container build and test instance.
     */
    image: string;
}
export interface GetContainerRecipeInstanceConfigurationBlockDeviceMapping {
    /**
     * Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
     */
    deviceName: string;
    /**
     * Single list of object with Elastic Block Storage (EBS) block device mapping settings.
     */
    ebs: outputs.GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb[];
    /**
     * Whether to remove a mapping from the parent image.
     */
    noDevice: string;
    /**
     * Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
     */
    virtualName: string;
}
export interface GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb {
    /**
     * Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
     */
    deleteOnTermination: boolean;
    /**
     * Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
     */
    encrypted: boolean;
    /**
     * Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
     */
    iops: number;
    /**
     * KMS key used to encrypt the container image.
     */
    kmsKeyId: string;
    /**
     * Identifier of the EC2 Volume Snapshot.
     */
    snapshotId: string;
    /**
     * For GP3 volumes only. The throughput in MiB/s that the volume supports.
     */
    throughput: number;
    /**
     * Size of the volume, in GiB.
     */
    volumeSize: number;
    /**
     * Type of the volume. For example, `gp2` or `io2`.
     */
    volumeType: string;
}
export interface GetContainerRecipeTargetRepository {
    /**
     * Name of the container repository where the output container image is stored. The name is prefixed by the repository location.
     */
    repositoryName: string;
    /**
     * Service in which this image is registered.
     */
    service: string;
}
export interface GetDistributionConfigurationDistribution {
    /**
     * Nested list of AMI distribution configuration.
     */
    amiDistributionConfigurations: outputs.GetDistributionConfigurationDistributionAmiDistributionConfiguration[];
    /**
     * Nested list of container distribution configurations.
     */
    containerDistributionConfigurations: outputs.GetDistributionConfigurationDistributionContainerDistributionConfiguration[];
    /**
     * Nested list of Windows faster-launching configurations to use for AMI distribution.
     */
    fastLaunchConfigurations: outputs.GetDistributionConfigurationDistributionFastLaunchConfiguration[];
    /**
     * Nested list of launch template configurations.
     */
    launchTemplateConfigurations: outputs.GetDistributionConfigurationDistributionLaunchTemplateConfiguration[];
    /**
     * Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
     */
    licenseConfigurationArns: string[];
    /**
     * AWS Region of distribution.
     */
    region: string;
}
export interface GetDistributionConfigurationDistributionAmiDistributionConfiguration {
    /**
     * Key-value map of tags to apply to distributed AMI.
     */
    amiTags: {[key: string]: string};
    /**
     * Description of the container distribution configuration.
     */
    description: string;
    /**
     * ARN of Key Management Service (KMS) Key to encrypt AMI.
     */
    kmsKeyId: string;
    /**
     * Nested list of EC2 launch permissions.
     */
    launchPermissions: outputs.GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission[];
    /**
     * Name of the distribution configuration.
     */
    name: string;
    /**
     * Set of target AWS Account identifiers.
     */
    targetAccountIds: string[];
}
export interface GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission {
    /**
     * Set of AWS Organization ARNs.
     */
    organizationArns: string[];
    /**
     * Set of AWS Organizational Unit ARNs.
     */
    organizationalUnitArns: string[];
    /**
     * Set of EC2 launch permission user groups.
     */
    userGroups: string[];
    /**
     * Set of AWS Account identifiers.
     */
    userIds: string[];
}
export interface GetDistributionConfigurationDistributionContainerDistributionConfiguration {
    /**
     * Set of tags that are attached to the container distribution configuration.
     */
    containerTags: string[];
    /**
     * Description of the container distribution configuration.
     */
    description: string;
    /**
     * Set of destination repositories for the container distribution configuration.
     */
    targetRepositories: outputs.GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository[];
}
export interface GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository {
    /**
     * Name of the container repository where the output container image is stored.
     */
    repositoryName: string;
    /**
     * Service in which the image is registered.
     */
    service: string;
}
export interface GetDistributionConfigurationDistributionFastLaunchConfiguration {
    /**
     * The account ID that this configuration applies to.
     */
    accountId: string;
    /**
     * A Boolean that represents the current state of faster launching for the Windows AMI.
     */
    enabled: boolean;
    /**
     * Nested list of launch templates that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
     */
    launchTemplates: outputs.GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate[];
    /**
     * The maximum number of parallel instances that are launched for creating resources.
     */
    maxParallelLaunches: number;
    /**
     * Nested list of configurations for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
     */
    snapshotConfigurations: outputs.GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration[];
}
export interface GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate {
    /**
     * ID of the Amazon EC2 launch template.
     */
    launchTemplateId: string;
    /**
     * The name of the launch template to use for faster launching for a Windows AMI.
     */
    launchTemplateName: string;
    /**
     * The version of the launch template to use for faster launching for a Windows AMI.
     */
    launchTemplateVersion: string;
}
export interface GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration {
    /**
     * The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
     */
    targetResourceCount: number;
}
export interface GetDistributionConfigurationDistributionLaunchTemplateConfiguration {
    /**
     * The account ID that this configuration applies to.
     */
    accountId: string;
    /**
     * Whether the specified Amazon EC2 launch template is set as the default launch template.
     */
    default: boolean;
    /**
     * ID of the Amazon EC2 launch template.
     */
    launchTemplateId: string;
}
export interface GetImageImageScanningConfiguration {
    /**
     * Configuration block with ECR configuration.
     */
    ecrConfigurations: outputs.GetImageImageScanningConfigurationEcrConfiguration[];
    /**
     * Indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
     */
    imageScanningEnabled: boolean;
}
export interface GetImageImageScanningConfigurationEcrConfiguration {
    /**
     * Set of tags for Image Builder to apply to the output container image that that Amazon Inspector scans.
     */
    containerTags: string[];
    /**
     * The name of the container repository that Amazon Inspector scans to identify findings for your container images.
     */
    repositoryName: string;
}
export interface GetImageImageTestsConfiguration {
    /**
     * Whether image tests are enabled.
     */
    imageTestsEnabled: boolean;
    /**
     * Number of minutes before image tests time out.
     */
    timeoutMinutes: number;
}
export interface GetImageOutputResource {
    /**
     * Set of objects with each Amazon Machine Image (AMI) created.
     */
    amis: outputs.GetImageOutputResourceAmi[];
    /**
     * Set of objects with each container image created and stored in the output repository.
     */
    containers: outputs.GetImageOutputResourceContainer[];
}
export interface GetImageOutputResourceAmi {
    /**
     * Account identifier of the AMI.
     */
    accountId: string;
    /**
     * Description of the AMI.
     */
    description: string;
    /**
     * Identifier of the AMI.
     */
    image: string;
    /**
     * Name of the AMI.
     */
    name: string;
    /**
     * Region of the container image.
     */
    region: string;
}
export interface GetImageOutputResourceContainer {
    /**
     * Set of URIs for created containers.
     */
    imageUris: string[];
    /**
     * Region of the container image.
     */
    region: string;
}
export interface GetImagePipelineImageScanningConfiguration {
    /**
     * List if an object with ecr configuration for image scanning
     */
    ecrConfigurations: outputs.GetImagePipelineImageScanningConfigurationEcrConfiguration[];
    /**
     * Whether image scanning is enabled.
     */
    imageScanningEnabled: boolean;
}
export interface GetImagePipelineImageScanningConfigurationEcrConfiguration {
    /**
     * Tags that are added to the output containers that are scanned
     */
    containerTags: string[];
    /**
     * The name of the container repository that Amazon Inspector scans
     */
    repositoryName: string;
}
export interface GetImagePipelineImageTestsConfiguration {
    /**
     * Whether image tests are enabled.
     */
    imageTestsEnabled: boolean;
    /**
     * Number of minutes before image tests time out.
     */
    timeoutMinutes: number;
}
export interface GetImagePipelineSchedule {
    /**
     * Condition when the pipeline should trigger a new image build.
     */
    pipelineExecutionStartCondition: string;
    /**
     * Cron expression of how often the pipeline start condition is evaluated.
     */
    scheduleExpression: string;
}
export interface GetImageRecipeBlockDeviceMapping {
    /**
     * Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
     */
    deviceName: string;
    /**
     * Single list of object with Elastic Block Storage (EBS) block device mapping settings.
     */
    ebs: outputs.GetImageRecipeBlockDeviceMappingEb[];
    /**
     * Whether to remove a mapping from the parent image.
     */
    noDevice: string;
    /**
     * Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
     */
    virtualName: string;
}
export interface GetImageRecipeBlockDeviceMappingEb {
    /**
     * Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
     */
    deleteOnTermination: boolean;
    /**
     * Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
     */
    encrypted: boolean;
    /**
     * Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
     */
    iops: number;
    /**
     * ARN of the Key Management Service (KMS) Key for encryption.
     */
    kmsKeyId: string;
    /**
     * Identifier of the EC2 Volume Snapshot.
     */
    snapshotId: string;
    /**
     * For GP3 volumes only. The throughput in MiB/s that the volume supports.
     */
    throughput: number;
    /**
     * Size of the volume, in GiB.
     */
    volumeSize: number;
    /**
     * Type of the volume. For example, `gp2` or `io2`.
     */
    volumeType: string;
}
export interface GetImageRecipeComponent {
    /**
     * ARN of the Image Builder Component.
     */
    componentArn: string;
    /**
     * Set of parameters that are used to configure the component.
     */
    parameters: outputs.GetImageRecipeComponentParameter[];
}
export interface GetImageRecipeComponentParameter {
    /**
     * Name of the image recipe.
     */
    name: string;
    /**
     * Value of the component parameter.
     */
    value: string;
}
export interface GetInfrastructureConfigurationInstanceMetadataOption {
    /**
     * Number of hops that an instance can traverse to reach its destonation.
     */
    httpPutResponseHopLimit: number;
    /**
     * Whether a signed token is required for instance metadata retrieval requests.
     */
    httpTokens: string;
}
export interface GetInfrastructureConfigurationLogging {
    /**
     * Nested list of S3 logs settings.
     */
    s3Logs: outputs.GetInfrastructureConfigurationLoggingS3Log[];
}
export interface GetInfrastructureConfigurationLoggingS3Log {
    /**
     * Name of the S3 Bucket for logging.
     */
    s3BucketName: string;
    /**
     * Key prefix for S3 Bucket logging.
     */
    s3KeyPrefix: string;
}
