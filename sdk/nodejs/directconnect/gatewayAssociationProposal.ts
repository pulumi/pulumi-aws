// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class GatewayAssociationProposal extends pulumi.CustomResource {
    /**
     * Get an existing GatewayAssociationProposal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayAssociationProposalState, opts?: pulumi.CustomResourceOptions): GatewayAssociationProposal {
        return new GatewayAssociationProposal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal';

    /**
     * Returns true if the given object is an instance of GatewayAssociationProposal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayAssociationProposal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayAssociationProposal.__pulumiType;
    }

    public readonly allowedPrefixes!: pulumi.Output<string[]>;
    public readonly associatedGatewayId!: pulumi.Output<string>;
    public /*out*/ readonly associatedGatewayOwnerAccountId!: pulumi.Output<string>;
    public /*out*/ readonly associatedGatewayType!: pulumi.Output<string>;
    public readonly dxGatewayId!: pulumi.Output<string>;
    public readonly dxGatewayOwnerAccountId!: pulumi.Output<string>;

    /**
     * Create a GatewayAssociationProposal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayAssociationProposalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayAssociationProposalArgs | GatewayAssociationProposalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayAssociationProposalState | undefined;
            resourceInputs["allowedPrefixes"] = state ? state.allowedPrefixes : undefined;
            resourceInputs["associatedGatewayId"] = state ? state.associatedGatewayId : undefined;
            resourceInputs["associatedGatewayOwnerAccountId"] = state ? state.associatedGatewayOwnerAccountId : undefined;
            resourceInputs["associatedGatewayType"] = state ? state.associatedGatewayType : undefined;
            resourceInputs["dxGatewayId"] = state ? state.dxGatewayId : undefined;
            resourceInputs["dxGatewayOwnerAccountId"] = state ? state.dxGatewayOwnerAccountId : undefined;
        } else {
            const args = argsOrState as GatewayAssociationProposalArgs | undefined;
            if ((!args || args.associatedGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'associatedGatewayId'");
            }
            if ((!args || args.dxGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dxGatewayId'");
            }
            if ((!args || args.dxGatewayOwnerAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dxGatewayOwnerAccountId'");
            }
            resourceInputs["allowedPrefixes"] = args ? args.allowedPrefixes : undefined;
            resourceInputs["associatedGatewayId"] = args ? args.associatedGatewayId : undefined;
            resourceInputs["dxGatewayId"] = args ? args.dxGatewayId : undefined;
            resourceInputs["dxGatewayOwnerAccountId"] = args ? args.dxGatewayOwnerAccountId : undefined;
            resourceInputs["associatedGatewayOwnerAccountId"] = undefined /*out*/;
            resourceInputs["associatedGatewayType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayAssociationProposal.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayAssociationProposal resources.
 */
export interface GatewayAssociationProposalState {
    allowedPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    associatedGatewayId?: pulumi.Input<string>;
    associatedGatewayOwnerAccountId?: pulumi.Input<string>;
    associatedGatewayType?: pulumi.Input<string>;
    dxGatewayId?: pulumi.Input<string>;
    dxGatewayOwnerAccountId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayAssociationProposal resource.
 */
export interface GatewayAssociationProposalArgs {
    allowedPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    associatedGatewayId: pulumi.Input<string>;
    dxGatewayId: pulumi.Input<string>;
    dxGatewayOwnerAccountId: pulumi.Input<string>;
}
