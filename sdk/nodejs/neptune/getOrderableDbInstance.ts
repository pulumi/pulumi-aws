// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Information about Neptune orderable DB instances.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = pulumi.output(aws.neptune.getOrderableDbInstance({
 *     engineVersion: "1.0.3.0",
 *     preferredInstanceClasses: [
 *         "db.r5.large",
 *         "db.r4.large",
 *         "db.t3.medium",
 *     ],
 * }, { async: true }));
 * ```
 */
export function getOrderableDbInstance(args?: GetOrderableDbInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetOrderableDbInstanceResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aws:neptune/getOrderableDbInstance:getOrderableDbInstance", {
        "engine": args.engine,
        "engineVersion": args.engineVersion,
        "instanceClass": args.instanceClass,
        "licenseModel": args.licenseModel,
        "preferredInstanceClasses": args.preferredInstanceClasses,
        "vpc": args.vpc,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrderableDbInstance.
 */
export interface GetOrderableDbInstanceArgs {
    /**
     * DB engine. (Default: `neptune`)
     */
    readonly engine?: string;
    /**
     * Version of the DB engine. For example, `1.0.1.0`, `1.0.1.2`, `1.0.2.2`, and `1.0.3.0`.
     */
    readonly engineVersion?: string;
    /**
     * DB instance class. Examples of classes are `db.r5.large`, `db.r5.xlarge`, `db.r4.large`, `db.r5.4xlarge`, `db.r5.12xlarge`, `db.r4.xlarge`, and `db.t3.medium`.
     */
    readonly instanceClass?: string;
    /**
     * License model. (Default: `amazon-license`)
     */
    readonly licenseModel?: string;
    /**
     * Ordered list of preferred Neptune DB instance classes. The first match in this list will be returned. If no preferred matches are found and the original search returned more than one result, an error is returned.
     */
    readonly preferredInstanceClasses?: string[];
    /**
     * Enable to show only VPC offerings.
     */
    readonly vpc?: boolean;
}

/**
 * A collection of values returned by getOrderableDbInstance.
 */
export interface GetOrderableDbInstanceResult {
    /**
     * Availability zones where the instance is available.
     */
    readonly availabilityZones: string[];
    readonly engine?: string;
    readonly engineVersion: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceClass: string;
    readonly licenseModel?: string;
    /**
     * Maximum total provisioned IOPS for a DB instance.
     */
    readonly maxIopsPerDbInstance: number;
    /**
     * Maximum provisioned IOPS per GiB for a DB instance.
     */
    readonly maxIopsPerGib: number;
    /**
     * Maximum storage size for a DB instance.
     */
    readonly maxStorageSize: number;
    /**
     * Minimum total provisioned IOPS for a DB instance.
     */
    readonly minIopsPerDbInstance: number;
    /**
     * Minimum provisioned IOPS per GiB for a DB instance.
     */
    readonly minIopsPerGib: number;
    /**
     * Minimum storage size for a DB instance.
     */
    readonly minStorageSize: number;
    /**
     * Whether a DB instance is Multi-AZ capable.
     */
    readonly multiAzCapable: boolean;
    readonly preferredInstanceClasses?: string[];
    /**
     * Whether a DB instance can have a read replica.
     */
    readonly readReplicaCapable: boolean;
    /**
     * The storage type for a DB instance.
     */
    readonly storageType: string;
    /**
     * Whether a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.
     */
    readonly supportsEnhancedMonitoring: boolean;
    /**
     * Whether a DB instance supports IAM database authentication.
     */
    readonly supportsIamDatabaseAuthentication: boolean;
    /**
     * Whether a DB instance supports provisioned IOPS.
     */
    readonly supportsIops: boolean;
    /**
     * Whether a DB instance supports Performance Insights.
     */
    readonly supportsPerformanceInsights: boolean;
    /**
     * Whether a DB instance supports encrypted storage.
     */
    readonly supportsStorageEncryption: boolean;
    readonly vpc: boolean;
}
