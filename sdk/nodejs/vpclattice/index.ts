// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessLogSubscriptionArgs, AccessLogSubscriptionState } from "./accessLogSubscription";
export type AccessLogSubscription = import("./accessLogSubscription").AccessLogSubscription;
export const AccessLogSubscription: typeof import("./accessLogSubscription").AccessLogSubscription = null as any;
utilities.lazyLoad(exports, ["AccessLogSubscription"], () => require("./accessLogSubscription"));

export { AuthPolicyArgs, AuthPolicyState } from "./authPolicy";
export type AuthPolicy = import("./authPolicy").AuthPolicy;
export const AuthPolicy: typeof import("./authPolicy").AuthPolicy = null as any;
utilities.lazyLoad(exports, ["AuthPolicy"], () => require("./authPolicy"));

export { GetAuthPolicyArgs, GetAuthPolicyResult, GetAuthPolicyOutputArgs } from "./getAuthPolicy";
export const getAuthPolicy: typeof import("./getAuthPolicy").getAuthPolicy = null as any;
export const getAuthPolicyOutput: typeof import("./getAuthPolicy").getAuthPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAuthPolicy","getAuthPolicyOutput"], () => require("./getAuthPolicy"));

export { GetListenerArgs, GetListenerResult, GetListenerOutputArgs } from "./getListener";
export const getListener: typeof import("./getListener").getListener = null as any;
export const getListenerOutput: typeof import("./getListener").getListenerOutput = null as any;
utilities.lazyLoad(exports, ["getListener","getListenerOutput"], () => require("./getListener"));

export { GetResourcePolicyArgs, GetResourcePolicyResult, GetResourcePolicyOutputArgs } from "./getResourcePolicy";
export const getResourcePolicy: typeof import("./getResourcePolicy").getResourcePolicy = null as any;
export const getResourcePolicyOutput: typeof import("./getResourcePolicy").getResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getResourcePolicy","getResourcePolicyOutput"], () => require("./getResourcePolicy"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceNetworkArgs, GetServiceNetworkResult, GetServiceNetworkOutputArgs } from "./getServiceNetwork";
export const getServiceNetwork: typeof import("./getServiceNetwork").getServiceNetwork = null as any;
export const getServiceNetworkOutput: typeof import("./getServiceNetwork").getServiceNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getServiceNetwork","getServiceNetworkOutput"], () => require("./getServiceNetwork"));

export { ListenerArgs, ListenerState } from "./listener";
export type Listener = import("./listener").Listener;
export const Listener: typeof import("./listener").Listener = null as any;
utilities.lazyLoad(exports, ["Listener"], () => require("./listener"));

export { ListenerRuleArgs, ListenerRuleState } from "./listenerRule";
export type ListenerRule = import("./listenerRule").ListenerRule;
export const ListenerRule: typeof import("./listenerRule").ListenerRule = null as any;
utilities.lazyLoad(exports, ["ListenerRule"], () => require("./listenerRule"));

export { ResourcePolicyArgs, ResourcePolicyState } from "./resourcePolicy";
export type ResourcePolicy = import("./resourcePolicy").ResourcePolicy;
export const ResourcePolicy: typeof import("./resourcePolicy").ResourcePolicy = null as any;
utilities.lazyLoad(exports, ["ResourcePolicy"], () => require("./resourcePolicy"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceNetworkArgs, ServiceNetworkState } from "./serviceNetwork";
export type ServiceNetwork = import("./serviceNetwork").ServiceNetwork;
export const ServiceNetwork: typeof import("./serviceNetwork").ServiceNetwork = null as any;
utilities.lazyLoad(exports, ["ServiceNetwork"], () => require("./serviceNetwork"));

export { ServiceNetworkServiceAssociationArgs, ServiceNetworkServiceAssociationState } from "./serviceNetworkServiceAssociation";
export type ServiceNetworkServiceAssociation = import("./serviceNetworkServiceAssociation").ServiceNetworkServiceAssociation;
export const ServiceNetworkServiceAssociation: typeof import("./serviceNetworkServiceAssociation").ServiceNetworkServiceAssociation = null as any;
utilities.lazyLoad(exports, ["ServiceNetworkServiceAssociation"], () => require("./serviceNetworkServiceAssociation"));

export { ServiceNetworkVpcAssociationArgs, ServiceNetworkVpcAssociationState } from "./serviceNetworkVpcAssociation";
export type ServiceNetworkVpcAssociation = import("./serviceNetworkVpcAssociation").ServiceNetworkVpcAssociation;
export const ServiceNetworkVpcAssociation: typeof import("./serviceNetworkVpcAssociation").ServiceNetworkVpcAssociation = null as any;
utilities.lazyLoad(exports, ["ServiceNetworkVpcAssociation"], () => require("./serviceNetworkVpcAssociation"));

export { TargetGroupArgs, TargetGroupState } from "./targetGroup";
export type TargetGroup = import("./targetGroup").TargetGroup;
export const TargetGroup: typeof import("./targetGroup").TargetGroup = null as any;
utilities.lazyLoad(exports, ["TargetGroup"], () => require("./targetGroup"));

export { TargetGroupAttachmentArgs, TargetGroupAttachmentState } from "./targetGroupAttachment";
export type TargetGroupAttachment = import("./targetGroupAttachment").TargetGroupAttachment;
export const TargetGroupAttachment: typeof import("./targetGroupAttachment").TargetGroupAttachment = null as any;
utilities.lazyLoad(exports, ["TargetGroupAttachment"], () => require("./targetGroupAttachment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:vpclattice/accessLogSubscription:AccessLogSubscription":
                return new AccessLogSubscription(name, <any>undefined, { urn })
            case "aws:vpclattice/authPolicy:AuthPolicy":
                return new AuthPolicy(name, <any>undefined, { urn })
            case "aws:vpclattice/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "aws:vpclattice/listenerRule:ListenerRule":
                return new ListenerRule(name, <any>undefined, { urn })
            case "aws:vpclattice/resourcePolicy:ResourcePolicy":
                return new ResourcePolicy(name, <any>undefined, { urn })
            case "aws:vpclattice/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "aws:vpclattice/serviceNetwork:ServiceNetwork":
                return new ServiceNetwork(name, <any>undefined, { urn })
            case "aws:vpclattice/serviceNetworkServiceAssociation:ServiceNetworkServiceAssociation":
                return new ServiceNetworkServiceAssociation(name, <any>undefined, { urn })
            case "aws:vpclattice/serviceNetworkVpcAssociation:ServiceNetworkVpcAssociation":
                return new ServiceNetworkVpcAssociation(name, <any>undefined, { urn })
            case "aws:vpclattice/targetGroup:TargetGroup":
                return new TargetGroup(name, <any>undefined, { urn })
            case "aws:vpclattice/targetGroupAttachment:TargetGroupAttachment":
                return new TargetGroupAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "vpclattice/accessLogSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/authPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/listener", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/listenerRule", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/resourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/service", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/serviceNetwork", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/serviceNetworkServiceAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/serviceNetworkVpcAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/targetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "vpclattice/targetGroupAttachment", _module)
