// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS VPC Lattice Listener Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.vpclattice.ListenerRule("test", {
 *     listenerIdentifier: aws_vpclattice_listener.example.listener_id,
 *     serviceIdentifier: aws_vpclattice_service.example.id,
 *     priority: 20,
 *     match: {
 *         httpMatch: {
 *             headerMatches: [{
 *                 name: "example-header",
 *                 caseSensitive: false,
 *                 match: {
 *                     exact: "example-contains",
 *                 },
 *             }],
 *             pathMatch: {
 *                 caseSensitive: true,
 *                 match: {
 *                     prefix: "/example-path",
 *                 },
 *             },
 *         },
 *     },
 *     action: {
 *         forward: {
 *             targetGroups: [
 *                 {
 *                     targetGroupIdentifier: aws_vpclattice_target_group.example.id,
 *                     weight: 1,
 *                 },
 *                 {
 *                     targetGroupIdentifier: aws_vpclattice_target_group.example2.id,
 *                     weight: 2,
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.vpclattice.ListenerRule("test", {
 *     listenerIdentifier: aws_vpclattice_listener.example.listener_id,
 *     serviceIdentifier: aws_vpclattice_service.example.id,
 *     priority: 10,
 *     match: {
 *         httpMatch: {
 *             pathMatch: {
 *                 caseSensitive: false,
 *                 match: {
 *                     exact: "/example-path",
 *                 },
 *             },
 *         },
 *     },
 *     action: {
 *         fixedResponse: {
 *             statusCode: 404,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import VPC Lattice Listener Rule using the `example_id_arg`. For example:
 *
 * ```sh
 *  $ pulumi import aws:vpclattice/listenerRule:ListenerRule example rft-8012925589
 * ```
 */
export class ListenerRule extends pulumi.CustomResource {
    /**
     * Get an existing ListenerRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerRuleState, opts?: pulumi.CustomResourceOptions): ListenerRule {
        return new ListenerRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:vpclattice/listenerRule:ListenerRule';

    /**
     * Returns true if the given object is an instance of ListenerRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ListenerRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ListenerRule.__pulumiType;
    }

    /**
     * The action for the default rule.
     */
    public readonly action!: pulumi.Output<outputs.vpclattice.ListenerRuleAction>;
    /**
     * ARN of the target group.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ID or Amazon Resource Name (ARN) of the listener.
     */
    public readonly listenerIdentifier!: pulumi.Output<string>;
    /**
     * The rule match.
     */
    public readonly match!: pulumi.Output<outputs.vpclattice.ListenerRuleMatch>;
    /**
     * The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
     *
     * The following arguments are optional:
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Unique identifier for the target group.
     */
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    /**
     * The ID or Amazon Resource Identifier (ARN) of the service.
     */
    public readonly serviceIdentifier!: pulumi.Output<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ListenerRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerRuleArgs | ListenerRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["listenerIdentifier"] = state ? state.listenerIdentifier : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["serviceIdentifier"] = state ? state.serviceIdentifier : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ListenerRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.listenerIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerIdentifier'");
            }
            if ((!args || args.match === undefined) && !opts.urn) {
                throw new Error("Missing required property 'match'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.serviceIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceIdentifier'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["listenerIdentifier"] = args ? args.listenerIdentifier : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["serviceIdentifier"] = args ? args.serviceIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ListenerRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ListenerRule resources.
 */
export interface ListenerRuleState {
    /**
     * The action for the default rule.
     */
    action?: pulumi.Input<inputs.vpclattice.ListenerRuleAction>;
    /**
     * ARN of the target group.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ID or Amazon Resource Name (ARN) of the listener.
     */
    listenerIdentifier?: pulumi.Input<string>;
    /**
     * The rule match.
     */
    match?: pulumi.Input<inputs.vpclattice.ListenerRuleMatch>;
    /**
     * The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
     */
    name?: pulumi.Input<string>;
    /**
     * The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
     *
     * The following arguments are optional:
     */
    priority?: pulumi.Input<number>;
    /**
     * Unique identifier for the target group.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * The ID or Amazon Resource Identifier (ARN) of the service.
     */
    serviceIdentifier?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ListenerRule resource.
 */
export interface ListenerRuleArgs {
    /**
     * The action for the default rule.
     */
    action: pulumi.Input<inputs.vpclattice.ListenerRuleAction>;
    /**
     * The ID or Amazon Resource Name (ARN) of the listener.
     */
    listenerIdentifier: pulumi.Input<string>;
    /**
     * The rule match.
     */
    match: pulumi.Input<inputs.vpclattice.ListenerRuleMatch>;
    /**
     * The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
     */
    name?: pulumi.Input<string>;
    /**
     * The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
     *
     * The following arguments are optional:
     */
    priority: pulumi.Input<number>;
    /**
     * The ID or Amazon Resource Identifier (ARN) of the service.
     */
    serviceIdentifier: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
