// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a License Manager grant. This allows for sharing licenses with other AWS accounts.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_licensemanager_grant` using the grant arn. For example:
 *
 * ```sh
 * $ pulumi import aws:licensemanager/licenseGrant:LicenseGrant test arn:aws:license-manager::123456789011:grant:g-01d313393d9e443d8664cc054db1e089
 * ```
 */
export class LicenseGrant extends pulumi.CustomResource {
    /**
     * Get an existing LicenseGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseGrantState, opts?: pulumi.CustomResourceOptions): LicenseGrant {
        return new LicenseGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:licensemanager/licenseGrant:LicenseGrant';

    /**
     * Returns true if the given object is an instance of LicenseGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseGrant.__pulumiType;
    }

    /**
     * A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
     */
    declare public readonly allowedOperations: pulumi.Output<string[]>;
    /**
     * The grant ARN.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The home region for the license.
     */
    declare public /*out*/ readonly homeRegion: pulumi.Output<string>;
    /**
     * The ARN of the license to grant.
     */
    declare public readonly licenseArn: pulumi.Output<string>;
    /**
     * The Name of the grant.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The parent ARN.
     */
    declare public /*out*/ readonly parentArn: pulumi.Output<string>;
    /**
     * The target account for the grant in the form of the ARN for an account principal of the root user.
     */
    declare public readonly principal: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The grant status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The grant version.
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;

    /**
     * Create a LicenseGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseGrantArgs | LicenseGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseGrantState | undefined;
            resourceInputs["allowedOperations"] = state?.allowedOperations;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["homeRegion"] = state?.homeRegion;
            resourceInputs["licenseArn"] = state?.licenseArn;
            resourceInputs["name"] = state?.name;
            resourceInputs["parentArn"] = state?.parentArn;
            resourceInputs["principal"] = state?.principal;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as LicenseGrantArgs | undefined;
            if (args?.allowedOperations === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowedOperations'");
            }
            if (args?.licenseArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'licenseArn'");
            }
            if (args?.principal === undefined && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["allowedOperations"] = args?.allowedOperations;
            resourceInputs["licenseArn"] = args?.licenseArn;
            resourceInputs["name"] = args?.name;
            resourceInputs["principal"] = args?.principal;
            resourceInputs["region"] = args?.region;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["homeRegion"] = undefined /*out*/;
            resourceInputs["parentArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicenseGrant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LicenseGrant resources.
 */
export interface LicenseGrantState {
    /**
     * A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
     */
    allowedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The grant ARN.
     */
    arn?: pulumi.Input<string>;
    /**
     * The home region for the license.
     */
    homeRegion?: pulumi.Input<string>;
    /**
     * The ARN of the license to grant.
     */
    licenseArn?: pulumi.Input<string>;
    /**
     * The Name of the grant.
     */
    name?: pulumi.Input<string>;
    /**
     * The parent ARN.
     */
    parentArn?: pulumi.Input<string>;
    /**
     * The target account for the grant in the form of the ARN for an account principal of the root user.
     */
    principal?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The grant status.
     */
    status?: pulumi.Input<string>;
    /**
     * The grant version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LicenseGrant resource.
 */
export interface LicenseGrantArgs {
    /**
     * A list of the allowed operations for the grant. This is a subset of the allowed operations on the license.
     */
    allowedOperations: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the license to grant.
     */
    licenseArn: pulumi.Input<string>;
    /**
     * The Name of the grant.
     */
    name?: pulumi.Input<string>;
    /**
     * The target account for the grant in the form of the ARN for an account principal of the root user.
     */
    principal: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
}
