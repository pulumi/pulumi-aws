// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS OpenSearch Ingestion Pipeline.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const example = new aws.iam.Role("example", {assumeRolePolicy: JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: [{
 *         Action: "sts:AssumeRole",
 *         Effect: "Allow",
 *         Sid: "",
 *         Principal: {
 *             Service: "osis-pipelines.amazonaws.com",
 *         },
 *     }],
 * })});
 * const examplePipeline = new aws.opensearchingest.Pipeline("example", {
 *     pipelineName: "example",
 *     pipelineConfigurationBody: pulumi.all([example.arn, current]).apply(([arn, current]) => `version: "2"
 * example-pipeline:
 *   source:
 *     http:
 *       path: "/example"
 *   sink:
 *     - s3:
 *         aws:
 *           sts_role_arn: "${arn}"
 *           region: "${current.region}"
 *         bucket: "example"
 *         threshold:
 *           event_collect_timeout: "60s"
 *         codec:
 *           ndjson:
 * `),
 *     maxUnits: 1,
 *     minUnits: 1,
 * });
 * ```
 *
 * ### Using file function
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const example = new aws.opensearchingest.Pipeline("example", {
 *     pipelineName: "example",
 *     pipelineConfigurationBody: std.file({
 *         input: "example.yaml",
 *     }).then(invoke => invoke.result),
 *     maxUnits: 1,
 *     minUnits: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import OpenSearch Ingestion Pipeline using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:opensearchingest/pipeline:Pipeline example example
 * ```
 */
export class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineState, opts?: pulumi.CustomResourceOptions): Pipeline {
        return new Pipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opensearchingest/pipeline:Pipeline';

    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }

    /**
     * Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
     */
    declare public readonly bufferOptions: pulumi.Output<outputs.opensearchingest.PipelineBufferOptions | undefined>;
    /**
     * Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
     */
    declare public readonly encryptionAtRestOptions: pulumi.Output<outputs.opensearchingest.PipelineEncryptionAtRestOptions | undefined>;
    /**
     * The list of ingestion endpoints for the pipeline, which you can send data to.
     */
    declare public /*out*/ readonly ingestEndpointUrls: pulumi.Output<string[]>;
    /**
     * Key-value pairs to configure log publishing. See `logPublishingOptions` below.
     */
    declare public readonly logPublishingOptions: pulumi.Output<outputs.opensearchingest.PipelineLogPublishingOptions | undefined>;
    /**
     * The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
     */
    declare public readonly maxUnits: pulumi.Output<number>;
    /**
     * The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
     */
    declare public readonly minUnits: pulumi.Output<number>;
    /**
     * Amazon Resource Name (ARN) of the pipeline.
     */
    declare public /*out*/ readonly pipelineArn: pulumi.Output<string>;
    /**
     * The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
     */
    declare public readonly pipelineConfigurationBody: pulumi.Output<string>;
    /**
     * The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
     *
     * The following arguments are optional:
     */
    declare public readonly pipelineName: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    declare public readonly timeouts: pulumi.Output<outputs.opensearchingest.PipelineTimeouts | undefined>;
    /**
     * Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
     */
    declare public readonly vpcOptions: pulumi.Output<outputs.opensearchingest.PipelineVpcOptions | undefined>;

    /**
     * Create a Pipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineArgs | PipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineState | undefined;
            resourceInputs["bufferOptions"] = state?.bufferOptions;
            resourceInputs["encryptionAtRestOptions"] = state?.encryptionAtRestOptions;
            resourceInputs["ingestEndpointUrls"] = state?.ingestEndpointUrls;
            resourceInputs["logPublishingOptions"] = state?.logPublishingOptions;
            resourceInputs["maxUnits"] = state?.maxUnits;
            resourceInputs["minUnits"] = state?.minUnits;
            resourceInputs["pipelineArn"] = state?.pipelineArn;
            resourceInputs["pipelineConfigurationBody"] = state?.pipelineConfigurationBody;
            resourceInputs["pipelineName"] = state?.pipelineName;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["vpcOptions"] = state?.vpcOptions;
        } else {
            const args = argsOrState as PipelineArgs | undefined;
            if (args?.maxUnits === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxUnits'");
            }
            if (args?.minUnits === undefined && !opts.urn) {
                throw new Error("Missing required property 'minUnits'");
            }
            if (args?.pipelineConfigurationBody === undefined && !opts.urn) {
                throw new Error("Missing required property 'pipelineConfigurationBody'");
            }
            if (args?.pipelineName === undefined && !opts.urn) {
                throw new Error("Missing required property 'pipelineName'");
            }
            resourceInputs["bufferOptions"] = args?.bufferOptions;
            resourceInputs["encryptionAtRestOptions"] = args?.encryptionAtRestOptions;
            resourceInputs["logPublishingOptions"] = args?.logPublishingOptions;
            resourceInputs["maxUnits"] = args?.maxUnits;
            resourceInputs["minUnits"] = args?.minUnits;
            resourceInputs["pipelineConfigurationBody"] = args?.pipelineConfigurationBody;
            resourceInputs["pipelineName"] = args?.pipelineName;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["vpcOptions"] = args?.vpcOptions;
            resourceInputs["ingestEndpointUrls"] = undefined /*out*/;
            resourceInputs["pipelineArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pipeline resources.
 */
export interface PipelineState {
    /**
     * Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
     */
    bufferOptions?: pulumi.Input<inputs.opensearchingest.PipelineBufferOptions>;
    /**
     * Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
     */
    encryptionAtRestOptions?: pulumi.Input<inputs.opensearchingest.PipelineEncryptionAtRestOptions>;
    /**
     * The list of ingestion endpoints for the pipeline, which you can send data to.
     */
    ingestEndpointUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key-value pairs to configure log publishing. See `logPublishingOptions` below.
     */
    logPublishingOptions?: pulumi.Input<inputs.opensearchingest.PipelineLogPublishingOptions>;
    /**
     * The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
     */
    maxUnits?: pulumi.Input<number>;
    /**
     * The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
     */
    minUnits?: pulumi.Input<number>;
    /**
     * Amazon Resource Name (ARN) of the pipeline.
     */
    pipelineArn?: pulumi.Input<string>;
    /**
     * The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
     */
    pipelineConfigurationBody?: pulumi.Input<string>;
    /**
     * The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
     *
     * The following arguments are optional:
     */
    pipelineName?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.opensearchingest.PipelineTimeouts>;
    /**
     * Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
     */
    vpcOptions?: pulumi.Input<inputs.opensearchingest.PipelineVpcOptions>;
}

/**
 * The set of arguments for constructing a Pipeline resource.
 */
export interface PipelineArgs {
    /**
     * Key-value pairs to configure persistent buffering for the pipeline. See `bufferOptions` below.
     */
    bufferOptions?: pulumi.Input<inputs.opensearchingest.PipelineBufferOptions>;
    /**
     * Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryptionAtRestOptions` below.
     */
    encryptionAtRestOptions?: pulumi.Input<inputs.opensearchingest.PipelineEncryptionAtRestOptions>;
    /**
     * Key-value pairs to configure log publishing. See `logPublishingOptions` below.
     */
    logPublishingOptions?: pulumi.Input<inputs.opensearchingest.PipelineLogPublishingOptions>;
    /**
     * The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
     */
    maxUnits: pulumi.Input<number>;
    /**
     * The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
     */
    minUnits: pulumi.Input<number>;
    /**
     * The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
     */
    pipelineConfigurationBody: pulumi.Input<string>;
    /**
     * The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
     *
     * The following arguments are optional:
     */
    pipelineName: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the pipeline. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.opensearchingest.PipelineTimeouts>;
    /**
     * Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpcOptions` below.
     */
    vpcOptions?: pulumi.Input<inputs.opensearchingest.PipelineVpcOptions>;
}
