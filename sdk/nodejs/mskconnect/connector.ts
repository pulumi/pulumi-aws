// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorState, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:mskconnect/connector:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly capacity!: pulumi.Output<outputs.mskconnect.ConnectorCapacity>;
    public readonly connectorConfiguration!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly kafkaCluster!: pulumi.Output<outputs.mskconnect.ConnectorKafkaCluster>;
    public readonly kafkaClusterClientAuthentication!: pulumi.Output<outputs.mskconnect.ConnectorKafkaClusterClientAuthentication>;
    public readonly kafkaClusterEncryptionInTransit!: pulumi.Output<outputs.mskconnect.ConnectorKafkaClusterEncryptionInTransit>;
    public readonly kafkaconnectVersion!: pulumi.Output<string>;
    public readonly logDelivery!: pulumi.Output<outputs.mskconnect.ConnectorLogDelivery | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly plugins!: pulumi.Output<outputs.mskconnect.ConnectorPlugin[]>;
    public readonly serviceExecutionRoleArn!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly workerConfiguration!: pulumi.Output<outputs.mskconnect.ConnectorWorkerConfiguration | undefined>;

    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorArgs | ConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["connectorConfiguration"] = state ? state.connectorConfiguration : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kafkaCluster"] = state ? state.kafkaCluster : undefined;
            resourceInputs["kafkaClusterClientAuthentication"] = state ? state.kafkaClusterClientAuthentication : undefined;
            resourceInputs["kafkaClusterEncryptionInTransit"] = state ? state.kafkaClusterEncryptionInTransit : undefined;
            resourceInputs["kafkaconnectVersion"] = state ? state.kafkaconnectVersion : undefined;
            resourceInputs["logDelivery"] = state ? state.logDelivery : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plugins"] = state ? state.plugins : undefined;
            resourceInputs["serviceExecutionRoleArn"] = state ? state.serviceExecutionRoleArn : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workerConfiguration"] = state ? state.workerConfiguration : undefined;
        } else {
            const args = argsOrState as ConnectorArgs | undefined;
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.connectorConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorConfiguration'");
            }
            if ((!args || args.kafkaCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCluster'");
            }
            if ((!args || args.kafkaClusterClientAuthentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusterClientAuthentication'");
            }
            if ((!args || args.kafkaClusterEncryptionInTransit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusterEncryptionInTransit'");
            }
            if ((!args || args.kafkaconnectVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaconnectVersion'");
            }
            if ((!args || args.plugins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plugins'");
            }
            if ((!args || args.serviceExecutionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceExecutionRoleArn'");
            }
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["connectorConfiguration"] = args ? args.connectorConfiguration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kafkaCluster"] = args ? args.kafkaCluster : undefined;
            resourceInputs["kafkaClusterClientAuthentication"] = args ? args.kafkaClusterClientAuthentication : undefined;
            resourceInputs["kafkaClusterEncryptionInTransit"] = args ? args.kafkaClusterEncryptionInTransit : undefined;
            resourceInputs["kafkaconnectVersion"] = args ? args.kafkaconnectVersion : undefined;
            resourceInputs["logDelivery"] = args ? args.logDelivery : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plugins"] = args ? args.plugins : undefined;
            resourceInputs["serviceExecutionRoleArn"] = args ? args.serviceExecutionRoleArn : undefined;
            resourceInputs["workerConfiguration"] = args ? args.workerConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connector resources.
 */
export interface ConnectorState {
    arn?: pulumi.Input<string>;
    capacity?: pulumi.Input<inputs.mskconnect.ConnectorCapacity>;
    connectorConfiguration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    kafkaCluster?: pulumi.Input<inputs.mskconnect.ConnectorKafkaCluster>;
    kafkaClusterClientAuthentication?: pulumi.Input<inputs.mskconnect.ConnectorKafkaClusterClientAuthentication>;
    kafkaClusterEncryptionInTransit?: pulumi.Input<inputs.mskconnect.ConnectorKafkaClusterEncryptionInTransit>;
    kafkaconnectVersion?: pulumi.Input<string>;
    logDelivery?: pulumi.Input<inputs.mskconnect.ConnectorLogDelivery>;
    name?: pulumi.Input<string>;
    plugins?: pulumi.Input<pulumi.Input<inputs.mskconnect.ConnectorPlugin>[]>;
    serviceExecutionRoleArn?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    workerConfiguration?: pulumi.Input<inputs.mskconnect.ConnectorWorkerConfiguration>;
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    capacity: pulumi.Input<inputs.mskconnect.ConnectorCapacity>;
    connectorConfiguration: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    kafkaCluster: pulumi.Input<inputs.mskconnect.ConnectorKafkaCluster>;
    kafkaClusterClientAuthentication: pulumi.Input<inputs.mskconnect.ConnectorKafkaClusterClientAuthentication>;
    kafkaClusterEncryptionInTransit: pulumi.Input<inputs.mskconnect.ConnectorKafkaClusterEncryptionInTransit>;
    kafkaconnectVersion: pulumi.Input<string>;
    logDelivery?: pulumi.Input<inputs.mskconnect.ConnectorLogDelivery>;
    name?: pulumi.Input<string>;
    plugins: pulumi.Input<pulumi.Input<inputs.mskconnect.ConnectorPlugin>[]>;
    serviceExecutionRoleArn: pulumi.Input<string>;
    workerConfiguration?: pulumi.Input<inputs.mskconnect.ConnectorWorkerConfiguration>;
}
