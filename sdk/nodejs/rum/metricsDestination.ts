// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CloudWatch RUM Metrics Destination resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.rum.MetricsDestination("example", {
 *     appMonitorName: aws_rum_app_monitor.example.name,
 *     destination: "CloudWatch",
 * });
 * ```
 *
 * ## Import
 *
 * Cloudwatch RUM Metrics Destination can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:rum/metricsDestination:MetricsDestination example example
 * ```
 */
export class MetricsDestination extends pulumi.CustomResource {
    /**
     * Get an existing MetricsDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricsDestinationState, opts?: pulumi.CustomResourceOptions): MetricsDestination {
        return new MetricsDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rum/metricsDestination:MetricsDestination';

    /**
     * Returns true if the given object is an instance of MetricsDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricsDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricsDestination.__pulumiType;
    }

    /**
     * The name of the CloudWatch RUM app monitor that will send the metrics.
     */
    public readonly appMonitorName!: pulumi.Output<string>;
    /**
     * Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
     */
    public readonly destinationArn!: pulumi.Output<string | undefined>;
    /**
     * This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
     */
    public readonly iamRoleArn!: pulumi.Output<string | undefined>;

    /**
     * Create a MetricsDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricsDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricsDestinationArgs | MetricsDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricsDestinationState | undefined;
            resourceInputs["appMonitorName"] = state ? state.appMonitorName : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationArn"] = state ? state.destinationArn : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
        } else {
            const args = argsOrState as MetricsDestinationArgs | undefined;
            if ((!args || args.appMonitorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appMonitorName'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            resourceInputs["appMonitorName"] = args ? args.appMonitorName : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationArn"] = args ? args.destinationArn : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetricsDestination.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricsDestination resources.
 */
export interface MetricsDestinationState {
    /**
     * The name of the CloudWatch RUM app monitor that will send the metrics.
     */
    appMonitorName?: pulumi.Input<string>;
    /**
     * Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
     */
    destination?: pulumi.Input<string>;
    /**
     * Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
     */
    destinationArn?: pulumi.Input<string>;
    /**
     * This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
     */
    iamRoleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricsDestination resource.
 */
export interface MetricsDestinationArgs {
    /**
     * The name of the CloudWatch RUM app monitor that will send the metrics.
     */
    appMonitorName: pulumi.Input<string>;
    /**
     * Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
     */
    destination: pulumi.Input<string>;
    /**
     * Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
     */
    destinationArn?: pulumi.Input<string>;
    /**
     * This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
     */
    iamRoleArn?: pulumi.Input<string>;
}
