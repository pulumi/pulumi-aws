// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshift.HsmConfiguration("example", {
 *     description: "example",
 *     hsmConfigurationIdentifier: "example",
 *     hsmIpAddress: "10.0.0.1",
 *     hsmPartitionName: "aws",
 *     hsmPartitionPassword: "example",
 *     hsmServerPublicCertificate: "example",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift HSM Client Certificates using `hsm_configuration_identifier`. For example:
 *
 * ```sh
 * $ pulumi import aws:redshift/hsmConfiguration:HsmConfiguration example example
 * ```
 */
export class HsmConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing HsmConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HsmConfigurationState, opts?: pulumi.CustomResourceOptions): HsmConfiguration {
        return new HsmConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:redshift/hsmConfiguration:HsmConfiguration';

    /**
     * Returns true if the given object is an instance of HsmConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HsmConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HsmConfiguration.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the Hsm Client Certificate.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * A text description of the HSM configuration to be created.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The identifier to be assigned to the new Amazon Redshift HSM configuration.
     */
    declare public readonly hsmConfigurationIdentifier: pulumi.Output<string>;
    /**
     * The IP address that the Amazon Redshift cluster must use to access the HSM.
     */
    declare public readonly hsmIpAddress: pulumi.Output<string>;
    /**
     * The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
     */
    declare public readonly hsmPartitionName: pulumi.Output<string>;
    /**
     * The password required to access the HSM partition.
     */
    declare public readonly hsmPartitionPassword: pulumi.Output<string>;
    /**
     * The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
     */
    declare public readonly hsmServerPublicCertificate: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a HsmConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HsmConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HsmConfigurationArgs | HsmConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HsmConfigurationState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["description"] = state?.description;
            resourceInputs["hsmConfigurationIdentifier"] = state?.hsmConfigurationIdentifier;
            resourceInputs["hsmIpAddress"] = state?.hsmIpAddress;
            resourceInputs["hsmPartitionName"] = state?.hsmPartitionName;
            resourceInputs["hsmPartitionPassword"] = state?.hsmPartitionPassword;
            resourceInputs["hsmServerPublicCertificate"] = state?.hsmServerPublicCertificate;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        } else {
            const args = argsOrState as HsmConfigurationArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.hsmConfigurationIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'hsmConfigurationIdentifier'");
            }
            if (args?.hsmIpAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'hsmIpAddress'");
            }
            if (args?.hsmPartitionName === undefined && !opts.urn) {
                throw new Error("Missing required property 'hsmPartitionName'");
            }
            if (args?.hsmPartitionPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'hsmPartitionPassword'");
            }
            if (args?.hsmServerPublicCertificate === undefined && !opts.urn) {
                throw new Error("Missing required property 'hsmServerPublicCertificate'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["hsmConfigurationIdentifier"] = args?.hsmConfigurationIdentifier;
            resourceInputs["hsmIpAddress"] = args?.hsmIpAddress;
            resourceInputs["hsmPartitionName"] = args?.hsmPartitionName;
            resourceInputs["hsmPartitionPassword"] = args?.hsmPartitionPassword ? pulumi.secret(args.hsmPartitionPassword) : undefined;
            resourceInputs["hsmServerPublicCertificate"] = args?.hsmServerPublicCertificate;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["hsmPartitionPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HsmConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HsmConfiguration resources.
 */
export interface HsmConfigurationState {
    /**
     * Amazon Resource Name (ARN) of the Hsm Client Certificate.
     */
    arn?: pulumi.Input<string>;
    /**
     * A text description of the HSM configuration to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * The identifier to be assigned to the new Amazon Redshift HSM configuration.
     */
    hsmConfigurationIdentifier?: pulumi.Input<string>;
    /**
     * The IP address that the Amazon Redshift cluster must use to access the HSM.
     */
    hsmIpAddress?: pulumi.Input<string>;
    /**
     * The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
     */
    hsmPartitionName?: pulumi.Input<string>;
    /**
     * The password required to access the HSM partition.
     */
    hsmPartitionPassword?: pulumi.Input<string>;
    /**
     * The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
     */
    hsmServerPublicCertificate?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a HsmConfiguration resource.
 */
export interface HsmConfigurationArgs {
    /**
     * A text description of the HSM configuration to be created.
     */
    description: pulumi.Input<string>;
    /**
     * The identifier to be assigned to the new Amazon Redshift HSM configuration.
     */
    hsmConfigurationIdentifier: pulumi.Input<string>;
    /**
     * The IP address that the Amazon Redshift cluster must use to access the HSM.
     */
    hsmIpAddress: pulumi.Input<string>;
    /**
     * The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
     */
    hsmPartitionName: pulumi.Input<string>;
    /**
     * The password required to access the HSM partition.
     */
    hsmPartitionPassword: pulumi.Input<string>;
    /**
     * The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
     */
    hsmServerPublicCertificate: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
