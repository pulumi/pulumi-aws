// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class EndpointAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing EndpointAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointAuthorizationState, opts?: pulumi.CustomResourceOptions): EndpointAuthorization {
        return new EndpointAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:redshift/endpointAuthorization:EndpointAuthorization';

    /**
     * Returns true if the given object is an instance of EndpointAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointAuthorization.__pulumiType;
    }

    public readonly account!: pulumi.Output<string>;
    public /*out*/ readonly allowedAllVpcs!: pulumi.Output<boolean>;
    public readonly clusterIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly endpointCount!: pulumi.Output<number>;
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly grantee!: pulumi.Output<string>;
    public /*out*/ readonly grantor!: pulumi.Output<string>;
    public readonly vpcIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a EndpointAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointAuthorizationArgs | EndpointAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointAuthorizationState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["allowedAllVpcs"] = state ? state.allowedAllVpcs : undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["endpointCount"] = state ? state.endpointCount : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["grantee"] = state ? state.grantee : undefined;
            resourceInputs["grantor"] = state ? state.grantor : undefined;
            resourceInputs["vpcIds"] = state ? state.vpcIds : undefined;
        } else {
            const args = argsOrState as EndpointAuthorizationArgs | undefined;
            if ((!args || args.account === undefined) && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["vpcIds"] = args ? args.vpcIds : undefined;
            resourceInputs["allowedAllVpcs"] = undefined /*out*/;
            resourceInputs["endpointCount"] = undefined /*out*/;
            resourceInputs["grantee"] = undefined /*out*/;
            resourceInputs["grantor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EndpointAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EndpointAuthorization resources.
 */
export interface EndpointAuthorizationState {
    account?: pulumi.Input<string>;
    allowedAllVpcs?: pulumi.Input<boolean>;
    clusterIdentifier?: pulumi.Input<string>;
    endpointCount?: pulumi.Input<number>;
    forceDelete?: pulumi.Input<boolean>;
    grantee?: pulumi.Input<string>;
    grantor?: pulumi.Input<string>;
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EndpointAuthorization resource.
 */
export interface EndpointAuthorizationArgs {
    account: pulumi.Input<string>;
    clusterIdentifier: pulumi.Input<string>;
    forceDelete?: pulumi.Input<boolean>;
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}
