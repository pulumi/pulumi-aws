// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Creates a new Amazon Redshift endpoint access.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshift.EndpointAccess("example", {
 *     endpointName: "example",
 *     subnetGroupName: aws_redshift_subnet_group.example.id,
 *     clusterIdentifier: aws_redshift_cluster.example.cluster_identifier,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift endpoint access using the `name`. For example:
 *
 * ```sh
 *  $ pulumi import aws:redshift/endpointAccess:EndpointAccess example example
 * ```
 */
export class EndpointAccess extends pulumi.CustomResource {
    /**
     * Get an existing EndpointAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointAccessState, opts?: pulumi.CustomResourceOptions): EndpointAccess {
        return new EndpointAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:redshift/endpointAccess:EndpointAccess';

    /**
     * Returns true if the given object is an instance of EndpointAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointAccess.__pulumiType;
    }

    /**
     * The DNS address of the endpoint.
     */
    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * The cluster identifier of the cluster to access.
     */
    public readonly clusterIdentifier!: pulumi.Output<string>;
    /**
     * The Redshift-managed VPC endpoint name.
     */
    public readonly endpointName!: pulumi.Output<string>;
    /**
     * The port number on which the cluster accepts incoming connections.
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
     */
    public readonly resourceOwner!: pulumi.Output<string>;
    /**
     * The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
     */
    public readonly subnetGroupName!: pulumi.Output<string>;
    /**
     * The connection endpoint for connecting to an Amazon Redshift cluster through the proxy. See details below.
     */
    public /*out*/ readonly vpcEndpoints!: pulumi.Output<outputs.redshift.EndpointAccessVpcEndpoint[]>;
    /**
     * The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
     */
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a EndpointAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointAccessArgs | EndpointAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointAccessState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["endpointName"] = state ? state.endpointName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["resourceOwner"] = state ? state.resourceOwner : undefined;
            resourceInputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            resourceInputs["vpcEndpoints"] = state ? state.vpcEndpoints : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as EndpointAccessArgs | undefined;
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if ((!args || args.endpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointName'");
            }
            if ((!args || args.subnetGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetGroupName'");
            }
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["endpointName"] = args ? args.endpointName : undefined;
            resourceInputs["resourceOwner"] = args ? args.resourceOwner : undefined;
            resourceInputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["vpcEndpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EndpointAccess.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EndpointAccess resources.
 */
export interface EndpointAccessState {
    /**
     * The DNS address of the endpoint.
     */
    address?: pulumi.Input<string>;
    /**
     * The cluster identifier of the cluster to access.
     */
    clusterIdentifier?: pulumi.Input<string>;
    /**
     * The Redshift-managed VPC endpoint name.
     */
    endpointName?: pulumi.Input<string>;
    /**
     * The port number on which the cluster accepts incoming connections.
     */
    port?: pulumi.Input<number>;
    /**
     * The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
     */
    resourceOwner?: pulumi.Input<string>;
    /**
     * The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
     */
    subnetGroupName?: pulumi.Input<string>;
    /**
     * The connection endpoint for connecting to an Amazon Redshift cluster through the proxy. See details below.
     */
    vpcEndpoints?: pulumi.Input<pulumi.Input<inputs.redshift.EndpointAccessVpcEndpoint>[]>;
    /**
     * The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
     */
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EndpointAccess resource.
 */
export interface EndpointAccessArgs {
    /**
     * The cluster identifier of the cluster to access.
     */
    clusterIdentifier: pulumi.Input<string>;
    /**
     * The Redshift-managed VPC endpoint name.
     */
    endpointName: pulumi.Input<string>;
    /**
     * The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
     */
    resourceOwner?: pulumi.Input<string>;
    /**
     * The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
     */
    subnetGroupName: pulumi.Input<string>;
    /**
     * The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
     */
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
