// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides details about a specific redshift cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.redshift.getCluster({
 *     clusterIdentifier: "example-cluster",
 * });
 * const exampleStream = new aws.kinesis.FirehoseDeliveryStream("exampleStream", {
 *     destination: "redshift",
 *     s3Configuration: {
 *         roleArn: aws_iam_role.firehose_role.arn,
 *         bucketArn: aws_s3_bucket.bucket.arn,
 *         bufferSize: 10,
 *         bufferInterval: 400,
 *         compressionFormat: "GZIP",
 *     },
 *     redshiftConfiguration: {
 *         roleArn: aws_iam_role.firehose_role.arn,
 *         clusterJdbcurl: Promise.all([example, example]).then(([example, example1]) => `jdbc:redshift://${example.endpoint}/${example1.databaseName}`),
 *         username: "exampleuser",
 *         password: "Exampl3Pass",
 *         dataTableName: "example-table",
 *         copyOptions: "delimiter '|'",
 *         dataTableColumns: "example-col",
 *     },
 * });
 * ```
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:redshift/getCluster:getCluster", {
        "clusterIdentifier": args.clusterIdentifier,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * The cluster identifier
     */
    clusterIdentifier: string;
    /**
     * The tags associated to the cluster
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    /**
     * Whether major version upgrades can be applied during maintenance period
     */
    readonly allowVersionUpgrade: boolean;
    /**
     * The value represents how the cluster is configured to use AQUA.
     */
    readonly aquaConfigurationStatus: string;
    /**
     * Amazon Resource Name (ARN) of cluster.
     */
    readonly arn: string;
    /**
     * The backup retention period
     */
    readonly automatedSnapshotRetentionPeriod: number;
    /**
     * The availability zone of the cluster
     */
    readonly availabilityZone: string;
    /**
     * Indicates whether the cluster is able to be relocated to another availability zone.
     */
    readonly availabilityZoneRelocationEnabled: boolean;
    /**
     * The name of the S3 bucket where the log files are to be stored
     */
    readonly bucketName: string;
    /**
     * The cluster identifier
     */
    readonly clusterIdentifier: string;
    /**
     * The nodes in the cluster. Cluster node blocks are documented below
     */
    readonly clusterNodes: outputs.redshift.GetClusterClusterNode[];
    /**
     * The name of the parameter group to be associated with this cluster
     */
    readonly clusterParameterGroupName: string;
    /**
     * The public key for the cluster
     */
    readonly clusterPublicKey: string;
    /**
     * The cluster revision number
     */
    readonly clusterRevisionNumber: string;
    /**
     * The security groups associated with the cluster
     */
    readonly clusterSecurityGroups: string[];
    /**
     * The name of a cluster subnet group to be associated with this cluster
     */
    readonly clusterSubnetGroupName: string;
    /**
     * The cluster type
     */
    readonly clusterType: string;
    readonly clusterVersion: string;
    /**
     * The name of the default database in the cluster
     */
    readonly databaseName: string;
    /**
     * âˆ‚The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.
     */
    readonly defaultIamRoleArn: string;
    /**
     * The Elastic IP of the cluster
     */
    readonly elasticIp: string;
    /**
     * Whether cluster logging is enabled
     */
    readonly enableLogging: boolean;
    /**
     * Whether the cluster data is encrypted
     */
    readonly encrypted: boolean;
    /**
     * The cluster endpoint
     */
    readonly endpoint: string;
    /**
     * Whether enhanced VPC routing is enabled
     */
    readonly enhancedVpcRouting: boolean;
    /**
     * The IAM roles associated to the cluster
     */
    readonly iamRoles: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The KMS encryption key associated to the cluster
     */
    readonly kmsKeyId: string;
    /**
     * The log destination type.
     */
    readonly logDestinationType: string;
    /**
     * The collection of exported log types. Log types include the connection log, user log and user activity log.
     */
    readonly logExports: string[];
    /**
     * The name of the maintenance track for the restored cluster.
     */
    readonly maintenanceTrackName: string;
    /**
     * (Optional)  The default number of days to retain a manual snapshot.
     */
    readonly manualSnapshotRetentionPeriod: number;
    /**
     * Username for the master DB user
     */
    readonly masterUsername: string;
    /**
     * The cluster node type
     */
    readonly nodeType: string;
    /**
     * The number of nodes in the cluster
     */
    readonly numberOfNodes: number;
    /**
     * The port the cluster responds on
     */
    readonly port: number;
    /**
     * The maintenance window
     */
    readonly preferredMaintenanceWindow: string;
    /**
     * Whether the cluster is publicly accessible
     */
    readonly publiclyAccessible: boolean;
    /**
     * The folder inside the S3 bucket where the log files are stored
     */
    readonly s3KeyPrefix: string;
    /**
     * The tags associated to the cluster
     */
    readonly tags?: {[key: string]: string};
    /**
     * The VPC Id associated with the cluster
     */
    readonly vpcId: string;
    /**
     * The VPC security group Ids associated with the cluster
     */
    readonly vpcSecurityGroupIds: string[];
}

export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply(a => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    /**
     * The cluster identifier
     */
    clusterIdentifier: pulumi.Input<string>;
    /**
     * The tags associated to the cluster
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
