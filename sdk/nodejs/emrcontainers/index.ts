// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetVirtualClusterArgs, GetVirtualClusterResult, GetVirtualClusterOutputArgs } from "./getVirtualCluster";
export const getVirtualCluster: typeof import("./getVirtualCluster").getVirtualCluster = null as any;
export const getVirtualClusterOutput: typeof import("./getVirtualCluster").getVirtualClusterOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualCluster","getVirtualClusterOutput"], () => require("./getVirtualCluster"));

export { JobTemplateArgs, JobTemplateState } from "./jobTemplate";
export type JobTemplate = import("./jobTemplate").JobTemplate;
export const JobTemplate: typeof import("./jobTemplate").JobTemplate = null as any;
utilities.lazyLoad(exports, ["JobTemplate"], () => require("./jobTemplate"));

export { VirtualClusterArgs, VirtualClusterState } from "./virtualCluster";
export type VirtualCluster = import("./virtualCluster").VirtualCluster;
export const VirtualCluster: typeof import("./virtualCluster").VirtualCluster = null as any;
utilities.lazyLoad(exports, ["VirtualCluster"], () => require("./virtualCluster"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:emrcontainers/jobTemplate:JobTemplate":
                return new JobTemplate(name, <any>undefined, { urn })
            case "aws:emrcontainers/virtualCluster:VirtualCluster":
                return new VirtualCluster(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "emrcontainers/jobTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "emrcontainers/virtualCluster", _module)
