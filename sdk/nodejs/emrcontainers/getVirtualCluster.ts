// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getVirtualCluster(args: GetVirtualClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:emrcontainers/getVirtualCluster:getVirtualCluster", {
        "tags": args.tags,
        "virtualClusterId": args.virtualClusterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualCluster.
 */
export interface GetVirtualClusterArgs {
    tags?: {[key: string]: string};
    virtualClusterId: string;
}

/**
 * A collection of values returned by getVirtualCluster.
 */
export interface GetVirtualClusterResult {
    readonly arn: string;
    readonly containerProviders: outputs.emrcontainers.GetVirtualClusterContainerProvider[];
    readonly createdAt: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly state: string;
    readonly tags: {[key: string]: string};
    readonly virtualClusterId: string;
}
export function getVirtualClusterOutput(args: GetVirtualClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualClusterResult> {
    return pulumi.output(args).apply((a: any) => getVirtualCluster(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualCluster.
 */
export interface GetVirtualClusterOutputArgs {
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    virtualClusterId: pulumi.Input<string>;
}
