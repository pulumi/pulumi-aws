// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides details about a specific Amazon Connect User.
 *
 * ## Example Usage
 *
 * By `name`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.connect.getUser({
 *     instanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
 *     name: "Example",
 * });
 * ```
 *
 * By `userId`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.connect.getUser({
 *     instanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
 *     userId: "cccccccc-bbbb-cccc-dddd-111111111111",
 * });
 * ```
 */
export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:connect/getUser:getUser", {
        "instanceId": args.instanceId,
        "name": args.name,
        "tags": args.tags,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * Reference to the hosting Amazon Connect Instance
     */
    instanceId: string;
    /**
     * Returns information on a specific User by name
     */
    name?: string;
    /**
     * A map of tags to assign to the User.
     */
    tags?: {[key: string]: string};
    /**
     * Returns information on a specific User by User id
     */
    userId?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    /**
     * The Amazon Resource Name (ARN) of the User.
     */
    readonly arn: string;
    /**
     * The identifier of the user account in the directory used for identity management.
     */
    readonly directoryUserId: string;
    /**
     * The identifier of the hierarchy group for the user.
     */
    readonly hierarchyGroupId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A block that contains information about the identity of the user. Documented below.
     */
    readonly identityInfos: outputs.connect.GetUserIdentityInfo[];
    /**
     * Specifies the identifier of the hosting Amazon Connect Instance.
     */
    readonly instanceId: string;
    readonly name: string;
    /**
     * A block that contains information about the phone settings for the user. Documented below.
     */
    readonly phoneConfigs: outputs.connect.GetUserPhoneConfig[];
    /**
     * The identifier of the routing profile for the user.
     */
    readonly routingProfileId: string;
    /**
     * A list of identifiers for the security profiles for the user.
     */
    readonly securityProfileIds: string[];
    /**
     * A map of tags to assign to the User.
     */
    readonly tags: {[key: string]: string};
    readonly userId: string;
}
/**
 * Provides details about a specific Amazon Connect User.
 *
 * ## Example Usage
 *
 * By `name`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.connect.getUser({
 *     instanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
 *     name: "Example",
 * });
 * ```
 *
 * By `userId`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.connect.getUser({
 *     instanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
 *     userId: "cccccccc-bbbb-cccc-dddd-111111111111",
 * });
 * ```
 */
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * Reference to the hosting Amazon Connect Instance
     */
    instanceId: pulumi.Input<string>;
    /**
     * Returns information on a specific User by name
     */
    name?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the User.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Returns information on a specific User by User id
     */
    userId?: pulumi.Input<string>;
}
