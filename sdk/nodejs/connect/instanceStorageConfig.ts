// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an Amazon Connect Instance Storage Config resource. For more information see
 * [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html)
 *
 * ## Example Usage
 * ### Storage Config Kinesis Firehose Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "CONTACT_TRACE_RECORDS",
 *     storageConfig: {
 *         kinesisFirehoseConfig: {
 *             firehoseArn: aws_kinesis_firehose_delivery_stream.example.arn,
 *         },
 *         storageType: "KINESIS_FIREHOSE",
 *     },
 * });
 * ```
 * ### Storage Config Kinesis Stream Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "CONTACT_TRACE_RECORDS",
 *     storageConfig: {
 *         kinesisStreamConfig: {
 *             streamArn: aws_kinesis_stream.example.arn,
 *         },
 *         storageType: "KINESIS_STREAM",
 *     },
 * });
 * ```
 * ### Storage Config Kinesis Video Stream Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "MEDIA_STREAMS",
 *     storageConfig: {
 *         kinesisVideoStreamConfig: {
 *             prefix: "example",
 *             retentionPeriodHours: 3,
 *             encryptionConfig: {
 *                 encryptionType: "KMS",
 *                 keyId: aws_kms_key.example.arn,
 *             },
 *         },
 *         storageType: "KINESIS_VIDEO_STREAM",
 *     },
 * });
 * ```
 * ### Storage Config S3 Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "CHAT_TRANSCRIPTS",
 *     storageConfig: {
 *         s3Config: {
 *             bucketName: aws_s3_bucket.example.id,
 *             bucketPrefix: "example",
 *         },
 *         storageType: "S3",
 *     },
 * });
 * ```
 * ### Storage Config S3 Config with Encryption Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.connect.InstanceStorageConfig("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     resourceType: "CHAT_TRANSCRIPTS",
 *     storageConfig: {
 *         s3Config: {
 *             bucketName: aws_s3_bucket.example.id,
 *             bucketPrefix: "example",
 *             encryptionConfig: {
 *                 encryptionType: "KMS",
 *                 keyId: aws_kms_key.example.arn,
 *             },
 *         },
 *         storageType: "S3",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Amazon Connect Instance Storage Configs can be imported using the `instance_id`, `association_id`, and `resource_type` separated by a colon (`:`), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:connect/instanceStorageConfig:InstanceStorageConfig example f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5:CHAT_TRANSCRIPTS
 * ```
 */
export class InstanceStorageConfig extends pulumi.CustomResource {
    /**
     * Get an existing InstanceStorageConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceStorageConfigState, opts?: pulumi.CustomResourceOptions): InstanceStorageConfig {
        return new InstanceStorageConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:connect/instanceStorageConfig:InstanceStorageConfig';

    /**
     * Returns true if the given object is an instance of InstanceStorageConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceStorageConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceStorageConfig.__pulumiType;
    }

    /**
     * The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
     */
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    /**
     * Specifies the identifier of the hosting Amazon Connect Instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * A valid resource type. Valid Values: `CHAT_TRANSCRIPTS` | `CALL_RECORDINGS` | `SCHEDULED_REPORTS` | `MEDIA_STREAMS` | `CONTACT_TRACE_RECORDS` | `AGENT_EVENTS` | `REAL_TIME_CONTACT_ANALYSIS_SEGMENTS`.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * Specifies the storage configuration options for the Connect Instance. Documented below.
     */
    public readonly storageConfig!: pulumi.Output<outputs.connect.InstanceStorageConfigStorageConfig>;

    /**
     * Create a InstanceStorageConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceStorageConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceStorageConfigArgs | InstanceStorageConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceStorageConfigState | undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["storageConfig"] = state ? state.storageConfig : undefined;
        } else {
            const args = argsOrState as InstanceStorageConfigArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.storageConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageConfig'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["storageConfig"] = args ? args.storageConfig : undefined;
            resourceInputs["associationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceStorageConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceStorageConfig resources.
 */
export interface InstanceStorageConfigState {
    /**
     * The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
     */
    associationId?: pulumi.Input<string>;
    /**
     * Specifies the identifier of the hosting Amazon Connect Instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * A valid resource type. Valid Values: `CHAT_TRANSCRIPTS` | `CALL_RECORDINGS` | `SCHEDULED_REPORTS` | `MEDIA_STREAMS` | `CONTACT_TRACE_RECORDS` | `AGENT_EVENTS` | `REAL_TIME_CONTACT_ANALYSIS_SEGMENTS`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Specifies the storage configuration options for the Connect Instance. Documented below.
     */
    storageConfig?: pulumi.Input<inputs.connect.InstanceStorageConfigStorageConfig>;
}

/**
 * The set of arguments for constructing a InstanceStorageConfig resource.
 */
export interface InstanceStorageConfigArgs {
    /**
     * Specifies the identifier of the hosting Amazon Connect Instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * A valid resource type. Valid Values: `CHAT_TRANSCRIPTS` | `CALL_RECORDINGS` | `SCHEDULED_REPORTS` | `MEDIA_STREAMS` | `CONTACT_TRACE_RECORDS` | `AGENT_EVENTS` | `REAL_TIME_CONTACT_ANALYSIS_SEGMENTS`.
     */
    resourceType: pulumi.Input<string>;
    /**
     * Specifies the storage configuration options for the Connect Instance. Documented below.
     */
    storageConfig: pulumi.Input<inputs.connect.InstanceStorageConfigStorageConfig>;
}
