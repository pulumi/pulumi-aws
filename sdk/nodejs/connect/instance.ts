// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:connect/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoResolveBestVoicesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly contactFlowLogsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly contactLensEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly directoryId!: pulumi.Output<string | undefined>;
    public readonly earlyMediaEnabled!: pulumi.Output<boolean | undefined>;
    public readonly identityManagementType!: pulumi.Output<string>;
    public readonly inboundCallsEnabled!: pulumi.Output<boolean>;
    public readonly instanceAlias!: pulumi.Output<string | undefined>;
    public readonly multiPartyConferenceEnabled!: pulumi.Output<boolean | undefined>;
    public readonly outboundCallsEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly serviceRole!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoResolveBestVoicesEnabled"] = state ? state.autoResolveBestVoicesEnabled : undefined;
            resourceInputs["contactFlowLogsEnabled"] = state ? state.contactFlowLogsEnabled : undefined;
            resourceInputs["contactLensEnabled"] = state ? state.contactLensEnabled : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["earlyMediaEnabled"] = state ? state.earlyMediaEnabled : undefined;
            resourceInputs["identityManagementType"] = state ? state.identityManagementType : undefined;
            resourceInputs["inboundCallsEnabled"] = state ? state.inboundCallsEnabled : undefined;
            resourceInputs["instanceAlias"] = state ? state.instanceAlias : undefined;
            resourceInputs["multiPartyConferenceEnabled"] = state ? state.multiPartyConferenceEnabled : undefined;
            resourceInputs["outboundCallsEnabled"] = state ? state.outboundCallsEnabled : undefined;
            resourceInputs["serviceRole"] = state ? state.serviceRole : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.identityManagementType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityManagementType'");
            }
            if ((!args || args.inboundCallsEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inboundCallsEnabled'");
            }
            if ((!args || args.outboundCallsEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outboundCallsEnabled'");
            }
            resourceInputs["autoResolveBestVoicesEnabled"] = args ? args.autoResolveBestVoicesEnabled : undefined;
            resourceInputs["contactFlowLogsEnabled"] = args ? args.contactFlowLogsEnabled : undefined;
            resourceInputs["contactLensEnabled"] = args ? args.contactLensEnabled : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["earlyMediaEnabled"] = args ? args.earlyMediaEnabled : undefined;
            resourceInputs["identityManagementType"] = args ? args.identityManagementType : undefined;
            resourceInputs["inboundCallsEnabled"] = args ? args.inboundCallsEnabled : undefined;
            resourceInputs["instanceAlias"] = args ? args.instanceAlias : undefined;
            resourceInputs["multiPartyConferenceEnabled"] = args ? args.multiPartyConferenceEnabled : undefined;
            resourceInputs["outboundCallsEnabled"] = args ? args.outboundCallsEnabled : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["serviceRole"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    arn?: pulumi.Input<string>;
    autoResolveBestVoicesEnabled?: pulumi.Input<boolean>;
    contactFlowLogsEnabled?: pulumi.Input<boolean>;
    contactLensEnabled?: pulumi.Input<boolean>;
    createdTime?: pulumi.Input<string>;
    directoryId?: pulumi.Input<string>;
    earlyMediaEnabled?: pulumi.Input<boolean>;
    identityManagementType?: pulumi.Input<string>;
    inboundCallsEnabled?: pulumi.Input<boolean>;
    instanceAlias?: pulumi.Input<string>;
    multiPartyConferenceEnabled?: pulumi.Input<boolean>;
    outboundCallsEnabled?: pulumi.Input<boolean>;
    serviceRole?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    autoResolveBestVoicesEnabled?: pulumi.Input<boolean>;
    contactFlowLogsEnabled?: pulumi.Input<boolean>;
    contactLensEnabled?: pulumi.Input<boolean>;
    directoryId?: pulumi.Input<string>;
    earlyMediaEnabled?: pulumi.Input<boolean>;
    identityManagementType: pulumi.Input<string>;
    inboundCallsEnabled: pulumi.Input<boolean>;
    instanceAlias?: pulumi.Input<string>;
    multiPartyConferenceEnabled?: pulumi.Input<boolean>;
    outboundCallsEnabled: pulumi.Input<boolean>;
}
