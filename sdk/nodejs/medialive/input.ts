// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Input extends pulumi.CustomResource {
    /**
     * Get an existing Input resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InputState, opts?: pulumi.CustomResourceOptions): Input {
        return new Input(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:medialive/input:Input';

    /**
     * Returns true if the given object is an instance of Input.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Input {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Input.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly attachedChannels!: pulumi.Output<string[]>;
    public readonly destinations!: pulumi.Output<outputs.medialive.InputDestination[] | undefined>;
    public /*out*/ readonly inputClass!: pulumi.Output<string>;
    public readonly inputDevices!: pulumi.Output<outputs.medialive.InputInputDevice[]>;
    public /*out*/ readonly inputPartnerIds!: pulumi.Output<string[]>;
    public readonly inputSecurityGroups!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly inputSourceType!: pulumi.Output<string>;
    public readonly mediaConnectFlows!: pulumi.Output<outputs.medialive.InputMediaConnectFlow[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly sources!: pulumi.Output<outputs.medialive.InputSource[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly type!: pulumi.Output<string>;
    public readonly vpc!: pulumi.Output<outputs.medialive.InputVpc | undefined>;

    /**
     * Create a Input resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InputArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InputArgs | InputState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InputState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["attachedChannels"] = state ? state.attachedChannels : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["inputClass"] = state ? state.inputClass : undefined;
            resourceInputs["inputDevices"] = state ? state.inputDevices : undefined;
            resourceInputs["inputPartnerIds"] = state ? state.inputPartnerIds : undefined;
            resourceInputs["inputSecurityGroups"] = state ? state.inputSecurityGroups : undefined;
            resourceInputs["inputSourceType"] = state ? state.inputSourceType : undefined;
            resourceInputs["mediaConnectFlows"] = state ? state.mediaConnectFlows : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpc"] = state ? state.vpc : undefined;
        } else {
            const args = argsOrState as InputArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["inputDevices"] = args ? args.inputDevices : undefined;
            resourceInputs["inputSecurityGroups"] = args ? args.inputSecurityGroups : undefined;
            resourceInputs["mediaConnectFlows"] = args ? args.mediaConnectFlows : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpc"] = args ? args.vpc : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["attachedChannels"] = undefined /*out*/;
            resourceInputs["inputClass"] = undefined /*out*/;
            resourceInputs["inputPartnerIds"] = undefined /*out*/;
            resourceInputs["inputSourceType"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Input.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Input resources.
 */
export interface InputState {
    arn?: pulumi.Input<string>;
    attachedChannels?: pulumi.Input<pulumi.Input<string>[]>;
    destinations?: pulumi.Input<pulumi.Input<inputs.medialive.InputDestination>[]>;
    inputClass?: pulumi.Input<string>;
    inputDevices?: pulumi.Input<pulumi.Input<inputs.medialive.InputInputDevice>[]>;
    inputPartnerIds?: pulumi.Input<pulumi.Input<string>[]>;
    inputSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    inputSourceType?: pulumi.Input<string>;
    mediaConnectFlows?: pulumi.Input<pulumi.Input<inputs.medialive.InputMediaConnectFlow>[]>;
    name?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.medialive.InputSource>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    vpc?: pulumi.Input<inputs.medialive.InputVpc>;
}

/**
 * The set of arguments for constructing a Input resource.
 */
export interface InputArgs {
    destinations?: pulumi.Input<pulumi.Input<inputs.medialive.InputDestination>[]>;
    inputDevices?: pulumi.Input<pulumi.Input<inputs.medialive.InputInputDevice>[]>;
    inputSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    mediaConnectFlows?: pulumi.Input<pulumi.Input<inputs.medialive.InputMediaConnectFlow>[]>;
    name?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.medialive.InputSource>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
    vpc?: pulumi.Input<inputs.medialive.InputVpc>;
}
