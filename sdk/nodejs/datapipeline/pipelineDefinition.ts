// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class PipelineDefinition extends pulumi.CustomResource {
    /**
     * Get an existing PipelineDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineDefinitionState, opts?: pulumi.CustomResourceOptions): PipelineDefinition {
        return new PipelineDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:datapipeline/pipelineDefinition:PipelineDefinition';

    /**
     * Returns true if the given object is an instance of PipelineDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PipelineDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PipelineDefinition.__pulumiType;
    }

    public readonly parameterObjects!: pulumi.Output<outputs.datapipeline.PipelineDefinitionParameterObject[] | undefined>;
    public readonly parameterValues!: pulumi.Output<outputs.datapipeline.PipelineDefinitionParameterValue[] | undefined>;
    public readonly pipelineId!: pulumi.Output<string>;
    public readonly pipelineObjects!: pulumi.Output<outputs.datapipeline.PipelineDefinitionPipelineObject[]>;

    /**
     * Create a PipelineDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineDefinitionArgs | PipelineDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineDefinitionState | undefined;
            resourceInputs["parameterObjects"] = state ? state.parameterObjects : undefined;
            resourceInputs["parameterValues"] = state ? state.parameterValues : undefined;
            resourceInputs["pipelineId"] = state ? state.pipelineId : undefined;
            resourceInputs["pipelineObjects"] = state ? state.pipelineObjects : undefined;
        } else {
            const args = argsOrState as PipelineDefinitionArgs | undefined;
            if ((!args || args.pipelineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineId'");
            }
            if ((!args || args.pipelineObjects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineObjects'");
            }
            resourceInputs["parameterObjects"] = args ? args.parameterObjects : undefined;
            resourceInputs["parameterValues"] = args ? args.parameterValues : undefined;
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["pipelineObjects"] = args ? args.pipelineObjects : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PipelineDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PipelineDefinition resources.
 */
export interface PipelineDefinitionState {
    parameterObjects?: pulumi.Input<pulumi.Input<inputs.datapipeline.PipelineDefinitionParameterObject>[]>;
    parameterValues?: pulumi.Input<pulumi.Input<inputs.datapipeline.PipelineDefinitionParameterValue>[]>;
    pipelineId?: pulumi.Input<string>;
    pipelineObjects?: pulumi.Input<pulumi.Input<inputs.datapipeline.PipelineDefinitionPipelineObject>[]>;
}

/**
 * The set of arguments for constructing a PipelineDefinition resource.
 */
export interface PipelineDefinitionArgs {
    parameterObjects?: pulumi.Input<pulumi.Input<inputs.datapipeline.PipelineDefinitionParameterObject>[]>;
    parameterValues?: pulumi.Input<pulumi.Input<inputs.datapipeline.PipelineDefinitionParameterValue>[]>;
    pipelineId: pulumi.Input<string>;
    pipelineObjects: pulumi.Input<pulumi.Input<inputs.datapipeline.PipelineDefinitionPipelineObject>[]>;
}
