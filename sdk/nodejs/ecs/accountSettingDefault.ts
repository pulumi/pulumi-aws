// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an ECS default account setting for a specific ECS Resource name within a specific region. More information can be found on the [ECS Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html).
 *
 * > **NOTE:** The AWS API does not delete this resource. When you run `destroy`, the provider will attempt to disable the setting.
 *
 * > **NOTE:** Your AWS account may not support disabling `containerInstanceLongArnFormat`, `serviceLongArnFormat`, and `taskLongArnFormat`. If your account does not support disabling these, "destroying" this resource will not disable the setting nor cause a provider error. However, the AWS Provider will log an AWS error: `InvalidParameterException: You can no longer disable Long Arn settings`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.ecs.AccountSettingDefault("test", {value: "enabled"});
 * ```
 *
 * ## Import
 *
 * ECS Account Setting defaults can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ecs/accountSettingDefault:AccountSettingDefault example taskLongArnFormat
 * ```
 */
export class AccountSettingDefault extends pulumi.CustomResource {
    /**
     * Get an existing AccountSettingDefault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountSettingDefaultState, opts?: pulumi.CustomResourceOptions): AccountSettingDefault {
        return new AccountSettingDefault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ecs/accountSettingDefault:AccountSettingDefault';

    /**
     * Returns true if the given object is an instance of AccountSettingDefault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountSettingDefault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountSettingDefault.__pulumiType;
    }

    /**
     * Name of the account setting to set. Valid values are `serviceLongArnFormat`, `taskLongArnFormat`, `containerInstanceLongArnFormat`, `awsvpcTrunking` and `containerInsights`.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly principalArn!: pulumi.Output<string>;
    /**
     * State of the setting. Valid values are `enabled` and `disabled`.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a AccountSettingDefault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountSettingDefaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountSettingDefaultArgs | AccountSettingDefaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountSettingDefaultState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principalArn"] = state ? state.principalArn : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as AccountSettingDefaultArgs | undefined;
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["principalArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountSettingDefault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountSettingDefault resources.
 */
export interface AccountSettingDefaultState {
    /**
     * Name of the account setting to set. Valid values are `serviceLongArnFormat`, `taskLongArnFormat`, `containerInstanceLongArnFormat`, `awsvpcTrunking` and `containerInsights`.
     */
    name?: pulumi.Input<string>;
    principalArn?: pulumi.Input<string>;
    /**
     * State of the setting. Valid values are `enabled` and `disabled`.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountSettingDefault resource.
 */
export interface AccountSettingDefaultArgs {
    /**
     * Name of the account setting to set. Valid values are `serviceLongArnFormat`, `taskLongArnFormat`, `containerInstanceLongArnFormat`, `awsvpcTrunking` and `containerInsights`.
     */
    name?: pulumi.Input<string>;
    /**
     * State of the setting. Valid values are `enabled` and `disabled`.
     */
    value: pulumi.Input<string>;
}
