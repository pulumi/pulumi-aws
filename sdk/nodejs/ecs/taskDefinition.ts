// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class TaskDefinition extends pulumi.CustomResource {
    /**
     * Get an existing TaskDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaskDefinitionState, opts?: pulumi.CustomResourceOptions): TaskDefinition {
        return new TaskDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ecs/taskDefinition:TaskDefinition';

    /**
     * Returns true if the given object is an instance of TaskDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TaskDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TaskDefinition.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly containerDefinitions!: pulumi.Output<string>;
    public readonly cpu!: pulumi.Output<string | undefined>;
    public readonly ephemeralStorage!: pulumi.Output<outputs.ecs.TaskDefinitionEphemeralStorage | undefined>;
    public readonly executionRoleArn!: pulumi.Output<string | undefined>;
    public readonly family!: pulumi.Output<string>;
    public readonly inferenceAccelerators!: pulumi.Output<outputs.ecs.TaskDefinitionInferenceAccelerator[] | undefined>;
    public readonly ipcMode!: pulumi.Output<string | undefined>;
    public readonly memory!: pulumi.Output<string | undefined>;
    public readonly networkMode!: pulumi.Output<string>;
    public readonly pidMode!: pulumi.Output<string | undefined>;
    public readonly placementConstraints!: pulumi.Output<outputs.ecs.TaskDefinitionPlacementConstraint[] | undefined>;
    public readonly proxyConfiguration!: pulumi.Output<outputs.ecs.TaskDefinitionProxyConfiguration | undefined>;
    public readonly requiresCompatibilities!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly revision!: pulumi.Output<number>;
    public readonly runtimePlatform!: pulumi.Output<outputs.ecs.TaskDefinitionRuntimePlatform | undefined>;
    public readonly skipDestroy!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly taskRoleArn!: pulumi.Output<string | undefined>;
    public readonly volumes!: pulumi.Output<outputs.ecs.TaskDefinitionVolume[] | undefined>;

    /**
     * Create a TaskDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TaskDefinitionArgs | TaskDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TaskDefinitionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["containerDefinitions"] = state ? state.containerDefinitions : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["ephemeralStorage"] = state ? state.ephemeralStorage : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["inferenceAccelerators"] = state ? state.inferenceAccelerators : undefined;
            resourceInputs["ipcMode"] = state ? state.ipcMode : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["networkMode"] = state ? state.networkMode : undefined;
            resourceInputs["pidMode"] = state ? state.pidMode : undefined;
            resourceInputs["placementConstraints"] = state ? state.placementConstraints : undefined;
            resourceInputs["proxyConfiguration"] = state ? state.proxyConfiguration : undefined;
            resourceInputs["requiresCompatibilities"] = state ? state.requiresCompatibilities : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["runtimePlatform"] = state ? state.runtimePlatform : undefined;
            resourceInputs["skipDestroy"] = state ? state.skipDestroy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["taskRoleArn"] = state ? state.taskRoleArn : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as TaskDefinitionArgs | undefined;
            if ((!args || args.containerDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerDefinitions'");
            }
            if ((!args || args.family === undefined) && !opts.urn) {
                throw new Error("Missing required property 'family'");
            }
            resourceInputs["containerDefinitions"] = args ? args.containerDefinitions : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["ephemeralStorage"] = args ? args.ephemeralStorage : undefined;
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["inferenceAccelerators"] = args ? args.inferenceAccelerators : undefined;
            resourceInputs["ipcMode"] = args ? args.ipcMode : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["networkMode"] = args ? args.networkMode : undefined;
            resourceInputs["pidMode"] = args ? args.pidMode : undefined;
            resourceInputs["placementConstraints"] = args ? args.placementConstraints : undefined;
            resourceInputs["proxyConfiguration"] = args ? args.proxyConfiguration : undefined;
            resourceInputs["requiresCompatibilities"] = args ? args.requiresCompatibilities : undefined;
            resourceInputs["runtimePlatform"] = args ? args.runtimePlatform : undefined;
            resourceInputs["skipDestroy"] = args ? args.skipDestroy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskRoleArn"] = args ? args.taskRoleArn : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TaskDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TaskDefinition resources.
 */
export interface TaskDefinitionState {
    arn?: pulumi.Input<string>;
    containerDefinitions?: pulumi.Input<string>;
    cpu?: pulumi.Input<string>;
    ephemeralStorage?: pulumi.Input<inputs.ecs.TaskDefinitionEphemeralStorage>;
    executionRoleArn?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    inferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionInferenceAccelerator>[]>;
    ipcMode?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    networkMode?: pulumi.Input<string>;
    pidMode?: pulumi.Input<string>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionPlacementConstraint>[]>;
    proxyConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionProxyConfiguration>;
    requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    revision?: pulumi.Input<number>;
    runtimePlatform?: pulumi.Input<inputs.ecs.TaskDefinitionRuntimePlatform>;
    skipDestroy?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskRoleArn?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionVolume>[]>;
}

/**
 * The set of arguments for constructing a TaskDefinition resource.
 */
export interface TaskDefinitionArgs {
    containerDefinitions: pulumi.Input<string>;
    cpu?: pulumi.Input<string>;
    ephemeralStorage?: pulumi.Input<inputs.ecs.TaskDefinitionEphemeralStorage>;
    executionRoleArn?: pulumi.Input<string>;
    family: pulumi.Input<string>;
    inferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionInferenceAccelerator>[]>;
    ipcMode?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    networkMode?: pulumi.Input<string>;
    pidMode?: pulumi.Input<string>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionPlacementConstraint>[]>;
    proxyConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionProxyConfiguration>;
    requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    runtimePlatform?: pulumi.Input<inputs.ecs.TaskDefinitionRuntimePlatform>;
    skipDestroy?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskRoleArn?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionVolume>[]>;
}
