// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountSettingDefaultArgs, AccountSettingDefaultState } from "./accountSettingDefault";
export type AccountSettingDefault = import("./accountSettingDefault").AccountSettingDefault;
export const AccountSettingDefault: typeof import("./accountSettingDefault").AccountSettingDefault = null as any;
utilities.lazyLoad(exports, ["AccountSettingDefault"], () => require("./accountSettingDefault"));

export { CapacityProviderArgs, CapacityProviderState } from "./capacityProvider";
export type CapacityProvider = import("./capacityProvider").CapacityProvider;
export const CapacityProvider: typeof import("./capacityProvider").CapacityProvider = null as any;
utilities.lazyLoad(exports, ["CapacityProvider"], () => require("./capacityProvider"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterCapacityProvidersArgs, ClusterCapacityProvidersState } from "./clusterCapacityProviders";
export type ClusterCapacityProviders = import("./clusterCapacityProviders").ClusterCapacityProviders;
export const ClusterCapacityProviders: typeof import("./clusterCapacityProviders").ClusterCapacityProviders = null as any;
utilities.lazyLoad(exports, ["ClusterCapacityProviders"], () => require("./clusterCapacityProviders"));

export * from "./container";
export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetContainerDefinitionArgs, GetContainerDefinitionResult, GetContainerDefinitionOutputArgs } from "./getContainerDefinition";
export const getContainerDefinition: typeof import("./getContainerDefinition").getContainerDefinition = null as any;
export const getContainerDefinitionOutput: typeof import("./getContainerDefinition").getContainerDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getContainerDefinition","getContainerDefinitionOutput"], () => require("./getContainerDefinition"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetTaskDefinitionArgs, GetTaskDefinitionResult, GetTaskDefinitionOutputArgs } from "./getTaskDefinition";
export const getTaskDefinition: typeof import("./getTaskDefinition").getTaskDefinition = null as any;
export const getTaskDefinitionOutput: typeof import("./getTaskDefinition").getTaskDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getTaskDefinition","getTaskDefinitionOutput"], () => require("./getTaskDefinition"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TaskDefinitionArgs, TaskDefinitionState } from "./taskDefinition";
export type TaskDefinition = import("./taskDefinition").TaskDefinition;
export const TaskDefinition: typeof import("./taskDefinition").TaskDefinition = null as any;
utilities.lazyLoad(exports, ["TaskDefinition"], () => require("./taskDefinition"));

export { TaskSetArgs, TaskSetState } from "./taskSet";
export type TaskSet = import("./taskSet").TaskSet;
export const TaskSet: typeof import("./taskSet").TaskSet = null as any;
utilities.lazyLoad(exports, ["TaskSet"], () => require("./taskSet"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:ecs/accountSettingDefault:AccountSettingDefault":
                return new AccountSettingDefault(name, <any>undefined, { urn })
            case "aws:ecs/capacityProvider:CapacityProvider":
                return new CapacityProvider(name, <any>undefined, { urn })
            case "aws:ecs/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws:ecs/clusterCapacityProviders:ClusterCapacityProviders":
                return new ClusterCapacityProviders(name, <any>undefined, { urn })
            case "aws:ecs/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "aws:ecs/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "aws:ecs/taskDefinition:TaskDefinition":
                return new TaskDefinition(name, <any>undefined, { urn })
            case "aws:ecs/taskSet:TaskSet":
                return new TaskSet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ecs/accountSettingDefault", _module)
pulumi.runtime.registerResourceModule("aws", "ecs/capacityProvider", _module)
pulumi.runtime.registerResourceModule("aws", "ecs/cluster", _module)
pulumi.runtime.registerResourceModule("aws", "ecs/clusterCapacityProviders", _module)
pulumi.runtime.registerResourceModule("aws", "ecs/service", _module)
pulumi.runtime.registerResourceModule("aws", "ecs/tag", _module)
pulumi.runtime.registerResourceModule("aws", "ecs/taskDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "ecs/taskSet", _module)
