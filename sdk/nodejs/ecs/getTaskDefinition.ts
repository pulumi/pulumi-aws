// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The ECS task definition data source allows access to details of
 * a specific AWS ECS task definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mongoTaskDefinition = aws.ecs.getTaskDefinition({
 *     taskDefinition: mongoEcs / taskDefinitionTaskDefinition.family,
 * });
 * const foo = new aws.ecs.Cluster("foo", {});
 * const mongoEcs_taskDefinitionTaskDefinition = new aws.ecs.TaskDefinition("mongoEcs/taskDefinitionTaskDefinition", {
 *     family: "mongodb",
 *     containerDefinitions: `[
 *   {
 *     "cpu": 128,
 *     "environment": [{
 *       "name": "SECRET",
 *       "value": "KEY"
 *     }],
 *     "essential": true,
 *     "image": "mongo:latest",
 *     "memory": 128,
 *     "memoryReservation": 64,
 *     "name": "mongodb"
 *   }
 * ]
 * `,
 * });
 * const mongoService = new aws.ecs.Service("mongoService", {
 *     cluster: foo.id,
 *     desiredCount: 2,
 *     taskDefinition: mongoTaskDefinition.then(mongoTaskDefinition => mongoTaskDefinition.arn),
 * });
 * ```
 */
export function getTaskDefinition(args: GetTaskDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetTaskDefinitionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:ecs/getTaskDefinition:getTaskDefinition", {
        "taskDefinition": args.taskDefinition,
    }, opts);
}

/**
 * A collection of arguments for invoking getTaskDefinition.
 */
export interface GetTaskDefinitionArgs {
    /**
     * Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
     */
    taskDefinition: string;
}

/**
 * A collection of values returned by getTaskDefinition.
 */
export interface GetTaskDefinitionResult {
    /**
     * ARN of the task definition
     */
    readonly arn: string;
    /**
     * Family of this task definition
     */
    readonly family: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Docker networking mode to use for the containers in this task.
     */
    readonly networkMode: string;
    /**
     * Revision of this task definition
     */
    readonly revision: number;
    /**
     * Status of this task definition
     */
    readonly status: string;
    readonly taskDefinition: string;
    /**
     * ARN of the IAM role that containers in this task can assume
     */
    readonly taskRoleArn: string;
}
/**
 * The ECS task definition data source allows access to details of
 * a specific AWS ECS task definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mongoTaskDefinition = aws.ecs.getTaskDefinition({
 *     taskDefinition: mongoEcs / taskDefinitionTaskDefinition.family,
 * });
 * const foo = new aws.ecs.Cluster("foo", {});
 * const mongoEcs_taskDefinitionTaskDefinition = new aws.ecs.TaskDefinition("mongoEcs/taskDefinitionTaskDefinition", {
 *     family: "mongodb",
 *     containerDefinitions: `[
 *   {
 *     "cpu": 128,
 *     "environment": [{
 *       "name": "SECRET",
 *       "value": "KEY"
 *     }],
 *     "essential": true,
 *     "image": "mongo:latest",
 *     "memory": 128,
 *     "memoryReservation": 64,
 *     "name": "mongodb"
 *   }
 * ]
 * `,
 * });
 * const mongoService = new aws.ecs.Service("mongoService", {
 *     cluster: foo.id,
 *     desiredCount: 2,
 *     taskDefinition: mongoTaskDefinition.then(mongoTaskDefinition => mongoTaskDefinition.arn),
 * });
 * ```
 */
export function getTaskDefinitionOutput(args: GetTaskDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTaskDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getTaskDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getTaskDefinition.
 */
export interface GetTaskDefinitionOutputArgs {
    /**
     * Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
     */
    taskDefinition: pulumi.Input<string>;
}
