// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The ECS task definition data source allows access to details of
 * a specific AWS ECS task definition.
 *
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mongoTaskDefinition = new aws.ecs.TaskDefinition("mongo", {
 *     containerDefinitions: `[
 *   {
 *     "cpu": 128,
 *     "environment": [{
 *       "name": "SECRET",
 *       "value": "KEY"
 *     }],
 *     "essential": true,
 *     "image": "mongo:latest",
 *     "memory": 128,
 *     "memoryReservation": 64,
 *     "name": "mongodb"
 *   }
 * ]
 * `,
 *     family: "mongodb",
 * });
 * // Simply specify the family to find the latest ACTIVE revision in that family.
 * const mongoEcsTaskDefinition = mongoTaskDefinition.family.apply(family => aws.ecs.getTaskDefinition({
 *     taskDefinition: family,
 * }, { async: true }));
 * const foo = new aws.ecs.Cluster("foo", {});
 * const mongoService = new aws.ecs.Service("mongo", {
 *     cluster: foo.id,
 *     desiredCount: 2,
 *     taskDefinition: pulumi.all([mongoTaskDefinition.family, mongoTaskDefinition.revision, mongoEcsTaskDefinition]).apply(([family, revision, mongoEcsTaskDefinition]) => `${family}:${(() => {
 *         throw "tf2pulumi error: NYI: call to max";
 *         return (() => { throw "NYI: call to max"; })();
 *     })()}`),
 * });
 * ```
 */
export function getTaskDefinition(args: GetTaskDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetTaskDefinitionResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aws:ecs/getTaskDefinition:getTaskDefinition", {
        "taskDefinition": args.taskDefinition,
    }, opts);
}

/**
 * A collection of arguments for invoking getTaskDefinition.
 */
export interface GetTaskDefinitionArgs {
    /**
     * The family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
     */
    readonly taskDefinition: string;
}

/**
 * A collection of values returned by getTaskDefinition.
 */
export interface GetTaskDefinitionResult {
    /**
     * The family of this task definition
     */
    readonly family: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Docker networking mode to use for the containers in this task.
     */
    readonly networkMode: string;
    /**
     * The revision of this task definition
     */
    readonly revision: number;
    /**
     * The status of this task definition
     */
    readonly status: string;
    readonly taskDefinition: string;
    /**
     * The ARN of the IAM role that containers in this task can assume
     */
    readonly taskRoleArn: string;
}
