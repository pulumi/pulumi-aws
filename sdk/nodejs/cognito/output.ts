// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface IdentityPoolCognitoIdentityProvider {
    /**
     * The client ID for the Amazon Cognito Identity User Pool.
     */
    clientId?: string;
    /**
     * The provider name for an Amazon Cognito Identity User Pool.
     */
    providerName?: string;
    /**
     * Whether server-side token validation is enabled for the identity providerâ€™s token or not.
     */
    serverSideTokenCheck?: boolean;
}
export interface IdentityPoolRoleAttachmentRoleMapping {
    ambiguousRoleResolution?: string;
    identityProvider: string;
    mappingRules?: outputs.IdentityPoolRoleAttachmentRoleMappingMappingRule[];
    type: string;
}
export interface IdentityPoolRoleAttachmentRoleMappingMappingRule {
    claim: string;
    matchType: string;
    roleArn: string;
    value: string;
}
export interface ManagedUserPoolClientAnalyticsConfiguration {
    /**
     * Application ARN for an Amazon Pinpoint application. It conflicts with `externalId` and `roleArn`.
     */
    applicationArn?: string;
    /**
     * Unique identifier for an Amazon Pinpoint application.
     */
    applicationId?: string;
    /**
     * ID for the Analytics Configuration and conflicts with `applicationArn`.
     */
    externalId?: string;
    /**
     * ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. It conflicts with `applicationArn`.
     */
    roleArn: string;
    /**
     * If `userDataShared` is set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
     */
    userDataShared: boolean;
}
export interface ManagedUserPoolClientTokenValidityUnits {
    /**
     * Time unit for the value in `accessTokenValidity` and defaults to `hours`.
     */
    accessToken: string;
    /**
     * Time unit for the value in `idTokenValidity`, and it defaults to `hours`.
     */
    idToken: string;
    /**
     * Time unit for the value in `refreshTokenValidity` and defaults to `days`.
     */
    refreshToken: string;
}
export interface ResourceServerScope {
    scopeDescription: string;
    scopeName: string;
}
export interface RiskConfigurationAccountTakeoverRiskConfiguration {
    /**
     * Account takeover risk configuration actions. See details below.
     */
    actions: outputs.RiskConfigurationAccountTakeoverRiskConfigurationActions;
    /**
     * The notify configuration used to construct email notifications. See details below.
     */
    notifyConfiguration: outputs.RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration;
}
export interface RiskConfigurationAccountTakeoverRiskConfigurationActions {
    /**
     * Action to take for a high risk. See action block below.
     */
    highAction?: outputs.RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction;
    /**
     * Action to take for a low risk. See action block below.
     */
    lowAction?: outputs.RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction;
    /**
     * Action to take for a medium risk. See action block below.
     */
    mediumAction?: outputs.RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction;
}
export interface RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction {
    eventAction: string;
    notify: boolean;
}
export interface RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction {
    eventAction: string;
    notify: boolean;
}
export interface RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction {
    eventAction: string;
    notify: boolean;
}
export interface RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration {
    /**
     * Email template used when a detected risk event is blocked. See notify email type below.
     */
    blockEmail?: outputs.RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail;
    /**
     * The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
     */
    from?: string;
    /**
     * The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
     */
    mfaEmail?: outputs.RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail;
    /**
     * The email template used when a detected risk event is allowed. See notify email type below.
     */
    noActionEmail?: outputs.RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail;
    /**
     * The destination to which the receiver of an email should reply to.
     */
    replyTo?: string;
    /**
     * The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
     */
    sourceArn: string;
}
export interface RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail {
    htmlBody: string;
    subject: string;
    textBody: string;
}
export interface RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail {
    htmlBody: string;
    subject: string;
    textBody: string;
}
export interface RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail {
    htmlBody: string;
    subject: string;
    textBody: string;
}
export interface RiskConfigurationCompromisedCredentialsRiskConfiguration {
    /**
     * The compromised credentials risk configuration actions. See details below.
     */
    actions: outputs.RiskConfigurationCompromisedCredentialsRiskConfigurationActions;
    /**
     * Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
     */
    eventFilters: string[];
}
export interface RiskConfigurationCompromisedCredentialsRiskConfigurationActions {
    /**
     * The event action. Valid values are `BLOCK` or `NO_ACTION`.
     */
    eventAction: string;
}
export interface RiskConfigurationRiskExceptionConfiguration {
    /**
     * Overrides the risk decision to always block the pre-authentication requests.
     * The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
     * Can contain a maximum of 200 items.
     */
    blockedIpRangeLists?: string[];
    /**
     * Risk detection isn't performed on the IP addresses in this range list.
     * The IP range is in CIDR notation.
     * Can contain a maximum of 200 items.
     */
    skippedIpRangeLists?: string[];
}
export interface UserPoolAccountRecoverySetting {
    /**
     * List of Account Recovery Options of the following structure:
     */
    recoveryMechanisms: outputs.UserPoolAccountRecoverySettingRecoveryMechanism[];
}
export interface UserPoolAccountRecoverySettingRecoveryMechanism {
    /**
     * Recovery method for a user. Can be of the following: `verifiedEmail`, `verifiedPhoneNumber`, and `adminOnly`.
     */
    name: string;
    /**
     * Positive integer specifying priority of a method with 1 being the highest priority.
     */
    priority: number;
}
export interface UserPoolAdminCreateUserConfig {
    /**
     * Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
     */
    allowAdminCreateUserOnly?: boolean;
    /**
     * Invite message template structure. Detailed below.
     */
    inviteMessageTemplate?: outputs.UserPoolAdminCreateUserConfigInviteMessageTemplate;
}
export interface UserPoolAdminCreateUserConfigInviteMessageTemplate {
    /**
     * Message template for email messages. Must contain `{username}` and `{####}` placeholders, for username and temporary password, respectively.
     */
    emailMessage?: string;
    /**
     * Subject line for email messages.
     */
    emailSubject?: string;
    /**
     * Message template for SMS messages. Must contain `{username}` and `{####}` placeholders, for username and temporary password, respectively.
     */
    smsMessage?: string;
}
export interface UserPoolClientAnalyticsConfiguration {
    /**
     * Application ARN for an Amazon Pinpoint application. Conflicts with `externalId` and `roleArn`.
     */
    applicationArn?: string;
    /**
     * Application ID for an Amazon Pinpoint application.
     */
    applicationId?: string;
    /**
     * ID for the Analytics Configuration. Conflicts with `applicationArn`.
     */
    externalId?: string;
    /**
     * ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with `applicationArn`.
     */
    roleArn: string;
    /**
     * If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
     */
    userDataShared: boolean;
}
export interface UserPoolClientTokenValidityUnits {
    /**
     * Time unit in for the value in `accessTokenValidity`, defaults to `hours`.
     */
    accessToken: string;
    /**
     * Time unit in for the value in `idTokenValidity`, defaults to `hours`.
     */
    idToken: string;
    /**
     * Time unit in for the value in `refreshTokenValidity`, defaults to `days`.
     */
    refreshToken: string;
}
export interface UserPoolDeviceConfiguration {
    /**
     * Whether a challenge is required on a new device. Only applicable to a new device.
     */
    challengeRequiredOnNewDevice?: boolean;
    /**
     * Whether a device is only remembered on user prompt. `false` equates to "Always" remember, `true` is "User Opt In," and not using a `deviceConfiguration` block is "No."
     */
    deviceOnlyRememberedOnUserPrompt?: boolean;
}
export interface UserPoolEmailConfiguration {
    /**
     * Email configuration set name from SES.
     */
    configurationSet?: string;
    /**
     * Email delivery method to use. `COGNITO_DEFAULT` for the default email functionality built into Cognito or `DEVELOPER` to use your Amazon SES configuration. Required to be `DEVELOPER` if `fromEmailAddress` is set.
     */
    emailSendingAccount?: string;
    /**
     * Senderâ€™s email address or senderâ€™s display name with their email address (e.g., `john@example.com`, `John Smith <john@example.com>` or `\"John Smith Ph.D.\" <john@example.com>`). Escaped double quotes are required around display names that contain certain characters as specified in [RFC 5322](https://tools.ietf.org/html/rfc5322).
     */
    fromEmailAddress?: string;
    /**
     * REPLY-TO email address.
     */
    replyToEmailAddress?: string;
    /**
     * ARN of the SES verified email identity to use. Required if `emailSendingAccount` is set to `DEVELOPER`.
     */
    sourceArn?: string;
}
export interface UserPoolLambdaConfig {
    /**
     * ARN of the lambda creating an authentication challenge.
     */
    createAuthChallenge?: string;
    /**
     * A custom email sender AWS Lambda trigger. See customEmailSender Below.
     */
    customEmailSender?: outputs.UserPoolLambdaConfigCustomEmailSender;
    /**
     * Custom Message AWS Lambda trigger.
     */
    customMessage?: string;
    /**
     * A custom SMS sender AWS Lambda trigger. See customSmsSender Below.
     */
    customSmsSender?: outputs.UserPoolLambdaConfigCustomSmsSender;
    /**
     * Defines the authentication challenge.
     */
    defineAuthChallenge?: string;
    /**
     * The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
     */
    kmsKeyId?: string;
    /**
     * Post-authentication AWS Lambda trigger.
     */
    postAuthentication?: string;
    /**
     * Post-confirmation AWS Lambda trigger.
     */
    postConfirmation?: string;
    /**
     * Pre-authentication AWS Lambda trigger.
     */
    preAuthentication?: string;
    /**
     * Pre-registration AWS Lambda trigger.
     */
    preSignUp?: string;
    /**
     * Allow to customize identity token claims before token generation. Set this parameter for legacy purposes; for new instances of pre token generation triggers, set the lambdaArn of `preTokenGenerationConfig`.
     */
    preTokenGeneration: string;
    /**
     * Allow to customize access tokens. See pre_token_configuration_type
     */
    preTokenGenerationConfig: outputs.UserPoolLambdaConfigPreTokenGenerationConfig;
    /**
     * User migration Lambda config type.
     */
    userMigration?: string;
    /**
     * Verifies the authentication challenge response.
     */
    verifyAuthChallengeResponse?: string;
}
export interface UserPoolLambdaConfigCustomEmailSender {
    /**
     * The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.
     */
    lambdaArn: string;
    /**
     * The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is `V1_0`.
     */
    lambdaVersion: string;
}
export interface UserPoolLambdaConfigCustomSmsSender {
    /**
     * The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
     */
    lambdaArn: string;
    /**
     * The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is `V1_0`.
     */
    lambdaVersion: string;
}
export interface UserPoolLambdaConfigPreTokenGenerationConfig {
    lambdaArn: string;
    lambdaVersion: string;
}
export interface UserPoolPasswordPolicy {
    /**
     * Minimum length of the password policy that you have set.
     */
    minimumLength?: number;
    /**
     * Whether you have required users to use at least one lowercase letter in their password.
     */
    requireLowercase?: boolean;
    /**
     * Whether you have required users to use at least one number in their password.
     */
    requireNumbers?: boolean;
    /**
     * Whether you have required users to use at least one symbol in their password.
     */
    requireSymbols?: boolean;
    /**
     * Whether you have required users to use at least one uppercase letter in their password.
     */
    requireUppercase?: boolean;
    /**
     * In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
     */
    temporaryPasswordValidityDays?: number;
}
export interface UserPoolSchema {
    /**
     * Attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
     */
    attributeDataType: string;
    /**
     * Whether the attribute type is developer only.
     */
    developerOnlyAttribute?: boolean;
    /**
     * Whether the attribute can be changed once it has been created.
     */
    mutable?: boolean;
    /**
     * Name of the attribute.
     */
    name: string;
    /**
     * Configuration block for the constraints for an attribute of the number type. Detailed below.
     */
    numberAttributeConstraints?: outputs.UserPoolSchemaNumberAttributeConstraints;
    /**
     * Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
     */
    required?: boolean;
    /**
     * Constraints for an attribute of the string type. Detailed below.
     */
    stringAttributeConstraints?: outputs.UserPoolSchemaStringAttributeConstraints;
}
export interface UserPoolSchemaNumberAttributeConstraints {
    /**
     * Maximum value of an attribute that is of the number data type.
     */
    maxValue?: string;
    /**
     * Minimum value of an attribute that is of the number data type.
     */
    minValue?: string;
}
export interface UserPoolSchemaStringAttributeConstraints {
    /**
     * Maximum length of an attribute value of the string type.
     */
    maxLength?: string;
    /**
     * Minimum length of an attribute value of the string type.
     */
    minLength?: string;
}
export interface UserPoolSmsConfiguration {
    /**
     * External ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
     */
    externalId: string;
    /**
     * ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
     */
    snsCallerArn: string;
    /**
     * The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see [SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html).
     */
    snsRegion: string;
}
export interface UserPoolSoftwareTokenMfaConfiguration {
    /**
     * Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When `smsConfiguration` is not present, the `mfaConfiguration` argument must be set to `OFF` and the `softwareTokenMfaConfiguration` configuration block must be fully removed.
     */
    enabled: boolean;
}
export interface UserPoolUserAttributeUpdateSettings {
    /**
     * A list of attributes requiring verification before update. If set, the provided value(s) must also be set in `autoVerifiedAttributes`. Valid values: `email`, `phoneNumber`.
     */
    attributesRequireVerificationBeforeUpdates: string[];
}
export interface UserPoolUserPoolAddOns {
    /**
     * Mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
     */
    advancedSecurityMode: string;
}
export interface UserPoolUsernameConfiguration {
    /**
     * Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
     */
    caseSensitive: boolean;
}
export interface UserPoolVerificationMessageTemplate {
    /**
     * Default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
     */
    defaultEmailOption?: string;
    /**
     * Email message template. Must contain the `{####}` placeholder. Conflicts with `emailVerificationMessage` argument.
     */
    emailMessage: string;
    /**
     * Email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
     */
    emailMessageByLink: string;
    /**
     * Subject line for the email message template. Conflicts with `emailVerificationSubject` argument.
     */
    emailSubject: string;
    /**
     * Subject line for the email message template for sending a confirmation link to the user.
     */
    emailSubjectByLink: string;
    /**
     * SMS message template. Must contain the `{####}` placeholder. Conflicts with `smsVerificationMessage` argument.
     */
    smsMessage: string;
}
export interface GetIdentityPoolCognitoIdentityProvider {
    clientId: string;
    providerName: string;
    serverSideTokenCheck: boolean;
}
export interface GetUserPoolClientAnalyticsConfiguration {
    /**
     * (Optional) Application ARN for an Amazon Pinpoint application. Conflicts with `externalId` and `roleArn`.
     */
    applicationArn: string;
    /**
     * (Optional) Application ID for an Amazon Pinpoint application.
     */
    applicationId: string;
    /**
     * (Optional) ID for the Analytics Configuration. Conflicts with `applicationArn`.
     */
    externalId: string;
    /**
     * (Optional) ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with `applicationArn`.
     */
    roleArn: string;
    /**
     * (Optional) If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
     */
    userDataShared: boolean;
}
export interface GetUserPoolClientTokenValidityUnit {
    /**
     * (Optional) Time unit in for the value in `accessTokenValidity`, defaults to `hours`.
     */
    accessToken: string;
    /**
     * (Optional) Time unit in for the value in `idTokenValidity`, defaults to `hours`.
     */
    idToken: string;
    /**
     * (Optional) Time unit in for the value in `refreshTokenValidity`, defaults to `days`.
     */
    refreshToken: string;
}
