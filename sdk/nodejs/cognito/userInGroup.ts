// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Adds the specified user to the specified group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleUserPool = new aws.cognito.UserPool("exampleUserPool", {passwordPolicy: {
 *     temporaryPasswordValidityDays: 7,
 *     minimumLength: 6,
 *     requireUppercase: false,
 *     requireSymbols: false,
 *     requireNumbers: false,
 * }});
 * const exampleUser = new aws.cognito.User("exampleUser", {
 *     userPoolId: exampleUserPool.id,
 *     username: "example",
 * });
 * const exampleUserGroup = new aws.cognito.UserGroup("exampleUserGroup", {userPoolId: exampleUserPool.id});
 * const exampleUserInGroup = new aws.cognito.UserInGroup("exampleUserInGroup", {
 *     userPoolId: exampleUserPool.id,
 *     groupName: exampleUserGroup.name,
 *     username: exampleUser.username,
 * });
 * ```
 */
export class UserInGroup extends pulumi.CustomResource {
    /**
     * Get an existing UserInGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserInGroupState, opts?: pulumi.CustomResourceOptions): UserInGroup {
        return new UserInGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cognito/userInGroup:UserInGroup';

    /**
     * Returns true if the given object is an instance of UserInGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserInGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserInGroup.__pulumiType;
    }

    /**
     * The name of the group to which the user is to be added.
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * The user pool ID of the user and group.
     */
    public readonly userPoolId!: pulumi.Output<string>;
    /**
     * The username of the user to be added to the group.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a UserInGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserInGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserInGroupArgs | UserInGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserInGroupState | undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["userPoolId"] = state ? state.userPoolId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserInGroupArgs | undefined;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            if ((!args || args.userPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPoolId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["userPoolId"] = args ? args.userPoolId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserInGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserInGroup resources.
 */
export interface UserInGroupState {
    /**
     * The name of the group to which the user is to be added.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The user pool ID of the user and group.
     */
    userPoolId?: pulumi.Input<string>;
    /**
     * The username of the user to be added to the group.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserInGroup resource.
 */
export interface UserInGroupArgs {
    /**
     * The name of the group to which the user is to be added.
     */
    groupName: pulumi.Input<string>;
    /**
     * The user pool ID of the user and group.
     */
    userPoolId: pulumi.Input<string>;
    /**
     * The username of the user to be added to the group.
     */
    username: pulumi.Input<string>;
}
