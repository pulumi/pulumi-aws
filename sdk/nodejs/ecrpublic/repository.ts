// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a Public Elastic Container Registry Repository.
 *
 * > **NOTE:** This resource can only be used in the `us-east-1` region.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const usEast1 = new aws.Provider("usEast1", {region: "us-east-1"});
 * const foo = new aws.ecrpublic.Repository("foo", {
 *     repositoryName: "bar",
 *     catalogData: {
 *         aboutText: "About Text",
 *         architectures: ["ARM"],
 *         description: "Description",
 *         logoImageBlob: Buffer.from(fs.readFileSync(image.png), 'binary').toString('base64'),
 *         operatingSystems: ["Linux"],
 *         usageText: "Usage Text",
 *     },
 *     tags: {
 *         env: "production",
 *     },
 * }, {
 *     provider: aws.us_east_1,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import ECR Public Repositories using the `repository_name`. For example:
 *
 * ```sh
 *  $ pulumi import aws:ecrpublic/repository:Repository example example
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ecrpublic/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * Full ARN of the repository.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Catalog data configuration for the repository. See below for schema.
     */
    public readonly catalogData!: pulumi.Output<outputs.ecrpublic.RepositoryCatalogData | undefined>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The registry ID where the repository was created.
     */
    public /*out*/ readonly registryId!: pulumi.Output<string>;
    /**
     * Name of the repository.
     */
    public readonly repositoryName!: pulumi.Output<string>;
    /**
     * The URI of the repository.
     */
    public /*out*/ readonly repositoryUri!: pulumi.Output<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["catalogData"] = state ? state.catalogData : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
            resourceInputs["repositoryUri"] = state ? state.repositoryUri : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.repositoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryName'");
            }
            resourceInputs["catalogData"] = args ? args.catalogData : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["registryId"] = undefined /*out*/;
            resourceInputs["repositoryUri"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * Full ARN of the repository.
     */
    arn?: pulumi.Input<string>;
    /**
     * Catalog data configuration for the repository. See below for schema.
     */
    catalogData?: pulumi.Input<inputs.ecrpublic.RepositoryCatalogData>;
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The registry ID where the repository was created.
     */
    registryId?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * The URI of the repository.
     */
    repositoryUri?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * Catalog data configuration for the repository. See below for schema.
     */
    catalogData?: pulumi.Input<inputs.ecrpublic.RepositoryCatalogData>;
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Name of the repository.
     */
    repositoryName: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
