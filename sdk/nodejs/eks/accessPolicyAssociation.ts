// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Access Entry Policy Association for an EKS Cluster.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.eks.AccessPolicyAssociation("example", {
 *     clusterName: exampleAwsEksCluster.name,
 *     policyArn: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSViewPolicy",
 *     principalArn: exampleAwsIamUser.arn,
 *     accessScope: {
 *         type: "namespace",
 *         namespaces: ["example-namespace"],
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import EKS access entry using the `cluster_name` `principal_arn` and `policy_arn` separated by a colon (`#`). For example:
 *
 * ```sh
 * $ pulumi import aws:eks/accessPolicyAssociation:AccessPolicyAssociation my_eks_access_entry my_cluster_name#my_principal_arn#my_policy_arn
 * ```
 */
export class AccessPolicyAssociation extends pulumi.CustomResource {
    /**
     * Get an existing AccessPolicyAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessPolicyAssociationState, opts?: pulumi.CustomResourceOptions): AccessPolicyAssociation {
        return new AccessPolicyAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:eks/accessPolicyAssociation:AccessPolicyAssociation';

    /**
     * Returns true if the given object is an instance of AccessPolicyAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessPolicyAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessPolicyAssociation.__pulumiType;
    }

    /**
     * The configuration block to determine the scope of the access. See `accessScope` Block below.
     */
    public readonly accessScope!: pulumi.Output<outputs.eks.AccessPolicyAssociationAccessScope>;
    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the policy was associated.
     */
    public /*out*/ readonly associatedAt!: pulumi.Output<string>;
    /**
     * Name of the EKS Cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the policy was updated.
     */
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    /**
     * The ARN of the access policy that you're associating.
     */
    public readonly policyArn!: pulumi.Output<string>;
    /**
     * The IAM Principal ARN which requires Authentication access to the EKS cluster.
     */
    public readonly principalArn!: pulumi.Output<string>;

    /**
     * Create a AccessPolicyAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessPolicyAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessPolicyAssociationArgs | AccessPolicyAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessPolicyAssociationState | undefined;
            resourceInputs["accessScope"] = state ? state.accessScope : undefined;
            resourceInputs["associatedAt"] = state ? state.associatedAt : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["policyArn"] = state ? state.policyArn : undefined;
            resourceInputs["principalArn"] = state ? state.principalArn : undefined;
        } else {
            const args = argsOrState as AccessPolicyAssociationArgs | undefined;
            if ((!args || args.accessScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessScope'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.policyArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyArn'");
            }
            if ((!args || args.principalArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalArn'");
            }
            resourceInputs["accessScope"] = args ? args.accessScope : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["policyArn"] = args ? args.policyArn : undefined;
            resourceInputs["principalArn"] = args ? args.principalArn : undefined;
            resourceInputs["associatedAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessPolicyAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessPolicyAssociation resources.
 */
export interface AccessPolicyAssociationState {
    /**
     * The configuration block to determine the scope of the access. See `accessScope` Block below.
     */
    accessScope?: pulumi.Input<inputs.eks.AccessPolicyAssociationAccessScope>;
    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the policy was associated.
     */
    associatedAt?: pulumi.Input<string>;
    /**
     * Name of the EKS Cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the policy was updated.
     */
    modifiedAt?: pulumi.Input<string>;
    /**
     * The ARN of the access policy that you're associating.
     */
    policyArn?: pulumi.Input<string>;
    /**
     * The IAM Principal ARN which requires Authentication access to the EKS cluster.
     */
    principalArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessPolicyAssociation resource.
 */
export interface AccessPolicyAssociationArgs {
    /**
     * The configuration block to determine the scope of the access. See `accessScope` Block below.
     */
    accessScope: pulumi.Input<inputs.eks.AccessPolicyAssociationAccessScope>;
    /**
     * Name of the EKS Cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The ARN of the access policy that you're associating.
     */
    policyArn: pulumi.Input<string>;
    /**
     * The IAM Principal ARN which requires Authentication access to the EKS cluster.
     */
    principalArn: pulumi.Input<string>;
}
