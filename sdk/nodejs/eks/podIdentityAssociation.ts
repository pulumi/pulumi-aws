// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS EKS (Elastic Kubernetes) Pod Identity Association.
 *
 * Creates an EKS Pod Identity association between a service account in an Amazon EKS cluster and an IAM role with EKS Pod Identity. Use EKS Pod Identity to give temporary IAM credentials to pods and the credentials are rotated automatically.
 *
 * Amazon EKS Pod Identity associations provide the ability to manage credentials for your applications, similar to the way that EC2 instance profiles provide credentials to Amazon EC2 instances.
 *
 * If a pod uses a service account that has an association, Amazon EKS sets environment variables in the containers of the pod. The environment variables configure the Amazon Web Services SDKs, including the Command Line Interface, to use the EKS Pod Identity credentials.
 *
 * Pod Identity is a simpler method than IAM roles for service accounts, as this method doesnâ€™t use OIDC identity providers. Additionally, you can configure a role for Pod Identity once, and reuse it across clusters.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["pods.eks.amazonaws.com"],
 *         }],
 *         actions: [
 *             "sts:AssumeRole",
 *             "sts:TagSession",
 *         ],
 *     }],
 * });
 * const exampleRole = new aws.iam.Role("exampleRole", {assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json)});
 * const exampleS3 = new aws.iam.RolePolicyAttachment("exampleS3", {
 *     policyArn: "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
 *     role: exampleRole.name,
 * });
 * const examplePodIdentityAssociation = new aws.eks.PodIdentityAssociation("examplePodIdentityAssociation", {
 *     clusterName: aws_eks_cluster.example.name,
 *     namespace: "example",
 *     serviceAccount: "example-sa",
 *     roleArn: exampleRole.arn,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import EKS (Elastic Kubernetes) Pod Identity Association using the `cluster_name` and `association_id` separated by a comma (`,`). For example:
 *
 * ```sh
 *  $ pulumi import aws:eks/podIdentityAssociation:PodIdentityAssociation example example,a-12345678
 * ```
 */
export class PodIdentityAssociation extends pulumi.CustomResource {
    /**
     * Get an existing PodIdentityAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PodIdentityAssociationState, opts?: pulumi.CustomResourceOptions): PodIdentityAssociation {
        return new PodIdentityAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:eks/podIdentityAssociation:PodIdentityAssociation';

    /**
     * Returns true if the given object is an instance of PodIdentityAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PodIdentityAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PodIdentityAssociation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the association.
     */
    public /*out*/ readonly associationArn!: pulumi.Output<string>;
    /**
     * The ID of the association.
     */
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    /**
     * The name of the cluster to create the association in.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
     *
     * The following arguments are optional:
     */
    public readonly serviceAccount!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a PodIdentityAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PodIdentityAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PodIdentityAssociationArgs | PodIdentityAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PodIdentityAssociationState | undefined;
            resourceInputs["associationArn"] = state ? state.associationArn : undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as PodIdentityAssociationArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.serviceAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccount'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["associationArn"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PodIdentityAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PodIdentityAssociation resources.
 */
export interface PodIdentityAssociationState {
    /**
     * The Amazon Resource Name (ARN) of the association.
     */
    associationArn?: pulumi.Input<string>;
    /**
     * The ID of the association.
     */
    associationId?: pulumi.Input<string>;
    /**
     * The name of the cluster to create the association in.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
     *
     * The following arguments are optional:
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a PodIdentityAssociation resource.
 */
export interface PodIdentityAssociationArgs {
    /**
     * The name of the cluster to create the association in.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
     */
    namespace: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
     */
    roleArn: pulumi.Input<string>;
    /**
     * The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
     *
     * The following arguments are optional:
     */
    serviceAccount: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
