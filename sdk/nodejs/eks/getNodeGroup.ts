// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Retrieve information about an EKS Node Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = pulumi.output(aws.eks.getNodeGroup({
 *     clusterName: "example",
 *     nodeGroupName: "example",
 * }));
 * ```
 */
export function getNodeGroup(args: GetNodeGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeGroupResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:eks/getNodeGroup:getNodeGroup", {
        "clusterName": args.clusterName,
        "nodeGroupName": args.nodeGroupName,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodeGroup.
 */
export interface GetNodeGroupArgs {
    /**
     * The name of the cluster.
     */
    clusterName: string;
    /**
     * The name of the node group.
     */
    nodeGroupName: string;
    /**
     * Key-value map of resource tags.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getNodeGroup.
 */
export interface GetNodeGroupResult {
    /**
     * Type of Amazon Machine Image (AMI) associated with the EKS Node Group.
     */
    readonly amiType: string;
    /**
     * Amazon Resource Name (ARN) of the EKS Node Group.
     */
    readonly arn: string;
    readonly clusterName: string;
    /**
     * Disk size in GiB for worker nodes.
     */
    readonly diskSize: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Set of instance types associated with the EKS Node Group.
     */
    readonly instanceTypes: string[];
    /**
     * Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
     */
    readonly labels: {[key: string]: string};
    readonly nodeGroupName: string;
    /**
     * Amazon Resource Name (ARN) of the IAM Role that provides permissions for the EKS Node Group.
     */
    readonly nodeRoleArn: string;
    /**
     * AMI version of the EKS Node Group.
     */
    readonly releaseVersion: string;
    /**
     * Configuration block with remote access settings.
     */
    readonly remoteAccesses: outputs.eks.GetNodeGroupRemoteAccess[];
    /**
     * List of objects containing information about underlying resources.
     */
    readonly resources: outputs.eks.GetNodeGroupResource[];
    /**
     * Configuration block with scaling settings.
     */
    readonly scalingConfigs: outputs.eks.GetNodeGroupScalingConfig[];
    /**
     * Status of the EKS Node Group.
     */
    readonly status: string;
    /**
     * Identifiers of EC2 Subnets to associate with the EKS Node Group.
     */
    readonly subnetIds: string[];
    /**
     * Key-value map of resource tags.
     */
    readonly tags: {[key: string]: string};
    /**
     * List of objects containing information about taints applied to the nodes in the EKS Node Group.
     */
    readonly taints: outputs.eks.GetNodeGroupTaint[];
    /**
     * Kubernetes version.
     */
    readonly version: string;
}

export function getNodeGroupOutput(args: GetNodeGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodeGroupResult> {
    return pulumi.output(args).apply(a => getNodeGroup(a, opts))
}

/**
 * A collection of arguments for invoking getNodeGroup.
 */
export interface GetNodeGroupOutputArgs {
    /**
     * The name of the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The name of the node group.
     */
    nodeGroupName: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
