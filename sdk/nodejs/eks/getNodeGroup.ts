// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getNodeGroup(args: GetNodeGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:eks/getNodeGroup:getNodeGroup", {
        "clusterName": args.clusterName,
        "nodeGroupName": args.nodeGroupName,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodeGroup.
 */
export interface GetNodeGroupArgs {
    clusterName: string;
    nodeGroupName: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getNodeGroup.
 */
export interface GetNodeGroupResult {
    readonly amiType: string;
    readonly arn: string;
    readonly capacityType: string;
    readonly clusterName: string;
    readonly diskSize: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceTypes: string[];
    readonly labels: {[key: string]: string};
    readonly nodeGroupName: string;
    readonly nodeRoleArn: string;
    readonly releaseVersion: string;
    readonly remoteAccesses: outputs.eks.GetNodeGroupRemoteAccess[];
    readonly resources: outputs.eks.GetNodeGroupResource[];
    readonly scalingConfigs: outputs.eks.GetNodeGroupScalingConfig[];
    readonly status: string;
    readonly subnetIds: string[];
    readonly tags: {[key: string]: string};
    readonly taints: outputs.eks.GetNodeGroupTaint[];
    readonly version: string;
}
export function getNodeGroupOutput(args: GetNodeGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodeGroupResult> {
    return pulumi.output(args).apply((a: any) => getNodeGroup(a, opts))
}

/**
 * A collection of arguments for invoking getNodeGroup.
 */
export interface GetNodeGroupOutputArgs {
    clusterName: pulumi.Input<string>;
    nodeGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
