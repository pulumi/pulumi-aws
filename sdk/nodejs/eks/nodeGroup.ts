// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class NodeGroup extends pulumi.CustomResource {
    /**
     * Get an existing NodeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeGroupState, opts?: pulumi.CustomResourceOptions): NodeGroup {
        return new NodeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:eks/nodeGroup:NodeGroup';

    /**
     * Returns true if the given object is an instance of NodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeGroup.__pulumiType;
    }

    public readonly amiType!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly capacityType!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly diskSize!: pulumi.Output<number>;
    public readonly forceUpdateVersion!: pulumi.Output<boolean | undefined>;
    public readonly instanceTypes!: pulumi.Output<string[]>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly launchTemplate!: pulumi.Output<outputs.eks.NodeGroupLaunchTemplate | undefined>;
    public readonly nodeGroupName!: pulumi.Output<string>;
    public readonly nodeGroupNamePrefix!: pulumi.Output<string>;
    public readonly nodeRoleArn!: pulumi.Output<string>;
    public readonly releaseVersion!: pulumi.Output<string>;
    public readonly remoteAccess!: pulumi.Output<outputs.eks.NodeGroupRemoteAccess | undefined>;
    public /*out*/ readonly resources!: pulumi.Output<outputs.eks.NodeGroupResource[]>;
    public readonly scalingConfig!: pulumi.Output<outputs.eks.NodeGroupScalingConfig>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly taints!: pulumi.Output<outputs.eks.NodeGroupTaint[] | undefined>;
    public readonly updateConfig!: pulumi.Output<outputs.eks.NodeGroupUpdateConfig>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a NodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeGroupArgs | NodeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeGroupState | undefined;
            resourceInputs["amiType"] = state ? state.amiType : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["capacityType"] = state ? state.capacityType : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["forceUpdateVersion"] = state ? state.forceUpdateVersion : undefined;
            resourceInputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            resourceInputs["nodeGroupName"] = state ? state.nodeGroupName : undefined;
            resourceInputs["nodeGroupNamePrefix"] = state ? state.nodeGroupNamePrefix : undefined;
            resourceInputs["nodeRoleArn"] = state ? state.nodeRoleArn : undefined;
            resourceInputs["releaseVersion"] = state ? state.releaseVersion : undefined;
            resourceInputs["remoteAccess"] = state ? state.remoteAccess : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["scalingConfig"] = state ? state.scalingConfig : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["updateConfig"] = state ? state.updateConfig : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as NodeGroupArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.nodeRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeRoleArn'");
            }
            if ((!args || args.scalingConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingConfig'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["amiType"] = args ? args.amiType : undefined;
            resourceInputs["capacityType"] = args ? args.capacityType : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["forceUpdateVersion"] = args ? args.forceUpdateVersion : undefined;
            resourceInputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            resourceInputs["nodeGroupName"] = args ? args.nodeGroupName : undefined;
            resourceInputs["nodeGroupNamePrefix"] = args ? args.nodeGroupNamePrefix : undefined;
            resourceInputs["nodeRoleArn"] = args ? args.nodeRoleArn : undefined;
            resourceInputs["releaseVersion"] = args ? args.releaseVersion : undefined;
            resourceInputs["remoteAccess"] = args ? args.remoteAccess : undefined;
            resourceInputs["scalingConfig"] = args ? args.scalingConfig : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["updateConfig"] = args ? args.updateConfig : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["resources"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodeGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodeGroup resources.
 */
export interface NodeGroupState {
    amiType?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    capacityType?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    forceUpdateVersion?: pulumi.Input<boolean>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    launchTemplate?: pulumi.Input<inputs.eks.NodeGroupLaunchTemplate>;
    nodeGroupName?: pulumi.Input<string>;
    nodeGroupNamePrefix?: pulumi.Input<string>;
    nodeRoleArn?: pulumi.Input<string>;
    releaseVersion?: pulumi.Input<string>;
    remoteAccess?: pulumi.Input<inputs.eks.NodeGroupRemoteAccess>;
    resources?: pulumi.Input<pulumi.Input<inputs.eks.NodeGroupResource>[]>;
    scalingConfig?: pulumi.Input<inputs.eks.NodeGroupScalingConfig>;
    status?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.eks.NodeGroupTaint>[]>;
    updateConfig?: pulumi.Input<inputs.eks.NodeGroupUpdateConfig>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NodeGroup resource.
 */
export interface NodeGroupArgs {
    amiType?: pulumi.Input<string>;
    capacityType?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    forceUpdateVersion?: pulumi.Input<boolean>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    launchTemplate?: pulumi.Input<inputs.eks.NodeGroupLaunchTemplate>;
    nodeGroupName?: pulumi.Input<string>;
    nodeGroupNamePrefix?: pulumi.Input<string>;
    nodeRoleArn: pulumi.Input<string>;
    releaseVersion?: pulumi.Input<string>;
    remoteAccess?: pulumi.Input<inputs.eks.NodeGroupRemoteAccess>;
    scalingConfig: pulumi.Input<inputs.eks.NodeGroupScalingConfig>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.eks.NodeGroupTaint>[]>;
    updateConfig?: pulumi.Input<inputs.eks.NodeGroupUpdateConfig>;
    version?: pulumi.Input<string>;
}
