// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface ConnectAttachmentOptions {
    /**
     * The protocol used for the attachment connection. Possible values are `GRE` and `NO_ENCAP`.
     */
    protocol?: string;
}
export interface ConnectPeerBgpOptions {
    peerAsn?: number;
}
export interface ConnectPeerConfiguration {
    bgpConfigurations: outputs.ConnectPeerConfigurationBgpConfiguration[];
    /**
     * A Connect peer core network address.
     */
    coreNetworkAddress: string;
    /**
     * The inside IP addresses used for BGP peering. Required when the Connect attachment protocol is `GRE`. See `aws.networkmanager.ConnectAttachment` for details.
     */
    insideCidrBlocks: string[];
    /**
     * The Connect peer address.
     *
     * The following arguments are optional:
     */
    peerAddress: string;
    protocol: string;
}
export interface ConnectPeerConfigurationBgpConfiguration {
    /**
     * A Connect peer core network address.
     */
    coreNetworkAddress: string;
    coreNetworkAsn: number;
    /**
     * The Connect peer address.
     *
     * The following arguments are optional:
     */
    peerAddress: string;
    peerAsn: number;
}
export interface CoreNetworkEdge {
    /**
     * ASN of a core network edge.
     */
    asn: number;
    /**
     * Region where a core network edge is located.
     */
    edgeLocation: string;
    /**
     * Inside IP addresses used for core network edges.
     */
    insideCidrBlocks: string[];
}
export interface CoreNetworkSegment {
    /**
     * Regions where the edges are located.
     */
    edgeLocations: string[];
    /**
     * Name of a core network segment.
     */
    name: string;
    /**
     * Shared segments of a core network.
     */
    sharedSegments: string[];
}
export interface DeviceAwsLocation {
    /**
     * The Amazon Resource Name (ARN) of the subnet that the device is located in.
     */
    subnetArn?: string;
    /**
     * The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
     */
    zone?: string;
}
export interface DeviceLocation {
    /**
     * The physical address.
     */
    address?: string;
    /**
     * The latitude.
     */
    latitude?: string;
    /**
     * The longitude.
     */
    longitude?: string;
}
export interface LinkBandwidth {
    /**
     * Download speed in Mbps.
     */
    downloadSpeed?: number;
    /**
     * Upload speed in Mbps.
     */
    uploadSpeed?: number;
}
export interface SiteLocation {
    /**
     * Address of the location.
     */
    address?: string;
    /**
     * Latitude of the location.
     */
    latitude?: string;
    /**
     * Longitude of the location.
     */
    longitude?: string;
}
export interface VpcAttachmentOptions {
    /**
     * Indicates whether appliance mode is supported.
     * If enabled, traffic flow between a source and destination use the same Availability Zone for the VPC attachment for the lifetime of that flow.
     * If the VPC attachment is pending acceptance, changing this value will recreate the resource.
     */
    applianceModeSupport?: boolean;
    /**
     * Indicates whether IPv6 is supported.
     * If the VPC attachment is pending acceptance, changing this value will recreate the resource.
     */
    ipv6Support?: boolean;
}
export interface GetDeviceAwsLocation {
    /**
     * ARN of the subnet that the device is located in.
     */
    subnetArn: string;
    /**
     * Zone that the device is located in.
     */
    zone: string;
}
export interface GetDeviceLocation {
    /**
     * Physical address.
     */
    address: string;
    /**
     * Latitude.
     */
    latitude: string;
    /**
     * Longitude.
     */
    longitude: string;
}
export interface GetLinkBandwidth {
    /**
     * Download speed in Mbps.
     */
    downloadSpeed: number;
    /**
     * Upload speed in Mbps.
     */
    uploadSpeed: number;
}
export interface GetSiteLocation {
    /**
     * Address of the location.
     */
    address: string;
    /**
     * Latitude of the location.
     */
    latitude: string;
    /**
     * Longitude of the location.
     */
    longitude: string;
}
