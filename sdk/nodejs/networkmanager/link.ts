// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages a Network Manager link. Use this resource to create a link for a site.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.networkmanager.Link("example", {
 *     globalNetworkId: exampleAwsNetworkmanagerGlobalNetwork.id,
 *     siteId: exampleAwsNetworkmanagerSite.id,
 *     bandwidth: {
 *         uploadSpeed: 10,
 *         downloadSpeed: 50,
 *     },
 *     providerName: "MegaCorp",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_networkmanager_link` using the link ARN. For example:
 *
 * ```sh
 * $ pulumi import aws:networkmanager/link:Link example arn:aws:networkmanager::123456789012:link/global-network-0d47f6t230mz46dy4/link-444555aaabbb11223
 * ```
 */
export class Link extends pulumi.CustomResource {
    /**
     * Get an existing Link resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkState, opts?: pulumi.CustomResourceOptions): Link {
        return new Link(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:networkmanager/link:Link';

    /**
     * Returns true if the given object is an instance of Link.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Link {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Link.__pulumiType;
    }

    /**
     * Link ARN.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Upload speed and download speed in Mbps. See below.
     */
    declare public readonly bandwidth: pulumi.Output<outputs.networkmanager.LinkBandwidth>;
    /**
     * Description of the link.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * ID of the global network.
     */
    declare public readonly globalNetworkId: pulumi.Output<string>;
    /**
     * Provider of the link.
     */
    declare public readonly providerName: pulumi.Output<string | undefined>;
    /**
     * ID of the site.
     *
     * The following arguments are optional:
     */
    declare public readonly siteId: pulumi.Output<string>;
    /**
     * Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    /**
     * Type of the link.
     */
    declare public readonly type: pulumi.Output<string | undefined>;

    /**
     * Create a Link resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkArgs | LinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["bandwidth"] = state?.bandwidth;
            resourceInputs["description"] = state?.description;
            resourceInputs["globalNetworkId"] = state?.globalNetworkId;
            resourceInputs["providerName"] = state?.providerName;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as LinkArgs | undefined;
            if (args?.bandwidth === undefined && !opts.urn) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if (args?.globalNetworkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'globalNetworkId'");
            }
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["bandwidth"] = args?.bandwidth;
            resourceInputs["description"] = args?.description;
            resourceInputs["globalNetworkId"] = args?.globalNetworkId;
            resourceInputs["providerName"] = args?.providerName;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Link.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Link resources.
 */
export interface LinkState {
    /**
     * Link ARN.
     */
    arn?: pulumi.Input<string>;
    /**
     * Upload speed and download speed in Mbps. See below.
     */
    bandwidth?: pulumi.Input<inputs.networkmanager.LinkBandwidth>;
    /**
     * Description of the link.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the global network.
     */
    globalNetworkId?: pulumi.Input<string>;
    /**
     * Provider of the link.
     */
    providerName?: pulumi.Input<string>;
    /**
     * ID of the site.
     *
     * The following arguments are optional:
     */
    siteId?: pulumi.Input<string>;
    /**
     * Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of the link.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Link resource.
 */
export interface LinkArgs {
    /**
     * Upload speed and download speed in Mbps. See below.
     */
    bandwidth: pulumi.Input<inputs.networkmanager.LinkBandwidth>;
    /**
     * Description of the link.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the global network.
     */
    globalNetworkId: pulumi.Input<string>;
    /**
     * Provider of the link.
     */
    providerName?: pulumi.Input<string>;
    /**
     * ID of the site.
     *
     * The following arguments are optional:
     */
    siteId: pulumi.Input<string>;
    /**
     * Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of the link.
     */
    type?: pulumi.Input<string>;
}
