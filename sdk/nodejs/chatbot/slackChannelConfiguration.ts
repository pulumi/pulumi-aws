// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Chatbot Slack Channel Configuration.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.chatbot.SlackChannelConfiguration("test", {
 *     configurationName: "min-slaka-kanal",
 *     iamRoleArn: testAwsIamRole.arn,
 *     slackChannelId: "C07EZ1ABC23",
 *     slackTeamId: "T07EA123LEP",
 *     tags: {
 *         Name: "min-slaka-kanal",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Chatbot Slack Channel Configuration using the `chat_configuration_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration example arn:aws:chatbot::123456789012:chat-configuration/slack-channel/min-slaka-kanal
 * ```
 */
export class SlackChannelConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SlackChannelConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlackChannelConfigurationState, opts?: pulumi.CustomResourceOptions): SlackChannelConfiguration {
        return new SlackChannelConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:chatbot/slackChannelConfiguration:SlackChannelConfiguration';

    /**
     * Returns true if the given object is an instance of SlackChannelConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlackChannelConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlackChannelConfiguration.__pulumiType;
    }

    /**
     * ARN of the Slack channel configuration.
     */
    public /*out*/ readonly chatConfigurationArn!: pulumi.Output<string>;
    /**
     * Name of the Slack channel configuration.
     */
    public readonly configurationName!: pulumi.Output<string>;
    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     */
    public readonly guardrailPolicyArns!: pulumi.Output<string[]>;
    /**
     * User-defined role that AWS Chatbot assumes. This is not the service-linked role.
     */
    public readonly iamRoleArn!: pulumi.Output<string>;
    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     */
    public readonly loggingLevel!: pulumi.Output<string>;
    /**
     * ID of the Slack channel. For example, `C07EZ1ABC23`.
     */
    public readonly slackChannelId!: pulumi.Output<string>;
    /**
     * Name of the Slack channel.
     */
    public /*out*/ readonly slackChannelName!: pulumi.Output<string>;
    /**
     * ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
     *
     * The following arguments are optional:
     */
    public readonly slackTeamId!: pulumi.Output<string>;
    /**
     * Name of the Slack team.
     */
    public /*out*/ readonly slackTeamName!: pulumi.Output<string>;
    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     */
    public readonly snsTopicArns!: pulumi.Output<string[]>;
    /**
     * Map of tags assigned to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.chatbot.SlackChannelConfigurationTimeouts | undefined>;
    /**
     * Enables use of a user role requirement in your chat configuration.
     */
    public readonly userAuthorizationRequired!: pulumi.Output<boolean>;

    /**
     * Create a SlackChannelConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlackChannelConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlackChannelConfigurationArgs | SlackChannelConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlackChannelConfigurationState | undefined;
            resourceInputs["chatConfigurationArn"] = state ? state.chatConfigurationArn : undefined;
            resourceInputs["configurationName"] = state ? state.configurationName : undefined;
            resourceInputs["guardrailPolicyArns"] = state ? state.guardrailPolicyArns : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["loggingLevel"] = state ? state.loggingLevel : undefined;
            resourceInputs["slackChannelId"] = state ? state.slackChannelId : undefined;
            resourceInputs["slackChannelName"] = state ? state.slackChannelName : undefined;
            resourceInputs["slackTeamId"] = state ? state.slackTeamId : undefined;
            resourceInputs["slackTeamName"] = state ? state.slackTeamName : undefined;
            resourceInputs["snsTopicArns"] = state ? state.snsTopicArns : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userAuthorizationRequired"] = state ? state.userAuthorizationRequired : undefined;
        } else {
            const args = argsOrState as SlackChannelConfigurationArgs | undefined;
            if ((!args || args.configurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationName'");
            }
            if ((!args || args.iamRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if ((!args || args.slackChannelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slackChannelId'");
            }
            if ((!args || args.slackTeamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slackTeamId'");
            }
            resourceInputs["configurationName"] = args ? args.configurationName : undefined;
            resourceInputs["guardrailPolicyArns"] = args ? args.guardrailPolicyArns : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["loggingLevel"] = args ? args.loggingLevel : undefined;
            resourceInputs["slackChannelId"] = args ? args.slackChannelId : undefined;
            resourceInputs["slackTeamId"] = args ? args.slackTeamId : undefined;
            resourceInputs["snsTopicArns"] = args ? args.snsTopicArns : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userAuthorizationRequired"] = args ? args.userAuthorizationRequired : undefined;
            resourceInputs["chatConfigurationArn"] = undefined /*out*/;
            resourceInputs["slackChannelName"] = undefined /*out*/;
            resourceInputs["slackTeamName"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlackChannelConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SlackChannelConfiguration resources.
 */
export interface SlackChannelConfigurationState {
    /**
     * ARN of the Slack channel configuration.
     */
    chatConfigurationArn?: pulumi.Input<string>;
    /**
     * Name of the Slack channel configuration.
     */
    configurationName?: pulumi.Input<string>;
    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     */
    guardrailPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined role that AWS Chatbot assumes. This is not the service-linked role.
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     */
    loggingLevel?: pulumi.Input<string>;
    /**
     * ID of the Slack channel. For example, `C07EZ1ABC23`.
     */
    slackChannelId?: pulumi.Input<string>;
    /**
     * Name of the Slack channel.
     */
    slackChannelName?: pulumi.Input<string>;
    /**
     * ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
     *
     * The following arguments are optional:
     */
    slackTeamId?: pulumi.Input<string>;
    /**
     * Name of the Slack team.
     */
    slackTeamName?: pulumi.Input<string>;
    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     */
    snsTopicArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of tags assigned to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.chatbot.SlackChannelConfigurationTimeouts>;
    /**
     * Enables use of a user role requirement in your chat configuration.
     */
    userAuthorizationRequired?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SlackChannelConfiguration resource.
 */
export interface SlackChannelConfigurationArgs {
    /**
     * Name of the Slack channel configuration.
     */
    configurationName: pulumi.Input<string>;
    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     */
    guardrailPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined role that AWS Chatbot assumes. This is not the service-linked role.
     */
    iamRoleArn: pulumi.Input<string>;
    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     */
    loggingLevel?: pulumi.Input<string>;
    /**
     * ID of the Slack channel. For example, `C07EZ1ABC23`.
     */
    slackChannelId: pulumi.Input<string>;
    /**
     * ID of the Slack workspace authorized with AWS Chatbot. For example, `T07EA123LEP`.
     *
     * The following arguments are optional:
     */
    slackTeamId: pulumi.Input<string>;
    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     */
    snsTopicArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of tags assigned to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.chatbot.SlackChannelConfigurationTimeouts>;
    /**
     * Enables use of a user role requirement in your chat configuration.
     */
    userAuthorizationRequired?: pulumi.Input<boolean>;
}
