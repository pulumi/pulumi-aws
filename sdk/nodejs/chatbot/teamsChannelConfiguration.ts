// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Chatbot Microsoft Teams Channel Configuration.
 *
 * > **NOTE:** We provide this resource on a best-effort basis. If you are able to test it and find it useful, we welcome your input at GitHub.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.chatbot.TeamsChannelConfiguration("test", {
 *     channelId: "C07EZ1ABC23",
 *     configurationName: "mitt-lags-kanal",
 *     iamRoleArn: testAwsIamRole.arn,
 *     teamId: "74361522-da01-538d-aa2e-ac7918c6bb92",
 *     tenantId: "1234",
 *     tags: {
 *         Name: "mitt-lags-kanal",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Chatbot Microsoft Teams Channel Configuration using the `team_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration example 5f4f15d2-b958-522a-8333-124aa8bf0925
 * ```
 */
export class TeamsChannelConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing TeamsChannelConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamsChannelConfigurationState, opts?: pulumi.CustomResourceOptions): TeamsChannelConfiguration {
        return new TeamsChannelConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:chatbot/teamsChannelConfiguration:TeamsChannelConfiguration';

    /**
     * Returns true if the given object is an instance of TeamsChannelConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamsChannelConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamsChannelConfiguration.__pulumiType;
    }

    /**
     * ID of the Microsoft Teams channel.
     */
    public readonly channelId!: pulumi.Output<string>;
    /**
     * Name of the Microsoft Teams channel.
     */
    public readonly channelName!: pulumi.Output<string>;
    /**
     * ARN of the Microsoft Teams channel configuration.
     */
    public /*out*/ readonly chatConfigurationArn!: pulumi.Output<string>;
    /**
     * Name of the Microsoft Teams channel configuration.
     */
    public readonly configurationName!: pulumi.Output<string>;
    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     */
    public readonly guardrailPolicyArns!: pulumi.Output<string[]>;
    /**
     * ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
     */
    public readonly iamRoleArn!: pulumi.Output<string>;
    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     */
    public readonly loggingLevel!: pulumi.Output<string>;
    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     */
    public readonly snsTopicArns!: pulumi.Output<string[]>;
    /**
     * Map of tags assigned to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * Name of the Microsoft Teams team.
     */
    public readonly teamName!: pulumi.Output<string>;
    /**
     * ID of the Microsoft Teams tenant.
     *
     * The following arguments are optional:
     */
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.chatbot.TeamsChannelConfigurationTimeouts | undefined>;
    /**
     * Enables use of a user role requirement in your chat configuration.
     */
    public readonly userAuthorizationRequired!: pulumi.Output<boolean>;

    /**
     * Create a TeamsChannelConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamsChannelConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamsChannelConfigurationArgs | TeamsChannelConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamsChannelConfigurationState | undefined;
            resourceInputs["channelId"] = state ? state.channelId : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["chatConfigurationArn"] = state ? state.chatConfigurationArn : undefined;
            resourceInputs["configurationName"] = state ? state.configurationName : undefined;
            resourceInputs["guardrailPolicyArns"] = state ? state.guardrailPolicyArns : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["loggingLevel"] = state ? state.loggingLevel : undefined;
            resourceInputs["snsTopicArns"] = state ? state.snsTopicArns : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["teamName"] = state ? state.teamName : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userAuthorizationRequired"] = state ? state.userAuthorizationRequired : undefined;
        } else {
            const args = argsOrState as TeamsChannelConfigurationArgs | undefined;
            if ((!args || args.channelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelId'");
            }
            if ((!args || args.configurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationName'");
            }
            if ((!args || args.iamRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["configurationName"] = args ? args.configurationName : undefined;
            resourceInputs["guardrailPolicyArns"] = args ? args.guardrailPolicyArns : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["loggingLevel"] = args ? args.loggingLevel : undefined;
            resourceInputs["snsTopicArns"] = args ? args.snsTopicArns : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["teamName"] = args ? args.teamName : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userAuthorizationRequired"] = args ? args.userAuthorizationRequired : undefined;
            resourceInputs["chatConfigurationArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamsChannelConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamsChannelConfiguration resources.
 */
export interface TeamsChannelConfigurationState {
    /**
     * ID of the Microsoft Teams channel.
     */
    channelId?: pulumi.Input<string>;
    /**
     * Name of the Microsoft Teams channel.
     */
    channelName?: pulumi.Input<string>;
    /**
     * ARN of the Microsoft Teams channel configuration.
     */
    chatConfigurationArn?: pulumi.Input<string>;
    /**
     * Name of the Microsoft Teams channel configuration.
     */
    configurationName?: pulumi.Input<string>;
    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     */
    guardrailPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     */
    loggingLevel?: pulumi.Input<string>;
    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     */
    snsTopicArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of tags assigned to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
     */
    teamId?: pulumi.Input<string>;
    /**
     * Name of the Microsoft Teams team.
     */
    teamName?: pulumi.Input<string>;
    /**
     * ID of the Microsoft Teams tenant.
     *
     * The following arguments are optional:
     */
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.chatbot.TeamsChannelConfigurationTimeouts>;
    /**
     * Enables use of a user role requirement in your chat configuration.
     */
    userAuthorizationRequired?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TeamsChannelConfiguration resource.
 */
export interface TeamsChannelConfigurationArgs {
    /**
     * ID of the Microsoft Teams channel.
     */
    channelId: pulumi.Input<string>;
    /**
     * Name of the Microsoft Teams channel.
     */
    channelName?: pulumi.Input<string>;
    /**
     * Name of the Microsoft Teams channel configuration.
     */
    configurationName: pulumi.Input<string>;
    /**
     * List of IAM policy ARNs that are applied as channel guardrails. The AWS managed `AdministratorAccess` policy is applied by default if this is not set.
     */
    guardrailPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ARN of the IAM role that defines the permissions for AWS Chatbot. This is a user-defined role that AWS Chatbot will assume. This is not the service-linked role.
     */
    iamRoleArn: pulumi.Input<string>;
    /**
     * Logging levels include `ERROR`, `INFO`, or `NONE`.
     */
    loggingLevel?: pulumi.Input<string>;
    /**
     * ARNs of the SNS topics that deliver notifications to AWS Chatbot.
     */
    snsTopicArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of tags assigned to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the Microsoft Team authorized with AWS Chatbot. To get the team ID, you must perform the initial authorization flow with Microsoft Teams in the AWS Chatbot console. Then you can copy and paste the team ID from the console.
     */
    teamId: pulumi.Input<string>;
    /**
     * Name of the Microsoft Teams team.
     */
    teamName?: pulumi.Input<string>;
    /**
     * ID of the Microsoft Teams tenant.
     *
     * The following arguments are optional:
     */
    tenantId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.chatbot.TeamsChannelConfigurationTimeouts>;
    /**
     * Enables use of a user role requirement in your chat configuration.
     */
    userAuthorizationRequired?: pulumi.Input<boolean>;
}
