// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an EBS (Elastic Block Storage) Fast Snapshot Restore.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ebs.FastSnapshotRestore("example", {
 *     availabilityZone: "us-west-2a",
 *     snapshotId: exampleAwsEbsSnapshot.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import EC2 (Elastic Compute Cloud) EBS Fast Snapshot Restore using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:ebs/fastSnapshotRestore:FastSnapshotRestore example us-west-2a,snap-abcdef123456
 * ```
 */
export class FastSnapshotRestore extends pulumi.CustomResource {
    /**
     * Get an existing FastSnapshotRestore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FastSnapshotRestoreState, opts?: pulumi.CustomResourceOptions): FastSnapshotRestore {
        return new FastSnapshotRestore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ebs/fastSnapshotRestore:FastSnapshotRestore';

    /**
     * Returns true if the given object is an instance of FastSnapshotRestore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FastSnapshotRestore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FastSnapshotRestore.__pulumiType;
    }

    /**
     * Availability zone in which to enable fast snapshot restores.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * ID of the snapshot.
     */
    public readonly snapshotId!: pulumi.Output<string>;
    /**
     * State of fast snapshot restores. Valid values are `enabling`, `optimizing`, `enabled`, `disabling`, `disabled`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ebs.FastSnapshotRestoreTimeouts | undefined>;

    /**
     * Create a FastSnapshotRestore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FastSnapshotRestoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FastSnapshotRestoreArgs | FastSnapshotRestoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FastSnapshotRestoreState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FastSnapshotRestoreArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.snapshotId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snapshotId'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FastSnapshotRestore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FastSnapshotRestore resources.
 */
export interface FastSnapshotRestoreState {
    /**
     * Availability zone in which to enable fast snapshot restores.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * ID of the snapshot.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * State of fast snapshot restores. Valid values are `enabling`, `optimizing`, `enabled`, `disabling`, `disabled`.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ebs.FastSnapshotRestoreTimeouts>;
}

/**
 * The set of arguments for constructing a FastSnapshotRestore resource.
 */
export interface FastSnapshotRestoreArgs {
    /**
     * Availability zone in which to enable fast snapshot restores.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * ID of the snapshot.
     */
    snapshotId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ebs.FastSnapshotRestoreTimeouts>;
}
