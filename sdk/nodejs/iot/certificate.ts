// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates and manages an AWS IoT certificate.
 *
 * ## Example Usage
 *
 * ### With CSR
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const cert = new aws.iot.Certificate("cert", {
 *     csr: std.file({
 *         input: "/my/csr.pem",
 *     }).then(invoke => invoke.result),
 *     active: true,
 * });
 * ```
 *
 * ### Without CSR
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cert = new aws.iot.Certificate("cert", {active: true});
 * ```
 *
 * ### From existing certificate without a CA
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const cert = new aws.iot.Certificate("cert", {
 *     certificatePem: std.file({
 *         input: "/my/cert.pem",
 *     }).then(invoke => invoke.result),
 *     active: true,
 * });
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iot/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Boolean flag to indicate if the certificate should be active
     */
    declare public readonly active: pulumi.Output<boolean>;
    /**
     * The ARN of the created certificate.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The certificate ID of the CA certificate used to sign the certificate.
     */
    declare public /*out*/ readonly caCertificateId: pulumi.Output<string>;
    /**
     * The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
     */
    declare public readonly caPem: pulumi.Output<string | undefined>;
    /**
     * The certificate to be registered. If `caPem` is unspecified, review
     * [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
     * If `caPem` is specified, review
     * [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
     * for more information on registering a certificate.
     */
    declare public readonly certificatePem: pulumi.Output<string>;
    /**
     * The certificate signing request. Review
     * [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
     * for more information on generating a certificate from a certificate signing request (CSR).
     * If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
     * for more information on generating keys and a certificate.
     */
    declare public readonly csr: pulumi.Output<string | undefined>;
    /**
     * When neither CSR nor certificate is provided, the private key.
     */
    declare public /*out*/ readonly privateKey: pulumi.Output<string>;
    /**
     * When neither CSR nor certificate is provided, the public key.
     */
    declare public /*out*/ readonly publicKey: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["active"] = state?.active;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["caCertificateId"] = state?.caCertificateId;
            resourceInputs["caPem"] = state?.caPem;
            resourceInputs["certificatePem"] = state?.certificatePem;
            resourceInputs["csr"] = state?.csr;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["publicKey"] = state?.publicKey;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if (args?.active === undefined && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            resourceInputs["active"] = args?.active;
            resourceInputs["caPem"] = args?.caPem ? pulumi.secret(args.caPem) : undefined;
            resourceInputs["certificatePem"] = args?.certificatePem ? pulumi.secret(args.certificatePem) : undefined;
            resourceInputs["csr"] = args?.csr;
            resourceInputs["region"] = args?.region;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["caCertificateId"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caPem", "certificatePem", "privateKey", "publicKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Boolean flag to indicate if the certificate should be active
     */
    active?: pulumi.Input<boolean>;
    /**
     * The ARN of the created certificate.
     */
    arn?: pulumi.Input<string>;
    /**
     * The certificate ID of the CA certificate used to sign the certificate.
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
     */
    caPem?: pulumi.Input<string>;
    /**
     * The certificate to be registered. If `caPem` is unspecified, review
     * [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
     * If `caPem` is specified, review
     * [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
     * for more information on registering a certificate.
     */
    certificatePem?: pulumi.Input<string>;
    /**
     * The certificate signing request. Review
     * [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
     * for more information on generating a certificate from a certificate signing request (CSR).
     * If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
     * for more information on generating keys and a certificate.
     */
    csr?: pulumi.Input<string>;
    /**
     * When neither CSR nor certificate is provided, the private key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * When neither CSR nor certificate is provided, the public key.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Boolean flag to indicate if the certificate should be active
     */
    active: pulumi.Input<boolean>;
    /**
     * The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
     */
    caPem?: pulumi.Input<string>;
    /**
     * The certificate to be registered. If `caPem` is unspecified, review
     * [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
     * If `caPem` is specified, review
     * [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
     * for more information on registering a certificate.
     */
    certificatePem?: pulumi.Input<string>;
    /**
     * The certificate signing request. Review
     * [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
     * for more information on generating a certificate from a certificate signing request (CSR).
     * If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
     * for more information on generating keys and a certificate.
     */
    csr?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
}
