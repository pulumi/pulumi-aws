// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages IoT event configurations.
 *
 * > **NOTE:** Deleting this resource does not disable the event configurations, the resource in simply removed from state instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.iot.EventConfigurations("example", {eventConfigurations: {
 *     CA_CERTIFICATE: false,
 *     CERTIFICATE: true,
 *     JOB: false,
 *     JOB_EXECUTION: false,
 *     POLICY: false,
 *     THING: true,
 *     THING_GROUP: false,
 *     THING_GROUP_HIERARCHY: false,
 *     THING_GROUP_MEMBERSHIP: false,
 *     THING_TYPE: false,
 *     THING_TYPE_ASSOCIATION: false,
 * }});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import IoT Event Configurations using the AWS Region. For example:
 *
 * ```sh
 *  $ pulumi import aws:iot/eventConfigurations:EventConfigurations example us-west-2
 * ```
 */
export class EventConfigurations extends pulumi.CustomResource {
    /**
     * Get an existing EventConfigurations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventConfigurationsState, opts?: pulumi.CustomResourceOptions): EventConfigurations {
        return new EventConfigurations(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iot/eventConfigurations:EventConfigurations';

    /**
     * Returns true if the given object is an instance of EventConfigurations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventConfigurations {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventConfigurations.__pulumiType;
    }

    /**
     * Map. The new event configuration values. You can use only these strings as keys: `THING_GROUP_HIERARCHY`, `THING_GROUP_MEMBERSHIP`, `THING_TYPE`, `THING_TYPE_ASSOCIATION`, `THING_GROUP`, `THING`, `POLICY`, `CA_CERTIFICATE`, `JOB_EXECUTION`, `CERTIFICATE`, `JOB`. Use boolean for values of mapping.
     */
    public readonly eventConfigurations!: pulumi.Output<{[key: string]: boolean}>;

    /**
     * Create a EventConfigurations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventConfigurationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventConfigurationsArgs | EventConfigurationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventConfigurationsState | undefined;
            resourceInputs["eventConfigurations"] = state ? state.eventConfigurations : undefined;
        } else {
            const args = argsOrState as EventConfigurationsArgs | undefined;
            if ((!args || args.eventConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventConfigurations'");
            }
            resourceInputs["eventConfigurations"] = args ? args.eventConfigurations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventConfigurations.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventConfigurations resources.
 */
export interface EventConfigurationsState {
    /**
     * Map. The new event configuration values. You can use only these strings as keys: `THING_GROUP_HIERARCHY`, `THING_GROUP_MEMBERSHIP`, `THING_TYPE`, `THING_TYPE_ASSOCIATION`, `THING_GROUP`, `THING`, `POLICY`, `CA_CERTIFICATE`, `JOB_EXECUTION`, `CERTIFICATE`, `JOB`. Use boolean for values of mapping.
     */
    eventConfigurations?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
}

/**
 * The set of arguments for constructing a EventConfigurations resource.
 */
export interface EventConfigurationsArgs {
    /**
     * Map. The new event configuration values. You can use only these strings as keys: `THING_GROUP_HIERARCHY`, `THING_GROUP_MEMBERSHIP`, `THING_TYPE`, `THING_TYPE_ASSOCIATION`, `THING_GROUP`, `THING`, `POLICY`, `CA_CERTIFICATE`, `JOB_EXECUTION`, `CERTIFICATE`, `JOB`. Use boolean for values of mapping.
     */
    eventConfigurations: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
}
