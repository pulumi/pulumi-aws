// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AuthorizerArgs, AuthorizerState } from "./authorizer";
export type Authorizer = import("./authorizer").Authorizer;
export const Authorizer: typeof import("./authorizer").Authorizer = null as any;
utilities.lazyLoad(exports, ["Authorizer"], () => require("./authorizer"));

export { BillingGroupArgs, BillingGroupState } from "./billingGroup";
export type BillingGroup = import("./billingGroup").BillingGroup;
export const BillingGroup: typeof import("./billingGroup").BillingGroup = null as any;
utilities.lazyLoad(exports, ["BillingGroup"], () => require("./billingGroup"));

export { CaCertificateArgs, CaCertificateState } from "./caCertificate";
export type CaCertificate = import("./caCertificate").CaCertificate;
export const CaCertificate: typeof import("./caCertificate").CaCertificate = null as any;
utilities.lazyLoad(exports, ["CaCertificate"], () => require("./caCertificate"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { DomainConfigurationArgs, DomainConfigurationState } from "./domainConfiguration";
export type DomainConfiguration = import("./domainConfiguration").DomainConfiguration;
export const DomainConfiguration: typeof import("./domainConfiguration").DomainConfiguration = null as any;
utilities.lazyLoad(exports, ["DomainConfiguration"], () => require("./domainConfiguration"));

export { EventConfigurationsArgs, EventConfigurationsState } from "./eventConfigurations";
export type EventConfigurations = import("./eventConfigurations").EventConfigurations;
export const EventConfigurations: typeof import("./eventConfigurations").EventConfigurations = null as any;
utilities.lazyLoad(exports, ["EventConfigurations"], () => require("./eventConfigurations"));

export { GetEndpointArgs, GetEndpointResult, GetEndpointOutputArgs } from "./getEndpoint";
export const getEndpoint: typeof import("./getEndpoint").getEndpoint = null as any;
export const getEndpointOutput: typeof import("./getEndpoint").getEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoint","getEndpointOutput"], () => require("./getEndpoint"));

export { GetRegistrationCodeResult } from "./getRegistrationCode";
export const getRegistrationCode: typeof import("./getRegistrationCode").getRegistrationCode = null as any;
export const getRegistrationCodeOutput: typeof import("./getRegistrationCode").getRegistrationCodeOutput = null as any;
utilities.lazyLoad(exports, ["getRegistrationCode","getRegistrationCodeOutput"], () => require("./getRegistrationCode"));

export { IndexingConfigurationArgs, IndexingConfigurationState } from "./indexingConfiguration";
export type IndexingConfiguration = import("./indexingConfiguration").IndexingConfiguration;
export const IndexingConfiguration: typeof import("./indexingConfiguration").IndexingConfiguration = null as any;
utilities.lazyLoad(exports, ["IndexingConfiguration"], () => require("./indexingConfiguration"));

export { LoggingOptionsArgs, LoggingOptionsState } from "./loggingOptions";
export type LoggingOptions = import("./loggingOptions").LoggingOptions;
export const LoggingOptions: typeof import("./loggingOptions").LoggingOptions = null as any;
utilities.lazyLoad(exports, ["LoggingOptions"], () => require("./loggingOptions"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicyAttachmentArgs, PolicyAttachmentState } from "./policyAttachment";
export type PolicyAttachment = import("./policyAttachment").PolicyAttachment;
export const PolicyAttachment: typeof import("./policyAttachment").PolicyAttachment = null as any;
utilities.lazyLoad(exports, ["PolicyAttachment"], () => require("./policyAttachment"));

export { ProvisioningTemplateArgs, ProvisioningTemplateState } from "./provisioningTemplate";
export type ProvisioningTemplate = import("./provisioningTemplate").ProvisioningTemplate;
export const ProvisioningTemplate: typeof import("./provisioningTemplate").ProvisioningTemplate = null as any;
utilities.lazyLoad(exports, ["ProvisioningTemplate"], () => require("./provisioningTemplate"));

export { RoleAliasArgs, RoleAliasState } from "./roleAlias";
export type RoleAlias = import("./roleAlias").RoleAlias;
export const RoleAlias: typeof import("./roleAlias").RoleAlias = null as any;
utilities.lazyLoad(exports, ["RoleAlias"], () => require("./roleAlias"));

export { ThingArgs, ThingState } from "./thing";
export type Thing = import("./thing").Thing;
export const Thing: typeof import("./thing").Thing = null as any;
utilities.lazyLoad(exports, ["Thing"], () => require("./thing"));

export { ThingGroupArgs, ThingGroupState } from "./thingGroup";
export type ThingGroup = import("./thingGroup").ThingGroup;
export const ThingGroup: typeof import("./thingGroup").ThingGroup = null as any;
utilities.lazyLoad(exports, ["ThingGroup"], () => require("./thingGroup"));

export { ThingGroupMembershipArgs, ThingGroupMembershipState } from "./thingGroupMembership";
export type ThingGroupMembership = import("./thingGroupMembership").ThingGroupMembership;
export const ThingGroupMembership: typeof import("./thingGroupMembership").ThingGroupMembership = null as any;
utilities.lazyLoad(exports, ["ThingGroupMembership"], () => require("./thingGroupMembership"));

export { ThingPrincipalAttachmentArgs, ThingPrincipalAttachmentState } from "./thingPrincipalAttachment";
export type ThingPrincipalAttachment = import("./thingPrincipalAttachment").ThingPrincipalAttachment;
export const ThingPrincipalAttachment: typeof import("./thingPrincipalAttachment").ThingPrincipalAttachment = null as any;
utilities.lazyLoad(exports, ["ThingPrincipalAttachment"], () => require("./thingPrincipalAttachment"));

export { ThingTypeArgs, ThingTypeState } from "./thingType";
export type ThingType = import("./thingType").ThingType;
export const ThingType: typeof import("./thingType").ThingType = null as any;
utilities.lazyLoad(exports, ["ThingType"], () => require("./thingType"));

export { TopicRuleArgs, TopicRuleState } from "./topicRule";
export type TopicRule = import("./topicRule").TopicRule;
export const TopicRule: typeof import("./topicRule").TopicRule = null as any;
utilities.lazyLoad(exports, ["TopicRule"], () => require("./topicRule"));

export { TopicRuleDestinationArgs, TopicRuleDestinationState } from "./topicRuleDestination";
export type TopicRuleDestination = import("./topicRuleDestination").TopicRuleDestination;
export const TopicRuleDestination: typeof import("./topicRuleDestination").TopicRuleDestination = null as any;
utilities.lazyLoad(exports, ["TopicRuleDestination"], () => require("./topicRuleDestination"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:iot/authorizer:Authorizer":
                return new Authorizer(name, <any>undefined, { urn })
            case "aws:iot/billingGroup:BillingGroup":
                return new BillingGroup(name, <any>undefined, { urn })
            case "aws:iot/caCertificate:CaCertificate":
                return new CaCertificate(name, <any>undefined, { urn })
            case "aws:iot/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "aws:iot/domainConfiguration:DomainConfiguration":
                return new DomainConfiguration(name, <any>undefined, { urn })
            case "aws:iot/eventConfigurations:EventConfigurations":
                return new EventConfigurations(name, <any>undefined, { urn })
            case "aws:iot/indexingConfiguration:IndexingConfiguration":
                return new IndexingConfiguration(name, <any>undefined, { urn })
            case "aws:iot/loggingOptions:LoggingOptions":
                return new LoggingOptions(name, <any>undefined, { urn })
            case "aws:iot/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "aws:iot/policyAttachment:PolicyAttachment":
                return new PolicyAttachment(name, <any>undefined, { urn })
            case "aws:iot/provisioningTemplate:ProvisioningTemplate":
                return new ProvisioningTemplate(name, <any>undefined, { urn })
            case "aws:iot/roleAlias:RoleAlias":
                return new RoleAlias(name, <any>undefined, { urn })
            case "aws:iot/thing:Thing":
                return new Thing(name, <any>undefined, { urn })
            case "aws:iot/thingGroup:ThingGroup":
                return new ThingGroup(name, <any>undefined, { urn })
            case "aws:iot/thingGroupMembership:ThingGroupMembership":
                return new ThingGroupMembership(name, <any>undefined, { urn })
            case "aws:iot/thingPrincipalAttachment:ThingPrincipalAttachment":
                return new ThingPrincipalAttachment(name, <any>undefined, { urn })
            case "aws:iot/thingType:ThingType":
                return new ThingType(name, <any>undefined, { urn })
            case "aws:iot/topicRule:TopicRule":
                return new TopicRule(name, <any>undefined, { urn })
            case "aws:iot/topicRuleDestination:TopicRuleDestination":
                return new TopicRuleDestination(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "iot/authorizer", _module)
pulumi.runtime.registerResourceModule("aws", "iot/billingGroup", _module)
pulumi.runtime.registerResourceModule("aws", "iot/caCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "iot/certificate", _module)
pulumi.runtime.registerResourceModule("aws", "iot/domainConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "iot/eventConfigurations", _module)
pulumi.runtime.registerResourceModule("aws", "iot/indexingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "iot/loggingOptions", _module)
pulumi.runtime.registerResourceModule("aws", "iot/policy", _module)
pulumi.runtime.registerResourceModule("aws", "iot/policyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "iot/provisioningTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "iot/roleAlias", _module)
pulumi.runtime.registerResourceModule("aws", "iot/thing", _module)
pulumi.runtime.registerResourceModule("aws", "iot/thingGroup", _module)
pulumi.runtime.registerResourceModule("aws", "iot/thingGroupMembership", _module)
pulumi.runtime.registerResourceModule("aws", "iot/thingPrincipalAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "iot/thingType", _module)
pulumi.runtime.registerResourceModule("aws", "iot/topicRule", _module)
pulumi.runtime.registerResourceModule("aws", "iot/topicRuleDestination", _module)
