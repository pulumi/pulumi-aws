// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates and manages an AWS IoT Authorizer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * from "fs";
 *
 * const example = new aws.iot.Authorizer("example", {
 *     authorizerFunctionArn: aws_lambda_function.example.arn,
 *     signingDisabled: false,
 *     status: "ACTIVE",
 *     tokenKeyName: "Token-Header",
 *     tokenSigningPublicKeys: {
 *         Key1: fs.readFileSync("test-fixtures/iot-authorizer-signing-key.pem"),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * IOT Authorizers can be imported using the name, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:iot/authorizer:Authorizer example example
 * ```
 */
export class Authorizer extends pulumi.CustomResource {
    /**
     * Get an existing Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorizerState, opts?: pulumi.CustomResourceOptions): Authorizer {
        return new Authorizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iot/authorizer:Authorizer';

    /**
     * Returns true if the given object is an instance of Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authorizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authorizer.__pulumiType;
    }

    /**
     * The ARN of the authorizer.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ARN of the authorizer's Lambda function.
     */
    public readonly authorizerFunctionArn!: pulumi.Output<string>;
    /**
     * Specifies whether the HTTP caching is enabled or not. Default: `false`.
     */
    public readonly enableCachingForHttp!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the authorizer.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
     */
    public readonly signingDisabled!: pulumi.Output<boolean | undefined>;
    /**
     * The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
     */
    public readonly tokenKeyName!: pulumi.Output<string | undefined>;
    /**
     * The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
     */
    public readonly tokenSigningPublicKeys!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Authorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorizerArgs | AuthorizerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthorizerState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authorizerFunctionArn"] = state ? state.authorizerFunctionArn : undefined;
            resourceInputs["enableCachingForHttp"] = state ? state.enableCachingForHttp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["signingDisabled"] = state ? state.signingDisabled : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tokenKeyName"] = state ? state.tokenKeyName : undefined;
            resourceInputs["tokenSigningPublicKeys"] = state ? state.tokenSigningPublicKeys : undefined;
        } else {
            const args = argsOrState as AuthorizerArgs | undefined;
            if ((!args || args.authorizerFunctionArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizerFunctionArn'");
            }
            resourceInputs["authorizerFunctionArn"] = args ? args.authorizerFunctionArn : undefined;
            resourceInputs["enableCachingForHttp"] = args ? args.enableCachingForHttp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["signingDisabled"] = args ? args.signingDisabled : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tokenKeyName"] = args ? args.tokenKeyName : undefined;
            resourceInputs["tokenSigningPublicKeys"] = args ? args.tokenSigningPublicKeys : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Authorizer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Authorizer resources.
 */
export interface AuthorizerState {
    /**
     * The ARN of the authorizer.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ARN of the authorizer's Lambda function.
     */
    authorizerFunctionArn?: pulumi.Input<string>;
    /**
     * Specifies whether the HTTP caching is enabled or not. Default: `false`.
     */
    enableCachingForHttp?: pulumi.Input<boolean>;
    /**
     * The name of the authorizer.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
     */
    signingDisabled?: pulumi.Input<boolean>;
    /**
     * The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
     */
    tokenKeyName?: pulumi.Input<string>;
    /**
     * The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
     */
    tokenSigningPublicKeys?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Authorizer resource.
 */
export interface AuthorizerArgs {
    /**
     * The ARN of the authorizer's Lambda function.
     */
    authorizerFunctionArn: pulumi.Input<string>;
    /**
     * Specifies whether the HTTP caching is enabled or not. Default: `false`.
     */
    enableCachingForHttp?: pulumi.Input<boolean>;
    /**
     * The name of the authorizer.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
     */
    signingDisabled?: pulumi.Input<boolean>;
    /**
     * The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
     */
    tokenKeyName?: pulumi.Input<string>;
    /**
     * The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
     */
    tokenSigningPublicKeys?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
