// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Creates and manages an AWS IoT CA Certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as tls from "@pulumi/tls";
 *
 * const caPrivateKey = new tls.PrivateKey("caPrivateKey", {algorithm: "RSA"});
 * const caSelfSignedCert = new tls.SelfSignedCert("caSelfSignedCert", {
 *     privateKeyPem: caPrivateKey.privateKeyPem,
 *     subject: {
 *         commonName: "example.com",
 *         organization: "ACME Examples, Inc",
 *     },
 *     validityPeriodHours: 12,
 *     allowedUses: [
 *         "key_encipherment",
 *         "digital_signature",
 *         "server_auth",
 *     ],
 *     isCaCertificate: true,
 * });
 * const verificationPrivateKey = new tls.PrivateKey("verificationPrivateKey", {algorithm: "RSA"});
 * const exampleRegistrationCode = aws.iot.getRegistrationCode({});
 * const verificationCertRequest = new tls.CertRequest("verificationCertRequest", {
 *     privateKeyPem: verificationPrivateKey.privateKeyPem,
 *     subject: {
 *         commonName: exampleRegistrationCode.then(exampleRegistrationCode => exampleRegistrationCode.registrationCode),
 *     },
 * });
 * const verificationLocallySignedCert = new tls.LocallySignedCert("verificationLocallySignedCert", {
 *     certRequestPem: verificationCertRequest.certRequestPem,
 *     caPrivateKeyPem: caPrivateKey.privateKeyPem,
 *     caCertPem: caSelfSignedCert.certPem,
 *     validityPeriodHours: 12,
 *     allowedUses: [
 *         "key_encipherment",
 *         "digital_signature",
 *         "server_auth",
 *     ],
 * });
 * const exampleCaCertificate = new aws.iot.CaCertificate("exampleCaCertificate", {
 *     active: true,
 *     caCertificatePem: caSelfSignedCert.certPem,
 *     verificationCertificatePem: verificationLocallySignedCert.certPem,
 *     allowAutoRegistration: true,
 * });
 * ```
 */
export class CaCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CaCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CaCertificateState, opts?: pulumi.CustomResourceOptions): CaCertificate {
        return new CaCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iot/caCertificate:CaCertificate';

    /**
     * Returns true if the given object is an instance of CaCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CaCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CaCertificate.__pulumiType;
    }

    /**
     * Boolean flag to indicate if the certificate should be active for device authentication.
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * Boolean flag to indicate if the certificate should be active for device regisration.
     */
    public readonly allowAutoRegistration!: pulumi.Output<boolean>;
    /**
     * The ARN of the created CA certificate.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * PEM encoded CA certificate.
     */
    public readonly caCertificatePem!: pulumi.Output<string>;
    /**
     * The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
     */
    public readonly certificateMode!: pulumi.Output<string | undefined>;
    /**
     * The customer version of the CA certificate.
     */
    public /*out*/ readonly customerVersion!: pulumi.Output<number>;
    /**
     * The generation ID of the CA certificate.
     */
    public /*out*/ readonly generationId!: pulumi.Output<string>;
    /**
     * Information about the registration configuration. See below.
     */
    public readonly registrationConfig!: pulumi.Output<outputs.iot.CaCertificateRegistrationConfig | undefined>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * When the CA certificate is valid.
     */
    public /*out*/ readonly validities!: pulumi.Output<outputs.iot.CaCertificateValidity[]>;
    /**
     * PEM encoded verification certificate containing the common name of a registration code. Review
     * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
     */
    public readonly verificationCertificatePem!: pulumi.Output<string | undefined>;

    /**
     * Create a CaCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CaCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CaCertificateArgs | CaCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CaCertificateState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["allowAutoRegistration"] = state ? state.allowAutoRegistration : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["caCertificatePem"] = state ? state.caCertificatePem : undefined;
            resourceInputs["certificateMode"] = state ? state.certificateMode : undefined;
            resourceInputs["customerVersion"] = state ? state.customerVersion : undefined;
            resourceInputs["generationId"] = state ? state.generationId : undefined;
            resourceInputs["registrationConfig"] = state ? state.registrationConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["validities"] = state ? state.validities : undefined;
            resourceInputs["verificationCertificatePem"] = state ? state.verificationCertificatePem : undefined;
        } else {
            const args = argsOrState as CaCertificateArgs | undefined;
            if ((!args || args.active === undefined) && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            if ((!args || args.allowAutoRegistration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowAutoRegistration'");
            }
            if ((!args || args.caCertificatePem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCertificatePem'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["allowAutoRegistration"] = args ? args.allowAutoRegistration : undefined;
            resourceInputs["caCertificatePem"] = args?.caCertificatePem ? pulumi.secret(args.caCertificatePem) : undefined;
            resourceInputs["certificateMode"] = args ? args.certificateMode : undefined;
            resourceInputs["registrationConfig"] = args ? args.registrationConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["verificationCertificatePem"] = args?.verificationCertificatePem ? pulumi.secret(args.verificationCertificatePem) : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["customerVersion"] = undefined /*out*/;
            resourceInputs["generationId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["validities"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCertificatePem", "tagsAll", "verificationCertificatePem"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CaCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CaCertificate resources.
 */
export interface CaCertificateState {
    /**
     * Boolean flag to indicate if the certificate should be active for device authentication.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Boolean flag to indicate if the certificate should be active for device regisration.
     */
    allowAutoRegistration?: pulumi.Input<boolean>;
    /**
     * The ARN of the created CA certificate.
     */
    arn?: pulumi.Input<string>;
    /**
     * PEM encoded CA certificate.
     */
    caCertificatePem?: pulumi.Input<string>;
    /**
     * The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
     */
    certificateMode?: pulumi.Input<string>;
    /**
     * The customer version of the CA certificate.
     */
    customerVersion?: pulumi.Input<number>;
    /**
     * The generation ID of the CA certificate.
     */
    generationId?: pulumi.Input<string>;
    /**
     * Information about the registration configuration. See below.
     */
    registrationConfig?: pulumi.Input<inputs.iot.CaCertificateRegistrationConfig>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * When the CA certificate is valid.
     */
    validities?: pulumi.Input<pulumi.Input<inputs.iot.CaCertificateValidity>[]>;
    /**
     * PEM encoded verification certificate containing the common name of a registration code. Review
     * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
     */
    verificationCertificatePem?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CaCertificate resource.
 */
export interface CaCertificateArgs {
    /**
     * Boolean flag to indicate if the certificate should be active for device authentication.
     */
    active: pulumi.Input<boolean>;
    /**
     * Boolean flag to indicate if the certificate should be active for device regisration.
     */
    allowAutoRegistration: pulumi.Input<boolean>;
    /**
     * PEM encoded CA certificate.
     */
    caCertificatePem: pulumi.Input<string>;
    /**
     * The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
     */
    certificateMode?: pulumi.Input<string>;
    /**
     * Information about the registration configuration. See below.
     */
    registrationConfig?: pulumi.Input<inputs.iot.CaCertificateRegistrationConfig>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * PEM encoded verification certificate containing the common name of a registration code. Review
     * [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.
     */
    verificationCertificatePem?: pulumi.Input<string>;
}
