// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage [default logging options](https://docs.aws.amazon.com/iot/latest/developerguide/configure-logging.html#configure-logging-console).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.iot.LoggingOptions("example", {
 *     defaultLogLevel: "WARN",
 *     roleArn: aws_iam_role.example.arn,
 * });
 * ```
 */
export class LoggingOptions extends pulumi.CustomResource {
    /**
     * Get an existing LoggingOptions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoggingOptionsState, opts?: pulumi.CustomResourceOptions): LoggingOptions {
        return new LoggingOptions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iot/loggingOptions:LoggingOptions';

    /**
     * Returns true if the given object is an instance of LoggingOptions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoggingOptions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoggingOptions.__pulumiType;
    }

    /**
     * The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
     */
    public readonly defaultLogLevel!: pulumi.Output<string>;
    /**
     * If `true` all logs are disabled. The default is `false`.
     */
    public readonly disableAllLogs!: pulumi.Output<boolean | undefined>;
    /**
     * The ARN of the role that allows IoT to write to Cloudwatch logs.
     */
    public readonly roleArn!: pulumi.Output<string>;

    /**
     * Create a LoggingOptions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoggingOptionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoggingOptionsArgs | LoggingOptionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoggingOptionsState | undefined;
            resourceInputs["defaultLogLevel"] = state ? state.defaultLogLevel : undefined;
            resourceInputs["disableAllLogs"] = state ? state.disableAllLogs : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
        } else {
            const args = argsOrState as LoggingOptionsArgs | undefined;
            if ((!args || args.defaultLogLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultLogLevel'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["defaultLogLevel"] = args ? args.defaultLogLevel : undefined;
            resourceInputs["disableAllLogs"] = args ? args.disableAllLogs : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoggingOptions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoggingOptions resources.
 */
export interface LoggingOptionsState {
    /**
     * The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
     */
    defaultLogLevel?: pulumi.Input<string>;
    /**
     * If `true` all logs are disabled. The default is `false`.
     */
    disableAllLogs?: pulumi.Input<boolean>;
    /**
     * The ARN of the role that allows IoT to write to Cloudwatch logs.
     */
    roleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoggingOptions resource.
 */
export interface LoggingOptionsArgs {
    /**
     * The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
     */
    defaultLogLevel: pulumi.Input<string>;
    /**
     * If `true` all logs are disabled. The default is `false`.
     */
    disableAllLogs?: pulumi.Input<boolean>;
    /**
     * The ARN of the role that allows IoT to write to Cloudwatch logs.
     */
    roleArn: pulumi.Input<string>;
}
