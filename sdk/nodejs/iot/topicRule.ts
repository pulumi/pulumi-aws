// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class TopicRule extends pulumi.CustomResource {
    /**
     * Get an existing TopicRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicRuleState, opts?: pulumi.CustomResourceOptions): TopicRule {
        return new TopicRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:iot/topicRule:TopicRule';

    /**
     * Returns true if the given object is an instance of TopicRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TopicRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TopicRule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cloudwatchAlarm!: pulumi.Output<outputs.iot.TopicRuleCloudwatchAlarm | undefined>;
    public readonly cloudwatchLogs!: pulumi.Output<outputs.iot.TopicRuleCloudwatchLog[] | undefined>;
    public readonly cloudwatchMetric!: pulumi.Output<outputs.iot.TopicRuleCloudwatchMetric | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dynamodb!: pulumi.Output<outputs.iot.TopicRuleDynamodb | undefined>;
    public readonly dynamodbv2s!: pulumi.Output<outputs.iot.TopicRuleDynamodbv2[] | undefined>;
    public readonly elasticsearch!: pulumi.Output<outputs.iot.TopicRuleElasticsearch | undefined>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly errorAction!: pulumi.Output<outputs.iot.TopicRuleErrorAction | undefined>;
    public readonly firehose!: pulumi.Output<outputs.iot.TopicRuleFirehose | undefined>;
    public readonly https!: pulumi.Output<outputs.iot.TopicRuleHttp[] | undefined>;
    public readonly iotAnalytics!: pulumi.Output<outputs.iot.TopicRuleIotAnalytic[] | undefined>;
    public readonly iotEvents!: pulumi.Output<outputs.iot.TopicRuleIotEvent[] | undefined>;
    public readonly kafkas!: pulumi.Output<outputs.iot.TopicRuleKafka[] | undefined>;
    public readonly kinesis!: pulumi.Output<outputs.iot.TopicRuleKinesis | undefined>;
    public readonly lambda!: pulumi.Output<outputs.iot.TopicRuleLambda | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly republish!: pulumi.Output<outputs.iot.TopicRuleRepublish | undefined>;
    public readonly s3!: pulumi.Output<outputs.iot.TopicRuleS3 | undefined>;
    public readonly sns!: pulumi.Output<outputs.iot.TopicRuleSns | undefined>;
    public readonly sql!: pulumi.Output<string>;
    public readonly sqlVersion!: pulumi.Output<string>;
    public readonly sqs!: pulumi.Output<outputs.iot.TopicRuleSqs | undefined>;
    public readonly stepFunctions!: pulumi.Output<outputs.iot.TopicRuleStepFunction[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timestreams!: pulumi.Output<outputs.iot.TopicRuleTimestream[] | undefined>;

    /**
     * Create a TopicRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicRuleArgs | TopicRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicRuleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cloudwatchAlarm"] = state ? state.cloudwatchAlarm : undefined;
            resourceInputs["cloudwatchLogs"] = state ? state.cloudwatchLogs : undefined;
            resourceInputs["cloudwatchMetric"] = state ? state.cloudwatchMetric : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamodb"] = state ? state.dynamodb : undefined;
            resourceInputs["dynamodbv2s"] = state ? state.dynamodbv2s : undefined;
            resourceInputs["elasticsearch"] = state ? state.elasticsearch : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["errorAction"] = state ? state.errorAction : undefined;
            resourceInputs["firehose"] = state ? state.firehose : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["iotAnalytics"] = state ? state.iotAnalytics : undefined;
            resourceInputs["iotEvents"] = state ? state.iotEvents : undefined;
            resourceInputs["kafkas"] = state ? state.kafkas : undefined;
            resourceInputs["kinesis"] = state ? state.kinesis : undefined;
            resourceInputs["lambda"] = state ? state.lambda : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["republish"] = state ? state.republish : undefined;
            resourceInputs["s3"] = state ? state.s3 : undefined;
            resourceInputs["sns"] = state ? state.sns : undefined;
            resourceInputs["sql"] = state ? state.sql : undefined;
            resourceInputs["sqlVersion"] = state ? state.sqlVersion : undefined;
            resourceInputs["sqs"] = state ? state.sqs : undefined;
            resourceInputs["stepFunctions"] = state ? state.stepFunctions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timestreams"] = state ? state.timestreams : undefined;
        } else {
            const args = argsOrState as TopicRuleArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.sql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sql'");
            }
            if ((!args || args.sqlVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sqlVersion'");
            }
            resourceInputs["cloudwatchAlarm"] = args ? args.cloudwatchAlarm : undefined;
            resourceInputs["cloudwatchLogs"] = args ? args.cloudwatchLogs : undefined;
            resourceInputs["cloudwatchMetric"] = args ? args.cloudwatchMetric : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamodb"] = args ? args.dynamodb : undefined;
            resourceInputs["dynamodbv2s"] = args ? args.dynamodbv2s : undefined;
            resourceInputs["elasticsearch"] = args ? args.elasticsearch : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["errorAction"] = args ? args.errorAction : undefined;
            resourceInputs["firehose"] = args ? args.firehose : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["iotAnalytics"] = args ? args.iotAnalytics : undefined;
            resourceInputs["iotEvents"] = args ? args.iotEvents : undefined;
            resourceInputs["kafkas"] = args ? args.kafkas : undefined;
            resourceInputs["kinesis"] = args ? args.kinesis : undefined;
            resourceInputs["lambda"] = args ? args.lambda : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["republish"] = args ? args.republish : undefined;
            resourceInputs["s3"] = args ? args.s3 : undefined;
            resourceInputs["sns"] = args ? args.sns : undefined;
            resourceInputs["sql"] = args ? args.sql : undefined;
            resourceInputs["sqlVersion"] = args ? args.sqlVersion : undefined;
            resourceInputs["sqs"] = args ? args.sqs : undefined;
            resourceInputs["stepFunctions"] = args ? args.stepFunctions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timestreams"] = args ? args.timestreams : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TopicRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TopicRule resources.
 */
export interface TopicRuleState {
    arn?: pulumi.Input<string>;
    cloudwatchAlarm?: pulumi.Input<inputs.iot.TopicRuleCloudwatchAlarm>;
    cloudwatchLogs?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleCloudwatchLog>[]>;
    cloudwatchMetric?: pulumi.Input<inputs.iot.TopicRuleCloudwatchMetric>;
    description?: pulumi.Input<string>;
    dynamodb?: pulumi.Input<inputs.iot.TopicRuleDynamodb>;
    dynamodbv2s?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleDynamodbv2>[]>;
    elasticsearch?: pulumi.Input<inputs.iot.TopicRuleElasticsearch>;
    enabled?: pulumi.Input<boolean>;
    errorAction?: pulumi.Input<inputs.iot.TopicRuleErrorAction>;
    firehose?: pulumi.Input<inputs.iot.TopicRuleFirehose>;
    https?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleHttp>[]>;
    iotAnalytics?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleIotAnalytic>[]>;
    iotEvents?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleIotEvent>[]>;
    kafkas?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleKafka>[]>;
    kinesis?: pulumi.Input<inputs.iot.TopicRuleKinesis>;
    lambda?: pulumi.Input<inputs.iot.TopicRuleLambda>;
    name?: pulumi.Input<string>;
    republish?: pulumi.Input<inputs.iot.TopicRuleRepublish>;
    s3?: pulumi.Input<inputs.iot.TopicRuleS3>;
    sns?: pulumi.Input<inputs.iot.TopicRuleSns>;
    sql?: pulumi.Input<string>;
    sqlVersion?: pulumi.Input<string>;
    sqs?: pulumi.Input<inputs.iot.TopicRuleSqs>;
    stepFunctions?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleStepFunction>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timestreams?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleTimestream>[]>;
}

/**
 * The set of arguments for constructing a TopicRule resource.
 */
export interface TopicRuleArgs {
    cloudwatchAlarm?: pulumi.Input<inputs.iot.TopicRuleCloudwatchAlarm>;
    cloudwatchLogs?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleCloudwatchLog>[]>;
    cloudwatchMetric?: pulumi.Input<inputs.iot.TopicRuleCloudwatchMetric>;
    description?: pulumi.Input<string>;
    dynamodb?: pulumi.Input<inputs.iot.TopicRuleDynamodb>;
    dynamodbv2s?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleDynamodbv2>[]>;
    elasticsearch?: pulumi.Input<inputs.iot.TopicRuleElasticsearch>;
    enabled: pulumi.Input<boolean>;
    errorAction?: pulumi.Input<inputs.iot.TopicRuleErrorAction>;
    firehose?: pulumi.Input<inputs.iot.TopicRuleFirehose>;
    https?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleHttp>[]>;
    iotAnalytics?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleIotAnalytic>[]>;
    iotEvents?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleIotEvent>[]>;
    kafkas?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleKafka>[]>;
    kinesis?: pulumi.Input<inputs.iot.TopicRuleKinesis>;
    lambda?: pulumi.Input<inputs.iot.TopicRuleLambda>;
    name?: pulumi.Input<string>;
    republish?: pulumi.Input<inputs.iot.TopicRuleRepublish>;
    s3?: pulumi.Input<inputs.iot.TopicRuleS3>;
    sns?: pulumi.Input<inputs.iot.TopicRuleSns>;
    sql: pulumi.Input<string>;
    sqlVersion: pulumi.Input<string>;
    sqs?: pulumi.Input<inputs.iot.TopicRuleSqs>;
    stepFunctions?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleStepFunction>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timestreams?: pulumi.Input<pulumi.Input<inputs.iot.TopicRuleTimestream>[]>;
}
