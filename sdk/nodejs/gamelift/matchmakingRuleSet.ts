// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a GameLift Matchmaking Rule Set resources.
 *
 * ## Import
 *
 * GameLift Matchmaking Rule Sets
 *
 * can be imported using the ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet example <ruleset-id>
 * ```
 */
export class MatchmakingRuleSet extends pulumi.CustomResource {
    /**
     * Get an existing MatchmakingRuleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MatchmakingRuleSetState, opts?: pulumi.CustomResourceOptions): MatchmakingRuleSet {
        return new MatchmakingRuleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet';

    /**
     * Returns true if the given object is an instance of MatchmakingRuleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MatchmakingRuleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MatchmakingRuleSet.__pulumiType;
    }

    /**
     * Rule Set ARN.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Name of the matchmaking rule set.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * JSON encoded string containing rule set data.
     */
    public readonly ruleSetBody!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a MatchmakingRuleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MatchmakingRuleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MatchmakingRuleSetArgs | MatchmakingRuleSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MatchmakingRuleSetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleSetBody"] = state ? state.ruleSetBody : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as MatchmakingRuleSetArgs | undefined;
            if ((!args || args.ruleSetBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleSetBody'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleSetBody"] = args ? args.ruleSetBody : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MatchmakingRuleSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MatchmakingRuleSet resources.
 */
export interface MatchmakingRuleSetState {
    /**
     * Rule Set ARN.
     */
    arn?: pulumi.Input<string>;
    /**
     * Name of the matchmaking rule set.
     */
    name?: pulumi.Input<string>;
    /**
     * JSON encoded string containing rule set data.
     */
    ruleSetBody?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a MatchmakingRuleSet resource.
 */
export interface MatchmakingRuleSetArgs {
    /**
     * Name of the matchmaking rule set.
     */
    name?: pulumi.Input<string>;
    /**
     * JSON encoded string containing rule set data.
     */
    ruleSetBody: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
