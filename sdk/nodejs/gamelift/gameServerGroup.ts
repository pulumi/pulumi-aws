// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides an GameLift Game Server Group resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.gamelift.GameServerGroup("example", {
 *     gameServerGroupName: "example",
 *     instanceDefinitions: [
 *         {
 *             instanceType: "c5.large",
 *         },
 *         {
 *             instanceType: "c5a.large",
 *         },
 *     ],
 *     launchTemplate: {
 *         id: aws_launch_template.example.id,
 *     },
 *     maxSize: 1,
 *     minSize: 1,
 *     roleArn: aws_iam_role.example.arn,
 * }, {
 *     dependsOn: [aws_iam_role_policy_attachment.example],
 * });
 * ```
 *
 * Full usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.gamelift.GameServerGroup("example", {
 *     autoScalingPolicy: {
 *         estimatedInstanceWarmup: 60,
 *         targetTrackingConfiguration: {
 *             targetValue: 75,
 *         },
 *     },
 *     balancingStrategy: "SPOT_ONLY",
 *     gameServerGroupName: "example",
 *     gameServerProtectionPolicy: "FULL_PROTECTION",
 *     instanceDefinitions: [
 *         {
 *             instanceType: "c5.large",
 *             weightedCapacity: "1",
 *         },
 *         {
 *             instanceType: "c5.2xlarge",
 *             weightedCapacity: "2",
 *         },
 *     ],
 *     launchTemplate: {
 *         id: aws_launch_template.example.id,
 *         version: "1",
 *     },
 *     maxSize: 1,
 *     minSize: 1,
 *     roleArn: aws_iam_role.example.arn,
 *     tags: {
 *         Name: "example",
 *     },
 *     vpcSubnets: [
 *         "subnet-12345678",
 *         "subnet-23456789",
 *     ],
 * }, {
 *     dependsOn: [aws_iam_role_policy_attachment.example],
 * });
 * ```
 * ### Example IAM Role for GameLift Game Server Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getPartition({});
 * const exampleRole = new aws.iam.Role("exampleRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": [
 *           "autoscaling.amazonaws.com",
 *           "gamelift.amazonaws.com"
 *         ]
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * const exampleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("exampleRolePolicyAttachment", {
 *     policyArn: current.then(current => `arn:${current.partition}:iam::aws:policy/GameLiftGameServerGroupPolicy`),
 *     role: exampleRole.name,
 * });
 * ```
 *
 * ## Import
 *
 * GameLift Game Server Group can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:gamelift/gameServerGroup:GameServerGroup example example
 * ```
 */
export class GameServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing GameServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GameServerGroupState, opts?: pulumi.CustomResourceOptions): GameServerGroup {
        return new GameServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:gamelift/gameServerGroup:GameServerGroup';

    /**
     * Returns true if the given object is an instance of GameServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GameServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GameServerGroup.__pulumiType;
    }

    /**
     * The ARN of the GameLift Game Server Group.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ARN of the created EC2 Auto Scaling group.
     */
    public /*out*/ readonly autoScalingGroupArn!: pulumi.Output<string>;
    public readonly autoScalingPolicy!: pulumi.Output<outputs.gamelift.GameServerGroupAutoScalingPolicy | undefined>;
    /**
     * Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
     * Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
     */
    public readonly balancingStrategy!: pulumi.Output<string>;
    /**
     * Name of the game server group.
     * This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
     */
    public readonly gameServerGroupName!: pulumi.Output<string>;
    /**
     * Indicates whether instances in the game server group are protected from early termination.
     * Unprotected instances that have active game servers running might be terminated during a scale-down event,
     * causing players to be dropped from the game.
     * Protected instances cannot be terminated while there are active game servers running except in the event
     * of a forced game server group deletion.
     * Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
     */
    public readonly gameServerProtectionPolicy!: pulumi.Output<string>;
    public readonly instanceDefinitions!: pulumi.Output<outputs.gamelift.GameServerGroupInstanceDefinition[]>;
    public readonly launchTemplate!: pulumi.Output<outputs.gamelift.GameServerGroupLaunchTemplate>;
    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group.
     * During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group.
     * During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * A list of VPC subnets to use with instances in the game server group.
     * By default, all GameLift FleetIQ-supported Availability Zones are used.
     */
    public readonly vpcSubnets!: pulumi.Output<string[] | undefined>;

    /**
     * Create a GameServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GameServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GameServerGroupArgs | GameServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GameServerGroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoScalingGroupArn"] = state ? state.autoScalingGroupArn : undefined;
            resourceInputs["autoScalingPolicy"] = state ? state.autoScalingPolicy : undefined;
            resourceInputs["balancingStrategy"] = state ? state.balancingStrategy : undefined;
            resourceInputs["gameServerGroupName"] = state ? state.gameServerGroupName : undefined;
            resourceInputs["gameServerProtectionPolicy"] = state ? state.gameServerProtectionPolicy : undefined;
            resourceInputs["instanceDefinitions"] = state ? state.instanceDefinitions : undefined;
            resourceInputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcSubnets"] = state ? state.vpcSubnets : undefined;
        } else {
            const args = argsOrState as GameServerGroupArgs | undefined;
            if ((!args || args.gameServerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gameServerGroupName'");
            }
            if ((!args || args.instanceDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceDefinitions'");
            }
            if ((!args || args.launchTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchTemplate'");
            }
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["autoScalingPolicy"] = args ? args.autoScalingPolicy : undefined;
            resourceInputs["balancingStrategy"] = args ? args.balancingStrategy : undefined;
            resourceInputs["gameServerGroupName"] = args ? args.gameServerGroupName : undefined;
            resourceInputs["gameServerProtectionPolicy"] = args ? args.gameServerProtectionPolicy : undefined;
            resourceInputs["instanceDefinitions"] = args ? args.instanceDefinitions : undefined;
            resourceInputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["vpcSubnets"] = args ? args.vpcSubnets : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["autoScalingGroupArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GameServerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GameServerGroup resources.
 */
export interface GameServerGroupState {
    /**
     * The ARN of the GameLift Game Server Group.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ARN of the created EC2 Auto Scaling group.
     */
    autoScalingGroupArn?: pulumi.Input<string>;
    autoScalingPolicy?: pulumi.Input<inputs.gamelift.GameServerGroupAutoScalingPolicy>;
    /**
     * Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
     * Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
     */
    balancingStrategy?: pulumi.Input<string>;
    /**
     * Name of the game server group.
     * This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
     */
    gameServerGroupName?: pulumi.Input<string>;
    /**
     * Indicates whether instances in the game server group are protected from early termination.
     * Unprotected instances that have active game servers running might be terminated during a scale-down event,
     * causing players to be dropped from the game.
     * Protected instances cannot be terminated while there are active game servers running except in the event
     * of a forced game server group deletion.
     * Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
     */
    gameServerProtectionPolicy?: pulumi.Input<string>;
    instanceDefinitions?: pulumi.Input<pulumi.Input<inputs.gamelift.GameServerGroupInstanceDefinition>[]>;
    launchTemplate?: pulumi.Input<inputs.gamelift.GameServerGroupLaunchTemplate>;
    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group.
     * During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group.
     * During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
     */
    minSize?: pulumi.Input<number>;
    /**
     * ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of VPC subnets to use with instances in the game server group.
     * By default, all GameLift FleetIQ-supported Availability Zones are used.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GameServerGroup resource.
 */
export interface GameServerGroupArgs {
    autoScalingPolicy?: pulumi.Input<inputs.gamelift.GameServerGroupAutoScalingPolicy>;
    /**
     * Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
     * Valid values: `SPOT_ONLY`, `SPOT_PREFERRED`, `ON_DEMAND_ONLY`. Defaults to `SPOT_PREFERRED`.
     */
    balancingStrategy?: pulumi.Input<string>;
    /**
     * Name of the game server group.
     * This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group.
     */
    gameServerGroupName: pulumi.Input<string>;
    /**
     * Indicates whether instances in the game server group are protected from early termination.
     * Unprotected instances that have active game servers running might be terminated during a scale-down event,
     * causing players to be dropped from the game.
     * Protected instances cannot be terminated while there are active game servers running except in the event
     * of a forced game server group deletion.
     * Valid values: `NO_PROTECTION`, `FULL_PROTECTION`. Defaults to `NO_PROTECTION`.
     */
    gameServerProtectionPolicy?: pulumi.Input<string>;
    instanceDefinitions: pulumi.Input<pulumi.Input<inputs.gamelift.GameServerGroupInstanceDefinition>[]>;
    launchTemplate: pulumi.Input<inputs.gamelift.GameServerGroupLaunchTemplate>;
    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group.
     * During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
     */
    maxSize: pulumi.Input<number>;
    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group.
     * During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
     */
    minSize: pulumi.Input<number>;
    /**
     * ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     */
    roleArn: pulumi.Input<string>;
    /**
     * Key-value map of resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of VPC subnets to use with instances in the game server group.
     * By default, all GameLift FleetIQ-supported Availability Zones are used.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}
