// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides an GameLift Script resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.gamelift.Script("example", {storageLocation: {
 *     bucket: aws_s3_bucket.example.bucket,
 *     key: aws_s3_object.example.key,
 *     roleArn: aws_iam_role.example.arn,
 * }});
 * ```
 *
 * ## Import
 *
 * GameLift Scripts can be imported using the ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:gamelift/script:Script example <script-id>
 * ```
 */
export class Script extends pulumi.CustomResource {
    /**
     * Get an existing Script resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScriptState, opts?: pulumi.CustomResourceOptions): Script {
        return new Script(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:gamelift/script:Script';

    /**
     * Returns true if the given object is an instance of Script.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Script {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Script.__pulumiType;
    }

    /**
     * GameLift Script ARN.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Name of the script
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Information indicating where your game script files are stored. See below.
     */
    public readonly storageLocation!: pulumi.Output<outputs.gamelift.ScriptStorageLocation>;
    /**
     * Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Version that is associated with this script.
     */
    public readonly version!: pulumi.Output<string | undefined>;
    /**
     * A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
     */
    public readonly zipFile!: pulumi.Output<string | undefined>;

    /**
     * Create a Script resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScriptArgs | ScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScriptState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["storageLocation"] = state ? state.storageLocation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["zipFile"] = state ? state.zipFile : undefined;
        } else {
            const args = argsOrState as ScriptArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["storageLocation"] = args ? args.storageLocation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["zipFile"] = args ? args.zipFile : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Script.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Script resources.
 */
export interface ScriptState {
    /**
     * GameLift Script ARN.
     */
    arn?: pulumi.Input<string>;
    /**
     * Name of the script
     */
    name?: pulumi.Input<string>;
    /**
     * Information indicating where your game script files are stored. See below.
     */
    storageLocation?: pulumi.Input<inputs.gamelift.ScriptStorageLocation>;
    /**
     * Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Version that is associated with this script.
     */
    version?: pulumi.Input<string>;
    /**
     * A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
     */
    zipFile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Script resource.
 */
export interface ScriptArgs {
    /**
     * Name of the script
     */
    name?: pulumi.Input<string>;
    /**
     * Information indicating where your game script files are stored. See below.
     */
    storageLocation?: pulumi.Input<inputs.gamelift.ScriptStorageLocation>;
    /**
     * Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Version that is associated with this script.
     */
    version?: pulumi.Input<string>;
    /**
     * A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
     */
    zipFile?: pulumi.Input<string>;
}
