// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FleetState, opts?: pulumi.CustomResourceOptions): Fleet {
        return new Fleet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:gamelift/fleet:Fleet';

    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fleet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fleet.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly buildArn!: pulumi.Output<string>;
    public readonly buildId!: pulumi.Output<string | undefined>;
    public readonly certificateConfiguration!: pulumi.Output<outputs.gamelift.FleetCertificateConfiguration>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ec2InboundPermissions!: pulumi.Output<outputs.gamelift.FleetEc2InboundPermission[]>;
    public readonly ec2InstanceType!: pulumi.Output<string>;
    public readonly fleetType!: pulumi.Output<string | undefined>;
    public readonly instanceRoleArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly logPaths!: pulumi.Output<string[]>;
    public readonly metricGroups!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly newGameSessionProtectionPolicy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly operatingSystem!: pulumi.Output<string>;
    public readonly resourceCreationLimitPolicy!: pulumi.Output<outputs.gamelift.FleetResourceCreationLimitPolicy | undefined>;
    public readonly runtimeConfiguration!: pulumi.Output<outputs.gamelift.FleetRuntimeConfiguration | undefined>;
    public /*out*/ readonly scriptArn!: pulumi.Output<string>;
    public readonly scriptId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FleetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FleetArgs | FleetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FleetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["buildArn"] = state ? state.buildArn : undefined;
            resourceInputs["buildId"] = state ? state.buildId : undefined;
            resourceInputs["certificateConfiguration"] = state ? state.certificateConfiguration : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ec2InboundPermissions"] = state ? state.ec2InboundPermissions : undefined;
            resourceInputs["ec2InstanceType"] = state ? state.ec2InstanceType : undefined;
            resourceInputs["fleetType"] = state ? state.fleetType : undefined;
            resourceInputs["instanceRoleArn"] = state ? state.instanceRoleArn : undefined;
            resourceInputs["logPaths"] = state ? state.logPaths : undefined;
            resourceInputs["metricGroups"] = state ? state.metricGroups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newGameSessionProtectionPolicy"] = state ? state.newGameSessionProtectionPolicy : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["resourceCreationLimitPolicy"] = state ? state.resourceCreationLimitPolicy : undefined;
            resourceInputs["runtimeConfiguration"] = state ? state.runtimeConfiguration : undefined;
            resourceInputs["scriptArn"] = state ? state.scriptArn : undefined;
            resourceInputs["scriptId"] = state ? state.scriptId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as FleetArgs | undefined;
            if ((!args || args.ec2InstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ec2InstanceType'");
            }
            resourceInputs["buildId"] = args ? args.buildId : undefined;
            resourceInputs["certificateConfiguration"] = args ? args.certificateConfiguration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ec2InboundPermissions"] = args ? args.ec2InboundPermissions : undefined;
            resourceInputs["ec2InstanceType"] = args ? args.ec2InstanceType : undefined;
            resourceInputs["fleetType"] = args ? args.fleetType : undefined;
            resourceInputs["instanceRoleArn"] = args ? args.instanceRoleArn : undefined;
            resourceInputs["metricGroups"] = args ? args.metricGroups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newGameSessionProtectionPolicy"] = args ? args.newGameSessionProtectionPolicy : undefined;
            resourceInputs["resourceCreationLimitPolicy"] = args ? args.resourceCreationLimitPolicy : undefined;
            resourceInputs["runtimeConfiguration"] = args ? args.runtimeConfiguration : undefined;
            resourceInputs["scriptId"] = args ? args.scriptId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["buildArn"] = undefined /*out*/;
            resourceInputs["logPaths"] = undefined /*out*/;
            resourceInputs["operatingSystem"] = undefined /*out*/;
            resourceInputs["scriptArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fleet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Fleet resources.
 */
export interface FleetState {
    arn?: pulumi.Input<string>;
    buildArn?: pulumi.Input<string>;
    buildId?: pulumi.Input<string>;
    certificateConfiguration?: pulumi.Input<inputs.gamelift.FleetCertificateConfiguration>;
    description?: pulumi.Input<string>;
    ec2InboundPermissions?: pulumi.Input<pulumi.Input<inputs.gamelift.FleetEc2InboundPermission>[]>;
    ec2InstanceType?: pulumi.Input<string>;
    fleetType?: pulumi.Input<string>;
    instanceRoleArn?: pulumi.Input<string>;
    logPaths?: pulumi.Input<pulumi.Input<string>[]>;
    metricGroups?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    newGameSessionProtectionPolicy?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    resourceCreationLimitPolicy?: pulumi.Input<inputs.gamelift.FleetResourceCreationLimitPolicy>;
    runtimeConfiguration?: pulumi.Input<inputs.gamelift.FleetRuntimeConfiguration>;
    scriptArn?: pulumi.Input<string>;
    scriptId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Fleet resource.
 */
export interface FleetArgs {
    buildId?: pulumi.Input<string>;
    certificateConfiguration?: pulumi.Input<inputs.gamelift.FleetCertificateConfiguration>;
    description?: pulumi.Input<string>;
    ec2InboundPermissions?: pulumi.Input<pulumi.Input<inputs.gamelift.FleetEc2InboundPermission>[]>;
    ec2InstanceType: pulumi.Input<string>;
    fleetType?: pulumi.Input<string>;
    instanceRoleArn?: pulumi.Input<string>;
    metricGroups?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    newGameSessionProtectionPolicy?: pulumi.Input<string>;
    resourceCreationLimitPolicy?: pulumi.Input<inputs.gamelift.FleetResourceCreationLimitPolicy>;
    runtimeConfiguration?: pulumi.Input<inputs.gamelift.FleetRuntimeConfiguration>;
    scriptId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
