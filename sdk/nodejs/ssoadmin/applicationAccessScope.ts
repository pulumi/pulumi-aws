// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS SSO Admin Application Access Scope.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import SSO Admin Application Access Scope using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:ssoadmin/applicationAccessScope:ApplicationAccessScope example arn:aws:sso::012345678901:application/ssoins-012345678901/apl-012345678901,sso:account:access
 * ```
 */
export class ApplicationAccessScope extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationAccessScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationAccessScopeState, opts?: pulumi.CustomResourceOptions): ApplicationAccessScope {
        return new ApplicationAccessScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ssoadmin/applicationAccessScope:ApplicationAccessScope';

    /**
     * Returns true if the given object is an instance of ApplicationAccessScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationAccessScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationAccessScope.__pulumiType;
    }

    /**
     * Specifies the ARN of the application with the access scope with the targets to add or update.
     */
    public readonly applicationArn!: pulumi.Output<string>;
    /**
     * Specifies an array list of ARNs that represent the authorized targets for this access scope.
     */
    public readonly authorizedTargets!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the name of the access scope to be associated with the specified targets.
     *
     * The following arguments are optional:
     */
    public readonly scope!: pulumi.Output<string>;

    /**
     * Create a ApplicationAccessScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationAccessScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationAccessScopeArgs | ApplicationAccessScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationAccessScopeState | undefined;
            resourceInputs["applicationArn"] = state ? state.applicationArn : undefined;
            resourceInputs["authorizedTargets"] = state ? state.authorizedTargets : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as ApplicationAccessScopeArgs | undefined;
            if ((!args || args.applicationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationArn'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["applicationArn"] = args ? args.applicationArn : undefined;
            resourceInputs["authorizedTargets"] = args ? args.authorizedTargets : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationAccessScope.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationAccessScope resources.
 */
export interface ApplicationAccessScopeState {
    /**
     * Specifies the ARN of the application with the access scope with the targets to add or update.
     */
    applicationArn?: pulumi.Input<string>;
    /**
     * Specifies an array list of ARNs that represent the authorized targets for this access scope.
     */
    authorizedTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the access scope to be associated with the specified targets.
     *
     * The following arguments are optional:
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationAccessScope resource.
 */
export interface ApplicationAccessScopeArgs {
    /**
     * Specifies the ARN of the application with the access scope with the targets to add or update.
     */
    applicationArn: pulumi.Input<string>;
    /**
     * Specifies an array list of ARNs that represent the authorized targets for this access scope.
     */
    authorizedTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the access scope to be associated with the specified targets.
     *
     * The following arguments are optional:
     */
    scope: pulumi.Input<string>;
}
