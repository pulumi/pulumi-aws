// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Single Sign-On (SSO) Account Assignment resource
 *
 * ## Import
 *
 * SSO Account Assignments can be imported using the `principal_id`, `principal_type`, `target_id`, `target_type`, `permission_set_arn`, `instance_arn` separated by commas (`,`) e.g.
 *
 * ```sh
 *  $ pulumi import aws:ssoadmin/accountAssignment:AccountAssignment example f81d4fae-7dec-11d0-a765-00a0c91e6bf6,GROUP,1234567890,AWS_ACCOUNT,arn:aws:sso:::permissionSet/ssoins-0123456789abcdef/ps-0123456789abcdef,arn:aws:sso:::instance/ssoins-0123456789abcdef
 * ```
 */
export class AccountAssignment extends pulumi.CustomResource {
    /**
     * Get an existing AccountAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountAssignmentState, opts?: pulumi.CustomResourceOptions): AccountAssignment {
        return new AccountAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ssoadmin/accountAssignment:AccountAssignment';

    /**
     * Returns true if the given object is an instance of AccountAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountAssignment.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the SSO Instance.
     */
    public readonly instanceArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
     */
    public readonly permissionSetArn!: pulumi.Output<string>;
    /**
     * An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
     */
    public readonly principalId!: pulumi.Output<string>;
    /**
     * The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
     */
    public readonly principalType!: pulumi.Output<string>;
    /**
     * An AWS account identifier, typically a 10-12 digit string.
     */
    public readonly targetId!: pulumi.Output<string>;
    /**
     * The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
     */
    public readonly targetType!: pulumi.Output<string | undefined>;

    /**
     * Create a AccountAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountAssignmentArgs | AccountAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountAssignmentState | undefined;
            inputs["instanceArn"] = state ? state.instanceArn : undefined;
            inputs["permissionSetArn"] = state ? state.permissionSetArn : undefined;
            inputs["principalId"] = state ? state.principalId : undefined;
            inputs["principalType"] = state ? state.principalType : undefined;
            inputs["targetId"] = state ? state.targetId : undefined;
            inputs["targetType"] = state ? state.targetType : undefined;
        } else {
            const args = argsOrState as AccountAssignmentArgs | undefined;
            if ((!args || args.instanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceArn'");
            }
            if ((!args || args.permissionSetArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionSetArn'");
            }
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.principalType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalType'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            inputs["instanceArn"] = args ? args.instanceArn : undefined;
            inputs["permissionSetArn"] = args ? args.permissionSetArn : undefined;
            inputs["principalId"] = args ? args.principalId : undefined;
            inputs["principalType"] = args ? args.principalType : undefined;
            inputs["targetId"] = args ? args.targetId : undefined;
            inputs["targetType"] = args ? args.targetType : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AccountAssignment.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountAssignment resources.
 */
export interface AccountAssignmentState {
    /**
     * The Amazon Resource Name (ARN) of the SSO Instance.
     */
    readonly instanceArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
     */
    readonly permissionSetArn?: pulumi.Input<string>;
    /**
     * An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
     */
    readonly principalId?: pulumi.Input<string>;
    /**
     * The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
     */
    readonly principalType?: pulumi.Input<string>;
    /**
     * An AWS account identifier, typically a 10-12 digit string.
     */
    readonly targetId?: pulumi.Input<string>;
    /**
     * The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
     */
    readonly targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountAssignment resource.
 */
export interface AccountAssignmentArgs {
    /**
     * The Amazon Resource Name (ARN) of the SSO Instance.
     */
    readonly instanceArn: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
     */
    readonly permissionSetArn: pulumi.Input<string>;
    /**
     * An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
     */
    readonly principalId: pulumi.Input<string>;
    /**
     * The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
     */
    readonly principalType: pulumi.Input<string>;
    /**
     * An AWS account identifier, typically a 10-12 digit string.
     */
    readonly targetId: pulumi.Input<string>;
    /**
     * The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
     */
    readonly targetType?: pulumi.Input<string>;
}
