// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Resilience Hub Resiliency Policy.
 *
 * ## Import
 *
 * Using `pulumi import`, import Resilience Hub Resiliency Policy using the `arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy example arn:aws:resiliencehub:us-east-1:123456789012:resiliency-policy/8c1cfa29-d1dd-4421-aa68-c9f64cced4c2
 * ```
 */
export class ResiliencyPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ResiliencyPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResiliencyPolicyState, opts?: pulumi.CustomResourceOptions): ResiliencyPolicy {
        return new ResiliencyPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy';

    /**
     * Returns true if the given object is an instance of ResiliencyPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResiliencyPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResiliencyPolicy.__pulumiType;
    }

    /**
     * ARN of the Resiliency Policy.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Data Location Constraint of the Policy.
     * Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
     */
    public readonly dataLocationConstraint!: pulumi.Output<string>;
    /**
     * Description of Resiliency Policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Estimated Cost Tier of the Resiliency Policy.
     */
    public /*out*/ readonly estimatedCostTier!: pulumi.Output<string>;
    /**
     * Name of Resiliency Policy.
     * Must be between 2 and 60 characters long.
     * Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
     *
     * The following arguments are optional:
     */
    public readonly policy!: pulumi.Output<outputs.resiliencehub.ResiliencyPolicyPolicy | undefined>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Resiliency Policy Tier.
     * Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
     */
    public readonly tier!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.resiliencehub.ResiliencyPolicyTimeouts | undefined>;

    /**
     * Create a ResiliencyPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResiliencyPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResiliencyPolicyArgs | ResiliencyPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResiliencyPolicyState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dataLocationConstraint"] = state ? state.dataLocationConstraint : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["estimatedCostTier"] = state ? state.estimatedCostTier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ResiliencyPolicyArgs | undefined;
            if ((!args || args.tier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tier'");
            }
            resourceInputs["dataLocationConstraint"] = args ? args.dataLocationConstraint : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["estimatedCostTier"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResiliencyPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResiliencyPolicy resources.
 */
export interface ResiliencyPolicyState {
    /**
     * ARN of the Resiliency Policy.
     */
    arn?: pulumi.Input<string>;
    /**
     * Data Location Constraint of the Policy.
     * Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
     */
    dataLocationConstraint?: pulumi.Input<string>;
    /**
     * Description of Resiliency Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Estimated Cost Tier of the Resiliency Policy.
     */
    estimatedCostTier?: pulumi.Input<string>;
    /**
     * Name of Resiliency Policy.
     * Must be between 2 and 60 characters long.
     * Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
     *
     * The following arguments are optional:
     */
    policy?: pulumi.Input<inputs.resiliencehub.ResiliencyPolicyPolicy>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resiliency Policy Tier.
     * Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
     */
    tier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.resiliencehub.ResiliencyPolicyTimeouts>;
}

/**
 * The set of arguments for constructing a ResiliencyPolicy resource.
 */
export interface ResiliencyPolicyArgs {
    /**
     * Data Location Constraint of the Policy.
     * Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
     */
    dataLocationConstraint?: pulumi.Input<string>;
    /**
     * Description of Resiliency Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of Resiliency Policy.
     * Must be between 2 and 60 characters long.
     * Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
     *
     * The following arguments are optional:
     */
    policy?: pulumi.Input<inputs.resiliencehub.ResiliencyPolicyPolicy>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resiliency Policy Tier.
     * Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
     */
    tier: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.resiliencehub.ResiliencyPolicyTimeouts>;
}
