// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Lex V2 Models Bot.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lex.V2modelsBot("example", {
 *     dataPrivacies: [{
 *         childDirected: "boolean",
 *     }],
 *     idleSessionTtlInSeconds: 10,
 *     roleArn: "bot_example_arn",
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Lex V2 Models Bot using the `id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:lex/v2modelsBot:V2modelsBot example bot-id-12345678
 * ```
 */
export class V2modelsBot extends pulumi.CustomResource {
    /**
     * Get an existing V2modelsBot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2modelsBotState, opts?: pulumi.CustomResourceOptions): V2modelsBot {
        return new V2modelsBot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lex/v2modelsBot:V2modelsBot';

    /**
     * Returns true if the given object is an instance of V2modelsBot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V2modelsBot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V2modelsBot.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
     */
    public readonly dataPrivacies!: pulumi.Output<outputs.lex.V2modelsBotDataPrivacy[] | undefined>;
    /**
     * Description of the bot. It appears in lists to help you identify a particular bot.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
     */
    public readonly idleSessionTtlInSeconds!: pulumi.Output<number>;
    /**
     * List of bot members in a network to be created. See `botMembers`.
     */
    public readonly members!: pulumi.Output<outputs.lex.V2modelsBotMember[] | undefined>;
    /**
     * Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ARN of an IAM role that has permission to access the bot.
     *
     * The following arguments are optional:
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * List of tags to add to the bot. You can only add tags when you create a bot.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
     */
    public readonly testBotAliasTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.lex.V2modelsBotTimeouts | undefined>;
    /**
     * Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a V2modelsBot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2modelsBotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V2modelsBotArgs | V2modelsBotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V2modelsBotState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dataPrivacies"] = state ? state.dataPrivacies : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["idleSessionTtlInSeconds"] = state ? state.idleSessionTtlInSeconds : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["testBotAliasTags"] = state ? state.testBotAliasTags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as V2modelsBotArgs | undefined;
            if ((!args || args.idleSessionTtlInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idleSessionTtlInSeconds'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["dataPrivacies"] = args ? args.dataPrivacies : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["idleSessionTtlInSeconds"] = args ? args.idleSessionTtlInSeconds : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["testBotAliasTags"] = args ? args.testBotAliasTags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(V2modelsBot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V2modelsBot resources.
 */
export interface V2modelsBotState {
    arn?: pulumi.Input<string>;
    /**
     * Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
     */
    dataPrivacies?: pulumi.Input<pulumi.Input<inputs.lex.V2modelsBotDataPrivacy>[]>;
    /**
     * Description of the bot. It appears in lists to help you identify a particular bot.
     */
    description?: pulumi.Input<string>;
    /**
     * Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
     */
    idleSessionTtlInSeconds?: pulumi.Input<number>;
    /**
     * List of bot members in a network to be created. See `botMembers`.
     */
    members?: pulumi.Input<pulumi.Input<inputs.lex.V2modelsBotMember>[]>;
    /**
     * Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
     */
    name?: pulumi.Input<string>;
    /**
     * ARN of an IAM role that has permission to access the bot.
     *
     * The following arguments are optional:
     */
    roleArn?: pulumi.Input<string>;
    /**
     * List of tags to add to the bot. You can only add tags when you create a bot.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
     */
    testBotAliasTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.lex.V2modelsBotTimeouts>;
    /**
     * Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a V2modelsBot resource.
 */
export interface V2modelsBotArgs {
    /**
     * Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
     */
    dataPrivacies?: pulumi.Input<pulumi.Input<inputs.lex.V2modelsBotDataPrivacy>[]>;
    /**
     * Description of the bot. It appears in lists to help you identify a particular bot.
     */
    description?: pulumi.Input<string>;
    /**
     * Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
     */
    idleSessionTtlInSeconds: pulumi.Input<number>;
    /**
     * List of bot members in a network to be created. See `botMembers`.
     */
    members?: pulumi.Input<pulumi.Input<inputs.lex.V2modelsBotMember>[]>;
    /**
     * Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
     */
    name?: pulumi.Input<string>;
    /**
     * ARN of an IAM role that has permission to access the bot.
     *
     * The following arguments are optional:
     */
    roleArn: pulumi.Input<string>;
    /**
     * List of tags to add to the bot. You can only add tags when you create a bot.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
     */
    testBotAliasTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.lex.V2modelsBotTimeouts>;
    /**
     * Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
     */
    type?: pulumi.Input<string>;
}
