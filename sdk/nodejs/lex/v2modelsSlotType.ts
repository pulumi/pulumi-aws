// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Lex V2 Models Slot Type.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.iam.RolePolicyAttachment("test", {
 *     role: testAwsIamRole.name,
 *     policyArn: `arn:${current.partition}:iam::aws:policy/AmazonLexFullAccess`,
 * });
 * const testV2modelsBot = new aws.lex.V2modelsBot("test", {
 *     name: "testbot",
 *     idleSessionTtlInSeconds: 60,
 *     roleArn: testAwsIamRole.arn,
 *     dataPrivacies: [{
 *         childDirected: true,
 *     }],
 * });
 * const testV2modelsBotLocale = new aws.lex.V2modelsBotLocale("test", {
 *     localeId: "en_US",
 *     botId: testV2modelsBot.id,
 *     botVersion: "DRAFT",
 *     nLuIntentConfidenceThreshold: 0.7,
 * });
 * const testV2modelsBotVersion = new aws.lex.V2modelsBotVersion("test", {
 *     botId: testV2modelsBot.id,
 *     localeSpecification: testV2modelsBotLocale.localeId.apply(localeId => {
 *         [localeId]: {
 *             sourceBotVersion: "DRAFT",
 *         },
 *     }),
 * });
 * const testV2modelsSlotType = new aws.lex.V2modelsSlotType("test", {
 *     botId: testV2modelsBot.id,
 *     botVersion: testV2modelsBotLocale.botVersion,
 *     name: "test",
 *     localeId: testV2modelsBotLocale.localeId,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import Lex V2 Models Slot Type using the `example_id_arg`. For example:
 *
 * ```sh
 * $ pulumi import aws:lex/v2modelsSlotType:V2modelsSlotType example bot-1234,DRAFT,en_US,slot_type-id-12345678
 * ```
 */
export class V2modelsSlotType extends pulumi.CustomResource {
    /**
     * Get an existing V2modelsSlotType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2modelsSlotTypeState, opts?: pulumi.CustomResourceOptions): V2modelsSlotType {
        return new V2modelsSlotType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lex/v2modelsSlotType:V2modelsSlotType';

    /**
     * Returns true if the given object is an instance of V2modelsSlotType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V2modelsSlotType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V2modelsSlotType.__pulumiType;
    }

    /**
     * Identifier of the bot associated with this slot type.
     */
    public readonly botId!: pulumi.Output<string>;
    /**
     * Version of the bot associated with this slot type.
     */
    public readonly botVersion!: pulumi.Output<string>;
    /**
     * Specifications for a composite slot type. See `compositeSlotTypeSetting` argument reference below.
     */
    public readonly compositeSlotTypeSetting!: pulumi.Output<outputs.lex.V2modelsSlotTypeCompositeSlotTypeSetting | undefined>;
    /**
     * Description of the slot type.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Type of external information used to create the slot type. See `externalSourceSetting` argument reference below.
     */
    public readonly externalSourceSetting!: pulumi.Output<outputs.lex.V2modelsSlotTypeExternalSourceSetting | undefined>;
    /**
     * Identifier of the language and locale where this slot type is used. All of the bots, slot types, and slots used by the intent must have the same locale.
     */
    public readonly localeId!: pulumi.Output<string>;
    /**
     * Name of the slot type
     *
     * The following arguments are optional:
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type. Only AMAZON.AlphaNumeric is supported.
     */
    public readonly parentSlotTypeSignature!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.
     */
    public /*out*/ readonly slotTypeId!: pulumi.Output<string>;
    /**
     * List of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot. See `slotTypeValues` argument reference below.
     */
    public readonly slotTypeValues!: pulumi.Output<outputs.lex.V2modelsSlotTypeSlotTypeValues | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.lex.V2modelsSlotTypeTimeouts | undefined>;
    /**
     * Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values: `ORIGINAL_VALUE` returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` if there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null. If you don't specify the valueSelectionSetting parameter, the default is ORIGINAL_VALUE. See `valueSelectionSetting` argument reference below.
     */
    public readonly valueSelectionSetting!: pulumi.Output<outputs.lex.V2modelsSlotTypeValueSelectionSetting | undefined>;

    /**
     * Create a V2modelsSlotType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2modelsSlotTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V2modelsSlotTypeArgs | V2modelsSlotTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V2modelsSlotTypeState | undefined;
            resourceInputs["botId"] = state ? state.botId : undefined;
            resourceInputs["botVersion"] = state ? state.botVersion : undefined;
            resourceInputs["compositeSlotTypeSetting"] = state ? state.compositeSlotTypeSetting : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalSourceSetting"] = state ? state.externalSourceSetting : undefined;
            resourceInputs["localeId"] = state ? state.localeId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentSlotTypeSignature"] = state ? state.parentSlotTypeSignature : undefined;
            resourceInputs["slotTypeId"] = state ? state.slotTypeId : undefined;
            resourceInputs["slotTypeValues"] = state ? state.slotTypeValues : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valueSelectionSetting"] = state ? state.valueSelectionSetting : undefined;
        } else {
            const args = argsOrState as V2modelsSlotTypeArgs | undefined;
            if ((!args || args.botId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botId'");
            }
            if ((!args || args.botVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botVersion'");
            }
            if ((!args || args.localeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localeId'");
            }
            resourceInputs["botId"] = args ? args.botId : undefined;
            resourceInputs["botVersion"] = args ? args.botVersion : undefined;
            resourceInputs["compositeSlotTypeSetting"] = args ? args.compositeSlotTypeSetting : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalSourceSetting"] = args ? args.externalSourceSetting : undefined;
            resourceInputs["localeId"] = args ? args.localeId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentSlotTypeSignature"] = args ? args.parentSlotTypeSignature : undefined;
            resourceInputs["slotTypeValues"] = args ? args.slotTypeValues : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["valueSelectionSetting"] = args ? args.valueSelectionSetting : undefined;
            resourceInputs["slotTypeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V2modelsSlotType.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V2modelsSlotType resources.
 */
export interface V2modelsSlotTypeState {
    /**
     * Identifier of the bot associated with this slot type.
     */
    botId?: pulumi.Input<string>;
    /**
     * Version of the bot associated with this slot type.
     */
    botVersion?: pulumi.Input<string>;
    /**
     * Specifications for a composite slot type. See `compositeSlotTypeSetting` argument reference below.
     */
    compositeSlotTypeSetting?: pulumi.Input<inputs.lex.V2modelsSlotTypeCompositeSlotTypeSetting>;
    /**
     * Description of the slot type.
     */
    description?: pulumi.Input<string>;
    /**
     * Type of external information used to create the slot type. See `externalSourceSetting` argument reference below.
     */
    externalSourceSetting?: pulumi.Input<inputs.lex.V2modelsSlotTypeExternalSourceSetting>;
    /**
     * Identifier of the language and locale where this slot type is used. All of the bots, slot types, and slots used by the intent must have the same locale.
     */
    localeId?: pulumi.Input<string>;
    /**
     * Name of the slot type
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type. Only AMAZON.AlphaNumeric is supported.
     */
    parentSlotTypeSignature?: pulumi.Input<string>;
    /**
     * Unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.
     */
    slotTypeId?: pulumi.Input<string>;
    /**
     * List of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot. See `slotTypeValues` argument reference below.
     */
    slotTypeValues?: pulumi.Input<inputs.lex.V2modelsSlotTypeSlotTypeValues>;
    timeouts?: pulumi.Input<inputs.lex.V2modelsSlotTypeTimeouts>;
    /**
     * Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values: `ORIGINAL_VALUE` returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` if there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null. If you don't specify the valueSelectionSetting parameter, the default is ORIGINAL_VALUE. See `valueSelectionSetting` argument reference below.
     */
    valueSelectionSetting?: pulumi.Input<inputs.lex.V2modelsSlotTypeValueSelectionSetting>;
}

/**
 * The set of arguments for constructing a V2modelsSlotType resource.
 */
export interface V2modelsSlotTypeArgs {
    /**
     * Identifier of the bot associated with this slot type.
     */
    botId: pulumi.Input<string>;
    /**
     * Version of the bot associated with this slot type.
     */
    botVersion: pulumi.Input<string>;
    /**
     * Specifications for a composite slot type. See `compositeSlotTypeSetting` argument reference below.
     */
    compositeSlotTypeSetting?: pulumi.Input<inputs.lex.V2modelsSlotTypeCompositeSlotTypeSetting>;
    /**
     * Description of the slot type.
     */
    description?: pulumi.Input<string>;
    /**
     * Type of external information used to create the slot type. See `externalSourceSetting` argument reference below.
     */
    externalSourceSetting?: pulumi.Input<inputs.lex.V2modelsSlotTypeExternalSourceSetting>;
    /**
     * Identifier of the language and locale where this slot type is used. All of the bots, slot types, and slots used by the intent must have the same locale.
     */
    localeId: pulumi.Input<string>;
    /**
     * Name of the slot type
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type. Only AMAZON.AlphaNumeric is supported.
     */
    parentSlotTypeSignature?: pulumi.Input<string>;
    /**
     * List of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot. See `slotTypeValues` argument reference below.
     */
    slotTypeValues?: pulumi.Input<inputs.lex.V2modelsSlotTypeSlotTypeValues>;
    timeouts?: pulumi.Input<inputs.lex.V2modelsSlotTypeTimeouts>;
    /**
     * Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values: `ORIGINAL_VALUE` returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` if there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null. If you don't specify the valueSelectionSetting parameter, the default is ORIGINAL_VALUE. See `valueSelectionSetting` argument reference below.
     */
    valueSelectionSetting?: pulumi.Input<inputs.lex.V2modelsSlotTypeValueSelectionSetting>;
}
