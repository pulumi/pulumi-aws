// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Lex V2 Models Slot.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lex.V2modelsSlot("example", {
 *     botId: exampleAwsLexv2modelsBot.id,
 *     botVersion: exampleAwsLexv2modelsBotVersion.botVersion,
 *     intentId: exampleAwsLexv2modelsIntent.id,
 *     localeId: exampleAwsLexv2modelsBotLocale.localeId,
 *     name: "example",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import Lex V2 Models Slot using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:lex/v2modelsSlot:V2modelsSlot example bot-1234,1,intent-5678,en-US,slot-9012
 * ```
 */
export class V2modelsSlot extends pulumi.CustomResource {
    /**
     * Get an existing V2modelsSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2modelsSlotState, opts?: pulumi.CustomResourceOptions): V2modelsSlot {
        return new V2modelsSlot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lex/v2modelsSlot:V2modelsSlot';

    /**
     * Returns true if the given object is an instance of V2modelsSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V2modelsSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V2modelsSlot.__pulumiType;
    }

    /**
     * Identifier of the bot associated with the slot.
     */
    public readonly botId!: pulumi.Output<string>;
    /**
     * Version of the bot associated with the slot.
     */
    public readonly botVersion!: pulumi.Output<string>;
    /**
     * Description of the slot.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Identifier of the intent that contains the slot.
     */
    public readonly intentId!: pulumi.Output<string>;
    /**
     * Identifier of the language and locale that the slot will be used in.
     */
    public readonly localeId!: pulumi.Output<string>;
    /**
     * Whether the slot returns multiple values in one response. See the `multipleValuesSetting` argument reference below.
     */
    public readonly multipleValuesSettings!: pulumi.Output<outputs.lex.V2modelsSlotMultipleValuesSetting[] | undefined>;
    /**
     * Name of the slot.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Determines how slot values are used in Amazon CloudWatch logs. See the `obfuscationSetting` argument reference below.
     */
    public readonly obfuscationSettings!: pulumi.Output<outputs.lex.V2modelsSlotObfuscationSetting[] | undefined>;
    /**
     * Unique identifier associated with the slot.
     */
    public /*out*/ readonly slotId!: pulumi.Output<string>;
    /**
     * Unique identifier for the slot type associated with this slot.
     */
    public readonly slotTypeId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.lex.V2modelsSlotTimeouts | undefined>;
    /**
     * Prompts that Amazon Lex sends to the user to elicit a response that provides the value for the slot.
     *
     * The following arguments are optional:
     */
    public readonly valueElicitationSetting!: pulumi.Output<outputs.lex.V2modelsSlotValueElicitationSetting | undefined>;

    /**
     * Create a V2modelsSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2modelsSlotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V2modelsSlotArgs | V2modelsSlotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V2modelsSlotState | undefined;
            resourceInputs["botId"] = state ? state.botId : undefined;
            resourceInputs["botVersion"] = state ? state.botVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["intentId"] = state ? state.intentId : undefined;
            resourceInputs["localeId"] = state ? state.localeId : undefined;
            resourceInputs["multipleValuesSettings"] = state ? state.multipleValuesSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["obfuscationSettings"] = state ? state.obfuscationSettings : undefined;
            resourceInputs["slotId"] = state ? state.slotId : undefined;
            resourceInputs["slotTypeId"] = state ? state.slotTypeId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valueElicitationSetting"] = state ? state.valueElicitationSetting : undefined;
        } else {
            const args = argsOrState as V2modelsSlotArgs | undefined;
            if ((!args || args.botId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botId'");
            }
            if ((!args || args.botVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botVersion'");
            }
            if ((!args || args.intentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intentId'");
            }
            if ((!args || args.localeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localeId'");
            }
            resourceInputs["botId"] = args ? args.botId : undefined;
            resourceInputs["botVersion"] = args ? args.botVersion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["intentId"] = args ? args.intentId : undefined;
            resourceInputs["localeId"] = args ? args.localeId : undefined;
            resourceInputs["multipleValuesSettings"] = args ? args.multipleValuesSettings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["obfuscationSettings"] = args ? args.obfuscationSettings : undefined;
            resourceInputs["slotTypeId"] = args ? args.slotTypeId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["valueElicitationSetting"] = args ? args.valueElicitationSetting : undefined;
            resourceInputs["slotId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V2modelsSlot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V2modelsSlot resources.
 */
export interface V2modelsSlotState {
    /**
     * Identifier of the bot associated with the slot.
     */
    botId?: pulumi.Input<string>;
    /**
     * Version of the bot associated with the slot.
     */
    botVersion?: pulumi.Input<string>;
    /**
     * Description of the slot.
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the intent that contains the slot.
     */
    intentId?: pulumi.Input<string>;
    /**
     * Identifier of the language and locale that the slot will be used in.
     */
    localeId?: pulumi.Input<string>;
    /**
     * Whether the slot returns multiple values in one response. See the `multipleValuesSetting` argument reference below.
     */
    multipleValuesSettings?: pulumi.Input<pulumi.Input<inputs.lex.V2modelsSlotMultipleValuesSetting>[]>;
    /**
     * Name of the slot.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines how slot values are used in Amazon CloudWatch logs. See the `obfuscationSetting` argument reference below.
     */
    obfuscationSettings?: pulumi.Input<pulumi.Input<inputs.lex.V2modelsSlotObfuscationSetting>[]>;
    /**
     * Unique identifier associated with the slot.
     */
    slotId?: pulumi.Input<string>;
    /**
     * Unique identifier for the slot type associated with this slot.
     */
    slotTypeId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.lex.V2modelsSlotTimeouts>;
    /**
     * Prompts that Amazon Lex sends to the user to elicit a response that provides the value for the slot.
     *
     * The following arguments are optional:
     */
    valueElicitationSetting?: pulumi.Input<inputs.lex.V2modelsSlotValueElicitationSetting>;
}

/**
 * The set of arguments for constructing a V2modelsSlot resource.
 */
export interface V2modelsSlotArgs {
    /**
     * Identifier of the bot associated with the slot.
     */
    botId: pulumi.Input<string>;
    /**
     * Version of the bot associated with the slot.
     */
    botVersion: pulumi.Input<string>;
    /**
     * Description of the slot.
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the intent that contains the slot.
     */
    intentId: pulumi.Input<string>;
    /**
     * Identifier of the language and locale that the slot will be used in.
     */
    localeId: pulumi.Input<string>;
    /**
     * Whether the slot returns multiple values in one response. See the `multipleValuesSetting` argument reference below.
     */
    multipleValuesSettings?: pulumi.Input<pulumi.Input<inputs.lex.V2modelsSlotMultipleValuesSetting>[]>;
    /**
     * Name of the slot.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines how slot values are used in Amazon CloudWatch logs. See the `obfuscationSetting` argument reference below.
     */
    obfuscationSettings?: pulumi.Input<pulumi.Input<inputs.lex.V2modelsSlotObfuscationSetting>[]>;
    /**
     * Unique identifier for the slot type associated with this slot.
     */
    slotTypeId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.lex.V2modelsSlotTimeouts>;
    /**
     * Prompts that Amazon Lex sends to the user to elicit a response that provides the value for the slot.
     *
     * The following arguments are optional:
     */
    valueElicitationSetting?: pulumi.Input<inputs.lex.V2modelsSlotValueElicitationSetting>;
}
