// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface BotAbortStatement {
    messages: outputs.BotAbortStatementMessage[];
    responseCard?: string;
}
export interface BotAbortStatementMessage {
    /**
     * The text of the message.
     */
    content: string;
    /**
     * The content type of the message string.
     */
    contentType: string;
    /**
     * Identifies the message group that the message belongs to. When a group
     * is assigned to a message, Amazon Lex returns one message from each group in the response.
     */
    groupNumber?: number;
}
export interface BotAliasConversationLogs {
    /**
     * The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
     */
    iamRoleArn: string;
    /**
     * The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
     */
    logSettings?: outputs.BotAliasConversationLogsLogSetting[];
}
export interface BotAliasConversationLogsLogSetting {
    /**
     * The destination where logs are delivered. Options are `CLOUDWATCH_LOGS` or `S3`.
     */
    destination: string;
    /**
     * The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when `destination` is set to `S3`. Must be between 20 and 2048 characters in length.
     */
    kmsKeyArn?: string;
    /**
     * The type of logging that is enabled. Options are `AUDIO` or `TEXT`.
     */
    logType: string;
    /**
     * The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
     */
    resourceArn: string;
    /**
     * The prefix of the S3 object key for `AUDIO` logs or the log stream name for `TEXT` logs.
     */
    resourcePrefix: string;
}
export interface BotClarificationPrompt {
    maxAttempts: number;
    messages: outputs.BotClarificationPromptMessage[];
    responseCard?: string;
}
export interface BotClarificationPromptMessage {
    /**
     * The text of the message.
     */
    content: string;
    /**
     * The content type of the message string.
     */
    contentType: string;
    /**
     * Identifies the message group that the message belongs to. When a group
     * is assigned to a message, Amazon Lex returns one message from each group in the response.
     */
    groupNumber?: number;
}
export interface BotIntent {
    /**
     * The name of the intent. Must be less than or equal to 100 characters in length.
     */
    intentName: string;
    /**
     * The version of the intent. Must be less than or equal to 64 characters in length.
     */
    intentVersion: string;
}
export interface IntentConclusionStatement {
    messages: outputs.IntentConclusionStatementMessage[];
    responseCard?: string;
}
export interface IntentConclusionStatementMessage {
    /**
     * The text of the message. Must be less than or equal to 1000 characters in length.
     */
    content: string;
    /**
     * The content type of the message string.
     */
    contentType: string;
    /**
     * Identifies the message group that the message belongs to. When a group
     * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
     */
    groupNumber?: number;
}
export interface IntentConfirmationPrompt {
    maxAttempts: number;
    messages: outputs.IntentConfirmationPromptMessage[];
    responseCard?: string;
}
export interface IntentConfirmationPromptMessage {
    /**
     * The text of the message. Must be less than or equal to 1000 characters in length.
     */
    content: string;
    /**
     * The content type of the message string.
     */
    contentType: string;
    /**
     * Identifies the message group that the message belongs to. When a group
     * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
     */
    groupNumber?: number;
}
export interface IntentDialogCodeHook {
    messageVersion: string;
    uri: string;
}
export interface IntentFollowUpPrompt {
    /**
     * Prompts for information from the user. Attributes are documented under prompt.
     */
    prompt: outputs.IntentFollowUpPromptPrompt;
    /**
     * If the user answers "no" to the question defined in the prompt field,
     * Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
     * documented below under statement.
     */
    rejectionStatement: outputs.IntentFollowUpPromptRejectionStatement;
}
export interface IntentFollowUpPromptPrompt {
    /**
     * The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
     */
    maxAttempts: number;
    /**
     * A set of messages, each of which provides a message string and its type.
     * You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
     * Attributes are documented under message. Must contain between 1 and 15 messages.
     */
    messages: outputs.IntentFollowUpPromptPromptMessage[];
    /**
     * The response card. Amazon Lex will substitute session attributes and
     * slot values into the response card. For more information, see
     * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
     */
    responseCard?: string;
}
export interface IntentFollowUpPromptPromptMessage {
    /**
     * The text of the message. Must be less than or equal to 1000 characters in length.
     */
    content: string;
    /**
     * The content type of the message string.
     */
    contentType: string;
    /**
     * Identifies the message group that the message belongs to. When a group
     * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
     */
    groupNumber?: number;
}
export interface IntentFollowUpPromptRejectionStatement {
    messages: outputs.IntentFollowUpPromptRejectionStatementMessage[];
    responseCard?: string;
}
export interface IntentFollowUpPromptRejectionStatementMessage {
    /**
     * The text of the message. Must be less than or equal to 1000 characters in length.
     */
    content: string;
    /**
     * The content type of the message string.
     */
    contentType: string;
    /**
     * Identifies the message group that the message belongs to. When a group
     * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
     */
    groupNumber?: number;
}
export interface IntentFulfillmentActivity {
    /**
     * A description of the Lambda function that is run to fulfill the intent.
     * Required if type is CodeHook. Attributes are documented under code_hook.
     */
    codeHook?: outputs.IntentFulfillmentActivityCodeHook;
    /**
     * How the intent should be fulfilled, either by running a Lambda function or by
     * returning the slot data to the client application. Type can be either `ReturnIntent` or `CodeHook`, as documented [here](https://docs.aws.amazon.com/lex/latest/dg/API_FulfillmentActivity.html).
     */
    type: string;
}
export interface IntentFulfillmentActivityCodeHook {
    /**
     * The version of the request-response that you want Amazon Lex to use
     * to invoke your Lambda function. For more information, see
     * [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
     */
    messageVersion: string;
    /**
     * The Amazon Resource Name (ARN) of the Lambda function.
     */
    uri: string;
}
export interface IntentRejectionStatement {
    messages: outputs.IntentRejectionStatementMessage[];
    responseCard?: string;
}
export interface IntentRejectionStatementMessage {
    /**
     * The text of the message. Must be less than or equal to 1000 characters in length.
     */
    content: string;
    /**
     * The content type of the message string.
     */
    contentType: string;
    /**
     * Identifies the message group that the message belongs to. When a group
     * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
     */
    groupNumber?: number;
}
export interface IntentSlot {
    /**
     * A description of the bot. Must be less than or equal to 200 characters in length.
     */
    description?: string;
    /**
     * The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
     */
    name: string;
    /**
     * Directs Lex the order in which to elicit this slot value from the user.
     * For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
     * the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
     * values is arbitrary. Must be between 1 and 100.
     */
    priority?: number;
    /**
     * The response card. Amazon Lex will substitute session attributes and
     * slot values into the response card. For more information, see
     * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
     */
    responseCard?: string;
    /**
     * If you know a specific pattern with which users might respond to
     * an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
     * is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
     */
    sampleUtterances?: string[];
    /**
     * Specifies whether the slot is required or optional.
     */
    slotConstraint: string;
    /**
     * The type of the slot, either a custom slot type that you defined or one of
     * the built-in slot types. Must be less than or equal to 100 characters in length.
     */
    slotType: string;
    /**
     * The version of the slot type. Must be less than or equal to 64 characters in length.
     */
    slotTypeVersion?: string;
    /**
     * The prompt that Amazon Lex uses to elicit the slot value
     * from the user. Attributes are documented under prompt.
     */
    valueElicitationPrompt?: outputs.IntentSlotValueElicitationPrompt;
}
export interface IntentSlotValueElicitationPrompt {
    maxAttempts: number;
    messages: outputs.IntentSlotValueElicitationPromptMessage[];
    responseCard?: string;
}
export interface IntentSlotValueElicitationPromptMessage {
    /**
     * The text of the message. Must be less than or equal to 1000 characters in length.
     */
    content: string;
    /**
     * The content type of the message string.
     */
    contentType: string;
    /**
     * Identifies the message group that the message belongs to. When a group
     * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
     */
    groupNumber?: number;
}
export interface SlotTypeEnumerationValue {
    /**
     * Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
     */
    synonyms?: string[];
    /**
     * The value of the slot type. Must be less than or equal to 140 characters in length.
     */
    value: string;
}
export interface V2modelsBotDataPrivacy {
    /**
     * (Required) -  For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field.
     */
    childDirected: boolean;
}
export interface V2modelsBotLocaleTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface V2modelsBotLocaleVoiceSettings {
    /**
     * Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. Valid values are `standard` and `neural`. If not specified, the default is `standard`.
     */
    engine: string;
    /**
     * Identifier of the Amazon Polly voice to use.
     */
    voiceId: string;
}
export interface V2modelsBotMember {
    /**
     * (Required) - Alias ID of a bot that is a member of this network of bots.
     */
    aliasId: string;
    /**
     * (Required) - Alias name of a bot that is a member of this network of bots.
     */
    aliasName: string;
    /**
     * (Required) - Unique ID of a bot that is a member of this network of bots.
     */
    id: string;
    /**
     * Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
     */
    name: string;
    /**
     * (Required) - Version of a bot that is a member of this network of bots.
     */
    version: string;
}
export interface V2modelsBotTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface V2modelsBotVersionLocaleSpecification {
    sourceBotVersion: string;
}
export interface V2modelsBotVersionTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
}
export interface V2modelsIntentClosingSetting {
    /**
     * Whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
     */
    active?: boolean;
    /**
     * Configuration block for response that Amazon Lex sends to the user when the intent is complete. See `closingResponse`.
     */
    closingResponse?: outputs.V2modelsIntentClosingSettingClosingResponse;
    /**
     * Configuration block for list of conditional branches associated with the intent's closing response. These branches are executed when the `nextStep` attribute is set to `EvalutateConditional`. See `conditional`.
     */
    conditional?: outputs.V2modelsIntentClosingSettingConditional;
    /**
     * Next step that the bot executes after playing the intent's closing response. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentClosingSettingNextStep;
}
export interface V2modelsIntentClosingSettingClosingResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroup[];
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariation[];
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentClosingSettingConditionalDefaultBranch;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponse;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponse;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentClosingSettingNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentClosingSettingNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentClosingSettingNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentClosingSettingNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentClosingSettingNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentClosingSettingNextStepIntentSlot[];
}
export interface V2modelsIntentClosingSettingNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentClosingSettingNextStepIntentSlotValue;
}
export interface V2modelsIntentClosingSettingNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSetting {
    /**
     * Whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
     */
    active?: boolean;
    /**
     * Configuration block for the intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invokeDialogCodeHook`.  See `codeHook`.
     */
    codeHook?: outputs.V2modelsIntentConfirmationSettingCodeHook;
    /**
     * Configuration block for conditional branches to evaluate after the intent is closed. See `confirmationConditional`.
     */
    confirmationConditional?: outputs.V2modelsIntentConfirmationSettingConfirmationConditional;
    /**
     * Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmationNextStep`.
     */
    confirmationNextStep?: outputs.V2modelsIntentConfirmationSettingConfirmationNextStep;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmationResponse`.
     */
    confirmationResponse?: outputs.V2modelsIntentConfirmationSettingConfirmationResponse;
    /**
     * Configuration block for conditional branches to evaluate after the intent is declined. See `declinationConditional`.
     */
    declinationConditional?: outputs.V2modelsIntentConfirmationSettingDeclinationConditional;
    /**
     * Configuration block for the next step that the bot executes when the customer declines the intent. See `declinationNextStep`.
     */
    declinationNextStep?: outputs.V2modelsIntentConfirmationSettingDeclinationNextStep;
    /**
     * Configuration block for when the user answers "no" to the question defined in `promptSpecification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declinationResponse`.
     */
    declinationResponse?: outputs.V2modelsIntentConfirmationSettingDeclinationResponse;
    /**
     * Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitationCodeHook`.
     */
    elicitationCodeHook?: outputs.V2modelsIntentConfirmationSettingElicitationCodeHook;
    /**
     * Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failureConditional`.
     */
    failureConditional?: outputs.V2modelsIntentConfirmationSettingFailureConditional;
    /**
     * Configuration block for the next step to take in the conversation if the confirmation step fails. See `failureNextStep`.
     */
    failureNextStep?: outputs.V2modelsIntentConfirmationSettingFailureNextStep;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `failureResponse`.
     */
    failureResponse?: outputs.V2modelsIntentConfirmationSettingFailureResponse;
    /**
     * Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `promptSpecification`.
     */
    promptSpecification: outputs.V2modelsIntentConfirmationSettingPromptSpecification;
}
export interface V2modelsIntentConfirmationSettingCodeHook {
    /**
     * Whether a dialog code hook is used when the intent is activated.
     */
    active: boolean;
    /**
     * Whether a Lambda function should be invoked for the dialog.
     */
    enableCodeHookInvocation: boolean;
    /**
     * Label that indicates the dialog step from which the dialog code hook is happening.
     */
    invocationLabel?: string;
    /**
     * Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `postCodeHookSpecification`.
     */
    postCodeHookSpecification: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecification {
    /**
     * Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
     */
    failureConditional?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional;
    /**
     * Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failureNextStep`.
     */
    failureNextStep?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `failureResponse`.
     */
    failureResponse?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse;
    /**
     * Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `successConditional`.
     */
    successConditional?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional;
    /**
     * Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `successNextStep`.
     */
    successNextStep?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `successResponse`.
     */
    successResponse?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse;
    /**
     * Configuration block for conditional branches to evaluate if the code hook times out. See `timeoutConditional`.
     */
    timeoutConditional?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional;
    /**
     * Configuration block for the next step that the bot runs when the code hook times out. See `timeoutNextStep`.
     */
    timeoutNextStep?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeoutResponse`.
     */
    timeoutResponse?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingConfirmationNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingDeclinationNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingElicitationCodeHook {
    /**
     * Whether a Lambda function should be invoked for the dialog.
     */
    enableCodeHookInvocation?: boolean;
    /**
     * Label that indicates the dialog step from which the dialog code hook is happening.
     */
    invocationLabel?: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentConfirmationSettingFailureNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentConfirmationSettingFailureNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentConfirmationSettingFailureNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentConfirmationSettingFailureNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentConfirmationSettingFailureNextStepIntentSlot[];
}
export interface V2modelsIntentConfirmationSettingFailureNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue;
}
export interface V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroup[];
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecification {
    /**
     * Whether the user can interrupt a speech prompt from the bot.
     */
    allowInterrupt?: boolean;
    /**
     * Maximum number of times the bot tries to elicit a response from the user using this prompt.
     */
    maxRetries: number;
    /**
     * Configuration block for messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroup[];
    /**
     * How a message is selected from a message group among retries. Valid values are `Random` and `Ordered`.
     */
    messageSelectionStrategy?: string;
    /**
     * Configuration block for advanced settings on each attempt of the prompt. See `promptAttemptsSpecification`.
     */
    promptAttemptsSpecifications?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification[];
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation[];
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecification {
    /**
     * Whether the user can interrupt a speech prompt attempt from the bot.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration block for the allowed input types of the prompt attempt. See `allowedInputTypes`.
     */
    allowedInputTypes: outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes;
    /**
     * Configuration block for settings on audio and DTMF input. See `audioAndDtmfInputSpecification`.
     */
    audioAndDtmfInputSpecification?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification;
    /**
     * Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
     */
    mapBlockKey: string;
    /**
     * Configuration block for the settings on text input. See `textInputSpecification`.
     */
    textInputSpecification?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes {
    /**
     * Whether audio input is allowed.
     */
    allowAudioInput: boolean;
    /**
     * Whether DTMF input is allowed.
     */
    allowDtmfInput: boolean;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification {
    /**
     * Configuration block for the settings on audio input. See `audioSpecification`.
     */
    audioSpecification?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification;
    /**
     * Configuration block for the settings on DTMF input. See `dtmfSpecification`.
     */
    dtmfSpecification?: outputs.V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification;
    /**
     * Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
     */
    startTimeoutMs: number;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification {
    /**
     * Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
     */
    endTimeoutMs: number;
    /**
     * Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
     */
    maxLengthMs: number;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification {
    /**
     * DTMF character that clears the accumulated DTMF digits and immediately ends the input.
     */
    deletionCharacter: string;
    /**
     * DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
     */
    endCharacter: string;
    /**
     * How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
     */
    endTimeoutMs: number;
    /**
     * Maximum number of DTMF digits allowed in an utterance.
     */
    maxLength: number;
}
export interface V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification {
    /**
     * Time for which a bot waits before re-prompting a customer for text input.
     */
    startTimeoutMs: number;
}
export interface V2modelsIntentDialogCodeHook {
    /**
     * Enables the dialog code hook so that it processes user requests.
     */
    enabled: boolean;
}
export interface V2modelsIntentFulfillmentCodeHook {
    /**
     * Whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
     */
    active?: boolean;
    /**
     * Whether a Lambda function should be invoked to fulfill a specific intent.
     */
    enabled: boolean;
    /**
     * Configuration block for settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations. See `fulfillmentUpdatesSpecification`.
     */
    fulfillmentUpdatesSpecification?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification;
    /**
     * Configuration block for settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations. See `postFulfillmentStatusSpecification`.
     */
    postFulfillmentStatusSpecification?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecification {
    /**
     * Whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the active field is set to true, the `startResponse`, `updateResponse`, and `timeoutInSeconds` fields are required.
     */
    active: boolean;
    /**
     * Configuration block for the message sent to users when the fulfillment Lambda functions starts running.
     */
    startResponse?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse;
    /**
     * Length of time that the fulfillment Lambda function should run before it times out.
     */
    timeoutInSeconds?: number;
    /**
     * Configuration block for messages sent periodically to the user while the fulfillment Lambda function is running.
     */
    updateResponse?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponse {
    /**
     * Whether the user can interrupt the start message while it is playing.
     */
    allowInterrupt?: boolean;
    /**
     * Delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
     */
    delayInSeconds?: number;
    /**
     * Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponse {
    /**
     * Whether the user can interrupt the start message while it is playing.
     */
    allowInterrupt?: boolean;
    /**
     * Frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
     */
    frequencyInSeconds: number;
    /**
     * Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecification {
    /**
     * Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failureConditional`.
     */
    failureConditional?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional;
    /**
     * Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failureNextStep`.
     */
    failureNextStep?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `failureResponse`.
     */
    failureResponse?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse;
    /**
     * Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `successConditional`.
     */
    successConditional?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional;
    /**
     * Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `successNextStep`.
     */
    successNextStep?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `successResponse`.
     */
    successResponse?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse;
    /**
     * Configuration block for conditional branches to evaluate if the code hook times out. See `timeoutConditional`.
     */
    timeoutConditional?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional;
    /**
     * Configuration block for the next step that the bot runs when the code hook times out. See `timeoutNextStep`.
     */
    timeoutNextStep?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeoutResponse`.
     */
    timeoutResponse?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroup[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation[];
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSetting {
    /**
     * Configuration block for the dialog code hook that is called by Amazon Lex at a step of the conversation. See `codeHook`.
     */
    codeHook?: outputs.V2modelsIntentInitialResponseSettingCodeHook;
    /**
     * Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `conditional`.
     */
    conditional?: outputs.V2modelsIntentInitialResponseSettingConditional;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `initialResponse`.
     */
    initialResponse?: outputs.V2modelsIntentInitialResponseSettingInitialResponse;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentInitialResponseSettingNextStep;
}
export interface V2modelsIntentInitialResponseSettingCodeHook {
    /**
     * Whether a dialog code hook is used when the intent is activated.
     */
    active: boolean;
    /**
     * Whether a Lambda function should be invoked for the dialog.
     */
    enableCodeHookInvocation: boolean;
    /**
     * Label that indicates the dialog step from which the dialog code hook is happening.
     */
    invocationLabel?: string;
    /**
     * Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `postCodeHookSpecification`.
     */
    postCodeHookSpecification: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecification {
    /**
     * Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
     */
    failureConditional?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional;
    /**
     * Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failureNextStep`.
     */
    failureNextStep?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `failureResponse`.
     */
    failureResponse?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse;
    /**
     * Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `successConditional`.
     */
    successConditional?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional;
    /**
     * Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `successNextStep`.
     */
    successNextStep?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep;
    /**
     * Configuration block for message groups that Amazon Lex uses to respond the user input. See `successResponse`.
     */
    successResponse?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse;
    /**
     * Configuration block for conditional branches to evaluate if the code hook times out. See `timeoutConditional`.
     */
    timeoutConditional?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional;
    /**
     * Configuration block for the next step that the bot runs when the code hook times out. See `timeoutNextStep`.
     */
    timeoutNextStep?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeoutResponse`.
     */
    timeoutResponse?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditional {
    /**
     * Whether a conditional branch is active. When active is false, the conditions are not evaluated.
     */
    active: boolean;
    /**
     * Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditionalBranch`.
     */
    conditionalBranches?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranch[];
    /**
     * Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `defaultBranch`.
     */
    defaultBranch: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranch;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranch {
    /**
     * Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
     */
    condition: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition;
    /**
     * Name of the branch.
     */
    name: string;
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchCondition {
    /**
     * Expression string that is evaluated.
     */
    expressionString: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranch {
    /**
     * Configuration block for the next step in the conversation. See `nextStep`.
     */
    nextStep?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep;
    /**
     * Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
     */
    response?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponse {
    /**
     * Whether the user can interrupt a speech response from Amazon Lex.
     */
    allowInterrupt?: boolean;
    /**
     * Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `messageGroup`.
     */
    messageGroups?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroup[];
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroup {
    /**
     * Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
     */
    message: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage;
    /**
     * Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
     */
    variations?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation[];
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessage {
    /**
     * Configuration block for a message in a custom format defined by the client application. See `customPayload`.
     */
    customPayload?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayload;
    /**
     * Configuration block for a message that defines a response card that the client application can show to the user. See `imageResponseCard`.
     */
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard;
    /**
     * Configuration block for a message in plain text format. See `plainTextMessage`.
     */
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessage;
    /**
     * Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssmlMessage`.
     */
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariation {
    customPayload?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayload;
    imageResponseCard?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayload {
    /**
     * String that is sent to your application.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCard {
    /**
     * Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
     */
    buttons?: outputs.V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButton[];
    /**
     * URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
     */
    imageUrl?: string;
    /**
     * Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
     */
    subtitle?: string;
    /**
     * Title to display on the response card. The format of the title is determined by the platform displaying the response card.
     */
    title: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButton {
    /**
     * Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
     */
    text: string;
    /**
     * Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessage {
    /**
     * Message to send to the user.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessage {
    /**
     * SSML text that defines the prompt.
     */
    value: string;
}
export interface V2modelsIntentInitialResponseSettingNextStep {
    /**
     * Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialogAction`.
     */
    dialogAction?: outputs.V2modelsIntentInitialResponseSettingNextStepDialogAction;
    /**
     * Configuration block for override settings to configure the intent state. See `intent`.
     */
    intent?: outputs.V2modelsIntentInitialResponseSettingNextStepIntent;
    /**
     * Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    sessionAttributes?: {[key: string]: string};
}
export interface V2modelsIntentInitialResponseSettingNextStepDialogAction {
    /**
     * If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
     */
    slotToElicit?: string;
    /**
     * Whether the next message for the intent is _not_ used.
     */
    suppressNextMessage?: boolean;
    /**
     * Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
     */
    type: string;
}
export interface V2modelsIntentInitialResponseSettingNextStepIntent {
    /**
     * Name of the intent.
     */
    name?: string;
    /**
     * Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
     */
    slots?: outputs.V2modelsIntentInitialResponseSettingNextStepIntentSlot[];
}
export interface V2modelsIntentInitialResponseSettingNextStepIntentSlot {
    mapBlockKey: string;
    /**
     * When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
     */
    shape?: string;
    /**
     * Configuration block for the current value of the slot. See `value`.
     */
    value?: outputs.V2modelsIntentInitialResponseSettingNextStepIntentSlotValue;
}
export interface V2modelsIntentInitialResponseSettingNextStepIntentSlotValue {
    interpretedValue?: string;
}
export interface V2modelsIntentInputContext {
    /**
     * Name of the context.
     */
    name: string;
}
export interface V2modelsIntentKendraConfiguration {
    /**
     * ARN of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
     */
    kendraIndex: string;
    /**
     * Query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html).
     */
    queryFilterString?: string;
    /**
     * Whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
     */
    queryFilterStringEnabled?: boolean;
}
export interface V2modelsIntentOutputContext {
    /**
     * Name of the output context.
     */
    name: string;
    /**
     * Amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.
     */
    timeToLiveInSeconds: number;
    /**
     * Number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.
     */
    turnsToLive: number;
}
export interface V2modelsIntentSampleUtterance {
    /**
     * Sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
     */
    utterance: string;
}
export interface V2modelsIntentSlotPriority {
    /**
     * Priority that Amazon Lex should apply to the slot.
     */
    priority: number;
    /**
     * Unique identifier of the slot.
     */
    slotId: string;
}
export interface V2modelsIntentTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface V2modelsSlotMultipleValuesSetting {
    /**
     * Whether a slot can return multiple values. When `true`, the slot may return more than one value in a response. When `false`, the slot returns only a single value. Multi-value slots are only available in the `en-US` locale.
     */
    allowMultipleValues?: boolean;
}
export interface V2modelsSlotObfuscationSetting {
    /**
     * Whether Amazon Lex obscures slot values in conversation logs. Valid values are `DefaultObfuscation` and `None`.
     */
    obfuscationSettingType: string;
}
export interface V2modelsSlotTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface V2modelsSlotTypeCompositeSlotTypeSetting {
    /**
     * Subslots in the composite slot. Contains filtered or unexported fields. See [`subSlotTypeComposition` argument reference] below.
     */
    subSlots: any[];
}
export interface V2modelsSlotTypeExternalSourceSetting {
    /**
     * Settings required for a slot type based on a grammar that you provide. See `grammarSlotTypeSetting` argument reference below.
     */
    grammarSlotTypeSetting?: outputs.V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSetting;
}
export interface V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSetting {
    /**
     * Source of the grammar used to create the slot type. See `grammarSlotTypeSource` argument reference below.
     */
    source?: outputs.V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource;
}
export interface V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSource {
    kmsKeyArn: string;
    s3BucketName: string;
    s3ObjectKey: string;
}
export interface V2modelsSlotTypeSlotTypeValues {
    /**
     * List of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot. See `slotTypeValues` argument reference below.
     */
    slotTypeValues: any[];
    /**
     * Additional values related to the slot type entry. See `sampleValue` argument reference below.
     */
    synonyms?: outputs.V2modelsSlotTypeSlotTypeValuesSynonym[];
}
export interface V2modelsSlotTypeSlotTypeValuesSynonym {
    value: string;
}
export interface V2modelsSlotTypeTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface V2modelsSlotTypeValueSelectionSetting {
    /**
     * Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances. See [`advancedRecognitionSetting` argument reference] below.
     */
    advancedRecognitionSettings?: outputs.V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting[];
    /**
     * Used to validate the value of the slot. See [`regexFilter` argument reference] below.
     */
    regexFilters?: outputs.V2modelsSlotTypeValueSelectionSettingRegexFilter[];
    /**
     * Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value. `TOP_RESOLUTION` If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don't specify the valueSelectionStrategy , the default is `ORIGINAL_VALUE`. Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
     */
    resolutionStrategy: string;
}
export interface V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSetting {
    audioRecognitionSetting?: string;
}
export interface V2modelsSlotTypeValueSelectionSettingRegexFilter {
    pattern: string;
}
export interface V2modelsSlotValueElicitationSetting {
    defaultValueSpecifications?: outputs.V2modelsSlotValueElicitationSettingDefaultValueSpecification[];
    promptSpecification: outputs.V2modelsSlotValueElicitationSettingPromptSpecification;
    sampleUtterances?: outputs.V2modelsSlotValueElicitationSettingSampleUtterance[];
    slotConstraint: string;
    slotResolutionSettings?: outputs.V2modelsSlotValueElicitationSettingSlotResolutionSetting[];
    waitAndContinueSpecifications?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecification[];
}
export interface V2modelsSlotValueElicitationSettingDefaultValueSpecification {
    defaultValueLists?: outputs.V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList[];
}
export interface V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueList {
    defaultValue: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecification {
    allowInterrupt?: boolean;
    maxRetries: number;
    messageGroups?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroup[];
    messageSelectionStrategy?: string;
    promptAttemptsSpecifications?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification[];
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroup {
    message: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage;
    variations?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation[];
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessage {
    customPayloads?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayload[];
    imageResponseCard?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard;
    plainTextMessage?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessage;
    ssmlMessage?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessage;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayload {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCard {
    buttons?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton[];
    imageUrl?: string;
    subtitle?: string;
    title: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButton {
    text: string;
    value: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariation {
    customPayloads?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayload[];
    imageResponseCard?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessage;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayload {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCard {
    buttons?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton[];
    imageUrl?: string;
    subtitle?: string;
    title: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButton {
    text: string;
    value: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecification {
    allowInterrupt?: boolean;
    allowedInputTypes: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes;
    audioAndDtmfInputSpecification?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification;
    mapBlockKey: string;
    textInputSpecification?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypes {
    allowAudioInput: boolean;
    allowDtmfInput: boolean;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecification {
    audioSpecification?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification;
    dtmfSpecification?: outputs.V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification;
    startTimeoutMs: number;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecification {
    endTimeoutMs: number;
    maxLengthMs: number;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecification {
    deletionCharacter: string;
    endCharacter: string;
    endTimeoutMs: number;
    maxLength: number;
}
export interface V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecification {
    startTimeoutMs: number;
}
export interface V2modelsSlotValueElicitationSettingSampleUtterance {
    utterance: string;
}
export interface V2modelsSlotValueElicitationSettingSlotResolutionSetting {
    slotResolutionStrategy: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecification {
    active?: boolean;
    continueResponses?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse[];
    stillWaitingResponses?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse[];
    waitingResponses?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse[];
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponse {
    allowInterrupt?: boolean;
    messageGroups?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroup[];
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroup {
    message: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage;
    variations?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation[];
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessage {
    customPayloads?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayload[];
    imageResponseCard?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard;
    plainTextMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessage;
    ssmlMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayload {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCard {
    buttons?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButton[];
    imageUrl?: string;
    subtitle?: string;
    title: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButton {
    text: string;
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariation {
    customPayloads?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayload[];
    imageResponseCard?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayload {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCard {
    buttons?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButton[];
    imageUrl?: string;
    subtitle?: string;
    title: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButton {
    text: string;
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponse {
    allowInterrupt?: boolean;
    frequencyInSeconds: number;
    messageGroups?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroup[];
    timeoutInSeconds: number;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroup {
    message: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage;
    variations?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation[];
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessage {
    customPayloads?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayload[];
    imageResponseCard?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard;
    plainTextMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessage;
    ssmlMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayload {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCard {
    buttons?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButton[];
    imageUrl?: string;
    subtitle?: string;
    title: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButton {
    text: string;
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariation {
    customPayloads?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayload[];
    imageResponseCard?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayload {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCard {
    buttons?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButton[];
    imageUrl?: string;
    subtitle?: string;
    title: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButton {
    text: string;
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponse {
    allowInterrupt?: boolean;
    messageGroups?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroup[];
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroup {
    message: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage;
    variations?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation[];
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessage {
    customPayloads?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayload[];
    imageResponseCard?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard;
    plainTextMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessage;
    ssmlMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessage;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayload {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCard {
    buttons?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButton[];
    imageUrl?: string;
    subtitle?: string;
    title: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButton {
    text: string;
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariation {
    customPayloads?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayload[];
    imageResponseCard?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard;
    plainTextMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessage;
    ssmlMessage?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessage;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayload {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCard {
    buttons?: outputs.V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButton[];
    imageUrl?: string;
    subtitle?: string;
    title: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButton {
    text: string;
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessage {
    value: string;
}
export interface V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessage {
    value: string;
}
export interface GetSlotTypeEnumerationValue {
    synonyms: string[];
    value: string;
}
