// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:sagemaker/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    public readonly appNetworkAccessType!: pulumi.Output<string | undefined>;
    public readonly appSecurityGroupManagement!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authMode!: pulumi.Output<string>;
    public readonly defaultSpaceSettings!: pulumi.Output<outputs.sagemaker.DomainDefaultSpaceSettings | undefined>;
    public readonly defaultUserSettings!: pulumi.Output<outputs.sagemaker.DomainDefaultUserSettings>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly domainSettings!: pulumi.Output<outputs.sagemaker.DomainDomainSettings | undefined>;
    public /*out*/ readonly homeEfsFileSystemId!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly retentionPolicy!: pulumi.Output<outputs.sagemaker.DomainRetentionPolicy | undefined>;
    public /*out*/ readonly securityGroupIdForDomainBoundary!: pulumi.Output<string>;
    public /*out*/ readonly singleSignOnManagedApplicationInstanceId!: pulumi.Output<string>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly url!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["appNetworkAccessType"] = state ? state.appNetworkAccessType : undefined;
            resourceInputs["appSecurityGroupManagement"] = state ? state.appSecurityGroupManagement : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["defaultSpaceSettings"] = state ? state.defaultSpaceSettings : undefined;
            resourceInputs["defaultUserSettings"] = state ? state.defaultUserSettings : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainSettings"] = state ? state.domainSettings : undefined;
            resourceInputs["homeEfsFileSystemId"] = state ? state.homeEfsFileSystemId : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["retentionPolicy"] = state ? state.retentionPolicy : undefined;
            resourceInputs["securityGroupIdForDomainBoundary"] = state ? state.securityGroupIdForDomainBoundary : undefined;
            resourceInputs["singleSignOnManagedApplicationInstanceId"] = state ? state.singleSignOnManagedApplicationInstanceId : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            if ((!args || args.authMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMode'");
            }
            if ((!args || args.defaultUserSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultUserSettings'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["appNetworkAccessType"] = args ? args.appNetworkAccessType : undefined;
            resourceInputs["appSecurityGroupManagement"] = args ? args.appSecurityGroupManagement : undefined;
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["defaultSpaceSettings"] = args ? args.defaultSpaceSettings : undefined;
            resourceInputs["defaultUserSettings"] = args ? args.defaultUserSettings : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainSettings"] = args ? args.domainSettings : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["retentionPolicy"] = args ? args.retentionPolicy : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["homeEfsFileSystemId"] = undefined /*out*/;
            resourceInputs["securityGroupIdForDomainBoundary"] = undefined /*out*/;
            resourceInputs["singleSignOnManagedApplicationInstanceId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    appNetworkAccessType?: pulumi.Input<string>;
    appSecurityGroupManagement?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    authMode?: pulumi.Input<string>;
    defaultSpaceSettings?: pulumi.Input<inputs.sagemaker.DomainDefaultSpaceSettings>;
    defaultUserSettings?: pulumi.Input<inputs.sagemaker.DomainDefaultUserSettings>;
    domainName?: pulumi.Input<string>;
    domainSettings?: pulumi.Input<inputs.sagemaker.DomainDomainSettings>;
    homeEfsFileSystemId?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    retentionPolicy?: pulumi.Input<inputs.sagemaker.DomainRetentionPolicy>;
    securityGroupIdForDomainBoundary?: pulumi.Input<string>;
    singleSignOnManagedApplicationInstanceId?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    url?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    appNetworkAccessType?: pulumi.Input<string>;
    appSecurityGroupManagement?: pulumi.Input<string>;
    authMode: pulumi.Input<string>;
    defaultSpaceSettings?: pulumi.Input<inputs.sagemaker.DomainDefaultSpaceSettings>;
    defaultUserSettings: pulumi.Input<inputs.sagemaker.DomainDefaultUserSettings>;
    domainName: pulumi.Input<string>;
    domainSettings?: pulumi.Input<inputs.sagemaker.DomainDomainSettings>;
    kmsKeyId?: pulumi.Input<string>;
    retentionPolicy?: pulumi.Input<inputs.sagemaker.DomainRetentionPolicy>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}
