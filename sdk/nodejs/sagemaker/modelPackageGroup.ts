// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Sagemaker Model Package Group resource.
 *
 * ## Example Usage
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sagemaker.ModelPackageGroup("example", {
 *     modelPackageGroupName: "example",
 * });
 * ```
 *
 * ## Import
 *
 * Sagemaker Code Model Package Groups can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:sagemaker/modelPackageGroup:ModelPackageGroup test_model_package_group my-code-repo
 * ```
 */
export class ModelPackageGroup extends pulumi.CustomResource {
    /**
     * Get an existing ModelPackageGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModelPackageGroupState, opts?: pulumi.CustomResourceOptions): ModelPackageGroup {
        return new ModelPackageGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:sagemaker/modelPackageGroup:ModelPackageGroup';

    /**
     * Returns true if the given object is an instance of ModelPackageGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ModelPackageGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ModelPackageGroup.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Model Package Group.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A description for the model group.
     */
    public readonly modelPackageGroupDescription!: pulumi.Output<string | undefined>;
    /**
     * The name of the model group.
     */
    public readonly modelPackageGroupName!: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     */
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ModelPackageGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModelPackageGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModelPackageGroupArgs | ModelPackageGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModelPackageGroupState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["modelPackageGroupDescription"] = state ? state.modelPackageGroupDescription : undefined;
            inputs["modelPackageGroupName"] = state ? state.modelPackageGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ModelPackageGroupArgs | undefined;
            if ((!args || args.modelPackageGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelPackageGroupName'");
            }
            inputs["modelPackageGroupDescription"] = args ? args.modelPackageGroupDescription : undefined;
            inputs["modelPackageGroupName"] = args ? args.modelPackageGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tagsAll"] = args ? args.tagsAll : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ModelPackageGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ModelPackageGroup resources.
 */
export interface ModelPackageGroupState {
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Model Package Group.
     */
    arn?: pulumi.Input<string>;
    /**
     * A description for the model group.
     */
    modelPackageGroupDescription?: pulumi.Input<string>;
    /**
     * The name of the model group.
     */
    modelPackageGroupName?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ModelPackageGroup resource.
 */
export interface ModelPackageGroupArgs {
    /**
     * A description for the model group.
     */
    modelPackageGroupDescription?: pulumi.Input<string>;
    /**
     * The name of the model group.
     */
    modelPackageGroupName: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
