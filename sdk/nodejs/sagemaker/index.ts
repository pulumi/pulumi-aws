// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { AppImageConfigArgs, AppImageConfigState } from "./appImageConfig";
export type AppImageConfig = import("./appImageConfig").AppImageConfig;
export const AppImageConfig: typeof import("./appImageConfig").AppImageConfig = null as any;
utilities.lazyLoad(exports, ["AppImageConfig"], () => require("./appImageConfig"));

export { CodeRepositoryArgs, CodeRepositoryState } from "./codeRepository";
export type CodeRepository = import("./codeRepository").CodeRepository;
export const CodeRepository: typeof import("./codeRepository").CodeRepository = null as any;
utilities.lazyLoad(exports, ["CodeRepository"], () => require("./codeRepository"));

export { DataQualityJobDefinitionArgs, DataQualityJobDefinitionState } from "./dataQualityJobDefinition";
export type DataQualityJobDefinition = import("./dataQualityJobDefinition").DataQualityJobDefinition;
export const DataQualityJobDefinition: typeof import("./dataQualityJobDefinition").DataQualityJobDefinition = null as any;
utilities.lazyLoad(exports, ["DataQualityJobDefinition"], () => require("./dataQualityJobDefinition"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DeviceFleetArgs, DeviceFleetState } from "./deviceFleet";
export type DeviceFleet = import("./deviceFleet").DeviceFleet;
export const DeviceFleet: typeof import("./deviceFleet").DeviceFleet = null as any;
utilities.lazyLoad(exports, ["DeviceFleet"], () => require("./deviceFleet"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { EndpointConfigurationArgs, EndpointConfigurationState } from "./endpointConfiguration";
export type EndpointConfiguration = import("./endpointConfiguration").EndpointConfiguration;
export const EndpointConfiguration: typeof import("./endpointConfiguration").EndpointConfiguration = null as any;
utilities.lazyLoad(exports, ["EndpointConfiguration"], () => require("./endpointConfiguration"));

export { FeatureGroupArgs, FeatureGroupState } from "./featureGroup";
export type FeatureGroup = import("./featureGroup").FeatureGroup;
export const FeatureGroup: typeof import("./featureGroup").FeatureGroup = null as any;
utilities.lazyLoad(exports, ["FeatureGroup"], () => require("./featureGroup"));

export { FlowDefinitionArgs, FlowDefinitionState } from "./flowDefinition";
export type FlowDefinition = import("./flowDefinition").FlowDefinition;
export const FlowDefinition: typeof import("./flowDefinition").FlowDefinition = null as any;
utilities.lazyLoad(exports, ["FlowDefinition"], () => require("./flowDefinition"));

export { GetPrebuiltEcrImageArgs, GetPrebuiltEcrImageResult, GetPrebuiltEcrImageOutputArgs } from "./getPrebuiltEcrImage";
export const getPrebuiltEcrImage: typeof import("./getPrebuiltEcrImage").getPrebuiltEcrImage = null as any;
export const getPrebuiltEcrImageOutput: typeof import("./getPrebuiltEcrImage").getPrebuiltEcrImageOutput = null as any;
utilities.lazyLoad(exports, ["getPrebuiltEcrImage","getPrebuiltEcrImageOutput"], () => require("./getPrebuiltEcrImage"));

export { HumanTaskUIArgs, HumanTaskUIState } from "./humanTaskUI";
export type HumanTaskUI = import("./humanTaskUI").HumanTaskUI;
export const HumanTaskUI: typeof import("./humanTaskUI").HumanTaskUI = null as any;
utilities.lazyLoad(exports, ["HumanTaskUI"], () => require("./humanTaskUI"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { ImageVersionArgs, ImageVersionState } from "./imageVersion";
export type ImageVersion = import("./imageVersion").ImageVersion;
export const ImageVersion: typeof import("./imageVersion").ImageVersion = null as any;
utilities.lazyLoad(exports, ["ImageVersion"], () => require("./imageVersion"));

export { ModelArgs, ModelState } from "./model";
export type Model = import("./model").Model;
export const Model: typeof import("./model").Model = null as any;
utilities.lazyLoad(exports, ["Model"], () => require("./model"));

export { ModelPackageGroupArgs, ModelPackageGroupState } from "./modelPackageGroup";
export type ModelPackageGroup = import("./modelPackageGroup").ModelPackageGroup;
export const ModelPackageGroup: typeof import("./modelPackageGroup").ModelPackageGroup = null as any;
utilities.lazyLoad(exports, ["ModelPackageGroup"], () => require("./modelPackageGroup"));

export { ModelPackageGroupPolicyArgs, ModelPackageGroupPolicyState } from "./modelPackageGroupPolicy";
export type ModelPackageGroupPolicy = import("./modelPackageGroupPolicy").ModelPackageGroupPolicy;
export const ModelPackageGroupPolicy: typeof import("./modelPackageGroupPolicy").ModelPackageGroupPolicy = null as any;
utilities.lazyLoad(exports, ["ModelPackageGroupPolicy"], () => require("./modelPackageGroupPolicy"));

export { MonitoringScheduleArgs, MonitoringScheduleState } from "./monitoringSchedule";
export type MonitoringSchedule = import("./monitoringSchedule").MonitoringSchedule;
export const MonitoringSchedule: typeof import("./monitoringSchedule").MonitoringSchedule = null as any;
utilities.lazyLoad(exports, ["MonitoringSchedule"], () => require("./monitoringSchedule"));

export { NotebookInstanceArgs, NotebookInstanceState } from "./notebookInstance";
export type NotebookInstance = import("./notebookInstance").NotebookInstance;
export const NotebookInstance: typeof import("./notebookInstance").NotebookInstance = null as any;
utilities.lazyLoad(exports, ["NotebookInstance"], () => require("./notebookInstance"));

export { NotebookInstanceLifecycleConfigurationArgs, NotebookInstanceLifecycleConfigurationState } from "./notebookInstanceLifecycleConfiguration";
export type NotebookInstanceLifecycleConfiguration = import("./notebookInstanceLifecycleConfiguration").NotebookInstanceLifecycleConfiguration;
export const NotebookInstanceLifecycleConfiguration: typeof import("./notebookInstanceLifecycleConfiguration").NotebookInstanceLifecycleConfiguration = null as any;
utilities.lazyLoad(exports, ["NotebookInstanceLifecycleConfiguration"], () => require("./notebookInstanceLifecycleConfiguration"));

export { PipelineArgs, PipelineState } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ServicecatalogPortfolioStatusArgs, ServicecatalogPortfolioStatusState } from "./servicecatalogPortfolioStatus";
export type ServicecatalogPortfolioStatus = import("./servicecatalogPortfolioStatus").ServicecatalogPortfolioStatus;
export const ServicecatalogPortfolioStatus: typeof import("./servicecatalogPortfolioStatus").ServicecatalogPortfolioStatus = null as any;
utilities.lazyLoad(exports, ["ServicecatalogPortfolioStatus"], () => require("./servicecatalogPortfolioStatus"));

export { SpaceArgs, SpaceState } from "./space";
export type Space = import("./space").Space;
export const Space: typeof import("./space").Space = null as any;
utilities.lazyLoad(exports, ["Space"], () => require("./space"));

export { StudioLifecycleConfigArgs, StudioLifecycleConfigState } from "./studioLifecycleConfig";
export type StudioLifecycleConfig = import("./studioLifecycleConfig").StudioLifecycleConfig;
export const StudioLifecycleConfig: typeof import("./studioLifecycleConfig").StudioLifecycleConfig = null as any;
utilities.lazyLoad(exports, ["StudioLifecycleConfig"], () => require("./studioLifecycleConfig"));

export { UserProfileArgs, UserProfileState } from "./userProfile";
export type UserProfile = import("./userProfile").UserProfile;
export const UserProfile: typeof import("./userProfile").UserProfile = null as any;
utilities.lazyLoad(exports, ["UserProfile"], () => require("./userProfile"));

export { WorkforceArgs, WorkforceState } from "./workforce";
export type Workforce = import("./workforce").Workforce;
export const Workforce: typeof import("./workforce").Workforce = null as any;
utilities.lazyLoad(exports, ["Workforce"], () => require("./workforce"));

export { WorkteamArgs, WorkteamState } from "./workteam";
export type Workteam = import("./workteam").Workteam;
export const Workteam: typeof import("./workteam").Workteam = null as any;
utilities.lazyLoad(exports, ["Workteam"], () => require("./workteam"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:sagemaker/app:App":
                return new App(name, <any>undefined, { urn })
            case "aws:sagemaker/appImageConfig:AppImageConfig":
                return new AppImageConfig(name, <any>undefined, { urn })
            case "aws:sagemaker/codeRepository:CodeRepository":
                return new CodeRepository(name, <any>undefined, { urn })
            case "aws:sagemaker/dataQualityJobDefinition:DataQualityJobDefinition":
                return new DataQualityJobDefinition(name, <any>undefined, { urn })
            case "aws:sagemaker/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "aws:sagemaker/deviceFleet:DeviceFleet":
                return new DeviceFleet(name, <any>undefined, { urn })
            case "aws:sagemaker/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "aws:sagemaker/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "aws:sagemaker/endpointConfiguration:EndpointConfiguration":
                return new EndpointConfiguration(name, <any>undefined, { urn })
            case "aws:sagemaker/featureGroup:FeatureGroup":
                return new FeatureGroup(name, <any>undefined, { urn })
            case "aws:sagemaker/flowDefinition:FlowDefinition":
                return new FlowDefinition(name, <any>undefined, { urn })
            case "aws:sagemaker/humanTaskUI:HumanTaskUI":
                return new HumanTaskUI(name, <any>undefined, { urn })
            case "aws:sagemaker/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "aws:sagemaker/imageVersion:ImageVersion":
                return new ImageVersion(name, <any>undefined, { urn })
            case "aws:sagemaker/model:Model":
                return new Model(name, <any>undefined, { urn })
            case "aws:sagemaker/modelPackageGroup:ModelPackageGroup":
                return new ModelPackageGroup(name, <any>undefined, { urn })
            case "aws:sagemaker/modelPackageGroupPolicy:ModelPackageGroupPolicy":
                return new ModelPackageGroupPolicy(name, <any>undefined, { urn })
            case "aws:sagemaker/monitoringSchedule:MonitoringSchedule":
                return new MonitoringSchedule(name, <any>undefined, { urn })
            case "aws:sagemaker/notebookInstance:NotebookInstance":
                return new NotebookInstance(name, <any>undefined, { urn })
            case "aws:sagemaker/notebookInstanceLifecycleConfiguration:NotebookInstanceLifecycleConfiguration":
                return new NotebookInstanceLifecycleConfiguration(name, <any>undefined, { urn })
            case "aws:sagemaker/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "aws:sagemaker/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "aws:sagemaker/servicecatalogPortfolioStatus:ServicecatalogPortfolioStatus":
                return new ServicecatalogPortfolioStatus(name, <any>undefined, { urn })
            case "aws:sagemaker/space:Space":
                return new Space(name, <any>undefined, { urn })
            case "aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig":
                return new StudioLifecycleConfig(name, <any>undefined, { urn })
            case "aws:sagemaker/userProfile:UserProfile":
                return new UserProfile(name, <any>undefined, { urn })
            case "aws:sagemaker/workforce:Workforce":
                return new Workforce(name, <any>undefined, { urn })
            case "aws:sagemaker/workteam:Workteam":
                return new Workteam(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "sagemaker/app", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/appImageConfig", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/codeRepository", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/dataQualityJobDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/device", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/deviceFleet", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/domain", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/endpoint", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/endpointConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/featureGroup", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/flowDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/humanTaskUI", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/image", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/imageVersion", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/model", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/modelPackageGroup", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/modelPackageGroupPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/monitoringSchedule", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/notebookInstance", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/notebookInstanceLifecycleConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/pipeline", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/project", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/servicecatalogPortfolioStatus", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/space", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/studioLifecycleConfig", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/userProfile", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/workforce", _module)
pulumi.runtime.registerResourceModule("aws", "sagemaker/workteam", _module)
