// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a SageMaker Human Task UI resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const example = new aws.sagemaker.HumanTaskUI("example", {
 *     humanTaskUiName: "example",
 *     uiTemplate: {
 *         content: fs.readFileSync("sagemaker-human-task-ui-template.html"),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import SageMaker Human Task UIs using the `human_task_ui_name`. For example:
 *
 * ```sh
 *  $ pulumi import aws:sagemaker/humanTaskUI:HumanTaskUI example example
 * ```
 */
export class HumanTaskUI extends pulumi.CustomResource {
    /**
     * Get an existing HumanTaskUI resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HumanTaskUIState, opts?: pulumi.CustomResourceOptions): HumanTaskUI {
        return new HumanTaskUI(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:sagemaker/humanTaskUI:HumanTaskUI';

    /**
     * Returns true if the given object is an instance of HumanTaskUI.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HumanTaskUI {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HumanTaskUI.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Human Task UI.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name of the Human Task UI.
     */
    public readonly humanTaskUiName!: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The Liquid template for the worker user interface. See UI Template below.
     */
    public readonly uiTemplate!: pulumi.Output<outputs.sagemaker.HumanTaskUIUiTemplate>;

    /**
     * Create a HumanTaskUI resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HumanTaskUIArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HumanTaskUIArgs | HumanTaskUIState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HumanTaskUIState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["humanTaskUiName"] = state ? state.humanTaskUiName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["uiTemplate"] = state ? state.uiTemplate : undefined;
        } else {
            const args = argsOrState as HumanTaskUIArgs | undefined;
            if ((!args || args.humanTaskUiName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'humanTaskUiName'");
            }
            if ((!args || args.uiTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uiTemplate'");
            }
            resourceInputs["humanTaskUiName"] = args ? args.humanTaskUiName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uiTemplate"] = args ? args.uiTemplate : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HumanTaskUI.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HumanTaskUI resources.
 */
export interface HumanTaskUIState {
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Human Task UI.
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of the Human Task UI.
     */
    humanTaskUiName?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Liquid template for the worker user interface. See UI Template below.
     */
    uiTemplate?: pulumi.Input<inputs.sagemaker.HumanTaskUIUiTemplate>;
}

/**
 * The set of arguments for constructing a HumanTaskUI resource.
 */
export interface HumanTaskUIArgs {
    /**
     * The name of the Human Task UI.
     */
    humanTaskUiName: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Liquid template for the worker user interface. See UI Template below.
     */
    uiTemplate: pulumi.Input<inputs.sagemaker.HumanTaskUIUiTemplate>;
}
