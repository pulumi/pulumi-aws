// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a SageMaker AI Hub resource.
 *
 * ## Example Usage
 *
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sagemaker.Hub("example", {
 *     hubName: "example",
 *     hubDescription: "example",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import SageMaker AI Hubs using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:sagemaker/hub:Hub test_hub my-code-repo
 * ```
 */
export class Hub extends pulumi.CustomResource {
    /**
     * Get an existing Hub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HubState, opts?: pulumi.CustomResourceOptions): Hub {
        return new Hub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:sagemaker/hub:Hub';

    /**
     * Returns true if the given object is an instance of Hub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hub.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Hub.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A description of the hub.
     */
    public readonly hubDescription!: pulumi.Output<string>;
    /**
     * The display name of the hub.
     */
    public readonly hubDisplayName!: pulumi.Output<string | undefined>;
    /**
     * The name of the hub.
     */
    public readonly hubName!: pulumi.Output<string>;
    /**
     * The searchable keywords for the hub.
     */
    public readonly hubSearchKeywords!: pulumi.Output<string[] | undefined>;
    /**
     * The Amazon S3 storage configuration for the hub. See S3 Storage Config details below.
     */
    public readonly s3StorageConfig!: pulumi.Output<outputs.sagemaker.HubS3StorageConfig | undefined>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Hub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HubArgs | HubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HubState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["hubDescription"] = state ? state.hubDescription : undefined;
            resourceInputs["hubDisplayName"] = state ? state.hubDisplayName : undefined;
            resourceInputs["hubName"] = state ? state.hubName : undefined;
            resourceInputs["hubSearchKeywords"] = state ? state.hubSearchKeywords : undefined;
            resourceInputs["s3StorageConfig"] = state ? state.s3StorageConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as HubArgs | undefined;
            if ((!args || args.hubDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hubDescription'");
            }
            if ((!args || args.hubName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hubName'");
            }
            resourceInputs["hubDescription"] = args ? args.hubDescription : undefined;
            resourceInputs["hubDisplayName"] = args ? args.hubDisplayName : undefined;
            resourceInputs["hubName"] = args ? args.hubName : undefined;
            resourceInputs["hubSearchKeywords"] = args ? args.hubSearchKeywords : undefined;
            resourceInputs["s3StorageConfig"] = args ? args.s3StorageConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Hub.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hub resources.
 */
export interface HubState {
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Hub.
     */
    arn?: pulumi.Input<string>;
    /**
     * A description of the hub.
     */
    hubDescription?: pulumi.Input<string>;
    /**
     * The display name of the hub.
     */
    hubDisplayName?: pulumi.Input<string>;
    /**
     * The name of the hub.
     */
    hubName?: pulumi.Input<string>;
    /**
     * The searchable keywords for the hub.
     */
    hubSearchKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Amazon S3 storage configuration for the hub. See S3 Storage Config details below.
     */
    s3StorageConfig?: pulumi.Input<inputs.sagemaker.HubS3StorageConfig>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Hub resource.
 */
export interface HubArgs {
    /**
     * A description of the hub.
     */
    hubDescription: pulumi.Input<string>;
    /**
     * The display name of the hub.
     */
    hubDisplayName?: pulumi.Input<string>;
    /**
     * The name of the hub.
     */
    hubName: pulumi.Input<string>;
    /**
     * The searchable keywords for the hub.
     */
    hubSearchKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Amazon S3 storage configuration for the hub. See S3 Storage Config details below.
     */
    s3StorageConfig?: pulumi.Input<inputs.sagemaker.HubS3StorageConfig>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
