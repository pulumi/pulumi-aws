// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Selection extends pulumi.CustomResource {
    /**
     * Get an existing Selection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SelectionState, opts?: pulumi.CustomResourceOptions): Selection {
        return new Selection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:backup/selection:Selection';

    /**
     * Returns true if the given object is an instance of Selection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Selection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Selection.__pulumiType;
    }

    public readonly conditions!: pulumi.Output<outputs.backup.SelectionCondition[]>;
    public readonly iamRoleArn!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notResources!: pulumi.Output<string[]>;
    public readonly planId!: pulumi.Output<string>;
    public readonly resources!: pulumi.Output<string[] | undefined>;
    public readonly selectionTags!: pulumi.Output<outputs.backup.SelectionSelectionTag[] | undefined>;

    /**
     * Create a Selection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SelectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SelectionArgs | SelectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SelectionState | undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notResources"] = state ? state.notResources : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["selectionTags"] = state ? state.selectionTags : undefined;
        } else {
            const args = argsOrState as SelectionArgs | undefined;
            if ((!args || args.iamRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notResources"] = args ? args.notResources : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["selectionTags"] = args ? args.selectionTags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Selection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Selection resources.
 */
export interface SelectionState {
    conditions?: pulumi.Input<pulumi.Input<inputs.backup.SelectionCondition>[]>;
    iamRoleArn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notResources?: pulumi.Input<pulumi.Input<string>[]>;
    planId?: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    selectionTags?: pulumi.Input<pulumi.Input<inputs.backup.SelectionSelectionTag>[]>;
}

/**
 * The set of arguments for constructing a Selection resource.
 */
export interface SelectionArgs {
    conditions?: pulumi.Input<pulumi.Input<inputs.backup.SelectionCondition>[]>;
    iamRoleArn: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notResources?: pulumi.Input<pulumi.Input<string>[]>;
    planId: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    selectionTags?: pulumi.Input<pulumi.Input<inputs.backup.SelectionSelectionTag>[]>;
}
