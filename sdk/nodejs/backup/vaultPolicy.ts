// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an AWS Backup vault policy resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleVault = new aws.backup.Vault("exampleVault", {});
 * const exampleVaultPolicy = new aws.backup.VaultPolicy("exampleVaultPolicy", {
 *     backupVaultName: exampleVault.name,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Id": "default",
 *   "Statement": [
 *     {
 *       "Sid": "default",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "AWS": "*"
 *       },
 *       "Action": [
 * 		"backup:DescribeBackupVault",
 * 		"backup:DeleteBackupVault",
 * 		"backup:PutBackupVaultAccessPolicy",
 * 		"backup:DeleteBackupVaultAccessPolicy",
 * 		"backup:GetBackupVaultAccessPolicy",
 * 		"backup:StartBackupJob",
 * 		"backup:GetBackupVaultNotifications",
 * 		"backup:PutBackupVaultNotifications"
 *       ],
 *       "Resource": "${exampleVault.arn}"
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Backup vault policy can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:backup/vaultPolicy:VaultPolicy test TestVault
 * ```
 */
export class VaultPolicy extends pulumi.CustomResource {
    /**
     * Get an existing VaultPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultPolicyState, opts?: pulumi.CustomResourceOptions): VaultPolicy {
        return new VaultPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:backup/vaultPolicy:VaultPolicy';

    /**
     * Returns true if the given object is an instance of VaultPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VaultPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VaultPolicy.__pulumiType;
    }

    /**
     * The ARN of the vault.
     */
    public /*out*/ readonly backupVaultArn!: pulumi.Output<string>;
    /**
     * Name of the backup vault to add policy for.
     */
    public readonly backupVaultName!: pulumi.Output<string>;
    /**
     * The backup vault access policy document in JSON format.
     */
    public readonly policy!: pulumi.Output<string>;

    /**
     * Create a VaultPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultPolicyArgs | VaultPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as VaultPolicyState | undefined;
            inputs["backupVaultArn"] = state ? state.backupVaultArn : undefined;
            inputs["backupVaultName"] = state ? state.backupVaultName : undefined;
            inputs["policy"] = state ? state.policy : undefined;
        } else {
            const args = argsOrState as VaultPolicyArgs | undefined;
            if ((!args || args.backupVaultName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'backupVaultName'");
            }
            if ((!args || args.policy === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'policy'");
            }
            inputs["backupVaultName"] = args ? args.backupVaultName : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["backupVaultArn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VaultPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VaultPolicy resources.
 */
export interface VaultPolicyState {
    /**
     * The ARN of the vault.
     */
    readonly backupVaultArn?: pulumi.Input<string>;
    /**
     * Name of the backup vault to add policy for.
     */
    readonly backupVaultName?: pulumi.Input<string>;
    /**
     * The backup vault access policy document in JSON format.
     */
    readonly policy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VaultPolicy resource.
 */
export interface VaultPolicyArgs {
    /**
     * Name of the backup vault to add policy for.
     */
    readonly backupVaultName: pulumi.Input<string>;
    /**
     * The backup vault access policy document in JSON format.
     */
    readonly policy: pulumi.Input<string>;
}
