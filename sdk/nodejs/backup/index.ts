// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FrameworkArgs, FrameworkState } from "./framework";
export type Framework = import("./framework").Framework;
export const Framework: typeof import("./framework").Framework = null as any;
utilities.lazyLoad(exports, ["Framework"], () => require("./framework"));

export { GetFrameworkArgs, GetFrameworkResult, GetFrameworkOutputArgs } from "./getFramework";
export const getFramework: typeof import("./getFramework").getFramework = null as any;
export const getFrameworkOutput: typeof import("./getFramework").getFrameworkOutput = null as any;
utilities.lazyLoad(exports, ["getFramework","getFrameworkOutput"], () => require("./getFramework"));

export { GetPlanArgs, GetPlanResult, GetPlanOutputArgs } from "./getPlan";
export const getPlan: typeof import("./getPlan").getPlan = null as any;
export const getPlanOutput: typeof import("./getPlan").getPlanOutput = null as any;
utilities.lazyLoad(exports, ["getPlan","getPlanOutput"], () => require("./getPlan"));

export { GetReportPlanArgs, GetReportPlanResult, GetReportPlanOutputArgs } from "./getReportPlan";
export const getReportPlan: typeof import("./getReportPlan").getReportPlan = null as any;
export const getReportPlanOutput: typeof import("./getReportPlan").getReportPlanOutput = null as any;
utilities.lazyLoad(exports, ["getReportPlan","getReportPlanOutput"], () => require("./getReportPlan"));

export { GetSelectionArgs, GetSelectionResult, GetSelectionOutputArgs } from "./getSelection";
export const getSelection: typeof import("./getSelection").getSelection = null as any;
export const getSelectionOutput: typeof import("./getSelection").getSelectionOutput = null as any;
utilities.lazyLoad(exports, ["getSelection","getSelectionOutput"], () => require("./getSelection"));

export { GetVaultArgs, GetVaultResult, GetVaultOutputArgs } from "./getVault";
export const getVault: typeof import("./getVault").getVault = null as any;
export const getVaultOutput: typeof import("./getVault").getVaultOutput = null as any;
utilities.lazyLoad(exports, ["getVault","getVaultOutput"], () => require("./getVault"));

export { GlobalSettingsArgs, GlobalSettingsState } from "./globalSettings";
export type GlobalSettings = import("./globalSettings").GlobalSettings;
export const GlobalSettings: typeof import("./globalSettings").GlobalSettings = null as any;
utilities.lazyLoad(exports, ["GlobalSettings"], () => require("./globalSettings"));

export { PlanArgs, PlanState } from "./plan";
export type Plan = import("./plan").Plan;
export const Plan: typeof import("./plan").Plan = null as any;
utilities.lazyLoad(exports, ["Plan"], () => require("./plan"));

export { RegionSettingsArgs, RegionSettingsState } from "./regionSettings";
export type RegionSettings = import("./regionSettings").RegionSettings;
export const RegionSettings: typeof import("./regionSettings").RegionSettings = null as any;
utilities.lazyLoad(exports, ["RegionSettings"], () => require("./regionSettings"));

export { ReportPlanArgs, ReportPlanState } from "./reportPlan";
export type ReportPlan = import("./reportPlan").ReportPlan;
export const ReportPlan: typeof import("./reportPlan").ReportPlan = null as any;
utilities.lazyLoad(exports, ["ReportPlan"], () => require("./reportPlan"));

export { SelectionArgs, SelectionState } from "./selection";
export type Selection = import("./selection").Selection;
export const Selection: typeof import("./selection").Selection = null as any;
utilities.lazyLoad(exports, ["Selection"], () => require("./selection"));

export { VaultArgs, VaultState } from "./vault";
export type Vault = import("./vault").Vault;
export const Vault: typeof import("./vault").Vault = null as any;
utilities.lazyLoad(exports, ["Vault"], () => require("./vault"));

export { VaultLockConfigurationArgs, VaultLockConfigurationState } from "./vaultLockConfiguration";
export type VaultLockConfiguration = import("./vaultLockConfiguration").VaultLockConfiguration;
export const VaultLockConfiguration: typeof import("./vaultLockConfiguration").VaultLockConfiguration = null as any;
utilities.lazyLoad(exports, ["VaultLockConfiguration"], () => require("./vaultLockConfiguration"));

export { VaultNotificationsArgs, VaultNotificationsState } from "./vaultNotifications";
export type VaultNotifications = import("./vaultNotifications").VaultNotifications;
export const VaultNotifications: typeof import("./vaultNotifications").VaultNotifications = null as any;
utilities.lazyLoad(exports, ["VaultNotifications"], () => require("./vaultNotifications"));

export { VaultPolicyArgs, VaultPolicyState } from "./vaultPolicy";
export type VaultPolicy = import("./vaultPolicy").VaultPolicy;
export const VaultPolicy: typeof import("./vaultPolicy").VaultPolicy = null as any;
utilities.lazyLoad(exports, ["VaultPolicy"], () => require("./vaultPolicy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:backup/framework:Framework":
                return new Framework(name, <any>undefined, { urn })
            case "aws:backup/globalSettings:GlobalSettings":
                return new GlobalSettings(name, <any>undefined, { urn })
            case "aws:backup/plan:Plan":
                return new Plan(name, <any>undefined, { urn })
            case "aws:backup/regionSettings:RegionSettings":
                return new RegionSettings(name, <any>undefined, { urn })
            case "aws:backup/reportPlan:ReportPlan":
                return new ReportPlan(name, <any>undefined, { urn })
            case "aws:backup/selection:Selection":
                return new Selection(name, <any>undefined, { urn })
            case "aws:backup/vault:Vault":
                return new Vault(name, <any>undefined, { urn })
            case "aws:backup/vaultLockConfiguration:VaultLockConfiguration":
                return new VaultLockConfiguration(name, <any>undefined, { urn })
            case "aws:backup/vaultNotifications:VaultNotifications":
                return new VaultNotifications(name, <any>undefined, { urn })
            case "aws:backup/vaultPolicy:VaultPolicy":
                return new VaultPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "backup/framework", _module)
pulumi.runtime.registerResourceModule("aws", "backup/globalSettings", _module)
pulumi.runtime.registerResourceModule("aws", "backup/plan", _module)
pulumi.runtime.registerResourceModule("aws", "backup/regionSettings", _module)
pulumi.runtime.registerResourceModule("aws", "backup/reportPlan", _module)
pulumi.runtime.registerResourceModule("aws", "backup/selection", _module)
pulumi.runtime.registerResourceModule("aws", "backup/vault", _module)
pulumi.runtime.registerResourceModule("aws", "backup/vaultLockConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "backup/vaultNotifications", _module)
pulumi.runtime.registerResourceModule("aws", "backup/vaultPolicy", _module)
