// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an AWS Backup Global Settings resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.backup.GlobalSettings("test", {
 *     globalSettings: {
 *         isCrossAccountBackupEnabled: "true",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Backup Global Settings can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:backup/globalSettings:GlobalSettings example 123456789012
 * ```
 */
export class GlobalSettings extends pulumi.CustomResource {
    /**
     * Get an existing GlobalSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalSettingsState, opts?: pulumi.CustomResourceOptions): GlobalSettings {
        return new GlobalSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:backup/globalSettings:GlobalSettings';

    /**
     * Returns true if the given object is an instance of GlobalSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalSettings.__pulumiType;
    }

    /**
     * A list of resources along with the opt-in preferences for the account.
     */
    public readonly globalSettings!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a GlobalSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalSettingsArgs | GlobalSettingsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalSettingsState | undefined;
            inputs["globalSettings"] = state ? state.globalSettings : undefined;
        } else {
            const args = argsOrState as GlobalSettingsArgs | undefined;
            if ((!args || args.globalSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalSettings'");
            }
            inputs["globalSettings"] = args ? args.globalSettings : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(GlobalSettings.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalSettings resources.
 */
export interface GlobalSettingsState {
    /**
     * A list of resources along with the opt-in preferences for the account.
     */
    readonly globalSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a GlobalSettings resource.
 */
export interface GlobalSettingsArgs {
    /**
     * A list of resources along with the opt-in preferences for the account.
     */
    readonly globalSettings: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
