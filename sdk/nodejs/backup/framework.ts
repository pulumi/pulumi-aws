// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an AWS Backup Framework resource.
 *
 * > **Note:** For the Deployment Status of the Framework to be successful, please turn on resource tracking to enable AWS Config recording to track configuration changes of your backup resources. This can be done from the AWS Console.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.backup.Framework("example", {
 *     controls: [
 *         {
 *             inputParameters: [{
 *                 name: "requiredRetentionDays",
 *                 value: "35",
 *             }],
 *             name: "BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK",
 *         },
 *         {
 *             inputParameters: [
 *                 {
 *                     name: "requiredFrequencyUnit",
 *                     value: "hours",
 *                 },
 *                 {
 *                     name: "requiredRetentionDays",
 *                     value: "35",
 *                 },
 *                 {
 *                     name: "requiredFrequencyValue",
 *                     value: "1",
 *                 },
 *             ],
 *             name: "BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK",
 *         },
 *         {
 *             name: "BACKUP_RECOVERY_POINT_ENCRYPTED",
 *         },
 *         {
 *             name: "BACKUP_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
 *             scope: {
 *                 complianceResourceTypes: ["EBS"],
 *             },
 *         },
 *         {
 *             name: "BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED",
 *         },
 *         {
 *             inputParameters: [
 *                 {
 *                     name: "maxRetentionDays",
 *                     value: "100",
 *                 },
 *                 {
 *                     name: "minRetentionDays",
 *                     value: "1",
 *                 },
 *             ],
 *             name: "BACKUP_RESOURCES_PROTECTED_BY_BACKUP_VAULT_LOCK",
 *             scope: {
 *                 complianceResourceTypes: ["EBS"],
 *             },
 *         },
 *         {
 *             inputParameters: [
 *                 {
 *                     name: "recoveryPointAgeUnit",
 *                     value: "days",
 *                 },
 *                 {
 *                     name: "recoveryPointAgeValue",
 *                     value: "1",
 *                 },
 *             ],
 *             name: "BACKUP_LAST_RECOVERY_POINT_CREATED",
 *             scope: {
 *                 complianceResourceTypes: ["EBS"],
 *             },
 *         },
 *     ],
 *     description: "this is an example framework",
 *     tags: {
 *         Name: "Example Framework",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Backup Framework using the `id` which corresponds to the name of the Backup Framework. For example:
 *
 * ```sh
 *  $ pulumi import aws:backup/framework:Framework test <id>
 * ```
 */
export class Framework extends pulumi.CustomResource {
    /**
     * Get an existing Framework resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrameworkState, opts?: pulumi.CustomResourceOptions): Framework {
        return new Framework(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:backup/framework:Framework';

    /**
     * Returns true if the given object is an instance of Framework.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Framework {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Framework.__pulumiType;
    }

    /**
     * The ARN of the backup framework.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
     */
    public readonly controls!: pulumi.Output<outputs.backup.FrameworkControl[]>;
    /**
     * The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED` | `FAILED`.
     */
    public /*out*/ readonly deploymentStatus!: pulumi.Output<string>;
    /**
     * The description of the framework with a maximum of 1,024 characters
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Framework resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrameworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrameworkArgs | FrameworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrameworkState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["controls"] = state ? state.controls : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["deploymentStatus"] = state ? state.deploymentStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as FrameworkArgs | undefined;
            if ((!args || args.controls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controls'");
            }
            resourceInputs["controls"] = args ? args.controls : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["deploymentStatus"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Framework.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Framework resources.
 */
export interface FrameworkState {
    /**
     * The ARN of the backup framework.
     */
    arn?: pulumi.Input<string>;
    /**
     * One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
     */
    controls?: pulumi.Input<pulumi.Input<inputs.backup.FrameworkControl>[]>;
    /**
     * The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED` | `FAILED`.
     */
    deploymentStatus?: pulumi.Input<string>;
    /**
     * The description of the framework with a maximum of 1,024 characters
     */
    description?: pulumi.Input<string>;
    /**
     * The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
     */
    name?: pulumi.Input<string>;
    /**
     * A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)
     */
    status?: pulumi.Input<string>;
    /**
     * Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Framework resource.
 */
export interface FrameworkArgs {
    /**
     * One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
     */
    controls: pulumi.Input<pulumi.Input<inputs.backup.FrameworkControl>[]>;
    /**
     * The description of the framework with a maximum of 1,024 characters
     */
    description?: pulumi.Input<string>;
    /**
     * The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
     */
    name?: pulumi.Input<string>;
    /**
     * Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
