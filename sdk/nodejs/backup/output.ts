// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface FrameworkControl {
    /**
     * One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
     */
    inputParameters?: outputs.FrameworkControlInputParameter[];
    /**
     * The name of a control. This name is between 1 and 256 characters.
     */
    name: string;
    /**
     * The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
     */
    scope?: outputs.FrameworkControlScope;
}
export interface FrameworkControlInputParameter {
    /**
     * The name of a parameter, for example, BackupPlanFrequency.
     */
    name?: string;
    /**
     * The value of parameter, for example, hourly.
     */
    value?: string;
}
export interface FrameworkControlScope {
    /**
     * The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
     */
    complianceResourceIds?: string[];
    /**
     * Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
     */
    complianceResourceTypes?: string[];
    /**
     * The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
     */
    tags?: {[key: string]: string};
}
export interface PlanAdvancedBackupSetting {
    /**
     * Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to `{ WindowsVSS = "enabled" }` to enable Windows VSS backup option and create a VSS Windows backup.
     */
    backupOptions: {[key: string]: string};
    /**
     * The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: `EC2`.
     */
    resourceType: string;
}
export interface PlanRule {
    /**
     * The amount of time in minutes AWS Backup attempts a backup before canceling the job and returning an error.
     */
    completionWindow?: number;
    /**
     * Configuration block(s) with copy operation settings. Detailed below.
     */
    copyActions?: outputs.PlanRuleCopyAction[];
    /**
     * Enable continuous backups for supported resources.
     */
    enableContinuousBackup?: boolean;
    /**
     * The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
     */
    lifecycle?: outputs.PlanRuleLifecycle;
    /**
     * Metadata that you can assign to help organize the resources that you create.
     */
    recoveryPointTags?: {[key: string]: string};
    /**
     * An display name for a backup rule.
     */
    ruleName: string;
    /**
     * A CRON expression specifying when AWS Backup initiates a backup job.
     */
    schedule?: string;
    /**
     * The amount of time in minutes before beginning a backup.
     */
    startWindow?: number;
    /**
     * The name of a logical container where backups are stored.
     */
    targetVaultName: string;
}
export interface PlanRuleCopyAction {
    /**
     * An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
     */
    destinationVaultArn: string;
    /**
     * The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
     */
    lifecycle?: outputs.PlanRuleCopyActionLifecycle;
}
export interface PlanRuleCopyActionLifecycle {
    /**
     * Specifies the number of days after creation that a recovery point is moved to cold storage.
     */
    coldStorageAfter?: number;
    /**
     * Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
     */
    deleteAfter?: number;
    /**
     * This setting will instruct your backup plan to transition supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
     */
    optInToArchiveForSupportedResources: boolean;
}
export interface PlanRuleLifecycle {
    /**
     * Specifies the number of days after creation that a recovery point is moved to cold storage.
     */
    coldStorageAfter?: number;
    /**
     * Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
     */
    deleteAfter?: number;
    /**
     * This setting will instruct your backup plan to transition supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
     */
    optInToArchiveForSupportedResources: boolean;
}
export interface ReportPlanReportDeliveryChannel {
    /**
     * A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
     */
    formats?: string[];
    /**
     * The unique name of the S3 bucket that receives your reports.
     */
    s3BucketName: string;
    /**
     * The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
     */
    s3KeyPrefix?: string;
}
export interface ReportPlanReportSetting {
    /**
     * Specifies the list of accounts a report covers.
     */
    accounts?: string[];
    /**
     * Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
     */
    frameworkArns?: string[];
    /**
     * Specifies the number of frameworks a report covers.
     */
    numberOfFrameworks?: number;
    /**
     * Specifies the list of Organizational Units a report covers.
     */
    organizationUnits?: string[];
    /**
     * Specifies the list of regions a report covers.
     */
    regions?: string[];
    /**
     * Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
     */
    reportTemplate: string;
}
export interface SelectionCondition {
    stringEquals?: outputs.SelectionConditionStringEqual[];
    stringLikes?: outputs.SelectionConditionStringLike[];
    stringNotEquals?: outputs.SelectionConditionStringNotEqual[];
    stringNotLikes?: outputs.SelectionConditionStringNotLike[];
}
export interface SelectionConditionStringEqual {
    key: string;
    value: string;
}
export interface SelectionConditionStringLike {
    key: string;
    value: string;
}
export interface SelectionConditionStringNotEqual {
    key: string;
    value: string;
}
export interface SelectionConditionStringNotLike {
    key: string;
    value: string;
}
export interface SelectionSelectionTag {
    /**
     * The key in a key-value pair.
     */
    key: string;
    /**
     * An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
     */
    type: string;
    /**
     * The value in a key-value pair.
     */
    value: string;
}
export interface GetFrameworkControl {
    /**
     * One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
     */
    inputParameters: outputs.GetFrameworkControlInputParameter[];
    /**
     * Backup framework name.
     */
    name: string;
    /**
     * Scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
     */
    scopes: outputs.GetFrameworkControlScope[];
}
export interface GetFrameworkControlInputParameter {
    /**
     * Backup framework name.
     */
    name: string;
    /**
     * Value of parameter, for example, hourly.
     */
    value: string;
}
export interface GetFrameworkControlScope {
    /**
     * The ID of the only AWS resource that you want your control scope to contain.
     */
    complianceResourceIds: string[];
    /**
     * Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
     */
    complianceResourceTypes: string[];
    /**
     * Tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
     */
    tags: {[key: string]: string};
}
export interface GetReportPlanReportDeliveryChannel {
    /**
     * List of the format of your reports: CSV, JSON, or both.
     */
    formats: string[];
    /**
     * Unique name of the S3 bucket that receives your reports.
     */
    s3BucketName: string;
    /**
     * Prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name.
     */
    s3KeyPrefix: string;
}
export interface GetReportPlanReportSetting {
    /**
     * (Optional) Specifies the list of accounts a report covers.
     */
    accounts: string[];
    /**
     * ARNs of the frameworks a report covers.
     */
    frameworkArns: string[];
    /**
     * Specifies the number of frameworks a report covers.
     */
    numberOfFrameworks: number;
    /**
     * (Optional) Specifies the list of Organizational Units a report covers.
     */
    organizationUnits: string[];
    /**
     * (Optional) Specifies the list of regions a report covers.
     */
    regions: string[];
    /**
     * Identifies the report template for the report. Reports are built using a report template.
     */
    reportTemplate: string;
}
