// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Location Tracker Association.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleGeofenceCollection = new aws.location.GeofenceCollection("exampleGeofenceCollection", {collectionName: "example"});
 * const exampleTracker = new aws.location.Tracker("exampleTracker", {trackerName: "example"});
 * const exampleTrackerAssociation = new aws.location.TrackerAssociation("exampleTrackerAssociation", {
 *     consumerArn: exampleGeofenceCollection.collectionArn,
 *     trackerName: exampleTracker.trackerName,
 * });
 * ```
 *
 * ## Import
 *
 * Location Tracker Association can be imported using the `tracker_name|consumer_arn`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:location/trackerAssociation:TrackerAssociation example "tracker_name|consumer_arn"
 * ```
 */
export class TrackerAssociation extends pulumi.CustomResource {
    /**
     * Get an existing TrackerAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrackerAssociationState, opts?: pulumi.CustomResourceOptions): TrackerAssociation {
        return new TrackerAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:location/trackerAssociation:TrackerAssociation';

    /**
     * Returns true if the given object is an instance of TrackerAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrackerAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrackerAssociation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
     */
    public readonly consumerArn!: pulumi.Output<string>;
    /**
     * The name of the tracker resource to be associated with a geofence collection.
     */
    public readonly trackerName!: pulumi.Output<string>;

    /**
     * Create a TrackerAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrackerAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrackerAssociationArgs | TrackerAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrackerAssociationState | undefined;
            resourceInputs["consumerArn"] = state ? state.consumerArn : undefined;
            resourceInputs["trackerName"] = state ? state.trackerName : undefined;
        } else {
            const args = argsOrState as TrackerAssociationArgs | undefined;
            if ((!args || args.consumerArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerArn'");
            }
            if ((!args || args.trackerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trackerName'");
            }
            resourceInputs["consumerArn"] = args ? args.consumerArn : undefined;
            resourceInputs["trackerName"] = args ? args.trackerName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrackerAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrackerAssociation resources.
 */
export interface TrackerAssociationState {
    /**
     * The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
     */
    consumerArn?: pulumi.Input<string>;
    /**
     * The name of the tracker resource to be associated with a geofence collection.
     */
    trackerName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrackerAssociation resource.
 */
export interface TrackerAssociationArgs {
    /**
     * The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
     */
    consumerArn: pulumi.Input<string>;
    /**
     * The name of the tracker resource to be associated with a geofence collection.
     */
    trackerName: pulumi.Input<string>;
}
