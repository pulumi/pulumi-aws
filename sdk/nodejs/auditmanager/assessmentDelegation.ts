// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Audit Manager Assessment Delegation.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.auditmanager.AssessmentDelegation("example", {
 *     assessmentId: aws_auditmanager_assessment.example.id,
 *     roleArn: aws_iam_role.example.arn,
 *     roleType: "RESOURCE_OWNER",
 *     controlSetId: "example",
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_auditmanager_assessment_delegation.example
 *
 *  id = "abcdef-123456,arn:aws:iam::012345678901:role/example,example" } Using `pulumi import`, import Audit Manager Assessment Delegation using the `id`. For exampleconsole % pulumi import aws_auditmanager_assessment_delegation.example abcdef-123456,arn:aws:iam::012345678901:role/example,example
 */
export class AssessmentDelegation extends pulumi.CustomResource {
    /**
     * Get an existing AssessmentDelegation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssessmentDelegationState, opts?: pulumi.CustomResourceOptions): AssessmentDelegation {
        return new AssessmentDelegation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:auditmanager/assessmentDelegation:AssessmentDelegation';

    /**
     * Returns true if the given object is an instance of AssessmentDelegation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssessmentDelegation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssessmentDelegation.__pulumiType;
    }

    /**
     * Identifier for the assessment.
     */
    public readonly assessmentId!: pulumi.Output<string>;
    /**
     * Comment describing the delegation request.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
     */
    public readonly controlSetId!: pulumi.Output<string>;
    /**
     * Unique identifier for the delegation.
     */
    public /*out*/ readonly delegationId!: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the IAM role.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
     *
     * The following arguments are optional:
     */
    public readonly roleType!: pulumi.Output<string>;
    /**
     * Status of the delegation.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a AssessmentDelegation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssessmentDelegationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssessmentDelegationArgs | AssessmentDelegationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssessmentDelegationState | undefined;
            resourceInputs["assessmentId"] = state ? state.assessmentId : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["controlSetId"] = state ? state.controlSetId : undefined;
            resourceInputs["delegationId"] = state ? state.delegationId : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["roleType"] = state ? state.roleType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AssessmentDelegationArgs | undefined;
            if ((!args || args.assessmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assessmentId'");
            }
            if ((!args || args.controlSetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlSetId'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.roleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleType'");
            }
            resourceInputs["assessmentId"] = args ? args.assessmentId : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["controlSetId"] = args ? args.controlSetId : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["roleType"] = args ? args.roleType : undefined;
            resourceInputs["delegationId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssessmentDelegation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AssessmentDelegation resources.
 */
export interface AssessmentDelegationState {
    /**
     * Identifier for the assessment.
     */
    assessmentId?: pulumi.Input<string>;
    /**
     * Comment describing the delegation request.
     */
    comment?: pulumi.Input<string>;
    /**
     * Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
     */
    controlSetId?: pulumi.Input<string>;
    /**
     * Unique identifier for the delegation.
     */
    delegationId?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the IAM role.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
     *
     * The following arguments are optional:
     */
    roleType?: pulumi.Input<string>;
    /**
     * Status of the delegation.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AssessmentDelegation resource.
 */
export interface AssessmentDelegationArgs {
    /**
     * Identifier for the assessment.
     */
    assessmentId: pulumi.Input<string>;
    /**
     * Comment describing the delegation request.
     */
    comment?: pulumi.Input<string>;
    /**
     * Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
     */
    controlSetId: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the IAM role.
     */
    roleArn: pulumi.Input<string>;
    /**
     * Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
     *
     * The following arguments are optional:
     */
    roleType: pulumi.Input<string>;
}
