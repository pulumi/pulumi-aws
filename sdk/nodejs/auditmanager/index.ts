// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountRegistrationArgs, AccountRegistrationState } from "./accountRegistration";
export type AccountRegistration = import("./accountRegistration").AccountRegistration;
export const AccountRegistration: typeof import("./accountRegistration").AccountRegistration = null as any;
utilities.lazyLoad(exports, ["AccountRegistration"], () => require("./accountRegistration"));

export { AssessmentArgs, AssessmentState } from "./assessment";
export type Assessment = import("./assessment").Assessment;
export const Assessment: typeof import("./assessment").Assessment = null as any;
utilities.lazyLoad(exports, ["Assessment"], () => require("./assessment"));

export { AssessmentDelegationArgs, AssessmentDelegationState } from "./assessmentDelegation";
export type AssessmentDelegation = import("./assessmentDelegation").AssessmentDelegation;
export const AssessmentDelegation: typeof import("./assessmentDelegation").AssessmentDelegation = null as any;
utilities.lazyLoad(exports, ["AssessmentDelegation"], () => require("./assessmentDelegation"));

export { AssessmentReportArgs, AssessmentReportState } from "./assessmentReport";
export type AssessmentReport = import("./assessmentReport").AssessmentReport;
export const AssessmentReport: typeof import("./assessmentReport").AssessmentReport = null as any;
utilities.lazyLoad(exports, ["AssessmentReport"], () => require("./assessmentReport"));

export { ControlArgs, ControlState } from "./control";
export type Control = import("./control").Control;
export const Control: typeof import("./control").Control = null as any;
utilities.lazyLoad(exports, ["Control"], () => require("./control"));

export { FrameworkArgs, FrameworkState } from "./framework";
export type Framework = import("./framework").Framework;
export const Framework: typeof import("./framework").Framework = null as any;
utilities.lazyLoad(exports, ["Framework"], () => require("./framework"));

export { FrameworkShareArgs, FrameworkShareState } from "./frameworkShare";
export type FrameworkShare = import("./frameworkShare").FrameworkShare;
export const FrameworkShare: typeof import("./frameworkShare").FrameworkShare = null as any;
utilities.lazyLoad(exports, ["FrameworkShare"], () => require("./frameworkShare"));

export { GetControlArgs, GetControlResult, GetControlOutputArgs } from "./getControl";
export const getControl: typeof import("./getControl").getControl = null as any;
export const getControlOutput: typeof import("./getControl").getControlOutput = null as any;
utilities.lazyLoad(exports, ["getControl","getControlOutput"], () => require("./getControl"));

export { GetFrameworkArgs, GetFrameworkResult, GetFrameworkOutputArgs } from "./getFramework";
export const getFramework: typeof import("./getFramework").getFramework = null as any;
export const getFrameworkOutput: typeof import("./getFramework").getFrameworkOutput = null as any;
utilities.lazyLoad(exports, ["getFramework","getFrameworkOutput"], () => require("./getFramework"));

export { OrganizationAdminAccountRegistrationArgs, OrganizationAdminAccountRegistrationState } from "./organizationAdminAccountRegistration";
export type OrganizationAdminAccountRegistration = import("./organizationAdminAccountRegistration").OrganizationAdminAccountRegistration;
export const OrganizationAdminAccountRegistration: typeof import("./organizationAdminAccountRegistration").OrganizationAdminAccountRegistration = null as any;
utilities.lazyLoad(exports, ["OrganizationAdminAccountRegistration"], () => require("./organizationAdminAccountRegistration"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:auditmanager/accountRegistration:AccountRegistration":
                return new AccountRegistration(name, <any>undefined, { urn })
            case "aws:auditmanager/assessment:Assessment":
                return new Assessment(name, <any>undefined, { urn })
            case "aws:auditmanager/assessmentDelegation:AssessmentDelegation":
                return new AssessmentDelegation(name, <any>undefined, { urn })
            case "aws:auditmanager/assessmentReport:AssessmentReport":
                return new AssessmentReport(name, <any>undefined, { urn })
            case "aws:auditmanager/control:Control":
                return new Control(name, <any>undefined, { urn })
            case "aws:auditmanager/framework:Framework":
                return new Framework(name, <any>undefined, { urn })
            case "aws:auditmanager/frameworkShare:FrameworkShare":
                return new FrameworkShare(name, <any>undefined, { urn })
            case "aws:auditmanager/organizationAdminAccountRegistration:OrganizationAdminAccountRegistration":
                return new OrganizationAdminAccountRegistration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "auditmanager/accountRegistration", _module)
pulumi.runtime.registerResourceModule("aws", "auditmanager/assessment", _module)
pulumi.runtime.registerResourceModule("aws", "auditmanager/assessmentDelegation", _module)
pulumi.runtime.registerResourceModule("aws", "auditmanager/assessmentReport", _module)
pulumi.runtime.registerResourceModule("aws", "auditmanager/control", _module)
pulumi.runtime.registerResourceModule("aws", "auditmanager/framework", _module)
pulumi.runtime.registerResourceModule("aws", "auditmanager/frameworkShare", _module)
pulumi.runtime.registerResourceModule("aws", "auditmanager/organizationAdminAccountRegistration", _module)
