// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Audit Manager Assessment.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.auditmanager.Assessment("test", {
 *     assessmentReportsDestination: {
 *         destination: `s3://${aws_s3_bucket.test.id}`,
 *         destinationType: "S3",
 *     },
 *     frameworkId: aws_auditmanager_framework.test.id,
 *     roles: [{
 *         roleArn: aws_iam_role.test.arn,
 *         roleType: "PROCESS_OWNER",
 *     }],
 *     scope: {
 *         awsAccounts: [{
 *             id: data.aws_caller_identity.current.account_id,
 *         }],
 *         awsServices: [{
 *             serviceName: "S3",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Audit Manager Assessments using the assessment `id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:auditmanager/assessment:Assessment example abc123-de45
 * ```
 */
export class Assessment extends pulumi.CustomResource {
    /**
     * Get an existing Assessment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssessmentState, opts?: pulumi.CustomResourceOptions): Assessment {
        return new Assessment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:auditmanager/assessment:Assessment';

    /**
     * Returns true if the given object is an instance of Assessment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Assessment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Assessment.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the assessment.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Assessment report storage destination configuration. See `assessmentReportsDestination` below.
     */
    public readonly assessmentReportsDestination!: pulumi.Output<outputs.auditmanager.AssessmentAssessmentReportsDestination | undefined>;
    /**
     * Description of the assessment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the framework the assessment will be created from.
     */
    public readonly frameworkId!: pulumi.Output<string>;
    /**
     * Name of the assessment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of roles for the assessment. See `roles` below.
     */
    public readonly roles!: pulumi.Output<outputs.auditmanager.AssessmentRole[]>;
    /**
     * Complete list of all roles with access to the assessment. This includes both roles explicitly configured via the `roles` block, and any roles which have access to all Audit Manager assessments by default.
     */
    public /*out*/ readonly rolesAlls!: pulumi.Output<outputs.auditmanager.AssessmentRolesAll[]>;
    /**
     * Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
     *
     * The following arguments are optional:
     */
    public readonly scope!: pulumi.Output<outputs.auditmanager.AssessmentScope | undefined>;
    /**
     * Status of the assessment. Valid values are `ACTIVE` and `INACTIVE`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Assessment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssessmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssessmentArgs | AssessmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssessmentState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["assessmentReportsDestination"] = state ? state.assessmentReportsDestination : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["frameworkId"] = state ? state.frameworkId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["rolesAlls"] = state ? state.rolesAlls : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as AssessmentArgs | undefined;
            if ((!args || args.frameworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frameworkId'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            resourceInputs["assessmentReportsDestination"] = args ? args.assessmentReportsDestination : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["frameworkId"] = args ? args.frameworkId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["rolesAlls"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Assessment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Assessment resources.
 */
export interface AssessmentState {
    /**
     * Amazon Resource Name (ARN) of the assessment.
     */
    arn?: pulumi.Input<string>;
    /**
     * Assessment report storage destination configuration. See `assessmentReportsDestination` below.
     */
    assessmentReportsDestination?: pulumi.Input<inputs.auditmanager.AssessmentAssessmentReportsDestination>;
    /**
     * Description of the assessment.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the framework the assessment will be created from.
     */
    frameworkId?: pulumi.Input<string>;
    /**
     * Name of the assessment.
     */
    name?: pulumi.Input<string>;
    /**
     * List of roles for the assessment. See `roles` below.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.auditmanager.AssessmentRole>[]>;
    /**
     * Complete list of all roles with access to the assessment. This includes both roles explicitly configured via the `roles` block, and any roles which have access to all Audit Manager assessments by default.
     */
    rolesAlls?: pulumi.Input<pulumi.Input<inputs.auditmanager.AssessmentRolesAll>[]>;
    /**
     * Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
     *
     * The following arguments are optional:
     */
    scope?: pulumi.Input<inputs.auditmanager.AssessmentScope>;
    /**
     * Status of the assessment. Valid values are `ACTIVE` and `INACTIVE`.
     */
    status?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Assessment resource.
 */
export interface AssessmentArgs {
    /**
     * Assessment report storage destination configuration. See `assessmentReportsDestination` below.
     */
    assessmentReportsDestination?: pulumi.Input<inputs.auditmanager.AssessmentAssessmentReportsDestination>;
    /**
     * Description of the assessment.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the framework the assessment will be created from.
     */
    frameworkId: pulumi.Input<string>;
    /**
     * Name of the assessment.
     */
    name?: pulumi.Input<string>;
    /**
     * List of roles for the assessment. See `roles` below.
     */
    roles: pulumi.Input<pulumi.Input<inputs.auditmanager.AssessmentRole>[]>;
    /**
     * Amazon Web Services accounts and services that are in scope for the assessment. See `scope` below.
     *
     * The following arguments are optional:
     */
    scope?: pulumi.Input<inputs.auditmanager.AssessmentScope>;
    /**
     * A map of tags to assign to the assessment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
