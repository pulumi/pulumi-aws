// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessPointPolicyArgs, AccessPointPolicyState } from "./accessPointPolicy";
export type AccessPointPolicy = import("./accessPointPolicy").AccessPointPolicy;
export const AccessPointPolicy: typeof import("./accessPointPolicy").AccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["AccessPointPolicy"], () => require("./accessPointPolicy"));

export { BucketArgs, BucketState } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { BucketLifecycleConfigurationArgs, BucketLifecycleConfigurationState } from "./bucketLifecycleConfiguration";
export type BucketLifecycleConfiguration = import("./bucketLifecycleConfiguration").BucketLifecycleConfiguration;
export const BucketLifecycleConfiguration: typeof import("./bucketLifecycleConfiguration").BucketLifecycleConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketLifecycleConfiguration"], () => require("./bucketLifecycleConfiguration"));

export { BucketPolicyArgs, BucketPolicyState } from "./bucketPolicy";
export type BucketPolicy = import("./bucketPolicy").BucketPolicy;
export const BucketPolicy: typeof import("./bucketPolicy").BucketPolicy = null as any;
utilities.lazyLoad(exports, ["BucketPolicy"], () => require("./bucketPolicy"));

export { MultiRegionAccessPointArgs, MultiRegionAccessPointState } from "./multiRegionAccessPoint";
export type MultiRegionAccessPoint = import("./multiRegionAccessPoint").MultiRegionAccessPoint;
export const MultiRegionAccessPoint: typeof import("./multiRegionAccessPoint").MultiRegionAccessPoint = null as any;
utilities.lazyLoad(exports, ["MultiRegionAccessPoint"], () => require("./multiRegionAccessPoint"));

export { MultiRegionAccessPointPolicyArgs, MultiRegionAccessPointPolicyState } from "./multiRegionAccessPointPolicy";
export type MultiRegionAccessPointPolicy = import("./multiRegionAccessPointPolicy").MultiRegionAccessPointPolicy;
export const MultiRegionAccessPointPolicy: typeof import("./multiRegionAccessPointPolicy").MultiRegionAccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["MultiRegionAccessPointPolicy"], () => require("./multiRegionAccessPointPolicy"));

export { ObjectLambdaAccessPointArgs, ObjectLambdaAccessPointState } from "./objectLambdaAccessPoint";
export type ObjectLambdaAccessPoint = import("./objectLambdaAccessPoint").ObjectLambdaAccessPoint;
export const ObjectLambdaAccessPoint: typeof import("./objectLambdaAccessPoint").ObjectLambdaAccessPoint = null as any;
utilities.lazyLoad(exports, ["ObjectLambdaAccessPoint"], () => require("./objectLambdaAccessPoint"));

export { ObjectLambdaAccessPointPolicyArgs, ObjectLambdaAccessPointPolicyState } from "./objectLambdaAccessPointPolicy";
export type ObjectLambdaAccessPointPolicy = import("./objectLambdaAccessPointPolicy").ObjectLambdaAccessPointPolicy;
export const ObjectLambdaAccessPointPolicy: typeof import("./objectLambdaAccessPointPolicy").ObjectLambdaAccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["ObjectLambdaAccessPointPolicy"], () => require("./objectLambdaAccessPointPolicy"));

export { StorageLensConfigurationArgs, StorageLensConfigurationState } from "./storageLensConfiguration";
export type StorageLensConfiguration = import("./storageLensConfiguration").StorageLensConfiguration;
export const StorageLensConfiguration: typeof import("./storageLensConfiguration").StorageLensConfiguration = null as any;
utilities.lazyLoad(exports, ["StorageLensConfiguration"], () => require("./storageLensConfiguration"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:s3control/accessPointPolicy:AccessPointPolicy":
                return new AccessPointPolicy(name, <any>undefined, { urn })
            case "aws:s3control/bucket:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "aws:s3control/bucketLifecycleConfiguration:BucketLifecycleConfiguration":
                return new BucketLifecycleConfiguration(name, <any>undefined, { urn })
            case "aws:s3control/bucketPolicy:BucketPolicy":
                return new BucketPolicy(name, <any>undefined, { urn })
            case "aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint":
                return new MultiRegionAccessPoint(name, <any>undefined, { urn })
            case "aws:s3control/multiRegionAccessPointPolicy:MultiRegionAccessPointPolicy":
                return new MultiRegionAccessPointPolicy(name, <any>undefined, { urn })
            case "aws:s3control/objectLambdaAccessPoint:ObjectLambdaAccessPoint":
                return new ObjectLambdaAccessPoint(name, <any>undefined, { urn })
            case "aws:s3control/objectLambdaAccessPointPolicy:ObjectLambdaAccessPointPolicy":
                return new ObjectLambdaAccessPointPolicy(name, <any>undefined, { urn })
            case "aws:s3control/storageLensConfiguration:StorageLensConfiguration":
                return new StorageLensConfiguration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "s3control/accessPointPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "s3control/bucket", _module)
pulumi.runtime.registerResourceModule("aws", "s3control/bucketLifecycleConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3control/bucketPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "s3control/multiRegionAccessPoint", _module)
pulumi.runtime.registerResourceModule("aws", "s3control/multiRegionAccessPointPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "s3control/objectLambdaAccessPoint", _module)
pulumi.runtime.registerResourceModule("aws", "s3control/objectLambdaAccessPointPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "s3control/storageLensConfiguration", _module)
