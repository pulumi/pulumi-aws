// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface AccessGrantAccessGrantsLocationConfiguration {
    /**
     * Sub-prefix.
     */
    s3SubPrefix?: string;
}
export interface AccessGrantGrantee {
    /**
     * Grantee identifier.
     */
    granteeIdentifier: string;
    /**
     * Grantee types. Valid values: `DIRECTORY_USER`, `DIRECTORY_GROUP`, `IAM`.
     */
    granteeType: string;
}
export interface BucketLifecycleConfigurationRule {
    /**
     * Configuration block containing settings for abort incomplete multipart upload.
     */
    abortIncompleteMultipartUpload?: outputs.BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload;
    /**
     * Configuration block containing settings for expiration of objects.
     */
    expiration?: outputs.BucketLifecycleConfigurationRuleExpiration;
    /**
     * Configuration block containing settings for filtering.
     */
    filter?: outputs.BucketLifecycleConfigurationRuleFilter;
    /**
     * Unique identifier for the rule.
     */
    id: string;
    /**
     * Status of the rule. Valid values: `Enabled` and `Disabled`. Defaults to `Enabled`.
     */
    status?: string;
}
export interface BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload {
    daysAfterInitiation: number;
}
export interface BucketLifecycleConfigurationRuleExpiration {
    date?: string;
    days?: number;
    expiredObjectDeleteMarker?: boolean;
}
export interface BucketLifecycleConfigurationRuleFilter {
    prefix?: string;
    tags?: {[key: string]: string};
}
export interface MultiRegionAccessPointDetails {
    name: string;
    publicAccessBlock?: outputs.MultiRegionAccessPointDetailsPublicAccessBlock;
    regions: outputs.MultiRegionAccessPointDetailsRegion[];
}
export interface MultiRegionAccessPointDetailsPublicAccessBlock {
    blockPublicAcls?: boolean;
    blockPublicPolicy?: boolean;
    ignorePublicAcls?: boolean;
    restrictPublicBuckets?: boolean;
}
export interface MultiRegionAccessPointDetailsRegion {
    bucket: string;
    bucketAccountId: string;
    region: string;
}
export interface MultiRegionAccessPointPolicyDetails {
    /**
     * The name of the Multi-Region Access Point.
     */
    name: string;
    /**
     * A valid JSON document that specifies the policy that you want to associate with this Multi-Region Access Point. Once applied, the policy can be edited, but not deleted. For more information, see the documentation on [Multi-Region Access Point Permissions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointPermissions.html).
     *
     * > **NOTE:** When you update the `policy`, the update is first listed as the proposed policy. After the update is finished and all Regions have been updated, the proposed policy is listed as the established policy. If both policies have the same version number, the proposed policy is the established policy.
     */
    policy: string;
}
export interface ObjectLambdaAccessPointConfiguration {
    /**
     * Allowed features. Valid values: `GetObject-Range`, `GetObject-PartNumber`.
     */
    allowedFeatures?: string[];
    /**
     * Whether or not the CloudWatch metrics configuration is enabled.
     */
    cloudWatchMetricsEnabled?: boolean;
    /**
     * Standard access point associated with the Object Lambda Access Point.
     */
    supportingAccessPoint: string;
    /**
     * List of transformation configurations for the Object Lambda Access Point. See Transformation Configuration below for more details.
     */
    transformationConfigurations: outputs.ObjectLambdaAccessPointConfigurationTransformationConfiguration[];
}
export interface ObjectLambdaAccessPointConfigurationTransformationConfiguration {
    /**
     * The actions of an Object Lambda Access Point configuration. Valid values: `GetObject`.
     */
    actions: string[];
    /**
     * The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
     */
    contentTransformation: outputs.ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformation;
}
export interface ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformation {
    /**
     * Configuration for an AWS Lambda function. See AWS Lambda below for more details.
     */
    awsLambda: outputs.ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambda;
}
export interface ObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambda {
    /**
     * The Amazon Resource Name (ARN) of the AWS Lambda function.
     */
    functionArn: string;
    /**
     * Additional JSON that provides supplemental data to the Lambda function used to transform objects.
     */
    functionPayload?: string;
}
export interface StorageLensConfigurationStorageLensConfiguration {
    /**
     * The account-level configurations of the S3 Storage Lens configuration. See Account Level below for more details.
     */
    accountLevel: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevel;
    /**
     * The Amazon Web Services organization for the S3 Storage Lens configuration. See AWS Org below for more details.
     */
    awsOrg?: outputs.StorageLensConfigurationStorageLensConfigurationAwsOrg;
    /**
     * Properties of S3 Storage Lens metrics export including the destination, schema and format. See Data Export below for more details.
     */
    dataExport?: outputs.StorageLensConfigurationStorageLensConfigurationDataExport;
    /**
     * Whether the S3 Storage Lens configuration is enabled.
     */
    enabled: boolean;
    /**
     * What is excluded in this configuration. Conflicts with `include`. See Exclude below for more details.
     */
    exclude?: outputs.StorageLensConfigurationStorageLensConfigurationExclude;
    /**
     * What is included in this configuration. Conflicts with `exclude`. See Include below for more details.
     */
    include?: outputs.StorageLensConfigurationStorageLensConfigurationInclude;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevel {
    /**
     * S3 Storage Lens activity metrics. See Activity Metrics below for more details.
     */
    activityMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetrics;
    /**
     * Advanced cost-optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics below for more details.
     */
    advancedCostOptimizationMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetrics;
    /**
     * Advanced data-protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics below for more details.
     */
    advancedDataProtectionMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetrics;
    /**
     * S3 Storage Lens bucket-level configuration. See Bucket Level below for more details.
     */
    bucketLevel: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevel;
    /**
     * Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics below for more details.
     */
    detailedStatusCodeMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetrics;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetrics {
    /**
     * Whether the activity metrics are enabled.
     */
    enabled?: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedCostOptimizationMetrics {
    /**
     * Whether advanced cost-optimization metrics are enabled.
     */
    enabled?: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelAdvancedDataProtectionMetrics {
    /**
     * Whether advanced data-protection metrics are enabled.
     */
    enabled?: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevel {
    /**
     * S3 Storage Lens activity metrics. See Activity Metrics above for more details.
     */
    activityMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetrics;
    /**
     * Advanced cost-optimization metrics for S3 Storage Lens. See Advanced Cost-Optimization Metrics above for more details.
     */
    advancedCostOptimizationMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetrics;
    /**
     * Advanced data-protection metrics for S3 Storage Lens. See Advanced Data-Protection Metrics above for more details.
     */
    advancedDataProtectionMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetrics;
    /**
     * Detailed status code metrics for S3 Storage Lens. See Detailed Status Code Metrics above for more details.
     */
    detailedStatusCodeMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetrics;
    /**
     * Prefix-level metrics for S3 Storage Lens. See Prefix Level below for more details.
     */
    prefixLevel?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevel;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetrics {
    /**
     * Whether the activity metrics are enabled.
     */
    enabled?: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedCostOptimizationMetrics {
    /**
     * Whether advanced cost-optimization metrics are enabled.
     */
    enabled?: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelAdvancedDataProtectionMetrics {
    /**
     * Whether advanced data-protection metrics are enabled.
     */
    enabled?: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelDetailedStatusCodeMetrics {
    /**
     * Whether detailed status code metrics are enabled.
     */
    enabled?: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevel {
    /**
     * Prefix-level storage metrics for S3 Storage Lens. See Prefix Level Storage Metrics below for more details.
     */
    storageMetrics: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetrics;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetrics {
    /**
     * Whether prefix-level storage metrics are enabled.
     */
    enabled?: boolean;
    /**
     * Selection criteria. See Selection Criteria below for more details.
     */
    selectionCriteria?: outputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteria;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelPrefixLevelStorageMetricsSelectionCriteria {
    /**
     * The delimiter of the selection criteria being used.
     */
    delimiter?: string;
    /**
     * The max depth of the selection criteria.
     */
    maxDepth?: number;
    /**
     * The minimum number of storage bytes percentage whose metrics will be selected.
     */
    minStorageBytesPercentage?: number;
}
export interface StorageLensConfigurationStorageLensConfigurationAccountLevelDetailedStatusCodeMetrics {
    /**
     * Whether detailed status code metrics are enabled.
     */
    enabled?: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationAwsOrg {
    /**
     * The Amazon Resource Name (ARN) of the Amazon Web Services organization.
     */
    arn: string;
}
export interface StorageLensConfigurationStorageLensConfigurationDataExport {
    /**
     * Amazon CloudWatch publishing for S3 Storage Lens metrics. See Cloud Watch Metrics below for more details.
     */
    cloudWatchMetrics?: outputs.StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetrics;
    /**
     * The bucket where the S3 Storage Lens metrics export will be located. See S3 Bucket Destination below for more details.
     */
    s3BucketDestination?: outputs.StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestination;
}
export interface StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetrics {
    /**
     * Whether CloudWatch publishing for S3 Storage Lens metrics is enabled.
     */
    enabled: boolean;
}
export interface StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestination {
    /**
     * The account ID of the owner of the S3 Storage Lens metrics export bucket.
     */
    accountId: string;
    /**
     * The Amazon Resource Name (ARN) of the bucket.
     */
    arn: string;
    /**
     * Encryption of the metrics exports in this bucket. See Encryption below for more details.
     */
    encryption?: outputs.StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryption;
    /**
     * The export format. Valid values: `CSV`, `Parquet`.
     */
    format: string;
    /**
     * The schema version of the export file. Valid values: `V_1`.
     */
    outputSchemaVersion: string;
    /**
     * The prefix of the destination bucket where the metrics export will be delivered.
     */
    prefix?: string;
}
export interface StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryption {
    /**
     * SSE-KMS encryption. See SSE KMS below for more details.
     */
    sseKms?: outputs.StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKms;
    /**
     * SSE-S3 encryption. An empty configuration block `{}` should be used.
     */
    sseS3s?: outputs.StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3[];
}
export interface StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseKms {
    /**
     * KMS key ARN.
     */
    keyId: string;
}
export interface StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionSseS3 {
}
export interface StorageLensConfigurationStorageLensConfigurationExclude {
    /**
     * List of S3 bucket ARNs.
     */
    buckets?: string[];
    /**
     * List of AWS Regions.
     */
    regions?: string[];
}
export interface StorageLensConfigurationStorageLensConfigurationInclude {
    /**
     * List of S3 bucket ARNs.
     */
    buckets?: string[];
    /**
     * List of AWS Regions.
     */
    regions?: string[];
}
export interface GetMultiRegionAccessPointPublicAccessBlock {
    /**
     * Specifies whether Amazon S3 should block public access control lists (ACLs). When set to `true` causes the following behavior:
     * * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
     * * PUT Object calls fail if the request includes a public ACL.
     * * PUT Bucket calls fail if the request includes a public ACL.
     */
    blockPublicAcls: boolean;
    /**
     * Specifies whether Amazon S3 should block public bucket policies for buckets in this account. When set to `true` causes Amazon S3 to:
     * * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
     */
    blockPublicPolicy: boolean;
    /**
     * Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. When set to `true` causes Amazon S3 to:
     * * Ignore all public ACLs on buckets in this account and any objects that they contain.
     */
    ignorePublicAcls: boolean;
    /**
     * Specifies whether Amazon S3 should restrict public bucket policies for buckets in this account. When set to `true`:
     * * Only the bucket owner and AWS Services can access buckets with public policies.
     */
    restrictPublicBuckets: boolean;
}
export interface GetMultiRegionAccessPointRegion {
    /**
     * The name of the bucket.
     */
    bucket: string;
    /**
     * The AWS account ID that owns the bucket.
     */
    bucketAccountId: string;
    /**
     * The name of the region.
     */
    region: string;
}
