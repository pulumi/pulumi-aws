// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetQueueArgs, GetQueueResult, GetQueueOutputArgs } from "./getQueue";
export const getQueue: typeof import("./getQueue").getQueue = null as any;
export const getQueueOutput: typeof import("./getQueue").getQueueOutput = null as any;
utilities.lazyLoad(exports, ["getQueue","getQueueOutput"], () => require("./getQueue"));

export { GetQueuesArgs, GetQueuesResult, GetQueuesOutputArgs } from "./getQueues";
export const getQueues: typeof import("./getQueues").getQueues = null as any;
export const getQueuesOutput: typeof import("./getQueues").getQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getQueues","getQueuesOutput"], () => require("./getQueues"));

export { QueueArgs, QueueState } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { QueuePolicyArgs, QueuePolicyState } from "./queuePolicy";
export type QueuePolicy = import("./queuePolicy").QueuePolicy;
export const QueuePolicy: typeof import("./queuePolicy").QueuePolicy = null as any;
utilities.lazyLoad(exports, ["QueuePolicy"], () => require("./queuePolicy"));

export * from "./redrive";
export { RedriveAllowPolicyArgs, RedriveAllowPolicyState } from "./redriveAllowPolicy";
export type RedriveAllowPolicy = import("./redriveAllowPolicy").RedriveAllowPolicy;
export const RedriveAllowPolicy: typeof import("./redriveAllowPolicy").RedriveAllowPolicy = null as any;
utilities.lazyLoad(exports, ["RedriveAllowPolicy"], () => require("./redriveAllowPolicy"));

export { RedrivePolicyArgs, RedrivePolicyState } from "./redrivePolicy";
export type RedrivePolicy = import("./redrivePolicy").RedrivePolicy;
export const RedrivePolicy: typeof import("./redrivePolicy").RedrivePolicy = null as any;
utilities.lazyLoad(exports, ["RedrivePolicy"], () => require("./redrivePolicy"));

export * from "./sqsMixins";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:sqs/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "aws:sqs/queuePolicy:QueuePolicy":
                return new QueuePolicy(name, <any>undefined, { urn })
            case "aws:sqs/redriveAllowPolicy:RedriveAllowPolicy":
                return new RedriveAllowPolicy(name, <any>undefined, { urn })
            case "aws:sqs/redrivePolicy:RedrivePolicy":
                return new RedrivePolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "sqs/queue", _module)
pulumi.runtime.registerResourceModule("aws", "sqs/queuePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "sqs/redriveAllowPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "sqs/redrivePolicy", _module)
