// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:apigatewayv2/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    public readonly apiId!: pulumi.Output<string>;
    public readonly connectionId!: pulumi.Output<string | undefined>;
    public readonly connectionType!: pulumi.Output<string | undefined>;
    public readonly contentHandlingStrategy!: pulumi.Output<string | undefined>;
    public readonly credentialsArn!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly integrationMethod!: pulumi.Output<string | undefined>;
    public /*out*/ readonly integrationResponseSelectionExpression!: pulumi.Output<string>;
    public readonly integrationSubtype!: pulumi.Output<string | undefined>;
    public readonly integrationType!: pulumi.Output<string>;
    public readonly integrationUri!: pulumi.Output<string | undefined>;
    public readonly passthroughBehavior!: pulumi.Output<string | undefined>;
    public readonly payloadFormatVersion!: pulumi.Output<string | undefined>;
    public readonly requestParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly requestTemplates!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly responseParameters!: pulumi.Output<outputs.apigatewayv2.IntegrationResponseParameter[] | undefined>;
    public readonly templateSelectionExpression!: pulumi.Output<string | undefined>;
    public readonly timeoutMilliseconds!: pulumi.Output<number>;
    public readonly tlsConfig!: pulumi.Output<outputs.apigatewayv2.IntegrationTlsConfig | undefined>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["contentHandlingStrategy"] = state ? state.contentHandlingStrategy : undefined;
            resourceInputs["credentialsArn"] = state ? state.credentialsArn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["integrationMethod"] = state ? state.integrationMethod : undefined;
            resourceInputs["integrationResponseSelectionExpression"] = state ? state.integrationResponseSelectionExpression : undefined;
            resourceInputs["integrationSubtype"] = state ? state.integrationSubtype : undefined;
            resourceInputs["integrationType"] = state ? state.integrationType : undefined;
            resourceInputs["integrationUri"] = state ? state.integrationUri : undefined;
            resourceInputs["passthroughBehavior"] = state ? state.passthroughBehavior : undefined;
            resourceInputs["payloadFormatVersion"] = state ? state.payloadFormatVersion : undefined;
            resourceInputs["requestParameters"] = state ? state.requestParameters : undefined;
            resourceInputs["requestTemplates"] = state ? state.requestTemplates : undefined;
            resourceInputs["responseParameters"] = state ? state.responseParameters : undefined;
            resourceInputs["templateSelectionExpression"] = state ? state.templateSelectionExpression : undefined;
            resourceInputs["timeoutMilliseconds"] = state ? state.timeoutMilliseconds : undefined;
            resourceInputs["tlsConfig"] = state ? state.tlsConfig : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.integrationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationType'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["contentHandlingStrategy"] = args ? args.contentHandlingStrategy : undefined;
            resourceInputs["credentialsArn"] = args ? args.credentialsArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["integrationMethod"] = args ? args.integrationMethod : undefined;
            resourceInputs["integrationSubtype"] = args ? args.integrationSubtype : undefined;
            resourceInputs["integrationType"] = args ? args.integrationType : undefined;
            resourceInputs["integrationUri"] = args ? args.integrationUri : undefined;
            resourceInputs["passthroughBehavior"] = args ? args.passthroughBehavior : undefined;
            resourceInputs["payloadFormatVersion"] = args ? args.payloadFormatVersion : undefined;
            resourceInputs["requestParameters"] = args ? args.requestParameters : undefined;
            resourceInputs["requestTemplates"] = args ? args.requestTemplates : undefined;
            resourceInputs["responseParameters"] = args ? args.responseParameters : undefined;
            resourceInputs["templateSelectionExpression"] = args ? args.templateSelectionExpression : undefined;
            resourceInputs["timeoutMilliseconds"] = args ? args.timeoutMilliseconds : undefined;
            resourceInputs["tlsConfig"] = args ? args.tlsConfig : undefined;
            resourceInputs["integrationResponseSelectionExpression"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Integration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    apiId?: pulumi.Input<string>;
    connectionId?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    contentHandlingStrategy?: pulumi.Input<string>;
    credentialsArn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    integrationMethod?: pulumi.Input<string>;
    integrationResponseSelectionExpression?: pulumi.Input<string>;
    integrationSubtype?: pulumi.Input<string>;
    integrationType?: pulumi.Input<string>;
    integrationUri?: pulumi.Input<string>;
    passthroughBehavior?: pulumi.Input<string>;
    payloadFormatVersion?: pulumi.Input<string>;
    requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    requestTemplates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    responseParameters?: pulumi.Input<pulumi.Input<inputs.apigatewayv2.IntegrationResponseParameter>[]>;
    templateSelectionExpression?: pulumi.Input<string>;
    timeoutMilliseconds?: pulumi.Input<number>;
    tlsConfig?: pulumi.Input<inputs.apigatewayv2.IntegrationTlsConfig>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    apiId: pulumi.Input<string>;
    connectionId?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    contentHandlingStrategy?: pulumi.Input<string>;
    credentialsArn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    integrationMethod?: pulumi.Input<string>;
    integrationSubtype?: pulumi.Input<string>;
    integrationType: pulumi.Input<string>;
    integrationUri?: pulumi.Input<string>;
    passthroughBehavior?: pulumi.Input<string>;
    payloadFormatVersion?: pulumi.Input<string>;
    requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    requestTemplates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    responseParameters?: pulumi.Input<pulumi.Input<inputs.apigatewayv2.IntegrationResponseParameter>[]>;
    templateSelectionExpression?: pulumi.Input<string>;
    timeoutMilliseconds?: pulumi.Input<number>;
    tlsConfig?: pulumi.Input<inputs.apigatewayv2.IntegrationTlsConfig>;
}
