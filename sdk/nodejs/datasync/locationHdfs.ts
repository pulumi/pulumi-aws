// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class LocationHdfs extends pulumi.CustomResource {
    /**
     * Get an existing LocationHdfs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocationHdfsState, opts?: pulumi.CustomResourceOptions): LocationHdfs {
        return new LocationHdfs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:datasync/locationHdfs:LocationHdfs';

    /**
     * Returns true if the given object is an instance of LocationHdfs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocationHdfs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationHdfs.__pulumiType;
    }

    public readonly agentArns!: pulumi.Output<string[]>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authenticationType!: pulumi.Output<string | undefined>;
    public readonly blockSize!: pulumi.Output<number | undefined>;
    public readonly kerberosKeytab!: pulumi.Output<string | undefined>;
    public readonly kerberosKrb5Conf!: pulumi.Output<string | undefined>;
    public readonly kerberosPrincipal!: pulumi.Output<string | undefined>;
    public readonly kmsKeyProviderUri!: pulumi.Output<string | undefined>;
    public readonly nameNodes!: pulumi.Output<outputs.datasync.LocationHdfsNameNode[]>;
    public readonly qopConfiguration!: pulumi.Output<outputs.datasync.LocationHdfsQopConfiguration | undefined>;
    public readonly replicationFactor!: pulumi.Output<number | undefined>;
    public readonly simpleUser!: pulumi.Output<string | undefined>;
    public readonly subdirectory!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a LocationHdfs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationHdfsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocationHdfsArgs | LocationHdfsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocationHdfsState | undefined;
            resourceInputs["agentArns"] = state ? state.agentArns : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["blockSize"] = state ? state.blockSize : undefined;
            resourceInputs["kerberosKeytab"] = state ? state.kerberosKeytab : undefined;
            resourceInputs["kerberosKrb5Conf"] = state ? state.kerberosKrb5Conf : undefined;
            resourceInputs["kerberosPrincipal"] = state ? state.kerberosPrincipal : undefined;
            resourceInputs["kmsKeyProviderUri"] = state ? state.kmsKeyProviderUri : undefined;
            resourceInputs["nameNodes"] = state ? state.nameNodes : undefined;
            resourceInputs["qopConfiguration"] = state ? state.qopConfiguration : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            resourceInputs["simpleUser"] = state ? state.simpleUser : undefined;
            resourceInputs["subdirectory"] = state ? state.subdirectory : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as LocationHdfsArgs | undefined;
            if ((!args || args.agentArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentArns'");
            }
            if ((!args || args.nameNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameNodes'");
            }
            resourceInputs["agentArns"] = args ? args.agentArns : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["blockSize"] = args ? args.blockSize : undefined;
            resourceInputs["kerberosKeytab"] = args ? args.kerberosKeytab : undefined;
            resourceInputs["kerberosKrb5Conf"] = args ? args.kerberosKrb5Conf : undefined;
            resourceInputs["kerberosPrincipal"] = args ? args.kerberosPrincipal : undefined;
            resourceInputs["kmsKeyProviderUri"] = args ? args.kmsKeyProviderUri : undefined;
            resourceInputs["nameNodes"] = args ? args.nameNodes : undefined;
            resourceInputs["qopConfiguration"] = args ? args.qopConfiguration : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            resourceInputs["simpleUser"] = args ? args.simpleUser : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationHdfs.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LocationHdfs resources.
 */
export interface LocationHdfsState {
    agentArns?: pulumi.Input<pulumi.Input<string>[]>;
    arn?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    blockSize?: pulumi.Input<number>;
    kerberosKeytab?: pulumi.Input<string>;
    kerberosKrb5Conf?: pulumi.Input<string>;
    kerberosPrincipal?: pulumi.Input<string>;
    kmsKeyProviderUri?: pulumi.Input<string>;
    nameNodes?: pulumi.Input<pulumi.Input<inputs.datasync.LocationHdfsNameNode>[]>;
    qopConfiguration?: pulumi.Input<inputs.datasync.LocationHdfsQopConfiguration>;
    replicationFactor?: pulumi.Input<number>;
    simpleUser?: pulumi.Input<string>;
    subdirectory?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LocationHdfs resource.
 */
export interface LocationHdfsArgs {
    agentArns: pulumi.Input<pulumi.Input<string>[]>;
    authenticationType?: pulumi.Input<string>;
    blockSize?: pulumi.Input<number>;
    kerberosKeytab?: pulumi.Input<string>;
    kerberosKrb5Conf?: pulumi.Input<string>;
    kerberosPrincipal?: pulumi.Input<string>;
    kmsKeyProviderUri?: pulumi.Input<string>;
    nameNodes: pulumi.Input<pulumi.Input<inputs.datasync.LocationHdfsNameNode>[]>;
    qopConfiguration?: pulumi.Input<inputs.datasync.LocationHdfsQopConfiguration>;
    replicationFactor?: pulumi.Input<number>;
    simpleUser?: pulumi.Input<string>;
    subdirectory?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
