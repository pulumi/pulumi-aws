// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages a Microsoft Azure Blob Storage Location within AWS DataSync.
 *
 * > **NOTE:** The DataSync Agents must be available before creating this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.datasync.LocationAzureBlob("example", {
 *     agentArns: [aws_datasync_agent.example.arn],
 *     authenticationType: "SAS",
 *     containerUrl: "https://example.com/path",
 *     sasConfiguration: {
 *         token: "sp=r&st=2023-12-20T14:54:52Z&se=2023-12-20T22:54:52Z&spr=https&sv=2021-06-08&sr=c&sig=aBBKDWQvyuVcTPH9EBp%2FXTI9E%2F%2Fmq171%2BZU178wcwqU%3D",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * In TODO v1.5.0 and later, use an `import` block to import `aws_datasync_location_azure_blob` using the Amazon Resource Name (ARN). For exampleterraform import {
 *
 *  to = aws_datasync_location_azure_blob.example
 *
 *  id = "arn:aws:datasync:us-east-1:123456789012:location/loc-12345678901234567" } Using `TODO import`, import `aws_datasync_location_azure_blob` using the Amazon Resource Name (ARN). For exampleconsole % TODO import aws_datasync_location_azure_blob.example arn:aws:datasync:us-east-1:123456789012:location/loc-12345678901234567
 */
export class LocationAzureBlob extends pulumi.CustomResource {
    /**
     * Get an existing LocationAzureBlob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocationAzureBlobState, opts?: pulumi.CustomResourceOptions): LocationAzureBlob {
        return new LocationAzureBlob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:datasync/locationAzureBlob:LocationAzureBlob';

    /**
     * Returns true if the given object is an instance of LocationAzureBlob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocationAzureBlob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationAzureBlob.__pulumiType;
    }

    /**
     * The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
     */
    public readonly accessTier!: pulumi.Output<string | undefined>;
    /**
     * A list of DataSync Agent ARNs with which this location will be associated.
     */
    public readonly agentArns!: pulumi.Output<string[]>;
    /**
     * Amazon Resource Name (ARN) of the DataSync Location.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
     */
    public readonly authenticationType!: pulumi.Output<string>;
    /**
     * The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
     */
    public readonly blobType!: pulumi.Output<string | undefined>;
    /**
     * The URL of the Azure Blob Storage container involved in your transfer.
     */
    public readonly containerUrl!: pulumi.Output<string>;
    /**
     * The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
     */
    public readonly sasConfiguration!: pulumi.Output<outputs.datasync.LocationAzureBlobSasConfiguration | undefined>;
    /**
     * Path segments if you want to limit your transfer to a virtual directory in the container.
     */
    public readonly subdirectory!: pulumi.Output<string>;
    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a LocationAzureBlob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationAzureBlobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocationAzureBlobArgs | LocationAzureBlobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocationAzureBlobState | undefined;
            resourceInputs["accessTier"] = state ? state.accessTier : undefined;
            resourceInputs["agentArns"] = state ? state.agentArns : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["blobType"] = state ? state.blobType : undefined;
            resourceInputs["containerUrl"] = state ? state.containerUrl : undefined;
            resourceInputs["sasConfiguration"] = state ? state.sasConfiguration : undefined;
            resourceInputs["subdirectory"] = state ? state.subdirectory : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as LocationAzureBlobArgs | undefined;
            if ((!args || args.agentArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentArns'");
            }
            if ((!args || args.authenticationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationType'");
            }
            if ((!args || args.containerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerUrl'");
            }
            resourceInputs["accessTier"] = args ? args.accessTier : undefined;
            resourceInputs["agentArns"] = args ? args.agentArns : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["blobType"] = args ? args.blobType : undefined;
            resourceInputs["containerUrl"] = args ? args.containerUrl : undefined;
            resourceInputs["sasConfiguration"] = args ? args.sasConfiguration : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationAzureBlob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LocationAzureBlob resources.
 */
export interface LocationAzureBlobState {
    /**
     * The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
     */
    accessTier?: pulumi.Input<string>;
    /**
     * A list of DataSync Agent ARNs with which this location will be associated.
     */
    agentArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Amazon Resource Name (ARN) of the DataSync Location.
     */
    arn?: pulumi.Input<string>;
    /**
     * The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
     */
    blobType?: pulumi.Input<string>;
    /**
     * The URL of the Azure Blob Storage container involved in your transfer.
     */
    containerUrl?: pulumi.Input<string>;
    /**
     * The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
     */
    sasConfiguration?: pulumi.Input<inputs.datasync.LocationAzureBlobSasConfiguration>;
    /**
     * Path segments if you want to limit your transfer to a virtual directory in the container.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LocationAzureBlob resource.
 */
export interface LocationAzureBlobArgs {
    /**
     * The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
     */
    accessTier?: pulumi.Input<string>;
    /**
     * A list of DataSync Agent ARNs with which this location will be associated.
     */
    agentArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
     */
    authenticationType: pulumi.Input<string>;
    /**
     * The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
     */
    blobType?: pulumi.Input<string>;
    /**
     * The URL of the Azure Blob Storage container involved in your transfer.
     */
    containerUrl: pulumi.Input<string>;
    /**
     * The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
     */
    sasConfiguration?: pulumi.Input<inputs.datasync.LocationAzureBlobSasConfiguration>;
    /**
     * Path segments if you want to limit your transfer to a virtual directory in the container.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
