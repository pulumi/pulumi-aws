// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:identitystore/getUser:getUser", {
        "alternateIdentifier": args.alternateIdentifier,
        "filter": args.filter,
        "identityStoreId": args.identityStoreId,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    alternateIdentifier?: inputs.identitystore.GetUserAlternateIdentifier;
    /**
     * @deprecated Use the alternate_identifier attribute instead.
     */
    filter?: inputs.identitystore.GetUserFilter;
    identityStoreId: string;
    userId?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly addresses: outputs.identitystore.GetUserAddress[];
    readonly alternateIdentifier?: outputs.identitystore.GetUserAlternateIdentifier;
    readonly displayName: string;
    readonly emails: outputs.identitystore.GetUserEmail[];
    readonly externalIds: outputs.identitystore.GetUserExternalId[];
    /**
     * @deprecated Use the alternate_identifier attribute instead.
     */
    readonly filter?: outputs.identitystore.GetUserFilter;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly identityStoreId: string;
    readonly locale: string;
    readonly names: outputs.identitystore.GetUserName[];
    readonly nickname: string;
    readonly phoneNumbers: outputs.identitystore.GetUserPhoneNumber[];
    readonly preferredLanguage: string;
    readonly profileUrl: string;
    readonly timezone: string;
    readonly title: string;
    readonly userId: string;
    readonly userName: string;
    readonly userType: string;
}
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    alternateIdentifier?: pulumi.Input<inputs.identitystore.GetUserAlternateIdentifierArgs>;
    /**
     * @deprecated Use the alternate_identifier attribute instead.
     */
    filter?: pulumi.Input<inputs.identitystore.GetUserFilterArgs>;
    identityStoreId: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}
