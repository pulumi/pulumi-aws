// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:identitystore/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public readonly addresses!: pulumi.Output<outputs.identitystore.UserAddresses | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly emails!: pulumi.Output<outputs.identitystore.UserEmails | undefined>;
    public /*out*/ readonly externalIds!: pulumi.Output<outputs.identitystore.UserExternalId[]>;
    public readonly identityStoreId!: pulumi.Output<string>;
    public readonly locale!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<outputs.identitystore.UserName>;
    public readonly nickname!: pulumi.Output<string | undefined>;
    public readonly phoneNumbers!: pulumi.Output<outputs.identitystore.UserPhoneNumbers | undefined>;
    public readonly preferredLanguage!: pulumi.Output<string | undefined>;
    public readonly profileUrl!: pulumi.Output<string | undefined>;
    public readonly timezone!: pulumi.Output<string | undefined>;
    public readonly title!: pulumi.Output<string | undefined>;
    public /*out*/ readonly userId!: pulumi.Output<string>;
    public readonly userName!: pulumi.Output<string>;
    public readonly userType!: pulumi.Output<string | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["emails"] = state ? state.emails : undefined;
            resourceInputs["externalIds"] = state ? state.externalIds : undefined;
            resourceInputs["identityStoreId"] = state ? state.identityStoreId : undefined;
            resourceInputs["locale"] = state ? state.locale : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nickname"] = state ? state.nickname : undefined;
            resourceInputs["phoneNumbers"] = state ? state.phoneNumbers : undefined;
            resourceInputs["preferredLanguage"] = state ? state.preferredLanguage : undefined;
            resourceInputs["profileUrl"] = state ? state.profileUrl : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.identityStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityStoreId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["emails"] = args ? args.emails : undefined;
            resourceInputs["identityStoreId"] = args ? args.identityStoreId : undefined;
            resourceInputs["locale"] = args ? args.locale : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nickname"] = args ? args.nickname : undefined;
            resourceInputs["phoneNumbers"] = args ? args.phoneNumbers : undefined;
            resourceInputs["preferredLanguage"] = args ? args.preferredLanguage : undefined;
            resourceInputs["profileUrl"] = args ? args.profileUrl : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
            resourceInputs["externalIds"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    addresses?: pulumi.Input<inputs.identitystore.UserAddresses>;
    displayName?: pulumi.Input<string>;
    emails?: pulumi.Input<inputs.identitystore.UserEmails>;
    externalIds?: pulumi.Input<pulumi.Input<inputs.identitystore.UserExternalId>[]>;
    identityStoreId?: pulumi.Input<string>;
    locale?: pulumi.Input<string>;
    name?: pulumi.Input<inputs.identitystore.UserName>;
    nickname?: pulumi.Input<string>;
    phoneNumbers?: pulumi.Input<inputs.identitystore.UserPhoneNumbers>;
    preferredLanguage?: pulumi.Input<string>;
    profileUrl?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    addresses?: pulumi.Input<inputs.identitystore.UserAddresses>;
    displayName: pulumi.Input<string>;
    emails?: pulumi.Input<inputs.identitystore.UserEmails>;
    identityStoreId: pulumi.Input<string>;
    locale?: pulumi.Input<string>;
    name?: pulumi.Input<inputs.identitystore.UserName>;
    nickname?: pulumi.Input<string>;
    phoneNumbers?: pulumi.Input<inputs.identitystore.UserPhoneNumbers>;
    preferredLanguage?: pulumi.Input<string>;
    profileUrl?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    userName: pulumi.Input<string>;
    userType?: pulumi.Input<string>;
}
