// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * `aws_identitystore_group_membership` can be imported using the `identity_store_id/membership_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:identitystore/groupMembership:GroupMembership example d-0000000000/00000000-0000-0000-0000-000000000000
 * ```
 */
export class GroupMembership extends pulumi.CustomResource {
    /**
     * Get an existing GroupMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupMembershipState, opts?: pulumi.CustomResourceOptions): GroupMembership {
        return new GroupMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:identitystore/groupMembership:GroupMembership';

    /**
     * Returns true if the given object is an instance of GroupMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupMembership.__pulumiType;
    }

    /**
     * The identifier for a group in the Identity Store.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Identity Store ID associated with the Single Sign-On Instance.
     */
    public readonly identityStoreId!: pulumi.Output<string>;
    /**
     * The identifier for a user in the Identity Store.
     */
    public readonly memberId!: pulumi.Output<string>;
    /**
     * The identifier of the newly created group membership in the Identity Store.
     */
    public /*out*/ readonly membershipId!: pulumi.Output<string>;

    /**
     * Create a GroupMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupMembershipArgs | GroupMembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupMembershipState | undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["identityStoreId"] = state ? state.identityStoreId : undefined;
            resourceInputs["memberId"] = state ? state.memberId : undefined;
            resourceInputs["membershipId"] = state ? state.membershipId : undefined;
        } else {
            const args = argsOrState as GroupMembershipArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.identityStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityStoreId'");
            }
            if ((!args || args.memberId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memberId'");
            }
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["identityStoreId"] = args ? args.identityStoreId : undefined;
            resourceInputs["memberId"] = args ? args.memberId : undefined;
            resourceInputs["membershipId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupMembership.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupMembership resources.
 */
export interface GroupMembershipState {
    /**
     * The identifier for a group in the Identity Store.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Identity Store ID associated with the Single Sign-On Instance.
     */
    identityStoreId?: pulumi.Input<string>;
    /**
     * The identifier for a user in the Identity Store.
     */
    memberId?: pulumi.Input<string>;
    /**
     * The identifier of the newly created group membership in the Identity Store.
     */
    membershipId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupMembership resource.
 */
export interface GroupMembershipArgs {
    /**
     * The identifier for a group in the Identity Store.
     */
    groupId: pulumi.Input<string>;
    /**
     * Identity Store ID associated with the Single Sign-On Instance.
     */
    identityStoreId: pulumi.Input<string>;
    /**
     * The identifier for a user in the Identity Store.
     */
    memberId: pulumi.Input<string>;
}
