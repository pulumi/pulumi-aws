// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class ContainerService extends pulumi.CustomResource {
    /**
     * Get an existing ContainerService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerServiceState, opts?: pulumi.CustomResourceOptions): ContainerService {
        return new ContainerService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lightsail/containerService:ContainerService';

    /**
     * Returns true if the given object is an instance of ContainerService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerService.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly isDisabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly power!: pulumi.Output<string>;
    public /*out*/ readonly powerId!: pulumi.Output<string>;
    public /*out*/ readonly principalArn!: pulumi.Output<string>;
    public /*out*/ readonly privateDomainName!: pulumi.Output<string>;
    public readonly privateRegistryAccess!: pulumi.Output<outputs.lightsail.ContainerServicePrivateRegistryAccess>;
    public readonly publicDomainNames!: pulumi.Output<outputs.lightsail.ContainerServicePublicDomainNames | undefined>;
    public /*out*/ readonly resourceType!: pulumi.Output<string>;
    public readonly scale!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a ContainerService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerServiceArgs | ContainerServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerServiceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["isDisabled"] = state ? state.isDisabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["power"] = state ? state.power : undefined;
            resourceInputs["powerId"] = state ? state.powerId : undefined;
            resourceInputs["principalArn"] = state ? state.principalArn : undefined;
            resourceInputs["privateDomainName"] = state ? state.privateDomainName : undefined;
            resourceInputs["privateRegistryAccess"] = state ? state.privateRegistryAccess : undefined;
            resourceInputs["publicDomainNames"] = state ? state.publicDomainNames : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["scale"] = state ? state.scale : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ContainerServiceArgs | undefined;
            if ((!args || args.power === undefined) && !opts.urn) {
                throw new Error("Missing required property 'power'");
            }
            if ((!args || args.scale === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scale'");
            }
            resourceInputs["isDisabled"] = args ? args.isDisabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["power"] = args ? args.power : undefined;
            resourceInputs["privateRegistryAccess"] = args ? args.privateRegistryAccess : undefined;
            resourceInputs["publicDomainNames"] = args ? args.publicDomainNames : undefined;
            resourceInputs["scale"] = args ? args.scale : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["powerId"] = undefined /*out*/;
            resourceInputs["principalArn"] = undefined /*out*/;
            resourceInputs["privateDomainName"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerService resources.
 */
export interface ContainerServiceState {
    arn?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    power?: pulumi.Input<string>;
    powerId?: pulumi.Input<string>;
    principalArn?: pulumi.Input<string>;
    privateDomainName?: pulumi.Input<string>;
    privateRegistryAccess?: pulumi.Input<inputs.lightsail.ContainerServicePrivateRegistryAccess>;
    publicDomainNames?: pulumi.Input<inputs.lightsail.ContainerServicePublicDomainNames>;
    resourceType?: pulumi.Input<string>;
    scale?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerService resource.
 */
export interface ContainerServiceArgs {
    isDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    power: pulumi.Input<string>;
    privateRegistryAccess?: pulumi.Input<inputs.lightsail.ContainerServicePrivateRegistryAccess>;
    publicDomainNames?: pulumi.Input<inputs.lightsail.ContainerServicePublicDomainNames>;
    scale: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
