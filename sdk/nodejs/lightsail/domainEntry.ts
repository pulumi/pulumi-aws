// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a domain entry resource
 *
 * > **NOTE on `id`:** In an effort to simplify imports, this resource `id` field has been updated to the standard resource id separator, a comma (`,`). For backward compatibility, the previous separator (underscore `_`) can still be used to read and import existing resources. When state is refreshed, the `id` will be updated to use the new standard separator. The previous separator will be deprecated in a future major release.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testDomain = new aws.lightsail.Domain("testDomain", {domainName: "mydomain.com"});
 * const testDomainEntry = new aws.lightsail.DomainEntry("testDomainEntry", {
 *     domainName: aws_lightsail_domain.domain_test.domain_name,
 *     type: "A",
 *     target: "127.0.0.1",
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_lightsail_domain_entry.example
 *
 *  id = "www,mydomain.com,A,127.0.0.1" } Using `pulumi import`, import `aws_lightsail_domain_entry` using the id attribute. For exampleconsole % pulumi import aws_lightsail_domain_entry.example www,mydomain.com,A,127.0.0.1
 */
export class DomainEntry extends pulumi.CustomResource {
    /**
     * Get an existing DomainEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainEntryState, opts?: pulumi.CustomResourceOptions): DomainEntry {
        return new DomainEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lightsail/domainEntry:DomainEntry';

    /**
     * Returns true if the given object is an instance of DomainEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainEntry.__pulumiType;
    }

    /**
     * The name of the Lightsail domain in which to create the entry
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * If the entry should be an alias Defaults to `false`
     */
    public readonly isAlias!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the entry record
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target of the domain entry
     */
    public readonly target!: pulumi.Output<string>;
    /**
     * Type of record
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DomainEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainEntryArgs | DomainEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainEntryState | undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["isAlias"] = state ? state.isAlias : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DomainEntryArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["isAlias"] = args ? args.isAlias : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainEntry resources.
 */
export interface DomainEntryState {
    /**
     * The name of the Lightsail domain in which to create the entry
     */
    domainName?: pulumi.Input<string>;
    /**
     * If the entry should be an alias Defaults to `false`
     */
    isAlias?: pulumi.Input<boolean>;
    /**
     * Name of the entry record
     */
    name?: pulumi.Input<string>;
    /**
     * Target of the domain entry
     */
    target?: pulumi.Input<string>;
    /**
     * Type of record
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DomainEntry resource.
 */
export interface DomainEntryArgs {
    /**
     * The name of the Lightsail domain in which to create the entry
     */
    domainName: pulumi.Input<string>;
    /**
     * If the entry should be an alias Defaults to `false`
     */
    isAlias?: pulumi.Input<boolean>;
    /**
     * Name of the entry record
     */
    name?: pulumi.Input<string>;
    /**
     * Target of the domain entry
     */
    target: pulumi.Input<string>;
    /**
     * Type of record
     */
    type: pulumi.Input<string>;
}
