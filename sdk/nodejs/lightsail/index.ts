// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ContainerServiceArgs, ContainerServiceState } from "./containerService";
export type ContainerService = import("./containerService").ContainerService;
export const ContainerService: typeof import("./containerService").ContainerService = null as any;

export { ContainerServiceDeploymentVersionArgs, ContainerServiceDeploymentVersionState } from "./containerServiceDeploymentVersion";
export type ContainerServiceDeploymentVersion = import("./containerServiceDeploymentVersion").ContainerServiceDeploymentVersion;
export const ContainerServiceDeploymentVersion: typeof import("./containerServiceDeploymentVersion").ContainerServiceDeploymentVersion = null as any;

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;

export { InstancePublicPortsArgs, InstancePublicPortsState } from "./instancePublicPorts";
export type InstancePublicPorts = import("./instancePublicPorts").InstancePublicPorts;
export const InstancePublicPorts: typeof import("./instancePublicPorts").InstancePublicPorts = null as any;

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;

export { StaticIpArgs, StaticIpState } from "./staticIp";
export type StaticIp = import("./staticIp").StaticIp;
export const StaticIp: typeof import("./staticIp").StaticIp = null as any;

export { StaticIpAttachmentArgs, StaticIpAttachmentState } from "./staticIpAttachment";
export type StaticIpAttachment = import("./staticIpAttachment").StaticIpAttachment;
export const StaticIpAttachment: typeof import("./staticIpAttachment").StaticIpAttachment = null as any;

utilities.lazyLoad(exports, ["ContainerService"], () => require("./containerService"));
utilities.lazyLoad(exports, ["ContainerServiceDeploymentVersion"], () => require("./containerServiceDeploymentVersion"));
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
utilities.lazyLoad(exports, ["InstancePublicPorts"], () => require("./instancePublicPorts"));
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));
utilities.lazyLoad(exports, ["StaticIp"], () => require("./staticIp"));
utilities.lazyLoad(exports, ["StaticIpAttachment"], () => require("./staticIpAttachment"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:lightsail/containerService:ContainerService":
                return new ContainerService(name, <any>undefined, { urn })
            case "aws:lightsail/containerServiceDeploymentVersion:ContainerServiceDeploymentVersion":
                return new ContainerServiceDeploymentVersion(name, <any>undefined, { urn })
            case "aws:lightsail/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "aws:lightsail/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "aws:lightsail/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws:lightsail/instancePublicPorts:InstancePublicPorts":
                return new InstancePublicPorts(name, <any>undefined, { urn })
            case "aws:lightsail/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "aws:lightsail/staticIp:StaticIp":
                return new StaticIp(name, <any>undefined, { urn })
            case "aws:lightsail/staticIpAttachment:StaticIpAttachment":
                return new StaticIpAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "lightsail/containerService", _module)
pulumi.runtime.registerResourceModule("aws", "lightsail/containerServiceDeploymentVersion", _module)
pulumi.runtime.registerResourceModule("aws", "lightsail/database", _module)
pulumi.runtime.registerResourceModule("aws", "lightsail/domain", _module)
pulumi.runtime.registerResourceModule("aws", "lightsail/instance", _module)
pulumi.runtime.registerResourceModule("aws", "lightsail/instancePublicPorts", _module)
pulumi.runtime.registerResourceModule("aws", "lightsail/keyPair", _module)
pulumi.runtime.registerResourceModule("aws", "lightsail/staticIp", _module)
pulumi.runtime.registerResourceModule("aws", "lightsail/staticIpAttachment", _module)
