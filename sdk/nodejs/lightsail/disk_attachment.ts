// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Attaches a Lightsail disk to a Lightsail Instance
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const available = aws.getAvailabilityZones({
 *     state: "available",
 *     filters: [{
 *         name: "opt-in-status",
 *         values: ["opt-in-not-required"],
 *     }],
 * });
 * const testDisk = new aws.lightsail.Disk("testDisk", {
 *     sizeInGb: 8,
 *     availabilityZone: available.then(available => available.names?.[0]),
 * });
 * const testInstance = new aws.lightsail.Instance("testInstance", {
 *     availabilityZone: available.then(available => available.names?.[0]),
 *     blueprintId: "amazon_linux_2",
 *     bundleId: "nano_1_0",
 * });
 * const testDisk_attachment = new aws.lightsail.Disk_attachment("testDisk_attachment", {
 *     diskName: testDisk.name,
 *     instanceName: testInstance.name,
 *     diskPath: "/dev/xvdf",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_lightsail_disk` can be imported by using the id attribute, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:lightsail/disk_attachment:Disk_attachment test test-disk,test-instance
 * ```
 */
export class Disk_attachment extends pulumi.CustomResource {
    /**
     * Get an existing Disk_attachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Disk_attachmentState, opts?: pulumi.CustomResourceOptions): Disk_attachment {
        return new Disk_attachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lightsail/disk_attachment:Disk_attachment';

    /**
     * Returns true if the given object is an instance of Disk_attachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Disk_attachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Disk_attachment.__pulumiType;
    }

    /**
     * The name of the Lightsail Disk.
     */
    public readonly diskName!: pulumi.Output<string>;
    /**
     * The disk path to expose to the instance.
     */
    public readonly diskPath!: pulumi.Output<string>;
    /**
     * The name of the Lightsail Instance to attach to.
     */
    public readonly instanceName!: pulumi.Output<string>;

    /**
     * Create a Disk_attachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Disk_attachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Disk_attachmentArgs | Disk_attachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Disk_attachmentState | undefined;
            resourceInputs["diskName"] = state ? state.diskName : undefined;
            resourceInputs["diskPath"] = state ? state.diskPath : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
        } else {
            const args = argsOrState as Disk_attachmentArgs | undefined;
            if ((!args || args.diskName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskName'");
            }
            if ((!args || args.diskPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskPath'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            resourceInputs["diskName"] = args ? args.diskName : undefined;
            resourceInputs["diskPath"] = args ? args.diskPath : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Disk_attachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Disk_attachment resources.
 */
export interface Disk_attachmentState {
    /**
     * The name of the Lightsail Disk.
     */
    diskName?: pulumi.Input<string>;
    /**
     * The disk path to expose to the instance.
     */
    diskPath?: pulumi.Input<string>;
    /**
     * The name of the Lightsail Instance to attach to.
     */
    instanceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Disk_attachment resource.
 */
export interface Disk_attachmentArgs {
    /**
     * The name of the Lightsail Disk.
     */
    diskName: pulumi.Input<string>;
    /**
     * The disk path to expose to the instance.
     */
    diskPath: pulumi.Input<string>;
    /**
     * The name of the Lightsail Instance to attach to.
     */
    instanceName: pulumi.Input<string>;
}
