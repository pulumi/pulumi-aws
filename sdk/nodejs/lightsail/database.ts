// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lightsail/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    public readonly applyImmediately!: pulumi.Output<boolean>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly backupRetentionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly blueprintId!: pulumi.Output<string>;
    public readonly bundleId!: pulumi.Output<string>;
    public /*out*/ readonly caCertificateIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly cpuCount!: pulumi.Output<number>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly diskSize!: pulumi.Output<number>;
    public /*out*/ readonly engine!: pulumi.Output<string>;
    public /*out*/ readonly engineVersion!: pulumi.Output<string>;
    public readonly finalSnapshotName!: pulumi.Output<string | undefined>;
    public readonly masterDatabaseName!: pulumi.Output<string>;
    public /*out*/ readonly masterEndpointAddress!: pulumi.Output<string>;
    public /*out*/ readonly masterEndpointPort!: pulumi.Output<number>;
    public readonly masterPassword!: pulumi.Output<string>;
    public readonly masterUsername!: pulumi.Output<string>;
    public readonly preferredBackupWindow!: pulumi.Output<string>;
    public readonly preferredMaintenanceWindow!: pulumi.Output<string>;
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly ramSize!: pulumi.Output<number>;
    public readonly relationalDatabaseName!: pulumi.Output<string>;
    public /*out*/ readonly secondaryAvailabilityZone!: pulumi.Output<string>;
    public readonly skipFinalSnapshot!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly supportCode!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupRetentionEnabled"] = state ? state.backupRetentionEnabled : undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["bundleId"] = state ? state.bundleId : undefined;
            resourceInputs["caCertificateIdentifier"] = state ? state.caCertificateIdentifier : undefined;
            resourceInputs["cpuCount"] = state ? state.cpuCount : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["finalSnapshotName"] = state ? state.finalSnapshotName : undefined;
            resourceInputs["masterDatabaseName"] = state ? state.masterDatabaseName : undefined;
            resourceInputs["masterEndpointAddress"] = state ? state.masterEndpointAddress : undefined;
            resourceInputs["masterEndpointPort"] = state ? state.masterEndpointPort : undefined;
            resourceInputs["masterPassword"] = state ? state.masterPassword : undefined;
            resourceInputs["masterUsername"] = state ? state.masterUsername : undefined;
            resourceInputs["preferredBackupWindow"] = state ? state.preferredBackupWindow : undefined;
            resourceInputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["ramSize"] = state ? state.ramSize : undefined;
            resourceInputs["relationalDatabaseName"] = state ? state.relationalDatabaseName : undefined;
            resourceInputs["secondaryAvailabilityZone"] = state ? state.secondaryAvailabilityZone : undefined;
            resourceInputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            resourceInputs["supportCode"] = state ? state.supportCode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.bundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bundleId'");
            }
            if ((!args || args.masterDatabaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterDatabaseName'");
            }
            if ((!args || args.masterPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterPassword'");
            }
            if ((!args || args.masterUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterUsername'");
            }
            if ((!args || args.relationalDatabaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relationalDatabaseName'");
            }
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupRetentionEnabled"] = args ? args.backupRetentionEnabled : undefined;
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["finalSnapshotName"] = args ? args.finalSnapshotName : undefined;
            resourceInputs["masterDatabaseName"] = args ? args.masterDatabaseName : undefined;
            resourceInputs["masterPassword"] = args?.masterPassword ? pulumi.secret(args.masterPassword) : undefined;
            resourceInputs["masterUsername"] = args ? args.masterUsername : undefined;
            resourceInputs["preferredBackupWindow"] = args ? args.preferredBackupWindow : undefined;
            resourceInputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["relationalDatabaseName"] = args ? args.relationalDatabaseName : undefined;
            resourceInputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["caCertificateIdentifier"] = undefined /*out*/;
            resourceInputs["cpuCount"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["diskSize"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["masterEndpointAddress"] = undefined /*out*/;
            resourceInputs["masterEndpointPort"] = undefined /*out*/;
            resourceInputs["ramSize"] = undefined /*out*/;
            resourceInputs["secondaryAvailabilityZone"] = undefined /*out*/;
            resourceInputs["supportCode"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["masterPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    applyImmediately?: pulumi.Input<boolean>;
    arn?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    backupRetentionEnabled?: pulumi.Input<boolean>;
    blueprintId?: pulumi.Input<string>;
    bundleId?: pulumi.Input<string>;
    caCertificateIdentifier?: pulumi.Input<string>;
    cpuCount?: pulumi.Input<number>;
    createdAt?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    finalSnapshotName?: pulumi.Input<string>;
    masterDatabaseName?: pulumi.Input<string>;
    masterEndpointAddress?: pulumi.Input<string>;
    masterEndpointPort?: pulumi.Input<number>;
    masterPassword?: pulumi.Input<string>;
    masterUsername?: pulumi.Input<string>;
    preferredBackupWindow?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    publiclyAccessible?: pulumi.Input<boolean>;
    ramSize?: pulumi.Input<number>;
    relationalDatabaseName?: pulumi.Input<string>;
    secondaryAvailabilityZone?: pulumi.Input<string>;
    skipFinalSnapshot?: pulumi.Input<boolean>;
    supportCode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    applyImmediately?: pulumi.Input<boolean>;
    availabilityZone?: pulumi.Input<string>;
    backupRetentionEnabled?: pulumi.Input<boolean>;
    blueprintId: pulumi.Input<string>;
    bundleId: pulumi.Input<string>;
    finalSnapshotName?: pulumi.Input<string>;
    masterDatabaseName: pulumi.Input<string>;
    masterPassword: pulumi.Input<string>;
    masterUsername: pulumi.Input<string>;
    preferredBackupWindow?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    publiclyAccessible?: pulumi.Input<boolean>;
    relationalDatabaseName: pulumi.Input<string>;
    skipFinalSnapshot?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
