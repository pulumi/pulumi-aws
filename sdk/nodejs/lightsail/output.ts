// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface CertificateDomainValidationOption {
    /**
     * A domain name for which the certificate should be issued.
     */
    domainName: string;
    resourceRecordName: string;
    resourceRecordType: string;
    resourceRecordValue: string;
}
export interface ContainerServiceDeploymentVersionContainer {
    /**
     * The launch command for the container. A list of string.
     */
    commands?: string[];
    /**
     * The name for the container.
     */
    containerName: string;
    /**
     * A key-value map of the environment variables of the container.
     */
    environment?: {[key: string]: string};
    /**
     * The name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, `nginx:latest` or `nginx`.
     */
    image: string;
    /**
     * A key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
     */
    ports?: {[key: string]: string};
}
export interface ContainerServiceDeploymentVersionPublicEndpoint {
    /**
     * The name of the container for the endpoint.
     */
    containerName: string;
    /**
     * The port of the container to which traffic is forwarded to.
     */
    containerPort: number;
    /**
     * A configuration block that describes the health check configuration of the container. Detailed below.
     */
    healthCheck: outputs.ContainerServiceDeploymentVersionPublicEndpointHealthCheck;
}
export interface ContainerServiceDeploymentVersionPublicEndpointHealthCheck {
    /**
     * The number of consecutive health checks successes required before moving the container to the Healthy state. Defaults to 2.
     */
    healthyThreshold?: number;
    /**
     * The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. Defaults to 5.
     */
    intervalSeconds?: number;
    /**
     * The path on the container on which to perform the health check. Defaults to "/".
     */
    path?: string;
    /**
     * The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. Defaults to "200-499".
     */
    successCodes?: string;
    /**
     * The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. Defaults to 2.
     */
    timeoutSeconds?: number;
    /**
     * The number of consecutive health checks failures required before moving the container to the Unhealthy state. Defaults to 2.
     */
    unhealthyThreshold?: number;
}
export interface ContainerServicePrivateRegistryAccess {
    /**
     * Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See ECR Image Puller Role below for more details.
     */
    ecrImagePullerRole: outputs.ContainerServicePrivateRegistryAccessEcrImagePullerRole;
}
export interface ContainerServicePrivateRegistryAccessEcrImagePullerRole {
    /**
     * A Boolean value that indicates whether to activate the role. The default is `false`.
     */
    isActive?: boolean;
    /**
     * The principal ARN of the container service. The principal ARN can be used to create a trust
     * relationship between your standard AWS account and your Lightsail container service. This allows you to give your
     * service permission to access resources in your standard AWS account.
     */
    principalArn: string;
}
export interface ContainerServicePublicDomainNames {
    certificates: outputs.ContainerServicePublicDomainNamesCertificate[];
}
export interface ContainerServicePublicDomainNamesCertificate {
    certificateName: string;
    domainNames: string[];
}
export interface DistributionCacheBehavior {
    /**
     * The cache behavior for the specified path.
     */
    behavior: string;
    /**
     * The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/\*), and file types (\*.html, \*jpg, \*js). Directories and file paths are case-sensitive.
     */
    path: string;
}
export interface DistributionCacheBehaviorSettings {
    /**
     * The HTTP methods that are processed and forwarded to the distribution's origin.
     */
    allowedHttpMethods?: string;
    /**
     * The HTTP method responses that are cached by your distribution.
     */
    cachedHttpMethods?: string;
    /**
     * The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
     */
    defaultTtl?: number;
    /**
     * An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. Detailed below
     */
    forwardedCookies?: outputs.DistributionCacheBehaviorSettingsForwardedCookies;
    /**
     * An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. Detailed below
     */
    forwardedHeaders?: outputs.DistributionCacheBehaviorSettingsForwardedHeaders;
    /**
     * An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. Detailed below
     */
    forwardedQueryStrings?: outputs.DistributionCacheBehaviorSettingsForwardedQueryStrings;
    /**
     * The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     */
    maximumTtl?: number;
    /**
     * The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
     */
    minimumTtl?: number;
}
export interface DistributionCacheBehaviorSettingsForwardedCookies {
    /**
     * The specific cookies to forward to your distribution's origin.
     */
    cookiesAllowLists?: string[];
    /**
     * Specifies which cookies to forward to the distribution's origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
     */
    option?: string;
}
export interface DistributionCacheBehaviorSettingsForwardedHeaders {
    /**
     * The specific headers to forward to your distribution's origin.
     */
    headersAllowLists?: string[];
    /**
     * The headers that you want your distribution to forward to your origin and base caching on.
     */
    option?: string;
}
export interface DistributionCacheBehaviorSettingsForwardedQueryStrings {
    /**
     * Indicates whether the distribution forwards and caches based on query strings.
     */
    option?: boolean;
    /**
     * The specific query strings that the distribution forwards to the origin.
     */
    queryStringsAllowedLists?: string[];
}
export interface DistributionDefaultCacheBehavior {
    /**
     * The cache behavior of the distribution. Valid values: `cache` and `dont-cache`.
     */
    behavior: string;
}
export interface DistributionLocation {
    /**
     * The Availability Zone. Follows the format us-east-2a (case-sensitive).
     */
    availabilityZone: string;
    /**
     * The AWS Region name.
     */
    regionName: string;
}
export interface DistributionOrigin {
    /**
     * The name of the origin resource. Your origin can be an instance with an attached static IP, a bucket, or a load balancer that has at least one instance attached to it.
     */
    name: string;
    /**
     * The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
     */
    protocolPolicy?: string;
    /**
     * The AWS Region name of the origin resource.
     */
    regionName: string;
    /**
     * The resource type of the origin resource (e.g., Instance).
     */
    resourceType: string;
}
export interface InstanceAddOn {
    /**
     * The daily time when an automatic snapshot will be created. Must be in HH:00 format, and in an hourly increment and specified in Coordinated Universal Time (UTC). The snapshot will be automatically created between the time specified and up to 45 minutes after.
     */
    snapshotTime: string;
    /**
     * The status of the add on. Valid Values: `Enabled`, `Disabled`.
     */
    status: string;
    /**
     * The add-on type. There is currently only one valid type `AutoSnapshot`.
     */
    type: string;
}
export interface InstancePublicPortsPortInfo {
    /**
     * Set of CIDR aliases that define access for a preconfigured range of IP addresses.
     */
    cidrListAliases: string[];
    /**
     * Set of CIDR blocks.
     */
    cidrs: string[];
    /**
     * First port in a range of open ports on an instance.
     */
    fromPort: number;
    ipv6Cidrs: string[];
    /**
     * IP protocol name. Valid values are `tcp`, `all`, `udp`, and `icmp`.
     */
    protocol: string;
    /**
     * Last port in a range of open ports on an instance.
     *
     * The following arguments are optional:
     */
    toPort: number;
}
export interface LbCertificateDomainValidationRecord {
    /**
     * The domain name (e.g., example.com) for your SSL/TLS certificate.
     */
    domainName: string;
    resourceRecordName: string;
    resourceRecordType: string;
    resourceRecordValue: string;
}
