// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface CustomActionTypeConfigurationProperty {
    /**
     * The description of the action configuration property.
     */
    description?: string;
    /**
     * Whether the configuration property is a key.
     */
    key: boolean;
    /**
     * The name of the action configuration property.
     */
    name: string;
    /**
     * Indicates that the property will be used in conjunction with PollForJobs.
     */
    queryable?: boolean;
    /**
     * Whether the configuration property is a required value.
     */
    required: boolean;
    /**
     * Whether the configuration property is secret.
     */
    secret: boolean;
    /**
     * The type of the configuration property. Valid values: `String`, `Number`, `Boolean`
     */
    type?: string;
}
export interface CustomActionTypeInputArtifactDetails {
    /**
     * The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
     */
    maximumCount: number;
    /**
     * The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
     */
    minimumCount: number;
}
export interface CustomActionTypeOutputArtifactDetails {
    /**
     * The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
     */
    maximumCount: number;
    /**
     * The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
     */
    minimumCount: number;
}
export interface CustomActionTypeSettings {
    /**
     * The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system.
     */
    entityUrlTemplate?: string;
    /**
     * The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system.
     */
    executionUrlTemplate?: string;
    /**
     * The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
     */
    revisionUrlTemplate?: string;
    /**
     * The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
     */
    thirdPartyConfigurationUrl?: string;
}
export interface PipelineArtifactStore {
    /**
     * The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An `encryptionKey` block is documented below.
     */
    encryptionKey?: outputs.PipelineArtifactStoreEncryptionKey;
    /**
     * The location where AWS CodePipeline stores artifacts for a pipeline; currently only `S3` is supported.
     */
    location: string;
    /**
     * The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
     */
    region?: string;
    /**
     * The type of the artifact store, such as Amazon S3
     */
    type: string;
}
export interface PipelineArtifactStoreEncryptionKey {
    /**
     * The KMS key ARN or ID
     */
    id: string;
    /**
     * The type of key; currently only `KMS` is supported
     */
    type: string;
}
export interface PipelineStage {
    /**
     * The action(s) to include in the stage. Defined as an `action` block below
     */
    actions: outputs.PipelineStageAction[];
    /**
     * The name of the stage.
     */
    name: string;
}
export interface PipelineStageAction {
    /**
     * A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
     */
    category: string;
    /**
     * A map of the action declaration's configuration. Configurations options for action types and providers can be found in the [Pipeline Structure Reference](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements) and [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
     */
    configuration?: {[key: string]: string};
    /**
     * A list of artifact names to be worked on.
     */
    inputArtifacts?: string[];
    /**
     * The action declaration's name.
     */
    name: string;
    /**
     * The namespace all output variables will be accessed from.
     */
    namespace?: string;
    /**
     * A list of artifact names to output. Output artifact names must be unique within a pipeline.
     */
    outputArtifacts?: string[];
    /**
     * The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
     */
    owner: string;
    /**
     * The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
     */
    provider: string;
    /**
     * The region in which to run the action.
     */
    region: string;
    /**
     * The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
     */
    roleArn?: string;
    /**
     * The order in which actions are run.
     */
    runOrder: number;
    /**
     * A string that identifies the action type.
     */
    version: string;
}
export interface PipelineTrigger {
    /**
     * Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the [AWS documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-filter.html). A `gitConfiguration` block is documented below.
     */
    gitConfiguration: outputs.PipelineTriggerGitConfiguration;
    /**
     * The source provider for the event. Possible value is `CodeStarSourceConnection`.
     */
    providerType: string;
}
export interface PipelineTriggerGitConfiguration {
    /**
     * The field where the repository event that will start the pipeline is specified as pull requests. A `pullRequest` block is documented below.
     */
    pullRequests?: outputs.PipelineTriggerGitConfigurationPullRequest[];
    /**
     * The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A `push` block is documented below.
     */
    pushes?: outputs.PipelineTriggerGitConfigurationPush[];
    /**
     * The name of the pipeline source action where the trigger configuration.
     */
    sourceActionName: string;
}
export interface PipelineTriggerGitConfigurationPullRequest {
    /**
     * The field that specifies to filter on branches for the pull request trigger configuration. A `branches` block is documented below.
     */
    branches?: outputs.PipelineTriggerGitConfigurationPullRequestBranches;
    /**
     * A list that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration. Possible values are `OPEN`, `UPDATED ` and `CLOSED`.
     */
    events?: string[];
    /**
     * The field that specifies to filter on file paths for the pull request trigger configuration. A `filePaths` block is documented below.
     */
    filePaths?: outputs.PipelineTriggerGitConfigurationPullRequestFilePaths;
}
export interface PipelineTriggerGitConfigurationPullRequestBranches {
    /**
     * A list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.
     */
    excludes?: string[];
    /**
     * A list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.
     */
    includes?: string[];
}
export interface PipelineTriggerGitConfigurationPullRequestFilePaths {
    /**
     * A list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.
     */
    excludes?: string[];
    /**
     * A list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.
     */
    includes?: string[];
}
export interface PipelineTriggerGitConfigurationPush {
    /**
     * The field that specifies to filter on branches for the push trigger configuration. A `branches` block is documented below.
     */
    branches?: outputs.PipelineTriggerGitConfigurationPushBranches;
    /**
     * The field that specifies to filter on file paths for the push trigger configuration. A `filePaths` block is documented below.
     */
    filePaths?: outputs.PipelineTriggerGitConfigurationPushFilePaths;
    /**
     * The field that contains the details for the Git tags trigger configuration. A `tags` block is documented below.
     */
    tags?: outputs.PipelineTriggerGitConfigurationPushTags;
}
export interface PipelineTriggerGitConfigurationPushBranches {
    /**
     * A list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.
     */
    excludes?: string[];
    /**
     * A list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.
     */
    includes?: string[];
}
export interface PipelineTriggerGitConfigurationPushFilePaths {
    /**
     * A list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.
     */
    excludes?: string[];
    /**
     * A list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.
     */
    includes?: string[];
}
export interface PipelineTriggerGitConfigurationPushTags {
    /**
     * A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
     */
    excludes?: string[];
    /**
     * A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
     */
    includes?: string[];
}
export interface PipelineVariable {
    /**
     * The default value of a pipeline-level variable.
     */
    defaultValue?: string;
    /**
     * The description of a pipeline-level variable.
     *
     * > **Note:** The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
     */
    description?: string;
    /**
     * The name of a pipeline-level variable.
     */
    name: string;
}
export interface WebhookAuthenticationConfiguration {
    /**
     * A valid CIDR block for `IP` filtering. Required for `IP`.
     */
    allowedIpRange?: string;
    /**
     * The shared secret for the GitHub repository webhook. Set this as `secret` in your `githubRepositoryWebhook`'s `configuration` block. Required for `GITHUB_HMAC`.
     */
    secretToken?: string;
}
export interface WebhookFilter {
    /**
     * The [JSON path](https://github.com/json-path/JsonPath) to filter on.
     */
    jsonPath: string;
    /**
     * The value to match on (e.g., `refs/heads/{Branch}`). See [AWS docs](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_WebhookFilterRule.html) for details.
     */
    matchEquals: string;
}
