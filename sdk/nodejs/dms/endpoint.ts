// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a DMS (Data Migration Service) endpoint resource. DMS endpoints can be created, updated, deleted, and imported.
 *
 * > **Note:** All arguments including the password will be stored in the raw state as plain-text. ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.dms.Endpoint("test", {
 *     certificateArn: "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
 *     databaseName: "test",
 *     endpointId: "test-dms-endpoint-tf",
 *     endpointType: "source",
 *     engineName: "aurora",
 *     extraConnectionAttributes: "",
 *     kmsKeyArn: "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
 *     password: "test",
 *     port: 3306,
 *     serverName: "test",
 *     sslMode: "none",
 *     tags: {
 *         Name: "test",
 *     },
 *     username: "test",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import endpoints using the `endpoint_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:dms/endpoint:Endpoint test test-dms-endpoint-tf
 * ```
 */
export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:dms/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    /**
     * ARN for the certificate.
     */
    declare public readonly certificateArn: pulumi.Output<string>;
    /**
     * Name of the endpoint database.
     */
    declare public readonly databaseName: pulumi.Output<string | undefined>;
    /**
     * Configuration block for OpenSearch settings. See below.
     */
    declare public readonly elasticsearchSettings: pulumi.Output<outputs.dms.EndpointElasticsearchSettings | undefined>;
    /**
     * ARN for the endpoint.
     */
    declare public /*out*/ readonly endpointArn: pulumi.Output<string>;
    /**
     * Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
     */
    declare public readonly endpointId: pulumi.Output<string>;
    /**
     * Type of endpoint. Valid values are `source`, `target`.
     */
    declare public readonly endpointType: pulumi.Output<string>;
    /**
     * Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `aurora-serverless`, `aurora-postgresql-serverless`,`azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`,`redshift-serverless`, `s3`, `sqlserver`, `neptune` ,`sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
     */
    declare public readonly engineName: pulumi.Output<string>;
    /**
     * Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
     */
    declare public readonly extraConnectionAttributes: pulumi.Output<string>;
    /**
     * Configuration block for Kafka settings. See below.
     */
    declare public readonly kafkaSettings: pulumi.Output<outputs.dms.EndpointKafkaSettings | undefined>;
    /**
     * Configuration block for Kinesis settings. See below.
     */
    declare public readonly kinesisSettings: pulumi.Output<outputs.dms.EndpointKinesisSettings | undefined>;
    /**
     * ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
     *
     * The following arguments are optional:
     */
    declare public readonly kmsKeyArn: pulumi.Output<string>;
    /**
     * Configuration block for MongoDB settings. See below.
     */
    declare public readonly mongodbSettings: pulumi.Output<outputs.dms.EndpointMongodbSettings | undefined>;
    /**
     * Configuration block for Oracle settings. See below.
     */
    declare public readonly oracleSettings: pulumi.Output<outputs.dms.EndpointOracleSettings | undefined>;
    /**
     * Password to be used to login to the endpoint database.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    declare public readonly pauseReplicationTasks: pulumi.Output<boolean | undefined>;
    /**
     * Port used by the endpoint database.
     */
    declare public readonly port: pulumi.Output<number | undefined>;
    /**
     * Configuration block for Postgres settings. See below.
     */
    declare public readonly postgresSettings: pulumi.Output<outputs.dms.EndpointPostgresSettings | undefined>;
    declare public readonly redisSettings: pulumi.Output<outputs.dms.EndpointRedisSettings | undefined>;
    /**
     * Configuration block for Redshift settings. See below.
     */
    declare public readonly redshiftSettings: pulumi.Output<outputs.dms.EndpointRedshiftSettings>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by `secretsManagerArn`. The role must allow the `iam:PassRole` action.
     *
     * > **Note:** You can specify one of two sets of values for these permissions. You can specify the values for this setting and `secretsManagerArn`. Or you can specify clear-text values for `username`, `password` , `serverName`, and `port`. You can't specify both.
     */
    declare public readonly secretsManagerAccessRoleArn: pulumi.Output<string | undefined>;
    /**
     * Full ARN, partial ARN, or friendly name of the Secrets Manager secret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
     */
    declare public readonly secretsManagerArn: pulumi.Output<string | undefined>;
    /**
     * Host name of the server.
     */
    declare public readonly serverName: pulumi.Output<string | undefined>;
    /**
     * ARN used by the service access IAM role for dynamodb endpoints.
     */
    declare public readonly serviceAccessRole: pulumi.Output<string | undefined>;
    /**
     * SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
     */
    declare public readonly sslMode: pulumi.Output<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    /**
     * User name to be used to login to the endpoint database.
     */
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointState | undefined;
            resourceInputs["certificateArn"] = state?.certificateArn;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["elasticsearchSettings"] = state?.elasticsearchSettings;
            resourceInputs["endpointArn"] = state?.endpointArn;
            resourceInputs["endpointId"] = state?.endpointId;
            resourceInputs["endpointType"] = state?.endpointType;
            resourceInputs["engineName"] = state?.engineName;
            resourceInputs["extraConnectionAttributes"] = state?.extraConnectionAttributes;
            resourceInputs["kafkaSettings"] = state?.kafkaSettings;
            resourceInputs["kinesisSettings"] = state?.kinesisSettings;
            resourceInputs["kmsKeyArn"] = state?.kmsKeyArn;
            resourceInputs["mongodbSettings"] = state?.mongodbSettings;
            resourceInputs["oracleSettings"] = state?.oracleSettings;
            resourceInputs["password"] = state?.password;
            resourceInputs["pauseReplicationTasks"] = state?.pauseReplicationTasks;
            resourceInputs["port"] = state?.port;
            resourceInputs["postgresSettings"] = state?.postgresSettings;
            resourceInputs["redisSettings"] = state?.redisSettings;
            resourceInputs["redshiftSettings"] = state?.redshiftSettings;
            resourceInputs["region"] = state?.region;
            resourceInputs["secretsManagerAccessRoleArn"] = state?.secretsManagerAccessRoleArn;
            resourceInputs["secretsManagerArn"] = state?.secretsManagerArn;
            resourceInputs["serverName"] = state?.serverName;
            resourceInputs["serviceAccessRole"] = state?.serviceAccessRole;
            resourceInputs["sslMode"] = state?.sslMode;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if (args?.endpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if (args?.endpointType === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointType'");
            }
            if (args?.engineName === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineName'");
            }
            resourceInputs["certificateArn"] = args?.certificateArn;
            resourceInputs["databaseName"] = args?.databaseName;
            resourceInputs["elasticsearchSettings"] = args?.elasticsearchSettings;
            resourceInputs["endpointId"] = args?.endpointId;
            resourceInputs["endpointType"] = args?.endpointType;
            resourceInputs["engineName"] = args?.engineName;
            resourceInputs["extraConnectionAttributes"] = args?.extraConnectionAttributes;
            resourceInputs["kafkaSettings"] = args?.kafkaSettings;
            resourceInputs["kinesisSettings"] = args?.kinesisSettings;
            resourceInputs["kmsKeyArn"] = args?.kmsKeyArn;
            resourceInputs["mongodbSettings"] = args?.mongodbSettings;
            resourceInputs["oracleSettings"] = args?.oracleSettings;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pauseReplicationTasks"] = args?.pauseReplicationTasks;
            resourceInputs["port"] = args?.port;
            resourceInputs["postgresSettings"] = args?.postgresSettings;
            resourceInputs["redisSettings"] = args?.redisSettings;
            resourceInputs["redshiftSettings"] = args?.redshiftSettings;
            resourceInputs["region"] = args?.region;
            resourceInputs["secretsManagerAccessRoleArn"] = args?.secretsManagerAccessRoleArn;
            resourceInputs["secretsManagerArn"] = args?.secretsManagerArn;
            resourceInputs["serverName"] = args?.serverName;
            resourceInputs["serviceAccessRole"] = args?.serviceAccessRole;
            resourceInputs["sslMode"] = args?.sslMode;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["username"] = args?.username;
            resourceInputs["endpointArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    /**
     * ARN for the certificate.
     */
    certificateArn?: pulumi.Input<string>;
    /**
     * Name of the endpoint database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Configuration block for OpenSearch settings. See below.
     */
    elasticsearchSettings?: pulumi.Input<inputs.dms.EndpointElasticsearchSettings>;
    /**
     * ARN for the endpoint.
     */
    endpointArn?: pulumi.Input<string>;
    /**
     * Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
     */
    endpointId?: pulumi.Input<string>;
    /**
     * Type of endpoint. Valid values are `source`, `target`.
     */
    endpointType?: pulumi.Input<string>;
    /**
     * Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `aurora-serverless`, `aurora-postgresql-serverless`,`azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`,`redshift-serverless`, `s3`, `sqlserver`, `neptune` ,`sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
     */
    engineName?: pulumi.Input<string>;
    /**
     * Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
     */
    extraConnectionAttributes?: pulumi.Input<string>;
    /**
     * Configuration block for Kafka settings. See below.
     */
    kafkaSettings?: pulumi.Input<inputs.dms.EndpointKafkaSettings>;
    /**
     * Configuration block for Kinesis settings. See below.
     */
    kinesisSettings?: pulumi.Input<inputs.dms.EndpointKinesisSettings>;
    /**
     * ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
     *
     * The following arguments are optional:
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * Configuration block for MongoDB settings. See below.
     */
    mongodbSettings?: pulumi.Input<inputs.dms.EndpointMongodbSettings>;
    /**
     * Configuration block for Oracle settings. See below.
     */
    oracleSettings?: pulumi.Input<inputs.dms.EndpointOracleSettings>;
    /**
     * Password to be used to login to the endpoint database.
     */
    password?: pulumi.Input<string>;
    pauseReplicationTasks?: pulumi.Input<boolean>;
    /**
     * Port used by the endpoint database.
     */
    port?: pulumi.Input<number>;
    /**
     * Configuration block for Postgres settings. See below.
     */
    postgresSettings?: pulumi.Input<inputs.dms.EndpointPostgresSettings>;
    redisSettings?: pulumi.Input<inputs.dms.EndpointRedisSettings>;
    /**
     * Configuration block for Redshift settings. See below.
     */
    redshiftSettings?: pulumi.Input<inputs.dms.EndpointRedshiftSettings>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by `secretsManagerArn`. The role must allow the `iam:PassRole` action.
     *
     * > **Note:** You can specify one of two sets of values for these permissions. You can specify the values for this setting and `secretsManagerArn`. Or you can specify clear-text values for `username`, `password` , `serverName`, and `port`. You can't specify both.
     */
    secretsManagerAccessRoleArn?: pulumi.Input<string>;
    /**
     * Full ARN, partial ARN, or friendly name of the Secrets Manager secret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
     */
    secretsManagerArn?: pulumi.Input<string>;
    /**
     * Host name of the server.
     */
    serverName?: pulumi.Input<string>;
    /**
     * ARN used by the service access IAM role for dynamodb endpoints.
     */
    serviceAccessRole?: pulumi.Input<string>;
    /**
     * SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
     */
    sslMode?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User name to be used to login to the endpoint database.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * ARN for the certificate.
     */
    certificateArn?: pulumi.Input<string>;
    /**
     * Name of the endpoint database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Configuration block for OpenSearch settings. See below.
     */
    elasticsearchSettings?: pulumi.Input<inputs.dms.EndpointElasticsearchSettings>;
    /**
     * Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
     */
    endpointId: pulumi.Input<string>;
    /**
     * Type of endpoint. Valid values are `source`, `target`.
     */
    endpointType: pulumi.Input<string>;
    /**
     * Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `aurora-serverless`, `aurora-postgresql-serverless`,`azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`,`redshift-serverless`, `s3`, `sqlserver`, `neptune` ,`sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
     */
    engineName: pulumi.Input<string>;
    /**
     * Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
     */
    extraConnectionAttributes?: pulumi.Input<string>;
    /**
     * Configuration block for Kafka settings. See below.
     */
    kafkaSettings?: pulumi.Input<inputs.dms.EndpointKafkaSettings>;
    /**
     * Configuration block for Kinesis settings. See below.
     */
    kinesisSettings?: pulumi.Input<inputs.dms.EndpointKinesisSettings>;
    /**
     * ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
     *
     * The following arguments are optional:
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * Configuration block for MongoDB settings. See below.
     */
    mongodbSettings?: pulumi.Input<inputs.dms.EndpointMongodbSettings>;
    /**
     * Configuration block for Oracle settings. See below.
     */
    oracleSettings?: pulumi.Input<inputs.dms.EndpointOracleSettings>;
    /**
     * Password to be used to login to the endpoint database.
     */
    password?: pulumi.Input<string>;
    pauseReplicationTasks?: pulumi.Input<boolean>;
    /**
     * Port used by the endpoint database.
     */
    port?: pulumi.Input<number>;
    /**
     * Configuration block for Postgres settings. See below.
     */
    postgresSettings?: pulumi.Input<inputs.dms.EndpointPostgresSettings>;
    redisSettings?: pulumi.Input<inputs.dms.EndpointRedisSettings>;
    /**
     * Configuration block for Redshift settings. See below.
     */
    redshiftSettings?: pulumi.Input<inputs.dms.EndpointRedshiftSettings>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by `secretsManagerArn`. The role must allow the `iam:PassRole` action.
     *
     * > **Note:** You can specify one of two sets of values for these permissions. You can specify the values for this setting and `secretsManagerArn`. Or you can specify clear-text values for `username`, `password` , `serverName`, and `port`. You can't specify both.
     */
    secretsManagerAccessRoleArn?: pulumi.Input<string>;
    /**
     * Full ARN, partial ARN, or friendly name of the Secrets Manager secret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
     */
    secretsManagerArn?: pulumi.Input<string>;
    /**
     * Host name of the server.
     */
    serverName?: pulumi.Input<string>;
    /**
     * ARN used by the service access IAM role for dynamodb endpoints.
     */
    serviceAccessRole?: pulumi.Input<string>;
    /**
     * SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
     */
    sslMode?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User name to be used to login to the endpoint database.
     */
    username?: pulumi.Input<string>;
}
