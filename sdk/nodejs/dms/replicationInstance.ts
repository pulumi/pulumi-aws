// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ReplicationInstance extends pulumi.CustomResource {
    /**
     * Get an existing ReplicationInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReplicationInstanceState, opts?: pulumi.CustomResourceOptions): ReplicationInstance {
        return new ReplicationInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:dms/replicationInstance:ReplicationInstance';

    /**
     * Returns true if the given object is an instance of ReplicationInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReplicationInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicationInstance.__pulumiType;
    }

    public readonly allocatedStorage!: pulumi.Output<number>;
    public readonly allowMajorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly applyImmediately!: pulumi.Output<boolean | undefined>;
    public readonly autoMinorVersionUpgrade!: pulumi.Output<boolean>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly kmsKeyArn!: pulumi.Output<string>;
    public readonly multiAz!: pulumi.Output<boolean>;
    public readonly preferredMaintenanceWindow!: pulumi.Output<string>;
    public readonly publiclyAccessible!: pulumi.Output<boolean>;
    public /*out*/ readonly replicationInstanceArn!: pulumi.Output<string>;
    public readonly replicationInstanceClass!: pulumi.Output<string>;
    public readonly replicationInstanceId!: pulumi.Output<string>;
    public /*out*/ readonly replicationInstancePrivateIps!: pulumi.Output<string[]>;
    public /*out*/ readonly replicationInstancePublicIps!: pulumi.Output<string[]>;
    public readonly replicationSubnetGroupId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a ReplicationInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReplicationInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReplicationInstanceArgs | ReplicationInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReplicationInstanceState | undefined;
            resourceInputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = state ? state.allowMajorVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["replicationInstanceArn"] = state ? state.replicationInstanceArn : undefined;
            resourceInputs["replicationInstanceClass"] = state ? state.replicationInstanceClass : undefined;
            resourceInputs["replicationInstanceId"] = state ? state.replicationInstanceId : undefined;
            resourceInputs["replicationInstancePrivateIps"] = state ? state.replicationInstancePrivateIps : undefined;
            resourceInputs["replicationInstancePublicIps"] = state ? state.replicationInstancePublicIps : undefined;
            resourceInputs["replicationSubnetGroupId"] = state ? state.replicationSubnetGroupId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as ReplicationInstanceArgs | undefined;
            if ((!args || args.replicationInstanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationInstanceClass'");
            }
            if ((!args || args.replicationInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationInstanceId'");
            }
            resourceInputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = args ? args.allowMajorVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["replicationInstanceClass"] = args ? args.replicationInstanceClass : undefined;
            resourceInputs["replicationInstanceId"] = args ? args.replicationInstanceId : undefined;
            resourceInputs["replicationSubnetGroupId"] = args ? args.replicationSubnetGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["replicationInstanceArn"] = undefined /*out*/;
            resourceInputs["replicationInstancePrivateIps"] = undefined /*out*/;
            resourceInputs["replicationInstancePublicIps"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReplicationInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReplicationInstance resources.
 */
export interface ReplicationInstanceState {
    allocatedStorage?: pulumi.Input<number>;
    allowMajorVersionUpgrade?: pulumi.Input<boolean>;
    applyImmediately?: pulumi.Input<boolean>;
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    availabilityZone?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    multiAz?: pulumi.Input<boolean>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    publiclyAccessible?: pulumi.Input<boolean>;
    replicationInstanceArn?: pulumi.Input<string>;
    replicationInstanceClass?: pulumi.Input<string>;
    replicationInstanceId?: pulumi.Input<string>;
    replicationInstancePrivateIps?: pulumi.Input<pulumi.Input<string>[]>;
    replicationInstancePublicIps?: pulumi.Input<pulumi.Input<string>[]>;
    replicationSubnetGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ReplicationInstance resource.
 */
export interface ReplicationInstanceArgs {
    allocatedStorage?: pulumi.Input<number>;
    allowMajorVersionUpgrade?: pulumi.Input<boolean>;
    applyImmediately?: pulumi.Input<boolean>;
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    availabilityZone?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    multiAz?: pulumi.Input<boolean>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    publiclyAccessible?: pulumi.Input<boolean>;
    replicationInstanceClass: pulumi.Input<string>;
    replicationInstanceId: pulumi.Input<string>;
    replicationSubnetGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
