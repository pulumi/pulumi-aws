// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Canary extends pulumi.CustomResource {
    /**
     * Get an existing Canary resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CanaryState, opts?: pulumi.CustomResourceOptions): Canary {
        return new Canary(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:synthetics/canary:Canary';

    /**
     * Returns true if the given object is an instance of Canary.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Canary {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Canary.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly artifactConfig!: pulumi.Output<outputs.synthetics.CanaryArtifactConfig | undefined>;
    public readonly artifactS3Location!: pulumi.Output<string>;
    public readonly deleteLambda!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly engineArn!: pulumi.Output<string>;
    public readonly executionRoleArn!: pulumi.Output<string>;
    public readonly failureRetentionPeriod!: pulumi.Output<number | undefined>;
    public readonly handler!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly runConfig!: pulumi.Output<outputs.synthetics.CanaryRunConfig>;
    public readonly runtimeVersion!: pulumi.Output<string>;
    public readonly s3Bucket!: pulumi.Output<string | undefined>;
    public readonly s3Key!: pulumi.Output<string | undefined>;
    public readonly s3Version!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<outputs.synthetics.CanarySchedule>;
    public /*out*/ readonly sourceLocationArn!: pulumi.Output<string>;
    public readonly startCanary!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly successRetentionPeriod!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timelines!: pulumi.Output<outputs.synthetics.CanaryTimeline[]>;
    public readonly vpcConfig!: pulumi.Output<outputs.synthetics.CanaryVpcConfig | undefined>;
    public readonly zipFile!: pulumi.Output<string | undefined>;

    /**
     * Create a Canary resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CanaryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CanaryArgs | CanaryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CanaryState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["artifactConfig"] = state ? state.artifactConfig : undefined;
            resourceInputs["artifactS3Location"] = state ? state.artifactS3Location : undefined;
            resourceInputs["deleteLambda"] = state ? state.deleteLambda : undefined;
            resourceInputs["engineArn"] = state ? state.engineArn : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["failureRetentionPeriod"] = state ? state.failureRetentionPeriod : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["runConfig"] = state ? state.runConfig : undefined;
            resourceInputs["runtimeVersion"] = state ? state.runtimeVersion : undefined;
            resourceInputs["s3Bucket"] = state ? state.s3Bucket : undefined;
            resourceInputs["s3Key"] = state ? state.s3Key : undefined;
            resourceInputs["s3Version"] = state ? state.s3Version : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["sourceLocationArn"] = state ? state.sourceLocationArn : undefined;
            resourceInputs["startCanary"] = state ? state.startCanary : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["successRetentionPeriod"] = state ? state.successRetentionPeriod : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timelines"] = state ? state.timelines : undefined;
            resourceInputs["vpcConfig"] = state ? state.vpcConfig : undefined;
            resourceInputs["zipFile"] = state ? state.zipFile : undefined;
        } else {
            const args = argsOrState as CanaryArgs | undefined;
            if ((!args || args.artifactS3Location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'artifactS3Location'");
            }
            if ((!args || args.executionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRoleArn'");
            }
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if ((!args || args.runtimeVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeVersion'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["artifactConfig"] = args ? args.artifactConfig : undefined;
            resourceInputs["artifactS3Location"] = args ? args.artifactS3Location : undefined;
            resourceInputs["deleteLambda"] = args ? args.deleteLambda : undefined;
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["failureRetentionPeriod"] = args ? args.failureRetentionPeriod : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["runConfig"] = args ? args.runConfig : undefined;
            resourceInputs["runtimeVersion"] = args ? args.runtimeVersion : undefined;
            resourceInputs["s3Bucket"] = args ? args.s3Bucket : undefined;
            resourceInputs["s3Key"] = args ? args.s3Key : undefined;
            resourceInputs["s3Version"] = args ? args.s3Version : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["startCanary"] = args ? args.startCanary : undefined;
            resourceInputs["successRetentionPeriod"] = args ? args.successRetentionPeriod : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["zipFile"] = args ? args.zipFile : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["engineArn"] = undefined /*out*/;
            resourceInputs["sourceLocationArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["timelines"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Canary.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Canary resources.
 */
export interface CanaryState {
    arn?: pulumi.Input<string>;
    artifactConfig?: pulumi.Input<inputs.synthetics.CanaryArtifactConfig>;
    artifactS3Location?: pulumi.Input<string>;
    deleteLambda?: pulumi.Input<boolean>;
    engineArn?: pulumi.Input<string>;
    executionRoleArn?: pulumi.Input<string>;
    failureRetentionPeriod?: pulumi.Input<number>;
    handler?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    runConfig?: pulumi.Input<inputs.synthetics.CanaryRunConfig>;
    runtimeVersion?: pulumi.Input<string>;
    s3Bucket?: pulumi.Input<string>;
    s3Key?: pulumi.Input<string>;
    s3Version?: pulumi.Input<string>;
    schedule?: pulumi.Input<inputs.synthetics.CanarySchedule>;
    sourceLocationArn?: pulumi.Input<string>;
    startCanary?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    successRetentionPeriod?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timelines?: pulumi.Input<pulumi.Input<inputs.synthetics.CanaryTimeline>[]>;
    vpcConfig?: pulumi.Input<inputs.synthetics.CanaryVpcConfig>;
    zipFile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Canary resource.
 */
export interface CanaryArgs {
    artifactConfig?: pulumi.Input<inputs.synthetics.CanaryArtifactConfig>;
    artifactS3Location: pulumi.Input<string>;
    deleteLambda?: pulumi.Input<boolean>;
    executionRoleArn: pulumi.Input<string>;
    failureRetentionPeriod?: pulumi.Input<number>;
    handler: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    runConfig?: pulumi.Input<inputs.synthetics.CanaryRunConfig>;
    runtimeVersion: pulumi.Input<string>;
    s3Bucket?: pulumi.Input<string>;
    s3Key?: pulumi.Input<string>;
    s3Version?: pulumi.Input<string>;
    schedule: pulumi.Input<inputs.synthetics.CanarySchedule>;
    startCanary?: pulumi.Input<boolean>;
    successRetentionPeriod?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcConfig?: pulumi.Input<inputs.synthetics.CanaryVpcConfig>;
    zipFile?: pulumi.Input<string>;
}
