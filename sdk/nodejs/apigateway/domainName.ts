// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * API Gateway domain names can be imported using their `name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:apigateway/domainName:DomainName example dev.example.com
 * ```
 */
export class DomainName extends pulumi.CustomResource {
    /**
     * Get an existing DomainName resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainNameState, opts?: pulumi.CustomResourceOptions): DomainName {
        return new DomainName(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:apigateway/domainName:DomainName';

    /**
     * Returns true if the given object is an instance of DomainName.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainName {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainName.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN)
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
     */
    public readonly certificateArn!: pulumi.Output<string | undefined>;
    /**
     * The certificate issued for the domain name
     * being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and
     * `regionalCertificateName`.
     */
    public readonly certificateBody!: pulumi.Output<string | undefined>;
    /**
     * The certificate for the CA that issued the
     * certificate, along with any intermediate CA certificates required to
     * create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`,
     * `regionalCertificateArn`, and `regionalCertificateName`.
     */
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    /**
     * The unique name to use when registering this
     * certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and
     * `regionalCertificateName`. Required if `certificateArn` is not set.
     */
    public readonly certificateName!: pulumi.Output<string | undefined>;
    /**
     * The private key associated with the
     * domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
     */
    public readonly certificatePrivateKey!: pulumi.Output<string | undefined>;
    /**
     * The upload date associated with the domain certificate.
     */
    public /*out*/ readonly certificateUploadDate!: pulumi.Output<string>;
    /**
     * The hostname created by Cloudfront to represent
     * the distribution that implements this domain name mapping.
     */
    public /*out*/ readonly cloudfrontDomainName!: pulumi.Output<string>;
    /**
     * For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`)
     * that can be used to create a Route53 alias record for the distribution.
     */
    public /*out*/ readonly cloudfrontZoneId!: pulumi.Output<string>;
    /**
     * The fully-qualified domain name to register
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Configuration block defining API endpoint information including type. Defined below.
     */
    public readonly endpointConfiguration!: pulumi.Output<outputs.apigateway.DomainNameEndpointConfiguration>;
    /**
     * The mutual TLS authentication configuration for the domain name. Defined below.
     */
    public readonly mutualTlsAuthentication!: pulumi.Output<outputs.apigateway.DomainNameMutualTlsAuthentication | undefined>;
    /**
     * The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
     */
    public readonly regionalCertificateArn!: pulumi.Output<string | undefined>;
    /**
     * The user-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and
     * `certificatePrivateKey`.
     */
    public readonly regionalCertificateName!: pulumi.Output<string | undefined>;
    /**
     * The hostname for the custom domain's regional endpoint.
     */
    public /*out*/ readonly regionalDomainName!: pulumi.Output<string>;
    /**
     * The hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     */
    public /*out*/ readonly regionalZoneId!: pulumi.Output<string>;
    /**
     * The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
     */
    public readonly securityPolicy!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a DomainName resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainNameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainNameArgs | DomainNameState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainNameState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["certificateArn"] = state ? state.certificateArn : undefined;
            inputs["certificateBody"] = state ? state.certificateBody : undefined;
            inputs["certificateChain"] = state ? state.certificateChain : undefined;
            inputs["certificateName"] = state ? state.certificateName : undefined;
            inputs["certificatePrivateKey"] = state ? state.certificatePrivateKey : undefined;
            inputs["certificateUploadDate"] = state ? state.certificateUploadDate : undefined;
            inputs["cloudfrontDomainName"] = state ? state.cloudfrontDomainName : undefined;
            inputs["cloudfrontZoneId"] = state ? state.cloudfrontZoneId : undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["endpointConfiguration"] = state ? state.endpointConfiguration : undefined;
            inputs["mutualTlsAuthentication"] = state ? state.mutualTlsAuthentication : undefined;
            inputs["regionalCertificateArn"] = state ? state.regionalCertificateArn : undefined;
            inputs["regionalCertificateName"] = state ? state.regionalCertificateName : undefined;
            inputs["regionalDomainName"] = state ? state.regionalDomainName : undefined;
            inputs["regionalZoneId"] = state ? state.regionalZoneId : undefined;
            inputs["securityPolicy"] = state ? state.securityPolicy : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DomainNameArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            inputs["certificateArn"] = args ? args.certificateArn : undefined;
            inputs["certificateBody"] = args ? args.certificateBody : undefined;
            inputs["certificateChain"] = args ? args.certificateChain : undefined;
            inputs["certificateName"] = args ? args.certificateName : undefined;
            inputs["certificatePrivateKey"] = args ? args.certificatePrivateKey : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["endpointConfiguration"] = args ? args.endpointConfiguration : undefined;
            inputs["mutualTlsAuthentication"] = args ? args.mutualTlsAuthentication : undefined;
            inputs["regionalCertificateArn"] = args ? args.regionalCertificateArn : undefined;
            inputs["regionalCertificateName"] = args ? args.regionalCertificateName : undefined;
            inputs["securityPolicy"] = args ? args.securityPolicy : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["certificateUploadDate"] = undefined /*out*/;
            inputs["cloudfrontDomainName"] = undefined /*out*/;
            inputs["cloudfrontZoneId"] = undefined /*out*/;
            inputs["regionalDomainName"] = undefined /*out*/;
            inputs["regionalZoneId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(DomainName.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainName resources.
 */
export interface DomainNameState {
    /**
     * Amazon Resource Name (ARN)
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
     */
    readonly certificateArn?: pulumi.Input<string>;
    /**
     * The certificate issued for the domain name
     * being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and
     * `regionalCertificateName`.
     */
    readonly certificateBody?: pulumi.Input<string>;
    /**
     * The certificate for the CA that issued the
     * certificate, along with any intermediate CA certificates required to
     * create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`,
     * `regionalCertificateArn`, and `regionalCertificateName`.
     */
    readonly certificateChain?: pulumi.Input<string>;
    /**
     * The unique name to use when registering this
     * certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and
     * `regionalCertificateName`. Required if `certificateArn` is not set.
     */
    readonly certificateName?: pulumi.Input<string>;
    /**
     * The private key associated with the
     * domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
     */
    readonly certificatePrivateKey?: pulumi.Input<string>;
    /**
     * The upload date associated with the domain certificate.
     */
    readonly certificateUploadDate?: pulumi.Input<string>;
    /**
     * The hostname created by Cloudfront to represent
     * the distribution that implements this domain name mapping.
     */
    readonly cloudfrontDomainName?: pulumi.Input<string>;
    /**
     * For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`)
     * that can be used to create a Route53 alias record for the distribution.
     */
    readonly cloudfrontZoneId?: pulumi.Input<string>;
    /**
     * The fully-qualified domain name to register
     */
    readonly domainName?: pulumi.Input<string>;
    /**
     * Configuration block defining API endpoint information including type. Defined below.
     */
    readonly endpointConfiguration?: pulumi.Input<inputs.apigateway.DomainNameEndpointConfiguration>;
    /**
     * The mutual TLS authentication configuration for the domain name. Defined below.
     */
    readonly mutualTlsAuthentication?: pulumi.Input<inputs.apigateway.DomainNameMutualTlsAuthentication>;
    /**
     * The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
     */
    readonly regionalCertificateArn?: pulumi.Input<string>;
    /**
     * The user-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and
     * `certificatePrivateKey`.
     */
    readonly regionalCertificateName?: pulumi.Input<string>;
    /**
     * The hostname for the custom domain's regional endpoint.
     */
    readonly regionalDomainName?: pulumi.Input<string>;
    /**
     * The hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     */
    readonly regionalZoneId?: pulumi.Input<string>;
    /**
     * The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
     */
    readonly securityPolicy?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DomainName resource.
 */
export interface DomainNameArgs {
    /**
     * The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificateName`, `certificateBody`, `certificateChain`, `certificatePrivateKey`, `regionalCertificateArn`, and `regionalCertificateName`.
     */
    readonly certificateArn?: pulumi.Input<string>;
    /**
     * The certificate issued for the domain name
     * being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and
     * `regionalCertificateName`.
     */
    readonly certificateBody?: pulumi.Input<string>;
    /**
     * The certificate for the CA that issued the
     * certificate, along with any intermediate CA certificates required to
     * create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`,
     * `regionalCertificateArn`, and `regionalCertificateName`.
     */
    readonly certificateChain?: pulumi.Input<string>;
    /**
     * The unique name to use when registering this
     * certificate as an IAM server certificate. Conflicts with `certificateArn`, `regionalCertificateArn`, and
     * `regionalCertificateName`. Required if `certificateArn` is not set.
     */
    readonly certificateName?: pulumi.Input<string>;
    /**
     * The private key associated with the
     * domain certificate given in `certificateBody`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificateArn`, `regionalCertificateArn`, and `regionalCertificateName`.
     */
    readonly certificatePrivateKey?: pulumi.Input<string>;
    /**
     * The fully-qualified domain name to register
     */
    readonly domainName: pulumi.Input<string>;
    /**
     * Configuration block defining API endpoint information including type. Defined below.
     */
    readonly endpointConfiguration?: pulumi.Input<inputs.apigateway.DomainNameEndpointConfiguration>;
    /**
     * The mutual TLS authentication configuration for the domain name. Defined below.
     */
    readonly mutualTlsAuthentication?: pulumi.Input<inputs.apigateway.DomainNameMutualTlsAuthentication>;
    /**
     * The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and `certificatePrivateKey`.
     */
    readonly regionalCertificateArn?: pulumi.Input<string>;
    /**
     * The user-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificateArn`, `certificateName`, `certificateBody`, `certificateChain`, and
     * `certificatePrivateKey`.
     */
    readonly regionalCertificateName?: pulumi.Input<string>;
    /**
     * The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
     */
    readonly securityPolicy?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
