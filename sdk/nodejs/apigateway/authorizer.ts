// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {RestApi} from "./index";

export class Authorizer extends pulumi.CustomResource {
    /**
     * Get an existing Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorizerState, opts?: pulumi.CustomResourceOptions): Authorizer {
        return new Authorizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:apigateway/authorizer:Authorizer';

    /**
     * Returns true if the given object is an instance of Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authorizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authorizer.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authorizerCredentials!: pulumi.Output<string | undefined>;
    public readonly authorizerResultTtlInSeconds!: pulumi.Output<number | undefined>;
    public readonly authorizerUri!: pulumi.Output<string | undefined>;
    public readonly identitySource!: pulumi.Output<string | undefined>;
    public readonly identityValidationExpression!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly providerArns!: pulumi.Output<string[] | undefined>;
    public readonly restApi!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a Authorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorizerArgs | AuthorizerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthorizerState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authorizerCredentials"] = state ? state.authorizerCredentials : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = state ? state.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerUri"] = state ? state.authorizerUri : undefined;
            resourceInputs["identitySource"] = state ? state.identitySource : undefined;
            resourceInputs["identityValidationExpression"] = state ? state.identityValidationExpression : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerArns"] = state ? state.providerArns : undefined;
            resourceInputs["restApi"] = state ? state.restApi : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AuthorizerArgs | undefined;
            if ((!args || args.restApi === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restApi'");
            }
            resourceInputs["authorizerCredentials"] = args ? args.authorizerCredentials : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = args ? args.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerUri"] = args ? args.authorizerUri : undefined;
            resourceInputs["identitySource"] = args ? args.identitySource : undefined;
            resourceInputs["identityValidationExpression"] = args ? args.identityValidationExpression : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["providerArns"] = args ? args.providerArns : undefined;
            resourceInputs["restApi"] = args ? args.restApi : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Authorizer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Authorizer resources.
 */
export interface AuthorizerState {
    arn?: pulumi.Input<string>;
    authorizerCredentials?: pulumi.Input<string>;
    authorizerResultTtlInSeconds?: pulumi.Input<number>;
    authorizerUri?: pulumi.Input<string>;
    identitySource?: pulumi.Input<string>;
    identityValidationExpression?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    providerArns?: pulumi.Input<pulumi.Input<string>[]>;
    restApi?: pulumi.Input<string | RestApi>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Authorizer resource.
 */
export interface AuthorizerArgs {
    authorizerCredentials?: pulumi.Input<string>;
    authorizerResultTtlInSeconds?: pulumi.Input<number>;
    authorizerUri?: pulumi.Input<string>;
    identitySource?: pulumi.Input<string>;
    identityValidationExpression?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    providerArns?: pulumi.Input<pulumi.Input<string>[]>;
    restApi: pulumi.Input<string | RestApi>;
    type?: pulumi.Input<string>;
}
