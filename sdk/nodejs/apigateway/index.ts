// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { AuthorizerArgs, AuthorizerState } from "./authorizer";
export type Authorizer = import("./authorizer").Authorizer;
export const Authorizer: typeof import("./authorizer").Authorizer = null as any;
utilities.lazyLoad(exports, ["Authorizer"], () => require("./authorizer"));

export { BasePathMappingArgs, BasePathMappingState } from "./basePathMapping";
export type BasePathMapping = import("./basePathMapping").BasePathMapping;
export const BasePathMapping: typeof import("./basePathMapping").BasePathMapping = null as any;
utilities.lazyLoad(exports, ["BasePathMapping"], () => require("./basePathMapping"));

export { ClientCertificateArgs, ClientCertificateState } from "./clientCertificate";
export type ClientCertificate = import("./clientCertificate").ClientCertificate;
export const ClientCertificate: typeof import("./clientCertificate").ClientCertificate = null as any;
utilities.lazyLoad(exports, ["ClientCertificate"], () => require("./clientCertificate"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { DocumentationPartArgs, DocumentationPartState } from "./documentationPart";
export type DocumentationPart = import("./documentationPart").DocumentationPart;
export const DocumentationPart: typeof import("./documentationPart").DocumentationPart = null as any;
utilities.lazyLoad(exports, ["DocumentationPart"], () => require("./documentationPart"));

export { DocumentationVersionArgs, DocumentationVersionState } from "./documentationVersion";
export type DocumentationVersion = import("./documentationVersion").DocumentationVersion;
export const DocumentationVersion: typeof import("./documentationVersion").DocumentationVersion = null as any;
utilities.lazyLoad(exports, ["DocumentationVersion"], () => require("./documentationVersion"));

export { DomainNameArgs, DomainNameState } from "./domainName";
export type DomainName = import("./domainName").DomainName;
export const DomainName: typeof import("./domainName").DomainName = null as any;
utilities.lazyLoad(exports, ["DomainName"], () => require("./domainName"));

export { GetDomainNameArgs, GetDomainNameResult, GetDomainNameOutputArgs } from "./getDomainName";
export const getDomainName: typeof import("./getDomainName").getDomainName = null as any;
export const getDomainNameOutput: typeof import("./getDomainName").getDomainNameOutput = null as any;
utilities.lazyLoad(exports, ["getDomainName","getDomainNameOutput"], () => require("./getDomainName"));

export { GetExportArgs, GetExportResult, GetExportOutputArgs } from "./getExport";
export const getExport: typeof import("./getExport").getExport = null as any;
export const getExportOutput: typeof import("./getExport").getExportOutput = null as any;
utilities.lazyLoad(exports, ["getExport","getExportOutput"], () => require("./getExport"));

export { GetKeyArgs, GetKeyResult, GetKeyOutputArgs } from "./getKey";
export const getKey: typeof import("./getKey").getKey = null as any;
export const getKeyOutput: typeof import("./getKey").getKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKey","getKeyOutput"], () => require("./getKey"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GetRestApiArgs, GetRestApiResult, GetRestApiOutputArgs } from "./getRestApi";
export const getRestApi: typeof import("./getRestApi").getRestApi = null as any;
export const getRestApiOutput: typeof import("./getRestApi").getRestApiOutput = null as any;
utilities.lazyLoad(exports, ["getRestApi","getRestApiOutput"], () => require("./getRestApi"));

export { GetSdkArgs, GetSdkResult, GetSdkOutputArgs } from "./getSdk";
export const getSdk: typeof import("./getSdk").getSdk = null as any;
export const getSdkOutput: typeof import("./getSdk").getSdkOutput = null as any;
utilities.lazyLoad(exports, ["getSdk","getSdkOutput"], () => require("./getSdk"));

export { GetVpcLinkArgs, GetVpcLinkResult, GetVpcLinkOutputArgs } from "./getVpcLink";
export const getVpcLink: typeof import("./getVpcLink").getVpcLink = null as any;
export const getVpcLinkOutput: typeof import("./getVpcLink").getVpcLinkOutput = null as any;
utilities.lazyLoad(exports, ["getVpcLink","getVpcLinkOutput"], () => require("./getVpcLink"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { IntegrationResponseArgs, IntegrationResponseState } from "./integrationResponse";
export type IntegrationResponse = import("./integrationResponse").IntegrationResponse;
export const IntegrationResponse: typeof import("./integrationResponse").IntegrationResponse = null as any;
utilities.lazyLoad(exports, ["IntegrationResponse"], () => require("./integrationResponse"));

export { MethodArgs, MethodState } from "./method";
export type Method = import("./method").Method;
export const Method: typeof import("./method").Method = null as any;
utilities.lazyLoad(exports, ["Method"], () => require("./method"));

export { MethodResponseArgs, MethodResponseState } from "./methodResponse";
export type MethodResponse = import("./methodResponse").MethodResponse;
export const MethodResponse: typeof import("./methodResponse").MethodResponse = null as any;
utilities.lazyLoad(exports, ["MethodResponse"], () => require("./methodResponse"));

export { MethodSettingsArgs, MethodSettingsState } from "./methodSettings";
export type MethodSettings = import("./methodSettings").MethodSettings;
export const MethodSettings: typeof import("./methodSettings").MethodSettings = null as any;
utilities.lazyLoad(exports, ["MethodSettings"], () => require("./methodSettings"));

export { ModelArgs, ModelState } from "./model";
export type Model = import("./model").Model;
export const Model: typeof import("./model").Model = null as any;
utilities.lazyLoad(exports, ["Model"], () => require("./model"));

export { RequestValidatorArgs, RequestValidatorState } from "./requestValidator";
export type RequestValidator = import("./requestValidator").RequestValidator;
export const RequestValidator: typeof import("./requestValidator").RequestValidator = null as any;
utilities.lazyLoad(exports, ["RequestValidator"], () => require("./requestValidator"));

export { ResourceArgs, ResourceState } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));

export { ResponseArgs, ResponseState } from "./response";
export type Response = import("./response").Response;
export const Response: typeof import("./response").Response = null as any;
utilities.lazyLoad(exports, ["Response"], () => require("./response"));

export { RestApiArgs, RestApiState } from "./restApi";
export type RestApi = import("./restApi").RestApi;
export const RestApi: typeof import("./restApi").RestApi = null as any;
utilities.lazyLoad(exports, ["RestApi"], () => require("./restApi"));

export { RestApiPolicyArgs, RestApiPolicyState } from "./restApiPolicy";
export type RestApiPolicy = import("./restApiPolicy").RestApiPolicy;
export const RestApiPolicy: typeof import("./restApiPolicy").RestApiPolicy = null as any;
utilities.lazyLoad(exports, ["RestApiPolicy"], () => require("./restApiPolicy"));

export { StageArgs, StageState } from "./stage";
export type Stage = import("./stage").Stage;
export const Stage: typeof import("./stage").Stage = null as any;
utilities.lazyLoad(exports, ["Stage"], () => require("./stage"));

export { UsagePlanArgs, UsagePlanState } from "./usagePlan";
export type UsagePlan = import("./usagePlan").UsagePlan;
export const UsagePlan: typeof import("./usagePlan").UsagePlan = null as any;
utilities.lazyLoad(exports, ["UsagePlan"], () => require("./usagePlan"));

export { UsagePlanKeyArgs, UsagePlanKeyState } from "./usagePlanKey";
export type UsagePlanKey = import("./usagePlanKey").UsagePlanKey;
export const UsagePlanKey: typeof import("./usagePlanKey").UsagePlanKey = null as any;
utilities.lazyLoad(exports, ["UsagePlanKey"], () => require("./usagePlanKey"));

export { VpcLinkArgs, VpcLinkState } from "./vpcLink";
export type VpcLink = import("./vpcLink").VpcLink;
export const VpcLink: typeof import("./vpcLink").VpcLink = null as any;
utilities.lazyLoad(exports, ["VpcLink"], () => require("./vpcLink"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:apigateway/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "aws:apigateway/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "aws:apigateway/authorizer:Authorizer":
                return new Authorizer(name, <any>undefined, { urn })
            case "aws:apigateway/basePathMapping:BasePathMapping":
                return new BasePathMapping(name, <any>undefined, { urn })
            case "aws:apigateway/clientCertificate:ClientCertificate":
                return new ClientCertificate(name, <any>undefined, { urn })
            case "aws:apigateway/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "aws:apigateway/documentationPart:DocumentationPart":
                return new DocumentationPart(name, <any>undefined, { urn })
            case "aws:apigateway/documentationVersion:DocumentationVersion":
                return new DocumentationVersion(name, <any>undefined, { urn })
            case "aws:apigateway/domainName:DomainName":
                return new DomainName(name, <any>undefined, { urn })
            case "aws:apigateway/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "aws:apigateway/integrationResponse:IntegrationResponse":
                return new IntegrationResponse(name, <any>undefined, { urn })
            case "aws:apigateway/method:Method":
                return new Method(name, <any>undefined, { urn })
            case "aws:apigateway/methodResponse:MethodResponse":
                return new MethodResponse(name, <any>undefined, { urn })
            case "aws:apigateway/methodSettings:MethodSettings":
                return new MethodSettings(name, <any>undefined, { urn })
            case "aws:apigateway/model:Model":
                return new Model(name, <any>undefined, { urn })
            case "aws:apigateway/requestValidator:RequestValidator":
                return new RequestValidator(name, <any>undefined, { urn })
            case "aws:apigateway/resource:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "aws:apigateway/response:Response":
                return new Response(name, <any>undefined, { urn })
            case "aws:apigateway/restApi:RestApi":
                return new RestApi(name, <any>undefined, { urn })
            case "aws:apigateway/restApiPolicy:RestApiPolicy":
                return new RestApiPolicy(name, <any>undefined, { urn })
            case "aws:apigateway/stage:Stage":
                return new Stage(name, <any>undefined, { urn })
            case "aws:apigateway/usagePlan:UsagePlan":
                return new UsagePlan(name, <any>undefined, { urn })
            case "aws:apigateway/usagePlanKey:UsagePlanKey":
                return new UsagePlanKey(name, <any>undefined, { urn })
            case "aws:apigateway/vpcLink:VpcLink":
                return new VpcLink(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "apigateway/account", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/apiKey", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/authorizer", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/basePathMapping", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/clientCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/deployment", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/documentationPart", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/documentationVersion", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/domainName", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/integration", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/integrationResponse", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/method", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/methodResponse", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/methodSettings", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/model", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/requestValidator", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/resource", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/response", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/restApi", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/restApiPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/stage", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/usagePlan", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/usagePlanKey", _module)
pulumi.runtime.registerResourceModule("aws", "apigateway/vpcLink", _module)
