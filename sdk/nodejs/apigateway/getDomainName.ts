// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Use this data source to get the custom domain name for use with AWS API Gateway.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = pulumi.output(aws.apigateway.getDomainName({
 *     domainName: "api.example.com",
 * }));
 * ```
 */
export function getDomainName(args: GetDomainNameArgs, opts?: pulumi.InvokeOptions): Promise<GetDomainNameResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:apigateway/getDomainName:getDomainName", {
        "domainName": args.domainName,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getDomainName.
 */
export interface GetDomainNameArgs {
    /**
     * Fully-qualified domain name to look up. If no domain name is found, an error will be returned.
     */
    domainName: string;
    /**
     * Key-value map of tags for the resource.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getDomainName.
 */
export interface GetDomainNameResult {
    /**
     * ARN of the found custom domain name.
     */
    readonly arn: string;
    /**
     * ARN for an AWS-managed certificate that is used by edge-optimized endpoint for this domain name.
     */
    readonly certificateArn: string;
    /**
     * Name of the certificate that is used by edge-optimized endpoint for this domain name.
     */
    readonly certificateName: string;
    /**
     * Upload date associated with the domain certificate.
     */
    readonly certificateUploadDate: string;
    /**
     * Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
     */
    readonly cloudfrontDomainName: string;
    /**
     * For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
     */
    readonly cloudfrontZoneId: string;
    readonly domainName: string;
    /**
     * List of objects with the endpoint configuration of this domain name.
     */
    readonly endpointConfigurations: outputs.apigateway.GetDomainNameEndpointConfiguration[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ARN for an AWS-managed certificate that is used for validating the regional domain name.
     */
    readonly regionalCertificateArn: string;
    /**
     * User-friendly name of the certificate that is used by regional endpoint for this domain name.
     */
    readonly regionalCertificateName: string;
    /**
     * Hostname for the custom domain's regional endpoint.
     */
    readonly regionalDomainName: string;
    /**
     * Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     */
    readonly regionalZoneId: string;
    /**
     * Security policy for the domain name.
     */
    readonly securityPolicy: string;
    /**
     * Key-value map of tags for the resource.
     */
    readonly tags?: {[key: string]: string};
}

export function getDomainNameOutput(args: GetDomainNameOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDomainNameResult> {
    return pulumi.output(args).apply(a => getDomainName(a, opts))
}

/**
 * A collection of arguments for invoking getDomainName.
 */
export interface GetDomainNameOutputArgs {
    /**
     * Fully-qualified domain name to look up. If no domain name is found, an error will be returned.
     */
    domainName: pulumi.Input<string>;
    /**
     * Key-value map of tags for the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
