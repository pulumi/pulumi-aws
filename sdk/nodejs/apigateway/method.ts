// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {RestApi} from "./index";

export class Method extends pulumi.CustomResource {
    /**
     * Get an existing Method resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MethodState, opts?: pulumi.CustomResourceOptions): Method {
        return new Method(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:apigateway/method:Method';

    /**
     * Returns true if the given object is an instance of Method.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Method {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Method.__pulumiType;
    }

    public readonly apiKeyRequired!: pulumi.Output<boolean | undefined>;
    public readonly authorization!: pulumi.Output<string>;
    public readonly authorizationScopes!: pulumi.Output<string[] | undefined>;
    public readonly authorizerId!: pulumi.Output<string | undefined>;
    public readonly httpMethod!: pulumi.Output<string>;
    public readonly operationName!: pulumi.Output<string | undefined>;
    public readonly requestModels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly requestParameters!: pulumi.Output<{[key: string]: boolean} | undefined>;
    public readonly requestValidatorId!: pulumi.Output<string | undefined>;
    public readonly resourceId!: pulumi.Output<string>;
    public readonly restApi!: pulumi.Output<string>;

    /**
     * Create a Method resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MethodArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MethodArgs | MethodState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MethodState | undefined;
            resourceInputs["apiKeyRequired"] = state ? state.apiKeyRequired : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["authorizationScopes"] = state ? state.authorizationScopes : undefined;
            resourceInputs["authorizerId"] = state ? state.authorizerId : undefined;
            resourceInputs["httpMethod"] = state ? state.httpMethod : undefined;
            resourceInputs["operationName"] = state ? state.operationName : undefined;
            resourceInputs["requestModels"] = state ? state.requestModels : undefined;
            resourceInputs["requestParameters"] = state ? state.requestParameters : undefined;
            resourceInputs["requestValidatorId"] = state ? state.requestValidatorId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["restApi"] = state ? state.restApi : undefined;
        } else {
            const args = argsOrState as MethodArgs | undefined;
            if ((!args || args.authorization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorization'");
            }
            if ((!args || args.httpMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpMethod'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.restApi === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restApi'");
            }
            resourceInputs["apiKeyRequired"] = args ? args.apiKeyRequired : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["authorizationScopes"] = args ? args.authorizationScopes : undefined;
            resourceInputs["authorizerId"] = args ? args.authorizerId : undefined;
            resourceInputs["httpMethod"] = args ? args.httpMethod : undefined;
            resourceInputs["operationName"] = args ? args.operationName : undefined;
            resourceInputs["requestModels"] = args ? args.requestModels : undefined;
            resourceInputs["requestParameters"] = args ? args.requestParameters : undefined;
            resourceInputs["requestValidatorId"] = args ? args.requestValidatorId : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["restApi"] = args ? args.restApi : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Method.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Method resources.
 */
export interface MethodState {
    apiKeyRequired?: pulumi.Input<boolean>;
    authorization?: pulumi.Input<string>;
    authorizationScopes?: pulumi.Input<pulumi.Input<string>[]>;
    authorizerId?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    operationName?: pulumi.Input<string>;
    requestModels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    requestValidatorId?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    restApi?: pulumi.Input<string | RestApi>;
}

/**
 * The set of arguments for constructing a Method resource.
 */
export interface MethodArgs {
    apiKeyRequired?: pulumi.Input<boolean>;
    authorization: pulumi.Input<string>;
    authorizationScopes?: pulumi.Input<pulumi.Input<string>[]>;
    authorizerId?: pulumi.Input<string>;
    httpMethod: pulumi.Input<string>;
    operationName?: pulumi.Input<string>;
    requestModels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    requestValidatorId?: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
    restApi: pulumi.Input<string | RestApi>;
}
