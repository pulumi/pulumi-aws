// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::NeptuneGraph::Graph resource creates an Amazon Analytics Graph.
 *
 * ## Example Usage
 *
 * ### Neptune Graph (with Vector Search configuration)
 *
 * Creates a Neptune Graph with 16GB provisioned memory, vector search capability with 128 dimensions, and a single replica for high availability.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Create Neptune Graph
 * const example = new aws.neptunegraph.Graph("example", {
 *     graphName: "example-graph-test-20250203",
 *     provisionedMemory: 16,
 *     deletionProtection: false,
 *     publicConnectivity: false,
 *     replicaCount: 1,
 *     kmsKeyIdentifier: "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
 *     vectorSearchConfiguration: {
 *         vectorSearchDimension: 128,
 *     },
 *     tags: {
 *         Environment: "Development",
 *         ModifiedBy: "AWS",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_neptunegraph_graph` using the graph identifier. For example:
 *
 * ```sh
 * $ pulumi import aws:neptunegraph/graph:Graph example "graph_id"
 * ```
 */
export class Graph extends pulumi.CustomResource {
    /**
     * Get an existing Graph resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GraphState, opts?: pulumi.CustomResourceOptions): Graph {
        return new Graph(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:neptunegraph/graph:Graph';

    /**
     * Returns true if the given object is an instance of Graph.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Graph {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Graph.__pulumiType;
    }

    /**
     * (String) Graph resource ARN
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A value that indicates whether the graph has deletion protection enabled. The graph can't be deleted when deletion
     * protection is enabled.
     */
    public readonly deletionProtection!: pulumi.Output<boolean>;
    /**
     * (String) The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
     * character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don't specify a graph
     * name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
     * UUID.
     */
    public readonly graphName!: pulumi.Output<string>;
    /**
     * Allows user to specify name prefix and have remainder of name automatically generated.
     */
    public readonly graphNamePrefix!: pulumi.Output<string | undefined>;
    /**
     * Specifies a KMS key to use to encrypt data in the new graph. Value must be ARN of KMS Key.
     */
    public readonly kmsKeyIdentifier!: pulumi.Output<string>;
    /**
     * The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
     */
    public readonly provisionedMemory!: pulumi.Output<number>;
    /**
     * Specifies whether or not the graph can be reachable over the internet. All access to graphs is IAM authenticated. When
     * the graph is publicly available, its domain name system (DNS) endpoint resolves to the public IP address from the
     * internet. When the graph isn't publicly available, you need to create a PrivateGraphEndpoint in a given VPC to ensure
     * the DNS name resolves to a private IP address that is reachable from the VPC.
     */
    public readonly publicConnectivity!: pulumi.Output<boolean>;
    /**
     * The number of replicas in other AZs. Value must be between 0 and 2.
     */
    public readonly replicaCount!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.neptunegraph.GraphTimeouts | undefined>;
    /**
     * Vector search configuration for the Neptune Graph
     */
    public readonly vectorSearchConfiguration!: pulumi.Output<outputs.neptunegraph.GraphVectorSearchConfiguration | undefined>;

    /**
     * Create a Graph resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GraphArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GraphArgs | GraphState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GraphState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["graphName"] = state ? state.graphName : undefined;
            resourceInputs["graphNamePrefix"] = state ? state.graphNamePrefix : undefined;
            resourceInputs["kmsKeyIdentifier"] = state ? state.kmsKeyIdentifier : undefined;
            resourceInputs["provisionedMemory"] = state ? state.provisionedMemory : undefined;
            resourceInputs["publicConnectivity"] = state ? state.publicConnectivity : undefined;
            resourceInputs["replicaCount"] = state ? state.replicaCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vectorSearchConfiguration"] = state ? state.vectorSearchConfiguration : undefined;
        } else {
            const args = argsOrState as GraphArgs | undefined;
            if ((!args || args.provisionedMemory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisionedMemory'");
            }
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["graphName"] = args ? args.graphName : undefined;
            resourceInputs["graphNamePrefix"] = args ? args.graphNamePrefix : undefined;
            resourceInputs["kmsKeyIdentifier"] = args ? args.kmsKeyIdentifier : undefined;
            resourceInputs["provisionedMemory"] = args ? args.provisionedMemory : undefined;
            resourceInputs["publicConnectivity"] = args ? args.publicConnectivity : undefined;
            resourceInputs["replicaCount"] = args ? args.replicaCount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vectorSearchConfiguration"] = args ? args.vectorSearchConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Graph.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Graph resources.
 */
export interface GraphState {
    /**
     * (String) Graph resource ARN
     */
    arn?: pulumi.Input<string>;
    /**
     * A value that indicates whether the graph has deletion protection enabled. The graph can't be deleted when deletion
     * protection is enabled.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * (String) The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
     * character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don't specify a graph
     * name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
     * UUID.
     */
    graphName?: pulumi.Input<string>;
    /**
     * Allows user to specify name prefix and have remainder of name automatically generated.
     */
    graphNamePrefix?: pulumi.Input<string>;
    /**
     * Specifies a KMS key to use to encrypt data in the new graph. Value must be ARN of KMS Key.
     */
    kmsKeyIdentifier?: pulumi.Input<string>;
    /**
     * The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
     */
    provisionedMemory?: pulumi.Input<number>;
    /**
     * Specifies whether or not the graph can be reachable over the internet. All access to graphs is IAM authenticated. When
     * the graph is publicly available, its domain name system (DNS) endpoint resolves to the public IP address from the
     * internet. When the graph isn't publicly available, you need to create a PrivateGraphEndpoint in a given VPC to ensure
     * the DNS name resolves to a private IP address that is reachable from the VPC.
     */
    publicConnectivity?: pulumi.Input<boolean>;
    /**
     * The number of replicas in other AZs. Value must be between 0 and 2.
     */
    replicaCount?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.neptunegraph.GraphTimeouts>;
    /**
     * Vector search configuration for the Neptune Graph
     */
    vectorSearchConfiguration?: pulumi.Input<inputs.neptunegraph.GraphVectorSearchConfiguration>;
}

/**
 * The set of arguments for constructing a Graph resource.
 */
export interface GraphArgs {
    /**
     * A value that indicates whether the graph has deletion protection enabled. The graph can't be deleted when deletion
     * protection is enabled.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
     * character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don't specify a graph
     * name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
     * UUID.
     */
    graphName?: pulumi.Input<string>;
    /**
     * Allows user to specify name prefix and have remainder of name automatically generated.
     */
    graphNamePrefix?: pulumi.Input<string>;
    /**
     * Specifies a KMS key to use to encrypt data in the new graph. Value must be ARN of KMS Key.
     */
    kmsKeyIdentifier?: pulumi.Input<string>;
    /**
     * The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
     */
    provisionedMemory: pulumi.Input<number>;
    /**
     * Specifies whether or not the graph can be reachable over the internet. All access to graphs is IAM authenticated. When
     * the graph is publicly available, its domain name system (DNS) endpoint resolves to the public IP address from the
     * internet. When the graph isn't publicly available, you need to create a PrivateGraphEndpoint in a given VPC to ensure
     * the DNS name resolves to a private IP address that is reachable from the VPC.
     */
    publicConnectivity?: pulumi.Input<boolean>;
    /**
     * The number of replicas in other AZs. Value must be between 0 and 2.
     */
    replicaCount?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.neptunegraph.GraphTimeouts>;
    /**
     * Vector search configuration for the Neptune Graph
     */
    vectorSearchConfiguration?: pulumi.Input<inputs.neptunegraph.GraphVectorSearchConfiguration>;
}
