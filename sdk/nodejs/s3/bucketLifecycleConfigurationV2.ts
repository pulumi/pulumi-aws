// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an independent configuration resource for S3 bucket [lifecycle configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html).
 *
 * An S3 Lifecycle configuration consists of one or more Lifecycle rules. Each rule consists of the following:
 *
 * * Rule metadata (`id` and `status`)
 * * Filter identifying objects to which the rule applies
 * * One or more transition or expiration actions
 *
 * For more information see the Amazon S3 User Guide on [`Lifecycle Configuration Elements`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html).
 *
 * > **NOTE:** S3 Buckets only support a single lifecycle configuration. Declaring multiple `aws.s3.BucketLifecycleConfigurationV2` resources to the same S3 Bucket will cause a perpetual difference in configuration.
 *
 * > **NOTE:** Lifecycle configurations may take some time to fully propagate to all AWS S3 systems.
 * Running Pulumi operations shortly after creating a lifecycle configuration may result in changes that affect configuration idempotence.
 * See the Amazon S3 User Guide on [setting lifecycle configuration on a bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-set-lifecycle-configuration-intro.html).
 *
 * ## Example Usage
 * ### With neither a filter nor prefix specified
 *
 * The Lifecycle rule applies to a subset of objects based on the key name prefix (`""`).
 *
 * This configuration is intended to replicate the default behavior of the `lifecycleRule`
 * parameter in the AWS Provider `aws.s3.BucketV2` resource prior to `v4.0`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [{
 *         id: "rule-1",
 *         status: "Enabled",
 *     }],
 * });
 * ```
 * ### Specifying an empty filter
 *
 * The Lifecycle rule applies to all objects in the bucket.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [{
 *         id: "rule-1",
 *         filter: {},
 *         status: "Enabled",
 *     }],
 * });
 * ```
 * ### Specifying a filter using key prefixes
 *
 * The Lifecycle rule applies to a subset of objects based on the key name prefix (`logs/`).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [{
 *         id: "rule-1",
 *         filter: {
 *             prefix: "logs/",
 *         },
 *         status: "Enabled",
 *     }],
 * });
 * ```
 *
 * If you want to apply a Lifecycle action to a subset of objects based on different key name prefixes, specify separate rules.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [
 *         {
 *             id: "rule-1",
 *             filter: {
 *                 prefix: "logs/",
 *             },
 *             status: "Enabled",
 *         },
 *         {
 *             id: "rule-2",
 *             filter: {
 *                 prefix: "tmp/",
 *             },
 *             status: "Enabled",
 *         },
 *     ],
 * });
 * ```
 * ### Specifying a filter based on an object tag
 *
 * The Lifecycle rule specifies a filter based on a tag key and value. The rule then applies only to a subset of objects with the specific tag.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [{
 *         id: "rule-1",
 *         filter: {
 *             tag: {
 *                 key: "Name",
 *                 value: "Staging",
 *             },
 *         },
 *         status: "Enabled",
 *     }],
 * });
 * ```
 * ### Specifying a filter based on multiple tags
 *
 * The Lifecycle rule directs Amazon S3 to perform lifecycle actions on objects with two tags (with the specific tag keys and values). Notice `tags` is wrapped in the `and` configuration block.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [{
 *         id: "rule-1",
 *         filter: {
 *             and: {
 *                 tags: {
 *                     Key1: "Value1",
 *                     Key2: "Value2",
 *                 },
 *             },
 *         },
 *         status: "Enabled",
 *     }],
 * });
 * ```
 * ### Specifying a filter based on both prefix and one or more tags
 *
 * The Lifecycle rule directs Amazon S3 to perform lifecycle actions on objects with the specified prefix and two tags (with the specific tag keys and values). Notice both `prefix` and `tags` are wrapped in the `and` configuration block.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [{
 *         id: "rule-1",
 *         filter: {
 *             and: {
 *                 prefix: "logs/",
 *                 tags: {
 *                     Key1: "Value1",
 *                     Key2: "Value2",
 *                 },
 *             },
 *         },
 *         status: "Enabled",
 *     }],
 * });
 * ```
 * ### Specifying a filter based on object size
 *
 * Object size values are in bytes. Maximum filter size is 5TB. Some storage classes have minimum object size limitations, for more information, see [Comparing the Amazon S3 storage classes](https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-class-intro.html#sc-compare).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [{
 *         id: "rule-1",
 *         filter: {
 *             objectSizeGreaterThan: "500",
 *         },
 *         status: "Enabled",
 *     }],
 * });
 * ```
 * ### Specifying a filter based on object size range and prefix
 *
 * The `objectSizeGreaterThan` must be less than the `objectSizeLessThan`. Notice both the object size range and prefix are wrapped in the `and` configuration block.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketLifecycleConfigurationV2("example", {
 *     bucket: aws_s3_bucket.bucket.id,
 *     rules: [{
 *         id: "rule-1",
 *         filter: {
 *             and: {
 *                 prefix: "logs/",
 *                 objectSizeGreaterThan: 500,
 *                 objectSizeLessThan: 64000,
 *             },
 *         },
 *         status: "Enabled",
 *     }],
 * });
 * ```
 * ### Creating a Lifecycle Configuration for a bucket with versioning
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.BucketV2("bucket", {});
 * const bucketAcl = new aws.s3.BucketAclV2("bucketAcl", {
 *     bucket: bucket.id,
 *     acl: "private",
 * });
 * const bucket_config = new aws.s3.BucketLifecycleConfigurationV2("bucket-config", {
 *     bucket: bucket.id,
 *     rules: [
 *         {
 *             id: "log",
 *             expiration: {
 *                 days: 90,
 *             },
 *             filter: {
 *                 and: {
 *                     prefix: "log/",
 *                     tags: {
 *                         rule: "log",
 *                         autoclean: "true",
 *                     },
 *                 },
 *             },
 *             status: "Enabled",
 *             transitions: [
 *                 {
 *                     days: 30,
 *                     storageClass: "STANDARD_IA",
 *                 },
 *                 {
 *                     days: 60,
 *                     storageClass: "GLACIER",
 *                 },
 *             ],
 *         },
 *         {
 *             id: "tmp",
 *             filter: {
 *                 prefix: "tmp/",
 *             },
 *             expiration: {
 *                 date: "2023-01-13T00:00:00Z",
 *             },
 *             status: "Enabled",
 *         },
 *     ],
 * });
 * const versioningBucket = new aws.s3.BucketV2("versioningBucket", {});
 * const versioningBucketAcl = new aws.s3.BucketAclV2("versioningBucketAcl", {
 *     bucket: versioningBucket.id,
 *     acl: "private",
 * });
 * const versioning = new aws.s3.BucketVersioningV2("versioning", {
 *     bucket: versioningBucket.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const versioning_bucket_config = new aws.s3.BucketLifecycleConfigurationV2("versioning-bucket-config", {
 *     bucket: versioningBucket.id,
 *     rules: [{
 *         id: "config",
 *         filter: {
 *             prefix: "config/",
 *         },
 *         noncurrentVersionExpiration: {
 *             noncurrentDays: 90,
 *         },
 *         noncurrentVersionTransitions: [
 *             {
 *                 noncurrentDays: 30,
 *                 storageClass: "STANDARD_IA",
 *             },
 *             {
 *                 noncurrentDays: 60,
 *                 storageClass: "GLACIER",
 *             },
 *         ],
 *         status: "Enabled",
 *     }],
 * }, {
 *     dependsOn: [versioning],
 * });
 * ```
 *
 * ## Import
 *
 * If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
 *
 * __Using `pulumi import` to import__ S3 bucket lifecycle configuration using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
 *
 * If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
 *
 * ```sh
 *  $ pulumi import aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2 example bucket-name
 * ```
 *  If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
 *
 * ```sh
 *  $ pulumi import aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2 example bucket-name,123456789012
 * ```
 */
export class BucketLifecycleConfigurationV2 extends pulumi.CustomResource {
    /**
     * Get an existing BucketLifecycleConfigurationV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketLifecycleConfigurationV2State, opts?: pulumi.CustomResourceOptions): BucketLifecycleConfigurationV2 {
        return new BucketLifecycleConfigurationV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2';

    /**
     * Returns true if the given object is an instance of BucketLifecycleConfigurationV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketLifecycleConfigurationV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketLifecycleConfigurationV2.__pulumiType;
    }

    /**
     * Name of the source S3 bucket you want Amazon S3 to monitor.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    public readonly expectedBucketOwner!: pulumi.Output<string | undefined>;
    /**
     * List of configuration blocks describing the rules managing the replication. See below.
     */
    public readonly rules!: pulumi.Output<outputs.s3.BucketLifecycleConfigurationV2Rule[]>;

    /**
     * Create a BucketLifecycleConfigurationV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketLifecycleConfigurationV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketLifecycleConfigurationV2Args | BucketLifecycleConfigurationV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketLifecycleConfigurationV2State | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["expectedBucketOwner"] = state ? state.expectedBucketOwner : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as BucketLifecycleConfigurationV2Args | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["expectedBucketOwner"] = args ? args.expectedBucketOwner : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketLifecycleConfigurationV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketLifecycleConfigurationV2 resources.
 */
export interface BucketLifecycleConfigurationV2State {
    /**
     * Name of the source S3 bucket you want Amazon S3 to monitor.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    expectedBucketOwner?: pulumi.Input<string>;
    /**
     * List of configuration blocks describing the rules managing the replication. See below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.s3.BucketLifecycleConfigurationV2Rule>[]>;
}

/**
 * The set of arguments for constructing a BucketLifecycleConfigurationV2 resource.
 */
export interface BucketLifecycleConfigurationV2Args {
    /**
     * Name of the source S3 bucket you want Amazon S3 to monitor.
     */
    bucket: pulumi.Input<string>;
    /**
     * Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    expectedBucketOwner?: pulumi.Input<string>;
    /**
     * List of configuration blocks describing the rules managing the replication. See below.
     */
    rules: pulumi.Input<pulumi.Input<inputs.s3.BucketLifecycleConfigurationV2Rule>[]>;
}
