// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides an independent configuration resource for S3 bucket [lifecycle configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.BucketV2("bucket", {bucket: "my-bucket"});
 * const bucketAcl = new aws.s3.BucketAclV2("bucketAcl", {
 *     bucket: bucket.id,
 *     acl: "private",
 * });
 * const bucket_config = new aws.s3.BucketLifecycleConfigurationV2("bucket-config", {
 *     bucket: bucket.bucket,
 *     rules: [
 *         {
 *             id: "log",
 *             expiration: {
 *                 days: 90,
 *             },
 *             filter: {
 *                 and: {
 *                     prefix: "log/",
 *                     tags: {
 *                         rule: "log",
 *                         autoclean: "true",
 *                     },
 *                 },
 *             },
 *             status: "Enabled",
 *             transitions: [
 *                 {
 *                     days: 30,
 *                     storageClass: "STANDARD_IA",
 *                 },
 *                 {
 *                     days: 60,
 *                     storageClass: "GLACIER",
 *                 },
 *             ],
 *         },
 *         {
 *             id: "tmp",
 *             filter: {
 *                 prefix: "tmp/",
 *             },
 *             expiration: {
 *                 date: "2023-01-13T00:00:00Z",
 *             },
 *             status: "Enabled",
 *         },
 *     ],
 * });
 * const versioningBucket = new aws.s3.BucketV2("versioningBucket", {bucket: "my-versioning-bucket"});
 * const versioningBucketAcl = new aws.s3.BucketAclV2("versioningBucketAcl", {
 *     bucket: versioningBucket.id,
 *     acl: "private",
 * });
 * const versioning = new aws.s3.BucketVersioningV2("versioning", {
 *     bucket: versioningBucket.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const versioning_bucket_config = new aws.s3.BucketLifecycleConfigurationV2("versioning-bucket-config", {
 *     bucket: versioningBucket.bucket,
 *     rules: [{
 *         id: "config",
 *         filter: {
 *             prefix: "config/",
 *         },
 *         noncurrentVersionExpiration: {
 *             noncurrentDays: 90,
 *         },
 *         noncurrentVersionTransitions: [
 *             {
 *                 noncurrentDays: 30,
 *                 storageClass: "STANDARD_IA",
 *             },
 *             {
 *                 noncurrentDays: 60,
 *                 storageClass: "GLACIER",
 *             },
 *         ],
 *         status: "Enabled",
 *     }],
 * }, {
 *     dependsOn: [versioning],
 * });
 * ```
 * ## Usage Notes
 *
 * > **NOTE:** To avoid conflicts always add the following lifecycle object to the `aws.s3.BucketV2` resource of the source bucket.
 *
 * This resource implements the same features that are provided by the `lifecycleRule` object of the `aws.s3.BucketV2` resource. To avoid conflicts or unexpected apply results, a lifecycle configuration is needed on the `aws.s3.BucketV2` to ignore changes to the internal `lifecycleRule` object.  Failure to add the `lifecycle` configuration to the `aws.s3.BucketV2` will result in conflicting state results.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * The `aws.s3.BucketLifecycleConfigurationV2` resource provides the following features that are not available in the `aws.s3.BucketV2` resource:
 *
 * * `filter` - Added to the `rule` configuration block documented below.
 *
 * ## Import
 *
 * S3 bucket lifecycle configuration can be imported using the `bucket`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2 example bucket-name
 * ```
 *
 *  In addition, S3 bucket lifecycle configuration can be imported using the `bucket` and `expected_bucket_owner` separated by a comma (`,`) e.g.,
 *
 * ```sh
 *  $ pulumi import aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2 example bucket-name,123456789012
 * ```
 */
export class BucketLifecycleConfigurationV2 extends pulumi.CustomResource {
    /**
     * Get an existing BucketLifecycleConfigurationV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketLifecycleConfigurationV2State, opts?: pulumi.CustomResourceOptions): BucketLifecycleConfigurationV2 {
        return new BucketLifecycleConfigurationV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2';

    /**
     * Returns true if the given object is an instance of BucketLifecycleConfigurationV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketLifecycleConfigurationV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketLifecycleConfigurationV2.__pulumiType;
    }

    /**
     * The name of the source S3 bucket you want Amazon S3 to monitor.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    public readonly expectedBucketOwner!: pulumi.Output<string | undefined>;
    /**
     * List of configuration blocks describing the rules managing the replication documented below.
     */
    public readonly rules!: pulumi.Output<outputs.s3.BucketLifecycleConfigurationV2Rule[]>;

    /**
     * Create a BucketLifecycleConfigurationV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketLifecycleConfigurationV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketLifecycleConfigurationV2Args | BucketLifecycleConfigurationV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketLifecycleConfigurationV2State | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["expectedBucketOwner"] = state ? state.expectedBucketOwner : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as BucketLifecycleConfigurationV2Args | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["expectedBucketOwner"] = args ? args.expectedBucketOwner : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketLifecycleConfigurationV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketLifecycleConfigurationV2 resources.
 */
export interface BucketLifecycleConfigurationV2State {
    /**
     * The name of the source S3 bucket you want Amazon S3 to monitor.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    expectedBucketOwner?: pulumi.Input<string>;
    /**
     * List of configuration blocks describing the rules managing the replication documented below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.s3.BucketLifecycleConfigurationV2Rule>[]>;
}

/**
 * The set of arguments for constructing a BucketLifecycleConfigurationV2 resource.
 */
export interface BucketLifecycleConfigurationV2Args {
    /**
     * The name of the source S3 bucket you want Amazon S3 to monitor.
     */
    bucket: pulumi.Input<string>;
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    expectedBucketOwner?: pulumi.Input<string>;
    /**
     * List of configuration blocks describing the rules managing the replication documented below.
     */
    rules: pulumi.Input<pulumi.Input<inputs.s3.BucketLifecycleConfigurationV2Rule>[]>;
}
