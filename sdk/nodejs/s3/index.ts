// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessPointArgs, AccessPointState } from "./accessPoint";
export type AccessPoint = import("./accessPoint").AccessPoint;
export const AccessPoint: typeof import("./accessPoint").AccessPoint = null as any;
utilities.lazyLoad(exports, ["AccessPoint"], () => require("./accessPoint"));

export { AccountPublicAccessBlockArgs, AccountPublicAccessBlockState } from "./accountPublicAccessBlock";
export type AccountPublicAccessBlock = import("./accountPublicAccessBlock").AccountPublicAccessBlock;
export const AccountPublicAccessBlock: typeof import("./accountPublicAccessBlock").AccountPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["AccountPublicAccessBlock"], () => require("./accountPublicAccessBlock"));

export { AnalyticsConfigurationArgs, AnalyticsConfigurationState } from "./analyticsConfiguration";
export type AnalyticsConfiguration = import("./analyticsConfiguration").AnalyticsConfiguration;
export const AnalyticsConfiguration: typeof import("./analyticsConfiguration").AnalyticsConfiguration = null as any;
utilities.lazyLoad(exports, ["AnalyticsConfiguration"], () => require("./analyticsConfiguration"));

export { BucketArgs, BucketState } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { BucketAccelerateConfigurationArgs, BucketAccelerateConfigurationState } from "./bucketAccelerateConfiguration";
export type BucketAccelerateConfiguration = import("./bucketAccelerateConfiguration").BucketAccelerateConfiguration;
export const BucketAccelerateConfiguration: typeof import("./bucketAccelerateConfiguration").BucketAccelerateConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketAccelerateConfiguration"], () => require("./bucketAccelerateConfiguration"));

export { BucketAclArgs, BucketAclState } from "./bucketAcl";
export type BucketAcl = import("./bucketAcl").BucketAcl;
export const BucketAcl: typeof import("./bucketAcl").BucketAcl = null as any;
utilities.lazyLoad(exports, ["BucketAcl"], () => require("./bucketAcl"));

export { BucketCorsConfigurationArgs, BucketCorsConfigurationState } from "./bucketCorsConfiguration";
export type BucketCorsConfiguration = import("./bucketCorsConfiguration").BucketCorsConfiguration;
export const BucketCorsConfiguration: typeof import("./bucketCorsConfiguration").BucketCorsConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketCorsConfiguration"], () => require("./bucketCorsConfiguration"));

export { BucketIntelligentTieringConfigurationArgs, BucketIntelligentTieringConfigurationState } from "./bucketIntelligentTieringConfiguration";
export type BucketIntelligentTieringConfiguration = import("./bucketIntelligentTieringConfiguration").BucketIntelligentTieringConfiguration;
export const BucketIntelligentTieringConfiguration: typeof import("./bucketIntelligentTieringConfiguration").BucketIntelligentTieringConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketIntelligentTieringConfiguration"], () => require("./bucketIntelligentTieringConfiguration"));

export { BucketLifecycleConfigurationArgs, BucketLifecycleConfigurationState } from "./bucketLifecycleConfiguration";
export type BucketLifecycleConfiguration = import("./bucketLifecycleConfiguration").BucketLifecycleConfiguration;
export const BucketLifecycleConfiguration: typeof import("./bucketLifecycleConfiguration").BucketLifecycleConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketLifecycleConfiguration"], () => require("./bucketLifecycleConfiguration"));

export { BucketLoggingArgs, BucketLoggingState } from "./bucketLogging";
export type BucketLogging = import("./bucketLogging").BucketLogging;
export const BucketLogging: typeof import("./bucketLogging").BucketLogging = null as any;
utilities.lazyLoad(exports, ["BucketLogging"], () => require("./bucketLogging"));

export { BucketMetricArgs, BucketMetricState } from "./bucketMetric";
export type BucketMetric = import("./bucketMetric").BucketMetric;
export const BucketMetric: typeof import("./bucketMetric").BucketMetric = null as any;
utilities.lazyLoad(exports, ["BucketMetric"], () => require("./bucketMetric"));

export { BucketNotificationArgs, BucketNotificationState } from "./bucketNotification";
export type BucketNotification = import("./bucketNotification").BucketNotification;
export const BucketNotification: typeof import("./bucketNotification").BucketNotification = null as any;
utilities.lazyLoad(exports, ["BucketNotification"], () => require("./bucketNotification"));

export { BucketObjectArgs, BucketObjectState } from "./bucketObject";
export type BucketObject = import("./bucketObject").BucketObject;
export const BucketObject: typeof import("./bucketObject").BucketObject = null as any;
utilities.lazyLoad(exports, ["BucketObject"], () => require("./bucketObject"));

export { BucketObjectLockConfigurationArgs, BucketObjectLockConfigurationState } from "./bucketObjectLockConfiguration";
export type BucketObjectLockConfiguration = import("./bucketObjectLockConfiguration").BucketObjectLockConfiguration;
export const BucketObjectLockConfiguration: typeof import("./bucketObjectLockConfiguration").BucketObjectLockConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketObjectLockConfiguration"], () => require("./bucketObjectLockConfiguration"));

export { BucketObjectv2Args, BucketObjectv2State } from "./bucketObjectv2";
export type BucketObjectv2 = import("./bucketObjectv2").BucketObjectv2;
export const BucketObjectv2: typeof import("./bucketObjectv2").BucketObjectv2 = null as any;
utilities.lazyLoad(exports, ["BucketObjectv2"], () => require("./bucketObjectv2"));

export { BucketOwnershipControlsArgs, BucketOwnershipControlsState } from "./bucketOwnershipControls";
export type BucketOwnershipControls = import("./bucketOwnershipControls").BucketOwnershipControls;
export const BucketOwnershipControls: typeof import("./bucketOwnershipControls").BucketOwnershipControls = null as any;
utilities.lazyLoad(exports, ["BucketOwnershipControls"], () => require("./bucketOwnershipControls"));

export { BucketPolicyArgs, BucketPolicyState } from "./bucketPolicy";
export type BucketPolicy = import("./bucketPolicy").BucketPolicy;
export const BucketPolicy: typeof import("./bucketPolicy").BucketPolicy = null as any;
utilities.lazyLoad(exports, ["BucketPolicy"], () => require("./bucketPolicy"));

export { BucketPublicAccessBlockArgs, BucketPublicAccessBlockState } from "./bucketPublicAccessBlock";
export type BucketPublicAccessBlock = import("./bucketPublicAccessBlock").BucketPublicAccessBlock;
export const BucketPublicAccessBlock: typeof import("./bucketPublicAccessBlock").BucketPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["BucketPublicAccessBlock"], () => require("./bucketPublicAccessBlock"));

export { BucketReplicationConfigArgs, BucketReplicationConfigState } from "./bucketReplicationConfig";
export type BucketReplicationConfig = import("./bucketReplicationConfig").BucketReplicationConfig;
export const BucketReplicationConfig: typeof import("./bucketReplicationConfig").BucketReplicationConfig = null as any;
utilities.lazyLoad(exports, ["BucketReplicationConfig"], () => require("./bucketReplicationConfig"));

export { BucketRequestPaymentConfigurationArgs, BucketRequestPaymentConfigurationState } from "./bucketRequestPaymentConfiguration";
export type BucketRequestPaymentConfiguration = import("./bucketRequestPaymentConfiguration").BucketRequestPaymentConfiguration;
export const BucketRequestPaymentConfiguration: typeof import("./bucketRequestPaymentConfiguration").BucketRequestPaymentConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketRequestPaymentConfiguration"], () => require("./bucketRequestPaymentConfiguration"));

export { BucketServerSideEncryptionConfigurationArgs, BucketServerSideEncryptionConfigurationState } from "./bucketServerSideEncryptionConfiguration";
export type BucketServerSideEncryptionConfiguration = import("./bucketServerSideEncryptionConfiguration").BucketServerSideEncryptionConfiguration;
export const BucketServerSideEncryptionConfiguration: typeof import("./bucketServerSideEncryptionConfiguration").BucketServerSideEncryptionConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketServerSideEncryptionConfiguration"], () => require("./bucketServerSideEncryptionConfiguration"));

export { BucketVersioningArgs, BucketVersioningState } from "./bucketVersioning";
export type BucketVersioning = import("./bucketVersioning").BucketVersioning;
export const BucketVersioning: typeof import("./bucketVersioning").BucketVersioning = null as any;
utilities.lazyLoad(exports, ["BucketVersioning"], () => require("./bucketVersioning"));

export { BucketWebsiteConfigurationArgs, BucketWebsiteConfigurationState } from "./bucketWebsiteConfiguration";
export type BucketWebsiteConfiguration = import("./bucketWebsiteConfiguration").BucketWebsiteConfiguration;
export const BucketWebsiteConfiguration: typeof import("./bucketWebsiteConfiguration").BucketWebsiteConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketWebsiteConfiguration"], () => require("./bucketWebsiteConfiguration"));

export * from "./cannedAcl";
export { DirectoryBucketArgs, DirectoryBucketState } from "./directoryBucket";
export type DirectoryBucket = import("./directoryBucket").DirectoryBucket;
export const DirectoryBucket: typeof import("./directoryBucket").DirectoryBucket = null as any;
utilities.lazyLoad(exports, ["DirectoryBucket"], () => require("./directoryBucket"));

export { GetAccountPublicAccessBlockArgs, GetAccountPublicAccessBlockResult, GetAccountPublicAccessBlockOutputArgs } from "./getAccountPublicAccessBlock";
export const getAccountPublicAccessBlock: typeof import("./getAccountPublicAccessBlock").getAccountPublicAccessBlock = null as any;
export const getAccountPublicAccessBlockOutput: typeof import("./getAccountPublicAccessBlock").getAccountPublicAccessBlockOutput = null as any;
utilities.lazyLoad(exports, ["getAccountPublicAccessBlock","getAccountPublicAccessBlockOutput"], () => require("./getAccountPublicAccessBlock"));

export { GetBucketArgs, GetBucketResult, GetBucketOutputArgs } from "./getBucket";
export const getBucket: typeof import("./getBucket").getBucket = null as any;
export const getBucketOutput: typeof import("./getBucket").getBucketOutput = null as any;
utilities.lazyLoad(exports, ["getBucket","getBucketOutput"], () => require("./getBucket"));

export { GetBucketObjectArgs, GetBucketObjectResult, GetBucketObjectOutputArgs } from "./getBucketObject";
export const getBucketObject: typeof import("./getBucketObject").getBucketObject = null as any;
export const getBucketObjectOutput: typeof import("./getBucketObject").getBucketObjectOutput = null as any;
utilities.lazyLoad(exports, ["getBucketObject","getBucketObjectOutput"], () => require("./getBucketObject"));

export { GetBucketObjectsArgs, GetBucketObjectsResult, GetBucketObjectsOutputArgs } from "./getBucketObjects";
export const getBucketObjects: typeof import("./getBucketObjects").getBucketObjects = null as any;
export const getBucketObjectsOutput: typeof import("./getBucketObjects").getBucketObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getBucketObjects","getBucketObjectsOutput"], () => require("./getBucketObjects"));

export { GetBucketPolicyArgs, GetBucketPolicyResult, GetBucketPolicyOutputArgs } from "./getBucketPolicy";
export const getBucketPolicy: typeof import("./getBucketPolicy").getBucketPolicy = null as any;
export const getBucketPolicyOutput: typeof import("./getBucketPolicy").getBucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBucketPolicy","getBucketPolicyOutput"], () => require("./getBucketPolicy"));

export { GetCanonicalUserIdArgs, GetCanonicalUserIdResult, GetCanonicalUserIdOutputArgs } from "./getCanonicalUserId";
export const getCanonicalUserId: typeof import("./getCanonicalUserId").getCanonicalUserId = null as any;
export const getCanonicalUserIdOutput: typeof import("./getCanonicalUserId").getCanonicalUserIdOutput = null as any;
utilities.lazyLoad(exports, ["getCanonicalUserId","getCanonicalUserIdOutput"], () => require("./getCanonicalUserId"));

export { GetDirectoryBucketsArgs, GetDirectoryBucketsResult, GetDirectoryBucketsOutputArgs } from "./getDirectoryBuckets";
export const getDirectoryBuckets: typeof import("./getDirectoryBuckets").getDirectoryBuckets = null as any;
export const getDirectoryBucketsOutput: typeof import("./getDirectoryBuckets").getDirectoryBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getDirectoryBuckets","getDirectoryBucketsOutput"], () => require("./getDirectoryBuckets"));

export { GetObjectArgs, GetObjectResult, GetObjectOutputArgs } from "./getObject";
export const getObject: typeof import("./getObject").getObject = null as any;
export const getObjectOutput: typeof import("./getObject").getObjectOutput = null as any;
utilities.lazyLoad(exports, ["getObject","getObjectOutput"], () => require("./getObject"));

export { GetObjectsArgs, GetObjectsResult, GetObjectsOutputArgs } from "./getObjects";
export const getObjects: typeof import("./getObjects").getObjects = null as any;
export const getObjectsOutput: typeof import("./getObjects").getObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getObjects","getObjectsOutput"], () => require("./getObjects"));

export { InventoryArgs, InventoryState } from "./inventory";
export type Inventory = import("./inventory").Inventory;
export const Inventory: typeof import("./inventory").Inventory = null as any;
utilities.lazyLoad(exports, ["Inventory"], () => require("./inventory"));

export { ObjectCopyArgs, ObjectCopyState } from "./objectCopy";
export type ObjectCopy = import("./objectCopy").ObjectCopy;
export const ObjectCopy: typeof import("./objectCopy").ObjectCopy = null as any;
utilities.lazyLoad(exports, ["ObjectCopy"], () => require("./objectCopy"));

export * from "./routingRules";
export * from "./s3Mixins";

// Export enums:
export * from "../types/enums/s3";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:s3/accessPoint:AccessPoint":
                return new AccessPoint(name, <any>undefined, { urn })
            case "aws:s3/accountPublicAccessBlock:AccountPublicAccessBlock":
                return new AccountPublicAccessBlock(name, <any>undefined, { urn })
            case "aws:s3/analyticsConfiguration:AnalyticsConfiguration":
                return new AnalyticsConfiguration(name, <any>undefined, { urn })
            case "aws:s3/bucket:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "aws:s3/bucketAccelerateConfiguration:BucketAccelerateConfiguration":
                return new BucketAccelerateConfiguration(name, <any>undefined, { urn })
            case "aws:s3/bucketAcl:BucketAcl":
                return new BucketAcl(name, <any>undefined, { urn })
            case "aws:s3/bucketCorsConfiguration:BucketCorsConfiguration":
                return new BucketCorsConfiguration(name, <any>undefined, { urn })
            case "aws:s3/bucketIntelligentTieringConfiguration:BucketIntelligentTieringConfiguration":
                return new BucketIntelligentTieringConfiguration(name, <any>undefined, { urn })
            case "aws:s3/bucketLifecycleConfiguration:BucketLifecycleConfiguration":
                return new BucketLifecycleConfiguration(name, <any>undefined, { urn })
            case "aws:s3/bucketLogging:BucketLogging":
                return new BucketLogging(name, <any>undefined, { urn })
            case "aws:s3/bucketMetric:BucketMetric":
                return new BucketMetric(name, <any>undefined, { urn })
            case "aws:s3/bucketNotification:BucketNotification":
                return new BucketNotification(name, <any>undefined, { urn })
            case "aws:s3/bucketObject:BucketObject":
                return new BucketObject(name, <any>undefined, { urn })
            case "aws:s3/bucketObjectLockConfiguration:BucketObjectLockConfiguration":
                return new BucketObjectLockConfiguration(name, <any>undefined, { urn })
            case "aws:s3/bucketObjectv2:BucketObjectv2":
                return new BucketObjectv2(name, <any>undefined, { urn })
            case "aws:s3/bucketOwnershipControls:BucketOwnershipControls":
                return new BucketOwnershipControls(name, <any>undefined, { urn })
            case "aws:s3/bucketPolicy:BucketPolicy":
                return new BucketPolicy(name, <any>undefined, { urn })
            case "aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock":
                return new BucketPublicAccessBlock(name, <any>undefined, { urn })
            case "aws:s3/bucketReplicationConfig:BucketReplicationConfig":
                return new BucketReplicationConfig(name, <any>undefined, { urn })
            case "aws:s3/bucketRequestPaymentConfiguration:BucketRequestPaymentConfiguration":
                return new BucketRequestPaymentConfiguration(name, <any>undefined, { urn })
            case "aws:s3/bucketServerSideEncryptionConfiguration:BucketServerSideEncryptionConfiguration":
                return new BucketServerSideEncryptionConfiguration(name, <any>undefined, { urn })
            case "aws:s3/bucketVersioning:BucketVersioning":
                return new BucketVersioning(name, <any>undefined, { urn })
            case "aws:s3/bucketWebsiteConfiguration:BucketWebsiteConfiguration":
                return new BucketWebsiteConfiguration(name, <any>undefined, { urn })
            case "aws:s3/directoryBucket:DirectoryBucket":
                return new DirectoryBucket(name, <any>undefined, { urn })
            case "aws:s3/inventory:Inventory":
                return new Inventory(name, <any>undefined, { urn })
            case "aws:s3/objectCopy:ObjectCopy":
                return new ObjectCopy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "s3/accessPoint", _module)
pulumi.runtime.registerResourceModule("aws", "s3/accountPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("aws", "s3/analyticsConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucket", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketAccelerateConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketAcl", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketCorsConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketIntelligentTieringConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketLifecycleConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketLogging", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketMetric", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketNotification", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketObject", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketObjectLockConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketObjectv2", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketOwnershipControls", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketReplicationConfig", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketRequestPaymentConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketServerSideEncryptionConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketVersioning", _module)
pulumi.runtime.registerResourceModule("aws", "s3/bucketWebsiteConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "s3/directoryBucket", _module)
pulumi.runtime.registerResourceModule("aws", "s3/inventory", _module)
pulumi.runtime.registerResourceModule("aws", "s3/objectCopy", _module)
