// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
 *
 * > **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `aws.s3.BucketNotification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example "Trigger multiple Lambda functions" for an option.
 *
 * > This resource cannot be used with S3 directory buckets.
 *
 * ## Example Usage
 *
 * ### Add notification configuration to SNS Topic
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.BucketV2("bucket", {bucket: "your-bucket-name"});
 * const topic = aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["s3.amazonaws.com"],
 *         }],
 *         actions: ["SNS:Publish"],
 *         resources: ["arn:aws:sns:*:*:s3-event-notification-topic"],
 *         conditions: [{
 *             test: "ArnLike",
 *             variable: "aws:SourceArn",
 *             values: [bucket.arn],
 *         }],
 *     }],
 * });
 * const topicTopic = new aws.sns.Topic("topic", {
 *     name: "s3-event-notification-topic",
 *     policy: topic.apply(topic => topic.json),
 * });
 * const bucketNotification = new aws.s3.BucketNotification("bucket_notification", {
 *     bucket: bucket.id,
 *     topics: [{
 *         topicArn: topicTopic.arn,
 *         events: ["s3:ObjectCreated:*"],
 *         filterSuffix: ".log",
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Add notification configuration to SQS Queue
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.BucketV2("bucket", {bucket: "your-bucket-name"});
 * const queue = aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "*",
 *             identifiers: ["*"],
 *         }],
 *         actions: ["sqs:SendMessage"],
 *         resources: ["arn:aws:sqs:*:*:s3-event-notification-queue"],
 *         conditions: [{
 *             test: "ArnEquals",
 *             variable: "aws:SourceArn",
 *             values: [bucket.arn],
 *         }],
 *     }],
 * });
 * const queueQueue = new aws.sqs.Queue("queue", {
 *     name: "s3-event-notification-queue",
 *     policy: queue.apply(queue => queue.json),
 * });
 * const bucketNotification = new aws.s3.BucketNotification("bucket_notification", {
 *     bucket: bucket.id,
 *     queues: [{
 *         queueArn: queueQueue.arn,
 *         events: ["s3:ObjectCreated:*"],
 *         filterSuffix: ".log",
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Add notification configuration to Lambda Function
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["lambda.amazonaws.com"],
 *         }],
 *         actions: ["sts:AssumeRole"],
 *     }],
 * });
 * const iamForLambda = new aws.iam.Role("iam_for_lambda", {
 *     name: "iam_for_lambda",
 *     assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json),
 * });
 * const func = new aws.lambda.Function("func", {
 *     code: new pulumi.asset.FileArchive("your-function.zip"),
 *     name: "example_lambda_name",
 *     role: iamForLambda.arn,
 *     handler: "exports.example",
 *     runtime: aws.lambda.Runtime.Go1dx,
 * });
 * const bucket = new aws.s3.BucketV2("bucket", {bucket: "your-bucket-name"});
 * const allowBucket = new aws.lambda.Permission("allow_bucket", {
 *     statementId: "AllowExecutionFromS3Bucket",
 *     action: "lambda:InvokeFunction",
 *     "function": func.arn,
 *     principal: "s3.amazonaws.com",
 *     sourceArn: bucket.arn,
 * });
 * const bucketNotification = new aws.s3.BucketNotification("bucket_notification", {
 *     bucket: bucket.id,
 *     lambdaFunctions: [{
 *         lambdaFunctionArn: func.arn,
 *         events: ["s3:ObjectCreated:*"],
 *         filterPrefix: "AWSLogs/",
 *         filterSuffix: ".log",
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Trigger multiple Lambda functions
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["lambda.amazonaws.com"],
 *         }],
 *         actions: ["sts:AssumeRole"],
 *     }],
 * });
 * const iamForLambda = new aws.iam.Role("iam_for_lambda", {
 *     name: "iam_for_lambda",
 *     assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json),
 * });
 * const func1 = new aws.lambda.Function("func1", {
 *     code: new pulumi.asset.FileArchive("your-function1.zip"),
 *     name: "example_lambda_name1",
 *     role: iamForLambda.arn,
 *     handler: "exports.example",
 *     runtime: aws.lambda.Runtime.Go1dx,
 * });
 * const bucket = new aws.s3.BucketV2("bucket", {bucket: "your-bucket-name"});
 * const allowBucket1 = new aws.lambda.Permission("allow_bucket1", {
 *     statementId: "AllowExecutionFromS3Bucket1",
 *     action: "lambda:InvokeFunction",
 *     "function": func1.arn,
 *     principal: "s3.amazonaws.com",
 *     sourceArn: bucket.arn,
 * });
 * const func2 = new aws.lambda.Function("func2", {
 *     code: new pulumi.asset.FileArchive("your-function2.zip"),
 *     name: "example_lambda_name2",
 *     role: iamForLambda.arn,
 *     handler: "exports.example",
 * });
 * const allowBucket2 = new aws.lambda.Permission("allow_bucket2", {
 *     statementId: "AllowExecutionFromS3Bucket2",
 *     action: "lambda:InvokeFunction",
 *     "function": func2.arn,
 *     principal: "s3.amazonaws.com",
 *     sourceArn: bucket.arn,
 * });
 * const bucketNotification = new aws.s3.BucketNotification("bucket_notification", {
 *     bucket: bucket.id,
 *     lambdaFunctions: [
 *         {
 *             lambdaFunctionArn: func1.arn,
 *             events: ["s3:ObjectCreated:*"],
 *             filterPrefix: "AWSLogs/",
 *             filterSuffix: ".log",
 *         },
 *         {
 *             lambdaFunctionArn: func2.arn,
 *             events: ["s3:ObjectCreated:*"],
 *             filterPrefix: "OtherLogs/",
 *             filterSuffix: ".log",
 *         },
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Add multiple notification configurations to SQS Queue
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.BucketV2("bucket", {bucket: "your-bucket-name"});
 * const queue = aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "*",
 *             identifiers: ["*"],
 *         }],
 *         actions: ["sqs:SendMessage"],
 *         resources: ["arn:aws:sqs:*:*:s3-event-notification-queue"],
 *         conditions: [{
 *             test: "ArnEquals",
 *             variable: "aws:SourceArn",
 *             values: [bucket.arn],
 *         }],
 *     }],
 * });
 * const queueQueue = new aws.sqs.Queue("queue", {
 *     name: "s3-event-notification-queue",
 *     policy: queue.apply(queue => queue.json),
 * });
 * const bucketNotification = new aws.s3.BucketNotification("bucket_notification", {
 *     bucket: bucket.id,
 *     queues: [
 *         {
 *             id: "image-upload-event",
 *             queueArn: queueQueue.arn,
 *             events: ["s3:ObjectCreated:*"],
 *             filterPrefix: "images/",
 *         },
 *         {
 *             id: "video-upload-event",
 *             queueArn: queueQueue.arn,
 *             events: ["s3:ObjectCreated:*"],
 *             filterPrefix: "videos/",
 *         },
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * For JSON syntax, use an array instead of defining the `queue` key twice.
 *
 * ### Emit events to EventBridge
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.BucketV2("bucket", {bucket: "your-bucket-name"});
 * const bucketNotification = new aws.s3.BucketNotification("bucket_notification", {
 *     bucket: bucket.id,
 *     eventbridge: true,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import S3 bucket notification using the `bucket`. For example:
 *
 * ```sh
 * $ pulumi import aws:s3/bucketNotification:BucketNotification bucket_notification bucket-name
 * ```
 */
export class BucketNotification extends pulumi.CustomResource {
    /**
     * Get an existing BucketNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketNotificationState, opts?: pulumi.CustomResourceOptions): BucketNotification {
        return new BucketNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:s3/bucketNotification:BucketNotification';

    /**
     * Returns true if the given object is an instance of BucketNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketNotification.__pulumiType;
    }

    /**
     * Name of the bucket for notification configuration.
     *
     * The following arguments are optional:
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Whether to enable Amazon EventBridge notifications. Defaults to `false`.
     */
    public readonly eventbridge!: pulumi.Output<boolean | undefined>;
    /**
     * Used to configure notifications to a Lambda Function. See below.
     */
    public readonly lambdaFunctions!: pulumi.Output<outputs.s3.BucketNotificationLambdaFunction[] | undefined>;
    /**
     * Notification configuration to SQS Queue. See below.
     */
    public readonly queues!: pulumi.Output<outputs.s3.BucketNotificationQueue[] | undefined>;
    /**
     * Notification configuration to SNS Topic. See below.
     */
    public readonly topics!: pulumi.Output<outputs.s3.BucketNotificationTopic[] | undefined>;

    /**
     * Create a BucketNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketNotificationArgs | BucketNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketNotificationState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["eventbridge"] = state ? state.eventbridge : undefined;
            resourceInputs["lambdaFunctions"] = state ? state.lambdaFunctions : undefined;
            resourceInputs["queues"] = state ? state.queues : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
        } else {
            const args = argsOrState as BucketNotificationArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["eventbridge"] = args ? args.eventbridge : undefined;
            resourceInputs["lambdaFunctions"] = args ? args.lambdaFunctions : undefined;
            resourceInputs["queues"] = args ? args.queues : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketNotification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketNotification resources.
 */
export interface BucketNotificationState {
    /**
     * Name of the bucket for notification configuration.
     *
     * The following arguments are optional:
     */
    bucket?: pulumi.Input<string>;
    /**
     * Whether to enable Amazon EventBridge notifications. Defaults to `false`.
     */
    eventbridge?: pulumi.Input<boolean>;
    /**
     * Used to configure notifications to a Lambda Function. See below.
     */
    lambdaFunctions?: pulumi.Input<pulumi.Input<inputs.s3.BucketNotificationLambdaFunction>[]>;
    /**
     * Notification configuration to SQS Queue. See below.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.s3.BucketNotificationQueue>[]>;
    /**
     * Notification configuration to SNS Topic. See below.
     */
    topics?: pulumi.Input<pulumi.Input<inputs.s3.BucketNotificationTopic>[]>;
}

/**
 * The set of arguments for constructing a BucketNotification resource.
 */
export interface BucketNotificationArgs {
    /**
     * Name of the bucket for notification configuration.
     *
     * The following arguments are optional:
     */
    bucket: pulumi.Input<string>;
    /**
     * Whether to enable Amazon EventBridge notifications. Defaults to `false`.
     */
    eventbridge?: pulumi.Input<boolean>;
    /**
     * Used to configure notifications to a Lambda Function. See below.
     */
    lambdaFunctions?: pulumi.Input<pulumi.Input<inputs.s3.BucketNotificationLambdaFunction>[]>;
    /**
     * Notification configuration to SQS Queue. See below.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.s3.BucketNotificationQueue>[]>;
    /**
     * Notification configuration to SNS Topic. See below.
     */
    topics?: pulumi.Input<pulumi.Input<inputs.s3.BucketNotificationTopic>[]>;
}
