// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";
import * as enums from "./enums";

import {RoutingRule} from "./index";

export interface AccessPointPublicAccessBlockConfiguration {
    /**
     * Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
     * * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
     * * PUT Object calls fail if the request includes a public ACL.
     * * PUT Bucket calls fail if the request includes a public ACL.
     */
    blockPublicAcls?: boolean;
    /**
     * Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
     * * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
     */
    blockPublicPolicy?: boolean;
    /**
     * Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
     * * Ignore all public ACLs on buckets in this account and any objects that they contain.
     */
    ignorePublicAcls?: boolean;
    /**
     * Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
     * * Only the bucket owner and AWS Services can access buckets with public policies.
     */
    restrictPublicBuckets?: boolean;
}
export interface AccessPointVpcConfiguration {
    /**
     * This access point will only allow connections from the specified VPC ID.
     */
    vpcId: string;
}
export interface AnalyticsConfigurationFilter {
    /**
     * Object prefix for filtering.
     */
    prefix?: string;
    /**
     * Set of object tags for filtering.
     */
    tags?: {[key: string]: string};
}
export interface AnalyticsConfigurationStorageClassAnalysis {
    /**
     * Data export configuration (documented below).
     */
    dataExport: outputs.AnalyticsConfigurationStorageClassAnalysisDataExport;
}
export interface AnalyticsConfigurationStorageClassAnalysisDataExport {
    /**
     * Specifies the destination for the exported analytics data (documented below).
     */
    destination: outputs.AnalyticsConfigurationStorageClassAnalysisDataExportDestination;
    /**
     * Schema version of exported analytics data. Allowed values: `V_1`. Default value: `V_1`.
     */
    outputSchemaVersion?: string;
}
export interface AnalyticsConfigurationStorageClassAnalysisDataExportDestination {
    /**
     * Analytics data export currently only supports an S3 bucket destination (documented below).
     */
    s3BucketDestination: outputs.AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination;
}
export interface AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination {
    /**
     * Account ID that owns the destination bucket.
     */
    bucketAccountId?: string;
    /**
     * ARN of the destination bucket.
     */
    bucketArn: string;
    /**
     * Output format of exported analytics data. Allowed values: `CSV`. Default value: `CSV`.
     */
    format?: string;
    /**
     * Prefix to append to exported analytics data.
     */
    prefix?: string;
}
export interface BucketAclV2AccessControlPolicy {
    /**
     * Set of `grant` configuration blocks. See below.
     */
    grants?: outputs.BucketAclV2AccessControlPolicyGrant[];
    /**
     * Configuration block for the bucket owner's display name and ID. See below.
     */
    owner: outputs.BucketAclV2AccessControlPolicyOwner;
}
export interface BucketAclV2AccessControlPolicyGrant {
    /**
     * Configuration block for the person being granted permissions. See below.
     */
    grantee?: outputs.BucketAclV2AccessControlPolicyGrantGrantee;
    /**
     * Logging permissions assigned to the grantee for the bucket. Valid values: `FULL_CONTROL`, `WRITE`, `WRITE_ACP`, `READ`, `READ_ACP`. See [What permissions can I grant?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#permissions) for more details about what each permission means in the context of buckets.
     */
    permission: string;
}
export interface BucketAclV2AccessControlPolicyGrantGrantee {
    displayName: string;
    /**
     * Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
     */
    emailAddress?: string;
    /**
     * Canonical user ID of the grantee.
     */
    id?: string;
    /**
     * Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
     */
    type: string;
    /**
     * URI of the grantee group.
     */
    uri?: string;
}
export interface BucketAclV2AccessControlPolicyOwner {
    /**
     * Display name of the owner.
     */
    displayName: string;
    /**
     * ID of the owner.
     */
    id: string;
}
export interface BucketCorsConfigurationV2CorsRule {
    /**
     * Set of Headers that are specified in the `Access-Control-Request-Headers` header.
     */
    allowedHeaders?: string[];
    /**
     * Set of HTTP methods that you allow the origin to execute. Valid values are `GET`, `PUT`, `HEAD`, `POST`, and `DELETE`.
     */
    allowedMethods: string[];
    /**
     * Set of origins you want customers to be able to access the bucket from.
     */
    allowedOrigins: string[];
    /**
     * Set of headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript `XMLHttpRequest` object).
     */
    exposeHeaders?: string[];
    /**
     * Unique identifier for the rule. The value cannot be longer than 255 characters.
     */
    id?: string;
    /**
     * Time in seconds that your browser is to cache the preflight response for the specified resource.
     */
    maxAgeSeconds?: number;
}
export interface BucketCorsRule {
    allowedHeaders?: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposeHeaders?: string[];
    maxAgeSeconds?: number;
}
export interface BucketGrant {
    /**
     * Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
     */
    id?: string;
    /**
     * List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
     */
    permissions: string[];
    /**
     * Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
     */
    type: string;
    /**
     * Uri address to grant for. Used only when `type` is `Group`.
     */
    uri?: string;
}
export interface BucketIntelligentTieringConfigurationFilter {
    /**
     * Object key name prefix that identifies the subset of objects to which the configuration applies.
     */
    prefix?: string;
    /**
     * All of these tags must exist in the object's tag set in order for the configuration to apply.
     */
    tags?: {[key: string]: string};
}
export interface BucketIntelligentTieringConfigurationTiering {
    /**
     * S3 Intelligent-Tiering access tier. Valid values: `ARCHIVE_ACCESS`, `DEEP_ARCHIVE_ACCESS`.
     */
    accessTier: string;
    /**
     * Number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier.
     */
    days: number;
}
export interface BucketLifecycleConfigurationV2Rule {
    /**
     * Configuration block that specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. See below.
     */
    abortIncompleteMultipartUpload?: outputs.BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload;
    /**
     * Configuration block that specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker. See below.
     */
    expiration?: outputs.BucketLifecycleConfigurationV2RuleExpiration;
    /**
     * Configuration block used to identify objects that a Lifecycle Rule applies to. See below. If not specified, the `rule` will default to using `prefix`.
     */
    filter?: outputs.BucketLifecycleConfigurationV2RuleFilter;
    /**
     * Unique identifier for the rule. The value cannot be longer than 255 characters.
     */
    id: string;
    /**
     * Configuration block that specifies when noncurrent object versions expire. See below.
     */
    noncurrentVersionExpiration?: outputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration;
    /**
     * Set of configuration blocks that specify the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. See below.
     */
    noncurrentVersionTransitions?: outputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition[];
    /**
     * **DEPRECATED** Use `filter` instead. This has been deprecated by Amazon S3. Prefix identifying one or more objects to which the rule applies. Defaults to an empty string (`""`) if `filter` is not specified.
     *
     * @deprecated Use filter instead
     */
    prefix?: string;
    /**
     * Whether the rule is currently being applied. Valid values: `Enabled` or `Disabled`.
     */
    status: string;
    /**
     * Set of configuration blocks that specify when an Amazon S3 object transitions to a specified storage class. See below.
     */
    transitions?: outputs.BucketLifecycleConfigurationV2RuleTransition[];
}
export interface BucketLifecycleConfigurationV2RuleAbortIncompleteMultipartUpload {
    /**
     * Number of days after which Amazon S3 aborts an incomplete multipart upload.
     */
    daysAfterInitiation?: number;
}
export interface BucketLifecycleConfigurationV2RuleExpiration {
    /**
     * Date the object is to be moved or deleted. The date value must be in [RFC3339 full-date format](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) e.g. `2023-08-22`.
     */
    date?: string;
    /**
     * Lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
     */
    days?: number;
    /**
     * Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to `true`, the delete marker will be expired; if set to `false` the policy takes no action.
     */
    expiredObjectDeleteMarker: boolean;
}
export interface BucketLifecycleConfigurationV2RuleFilter {
    /**
     * Configuration block used to apply a logical `AND` to two or more predicates. See below. The Lifecycle Rule will apply to any object matching all the predicates configured inside the `and` block.
     */
    and?: outputs.BucketLifecycleConfigurationV2RuleFilterAnd;
    /**
     * Minimum object size (in bytes) to which the rule applies.
     */
    objectSizeGreaterThan?: string;
    /**
     * Maximum object size (in bytes) to which the rule applies.
     */
    objectSizeLessThan?: string;
    /**
     * Prefix identifying one or more objects to which the rule applies. Defaults to an empty string (`""`) if not specified.
     */
    prefix?: string;
    /**
     * Configuration block for specifying a tag key and value. See below.
     */
    tag?: outputs.BucketLifecycleConfigurationV2RuleFilterTag;
}
export interface BucketLifecycleConfigurationV2RuleFilterAnd {
    /**
     * Minimum object size to which the rule applies. Value must be at least `0` if specified.
     */
    objectSizeGreaterThan?: number;
    /**
     * Maximum object size to which the rule applies. Value must be at least `1` if specified.
     */
    objectSizeLessThan?: number;
    /**
     * Prefix identifying one or more objects to which the rule applies.
     */
    prefix?: string;
    /**
     * Key-value map of resource tags. All of these tags must exist in the object's tag set in order for the rule to apply.
     */
    tags?: {[key: string]: string};
}
export interface BucketLifecycleConfigurationV2RuleFilterTag {
    /**
     * Name of the object key.
     */
    key: string;
    /**
     * Value of the tag.
     */
    value: string;
}
export interface BucketLifecycleConfigurationV2RuleNoncurrentVersionExpiration {
    /**
     * Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
     */
    newerNoncurrentVersions?: string;
    /**
     * Number of days an object is noncurrent before Amazon S3 can perform the associated action. Must be a positive integer.
     */
    noncurrentDays?: number;
}
export interface BucketLifecycleConfigurationV2RuleNoncurrentVersionTransition {
    /**
     * Number of noncurrent versions Amazon S3 will retain. Must be a non-zero positive integer.
     */
    newerNoncurrentVersions?: string;
    /**
     * Number of days an object is noncurrent before Amazon S3 can perform the associated action.
     */
    noncurrentDays?: number;
    /**
     * Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
     */
    storageClass: string;
}
export interface BucketLifecycleConfigurationV2RuleTransition {
    /**
     * Date objects are transitioned to the specified storage class. The date value must be in [RFC3339 full-date format](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) e.g. `2023-08-22`.
     */
    date?: string;
    /**
     * Number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer. If both `days` and `date` are not specified, defaults to `0`. Valid values depend on `storageClass`, see [Transition objects using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-transition-general-considerations.html) for more details.
     */
    days?: number;
    /**
     * Class of storage used to store the object. Valid Values: `GLACIER`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `DEEP_ARCHIVE`, `GLACIER_IR`.
     */
    storageClass: string;
}
export interface BucketLifecycleRule {
    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     */
    abortIncompleteMultipartUploadDays?: number;
    /**
     * Specifies lifecycle rule status.
     */
    enabled: boolean;
    /**
     * Specifies a period in the object's expire (documented below).
     */
    expiration?: outputs.BucketLifecycleRuleExpiration;
    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     */
    id: string;
    /**
     * Specifies when noncurrent object versions expire (documented below).
     */
    noncurrentVersionExpiration?: outputs.BucketLifecycleRuleNoncurrentVersionExpiration;
    /**
     * Specifies when noncurrent object versions transitions (documented below).
     *
     * At least one of `abortIncompleteMultipartUploadDays`, `expiration`, `transition`, `noncurrentVersionExpiration`, `noncurrentVersionTransition` must be specified.
     */
    noncurrentVersionTransitions?: outputs.BucketLifecycleRuleNoncurrentVersionTransition[];
    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     */
    prefix?: string;
    /**
     * Specifies object tags key and value.
     */
    tags?: {[key: string]: string};
    /**
     * Specifies a period in the object's transitions (documented below).
     */
    transitions?: outputs.BucketLifecycleRuleTransition[];
}
export interface BucketLifecycleRuleExpiration {
    /**
     * Specifies the date after which you want the corresponding action to take effect.
     */
    date?: string;
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days?: number;
    /**
     * On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
     */
    expiredObjectDeleteMarker?: boolean;
}
export interface BucketLifecycleRuleNoncurrentVersionExpiration {
    /**
     * Specifies the number of days noncurrent object versions expire.
     */
    days?: number;
}
export interface BucketLifecycleRuleNoncurrentVersionTransition {
    /**
     * Specifies the number of days noncurrent object versions transition.
     */
    days?: number;
    /**
     * Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
     */
    storageClass: string;
}
export interface BucketLifecycleRuleTransition {
    /**
     * Specifies the date after which you want the corresponding action to take effect.
     */
    date?: string;
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days?: number;
    /**
     * Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
     */
    storageClass: string;
}
export interface BucketLogging {
    /**
     * The name of the bucket that will receive the log objects.
     */
    targetBucket: string;
    /**
     * To specify a key prefix for log objects.
     */
    targetPrefix?: string;
}
export interface BucketLoggingV2TargetGrant {
    /**
     * Configuration block for the person being granted permissions. See below.
     */
    grantee: outputs.BucketLoggingV2TargetGrantGrantee;
    /**
     * Logging permissions assigned to the grantee for the bucket. Valid values: `FULL_CONTROL`, `READ`, `WRITE`.
     */
    permission: string;
}
export interface BucketLoggingV2TargetGrantGrantee {
    displayName: string;
    /**
     * Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
     */
    emailAddress?: string;
    /**
     * Canonical user ID of the grantee.
     */
    id?: string;
    /**
     * Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
     */
    type: string;
    /**
     * URI of the grantee group.
     */
    uri?: string;
}
export interface BucketLoggingV2TargetObjectKeyFormat {
    /**
     * Partitioned S3 key for log objects. See below.
     */
    partitionedPrefix?: outputs.BucketLoggingV2TargetObjectKeyFormatPartitionedPrefix;
    /**
     * Use the simple format for S3 keys for log objects. To use, set `simplePrefix {}`.
     */
    simplePrefix?: outputs.BucketLoggingV2TargetObjectKeyFormatSimplePrefix;
}
export interface BucketLoggingV2TargetObjectKeyFormatPartitionedPrefix {
    /**
     * Specifies the partition date source for the partitioned prefix. Valid values: `EventTime`, `DeliveryTime`.
     */
    partitionDateSource: string;
}
export interface BucketLoggingV2TargetObjectKeyFormatSimplePrefix {
}
export interface BucketMetricFilter {
    /**
     * S3 Access Point ARN for filtering (singular).
     */
    accessPoint?: string;
    /**
     * Object prefix for filtering (singular).
     */
    prefix?: string;
    /**
     * Object tags for filtering (up to 10).
     */
    tags?: {[key: string]: string};
}
export interface BucketNotificationLambdaFunction {
    /**
     * [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
     */
    events: string[];
    /**
     * Object key name prefix.
     */
    filterPrefix?: string;
    /**
     * Object key name suffix.
     */
    filterSuffix?: string;
    /**
     * Unique identifier for each of the notification configurations.
     */
    id: string;
    /**
     * Lambda function ARN.
     */
    lambdaFunctionArn?: string;
}
export interface BucketNotificationQueue {
    /**
     * Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
     */
    events: string[];
    /**
     * Object key name prefix.
     */
    filterPrefix?: string;
    /**
     * Object key name suffix.
     */
    filterSuffix?: string;
    /**
     * Unique identifier for each of the notification configurations.
     */
    id: string;
    /**
     * SQS queue ARN.
     */
    queueArn: string;
}
export interface BucketNotificationTopic {
    /**
     * [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
     */
    events: string[];
    /**
     * Object key name prefix.
     */
    filterPrefix?: string;
    /**
     * Object key name suffix.
     */
    filterSuffix?: string;
    /**
     * Unique identifier for each of the notification configurations.
     */
    id: string;
    /**
     * SNS topic ARN.
     */
    topicArn: string;
}
export interface BucketObjectLockConfiguration {
    /**
     * Indicates whether this bucket has an Object Lock configuration enabled. Valid value is `Enabled`.
     */
    objectLockEnabled: string;
    /**
     * The Object Lock rule in place for this bucket.
     */
    rule?: outputs.BucketObjectLockConfigurationRule;
}
export interface BucketObjectLockConfigurationRule {
    /**
     * The default retention period that you want to apply to new objects placed in this bucket.
     */
    defaultRetention: outputs.BucketObjectLockConfigurationRuleDefaultRetention;
}
export interface BucketObjectLockConfigurationRuleDefaultRetention {
    /**
     * The number of days that you want to specify for the default retention period.
     */
    days?: number;
    /**
     * The default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
     */
    mode: string;
    /**
     * The number of years that you want to specify for the default retention period.
     *
     * Either `days` or `years` must be specified, but not both.
     *
     * > **NOTE on `objectLockConfiguration`:** You can only enable S3 Object Lock for new buckets. If you need to turn on S3 Object Lock for an existing bucket, please contact AWS Support.
     * When you create a bucket with S3 Object Lock enabled, Amazon S3 automatically enables versioning for the bucket.
     * Once you create a bucket with S3 Object Lock enabled, you can't disable Object Lock or suspend versioning for the bucket.
     */
    years?: number;
}
export interface BucketObjectLockConfigurationV2Rule {
    /**
     * Configuration block for specifying the default Object Lock retention settings for new objects placed in the specified bucket. See below.
     */
    defaultRetention: outputs.BucketObjectLockConfigurationV2RuleDefaultRetention;
}
export interface BucketObjectLockConfigurationV2RuleDefaultRetention {
    /**
     * Number of days that you want to specify for the default retention period.
     */
    days?: number;
    /**
     * Default Object Lock retention mode you want to apply to new objects placed in the specified bucket. Valid values: `COMPLIANCE`, `GOVERNANCE`.
     */
    mode?: string;
    /**
     * Number of years that you want to specify for the default retention period.
     */
    years?: number;
}
export interface BucketObjectv2OverrideProvider {
    /**
     * Override the provider `defaultTags` configuration block.
     */
    defaultTags?: outputs.BucketObjectv2OverrideProviderDefaultTags;
}
export interface BucketObjectv2OverrideProviderDefaultTags {
    /**
     * Map of tags to assign to the object. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: {[key: string]: string};
}
export interface BucketOwnershipControlsRule {
    /**
     * Object ownership. Valid values: `BucketOwnerPreferred`, `ObjectWriter` or `BucketOwnerEnforced`
     */
    objectOwnership: string;
}
export interface BucketReplicationConfigRule {
    /**
     * Whether delete markers are replicated. This argument is only valid with V2 replication configurations (i.e., when `filter` is used)documented below.
     */
    deleteMarkerReplication?: outputs.BucketReplicationConfigRuleDeleteMarkerReplication;
    /**
     * Specifies the destination for the rule. See below.
     */
    destination: outputs.BucketReplicationConfigRuleDestination;
    /**
     * Replicate existing objects in the source bucket according to the rule configurations. See below.
     */
    existingObjectReplication?: outputs.BucketReplicationConfigRuleExistingObjectReplication;
    /**
     * Filter that identifies subset of objects to which the replication rule applies. See below. If not specified, the `rule` will default to using `prefix`.
     */
    filter?: outputs.BucketReplicationConfigRuleFilter;
    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     */
    id: string;
    /**
     * Object key name prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length. Defaults to an empty string (`""`) if `filter` is not specified.
     *
     * @deprecated Use filter instead
     */
    prefix?: string;
    /**
     * Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     */
    priority?: number;
    /**
     * Specifies special object selection criteria. See below.
     */
    sourceSelectionCriteria?: outputs.BucketReplicationConfigRuleSourceSelectionCriteria;
    /**
     * Status of the rule. Either `"Enabled"` or `"Disabled"`. The rule is ignored if status is not "Enabled".
     */
    status: string;
}
export interface BucketReplicationConfigRuleDeleteMarkerReplication {
    /**
     * Whether delete markers should be replicated. Either `"Enabled"` or `"Disabled"`.
     */
    status: string;
}
export interface BucketReplicationConfigRuleDestination {
    /**
     * Configuration block that specifies the overrides to use for object owners on replication. See below. Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object. Must be used in conjunction with `account` owner override configuration.
     */
    accessControlTranslation?: outputs.BucketReplicationConfigRuleDestinationAccessControlTranslation;
    /**
     * Account ID to specify the replica ownership. Must be used in conjunction with `accessControlTranslation` override configuration.
     */
    account?: string;
    /**
     * ARN of the bucket where you want Amazon S3 to store the results.
     */
    bucket: string;
    /**
     * Configuration block that provides information about encryption. See below. If `sourceSelectionCriteria` is specified, you must specify this element.
     */
    encryptionConfiguration?: outputs.BucketReplicationConfigRuleDestinationEncryptionConfiguration;
    /**
     * Configuration block that specifies replication metrics-related settings enabling replication metrics and events. See below.
     */
    metrics?: outputs.BucketReplicationConfigRuleDestinationMetrics;
    /**
     * Configuration block that specifies S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. See below. Replication Time Control must be used in conjunction with `metrics`.
     */
    replicationTime?: outputs.BucketReplicationConfigRuleDestinationReplicationTime;
    /**
     * The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
     */
    storageClass?: string;
}
export interface BucketReplicationConfigRuleDestinationAccessControlTranslation {
    /**
     * Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the Amazon S3 API Reference. Valid values: `Destination`.
     */
    owner: string;
}
export interface BucketReplicationConfigRuleDestinationEncryptionConfiguration {
    /**
     * ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket.
     */
    replicaKmsKeyId: string;
}
export interface BucketReplicationConfigRuleDestinationMetrics {
    /**
     * Configuration block that specifies the time threshold for emitting the `s3:Replication:OperationMissedThreshold` event. See below.
     */
    eventThreshold?: outputs.BucketReplicationConfigRuleDestinationMetricsEventThreshold;
    /**
     * Status of the Destination Metrics. Either `"Enabled"` or `"Disabled"`.
     */
    status: string;
}
export interface BucketReplicationConfigRuleDestinationMetricsEventThreshold {
    /**
     * Time in minutes. Valid values: `15`.
     */
    minutes: number;
}
export interface BucketReplicationConfigRuleDestinationReplicationTime {
    /**
     * Status of the Replication Time Control. Either `"Enabled"` or `"Disabled"`.
     */
    status: string;
    /**
     * Configuration block specifying the time by which replication should be complete for all objects and operations on objects. See below.
     */
    time: outputs.BucketReplicationConfigRuleDestinationReplicationTimeTime;
}
export interface BucketReplicationConfigRuleDestinationReplicationTimeTime {
    /**
     * Time in minutes. Valid values: `15`.
     */
    minutes: number;
}
export interface BucketReplicationConfigRuleExistingObjectReplication {
    /**
     * Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
     */
    status: string;
}
export interface BucketReplicationConfigRuleFilter {
    /**
     * Configuration block for specifying rule filters. This element is required only if you specify more than one filter. See and below for more details.
     */
    and?: outputs.BucketReplicationConfigRuleFilterAnd;
    /**
     * Object key name prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     */
    prefix?: string;
    /**
     * Configuration block for specifying a tag key and value. See below.
     */
    tag?: outputs.BucketReplicationConfigRuleFilterTag;
}
export interface BucketReplicationConfigRuleFilterAnd {
    /**
     * Object key name prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     */
    prefix?: string;
    /**
     * Map of tags (key and value pairs) that identifies a subset of objects to which the rule applies. The rule applies only to objects having all the tags in its tagset.
     */
    tags?: {[key: string]: string};
}
export interface BucketReplicationConfigRuleFilterTag {
    /**
     * Name of the object key.
     */
    key: string;
    /**
     * Value of the tag.
     */
    value: string;
}
export interface BucketReplicationConfigRuleSourceSelectionCriteria {
    /**
     * Configuration block that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when `filter` is specified), you can specify this element and set the status to `Enabled` to replicate modifications on replicas.
     */
    replicaModifications?: outputs.BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications;
    /**
     * Configuration block for filter information for the selection of Amazon S3 objects encrypted with AWS KMS. If specified, `replicaKmsKeyId` in `destination` `encryptionConfiguration` must be specified as well.
     */
    sseKmsEncryptedObjects?: outputs.BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects;
}
export interface BucketReplicationConfigRuleSourceSelectionCriteriaReplicaModifications {
    /**
     * Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
     */
    status: string;
}
export interface BucketReplicationConfigRuleSourceSelectionCriteriaSseKmsEncryptedObjects {
    /**
     * Whether the existing objects should be replicated. Either `"Enabled"` or `"Disabled"`.
     */
    status: string;
}
export interface BucketReplicationConfiguration {
    role: string;
    rules: outputs.BucketReplicationConfigurationRule[];
}
export interface BucketReplicationConfigurationRule {
    /**
     * Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
     */
    deleteMarkerReplicationStatus?: string;
    /**
     * Specifies the destination for the rule (documented below).
     */
    destination: outputs.BucketReplicationConfigurationRuleDestination;
    /**
     * Filter that identifies subset of objects to which the replication rule applies (documented below).
     */
    filter?: outputs.BucketReplicationConfigurationRuleFilter;
    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     */
    id?: string;
    /**
     * Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     */
    prefix?: string;
    /**
     * The priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     */
    priority?: number;
    /**
     * Specifies special object selection criteria (documented below).
     */
    sourceSelectionCriteria?: outputs.BucketReplicationConfigurationRuleSourceSelectionCriteria;
    /**
     * The status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
     *
     * > **NOTE:** Replication to multiple destination buckets requires that `priority` is specified in the `rules` object. If the corresponding rule requires no filter, an empty configuration block `filter {}` must be specified.
     */
    status: string;
}
export interface BucketReplicationConfigurationRuleDestination {
    /**
     * Specifies the overrides to use for object owners on replication. Must be used in conjunction with `accountId` owner override configuration.
     */
    accessControlTranslation?: outputs.BucketReplicationConfigurationRuleDestinationAccessControlTranslation;
    /**
     * The Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
     */
    accountId?: string;
    /**
     * The ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
     */
    bucket: string;
    /**
     * Enables replication metrics (required for S3 RTC) (documented below).
     */
    metrics?: outputs.BucketReplicationConfigurationRuleDestinationMetrics;
    /**
     * Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
     * `sseKmsEncryptedObjects` source selection criteria.
     */
    replicaKmsKeyId?: string;
    /**
     * Enables S3 Replication Time Control (S3 RTC) (documented below).
     */
    replicationTime?: outputs.BucketReplicationConfigurationRuleDestinationReplicationTime;
    /**
     * The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
     */
    storageClass?: string;
}
export interface BucketReplicationConfigurationRuleDestinationAccessControlTranslation {
    /**
     * The override value for the owner on replicated objects. Currently only `Destination` is supported.
     */
    owner: string;
}
export interface BucketReplicationConfigurationRuleDestinationMetrics {
    /**
     * Threshold within which objects are to be replicated. The only valid value is `15`.
     */
    minutes?: number;
    /**
     * The status of replication metrics. Either `Enabled` or `Disabled`.
     */
    status?: string;
}
export interface BucketReplicationConfigurationRuleDestinationReplicationTime {
    /**
     * Threshold within which objects are to be replicated. The only valid value is `15`.
     */
    minutes?: number;
    /**
     * The status of RTC. Either `Enabled` or `Disabled`.
     */
    status?: string;
}
export interface BucketReplicationConfigurationRuleFilter {
    /**
     * Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     */
    prefix?: string;
    /**
     * A map of tags that identifies subset of objects to which the rule applies.
     * The rule applies only to objects having all the tags in its tagset.
     */
    tags?: {[key: string]: string};
}
export interface BucketReplicationConfigurationRuleSourceSelectionCriteria {
    /**
     * Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
     * in `destination` must be specified as well.
     */
    sseKmsEncryptedObjects?: outputs.BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects;
}
export interface BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects {
    /**
     * Boolean which indicates if this criteria is enabled.
     */
    enabled: boolean;
}
export interface BucketServerSideEncryptionConfiguration {
    /**
     * A single object for server-side encryption by default configuration. (documented below)
     */
    rule: outputs.BucketServerSideEncryptionConfigurationRule;
}
export interface BucketServerSideEncryptionConfigurationRule {
    /**
     * A single object for setting server-side encryption by default. (documented below)
     */
    applyServerSideEncryptionByDefault: outputs.BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault;
    /**
     * Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
     */
    bucketKeyEnabled?: boolean;
}
export interface BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault {
    /**
     * The AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
     */
    kmsMasterKeyId?: string;
    /**
     * The server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
     */
    sseAlgorithm: string;
}
export interface BucketServerSideEncryptionConfigurationV2Rule {
    /**
     * Single object for setting server-side encryption by default. See below.
     */
    applyServerSideEncryptionByDefault?: outputs.BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault;
    /**
     * Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
     */
    bucketKeyEnabled?: boolean;
}
export interface BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefault {
    /**
     * AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
     */
    kmsMasterKeyId?: string;
    /**
     * Server-side encryption algorithm to use. Valid values are `AES256`, `aws:kms`, and `aws:kms:dsse`
     */
    sseAlgorithm: string;
}
export interface BucketV2CorsRule {
    /**
     * List of headers allowed.
     */
    allowedHeaders?: string[];
    /**
     * One or more HTTP methods that you allow the origin to execute. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
     */
    allowedMethods: string[];
    /**
     * One or more origins you want customers to be able to access the bucket from.
     */
    allowedOrigins: string[];
    /**
     * One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript `XMLHttpRequest` object).
     */
    exposeHeaders?: string[];
    /**
     * Specifies time in seconds that browser can cache the response for a preflight request.
     */
    maxAgeSeconds?: number;
}
export interface BucketV2Grant {
    /**
     * Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
     */
    id?: string;
    /**
     * List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
     */
    permissions: string[];
    /**
     * Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
     */
    type: string;
    /**
     * Uri address to grant for. Used only when `type` is `Group`.
     */
    uri?: string;
}
export interface BucketV2LifecycleRule {
    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     */
    abortIncompleteMultipartUploadDays?: number;
    /**
     * Specifies lifecycle rule status.
     */
    enabled: boolean;
    /**
     * Specifies a period in the object's expire. See Expiration below for details.
     */
    expirations?: outputs.BucketV2LifecycleRuleExpiration[];
    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     */
    id: string;
    /**
     * Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
     */
    noncurrentVersionExpirations?: outputs.BucketV2LifecycleRuleNoncurrentVersionExpiration[];
    /**
     * Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
     */
    noncurrentVersionTransitions?: outputs.BucketV2LifecycleRuleNoncurrentVersionTransition[];
    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     */
    prefix?: string;
    /**
     * Specifies object tags key and value.
     */
    tags?: {[key: string]: string};
    /**
     * Specifies a period in the object's transitions. See Transition below for details.
     */
    transitions?: outputs.BucketV2LifecycleRuleTransition[];
}
export interface BucketV2LifecycleRuleExpiration {
    /**
     * Specifies the date after which you want the corresponding action to take effect.
     */
    date?: string;
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days?: number;
    /**
     * On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
     */
    expiredObjectDeleteMarker?: boolean;
}
export interface BucketV2LifecycleRuleNoncurrentVersionExpiration {
    /**
     * Specifies the number of days noncurrent object versions expire.
     */
    days?: number;
}
export interface BucketV2LifecycleRuleNoncurrentVersionTransition {
    /**
     * Specifies the number of days noncurrent object versions transition.
     */
    days?: number;
    /**
     * Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
     */
    storageClass: string;
}
export interface BucketV2LifecycleRuleTransition {
    /**
     * Specifies the date after which you want the corresponding action to take effect.
     */
    date?: string;
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days?: number;
    /**
     * Specifies the Amazon S3 [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Transition.html#AmazonS3-Type-Transition-StorageClass) to which you want the object to transition.
     */
    storageClass: string;
}
export interface BucketV2Logging {
    /**
     * Name of the bucket that will receive the log objects.
     */
    targetBucket: string;
    /**
     * To specify a key prefix for log objects.
     */
    targetPrefix?: string;
}
export interface BucketV2ObjectLockConfiguration {
    /**
     * Indicates whether this bucket has an Object Lock configuration enabled. Valid values are `true` or `false`. This argument is not supported in all regions or partitions.
     *
     * @deprecated Use the top-level parameter objectLockEnabled instead
     */
    objectLockEnabled?: string;
    /**
     * Object Lock rule in place for this bucket (documented below).
     *
     * @deprecated Use the aws.s3.BucketObjectLockConfigurationV2 resource instead
     */
    rules?: outputs.BucketV2ObjectLockConfigurationRule[];
}
export interface BucketV2ObjectLockConfigurationRule {
    /**
     * Default retention period that you want to apply to new objects placed in this bucket (documented below).
     */
    defaultRetentions: outputs.BucketV2ObjectLockConfigurationRuleDefaultRetention[];
}
export interface BucketV2ObjectLockConfigurationRuleDefaultRetention {
    /**
     * Number of days that you want to specify for the default retention period.
     */
    days?: number;
    /**
     * Default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
     */
    mode: string;
    /**
     * Number of years that you want to specify for the default retention period.
     */
    years?: number;
}
export interface BucketV2ReplicationConfiguration {
    /**
     * ARN of the IAM role for Amazon S3 to assume when replicating the objects.
     */
    role: string;
    /**
     * Specifies the rules managing the replication (documented below).
     */
    rules: outputs.BucketV2ReplicationConfigurationRule[];
}
export interface BucketV2ReplicationConfigurationRule {
    /**
     * Whether delete markers are replicated. The only valid value is `Enabled`. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when `filter` is used).
     */
    deleteMarkerReplicationStatus?: string;
    /**
     * Specifies the destination for the rule (documented below).
     */
    destinations: outputs.BucketV2ReplicationConfigurationRuleDestination[];
    /**
     * Filter that identifies subset of objects to which the replication rule applies (documented below).
     */
    filters?: outputs.BucketV2ReplicationConfigurationRuleFilter[];
    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     */
    id?: string;
    /**
     * Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     */
    prefix?: string;
    /**
     * Priority associated with the rule. Priority should only be set if `filter` is configured. If not provided, defaults to `0`. Priority must be unique between multiple rules.
     */
    priority?: number;
    /**
     * Specifies special object selection criteria (documented below).
     */
    sourceSelectionCriterias?: outputs.BucketV2ReplicationConfigurationRuleSourceSelectionCriteria[];
    /**
     * Status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
     */
    status: string;
}
export interface BucketV2ReplicationConfigurationRuleDestination {
    /**
     * Specifies the overrides to use for object owners on replication (documented below). Must be used in conjunction with `accountId` owner override configuration.
     */
    accessControlTranslations?: outputs.BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation[];
    /**
     * Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
     */
    accountId?: string;
    /**
     * ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
     */
    bucket: string;
    /**
     * Enables replication metrics (required for S3 RTC) (documented below).
     */
    metrics?: outputs.BucketV2ReplicationConfigurationRuleDestinationMetric[];
    /**
     * Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
     * `sseKmsEncryptedObjects` source selection criteria.
     */
    replicaKmsKeyId?: string;
    /**
     * Enables S3 Replication Time Control (S3 RTC) (documented below).
     */
    replicationTimes?: outputs.BucketV2ReplicationConfigurationRuleDestinationReplicationTime[];
    /**
     * The [storage class](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Destination.html#AmazonS3-Type-Destination-StorageClass) used to store the object. By default, Amazon S3 uses the storage class of the source object to create the object replica.
     */
    storageClass?: string;
}
export interface BucketV2ReplicationConfigurationRuleDestinationAccessControlTranslation {
    /**
     * Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketReplication.html) in the Amazon S3 API Reference. The only valid value is `Destination`.
     */
    owner: string;
}
export interface BucketV2ReplicationConfigurationRuleDestinationMetric {
    /**
     * Threshold within which objects are to be replicated. The only valid value is `15`.
     */
    minutes?: number;
    /**
     * Status of replication metrics. Either `Enabled` or `Disabled`.
     */
    status?: string;
}
export interface BucketV2ReplicationConfigurationRuleDestinationReplicationTime {
    /**
     * Threshold within which objects are to be replicated. The only valid value is `15`.
     */
    minutes?: number;
    /**
     * Status of RTC. Either `Enabled` or `Disabled`.
     */
    status?: string;
}
export interface BucketV2ReplicationConfigurationRuleFilter {
    /**
     * Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
     */
    prefix?: string;
    /**
     * A map of tags that identifies subset of objects to which the rule applies.
     * The rule applies only to objects having all the tags in its tagset.
     */
    tags?: {[key: string]: string};
}
export interface BucketV2ReplicationConfigurationRuleSourceSelectionCriteria {
    /**
     * Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
     * in `destination` must be specified as well.
     */
    sseKmsEncryptedObjects?: outputs.BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject[];
}
export interface BucketV2ReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObject {
    /**
     * Boolean which indicates if this criteria is enabled.
     */
    enabled: boolean;
}
export interface BucketV2ServerSideEncryptionConfiguration {
    /**
     * Single object for server-side encryption by default configuration. (documented below)
     */
    rules: outputs.BucketV2ServerSideEncryptionConfigurationRule[];
}
export interface BucketV2ServerSideEncryptionConfigurationRule {
    /**
     * Single object for setting server-side encryption by default. (documented below)
     */
    applyServerSideEncryptionByDefaults: outputs.BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault[];
    /**
     * Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
     */
    bucketKeyEnabled?: boolean;
}
export interface BucketV2ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault {
    /**
     * AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
     */
    kmsMasterKeyId?: string;
    /**
     * Server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
     */
    sseAlgorithm: string;
}
export interface BucketV2Versioning {
    /**
     * Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
     */
    enabled?: boolean;
    /**
     * Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
     */
    mfaDelete?: boolean;
}
export interface BucketV2Website {
    /**
     * Absolute path to the document to return in case of a 4XX error.
     */
    errorDocument?: string;
    /**
     * Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
     */
    indexDocument?: string;
    /**
     * Hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
     */
    redirectAllRequestsTo?: string;
    /**
     * JSON array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
     * describing redirect behavior and when redirects are applied.
     */
    routingRules?: string;
}
export interface BucketVersioning {
    /**
     * Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
     */
    enabled?: boolean;
    /**
     * Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
     */
    mfaDelete?: boolean;
}
export interface BucketVersioningV2VersioningConfiguration {
    /**
     * Specifies whether MFA delete is enabled in the bucket versioning configuration. Valid values: `Enabled` or `Disabled`.
     */
    mfaDelete: string;
    /**
     * Versioning state of the bucket. Valid values: `Enabled`, `Suspended`, or `Disabled`. `Disabled` should only be used when creating or importing resources that correspond to unversioned S3 buckets.
     */
    status: string;
}
export interface BucketWebsite {
    /**
     * An absolute path to the document to return in case of a 4XX error.
     */
    errorDocument?: string;
    /**
     * Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
     */
    indexDocument?: string;
    /**
     * A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
     */
    redirectAllRequestsTo?: string;
    /**
     * A json array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
     * describing redirect behavior and when redirects are applied.
     *
     * The `CORS` object supports the following:
     */
    routingRules?: string;
}
export interface BucketWebsiteConfigurationV2ErrorDocument {
    /**
     * Object key name to use when a 4XX class error occurs.
     */
    key: string;
}
export interface BucketWebsiteConfigurationV2IndexDocument {
    /**
     * Suffix that is appended to a request that is for a directory on the website endpoint.
     * For example, if the suffix is `index.html` and you make a request to `samplebucket/images/`, the data that is returned will be for the object with the key name `images/index.html`.
     * The suffix must not be empty and must not include a slash character.
     */
    suffix: string;
}
export interface BucketWebsiteConfigurationV2RedirectAllRequestsTo {
    /**
     * Name of the host where requests are redirected.
     */
    hostName: string;
    /**
     * Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: `http`, `https`.
     */
    protocol?: string;
}
export interface BucketWebsiteConfigurationV2RoutingRule {
    /**
     * Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
     */
    condition?: outputs.BucketWebsiteConfigurationV2RoutingRuleCondition;
    /**
     * Configuration block for redirect information. See below.
     */
    redirect: outputs.BucketWebsiteConfigurationV2RoutingRuleRedirect;
}
export interface BucketWebsiteConfigurationV2RoutingRuleCondition {
    /**
     * HTTP error code when the redirect is applied. If specified with `keyPrefixEquals`, then both must be true for the redirect to be applied.
     */
    httpErrorCodeReturnedEquals?: string;
    /**
     * Object key name prefix when the redirect is applied. If specified with `httpErrorCodeReturnedEquals`, then both must be true for the redirect to be applied.
     */
    keyPrefixEquals?: string;
}
export interface BucketWebsiteConfigurationV2RoutingRuleRedirect {
    /**
     * Host name to use in the redirect request.
     */
    hostName?: string;
    /**
     * HTTP redirect code to use on the response.
     */
    httpRedirectCode?: string;
    /**
     * Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: `http`, `https`.
     */
    protocol?: string;
    /**
     * Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a `condition` block with `keyPrefixEquals` set to `docs/` and in the `redirect` set `replaceKeyPrefixWith` to `/documents`.
     */
    replaceKeyPrefixWith?: string;
    /**
     * Specific object key to use in the redirect request. For example, redirect request to `error.html`.
     */
    replaceKeyWith?: string;
}
export interface DirectoryBucketLocation {
    /**
     * [Availability Zone ID](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#az-ids).
     */
    name: string;
    /**
     * Location type. Valid values: `AvailabilityZone`.
     */
    type: string;
}
export interface InventoryDestination {
    /**
     * S3 bucket configuration where inventory results are published (documented below).
     */
    bucket: outputs.InventoryDestinationBucket;
}
export interface InventoryDestinationBucket {
    /**
     * ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
     */
    accountId?: string;
    /**
     * Amazon S3 bucket ARN of the destination.
     */
    bucketArn: string;
    /**
     * Contains the type of server-side encryption to use to encrypt the inventory (documented below).
     */
    encryption?: outputs.InventoryDestinationBucketEncryption;
    /**
     * Specifies the output format of the inventory results. Can be `CSV`, [`ORC`](https://orc.apache.org/) or [`Parquet`](https://parquet.apache.org/).
     */
    format: string;
    /**
     * Prefix that is prepended to all inventory results.
     */
    prefix?: string;
}
export interface InventoryDestinationBucketEncryption {
    /**
     * Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
     */
    sseKms?: outputs.InventoryDestinationBucketEncryptionSseKms;
    /**
     * Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
     */
    sseS3?: outputs.InventoryDestinationBucketEncryptionSseS3;
}
export interface InventoryDestinationBucketEncryptionSseKms {
    /**
     * ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
     */
    keyId: string;
}
export interface InventoryDestinationBucketEncryptionSseS3 {
}
export interface InventoryFilter {
    /**
     * Prefix that an object must have to be included in the inventory results.
     */
    prefix?: string;
}
export interface InventorySchedule {
    /**
     * Specifies how frequently inventory results are produced. Valid values: `Daily`, `Weekly`.
     */
    frequency: string;
}
export interface ObjectCopyGrant {
    /**
     * Email address of the grantee. Used only when `type` is `AmazonCustomerByEmail`.
     */
    email?: string;
    /**
     * Canonical user ID of the grantee. Used only when `type` is `CanonicalUser`.
     */
    id?: string;
    /**
     * List of permissions to grant to grantee. Valid values are `READ`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
     */
    permissions: string[];
    /**
     * Type of grantee. Valid values are `CanonicalUser`, `Group`, and `AmazonCustomerByEmail`.
     *
     * This configuration block has the following optional arguments (one of the three is required):
     */
    type: string;
    /**
     * URI of the grantee group. Used only when `type` is `Group`.
     */
    uri?: string;
}
