// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an S3 bucket (server access) logging resource. For more information, see [Logging requests using server access logging](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerLogs.html)
 * in the AWS S3 User Guide.
 *
 * > **Note:** Amazon S3 supports server access logging, AWS CloudTrail, or a combination of both. Refer to the [Logging options for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/logging-with-S3.html)
 * to decide which method meets your requirements.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleBucketV2 = new aws.s3.BucketV2("exampleBucketV2", {});
 * const exampleBucketAclV2 = new aws.s3.BucketAclV2("exampleBucketAclV2", {
 *     bucket: exampleBucketV2.id,
 *     acl: "private",
 * });
 * const logBucket = new aws.s3.BucketV2("logBucket", {});
 * const logBucketAcl = new aws.s3.BucketAclV2("logBucketAcl", {
 *     bucket: logBucket.id,
 *     acl: "log-delivery-write",
 * });
 * const exampleBucketLoggingV2 = new aws.s3.BucketLoggingV2("exampleBucketLoggingV2", {
 *     bucket: exampleBucketV2.id,
 *     targetBucket: logBucket.id,
 *     targetPrefix: "log/",
 * });
 * ```
 *
 * ## Import
 *
 * If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`terraform import {
 *
 *  to = aws_s3_bucket_logging.example
 *
 *  id = "bucket-name" } If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`)terraform import {
 *
 *  to = aws_s3_bucket_logging.example
 *
 *  id = "bucket-name,123456789012" } **Using `pulumi import` to import** S3 bucket logging using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For exampleIf the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`console % pulumi import aws_s3_bucket_logging.example bucket-name If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`)console % pulumi import aws_s3_bucket_logging.example bucket-name,123456789012
 */
export class BucketLoggingV2 extends pulumi.CustomResource {
    /**
     * Get an existing BucketLoggingV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketLoggingV2State, opts?: pulumi.CustomResourceOptions): BucketLoggingV2 {
        return new BucketLoggingV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:s3/bucketLoggingV2:BucketLoggingV2';

    /**
     * Returns true if the given object is an instance of BucketLoggingV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketLoggingV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketLoggingV2.__pulumiType;
    }

    /**
     * Name of the bucket.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Account ID of the expected bucket owner.
     */
    public readonly expectedBucketOwner!: pulumi.Output<string | undefined>;
    /**
     * Name of the bucket where you want Amazon S3 to store server access logs.
     */
    public readonly targetBucket!: pulumi.Output<string>;
    /**
     * Set of configuration blocks with information for granting permissions. See below.
     */
    public readonly targetGrants!: pulumi.Output<outputs.s3.BucketLoggingV2TargetGrant[] | undefined>;
    /**
     * Prefix for all log object keys.
     */
    public readonly targetPrefix!: pulumi.Output<string>;

    /**
     * Create a BucketLoggingV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketLoggingV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketLoggingV2Args | BucketLoggingV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketLoggingV2State | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["expectedBucketOwner"] = state ? state.expectedBucketOwner : undefined;
            resourceInputs["targetBucket"] = state ? state.targetBucket : undefined;
            resourceInputs["targetGrants"] = state ? state.targetGrants : undefined;
            resourceInputs["targetPrefix"] = state ? state.targetPrefix : undefined;
        } else {
            const args = argsOrState as BucketLoggingV2Args | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.targetBucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetBucket'");
            }
            if ((!args || args.targetPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetPrefix'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["expectedBucketOwner"] = args ? args.expectedBucketOwner : undefined;
            resourceInputs["targetBucket"] = args ? args.targetBucket : undefined;
            resourceInputs["targetGrants"] = args ? args.targetGrants : undefined;
            resourceInputs["targetPrefix"] = args ? args.targetPrefix : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketLoggingV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketLoggingV2 resources.
 */
export interface BucketLoggingV2State {
    /**
     * Name of the bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Account ID of the expected bucket owner.
     */
    expectedBucketOwner?: pulumi.Input<string>;
    /**
     * Name of the bucket where you want Amazon S3 to store server access logs.
     */
    targetBucket?: pulumi.Input<string>;
    /**
     * Set of configuration blocks with information for granting permissions. See below.
     */
    targetGrants?: pulumi.Input<pulumi.Input<inputs.s3.BucketLoggingV2TargetGrant>[]>;
    /**
     * Prefix for all log object keys.
     */
    targetPrefix?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketLoggingV2 resource.
 */
export interface BucketLoggingV2Args {
    /**
     * Name of the bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * Account ID of the expected bucket owner.
     */
    expectedBucketOwner?: pulumi.Input<string>;
    /**
     * Name of the bucket where you want Amazon S3 to store server access logs.
     */
    targetBucket: pulumi.Input<string>;
    /**
     * Set of configuration blocks with information for granting permissions. See below.
     */
    targetGrants?: pulumi.Input<pulumi.Input<inputs.s3.BucketLoggingV2TargetGrant>[]>;
    /**
     * Prefix for all log object keys.
     */
    targetPrefix: pulumi.Input<string>;
}
