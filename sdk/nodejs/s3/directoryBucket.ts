// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an Amazon S3 Express directory bucket resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.DirectoryBucket("example", {
 *     bucket: "example--usw2-az1--x-s3",
 *     location: {
 *         name: "usw2-az1",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import S3 bucket using `bucket`. For example:
 *
 * ```sh
 *  $ pulumi import aws:s3/directoryBucket:DirectoryBucket example example--usw2-az1--x-s3
 * ```
 */
export class DirectoryBucket extends pulumi.CustomResource {
    /**
     * Get an existing DirectoryBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryBucketState, opts?: pulumi.CustomResourceOptions): DirectoryBucket {
        return new DirectoryBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:s3/directoryBucket:DirectoryBucket';

    /**
     * Returns true if the given object is an instance of DirectoryBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DirectoryBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirectoryBucket.__pulumiType;
    }

    /**
     * ARN of the bucket.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Name of the bucket. The name must be in the format `[bucketName]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Data redundancy. Valid values: `SingleAvailabilityZone`.
     */
    public readonly dataRedundancy!: pulumi.Output<string>;
    /**
     * Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
     */
    public readonly forceDestroy!: pulumi.Output<boolean>;
    /**
     * Bucket location. See Location below for more details.
     */
    public readonly location!: pulumi.Output<outputs.s3.DirectoryBucketLocation | undefined>;
    /**
     * Bucket type. Valid values: `Directory`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DirectoryBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryBucketArgs | DirectoryBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryBucketState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["dataRedundancy"] = state ? state.dataRedundancy : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DirectoryBucketArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["dataRedundancy"] = args ? args.dataRedundancy : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DirectoryBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DirectoryBucket resources.
 */
export interface DirectoryBucketState {
    /**
     * ARN of the bucket.
     */
    arn?: pulumi.Input<string>;
    /**
     * Name of the bucket. The name must be in the format `[bucketName]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Data redundancy. Valid values: `SingleAvailabilityZone`.
     */
    dataRedundancy?: pulumi.Input<string>;
    /**
     * Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Bucket location. See Location below for more details.
     */
    location?: pulumi.Input<inputs.s3.DirectoryBucketLocation>;
    /**
     * Bucket type. Valid values: `Directory`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DirectoryBucket resource.
 */
export interface DirectoryBucketArgs {
    /**
     * Name of the bucket. The name must be in the format `[bucketName]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
     */
    bucket: pulumi.Input<string>;
    /**
     * Data redundancy. Valid values: `SingleAvailabilityZone`.
     */
    dataRedundancy?: pulumi.Input<string>;
    /**
     * Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Bucket location. See Location below for more details.
     */
    location?: pulumi.Input<inputs.s3.DirectoryBucketLocation>;
    /**
     * Bucket type. Valid values: `Directory`.
     */
    type?: pulumi.Input<string>;
}
