// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides redshift serverless temporary credentials for a workgroup.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.redshiftserverless.getCredentials({
 *     workgroupName: aws_redshiftserverless_workgroup.example.workgroup_name,
 * });
 * ```
 */
export function getCredentials(args: GetCredentialsArgs, opts?: pulumi.InvokeOptions): Promise<GetCredentialsResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws:redshiftserverless/getCredentials:getCredentials", {
        "dbName": args.dbName,
        "durationSeconds": args.durationSeconds,
        "workgroupName": args.workgroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getCredentials.
 */
export interface GetCredentialsArgs {
    /**
     * The name of the database to get temporary authorization to log on to.
     */
    dbName?: string;
    /**
     * The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.
     */
    durationSeconds?: number;
    /**
     * The name of the workgroup associated with the database.
     */
    workgroupName: string;
}

/**
 * A collection of values returned by getCredentials.
 */
export interface GetCredentialsResult {
    readonly dbName?: string;
    /**
     * Temporary password that authorizes the user name returned by `dbUser` to log on to the database `dbName`.
     */
    readonly dbPassword: string;
    /**
     * A database user name that is authorized to log on to the database `dbName` using the password `dbPassword` . If the specified `dbUser` exists in the database, the new user name has the same database privileges as the user named in `dbUser` . By default, the user is added to PUBLIC. the user doesn't exist in the database.
     */
    readonly dbUser: string;
    readonly durationSeconds?: number;
    /**
     * Date and time the password in `dbPassword` expires.
     */
    readonly expiration: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly workgroupName: string;
}

export function getCredentialsOutput(args: GetCredentialsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCredentialsResult> {
    return pulumi.output(args).apply(a => getCredentials(a, opts))
}

/**
 * A collection of arguments for invoking getCredentials.
 */
export interface GetCredentialsOutputArgs {
    /**
     * The name of the database to get temporary authorization to log on to.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.
     */
    durationSeconds?: pulumi.Input<number>;
    /**
     * The name of the workgroup associated with the database.
     */
    workgroupName: pulumi.Input<string>;
}
