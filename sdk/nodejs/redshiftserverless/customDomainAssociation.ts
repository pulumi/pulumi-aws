// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Redshift Serverless Custom Domain Association.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.acm.Certificate("example", {domainName: "example.com"});
 * const exampleNamespace = new aws.redshiftserverless.Namespace("example", {namespaceName: "example-namespace"});
 * const exampleWorkgroup = new aws.redshiftserverless.Workgroup("example", {
 *     workgroupName: "example-workgroup",
 *     namespaceName: exampleNamespace.namespaceName,
 * });
 * const exampleCustomDomainAssociation = new aws.redshiftserverless.CustomDomainAssociation("example", {
 *     workgroupName: exampleWorkgroup.workgroupName,
 *     customDomainName: "example.com",
 *     customDomainCertificateArn: example.arn,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift Serverless Custom Domain Association using the `workgroup_name` and `custom_domain_name`, separated by the coma. For example:
 *
 * ```sh
 * $ pulumi import aws:redshiftserverless/customDomainAssociation:CustomDomainAssociation example example-workgroup,example.com
 * ```
 */
export class CustomDomainAssociation extends pulumi.CustomResource {
    /**
     * Get an existing CustomDomainAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomDomainAssociationState, opts?: pulumi.CustomResourceOptions): CustomDomainAssociation {
        return new CustomDomainAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:redshiftserverless/customDomainAssociation:CustomDomainAssociation';

    /**
     * Returns true if the given object is an instance of CustomDomainAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomDomainAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomDomainAssociation.__pulumiType;
    }

    /**
     * ARN of the certificate for the custom domain association.
     */
    public readonly customDomainCertificateArn!: pulumi.Output<string>;
    /**
     * Expiration time for the certificate.
     */
    public /*out*/ readonly customDomainCertificateExpiryTime!: pulumi.Output<string>;
    /**
     * Custom domain to associate with the workgroup.
     */
    public readonly customDomainName!: pulumi.Output<string>;
    /**
     * Name of the workgroup.
     */
    public readonly workgroupName!: pulumi.Output<string>;

    /**
     * Create a CustomDomainAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomDomainAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomDomainAssociationArgs | CustomDomainAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomDomainAssociationState | undefined;
            resourceInputs["customDomainCertificateArn"] = state ? state.customDomainCertificateArn : undefined;
            resourceInputs["customDomainCertificateExpiryTime"] = state ? state.customDomainCertificateExpiryTime : undefined;
            resourceInputs["customDomainName"] = state ? state.customDomainName : undefined;
            resourceInputs["workgroupName"] = state ? state.workgroupName : undefined;
        } else {
            const args = argsOrState as CustomDomainAssociationArgs | undefined;
            if ((!args || args.customDomainCertificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customDomainCertificateArn'");
            }
            if ((!args || args.customDomainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customDomainName'");
            }
            if ((!args || args.workgroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workgroupName'");
            }
            resourceInputs["customDomainCertificateArn"] = args ? args.customDomainCertificateArn : undefined;
            resourceInputs["customDomainName"] = args ? args.customDomainName : undefined;
            resourceInputs["workgroupName"] = args ? args.workgroupName : undefined;
            resourceInputs["customDomainCertificateExpiryTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomDomainAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomDomainAssociation resources.
 */
export interface CustomDomainAssociationState {
    /**
     * ARN of the certificate for the custom domain association.
     */
    customDomainCertificateArn?: pulumi.Input<string>;
    /**
     * Expiration time for the certificate.
     */
    customDomainCertificateExpiryTime?: pulumi.Input<string>;
    /**
     * Custom domain to associate with the workgroup.
     */
    customDomainName?: pulumi.Input<string>;
    /**
     * Name of the workgroup.
     */
    workgroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomDomainAssociation resource.
 */
export interface CustomDomainAssociationArgs {
    /**
     * ARN of the certificate for the custom domain association.
     */
    customDomainCertificateArn: pulumi.Input<string>;
    /**
     * Custom domain to associate with the workgroup.
     */
    customDomainName: pulumi.Input<string>;
    /**
     * Name of the workgroup.
     */
    workgroupName: pulumi.Input<string>;
}
