// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface EndpointAccessVpcEndpoint {
    /**
     * The network interfaces of the endpoint.. See `Network Interface` below.
     */
    networkInterfaces: outputs.EndpointAccessVpcEndpointNetworkInterface[];
    /**
     * The DNS address of the VPC endpoint.
     */
    vpcEndpointId: string;
    /**
     * The port that Amazon Redshift Serverless listens on.
     */
    vpcId: string;
}
export interface EndpointAccessVpcEndpointNetworkInterface {
    /**
     * The availability Zone.
     */
    availabilityZone: string;
    /**
     * The unique identifier of the network interface.
     */
    networkInterfaceId: string;
    /**
     * The IPv4 address of the network interface within the subnet.
     */
    privateIpAddress: string;
    /**
     * The unique identifier of the subnet.
     */
    subnetId: string;
}
export interface WorkgroupConfigParameter {
    /**
     * The key of the parameter. The options are `autoMv`, `datestyle`, `enableCaseSensitiveIdentifier`, `enableUserActivityLogging`, `queryGroup`, `searchPath`, `requireSsl`, `useFipsSsl`, and [query monitoring metrics](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) that let you define performance boundaries: `maxQueryCpuTime`, `maxQueryBlocksRead`, `maxScanRowCount`, `maxQueryExecutionTime`, `maxQueryQueueTime`, `maxQueryCpuUsagePercent`, `maxQueryTempBlocksToDisk`, `maxJoinRowCount` and `maxNestedLoopJoinRowCount`.
     */
    parameterKey: string;
    /**
     * The value of the parameter to set.
     */
    parameterValue: string;
}
export interface WorkgroupEndpoint {
    /**
     * The DNS address of the VPC endpoint.
     */
    address: string;
    /**
     * The port number on which the cluster accepts incoming connections.
     */
    port: number;
    /**
     * The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
     */
    vpcEndpoints: outputs.WorkgroupEndpointVpcEndpoint[];
}
export interface WorkgroupEndpointVpcEndpoint {
    /**
     * The network interfaces of the endpoint.. See `Network Interface` below.
     */
    networkInterfaces: outputs.WorkgroupEndpointVpcEndpointNetworkInterface[];
    /**
     * The DNS address of the VPC endpoint.
     */
    vpcEndpointId: string;
    /**
     * The port that Amazon Redshift Serverless listens on.
     */
    vpcId: string;
}
export interface WorkgroupEndpointVpcEndpointNetworkInterface {
    /**
     * The availability Zone.
     */
    availabilityZone: string;
    /**
     * The unique identifier of the network interface.
     */
    networkInterfaceId: string;
    /**
     * The IPv4 address of the network interface within the subnet.
     */
    privateIpAddress: string;
    /**
     * The unique identifier of the subnet.
     */
    subnetId: string;
}
export interface GetWorkgroupEndpoint {
    /**
     * The DNS address of the VPC endpoint.
     */
    address: string;
    /**
     * The port that Amazon Redshift Serverless listens on.
     */
    port: number;
    /**
     * The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
     */
    vpcEndpoints: outputs.GetWorkgroupEndpointVpcEndpoint[];
}
export interface GetWorkgroupEndpointVpcEndpoint {
    /**
     * The network interfaces of the endpoint.. See `Network Interface` below.
     */
    networkInterfaces: outputs.GetWorkgroupEndpointVpcEndpointNetworkInterface[];
    /**
     * The DNS address of the VPC endpoint.
     */
    vpcEndpointId: string;
    /**
     * The port that Amazon Redshift Serverless listens on.
     */
    vpcId: string;
}
export interface GetWorkgroupEndpointVpcEndpointNetworkInterface {
    /**
     * The availability Zone.
     */
    availabilityZone: string;
    /**
     * The unique identifier of the network interface.
     */
    networkInterfaceId: string;
    /**
     * The IPv4 address of the network interface within the subnet.
     */
    privateIpAddress: string;
    /**
     * The unique identifier of the subnet.
     */
    subnetId: string;
}
