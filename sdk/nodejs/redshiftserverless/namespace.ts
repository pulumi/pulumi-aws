// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshiftserverless.Namespace("example", {namespaceName: "concurrency-scaling"});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift Serverless Namespaces using the `namespace_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:redshiftserverless/namespace:Namespace example example
 * ```
 */
export class Namespace extends pulumi.CustomResource {
    /**
     * Get an existing Namespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceState, opts?: pulumi.CustomResourceOptions): Namespace {
        return new Namespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:redshiftserverless/namespace:Namespace';

    /**
     * Returns true if the given object is an instance of Namespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Namespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Namespace.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of namespace's admin user credentials secret.
     */
    declare public /*out*/ readonly adminPasswordSecretArn: pulumi.Output<string>;
    /**
     * ID of the KMS key used to encrypt the namespace's admin credentials secret.
     */
    declare public readonly adminPasswordSecretKmsKeyId: pulumi.Output<string>;
    /**
     * The password of the administrator for the first database created in the namespace.
     * Conflicts with `manageAdminPassword` and `adminUserPasswordWo`.
     */
    declare public readonly adminUserPassword: pulumi.Output<string | undefined>;
    /**
     * The username of the administrator for the first database created in the namespace.
     */
    declare public readonly adminUsername: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The name of the first database created in the namespace.
     */
    declare public readonly dbName: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
     */
    declare public readonly defaultIamRoleArn: pulumi.Output<string | undefined>;
    /**
     * A list of IAM roles to associate with the namespace.
     */
    declare public readonly iamRoles: pulumi.Output<string[]>;
    /**
     * The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
     */
    declare public readonly kmsKeyId: pulumi.Output<string>;
    /**
     * The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
     */
    declare public readonly logExports: pulumi.Output<string[] | undefined>;
    /**
     * Whether to use AWS SecretManager to manage namespace's admin credentials.
     * Conflicts with `adminUserPassword` and `adminUserPasswordWo`.
     */
    declare public readonly manageAdminPassword: pulumi.Output<boolean | undefined>;
    /**
     * The Redshift Namespace ID.
     */
    declare public /*out*/ readonly namespaceId: pulumi.Output<string>;
    /**
     * The name of the namespace.
     */
    declare public readonly namespaceName: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Namespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceArgs | NamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceState | undefined;
            resourceInputs["adminPasswordSecretArn"] = state?.adminPasswordSecretArn;
            resourceInputs["adminPasswordSecretKmsKeyId"] = state?.adminPasswordSecretKmsKeyId;
            resourceInputs["adminUserPassword"] = state?.adminUserPassword;
            resourceInputs["adminUsername"] = state?.adminUsername;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["dbName"] = state?.dbName;
            resourceInputs["defaultIamRoleArn"] = state?.defaultIamRoleArn;
            resourceInputs["iamRoles"] = state?.iamRoles;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["logExports"] = state?.logExports;
            resourceInputs["manageAdminPassword"] = state?.manageAdminPassword;
            resourceInputs["namespaceId"] = state?.namespaceId;
            resourceInputs["namespaceName"] = state?.namespaceName;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        } else {
            const args = argsOrState as NamespaceArgs | undefined;
            if (args?.namespaceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            resourceInputs["adminPasswordSecretKmsKeyId"] = args?.adminPasswordSecretKmsKeyId;
            resourceInputs["adminUserPassword"] = args?.adminUserPassword ? pulumi.secret(args.adminUserPassword) : undefined;
            resourceInputs["adminUsername"] = args?.adminUsername ? pulumi.secret(args.adminUsername) : undefined;
            resourceInputs["dbName"] = args?.dbName;
            resourceInputs["defaultIamRoleArn"] = args?.defaultIamRoleArn;
            resourceInputs["iamRoles"] = args?.iamRoles;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["logExports"] = args?.logExports;
            resourceInputs["manageAdminPassword"] = args?.manageAdminPassword;
            resourceInputs["namespaceName"] = args?.namespaceName;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["adminPasswordSecretArn"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["namespaceId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminUserPassword", "adminUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Namespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Namespace resources.
 */
export interface NamespaceState {
    /**
     * Amazon Resource Name (ARN) of namespace's admin user credentials secret.
     */
    adminPasswordSecretArn?: pulumi.Input<string>;
    /**
     * ID of the KMS key used to encrypt the namespace's admin credentials secret.
     */
    adminPasswordSecretKmsKeyId?: pulumi.Input<string>;
    /**
     * The password of the administrator for the first database created in the namespace.
     * Conflicts with `manageAdminPassword` and `adminUserPasswordWo`.
     */
    adminUserPassword?: pulumi.Input<string>;
    /**
     * The username of the administrator for the first database created in the namespace.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of the first database created in the namespace.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
     */
    defaultIamRoleArn?: pulumi.Input<string>;
    /**
     * A list of IAM roles to associate with the namespace.
     */
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
     */
    logExports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to use AWS SecretManager to manage namespace's admin credentials.
     * Conflicts with `adminUserPassword` and `adminUserPasswordWo`.
     */
    manageAdminPassword?: pulumi.Input<boolean>;
    /**
     * The Redshift Namespace ID.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * The name of the namespace.
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Namespace resource.
 */
export interface NamespaceArgs {
    /**
     * ID of the KMS key used to encrypt the namespace's admin credentials secret.
     */
    adminPasswordSecretKmsKeyId?: pulumi.Input<string>;
    /**
     * The password of the administrator for the first database created in the namespace.
     * Conflicts with `manageAdminPassword` and `adminUserPasswordWo`.
     */
    adminUserPassword?: pulumi.Input<string>;
    /**
     * The username of the administrator for the first database created in the namespace.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * The name of the first database created in the namespace.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
     */
    defaultIamRoleArn?: pulumi.Input<string>;
    /**
     * A list of IAM roles to associate with the namespace.
     */
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
     */
    logExports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to use AWS SecretManager to manage namespace's admin credentials.
     * Conflicts with `adminUserPassword` and `adminUserPasswordWo`.
     */
    manageAdminPassword?: pulumi.Input<boolean>;
    /**
     * The name of the namespace.
     */
    namespaceName: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
