// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an CloudSearch domain resource.
 *
 * The provider waits for the domain to become `Active` when applying a configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudsearch.Domain("example", {
 *     indexFields: [
 *         {
 *             analysisScheme: "_en_default_",
 *             highlight: false,
 *             name: "headline",
 *             "return": true,
 *             search: true,
 *             sort: true,
 *             type: "text",
 *         },
 *         {
 *             facet: true,
 *             name: "price",
 *             "return": true,
 *             search: true,
 *             sort: true,
 *             sourceFields: "headline",
 *             type: "double",
 *         },
 *     ],
 *     scalingParameters: {
 *         desiredInstanceType: "search.medium",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import CloudSearch Domains using the `name`. For example:
 *
 * ```sh
 *  $ pulumi import aws:cloudsearch/domain:Domain example example-domain
 * ```
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudsearch/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * The domain's ARN.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The service endpoint for updating documents in a search domain.
     */
    public /*out*/ readonly documentServiceEndpoint!: pulumi.Output<string>;
    /**
     * An internally generated unique identifier for the domain.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * Domain endpoint options. Documented below.
     */
    public readonly endpointOptions!: pulumi.Output<outputs.cloudsearch.DomainEndpointOptions>;
    /**
     * The index fields for documents added to the domain. Documented below.
     */
    public readonly indexFields!: pulumi.Output<outputs.cloudsearch.DomainIndexField[] | undefined>;
    /**
     * Whether or not to maintain extra instances for the domain in a second Availability Zone to ensure high availability.
     */
    public readonly multiAz!: pulumi.Output<boolean>;
    /**
     * The name of the CloudSearch domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Domain scaling parameters. Documented below.
     */
    public readonly scalingParameters!: pulumi.Output<outputs.cloudsearch.DomainScalingParameters>;
    /**
     * The service endpoint for requesting search results from a search domain.
     */
    public /*out*/ readonly searchServiceEndpoint!: pulumi.Output<string>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["documentServiceEndpoint"] = state ? state.documentServiceEndpoint : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["endpointOptions"] = state ? state.endpointOptions : undefined;
            resourceInputs["indexFields"] = state ? state.indexFields : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scalingParameters"] = state ? state.scalingParameters : undefined;
            resourceInputs["searchServiceEndpoint"] = state ? state.searchServiceEndpoint : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            resourceInputs["endpointOptions"] = args ? args.endpointOptions : undefined;
            resourceInputs["indexFields"] = args ? args.indexFields : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scalingParameters"] = args ? args.scalingParameters : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["documentServiceEndpoint"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["searchServiceEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * The domain's ARN.
     */
    arn?: pulumi.Input<string>;
    /**
     * The service endpoint for updating documents in a search domain.
     */
    documentServiceEndpoint?: pulumi.Input<string>;
    /**
     * An internally generated unique identifier for the domain.
     */
    domainId?: pulumi.Input<string>;
    /**
     * Domain endpoint options. Documented below.
     */
    endpointOptions?: pulumi.Input<inputs.cloudsearch.DomainEndpointOptions>;
    /**
     * The index fields for documents added to the domain. Documented below.
     */
    indexFields?: pulumi.Input<pulumi.Input<inputs.cloudsearch.DomainIndexField>[]>;
    /**
     * Whether or not to maintain extra instances for the domain in a second Availability Zone to ensure high availability.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * The name of the CloudSearch domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Domain scaling parameters. Documented below.
     */
    scalingParameters?: pulumi.Input<inputs.cloudsearch.DomainScalingParameters>;
    /**
     * The service endpoint for requesting search results from a search domain.
     */
    searchServiceEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * Domain endpoint options. Documented below.
     */
    endpointOptions?: pulumi.Input<inputs.cloudsearch.DomainEndpointOptions>;
    /**
     * The index fields for documents added to the domain. Documented below.
     */
    indexFields?: pulumi.Input<pulumi.Input<inputs.cloudsearch.DomainIndexField>[]>;
    /**
     * Whether or not to maintain extra instances for the domain in a second Availability Zone to ensure high availability.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * The name of the CloudSearch domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Domain scaling parameters. Documented below.
     */
    scalingParameters?: pulumi.Input<inputs.cloudsearch.DomainScalingParameters>;
}
