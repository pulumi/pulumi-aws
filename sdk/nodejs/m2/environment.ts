// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an [AWS Mainframe Modernization Environment](https://docs.aws.amazon.com/m2/latest/userguide/environments-m2.html).
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import Mainframe Modernization Environment using the `01234567890abcdef012345678`. For example:
 *
 * ```sh
 * $ pulumi import aws:m2/environment:Environment example 01234567890abcdef012345678
 * ```
 */
export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentState, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:m2/environment:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    declare public readonly applyChangesDuringMaintenanceWindow: pulumi.Output<boolean | undefined>;
    /**
     * ARN of the Environment.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Engine type must be `microfocus` or `bluage`.
     */
    declare public readonly engineType: pulumi.Output<string>;
    /**
     * The specific version of the engine for the Environment.
     */
    declare public readonly engineVersion: pulumi.Output<string>;
    /**
     * The id of the Environment.
     */
    declare public /*out*/ readonly environmentId: pulumi.Output<string>;
    /**
     * Force update the environment even if applications are running.
     */
    declare public readonly forceUpdate: pulumi.Output<boolean | undefined>;
    declare public readonly highAvailabilityConfig: pulumi.Output<outputs.m2.EnvironmentHighAvailabilityConfig | undefined>;
    /**
     * M2 Instance Type.
     *
     * The following arguments are optional:
     */
    declare public readonly instanceType: pulumi.Output<string>;
    /**
     * ARN of the KMS key to use for the Environment.
     */
    declare public readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * ARN of the load balancer created by the Environment.
     */
    declare public /*out*/ readonly loadBalancerArn: pulumi.Output<string>;
    /**
     * Name of the runtime environment. Must be unique within the account.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
     */
    declare public readonly preferredMaintenanceWindow: pulumi.Output<string>;
    /**
     * Allow applications deployed to this environment to be publicly accessible.
     */
    declare public readonly publiclyAccessible: pulumi.Output<boolean>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * List of security group ids.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    declare public readonly storageConfiguration: pulumi.Output<outputs.m2.EnvironmentStorageConfiguration | undefined>;
    /**
     * List of subnet ids to deploy environment to.
     */
    declare public readonly subnetIds: pulumi.Output<string[]>;
    /**
     * Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    declare public readonly timeouts: pulumi.Output<outputs.m2.EnvironmentTimeouts | undefined>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentArgs | EnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentState | undefined;
            resourceInputs["applyChangesDuringMaintenanceWindow"] = state?.applyChangesDuringMaintenanceWindow;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["description"] = state?.description;
            resourceInputs["engineType"] = state?.engineType;
            resourceInputs["engineVersion"] = state?.engineVersion;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["forceUpdate"] = state?.forceUpdate;
            resourceInputs["highAvailabilityConfig"] = state?.highAvailabilityConfig;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["loadBalancerArn"] = state?.loadBalancerArn;
            resourceInputs["name"] = state?.name;
            resourceInputs["preferredMaintenanceWindow"] = state?.preferredMaintenanceWindow;
            resourceInputs["publiclyAccessible"] = state?.publiclyAccessible;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["storageConfiguration"] = state?.storageConfiguration;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as EnvironmentArgs | undefined;
            if (args?.engineType === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineType'");
            }
            if (args?.instanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            resourceInputs["applyChangesDuringMaintenanceWindow"] = args?.applyChangesDuringMaintenanceWindow;
            resourceInputs["description"] = args?.description;
            resourceInputs["engineType"] = args?.engineType;
            resourceInputs["engineVersion"] = args?.engineVersion;
            resourceInputs["forceUpdate"] = args?.forceUpdate;
            resourceInputs["highAvailabilityConfig"] = args?.highAvailabilityConfig;
            resourceInputs["instanceType"] = args?.instanceType;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["name"] = args?.name;
            resourceInputs["preferredMaintenanceWindow"] = args?.preferredMaintenanceWindow;
            resourceInputs["publiclyAccessible"] = args?.publiclyAccessible;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["storageConfiguration"] = args?.storageConfiguration;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["loadBalancerArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Environment resources.
 */
export interface EnvironmentState {
    applyChangesDuringMaintenanceWindow?: pulumi.Input<boolean>;
    /**
     * ARN of the Environment.
     */
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Engine type must be `microfocus` or `bluage`.
     */
    engineType?: pulumi.Input<string>;
    /**
     * The specific version of the engine for the Environment.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The id of the Environment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Force update the environment even if applications are running.
     */
    forceUpdate?: pulumi.Input<boolean>;
    highAvailabilityConfig?: pulumi.Input<inputs.m2.EnvironmentHighAvailabilityConfig>;
    /**
     * M2 Instance Type.
     *
     * The following arguments are optional:
     */
    instanceType?: pulumi.Input<string>;
    /**
     * ARN of the KMS key to use for the Environment.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * ARN of the load balancer created by the Environment.
     */
    loadBalancerArn?: pulumi.Input<string>;
    /**
     * Name of the runtime environment. Must be unique within the account.
     */
    name?: pulumi.Input<string>;
    /**
     * Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
     */
    preferredMaintenanceWindow?: pulumi.Input<string>;
    /**
     * Allow applications deployed to this environment to be publicly accessible.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * List of security group ids.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    storageConfiguration?: pulumi.Input<inputs.m2.EnvironmentStorageConfiguration>;
    /**
     * List of subnet ids to deploy environment to.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.m2.EnvironmentTimeouts>;
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    applyChangesDuringMaintenanceWindow?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * Engine type must be `microfocus` or `bluage`.
     */
    engineType: pulumi.Input<string>;
    /**
     * The specific version of the engine for the Environment.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * Force update the environment even if applications are running.
     */
    forceUpdate?: pulumi.Input<boolean>;
    highAvailabilityConfig?: pulumi.Input<inputs.m2.EnvironmentHighAvailabilityConfig>;
    /**
     * M2 Instance Type.
     *
     * The following arguments are optional:
     */
    instanceType: pulumi.Input<string>;
    /**
     * ARN of the KMS key to use for the Environment.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Name of the runtime environment. Must be unique within the account.
     */
    name?: pulumi.Input<string>;
    /**
     * Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
     */
    preferredMaintenanceWindow?: pulumi.Input<string>;
    /**
     * Allow applications deployed to this environment to be publicly accessible.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * List of security group ids.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    storageConfiguration?: pulumi.Input<inputs.m2.EnvironmentStorageConfiguration>;
    /**
     * List of subnet ids to deploy environment to.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.m2.EnvironmentTimeouts>;
}
