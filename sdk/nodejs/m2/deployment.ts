// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an [AWS Mainframe Modernization Deployment.](https://docs.aws.amazon.com/m2/latest/userguide/applications-m2-deploy.html)
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.m2.Deployment("test", {
 *     environmentId: "01234567890abcdef012345678",
 *     applicationId: "34567890abcdef012345678012",
 *     applicationVersion: 1,
 *     start: true,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import Mainframe Modernization Deployment using the `APPLICATION-ID,DEPLOYMENT-ID`. For example:
 *
 * ```sh
 * $ pulumi import aws:m2/deployment:Deployment example APPLICATION-ID,DEPLOYMENT-ID
 * ```
 */
export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentState, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:m2/deployment:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    /**
     * Application to deploy.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Version to application to deploy
     */
    public readonly applicationVersion!: pulumi.Output<number>;
    public /*out*/ readonly deploymentId!: pulumi.Output<string>;
    /**
     * Environment to deploy application to.
     */
    public readonly environmentId!: pulumi.Output<string>;
    public readonly forceStop!: pulumi.Output<boolean | undefined>;
    /**
     * Start the application once deployed.
     */
    public readonly start!: pulumi.Output<boolean>;
    public readonly timeouts!: pulumi.Output<outputs.m2.DeploymentTimeouts | undefined>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentArgs | DeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["applicationVersion"] = state ? state.applicationVersion : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["forceStop"] = state ? state.forceStop : undefined;
            resourceInputs["start"] = state ? state.start : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DeploymentArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.applicationVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationVersion'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.start === undefined) && !opts.urn) {
                throw new Error("Missing required property 'start'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["applicationVersion"] = args ? args.applicationVersion : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["forceStop"] = args ? args.forceStop : undefined;
            resourceInputs["start"] = args ? args.start : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["deploymentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Deployment resources.
 */
export interface DeploymentState {
    /**
     * Application to deploy.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Version to application to deploy
     */
    applicationVersion?: pulumi.Input<number>;
    deploymentId?: pulumi.Input<string>;
    /**
     * Environment to deploy application to.
     */
    environmentId?: pulumi.Input<string>;
    forceStop?: pulumi.Input<boolean>;
    /**
     * Start the application once deployed.
     */
    start?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.m2.DeploymentTimeouts>;
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    /**
     * Application to deploy.
     */
    applicationId: pulumi.Input<string>;
    /**
     * Version to application to deploy
     */
    applicationVersion: pulumi.Input<number>;
    /**
     * Environment to deploy application to.
     */
    environmentId: pulumi.Input<string>;
    forceStop?: pulumi.Input<boolean>;
    /**
     * Start the application once deployed.
     */
    start: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.m2.DeploymentTimeouts>;
}
