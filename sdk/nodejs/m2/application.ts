// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an [AWS Mainframe Modernization Application](https://docs.aws.amazon.com/m2/latest/userguide/applications-m2.html).
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.m2.Application("example", {
 *     name: "Example",
 *     engineType: "bluage",
 *     definition: {
 *         content: `{
 *   "definition": {
 *     "listeners": [
 *       {
 *         "port": 8196,
 *         "type": "http"
 *       }
 *     ],
 *     "ba-application": {
 *       "app-location": "${s3_source}/PlanetsDemo-v1.zip"
 *     }
 *   },
 *   "source-locations": [
 *     {
 *       "source-id": "s3-source",
 *       "source-type": "s3",
 *       "properties": {
 *         "s3-bucket": "example-bucket",
 *         "s3-key-prefix": "v1"
 *       }
 *     }
 *   ],
 *   "template-version": "2.0"
 * }
 *
 * `,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Mainframe Modernization Application using the `01234567890abcdef012345678`. For example:
 *
 * ```sh
 * $ pulumi import aws:m2/application:Application example 01234567890abcdef012345678
 * ```
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:m2/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * Id of the Application.
     */
    public /*out*/ readonly applicationId!: pulumi.Output<string>;
    /**
     * ARN of the Application.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Current version of the application deployed.
     */
    public /*out*/ readonly currentVersion!: pulumi.Output<number>;
    /**
     * The application definition for this application. You can specify either inline JSON or an S3 bucket location.
     */
    public readonly definition!: pulumi.Output<outputs.m2.ApplicationDefinition | undefined>;
    /**
     * Description of the application.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Engine type must be `microfocus | bluage`.
     */
    public readonly engineType!: pulumi.Output<string>;
    /**
     * KMS Key to use for the Application.
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the application.
     *
     * The following arguments are optional:
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ARN of role for application to use to access AWS resources.
     */
    public readonly roleArn!: pulumi.Output<string | undefined>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.m2.ApplicationTimeouts | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["engineType"] = state ? state.engineType : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if ((!args || args.engineType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineType'");
            }
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engineType"] = args ? args.engineType : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["currentVersion"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * Id of the Application.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * ARN of the Application.
     */
    arn?: pulumi.Input<string>;
    /**
     * Current version of the application deployed.
     */
    currentVersion?: pulumi.Input<number>;
    /**
     * The application definition for this application. You can specify either inline JSON or an S3 bucket location.
     */
    definition?: pulumi.Input<inputs.m2.ApplicationDefinition>;
    /**
     * Description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * Engine type must be `microfocus | bluage`.
     */
    engineType?: pulumi.Input<string>;
    /**
     * KMS Key to use for the Application.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Unique identifier of the application.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * ARN of role for application to use to access AWS resources.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.m2.ApplicationTimeouts>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * The application definition for this application. You can specify either inline JSON or an S3 bucket location.
     */
    definition?: pulumi.Input<inputs.m2.ApplicationDefinition>;
    /**
     * Description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * Engine type must be `microfocus | bluage`.
     */
    engineType: pulumi.Input<string>;
    /**
     * KMS Key to use for the Application.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Unique identifier of the application.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * ARN of role for application to use to access AWS resources.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.m2.ApplicationTimeouts>;
}
