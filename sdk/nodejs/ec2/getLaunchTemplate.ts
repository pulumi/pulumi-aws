// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";
import * as enums from "./enums";
import * as utilities from "../utilities";

/**
 * Provides information about a Launch Template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const default = aws.ec2.getLaunchTemplate({
 *     name: "my-launch-template",
 * });
 * ```
 *
 * ### Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.ec2.getLaunchTemplate({
 *     filters: [{
 *         name: "launch-template-name",
 *         values: ["some-template"],
 *     }],
 * });
 * ```
 */
export function getLaunchTemplate(args?: GetLaunchTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetLaunchTemplateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:ec2/getLaunchTemplate:getLaunchTemplate", {
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getLaunchTemplate.
 */
export interface GetLaunchTemplateArgs {
    /**
     * Configuration block(s) for filtering. Detailed below.
     */
    filters?: inputs.GetLaunchTemplateFilter[];
    /**
     * ID of the specific launch template to retrieve.
     */
    id?: string;
    /**
     * Name of the launch template.
     */
    name?: string;
    /**
     * Map of tags, each pair of which must exactly match a pair on the desired Launch Template.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getLaunchTemplate.
 */
export interface GetLaunchTemplateResult {
    readonly arn: string;
    readonly blockDeviceMappings: outputs.GetLaunchTemplateBlockDeviceMapping[];
    readonly capacityReservationSpecifications: outputs.GetLaunchTemplateCapacityReservationSpecification[];
    readonly cpuOptions: outputs.GetLaunchTemplateCpuOption[];
    readonly creditSpecifications: outputs.GetLaunchTemplateCreditSpecification[];
    readonly defaultVersion: number;
    readonly description: string;
    readonly disableApiStop: boolean;
    readonly disableApiTermination: boolean;
    readonly ebsOptimized: string;
    readonly elasticGpuSpecifications: outputs.GetLaunchTemplateElasticGpuSpecification[];
    readonly elasticInferenceAccelerators: outputs.GetLaunchTemplateElasticInferenceAccelerator[];
    readonly enclaveOptions: outputs.GetLaunchTemplateEnclaveOption[];
    readonly filters?: inputs.GetLaunchTemplateFilter[];
    readonly hibernationOptions: outputs.GetLaunchTemplateHibernationOption[];
    readonly iamInstanceProfiles: outputs.GetLaunchTemplateIamInstanceProfile[];
    /**
     * ID of the launch template.
     */
    readonly id: string;
    readonly imageId: string;
    readonly instanceInitiatedShutdownBehavior: string;
    readonly instanceMarketOptions: outputs.GetLaunchTemplateInstanceMarketOption[];
    readonly instanceRequirements: outputs.GetLaunchTemplateInstanceRequirement[];
    readonly instanceType: string;
    readonly kernelId: string;
    readonly keyName: string;
    readonly latestVersion: number;
    readonly licenseSpecifications: outputs.GetLaunchTemplateLicenseSpecification[];
    readonly maintenanceOptions: outputs.GetLaunchTemplateMaintenanceOption[];
    readonly metadataOptions: outputs.GetLaunchTemplateMetadataOption[];
    readonly monitorings: outputs.GetLaunchTemplateMonitoring[];
    readonly name: string;
    readonly networkInterfaces: outputs.GetLaunchTemplateNetworkInterface[];
    readonly placements: outputs.GetLaunchTemplatePlacement[];
    readonly privateDnsNameOptions: outputs.GetLaunchTemplatePrivateDnsNameOption[];
    readonly ramDiskId: string;
    readonly securityGroupNames: string[];
    readonly tagSpecifications: outputs.GetLaunchTemplateTagSpecification[];
    readonly tags: {[key: string]: string};
    readonly userData: string;
    readonly vpcSecurityGroupIds: string[];
}
/**
 * Provides information about a Launch Template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const default = aws.ec2.getLaunchTemplate({
 *     name: "my-launch-template",
 * });
 * ```
 *
 * ### Filter
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.ec2.getLaunchTemplate({
 *     filters: [{
 *         name: "launch-template-name",
 *         values: ["some-template"],
 *     }],
 * });
 * ```
 */
export function getLaunchTemplateOutput(args?: GetLaunchTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLaunchTemplateResult> {
    return pulumi.output(args).apply((a: any) => getLaunchTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getLaunchTemplate.
 */
export interface GetLaunchTemplateOutputArgs {
    /**
     * Configuration block(s) for filtering. Detailed below.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetLaunchTemplateFilterArgs>[]>;
    /**
     * ID of the specific launch template to retrieve.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the launch template.
     */
    name?: pulumi.Input<string>;
    /**
     * Map of tags, each pair of which must exactly match a pair on the desired Launch Template.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
