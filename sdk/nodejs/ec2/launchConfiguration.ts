// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

import {InstanceProfile} from "../iam";

/**
 * Provides a resource to create a new launch configuration, used for autoscaling groups.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const ubuntu = aws.getAmi({
 *     filters: [
 *         {
 *             name: "name",
 *             values: ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"],
 *         },
 *         {
 *             name: "virtualization-type",
 *             values: ["hvm"],
 *         },
 *     ],
 *     mostRecent: true,
 *     owners: ["099720109477"], // Canonical
 * });
 * const asConf = new aws.ec2.LaunchConfiguration("asConf", {
 *     imageId: ubuntu.id,
 *     instanceType: "t2.micro",
 * });
 * ```
 * 
 * ## Using with AutoScaling Groups
 * 
 * Launch Configurations cannot be updated after creation with the Amazon
 * Web Service API. In order to update a Launch Configuration, this provider will
 * destroy the existing resource and create a replacement. In order to effectively
 * use a Launch Configuration resource with an [AutoScaling Group resource][1],
 * it's recommended to specify `createBeforeDestroy` in a [lifecycle][2] block.
 * Either omit the Launch Configuration `name` attribute, or specify a partial name
 * with `namePrefix`.  Example:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const ubuntu = aws.getAmi({
 *     filters: [
 *         {
 *             name: "name",
 *             values: ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"],
 *         },
 *         {
 *             name: "virtualization-type",
 *             values: ["hvm"],
 *         },
 *     ],
 *     mostRecent: true,
 *     owners: ["099720109477"], // Canonical
 * });
 * const asConf = new aws.ec2.LaunchConfiguration("asConf", {
 *     imageId: ubuntu.id,
 *     instanceType: "t2.micro",
 *     namePrefix: "lc-example-",
 * });
 * const bar = new aws.autoscaling.Group("bar", {
 *     launchConfiguration: asConf.name,
 *     maxSize: 2,
 *     minSize: 1,
 * });
 * ```
 * 
 * With this setup this provider generates a unique name for your Launch
 * Configuration and can then update the AutoScaling Group without conflict before
 * destroying the previous Launch Configuration.
 * 
 * ## Using with Spot Instances
 * 
 * Launch configurations can set the spot instance pricing to be used for the
 * Auto Scaling Group to reserve instances. Simply specifying the `spotPrice`
 * parameter will set the price on the Launch Configuration which will attempt to
 * reserve your instances at this price.  See the [AWS Spot Instance
 * documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html)
 * for more information or how to launch [Spot Instances][3] with this provider.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const ubuntu = aws.getAmi({
 *     filters: [
 *         {
 *             name: "name",
 *             values: ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"],
 *         },
 *         {
 *             name: "virtualization-type",
 *             values: ["hvm"],
 *         },
 *     ],
 *     mostRecent: true,
 *     owners: ["099720109477"], // Canonical
 * });
 * const asConf = new aws.ec2.LaunchConfiguration("asConf", {
 *     imageId: ubuntu.id,
 *     instanceType: "m4.large",
 *     spotPrice: "0.001",
 * });
 * const bar = new aws.autoscaling.Group("bar", {
 *     launchConfiguration: asConf.name,
 * });
 * ```
 * 
 * ## Block devices
 * 
 * Each of the `*_block_device` attributes controls a portion of the AWS
 * Launch Configuration's "Block Device Mapping". It's a good idea to familiarize yourself with [AWS's Block Device
 * Mapping docs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
 * to understand the implications of using these attributes.
 * 
 * The `rootBlockDevice` mapping supports the following:
 * 
 * * `volumeType` - (Optional) The type of volume. Can be `"standard"`, `"gp2"`,
 *   or `"io1"`. (Default: `"standard"`).
 * * `volumeSize` - (Optional) The size of the volume in gigabytes.
 * * `iops` - (Optional) The amount of provisioned
 *   [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
 *   This must be set with a `volumeType` of `"io1"`.
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed
 *   on instance termination (Default: `true`).
 * * `encrypted` - (Optional) Whether the volume should be encrypted or not. (Default: `false`).
 * 
 * Modifying any of the `rootBlockDevice` settings requires resource
 * replacement.
 * 
 * Each `ebsBlockDevice` supports the following:
 * 
 * * `deviceName` - (Required) The name of the device to mount.
 * * `snapshotId` - (Optional) The Snapshot ID to mount.
 * * `volumeType` - (Optional) The type of volume. Can be `"standard"`, `"gp2"`,
 *   or `"io1"`. (Default: `"standard"`).
 * * `volumeSize` - (Optional) The size of the volume in gigabytes.
 * * `iops` - (Optional) The amount of provisioned
 *   [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
 *   This must be set with a `volumeType` of `"io1"`.
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed
 *   on instance termination (Default: `true`).
 * * `encrypted` - (Optional) Whether the volume should be encrypted or not. Do not use this option if you are using `snapshotId` as the encrypted flag will be determined by the snapshot. (Default: `false`).
 * 
 * Modifying any `ebsBlockDevice` currently requires resource replacement.
 * 
 * Each `ephemeralBlockDevice` supports the following:
 * 
 * * `deviceName` - The name of the block device to mount on the instance.
 * * `virtualName` - The [Instance Store Device
 *   Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
 *   (e.g. `"ephemeral0"`)
 * 
 * Each AWS Instance type has a different set of Instance Store block devices
 * available for attachment. AWS [publishes a
 * list](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#StorageOnInstanceTypes)
 * of which ephemeral devices are available on each type. The devices are always
 * identified by the `virtualName` in the format `"ephemeral{0..N}"`.
 * 
 * > **NOTE:** Changes to `*_block_device` configuration of _existing_ resources
 * cannot currently be detected by this provider. After updating to block device
 * configuration, resource recreation can be manually triggered by using the
 * [`taint` command](https://www.terraform.io/docs/commands/taint.html).
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/launch_configuration.html.markdown.
 */
export class LaunchConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing LaunchConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LaunchConfigurationState, opts?: pulumi.CustomResourceOptions): LaunchConfiguration {
        return new LaunchConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/launchConfiguration:LaunchConfiguration';

    /**
     * Returns true if the given object is an instance of LaunchConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LaunchConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LaunchConfiguration.__pulumiType;
    }

    /**
     * Associate a public ip address with an instance in a VPC.
     */
    public readonly associatePublicIpAddress!: pulumi.Output<boolean | undefined>;
    /**
     * Additional EBS block devices to attach to the
     * instance.  See Block Devices below for details.
     */
    public readonly ebsBlockDevices!: pulumi.Output<outputs.ec2.LaunchConfigurationEbsBlockDevice[]>;
    /**
     * If true, the launched EC2 instance will be EBS-optimized.
     */
    public readonly ebsOptimized!: pulumi.Output<boolean>;
    /**
     * Enables/disables detailed monitoring. This is enabled by default.
     */
    public readonly enableMonitoring!: pulumi.Output<boolean | undefined>;
    /**
     * Customize Ephemeral (also known as
     * "Instance Store") volumes on the instance. See Block Devices below for details.
     */
    public readonly ephemeralBlockDevices!: pulumi.Output<outputs.ec2.LaunchConfigurationEphemeralBlockDevice[] | undefined>;
    /**
     * The name attribute of the IAM instance profile to associate
     * with launched instances.
     */
    public readonly iamInstanceProfile!: pulumi.Output<string | undefined>;
    /**
     * The EC2 image ID to launch.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * The size of instance to launch.
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * The key name that should be used for the instance.
     */
    public readonly keyName!: pulumi.Output<string>;
    /**
     * The name of the launch configuration. If you leave
     * this blank, this provider will auto-generate a unique name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    /**
     * The tenancy of the instance. Valid values are
     * `"default"` or `"dedicated"`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html)
     * for more details
     */
    public readonly placementTenancy!: pulumi.Output<string | undefined>;
    /**
     * Customize details about the root block
     * device of the instance. See Block Devices below for details.
     */
    public readonly rootBlockDevice!: pulumi.Output<outputs.ec2.LaunchConfigurationRootBlockDevice>;
    /**
     * A list of associated security group IDS.
     */
    public readonly securityGroups!: pulumi.Output<string[] | undefined>;
    /**
     * The maximum price to use for reserving spot instances.
     */
    public readonly spotPrice!: pulumi.Output<string | undefined>;
    /**
     * The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
     */
    public readonly userDataBase64!: pulumi.Output<string | undefined>;
    /**
     * The ID of a ClassicLink-enabled VPC. Only applies to EC2-Classic instances. (eg. `vpc-2730681a`)
     */
    public readonly vpcClassicLinkId!: pulumi.Output<string | undefined>;
    /**
     * The IDs of one or more security groups for the specified ClassicLink-enabled VPC (eg. `sg-46ae3d11`).
     */
    public readonly vpcClassicLinkSecurityGroups!: pulumi.Output<string[] | undefined>;

    /**
     * Create a LaunchConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LaunchConfigurationArgs, opts?: pulumi.CustomResourceOptions);
    constructor(name: string, argsOrState: LaunchConfigurationArgs | LaunchConfigurationState = {}, opts: pulumi.CustomResourceOptions = {}) {
        const inputs: pulumi.Inputs = {};
        if (opts.id) {
            const state = argsOrState as LaunchConfigurationState;
            inputs.associatePublicIpAddress = state.associatePublicIpAddress;
            inputs.ebsBlockDevices = state.ebsBlockDevices;
            inputs.ebsOptimized = state.ebsOptimized;
            inputs.enableMonitoring = state.enableMonitoring;
            inputs.ephemeralBlockDevices = state.ephemeralBlockDevices;
            inputs.iamInstanceProfile = state.iamInstanceProfile;
            inputs.imageId = state.imageId;
            inputs.instanceType = state.instanceType;
            inputs.keyName = state.keyName;
            inputs.name = state.name;
            inputs.namePrefix = state.namePrefix;
            inputs.placementTenancy = state.placementTenancy;
            inputs.rootBlockDevice = state.rootBlockDevice;
            inputs.securityGroups = state.securityGroups;
            inputs.spotPrice = state.spotPrice;
            inputs.userData = state.userData;
            inputs.userDataBase64 = state.userDataBase64;
            inputs.vpcClassicLinkId = state.vpcClassicLinkId;
            inputs.vpcClassicLinkSecurityGroups = state.vpcClassicLinkSecurityGroups;
        } else {
            const args = argsOrState as LaunchConfigurationArgs;
            if (args.imageId === undefined) {
                throw new Error("Missing required property 'imageId'");
            }
            if (args.instanceType === undefined) {
                throw new Error("Missing required property 'instanceType'");
            }
            inputs.associatePublicIpAddress = args.associatePublicIpAddress;
            inputs.ebsBlockDevices = args.ebsBlockDevices;
            inputs.ebsOptimized = args.ebsOptimized;
            inputs.enableMonitoring = args.enableMonitoring;
            inputs.ephemeralBlockDevices = args.ephemeralBlockDevices;
            inputs.iamInstanceProfile = args.iamInstanceProfile;
            inputs.imageId = args.imageId;
            inputs.instanceType = args.instanceType;
            inputs.keyName = args.keyName;
            inputs.name = args.name;
            inputs.namePrefix = args.namePrefix;
            inputs.placementTenancy = args.placementTenancy;
            inputs.rootBlockDevice = args.rootBlockDevice;
            inputs.securityGroups = args.securityGroups;
            inputs.spotPrice = args.spotPrice;
            inputs.userData = args.userData;
            inputs.userDataBase64 = args.userDataBase64;
            inputs.vpcClassicLinkId = args.vpcClassicLinkId;
            inputs.vpcClassicLinkSecurityGroups = args.vpcClassicLinkSecurityGroups;
        }
        opts.version = opts.version || utilities.getVersion();
        super(LaunchConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LaunchConfiguration resources.
 */
export interface LaunchConfigurationState {
    /**
     * Associate a public ip address with an instance in a VPC.
     */
    readonly associatePublicIpAddress?: pulumi.Input<boolean>;
    /**
     * Additional EBS block devices to attach to the
     * instance.  See Block Devices below for details.
     */
    readonly ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.LaunchConfigurationEbsBlockDevice>[]>;
    /**
     * If true, the launched EC2 instance will be EBS-optimized.
     */
    readonly ebsOptimized?: pulumi.Input<boolean>;
    /**
     * Enables/disables detailed monitoring. This is enabled by default.
     */
    readonly enableMonitoring?: pulumi.Input<boolean>;
    /**
     * Customize Ephemeral (also known as
     * "Instance Store") volumes on the instance. See Block Devices below for details.
     */
    readonly ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.LaunchConfigurationEphemeralBlockDevice>[]>;
    /**
     * The name attribute of the IAM instance profile to associate
     * with launched instances.
     */
    readonly iamInstanceProfile?: pulumi.Input<string | InstanceProfile>;
    /**
     * The EC2 image ID to launch.
     */
    readonly imageId?: pulumi.Input<string>;
    /**
     * The size of instance to launch.
     */
    readonly instanceType?: pulumi.Input<string>;
    /**
     * The key name that should be used for the instance.
     */
    readonly keyName?: pulumi.Input<string>;
    /**
     * The name of the launch configuration. If you leave
     * this blank, this provider will auto-generate a unique name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix?: pulumi.Input<string>;
    /**
     * The tenancy of the instance. Valid values are
     * `"default"` or `"dedicated"`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html)
     * for more details
     */
    readonly placementTenancy?: pulumi.Input<string>;
    /**
     * Customize details about the root block
     * device of the instance. See Block Devices below for details.
     */
    readonly rootBlockDevice?: pulumi.Input<inputs.ec2.LaunchConfigurationRootBlockDevice>;
    /**
     * A list of associated security group IDS.
     */
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum price to use for reserving spot instances.
     */
    readonly spotPrice?: pulumi.Input<string>;
    /**
     * The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
     */
    readonly userData?: pulumi.Input<string>;
    /**
     * Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
     */
    readonly userDataBase64?: pulumi.Input<string>;
    /**
     * The ID of a ClassicLink-enabled VPC. Only applies to EC2-Classic instances. (eg. `vpc-2730681a`)
     */
    readonly vpcClassicLinkId?: pulumi.Input<string>;
    /**
     * The IDs of one or more security groups for the specified ClassicLink-enabled VPC (eg. `sg-46ae3d11`).
     */
    readonly vpcClassicLinkSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LaunchConfiguration resource.
 */
export interface LaunchConfigurationArgs {
    /**
     * Associate a public ip address with an instance in a VPC.
     */
    readonly associatePublicIpAddress?: pulumi.Input<boolean>;
    /**
     * Additional EBS block devices to attach to the
     * instance.  See Block Devices below for details.
     */
    readonly ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.LaunchConfigurationEbsBlockDevice>[]>;
    /**
     * If true, the launched EC2 instance will be EBS-optimized.
     */
    readonly ebsOptimized?: pulumi.Input<boolean>;
    /**
     * Enables/disables detailed monitoring. This is enabled by default.
     */
    readonly enableMonitoring?: pulumi.Input<boolean>;
    /**
     * Customize Ephemeral (also known as
     * "Instance Store") volumes on the instance. See Block Devices below for details.
     */
    readonly ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.LaunchConfigurationEphemeralBlockDevice>[]>;
    /**
     * The name attribute of the IAM instance profile to associate
     * with launched instances.
     */
    readonly iamInstanceProfile?: pulumi.Input<string | InstanceProfile>;
    /**
     * The EC2 image ID to launch.
     */
    readonly imageId: pulumi.Input<string>;
    /**
     * The size of instance to launch.
     */
    readonly instanceType: pulumi.Input<string>;
    /**
     * The key name that should be used for the instance.
     */
    readonly keyName?: pulumi.Input<string>;
    /**
     * The name of the launch configuration. If you leave
     * this blank, this provider will auto-generate a unique name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     */
    readonly namePrefix?: pulumi.Input<string>;
    /**
     * The tenancy of the instance. Valid values are
     * `"default"` or `"dedicated"`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html)
     * for more details
     */
    readonly placementTenancy?: pulumi.Input<string>;
    /**
     * Customize details about the root block
     * device of the instance. See Block Devices below for details.
     */
    readonly rootBlockDevice?: pulumi.Input<inputs.ec2.LaunchConfigurationRootBlockDevice>;
    /**
     * A list of associated security group IDS.
     */
    readonly securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum price to use for reserving spot instances.
     */
    readonly spotPrice?: pulumi.Input<string>;
    /**
     * The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead.
     */
    readonly userData?: pulumi.Input<string>;
    /**
     * Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
     */
    readonly userDataBase64?: pulumi.Input<string>;
    /**
     * The ID of a ClassicLink-enabled VPC. Only applies to EC2-Classic instances. (eg. `vpc-2730681a`)
     */
    readonly vpcClassicLinkId?: pulumi.Input<string>;
    /**
     * The IDs of one or more security groups for the specified ClassicLink-enabled VPC (eg. `sg-46ae3d11`).
     */
    readonly vpcClassicLinkSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
}
