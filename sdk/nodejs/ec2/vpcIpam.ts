// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a IPAM resource.
 *
 * ## Import
 *
 * IPAMs can be imported using the `ipam id`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:ec2/vpcIpam:VpcIpam example ipam-0178368ad2146a492
 * ```
 */
export class VpcIpam extends pulumi.CustomResource {
    /**
     * Get an existing VpcIpam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcIpamState, opts?: pulumi.CustomResourceOptions): VpcIpam {
        return new VpcIpam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/vpcIpam:VpcIpam';

    /**
     * Returns true if the given object is an instance of VpcIpam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcIpam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcIpam.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of IPAM
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
     */
    public readonly cascade!: pulumi.Output<boolean | undefined>;
    /**
     * A description for the IPAM.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
     */
    public readonly operatingRegions!: pulumi.Output<outputs.ec2.VpcIpamOperatingRegion[]>;
    /**
     * The ID of the IPAM's private scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private IP space. The public scope is intended for all internet-routable IP space.
     */
    public /*out*/ readonly privateDefaultScopeId!: pulumi.Output<string>;
    /**
     * The ID of the IPAM's public scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private
     * IP space. The public scope is intended for all internet-routable IP space.
     */
    public /*out*/ readonly publicDefaultScopeId!: pulumi.Output<string>;
    /**
     * The number of scopes in the IPAM.
     */
    public /*out*/ readonly scopeCount!: pulumi.Output<number>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a VpcIpam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcIpamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcIpamArgs | VpcIpamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcIpamState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cascade"] = state ? state.cascade : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["operatingRegions"] = state ? state.operatingRegions : undefined;
            resourceInputs["privateDefaultScopeId"] = state ? state.privateDefaultScopeId : undefined;
            resourceInputs["publicDefaultScopeId"] = state ? state.publicDefaultScopeId : undefined;
            resourceInputs["scopeCount"] = state ? state.scopeCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as VpcIpamArgs | undefined;
            if ((!args || args.operatingRegions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatingRegions'");
            }
            resourceInputs["cascade"] = args ? args.cascade : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["operatingRegions"] = args ? args.operatingRegions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["privateDefaultScopeId"] = undefined /*out*/;
            resourceInputs["publicDefaultScopeId"] = undefined /*out*/;
            resourceInputs["scopeCount"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcIpam.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcIpam resources.
 */
export interface VpcIpamState {
    /**
     * Amazon Resource Name (ARN) of IPAM
     */
    arn?: pulumi.Input<string>;
    /**
     * Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
     */
    cascade?: pulumi.Input<boolean>;
    /**
     * A description for the IPAM.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
     */
    operatingRegions?: pulumi.Input<pulumi.Input<inputs.ec2.VpcIpamOperatingRegion>[]>;
    /**
     * The ID of the IPAM's private scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private IP space. The public scope is intended for all internet-routable IP space.
     */
    privateDefaultScopeId?: pulumi.Input<string>;
    /**
     * The ID of the IPAM's public scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private
     * IP space. The public scope is intended for all internet-routable IP space.
     */
    publicDefaultScopeId?: pulumi.Input<string>;
    /**
     * The number of scopes in the IPAM.
     */
    scopeCount?: pulumi.Input<number>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a VpcIpam resource.
 */
export interface VpcIpamArgs {
    /**
     * Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes.
     */
    cascade?: pulumi.Input<boolean>;
    /**
     * A description for the IPAM.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the regionName parameter. You **must** set your provider block region as an operating_region.
     */
    operatingRegions: pulumi.Input<pulumi.Input<inputs.ec2.VpcIpamOperatingRegion>[]>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
