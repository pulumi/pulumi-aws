// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class AmiFromInstance extends pulumi.CustomResource {
    /**
     * Get an existing AmiFromInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AmiFromInstanceState, opts?: pulumi.CustomResourceOptions): AmiFromInstance {
        return new AmiFromInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/amiFromInstance:AmiFromInstance';

    /**
     * Returns true if the given object is an instance of AmiFromInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AmiFromInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AmiFromInstance.__pulumiType;
    }

    public /*out*/ readonly architecture!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly bootMode!: pulumi.Output<string>;
    public readonly deprecationTime!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ebsBlockDevices!: pulumi.Output<outputs.ec2.AmiFromInstanceEbsBlockDevice[]>;
    public /*out*/ readonly enaSupport!: pulumi.Output<boolean>;
    public readonly ephemeralBlockDevices!: pulumi.Output<outputs.ec2.AmiFromInstanceEphemeralBlockDevice[]>;
    public /*out*/ readonly hypervisor!: pulumi.Output<string>;
    public /*out*/ readonly imageLocation!: pulumi.Output<string>;
    public /*out*/ readonly imageOwnerAlias!: pulumi.Output<string>;
    public /*out*/ readonly imageType!: pulumi.Output<string>;
    public /*out*/ readonly imdsSupport!: pulumi.Output<string>;
    public /*out*/ readonly kernelId!: pulumi.Output<string>;
    public /*out*/ readonly manageEbsSnapshots!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public /*out*/ readonly platform!: pulumi.Output<string>;
    public /*out*/ readonly platformDetails!: pulumi.Output<string>;
    public /*out*/ readonly public!: pulumi.Output<boolean>;
    public /*out*/ readonly ramdiskId!: pulumi.Output<string>;
    public /*out*/ readonly rootDeviceName!: pulumi.Output<string>;
    public /*out*/ readonly rootSnapshotId!: pulumi.Output<string>;
    public readonly snapshotWithoutReboot!: pulumi.Output<boolean | undefined>;
    public readonly sourceInstanceId!: pulumi.Output<string>;
    public /*out*/ readonly sriovNetSupport!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly tpmSupport!: pulumi.Output<string>;
    public /*out*/ readonly usageOperation!: pulumi.Output<string>;
    public /*out*/ readonly virtualizationType!: pulumi.Output<string>;

    /**
     * Create a AmiFromInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AmiFromInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AmiFromInstanceArgs | AmiFromInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AmiFromInstanceState | undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bootMode"] = state ? state.bootMode : undefined;
            resourceInputs["deprecationTime"] = state ? state.deprecationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            resourceInputs["enaSupport"] = state ? state.enaSupport : undefined;
            resourceInputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            resourceInputs["hypervisor"] = state ? state.hypervisor : undefined;
            resourceInputs["imageLocation"] = state ? state.imageLocation : undefined;
            resourceInputs["imageOwnerAlias"] = state ? state.imageOwnerAlias : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["imdsSupport"] = state ? state.imdsSupport : undefined;
            resourceInputs["kernelId"] = state ? state.kernelId : undefined;
            resourceInputs["manageEbsSnapshots"] = state ? state.manageEbsSnapshots : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["platformDetails"] = state ? state.platformDetails : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["ramdiskId"] = state ? state.ramdiskId : undefined;
            resourceInputs["rootDeviceName"] = state ? state.rootDeviceName : undefined;
            resourceInputs["rootSnapshotId"] = state ? state.rootSnapshotId : undefined;
            resourceInputs["snapshotWithoutReboot"] = state ? state.snapshotWithoutReboot : undefined;
            resourceInputs["sourceInstanceId"] = state ? state.sourceInstanceId : undefined;
            resourceInputs["sriovNetSupport"] = state ? state.sriovNetSupport : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tpmSupport"] = state ? state.tpmSupport : undefined;
            resourceInputs["usageOperation"] = state ? state.usageOperation : undefined;
            resourceInputs["virtualizationType"] = state ? state.virtualizationType : undefined;
        } else {
            const args = argsOrState as AmiFromInstanceArgs | undefined;
            if ((!args || args.sourceInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceInstanceId'");
            }
            resourceInputs["deprecationTime"] = args ? args.deprecationTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            resourceInputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["snapshotWithoutReboot"] = args ? args.snapshotWithoutReboot : undefined;
            resourceInputs["sourceInstanceId"] = args ? args.sourceInstanceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["bootMode"] = undefined /*out*/;
            resourceInputs["enaSupport"] = undefined /*out*/;
            resourceInputs["hypervisor"] = undefined /*out*/;
            resourceInputs["imageLocation"] = undefined /*out*/;
            resourceInputs["imageOwnerAlias"] = undefined /*out*/;
            resourceInputs["imageType"] = undefined /*out*/;
            resourceInputs["imdsSupport"] = undefined /*out*/;
            resourceInputs["kernelId"] = undefined /*out*/;
            resourceInputs["manageEbsSnapshots"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["platformDetails"] = undefined /*out*/;
            resourceInputs["public"] = undefined /*out*/;
            resourceInputs["ramdiskId"] = undefined /*out*/;
            resourceInputs["rootDeviceName"] = undefined /*out*/;
            resourceInputs["rootSnapshotId"] = undefined /*out*/;
            resourceInputs["sriovNetSupport"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["tpmSupport"] = undefined /*out*/;
            resourceInputs["usageOperation"] = undefined /*out*/;
            resourceInputs["virtualizationType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AmiFromInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AmiFromInstance resources.
 */
export interface AmiFromInstanceState {
    architecture?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    bootMode?: pulumi.Input<string>;
    deprecationTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.AmiFromInstanceEbsBlockDevice>[]>;
    enaSupport?: pulumi.Input<boolean>;
    ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.AmiFromInstanceEphemeralBlockDevice>[]>;
    hypervisor?: pulumi.Input<string>;
    imageLocation?: pulumi.Input<string>;
    imageOwnerAlias?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    imdsSupport?: pulumi.Input<string>;
    kernelId?: pulumi.Input<string>;
    manageEbsSnapshots?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    platformDetails?: pulumi.Input<string>;
    public?: pulumi.Input<boolean>;
    ramdiskId?: pulumi.Input<string>;
    rootDeviceName?: pulumi.Input<string>;
    rootSnapshotId?: pulumi.Input<string>;
    snapshotWithoutReboot?: pulumi.Input<boolean>;
    sourceInstanceId?: pulumi.Input<string>;
    sriovNetSupport?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tpmSupport?: pulumi.Input<string>;
    usageOperation?: pulumi.Input<string>;
    virtualizationType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AmiFromInstance resource.
 */
export interface AmiFromInstanceArgs {
    deprecationTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.AmiFromInstanceEbsBlockDevice>[]>;
    ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.ec2.AmiFromInstanceEphemeralBlockDevice>[]>;
    name?: pulumi.Input<string>;
    snapshotWithoutReboot?: pulumi.Input<boolean>;
    sourceInstanceId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
