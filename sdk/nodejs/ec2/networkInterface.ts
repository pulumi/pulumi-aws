// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class NetworkInterface extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkInterfaceState, opts?: pulumi.CustomResourceOptions): NetworkInterface {
        return new NetworkInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/networkInterface:NetworkInterface';

    /**
     * Returns true if the given object is an instance of NetworkInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInterface.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly attachments!: pulumi.Output<outputs.ec2.NetworkInterfaceAttachment[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly interfaceType!: pulumi.Output<string>;
    public readonly ipv4PrefixCount!: pulumi.Output<number>;
    public readonly ipv4Prefixes!: pulumi.Output<string[]>;
    public readonly ipv6AddressCount!: pulumi.Output<number>;
    public readonly ipv6AddressListEnabled!: pulumi.Output<boolean | undefined>;
    public readonly ipv6AddressLists!: pulumi.Output<string[]>;
    public readonly ipv6Addresses!: pulumi.Output<string[]>;
    public readonly ipv6PrefixCount!: pulumi.Output<number>;
    public readonly ipv6Prefixes!: pulumi.Output<string[]>;
    public /*out*/ readonly macAddress!: pulumi.Output<string>;
    public /*out*/ readonly outpostArn!: pulumi.Output<string>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public /*out*/ readonly privateDnsName!: pulumi.Output<string>;
    public readonly privateIp!: pulumi.Output<string>;
    public readonly privateIpListEnabled!: pulumi.Output<boolean | undefined>;
    public readonly privateIpLists!: pulumi.Output<string[]>;
    public readonly privateIps!: pulumi.Output<string[]>;
    public readonly privateIpsCount!: pulumi.Output<number>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly sourceDestCheck!: pulumi.Output<boolean | undefined>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a NetworkInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkInterfaceArgs | NetworkInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkInterfaceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["attachments"] = state ? state.attachments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["interfaceType"] = state ? state.interfaceType : undefined;
            resourceInputs["ipv4PrefixCount"] = state ? state.ipv4PrefixCount : undefined;
            resourceInputs["ipv4Prefixes"] = state ? state.ipv4Prefixes : undefined;
            resourceInputs["ipv6AddressCount"] = state ? state.ipv6AddressCount : undefined;
            resourceInputs["ipv6AddressListEnabled"] = state ? state.ipv6AddressListEnabled : undefined;
            resourceInputs["ipv6AddressLists"] = state ? state.ipv6AddressLists : undefined;
            resourceInputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            resourceInputs["ipv6PrefixCount"] = state ? state.ipv6PrefixCount : undefined;
            resourceInputs["ipv6Prefixes"] = state ? state.ipv6Prefixes : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["outpostArn"] = state ? state.outpostArn : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["privateDnsName"] = state ? state.privateDnsName : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["privateIpListEnabled"] = state ? state.privateIpListEnabled : undefined;
            resourceInputs["privateIpLists"] = state ? state.privateIpLists : undefined;
            resourceInputs["privateIps"] = state ? state.privateIps : undefined;
            resourceInputs["privateIpsCount"] = state ? state.privateIpsCount : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["sourceDestCheck"] = state ? state.sourceDestCheck : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as NetworkInterfaceArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["attachments"] = args ? args.attachments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["interfaceType"] = args ? args.interfaceType : undefined;
            resourceInputs["ipv4PrefixCount"] = args ? args.ipv4PrefixCount : undefined;
            resourceInputs["ipv4Prefixes"] = args ? args.ipv4Prefixes : undefined;
            resourceInputs["ipv6AddressCount"] = args ? args.ipv6AddressCount : undefined;
            resourceInputs["ipv6AddressListEnabled"] = args ? args.ipv6AddressListEnabled : undefined;
            resourceInputs["ipv6AddressLists"] = args ? args.ipv6AddressLists : undefined;
            resourceInputs["ipv6Addresses"] = args ? args.ipv6Addresses : undefined;
            resourceInputs["ipv6PrefixCount"] = args ? args.ipv6PrefixCount : undefined;
            resourceInputs["ipv6Prefixes"] = args ? args.ipv6Prefixes : undefined;
            resourceInputs["privateIp"] = args ? args.privateIp : undefined;
            resourceInputs["privateIpListEnabled"] = args ? args.privateIpListEnabled : undefined;
            resourceInputs["privateIpLists"] = args ? args.privateIpLists : undefined;
            resourceInputs["privateIps"] = args ? args.privateIps : undefined;
            resourceInputs["privateIpsCount"] = args ? args.privateIpsCount : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["sourceDestCheck"] = args ? args.sourceDestCheck : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["macAddress"] = undefined /*out*/;
            resourceInputs["outpostArn"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["privateDnsName"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkInterface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkInterface resources.
 */
export interface NetworkInterfaceState {
    arn?: pulumi.Input<string>;
    attachments?: pulumi.Input<pulumi.Input<inputs.ec2.NetworkInterfaceAttachment>[]>;
    description?: pulumi.Input<string>;
    interfaceType?: pulumi.Input<string>;
    ipv4PrefixCount?: pulumi.Input<number>;
    ipv4Prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6AddressCount?: pulumi.Input<number>;
    ipv6AddressListEnabled?: pulumi.Input<boolean>;
    ipv6AddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6PrefixCount?: pulumi.Input<number>;
    ipv6Prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    macAddress?: pulumi.Input<string>;
    outpostArn?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    privateDnsName?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    privateIpListEnabled?: pulumi.Input<boolean>;
    privateIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    privateIpsCount?: pulumi.Input<number>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sourceDestCheck?: pulumi.Input<boolean>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a NetworkInterface resource.
 */
export interface NetworkInterfaceArgs {
    attachments?: pulumi.Input<pulumi.Input<inputs.ec2.NetworkInterfaceAttachment>[]>;
    description?: pulumi.Input<string>;
    interfaceType?: pulumi.Input<string>;
    ipv4PrefixCount?: pulumi.Input<number>;
    ipv4Prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6AddressCount?: pulumi.Input<number>;
    ipv6AddressListEnabled?: pulumi.Input<boolean>;
    ipv6AddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6PrefixCount?: pulumi.Input<number>;
    ipv6Prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    privateIp?: pulumi.Input<string>;
    privateIpListEnabled?: pulumi.Input<boolean>;
    privateIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    privateIpsCount?: pulumi.Input<number>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sourceDestCheck?: pulumi.Input<boolean>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
