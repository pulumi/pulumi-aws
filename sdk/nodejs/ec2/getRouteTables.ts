// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * This resource can be useful for getting back a list of route table ids to be referenced elsewhere.
 *
 * ## Example Usage
 *
 * The following adds a route for a particular cidr block to every (private
 * kops) route table in a specified vpc to use a particular vpc peering
 * connection.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * export = async () => {
 *     const rts = await aws.ec2.getRouteTables({
 *         vpcId: _var.vpc_id,
 *         filters: [{
 *             name: "tag:kubernetes.io/kops/role",
 *             values: ["private*"],
 *         }],
 *     });
 *     const route: aws.ec2.Route[];
 *     for (const range = {value: 0}; range.value < rts.ids.length; range.value++) {
 *         route.push(new aws.ec2.Route(`route-${range.value}`, {
 *             routeTableId: rts.ids[range.value],
 *             destinationCidrBlock: "10.0.1.0/22",
 *             vpcPeeringConnectionId: "pcx-0e9a7a9ecd137dc54",
 *         }));
 *     }
 * }
 * ```
 */
export function getRouteTables(args?: GetRouteTablesArgs, opts?: pulumi.InvokeOptions): Promise<GetRouteTablesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aws:ec2/getRouteTables:getRouteTables", {
        "filters": args.filters,
        "tags": args.tags,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRouteTables.
 */
export interface GetRouteTablesArgs {
    /**
     * Custom filter block as described below.
     */
    readonly filters?: inputs.ec2.GetRouteTablesFilter[];
    /**
     * A map of tags, each pair of which must exactly match
     * a pair on the desired route tables.
     */
    readonly tags?: {[key: string]: string};
    /**
     * The VPC ID that you want to filter from.
     */
    readonly vpcId?: string;
}

/**
 * A collection of values returned by getRouteTables.
 */
export interface GetRouteTablesResult {
    readonly filters?: outputs.ec2.GetRouteTablesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of all the route table ids found. This data source will fail if none are found.
     */
    readonly ids: string[];
    readonly tags: {[key: string]: string};
    readonly vpcId?: string;
}
