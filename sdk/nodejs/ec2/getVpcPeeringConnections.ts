// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Use this data source to get IDs of Amazon VPC peering connections
 * To get more details on each connection, use the data resource aws.ec2.VpcPeeringConnection
 *
 * Note: To use this data source in a count, the resources should exist before trying to access
 * the data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const pcs = aws.ec2.getVpcPeeringConnections({
 *     filters: [{
 *         name: "requester-vpc-info.vpc-id",
 *         values: [aws_vpc.foo.id],
 *     }],
 * });
 * const pc = .map(__index => (aws.ec2.getVpcPeeringConnection({
 *     id: _arg0_.ids[__index],
 * })));
 * ```
 */
export function getVpcPeeringConnections(args?: GetVpcPeeringConnectionsArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcPeeringConnectionsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:ec2/getVpcPeeringConnections:getVpcPeeringConnections", {
        "filters": args.filters,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpcPeeringConnections.
 */
export interface GetVpcPeeringConnectionsArgs {
    /**
     * Custom filter block as described below.
     */
    filters?: inputs.ec2.GetVpcPeeringConnectionsFilter[];
    /**
     * Mapping of tags, each pair of which must exactly match
     * a pair on the desired VPC Peering Connection.
     *
     * More complex filters can be expressed using one or more `filter` sub-blocks,
     * which take the following arguments:
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getVpcPeeringConnections.
 */
export interface GetVpcPeeringConnectionsResult {
    readonly filters?: outputs.ec2.GetVpcPeeringConnectionsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * IDs of the VPC Peering Connections.
     */
    readonly ids: string[];
    readonly tags: {[key: string]: string};
}
/**
 * Use this data source to get IDs of Amazon VPC peering connections
 * To get more details on each connection, use the data resource aws.ec2.VpcPeeringConnection
 *
 * Note: To use this data source in a count, the resources should exist before trying to access
 * the data source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const pcs = aws.ec2.getVpcPeeringConnections({
 *     filters: [{
 *         name: "requester-vpc-info.vpc-id",
 *         values: [aws_vpc.foo.id],
 *     }],
 * });
 * const pc = .map(__index => (aws.ec2.getVpcPeeringConnection({
 *     id: _arg0_.ids[__index],
 * })));
 * ```
 */
export function getVpcPeeringConnectionsOutput(args?: GetVpcPeeringConnectionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcPeeringConnectionsResult> {
    return pulumi.output(args).apply((a: any) => getVpcPeeringConnections(a, opts))
}

/**
 * A collection of arguments for invoking getVpcPeeringConnections.
 */
export interface GetVpcPeeringConnectionsOutputArgs {
    /**
     * Custom filter block as described below.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.ec2.GetVpcPeeringConnectionsFilterArgs>[]>;
    /**
     * Mapping of tags, each pair of which must exactly match
     * a pair on the desired VPC Peering Connection.
     *
     * More complex filters can be expressed using one or more `filter` sub-blocks,
     * which take the following arguments:
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
