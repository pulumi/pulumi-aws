// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    public readonly carrierGatewayId!: pulumi.Output<string | undefined>;
    public readonly coreNetworkArn!: pulumi.Output<string | undefined>;
    public readonly destinationCidrBlock!: pulumi.Output<string | undefined>;
    public readonly destinationIpv6CidrBlock!: pulumi.Output<string | undefined>;
    public readonly destinationPrefixListId!: pulumi.Output<string | undefined>;
    public readonly egressOnlyGatewayId!: pulumi.Output<string | undefined>;
    public readonly gatewayId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use network_interface_id instead
     */
    public readonly instanceId!: pulumi.Output<string>;
    public /*out*/ readonly instanceOwnerId!: pulumi.Output<string>;
    public readonly localGatewayId!: pulumi.Output<string | undefined>;
    public readonly natGatewayId!: pulumi.Output<string | undefined>;
    public readonly networkInterfaceId!: pulumi.Output<string>;
    public /*out*/ readonly origin!: pulumi.Output<string>;
    public readonly routeTableId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly transitGatewayId!: pulumi.Output<string | undefined>;
    public readonly vpcEndpointId!: pulumi.Output<string | undefined>;
    public readonly vpcPeeringConnectionId!: pulumi.Output<string | undefined>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["carrierGatewayId"] = state ? state.carrierGatewayId : undefined;
            resourceInputs["coreNetworkArn"] = state ? state.coreNetworkArn : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["destinationIpv6CidrBlock"] = state ? state.destinationIpv6CidrBlock : undefined;
            resourceInputs["destinationPrefixListId"] = state ? state.destinationPrefixListId : undefined;
            resourceInputs["egressOnlyGatewayId"] = state ? state.egressOnlyGatewayId : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceOwnerId"] = state ? state.instanceOwnerId : undefined;
            resourceInputs["localGatewayId"] = state ? state.localGatewayId : undefined;
            resourceInputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
            resourceInputs["vpcEndpointId"] = state ? state.vpcEndpointId : undefined;
            resourceInputs["vpcPeeringConnectionId"] = state ? state.vpcPeeringConnectionId : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.routeTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableId'");
            }
            resourceInputs["carrierGatewayId"] = args ? args.carrierGatewayId : undefined;
            resourceInputs["coreNetworkArn"] = args ? args.coreNetworkArn : undefined;
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["destinationIpv6CidrBlock"] = args ? args.destinationIpv6CidrBlock : undefined;
            resourceInputs["destinationPrefixListId"] = args ? args.destinationPrefixListId : undefined;
            resourceInputs["egressOnlyGatewayId"] = args ? args.egressOnlyGatewayId : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["localGatewayId"] = args ? args.localGatewayId : undefined;
            resourceInputs["natGatewayId"] = args ? args.natGatewayId : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["routeTableId"] = args ? args.routeTableId : undefined;
            resourceInputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            resourceInputs["vpcEndpointId"] = args ? args.vpcEndpointId : undefined;
            resourceInputs["vpcPeeringConnectionId"] = args ? args.vpcPeeringConnectionId : undefined;
            resourceInputs["instanceOwnerId"] = undefined /*out*/;
            resourceInputs["origin"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    carrierGatewayId?: pulumi.Input<string>;
    coreNetworkArn?: pulumi.Input<string>;
    destinationCidrBlock?: pulumi.Input<string>;
    destinationIpv6CidrBlock?: pulumi.Input<string>;
    destinationPrefixListId?: pulumi.Input<string>;
    egressOnlyGatewayId?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    /**
     * @deprecated Use network_interface_id instead
     */
    instanceId?: pulumi.Input<string>;
    instanceOwnerId?: pulumi.Input<string>;
    localGatewayId?: pulumi.Input<string>;
    natGatewayId?: pulumi.Input<string>;
    networkInterfaceId?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    routeTableId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    transitGatewayId?: pulumi.Input<string>;
    vpcEndpointId?: pulumi.Input<string>;
    vpcPeeringConnectionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    carrierGatewayId?: pulumi.Input<string>;
    coreNetworkArn?: pulumi.Input<string>;
    destinationCidrBlock?: pulumi.Input<string>;
    destinationIpv6CidrBlock?: pulumi.Input<string>;
    destinationPrefixListId?: pulumi.Input<string>;
    egressOnlyGatewayId?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    /**
     * @deprecated Use network_interface_id instead
     */
    instanceId?: pulumi.Input<string>;
    localGatewayId?: pulumi.Input<string>;
    natGatewayId?: pulumi.Input<string>;
    networkInterfaceId?: pulumi.Input<string>;
    routeTableId: pulumi.Input<string>;
    transitGatewayId?: pulumi.Input<string>;
    vpcEndpointId?: pulumi.Input<string>;
    vpcPeeringConnectionId?: pulumi.Input<string>;
}
