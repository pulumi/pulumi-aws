// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * `aws.ec2.getSubnetIds` provides a list of ids for a vpcId
 * 
 * This resource can be useful for getting back a list of subnet ids for a vpc.
 * 
 * ## Example Usage
 * 
 * The following shows outputing all cidr blocks for every subnet id in a vpc.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleSubnetIds = aws.ec2.getSubnetIds({
 *     vpcId: var_vpc_id,
 * });
 * const exampleSubnet: aws.ec2.GetSubnetResult[] = [];
 * for (let i = 0; i < exampleSubnetIds.ids.length; i++) {
 *     exampleSubnet.push(aws.ec2.getSubnet({
 *         id: exampleSubnetIds.ids[i],
 *     }));
 * }
 * 
 * export const subnetCidrBlocks = exampleSubnet.map(v => v.cidrBlock!);
 * ```
 * 
 * The following example retrieves a list of all subnets in a VPC with a custom
 * tag of `Tier` set to a value of "Private" so that the `aws.ec2.Instance` resource
 * can loop through the subnets, putting instances across availability zones.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const privateSubnetIds = aws.ec2.getSubnetIds({
 *     tags: {
 *         Tier: "Private",
 *     },
 *     vpcId: var_vpc_id,
 * });
 * const app: aws.ec2.Instance[] = [];
 * for (let i = 0; i < 3; i++) {
 *     app.push(new aws.ec2.Instance(`app-${i}`, {
 *         ami: var_ami,
 *         instanceType: "t2.micro",
 *         subnetId: privateSubnetIds.ids[i],
 *     }));
 * }
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/subnet_ids.html.markdown.
 */
export function getSubnetIds(args: GetSubnetIdsArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetIdsResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aws:ec2/getSubnetIds:getSubnetIds", {
        "filters": args.filters,
        "tags": args.tags,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnetIds.
 */
export interface GetSubnetIdsArgs {
    /**
     * Custom filter block as described below.
     */
    readonly filters?: inputs.ec2.GetSubnetIdsFilter[];
    /**
     * A mapping of tags, each pair of which must exactly match
     * a pair on the desired subnets.
     */
    readonly tags?: {[key: string]: any};
    /**
     * The VPC ID that you want to filter from.
     */
    readonly vpcId: string;
}

/**
 * A collection of values returned by getSubnetIds.
 */
export interface GetSubnetIdsResult {
    readonly filters?: outputs.ec2.GetSubnetIdsFilter[];
    /**
     * A set of all the subnet ids found. This data source will fail if none are found.
     */
    readonly ids: string[];
    readonly tags: {[key: string]: any};
    readonly vpcId: string;
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
