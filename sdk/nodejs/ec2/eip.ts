// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Eip extends pulumi.CustomResource {
    /**
     * Get an existing Eip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EipState, opts?: pulumi.CustomResourceOptions): Eip {
        return new Eip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/eip:Eip';

    /**
     * Returns true if the given object is an instance of Eip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Eip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Eip.__pulumiType;
    }

    public readonly address!: pulumi.Output<string | undefined>;
    public /*out*/ readonly allocationId!: pulumi.Output<string>;
    public readonly associateWithPrivateIp!: pulumi.Output<string | undefined>;
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    public /*out*/ readonly carrierIp!: pulumi.Output<string>;
    public /*out*/ readonly customerOwnedIp!: pulumi.Output<string>;
    public readonly customerOwnedIpv4Pool!: pulumi.Output<string | undefined>;
    public /*out*/ readonly domain!: pulumi.Output<string>;
    public readonly instance!: pulumi.Output<string>;
    public readonly networkBorderGroup!: pulumi.Output<string>;
    public readonly networkInterface!: pulumi.Output<string>;
    public /*out*/ readonly privateDns!: pulumi.Output<string>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public /*out*/ readonly publicDns!: pulumi.Output<string>;
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    public readonly publicIpv4Pool!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly vpc!: pulumi.Output<boolean>;

    /**
     * Create a Eip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EipArgs | EipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EipState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["allocationId"] = state ? state.allocationId : undefined;
            resourceInputs["associateWithPrivateIp"] = state ? state.associateWithPrivateIp : undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["carrierIp"] = state ? state.carrierIp : undefined;
            resourceInputs["customerOwnedIp"] = state ? state.customerOwnedIp : undefined;
            resourceInputs["customerOwnedIpv4Pool"] = state ? state.customerOwnedIpv4Pool : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["networkBorderGroup"] = state ? state.networkBorderGroup : undefined;
            resourceInputs["networkInterface"] = state ? state.networkInterface : undefined;
            resourceInputs["privateDns"] = state ? state.privateDns : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["publicDns"] = state ? state.publicDns : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicIpv4Pool"] = state ? state.publicIpv4Pool : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpc"] = state ? state.vpc : undefined;
        } else {
            const args = argsOrState as EipArgs | undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["associateWithPrivateIp"] = args ? args.associateWithPrivateIp : undefined;
            resourceInputs["customerOwnedIpv4Pool"] = args ? args.customerOwnedIpv4Pool : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["networkBorderGroup"] = args ? args.networkBorderGroup : undefined;
            resourceInputs["networkInterface"] = args ? args.networkInterface : undefined;
            resourceInputs["publicIpv4Pool"] = args ? args.publicIpv4Pool : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpc"] = args ? args.vpc : undefined;
            resourceInputs["allocationId"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["carrierIp"] = undefined /*out*/;
            resourceInputs["customerOwnedIp"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["privateDns"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicDns"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Eip.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Eip resources.
 */
export interface EipState {
    address?: pulumi.Input<string>;
    allocationId?: pulumi.Input<string>;
    associateWithPrivateIp?: pulumi.Input<string>;
    associationId?: pulumi.Input<string>;
    carrierIp?: pulumi.Input<string>;
    customerOwnedIp?: pulumi.Input<string>;
    customerOwnedIpv4Pool?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    networkBorderGroup?: pulumi.Input<string>;
    networkInterface?: pulumi.Input<string>;
    privateDns?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicDns?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicIpv4Pool?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpc?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Eip resource.
 */
export interface EipArgs {
    address?: pulumi.Input<string>;
    associateWithPrivateIp?: pulumi.Input<string>;
    customerOwnedIpv4Pool?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    networkBorderGroup?: pulumi.Input<string>;
    networkInterface?: pulumi.Input<string>;
    publicIpv4Pool?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpc?: pulumi.Input<boolean>;
}
