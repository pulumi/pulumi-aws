// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provisions a CIDR from an IPAM address pool.
 *
 * > **NOTE:** Provisioning Public IPv4 or Public IPv6 require [steps outside the scope of this resource](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip). The resource accepts `message` and `signature` as part of the `cidrAuthorizationContext` attribute but those must be generated ahead of time. Public IPv6 CIDRs that are provisioned into a Pool with `publiclyAdvertisable = true` and all public IPv4 CIDRs also require creating a Route Origin Authorization (ROA) object in your Regional Internet Registry (RIR).
 *
 * > **NOTE:** In order to deprovision CIDRs all Allocations must be released. Allocations created by a VPC take up to 30 minutes to be released. However, for IPAM to properly manage the removal of allocation records created by VPCs and other resources, you must [grant it permissions](https://docs.aws.amazon.com/vpc/latest/ipam/choose-single-user-or-orgs-ipam.html) in
 * either a single account or organizationally. If you are unable to deprovision a cidr after waiting over 30 minutes, you may be missing the Service Linked Role.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const exampleVpcIpam = new aws.ec2.VpcIpam("exampleVpcIpam", {operatingRegions: [{
 *     regionName: current.then(current => current.name),
 * }]});
 * const exampleVpcIpamPool = new aws.ec2.VpcIpamPool("exampleVpcIpamPool", {
 *     addressFamily: "ipv4",
 *     ipamScopeId: exampleVpcIpam.privateDefaultScopeId,
 *     locale: current.then(current => current.name),
 * });
 * const exampleVpcIpamPoolCidr = new aws.ec2.VpcIpamPoolCidr("exampleVpcIpamPoolCidr", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     cidr: "172.2.0.0/16",
 * });
 * ```
 *
 * Provision Public IPv6 Pool CIDRs:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const example = new aws.ec2.VpcIpam("example", {operatingRegions: [{
 *     regionName: current.then(current => current.name),
 * }]});
 * const ipv6TestPublicVpcIpamPool = new aws.ec2.VpcIpamPool("ipv6TestPublicVpcIpamPool", {
 *     addressFamily: "ipv6",
 *     ipamScopeId: example.publicDefaultScopeId,
 *     locale: "us-east-1",
 *     description: "public ipv6",
 *     advertisable: false,
 * });
 * const ipv6TestPublicVpcIpamPoolCidr = new aws.ec2.VpcIpamPoolCidr("ipv6TestPublicVpcIpamPoolCidr", {
 *     ipamPoolId: ipv6TestPublicVpcIpamPool.id,
 *     cidr: _var.ipv6_cidr,
 *     cidrAuthorizationContext: {
 *         message: _var.message,
 *         signature: _var.signature,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * IPAMs can be imported using the `<cidr>_<ipam-pool-id>`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr example 172.2.0.0/24_ipam-pool-0e634f5a1517cccdc
 * ```
 */
export class VpcIpamPoolCidr extends pulumi.CustomResource {
    /**
     * Get an existing VpcIpamPoolCidr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcIpamPoolCidrState, opts?: pulumi.CustomResourceOptions): VpcIpamPoolCidr {
        return new VpcIpamPoolCidr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr';

    /**
     * Returns true if the given object is an instance of VpcIpamPoolCidr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcIpamPoolCidr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcIpamPoolCidr.__pulumiType;
    }

    /**
     * The CIDR you want to assign to the pool.
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
     */
    public readonly cidrAuthorizationContext!: pulumi.Output<outputs.ec2.VpcIpamPoolCidrCidrAuthorizationContext | undefined>;
    /**
     * The ID of the pool to which you want to assign a CIDR.
     */
    public readonly ipamPoolId!: pulumi.Output<string>;

    /**
     * Create a VpcIpamPoolCidr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcIpamPoolCidrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcIpamPoolCidrArgs | VpcIpamPoolCidrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcIpamPoolCidrState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["cidrAuthorizationContext"] = state ? state.cidrAuthorizationContext : undefined;
            resourceInputs["ipamPoolId"] = state ? state.ipamPoolId : undefined;
        } else {
            const args = argsOrState as VpcIpamPoolCidrArgs | undefined;
            if ((!args || args.ipamPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipamPoolId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["cidrAuthorizationContext"] = args ? args.cidrAuthorizationContext : undefined;
            resourceInputs["ipamPoolId"] = args ? args.ipamPoolId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcIpamPoolCidr.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcIpamPoolCidr resources.
 */
export interface VpcIpamPoolCidrState {
    /**
     * The CIDR you want to assign to the pool.
     */
    cidr?: pulumi.Input<string>;
    /**
     * A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
     */
    cidrAuthorizationContext?: pulumi.Input<inputs.ec2.VpcIpamPoolCidrCidrAuthorizationContext>;
    /**
     * The ID of the pool to which you want to assign a CIDR.
     */
    ipamPoolId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcIpamPoolCidr resource.
 */
export interface VpcIpamPoolCidrArgs {
    /**
     * The CIDR you want to assign to the pool.
     */
    cidr?: pulumi.Input<string>;
    /**
     * A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
     */
    cidrAuthorizationContext?: pulumi.Input<inputs.ec2.VpcIpamPoolCidrCidrAuthorizationContext>;
    /**
     * The ID of the pool to which you want to assign a CIDR.
     */
    ipamPoolId: pulumi.Input<string>;
}
