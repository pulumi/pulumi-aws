// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getSubnet(args?: GetSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:ec2/getSubnet:getSubnet", {
        "availabilityZone": args.availabilityZone,
        "availabilityZoneId": args.availabilityZoneId,
        "cidrBlock": args.cidrBlock,
        "defaultForAz": args.defaultForAz,
        "filters": args.filters,
        "id": args.id,
        "ipv6CidrBlock": args.ipv6CidrBlock,
        "state": args.state,
        "tags": args.tags,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnet.
 */
export interface GetSubnetArgs {
    availabilityZone?: string;
    availabilityZoneId?: string;
    cidrBlock?: string;
    defaultForAz?: boolean;
    filters?: inputs.ec2.GetSubnetFilter[];
    id?: string;
    ipv6CidrBlock?: string;
    state?: string;
    tags?: {[key: string]: string};
    vpcId?: string;
}

/**
 * A collection of values returned by getSubnet.
 */
export interface GetSubnetResult {
    readonly arn: string;
    readonly assignIpv6AddressOnCreation: boolean;
    readonly availabilityZone: string;
    readonly availabilityZoneId: string;
    readonly availableIpAddressCount: number;
    readonly cidrBlock: string;
    readonly customerOwnedIpv4Pool: string;
    readonly defaultForAz: boolean;
    readonly enableDns64: boolean;
    readonly enableResourceNameDnsARecordOnLaunch: boolean;
    readonly enableResourceNameDnsAaaaRecordOnLaunch: boolean;
    readonly filters?: outputs.ec2.GetSubnetFilter[];
    readonly id: string;
    readonly ipv6CidrBlock: string;
    readonly ipv6CidrBlockAssociationId: string;
    readonly ipv6Native: boolean;
    readonly mapCustomerOwnedIpOnLaunch: boolean;
    readonly mapPublicIpOnLaunch: boolean;
    readonly outpostArn: string;
    readonly ownerId: string;
    readonly privateDnsHostnameTypeOnLaunch: string;
    readonly state: string;
    readonly tags: {[key: string]: string};
    readonly vpcId: string;
}
export function getSubnetOutput(args?: GetSubnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetResult> {
    return pulumi.output(args).apply((a: any) => getSubnet(a, opts))
}

/**
 * A collection of arguments for invoking getSubnet.
 */
export interface GetSubnetOutputArgs {
    availabilityZone?: pulumi.Input<string>;
    availabilityZoneId?: pulumi.Input<string>;
    cidrBlock?: pulumi.Input<string>;
    defaultForAz?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.ec2.GetSubnetFilterArgs>[]>;
    id?: pulumi.Input<string>;
    ipv6CidrBlock?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}
