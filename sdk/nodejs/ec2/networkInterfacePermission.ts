// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Grant cross-account access to an Elastic network interface (ENI).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.NetworkInterface("example", {
 *     subnetId: exampleAwsSubnet.id,
 *     privateIps: ["10.0.0.50"],
 *     securityGroups: [exampleAwsSecurityGroup.id],
 *     attachments: [{
 *         instance: exampleAwsInstance.id,
 *         deviceIndex: 1,
 *     }],
 * });
 * const exampleNetworkInterfacePermission = new aws.ec2.NetworkInterfacePermission("example", {
 *     networkInterfaceId: example.id,
 *     awsAccountId: "123456789012",
 *     permission: "INSTANCE-ATTACH",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Network Interface Permissions using the `network_interface_permission_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:ec2/networkInterfacePermission:NetworkInterfacePermission example eni-perm-056ad97ce2ac377ed
 * ```
 */
export class NetworkInterfacePermission extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInterfacePermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkInterfacePermissionState, opts?: pulumi.CustomResourceOptions): NetworkInterfacePermission {
        return new NetworkInterfacePermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/networkInterfacePermission:NetworkInterfacePermission';

    /**
     * Returns true if the given object is an instance of NetworkInterfacePermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkInterfacePermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInterfacePermission.__pulumiType;
    }

    /**
     * The Amazon Web Services account ID.
     */
    public readonly awsAccountId!: pulumi.Output<string>;
    /**
     * The ID of the network interface.
     */
    public readonly networkInterfaceId!: pulumi.Output<string>;
    /**
     * ENI permission ID.
     */
    public /*out*/ readonly networkInterfacePermissionId!: pulumi.Output<string>;
    /**
     * The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
     */
    public readonly permission!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ec2.NetworkInterfacePermissionTimeouts | undefined>;

    /**
     * Create a NetworkInterfacePermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInterfacePermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkInterfacePermissionArgs | NetworkInterfacePermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkInterfacePermissionState | undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["networkInterfacePermissionId"] = state ? state.networkInterfacePermissionId : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkInterfacePermissionArgs | undefined;
            if ((!args || args.awsAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsAccountId'");
            }
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["networkInterfacePermissionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkInterfacePermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkInterfacePermission resources.
 */
export interface NetworkInterfacePermissionState {
    /**
     * The Amazon Web Services account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * The ID of the network interface.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * ENI permission ID.
     */
    networkInterfacePermissionId?: pulumi.Input<string>;
    /**
     * The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
     */
    permission?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ec2.NetworkInterfacePermissionTimeouts>;
}

/**
 * The set of arguments for constructing a NetworkInterfacePermission resource.
 */
export interface NetworkInterfacePermissionArgs {
    /**
     * The Amazon Web Services account ID.
     */
    awsAccountId: pulumi.Input<string>;
    /**
     * The ID of the network interface.
     */
    networkInterfaceId: pulumi.Input<string>;
    /**
     * The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
     */
    permission: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ec2.NetworkInterfacePermissionTimeouts>;
}
