// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allocates (reserves) a CIDR from an IPAM address pool, preventing usage by IPAM. Only works for private IPv4.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const exampleVpcIpam = new aws.ec2.VpcIpam("exampleVpcIpam", {operatingRegions: [{
 *     regionName: current.then(current => current.name),
 * }]});
 * const exampleVpcIpamPool = new aws.ec2.VpcIpamPool("exampleVpcIpamPool", {
 *     addressFamily: "ipv4",
 *     ipamScopeId: exampleVpcIpam.privateDefaultScopeId,
 *     locale: current.then(current => current.name),
 * });
 * const exampleVpcIpamPoolCidr = new aws.ec2.VpcIpamPoolCidr("exampleVpcIpamPoolCidr", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     cidr: "172.2.0.0/16",
 * });
 * const exampleVpcIpamPoolCidrAllocation = new aws.ec2.VpcIpamPoolCidrAllocation("exampleVpcIpamPoolCidrAllocation", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     cidr: "172.2.0.0/24",
 * }, {
 *     dependsOn: [exampleVpcIpamPoolCidr],
 * });
 * ```
 *
 * With the `disallowedCidrs` attribute:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const exampleVpcIpam = new aws.ec2.VpcIpam("exampleVpcIpam", {operatingRegions: [{
 *     regionName: current.then(current => current.name),
 * }]});
 * const exampleVpcIpamPool = new aws.ec2.VpcIpamPool("exampleVpcIpamPool", {
 *     addressFamily: "ipv4",
 *     ipamScopeId: exampleVpcIpam.privateDefaultScopeId,
 *     locale: current.then(current => current.name),
 * });
 * const exampleVpcIpamPoolCidr = new aws.ec2.VpcIpamPoolCidr("exampleVpcIpamPoolCidr", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     cidr: "172.2.0.0/16",
 * });
 * const exampleVpcIpamPoolCidrAllocation = new aws.ec2.VpcIpamPoolCidrAllocation("exampleVpcIpamPoolCidrAllocation", {
 *     ipamPoolId: exampleVpcIpamPool.id,
 *     netmaskLength: 28,
 *     disallowedCidrs: ["172.2.0.0/28"],
 * }, {
 *     dependsOn: [exampleVpcIpamPoolCidr],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import IPAM allocations using the allocation `id` and `pool id`, separated by `_`. For example:
 *
 * ```sh
 *  $ pulumi import aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation example ipam-pool-alloc-0dc6d196509c049ba8b549ff99f639736_ipam-pool-07cfb559e0921fcbe
 * ```
 */
export class VpcIpamPoolCidrAllocation extends pulumi.CustomResource {
    /**
     * Get an existing VpcIpamPoolCidrAllocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcIpamPoolCidrAllocationState, opts?: pulumi.CustomResourceOptions): VpcIpamPoolCidrAllocation {
        return new VpcIpamPoolCidrAllocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation';

    /**
     * Returns true if the given object is an instance of VpcIpamPoolCidrAllocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcIpamPoolCidrAllocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcIpamPoolCidrAllocation.__pulumiType;
    }

    /**
     * The CIDR you want to assign to the pool.
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * The description for the allocation.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Exclude a particular CIDR range from being returned by the pool.
     */
    public readonly disallowedCidrs!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly ipamPoolAllocationId!: pulumi.Output<string>;
    /**
     * The ID of the pool to which you want to assign a CIDR.
     */
    public readonly ipamPoolId!: pulumi.Output<string>;
    /**
     * The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
     */
    public readonly netmaskLength!: pulumi.Output<number | undefined>;
    /**
     * The ID of the resource.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * The owner of the resource.
     */
    public /*out*/ readonly resourceOwner!: pulumi.Output<string>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly resourceType!: pulumi.Output<string>;

    /**
     * Create a VpcIpamPoolCidrAllocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcIpamPoolCidrAllocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcIpamPoolCidrAllocationArgs | VpcIpamPoolCidrAllocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcIpamPoolCidrAllocationState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disallowedCidrs"] = state ? state.disallowedCidrs : undefined;
            resourceInputs["ipamPoolAllocationId"] = state ? state.ipamPoolAllocationId : undefined;
            resourceInputs["ipamPoolId"] = state ? state.ipamPoolId : undefined;
            resourceInputs["netmaskLength"] = state ? state.netmaskLength : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceOwner"] = state ? state.resourceOwner : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
        } else {
            const args = argsOrState as VpcIpamPoolCidrAllocationArgs | undefined;
            if ((!args || args.ipamPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipamPoolId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disallowedCidrs"] = args ? args.disallowedCidrs : undefined;
            resourceInputs["ipamPoolId"] = args ? args.ipamPoolId : undefined;
            resourceInputs["netmaskLength"] = args ? args.netmaskLength : undefined;
            resourceInputs["ipamPoolAllocationId"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["resourceOwner"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcIpamPoolCidrAllocation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcIpamPoolCidrAllocation resources.
 */
export interface VpcIpamPoolCidrAllocationState {
    /**
     * The CIDR you want to assign to the pool.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The description for the allocation.
     */
    description?: pulumi.Input<string>;
    /**
     * Exclude a particular CIDR range from being returned by the pool.
     */
    disallowedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    ipamPoolAllocationId?: pulumi.Input<string>;
    /**
     * The ID of the pool to which you want to assign a CIDR.
     */
    ipamPoolId?: pulumi.Input<string>;
    /**
     * The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
     */
    netmaskLength?: pulumi.Input<number>;
    /**
     * The ID of the resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The owner of the resource.
     */
    resourceOwner?: pulumi.Input<string>;
    /**
     * The type of the resource.
     */
    resourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcIpamPoolCidrAllocation resource.
 */
export interface VpcIpamPoolCidrAllocationArgs {
    /**
     * The CIDR you want to assign to the pool.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The description for the allocation.
     */
    description?: pulumi.Input<string>;
    /**
     * Exclude a particular CIDR range from being returned by the pool.
     */
    disallowedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the pool to which you want to assign a CIDR.
     */
    ipamPoolId: pulumi.Input<string>;
    /**
     * The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.
     */
    netmaskLength?: pulumi.Input<number>;
}
