// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages a Site-to-Site VPN connection. A Site-to-Site VPN connection is an Internet Protocol security (IPsec) VPN connection between a VPC and an on-premises network.
 * Any new Site-to-Site VPN connection that you create is an [AWS VPN connection](https://docs.aws.amazon.com/vpn/latest/s2svpn/vpn-categories.html).
 *
 * > **Note:** The CIDR blocks in the arguments `tunnel1InsideCidr` and `tunnel2InsideCidr` must have a prefix of /30 and be a part of a specific range.
 * [Read more about this in the AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnTunnelOptionsSpecification.html).
 *
 * ## Example Usage
 * ### EC2 Transit Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleTransitGateway = new aws.ec2transitgateway.TransitGateway("exampleTransitGateway", {});
 * const exampleCustomerGateway = new aws.ec2.CustomerGateway("exampleCustomerGateway", {
 *     bgpAsn: "65000",
 *     ipAddress: "172.0.0.1",
 *     type: "ipsec.1",
 * });
 * const exampleVpnConnection = new aws.ec2.VpnConnection("exampleVpnConnection", {
 *     customerGatewayId: exampleCustomerGateway.id,
 *     transitGatewayId: exampleTransitGateway.id,
 *     type: exampleCustomerGateway.type,
 * });
 * ```
 * ### Virtual Private Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const vpc = new aws.ec2.Vpc("vpc", {cidrBlock: "10.0.0.0/16"});
 * const vpnGateway = new aws.ec2.VpnGateway("vpnGateway", {vpcId: vpc.id});
 * const customerGateway = new aws.ec2.CustomerGateway("customerGateway", {
 *     bgpAsn: "65000",
 *     ipAddress: "172.0.0.1",
 *     type: "ipsec.1",
 * });
 * const main = new aws.ec2.VpnConnection("main", {
 *     vpnGatewayId: vpnGateway.id,
 *     customerGatewayId: customerGateway.id,
 *     type: "ipsec.1",
 *     staticRoutesOnly: true,
 * });
 * ```
 * ### AWS Site to Site Private VPN
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleGateway = new aws.directconnect.Gateway("exampleGateway", {amazonSideAsn: "64512"});
 * const exampleTransitGateway = new aws.ec2transitgateway.TransitGateway("exampleTransitGateway", {
 *     amazonSideAsn: 64513,
 *     description: "example_ipsec_vpn_example",
 *     transitGatewayCidrBlocks: ["10.0.0.0/24"],
 * });
 * const exampleCustomerGateway = new aws.ec2.CustomerGateway("exampleCustomerGateway", {
 *     bgpAsn: "64514",
 *     ipAddress: "10.0.0.1",
 *     type: "ipsec.1",
 *     tags: {
 *         Name: "example_ipsec_vpn_example",
 *     },
 * });
 * const exampleGatewayAssociation = new aws.directconnect.GatewayAssociation("exampleGatewayAssociation", {
 *     dxGatewayId: exampleGateway.id,
 *     associatedGatewayId: exampleTransitGateway.id,
 *     allowedPrefixes: ["10.0.0.0/8"],
 * });
 * const exampleDirectConnectGatewayAttachment = aws.ec2transitgateway.getDirectConnectGatewayAttachmentOutput({
 *     transitGatewayId: exampleTransitGateway.id,
 *     dxGatewayId: exampleGateway.id,
 * });
 * const exampleVpnConnection = new aws.ec2.VpnConnection("exampleVpnConnection", {
 *     customerGatewayId: exampleCustomerGateway.id,
 *     outsideIpAddressType: "PrivateIpv4",
 *     transitGatewayId: exampleTransitGateway.id,
 *     transportTransitGatewayAttachmentId: exampleDirectConnectGatewayAttachment.apply(exampleDirectConnectGatewayAttachment => exampleDirectConnectGatewayAttachment.id),
 *     type: "ipsec.1",
 *     tags: {
 *         Name: "example_ipsec_vpn_example",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * VPN Connections can be imported using the `vpn connection id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/vpnConnection:VpnConnection testvpnconnection vpn-40f41529
 * ```
 */
export class VpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnConnectionState, opts?: pulumi.CustomResourceOptions): VpnConnection {
        return new VpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/vpnConnection:VpnConnection';

    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the VPN Connection.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ARN of the core network.
     */
    public /*out*/ readonly coreNetworkArn!: pulumi.Output<string>;
    /**
     * The ARN of the core network attachment.
     */
    public /*out*/ readonly coreNetworkAttachmentArn!: pulumi.Output<string>;
    /**
     * The configuration information for the VPN connection's customer gateway (in the native XML format).
     */
    public /*out*/ readonly customerGatewayConfiguration!: pulumi.Output<string>;
    /**
     * The ID of the customer gateway.
     */
    public readonly customerGatewayId!: pulumi.Output<string>;
    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     */
    public readonly enableAcceleration!: pulumi.Output<boolean>;
    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    public readonly localIpv4NetworkCidr!: pulumi.Output<string>;
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    public readonly localIpv6NetworkCidr!: pulumi.Output<string>;
    /**
     * Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
     */
    public readonly outsideIpAddressType!: pulumi.Output<string>;
    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     */
    public readonly remoteIpv4NetworkCidr!: pulumi.Output<string>;
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    public readonly remoteIpv6NetworkCidr!: pulumi.Output<string>;
    /**
     * The static routes associated with the VPN connection. Detailed below.
     */
    public /*out*/ readonly routes!: pulumi.Output<outputs.ec2.VpnConnectionRoute[]>;
    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
     */
    public readonly staticRoutesOnly!: pulumi.Output<boolean>;
    /**
     * Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * When associated with an EC2 Transit Gateway (`transitGatewayId` argument), the attachment ID. See also the `aws.ec2.Tag` resource for tagging the EC2 Transit Gateway VPN Attachment.
     */
    public /*out*/ readonly transitGatewayAttachmentId!: pulumi.Output<string>;
    /**
     * The ID of the EC2 Transit Gateway.
     */
    public readonly transitGatewayId!: pulumi.Output<string | undefined>;
    /**
     * . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
     */
    public readonly transportTransitGatewayAttachmentId!: pulumi.Output<string | undefined>;
    /**
     * The public IP address of the first VPN tunnel.
     */
    public /*out*/ readonly tunnel1Address!: pulumi.Output<string>;
    /**
     * The bgp asn number of the first VPN tunnel.
     */
    public /*out*/ readonly tunnel1BgpAsn!: pulumi.Output<string>;
    /**
     * The bgp holdtime of the first VPN tunnel.
     */
    public /*out*/ readonly tunnel1BgpHoldtime!: pulumi.Output<number>;
    /**
     * The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
     */
    public /*out*/ readonly tunnel1CgwInsideAddress!: pulumi.Output<string>;
    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     */
    public readonly tunnel1DpdTimeoutAction!: pulumi.Output<string | undefined>;
    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     */
    public readonly tunnel1DpdTimeoutSeconds!: pulumi.Output<number | undefined>;
    /**
     * Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
     */
    public readonly tunnel1EnableTunnelLifecycleControl!: pulumi.Output<boolean | undefined>;
    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     */
    public readonly tunnel1IkeVersions!: pulumi.Output<string[] | undefined>;
    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     */
    public readonly tunnel1InsideCidr!: pulumi.Output<string>;
    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     */
    public readonly tunnel1InsideIpv6Cidr!: pulumi.Output<string>;
    /**
     * Options for logging VPN tunnel activity. See Log Options below for more details.
     */
    public readonly tunnel1LogOptions!: pulumi.Output<outputs.ec2.VpnConnectionTunnel1LogOptions>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are ` 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    public readonly tunnel1Phase1DhGroupNumbers!: pulumi.Output<number[] | undefined>;
    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    public readonly tunnel1Phase1EncryptionAlgorithms!: pulumi.Output<string[] | undefined>;
    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    public readonly tunnel1Phase1IntegrityAlgorithms!: pulumi.Output<string[] | undefined>;
    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     */
    public readonly tunnel1Phase1LifetimeSeconds!: pulumi.Output<number | undefined>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    public readonly tunnel1Phase2DhGroupNumbers!: pulumi.Output<number[] | undefined>;
    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    public readonly tunnel1Phase2EncryptionAlgorithms!: pulumi.Output<string[] | undefined>;
    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    public readonly tunnel1Phase2IntegrityAlgorithms!: pulumi.Output<string[] | undefined>;
    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     */
    public readonly tunnel1Phase2LifetimeSeconds!: pulumi.Output<number | undefined>;
    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     */
    public readonly tunnel1PresharedKey!: pulumi.Output<string>;
    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     */
    public readonly tunnel1RekeyFuzzPercentage!: pulumi.Output<number | undefined>;
    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
     */
    public readonly tunnel1RekeyMarginTimeSeconds!: pulumi.Output<number | undefined>;
    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     */
    public readonly tunnel1ReplayWindowSize!: pulumi.Output<number | undefined>;
    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     */
    public readonly tunnel1StartupAction!: pulumi.Output<string | undefined>;
    /**
     * The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
     */
    public /*out*/ readonly tunnel1VgwInsideAddress!: pulumi.Output<string>;
    /**
     * The public IP address of the second VPN tunnel.
     */
    public /*out*/ readonly tunnel2Address!: pulumi.Output<string>;
    /**
     * The bgp asn number of the second VPN tunnel.
     */
    public /*out*/ readonly tunnel2BgpAsn!: pulumi.Output<string>;
    /**
     * The bgp holdtime of the second VPN tunnel.
     */
    public /*out*/ readonly tunnel2BgpHoldtime!: pulumi.Output<number>;
    /**
     * The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
     */
    public /*out*/ readonly tunnel2CgwInsideAddress!: pulumi.Output<string>;
    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     */
    public readonly tunnel2DpdTimeoutAction!: pulumi.Output<string | undefined>;
    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     */
    public readonly tunnel2DpdTimeoutSeconds!: pulumi.Output<number | undefined>;
    /**
     * Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
     */
    public readonly tunnel2EnableTunnelLifecycleControl!: pulumi.Output<boolean | undefined>;
    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     */
    public readonly tunnel2IkeVersions!: pulumi.Output<string[] | undefined>;
    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     */
    public readonly tunnel2InsideCidr!: pulumi.Output<string>;
    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     */
    public readonly tunnel2InsideIpv6Cidr!: pulumi.Output<string>;
    /**
     * Options for logging VPN tunnel activity. See Log Options below for more details.
     */
    public readonly tunnel2LogOptions!: pulumi.Output<outputs.ec2.VpnConnectionTunnel2LogOptions>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are ` 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    public readonly tunnel2Phase1DhGroupNumbers!: pulumi.Output<number[] | undefined>;
    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    public readonly tunnel2Phase1EncryptionAlgorithms!: pulumi.Output<string[] | undefined>;
    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    public readonly tunnel2Phase1IntegrityAlgorithms!: pulumi.Output<string[] | undefined>;
    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     */
    public readonly tunnel2Phase1LifetimeSeconds!: pulumi.Output<number | undefined>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    public readonly tunnel2Phase2DhGroupNumbers!: pulumi.Output<number[] | undefined>;
    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    public readonly tunnel2Phase2EncryptionAlgorithms!: pulumi.Output<string[] | undefined>;
    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    public readonly tunnel2Phase2IntegrityAlgorithms!: pulumi.Output<string[] | undefined>;
    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     */
    public readonly tunnel2Phase2LifetimeSeconds!: pulumi.Output<number | undefined>;
    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     */
    public readonly tunnel2PresharedKey!: pulumi.Output<string>;
    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     */
    public readonly tunnel2RekeyFuzzPercentage!: pulumi.Output<number | undefined>;
    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
     */
    public readonly tunnel2RekeyMarginTimeSeconds!: pulumi.Output<number | undefined>;
    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     */
    public readonly tunnel2ReplayWindowSize!: pulumi.Output<number | undefined>;
    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     */
    public readonly tunnel2StartupAction!: pulumi.Output<string | undefined>;
    /**
     * The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
     */
    public /*out*/ readonly tunnel2VgwInsideAddress!: pulumi.Output<string>;
    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     */
    public readonly tunnelInsideIpVersion!: pulumi.Output<string>;
    /**
     * The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Telemetry for the VPN tunnels. Detailed below.
     */
    public /*out*/ readonly vgwTelemetries!: pulumi.Output<outputs.ec2.VpnConnectionVgwTelemetry[]>;
    /**
     * The ID of the Virtual Private Gateway.
     */
    public readonly vpnGatewayId!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnConnectionArgs | VpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnConnectionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["coreNetworkArn"] = state ? state.coreNetworkArn : undefined;
            resourceInputs["coreNetworkAttachmentArn"] = state ? state.coreNetworkAttachmentArn : undefined;
            resourceInputs["customerGatewayConfiguration"] = state ? state.customerGatewayConfiguration : undefined;
            resourceInputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            resourceInputs["enableAcceleration"] = state ? state.enableAcceleration : undefined;
            resourceInputs["localIpv4NetworkCidr"] = state ? state.localIpv4NetworkCidr : undefined;
            resourceInputs["localIpv6NetworkCidr"] = state ? state.localIpv6NetworkCidr : undefined;
            resourceInputs["outsideIpAddressType"] = state ? state.outsideIpAddressType : undefined;
            resourceInputs["remoteIpv4NetworkCidr"] = state ? state.remoteIpv4NetworkCidr : undefined;
            resourceInputs["remoteIpv6NetworkCidr"] = state ? state.remoteIpv6NetworkCidr : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["staticRoutesOnly"] = state ? state.staticRoutesOnly : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["transitGatewayAttachmentId"] = state ? state.transitGatewayAttachmentId : undefined;
            resourceInputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
            resourceInputs["transportTransitGatewayAttachmentId"] = state ? state.transportTransitGatewayAttachmentId : undefined;
            resourceInputs["tunnel1Address"] = state ? state.tunnel1Address : undefined;
            resourceInputs["tunnel1BgpAsn"] = state ? state.tunnel1BgpAsn : undefined;
            resourceInputs["tunnel1BgpHoldtime"] = state ? state.tunnel1BgpHoldtime : undefined;
            resourceInputs["tunnel1CgwInsideAddress"] = state ? state.tunnel1CgwInsideAddress : undefined;
            resourceInputs["tunnel1DpdTimeoutAction"] = state ? state.tunnel1DpdTimeoutAction : undefined;
            resourceInputs["tunnel1DpdTimeoutSeconds"] = state ? state.tunnel1DpdTimeoutSeconds : undefined;
            resourceInputs["tunnel1EnableTunnelLifecycleControl"] = state ? state.tunnel1EnableTunnelLifecycleControl : undefined;
            resourceInputs["tunnel1IkeVersions"] = state ? state.tunnel1IkeVersions : undefined;
            resourceInputs["tunnel1InsideCidr"] = state ? state.tunnel1InsideCidr : undefined;
            resourceInputs["tunnel1InsideIpv6Cidr"] = state ? state.tunnel1InsideIpv6Cidr : undefined;
            resourceInputs["tunnel1LogOptions"] = state ? state.tunnel1LogOptions : undefined;
            resourceInputs["tunnel1Phase1DhGroupNumbers"] = state ? state.tunnel1Phase1DhGroupNumbers : undefined;
            resourceInputs["tunnel1Phase1EncryptionAlgorithms"] = state ? state.tunnel1Phase1EncryptionAlgorithms : undefined;
            resourceInputs["tunnel1Phase1IntegrityAlgorithms"] = state ? state.tunnel1Phase1IntegrityAlgorithms : undefined;
            resourceInputs["tunnel1Phase1LifetimeSeconds"] = state ? state.tunnel1Phase1LifetimeSeconds : undefined;
            resourceInputs["tunnel1Phase2DhGroupNumbers"] = state ? state.tunnel1Phase2DhGroupNumbers : undefined;
            resourceInputs["tunnel1Phase2EncryptionAlgorithms"] = state ? state.tunnel1Phase2EncryptionAlgorithms : undefined;
            resourceInputs["tunnel1Phase2IntegrityAlgorithms"] = state ? state.tunnel1Phase2IntegrityAlgorithms : undefined;
            resourceInputs["tunnel1Phase2LifetimeSeconds"] = state ? state.tunnel1Phase2LifetimeSeconds : undefined;
            resourceInputs["tunnel1PresharedKey"] = state ? state.tunnel1PresharedKey : undefined;
            resourceInputs["tunnel1RekeyFuzzPercentage"] = state ? state.tunnel1RekeyFuzzPercentage : undefined;
            resourceInputs["tunnel1RekeyMarginTimeSeconds"] = state ? state.tunnel1RekeyMarginTimeSeconds : undefined;
            resourceInputs["tunnel1ReplayWindowSize"] = state ? state.tunnel1ReplayWindowSize : undefined;
            resourceInputs["tunnel1StartupAction"] = state ? state.tunnel1StartupAction : undefined;
            resourceInputs["tunnel1VgwInsideAddress"] = state ? state.tunnel1VgwInsideAddress : undefined;
            resourceInputs["tunnel2Address"] = state ? state.tunnel2Address : undefined;
            resourceInputs["tunnel2BgpAsn"] = state ? state.tunnel2BgpAsn : undefined;
            resourceInputs["tunnel2BgpHoldtime"] = state ? state.tunnel2BgpHoldtime : undefined;
            resourceInputs["tunnel2CgwInsideAddress"] = state ? state.tunnel2CgwInsideAddress : undefined;
            resourceInputs["tunnel2DpdTimeoutAction"] = state ? state.tunnel2DpdTimeoutAction : undefined;
            resourceInputs["tunnel2DpdTimeoutSeconds"] = state ? state.tunnel2DpdTimeoutSeconds : undefined;
            resourceInputs["tunnel2EnableTunnelLifecycleControl"] = state ? state.tunnel2EnableTunnelLifecycleControl : undefined;
            resourceInputs["tunnel2IkeVersions"] = state ? state.tunnel2IkeVersions : undefined;
            resourceInputs["tunnel2InsideCidr"] = state ? state.tunnel2InsideCidr : undefined;
            resourceInputs["tunnel2InsideIpv6Cidr"] = state ? state.tunnel2InsideIpv6Cidr : undefined;
            resourceInputs["tunnel2LogOptions"] = state ? state.tunnel2LogOptions : undefined;
            resourceInputs["tunnel2Phase1DhGroupNumbers"] = state ? state.tunnel2Phase1DhGroupNumbers : undefined;
            resourceInputs["tunnel2Phase1EncryptionAlgorithms"] = state ? state.tunnel2Phase1EncryptionAlgorithms : undefined;
            resourceInputs["tunnel2Phase1IntegrityAlgorithms"] = state ? state.tunnel2Phase1IntegrityAlgorithms : undefined;
            resourceInputs["tunnel2Phase1LifetimeSeconds"] = state ? state.tunnel2Phase1LifetimeSeconds : undefined;
            resourceInputs["tunnel2Phase2DhGroupNumbers"] = state ? state.tunnel2Phase2DhGroupNumbers : undefined;
            resourceInputs["tunnel2Phase2EncryptionAlgorithms"] = state ? state.tunnel2Phase2EncryptionAlgorithms : undefined;
            resourceInputs["tunnel2Phase2IntegrityAlgorithms"] = state ? state.tunnel2Phase2IntegrityAlgorithms : undefined;
            resourceInputs["tunnel2Phase2LifetimeSeconds"] = state ? state.tunnel2Phase2LifetimeSeconds : undefined;
            resourceInputs["tunnel2PresharedKey"] = state ? state.tunnel2PresharedKey : undefined;
            resourceInputs["tunnel2RekeyFuzzPercentage"] = state ? state.tunnel2RekeyFuzzPercentage : undefined;
            resourceInputs["tunnel2RekeyMarginTimeSeconds"] = state ? state.tunnel2RekeyMarginTimeSeconds : undefined;
            resourceInputs["tunnel2ReplayWindowSize"] = state ? state.tunnel2ReplayWindowSize : undefined;
            resourceInputs["tunnel2StartupAction"] = state ? state.tunnel2StartupAction : undefined;
            resourceInputs["tunnel2VgwInsideAddress"] = state ? state.tunnel2VgwInsideAddress : undefined;
            resourceInputs["tunnelInsideIpVersion"] = state ? state.tunnelInsideIpVersion : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vgwTelemetries"] = state ? state.vgwTelemetries : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as VpnConnectionArgs | undefined;
            if ((!args || args.customerGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerGatewayId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            resourceInputs["enableAcceleration"] = args ? args.enableAcceleration : undefined;
            resourceInputs["localIpv4NetworkCidr"] = args ? args.localIpv4NetworkCidr : undefined;
            resourceInputs["localIpv6NetworkCidr"] = args ? args.localIpv6NetworkCidr : undefined;
            resourceInputs["outsideIpAddressType"] = args ? args.outsideIpAddressType : undefined;
            resourceInputs["remoteIpv4NetworkCidr"] = args ? args.remoteIpv4NetworkCidr : undefined;
            resourceInputs["remoteIpv6NetworkCidr"] = args ? args.remoteIpv6NetworkCidr : undefined;
            resourceInputs["staticRoutesOnly"] = args ? args.staticRoutesOnly : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            resourceInputs["transportTransitGatewayAttachmentId"] = args ? args.transportTransitGatewayAttachmentId : undefined;
            resourceInputs["tunnel1DpdTimeoutAction"] = args ? args.tunnel1DpdTimeoutAction : undefined;
            resourceInputs["tunnel1DpdTimeoutSeconds"] = args ? args.tunnel1DpdTimeoutSeconds : undefined;
            resourceInputs["tunnel1EnableTunnelLifecycleControl"] = args ? args.tunnel1EnableTunnelLifecycleControl : undefined;
            resourceInputs["tunnel1IkeVersions"] = args ? args.tunnel1IkeVersions : undefined;
            resourceInputs["tunnel1InsideCidr"] = args ? args.tunnel1InsideCidr : undefined;
            resourceInputs["tunnel1InsideIpv6Cidr"] = args ? args.tunnel1InsideIpv6Cidr : undefined;
            resourceInputs["tunnel1LogOptions"] = args ? args.tunnel1LogOptions : undefined;
            resourceInputs["tunnel1Phase1DhGroupNumbers"] = args ? args.tunnel1Phase1DhGroupNumbers : undefined;
            resourceInputs["tunnel1Phase1EncryptionAlgorithms"] = args ? args.tunnel1Phase1EncryptionAlgorithms : undefined;
            resourceInputs["tunnel1Phase1IntegrityAlgorithms"] = args ? args.tunnel1Phase1IntegrityAlgorithms : undefined;
            resourceInputs["tunnel1Phase1LifetimeSeconds"] = args ? args.tunnel1Phase1LifetimeSeconds : undefined;
            resourceInputs["tunnel1Phase2DhGroupNumbers"] = args ? args.tunnel1Phase2DhGroupNumbers : undefined;
            resourceInputs["tunnel1Phase2EncryptionAlgorithms"] = args ? args.tunnel1Phase2EncryptionAlgorithms : undefined;
            resourceInputs["tunnel1Phase2IntegrityAlgorithms"] = args ? args.tunnel1Phase2IntegrityAlgorithms : undefined;
            resourceInputs["tunnel1Phase2LifetimeSeconds"] = args ? args.tunnel1Phase2LifetimeSeconds : undefined;
            resourceInputs["tunnel1PresharedKey"] = args?.tunnel1PresharedKey ? pulumi.secret(args.tunnel1PresharedKey) : undefined;
            resourceInputs["tunnel1RekeyFuzzPercentage"] = args ? args.tunnel1RekeyFuzzPercentage : undefined;
            resourceInputs["tunnel1RekeyMarginTimeSeconds"] = args ? args.tunnel1RekeyMarginTimeSeconds : undefined;
            resourceInputs["tunnel1ReplayWindowSize"] = args ? args.tunnel1ReplayWindowSize : undefined;
            resourceInputs["tunnel1StartupAction"] = args ? args.tunnel1StartupAction : undefined;
            resourceInputs["tunnel2DpdTimeoutAction"] = args ? args.tunnel2DpdTimeoutAction : undefined;
            resourceInputs["tunnel2DpdTimeoutSeconds"] = args ? args.tunnel2DpdTimeoutSeconds : undefined;
            resourceInputs["tunnel2EnableTunnelLifecycleControl"] = args ? args.tunnel2EnableTunnelLifecycleControl : undefined;
            resourceInputs["tunnel2IkeVersions"] = args ? args.tunnel2IkeVersions : undefined;
            resourceInputs["tunnel2InsideCidr"] = args ? args.tunnel2InsideCidr : undefined;
            resourceInputs["tunnel2InsideIpv6Cidr"] = args ? args.tunnel2InsideIpv6Cidr : undefined;
            resourceInputs["tunnel2LogOptions"] = args ? args.tunnel2LogOptions : undefined;
            resourceInputs["tunnel2Phase1DhGroupNumbers"] = args ? args.tunnel2Phase1DhGroupNumbers : undefined;
            resourceInputs["tunnel2Phase1EncryptionAlgorithms"] = args ? args.tunnel2Phase1EncryptionAlgorithms : undefined;
            resourceInputs["tunnel2Phase1IntegrityAlgorithms"] = args ? args.tunnel2Phase1IntegrityAlgorithms : undefined;
            resourceInputs["tunnel2Phase1LifetimeSeconds"] = args ? args.tunnel2Phase1LifetimeSeconds : undefined;
            resourceInputs["tunnel2Phase2DhGroupNumbers"] = args ? args.tunnel2Phase2DhGroupNumbers : undefined;
            resourceInputs["tunnel2Phase2EncryptionAlgorithms"] = args ? args.tunnel2Phase2EncryptionAlgorithms : undefined;
            resourceInputs["tunnel2Phase2IntegrityAlgorithms"] = args ? args.tunnel2Phase2IntegrityAlgorithms : undefined;
            resourceInputs["tunnel2Phase2LifetimeSeconds"] = args ? args.tunnel2Phase2LifetimeSeconds : undefined;
            resourceInputs["tunnel2PresharedKey"] = args?.tunnel2PresharedKey ? pulumi.secret(args.tunnel2PresharedKey) : undefined;
            resourceInputs["tunnel2RekeyFuzzPercentage"] = args ? args.tunnel2RekeyFuzzPercentage : undefined;
            resourceInputs["tunnel2RekeyMarginTimeSeconds"] = args ? args.tunnel2RekeyMarginTimeSeconds : undefined;
            resourceInputs["tunnel2ReplayWindowSize"] = args ? args.tunnel2ReplayWindowSize : undefined;
            resourceInputs["tunnel2StartupAction"] = args ? args.tunnel2StartupAction : undefined;
            resourceInputs["tunnelInsideIpVersion"] = args ? args.tunnelInsideIpVersion : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["coreNetworkArn"] = undefined /*out*/;
            resourceInputs["coreNetworkAttachmentArn"] = undefined /*out*/;
            resourceInputs["customerGatewayConfiguration"] = undefined /*out*/;
            resourceInputs["routes"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["transitGatewayAttachmentId"] = undefined /*out*/;
            resourceInputs["tunnel1Address"] = undefined /*out*/;
            resourceInputs["tunnel1BgpAsn"] = undefined /*out*/;
            resourceInputs["tunnel1BgpHoldtime"] = undefined /*out*/;
            resourceInputs["tunnel1CgwInsideAddress"] = undefined /*out*/;
            resourceInputs["tunnel1VgwInsideAddress"] = undefined /*out*/;
            resourceInputs["tunnel2Address"] = undefined /*out*/;
            resourceInputs["tunnel2BgpAsn"] = undefined /*out*/;
            resourceInputs["tunnel2BgpHoldtime"] = undefined /*out*/;
            resourceInputs["tunnel2CgwInsideAddress"] = undefined /*out*/;
            resourceInputs["tunnel2VgwInsideAddress"] = undefined /*out*/;
            resourceInputs["vgwTelemetries"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["customerGatewayConfiguration", "tunnel1PresharedKey", "tunnel2PresharedKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpnConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnConnection resources.
 */
export interface VpnConnectionState {
    /**
     * Amazon Resource Name (ARN) of the VPN Connection.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ARN of the core network.
     */
    coreNetworkArn?: pulumi.Input<string>;
    /**
     * The ARN of the core network attachment.
     */
    coreNetworkAttachmentArn?: pulumi.Input<string>;
    /**
     * The configuration information for the VPN connection's customer gateway (in the native XML format).
     */
    customerGatewayConfiguration?: pulumi.Input<string>;
    /**
     * The ID of the customer gateway.
     */
    customerGatewayId?: pulumi.Input<string>;
    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     */
    enableAcceleration?: pulumi.Input<boolean>;
    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    localIpv4NetworkCidr?: pulumi.Input<string>;
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    localIpv6NetworkCidr?: pulumi.Input<string>;
    /**
     * Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
     */
    outsideIpAddressType?: pulumi.Input<string>;
    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     */
    remoteIpv4NetworkCidr?: pulumi.Input<string>;
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    remoteIpv6NetworkCidr?: pulumi.Input<string>;
    /**
     * The static routes associated with the VPN connection. Detailed below.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.ec2.VpnConnectionRoute>[]>;
    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
     */
    staticRoutesOnly?: pulumi.Input<boolean>;
    /**
     * Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * When associated with an EC2 Transit Gateway (`transitGatewayId` argument), the attachment ID. See also the `aws.ec2.Tag` resource for tagging the EC2 Transit Gateway VPN Attachment.
     */
    transitGatewayAttachmentId?: pulumi.Input<string>;
    /**
     * The ID of the EC2 Transit Gateway.
     */
    transitGatewayId?: pulumi.Input<string>;
    /**
     * . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
     */
    transportTransitGatewayAttachmentId?: pulumi.Input<string>;
    /**
     * The public IP address of the first VPN tunnel.
     */
    tunnel1Address?: pulumi.Input<string>;
    /**
     * The bgp asn number of the first VPN tunnel.
     */
    tunnel1BgpAsn?: pulumi.Input<string>;
    /**
     * The bgp holdtime of the first VPN tunnel.
     */
    tunnel1BgpHoldtime?: pulumi.Input<number>;
    /**
     * The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
     */
    tunnel1CgwInsideAddress?: pulumi.Input<string>;
    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     */
    tunnel1DpdTimeoutAction?: pulumi.Input<string>;
    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     */
    tunnel1DpdTimeoutSeconds?: pulumi.Input<number>;
    /**
     * Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
     */
    tunnel1EnableTunnelLifecycleControl?: pulumi.Input<boolean>;
    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     */
    tunnel1IkeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     */
    tunnel1InsideCidr?: pulumi.Input<string>;
    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     */
    tunnel1InsideIpv6Cidr?: pulumi.Input<string>;
    /**
     * Options for logging VPN tunnel activity. See Log Options below for more details.
     */
    tunnel1LogOptions?: pulumi.Input<inputs.ec2.VpnConnectionTunnel1LogOptions>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are ` 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    tunnel1Phase1DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    tunnel1Phase1EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    tunnel1Phase1IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     */
    tunnel1Phase1LifetimeSeconds?: pulumi.Input<number>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    tunnel1Phase2DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    tunnel1Phase2EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    tunnel1Phase2IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     */
    tunnel1Phase2LifetimeSeconds?: pulumi.Input<number>;
    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     */
    tunnel1PresharedKey?: pulumi.Input<string>;
    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     */
    tunnel1RekeyFuzzPercentage?: pulumi.Input<number>;
    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
     */
    tunnel1RekeyMarginTimeSeconds?: pulumi.Input<number>;
    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     */
    tunnel1ReplayWindowSize?: pulumi.Input<number>;
    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     */
    tunnel1StartupAction?: pulumi.Input<string>;
    /**
     * The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
     */
    tunnel1VgwInsideAddress?: pulumi.Input<string>;
    /**
     * The public IP address of the second VPN tunnel.
     */
    tunnel2Address?: pulumi.Input<string>;
    /**
     * The bgp asn number of the second VPN tunnel.
     */
    tunnel2BgpAsn?: pulumi.Input<string>;
    /**
     * The bgp holdtime of the second VPN tunnel.
     */
    tunnel2BgpHoldtime?: pulumi.Input<number>;
    /**
     * The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
     */
    tunnel2CgwInsideAddress?: pulumi.Input<string>;
    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     */
    tunnel2DpdTimeoutAction?: pulumi.Input<string>;
    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     */
    tunnel2DpdTimeoutSeconds?: pulumi.Input<number>;
    /**
     * Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
     */
    tunnel2EnableTunnelLifecycleControl?: pulumi.Input<boolean>;
    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     */
    tunnel2IkeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     */
    tunnel2InsideCidr?: pulumi.Input<string>;
    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     */
    tunnel2InsideIpv6Cidr?: pulumi.Input<string>;
    /**
     * Options for logging VPN tunnel activity. See Log Options below for more details.
     */
    tunnel2LogOptions?: pulumi.Input<inputs.ec2.VpnConnectionTunnel2LogOptions>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are ` 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    tunnel2Phase1DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    tunnel2Phase1EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    tunnel2Phase1IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     */
    tunnel2Phase1LifetimeSeconds?: pulumi.Input<number>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    tunnel2Phase2DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    tunnel2Phase2EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    tunnel2Phase2IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     */
    tunnel2Phase2LifetimeSeconds?: pulumi.Input<number>;
    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     */
    tunnel2PresharedKey?: pulumi.Input<string>;
    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     */
    tunnel2RekeyFuzzPercentage?: pulumi.Input<number>;
    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
     */
    tunnel2RekeyMarginTimeSeconds?: pulumi.Input<number>;
    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     */
    tunnel2ReplayWindowSize?: pulumi.Input<number>;
    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     */
    tunnel2StartupAction?: pulumi.Input<string>;
    /**
     * The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
     */
    tunnel2VgwInsideAddress?: pulumi.Input<string>;
    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     */
    tunnelInsideIpVersion?: pulumi.Input<string>;
    /**
     * The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
     */
    type?: pulumi.Input<string>;
    /**
     * Telemetry for the VPN tunnels. Detailed below.
     */
    vgwTelemetries?: pulumi.Input<pulumi.Input<inputs.ec2.VpnConnectionVgwTelemetry>[]>;
    /**
     * The ID of the Virtual Private Gateway.
     */
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnConnection resource.
 */
export interface VpnConnectionArgs {
    /**
     * The ID of the customer gateway.
     */
    customerGatewayId: pulumi.Input<string>;
    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     */
    enableAcceleration?: pulumi.Input<boolean>;
    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    localIpv4NetworkCidr?: pulumi.Input<string>;
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    localIpv6NetworkCidr?: pulumi.Input<string>;
    /**
     * Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
     */
    outsideIpAddressType?: pulumi.Input<string>;
    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     */
    remoteIpv4NetworkCidr?: pulumi.Input<string>;
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     */
    remoteIpv6NetworkCidr?: pulumi.Input<string>;
    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
     */
    staticRoutesOnly?: pulumi.Input<boolean>;
    /**
     * Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the EC2 Transit Gateway.
     */
    transitGatewayId?: pulumi.Input<string>;
    /**
     * . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
     */
    transportTransitGatewayAttachmentId?: pulumi.Input<string>;
    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     */
    tunnel1DpdTimeoutAction?: pulumi.Input<string>;
    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     */
    tunnel1DpdTimeoutSeconds?: pulumi.Input<number>;
    /**
     * Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
     */
    tunnel1EnableTunnelLifecycleControl?: pulumi.Input<boolean>;
    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     */
    tunnel1IkeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     */
    tunnel1InsideCidr?: pulumi.Input<string>;
    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     */
    tunnel1InsideIpv6Cidr?: pulumi.Input<string>;
    /**
     * Options for logging VPN tunnel activity. See Log Options below for more details.
     */
    tunnel1LogOptions?: pulumi.Input<inputs.ec2.VpnConnectionTunnel1LogOptions>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are ` 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    tunnel1Phase1DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    tunnel1Phase1EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    tunnel1Phase1IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     */
    tunnel1Phase1LifetimeSeconds?: pulumi.Input<number>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    tunnel1Phase2DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    tunnel1Phase2EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    tunnel1Phase2IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     */
    tunnel1Phase2LifetimeSeconds?: pulumi.Input<number>;
    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     */
    tunnel1PresharedKey?: pulumi.Input<string>;
    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     */
    tunnel1RekeyFuzzPercentage?: pulumi.Input<number>;
    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
     */
    tunnel1RekeyMarginTimeSeconds?: pulumi.Input<number>;
    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     */
    tunnel1ReplayWindowSize?: pulumi.Input<number>;
    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     */
    tunnel1StartupAction?: pulumi.Input<string>;
    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     */
    tunnel2DpdTimeoutAction?: pulumi.Input<string>;
    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     */
    tunnel2DpdTimeoutSeconds?: pulumi.Input<number>;
    /**
     * Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
     */
    tunnel2EnableTunnelLifecycleControl?: pulumi.Input<boolean>;
    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     */
    tunnel2IkeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     */
    tunnel2InsideCidr?: pulumi.Input<string>;
    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     */
    tunnel2InsideIpv6Cidr?: pulumi.Input<string>;
    /**
     * Options for logging VPN tunnel activity. See Log Options below for more details.
     */
    tunnel2LogOptions?: pulumi.Input<inputs.ec2.VpnConnectionTunnel2LogOptions>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are ` 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    tunnel2Phase1DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    tunnel2Phase1EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    tunnel2Phase1IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     */
    tunnel2Phase1LifetimeSeconds?: pulumi.Input<number>;
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     */
    tunnel2Phase2DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     */
    tunnel2Phase2EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     */
    tunnel2Phase2IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     */
    tunnel2Phase2LifetimeSeconds?: pulumi.Input<number>;
    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     */
    tunnel2PresharedKey?: pulumi.Input<string>;
    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     */
    tunnel2RekeyFuzzPercentage?: pulumi.Input<number>;
    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
     */
    tunnel2RekeyMarginTimeSeconds?: pulumi.Input<number>;
    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     */
    tunnel2ReplayWindowSize?: pulumi.Input<number>;
    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     */
    tunnel2StartupAction?: pulumi.Input<string>;
    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     */
    tunnelInsideIpVersion?: pulumi.Input<string>;
    /**
     * The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
     */
    type: pulumi.Input<string>;
    /**
     * The ID of the Virtual Private Gateway.
     */
    vpnGatewayId?: pulumi.Input<string>;
}
