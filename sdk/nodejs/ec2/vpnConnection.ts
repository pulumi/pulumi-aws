// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class VpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnConnectionState, opts?: pulumi.CustomResourceOptions): VpnConnection {
        return new VpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/vpnConnection:VpnConnection';

    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly coreNetworkArn!: pulumi.Output<string>;
    public /*out*/ readonly coreNetworkAttachmentArn!: pulumi.Output<string>;
    public /*out*/ readonly customerGatewayConfiguration!: pulumi.Output<string>;
    public readonly customerGatewayId!: pulumi.Output<string>;
    public readonly enableAcceleration!: pulumi.Output<boolean>;
    public readonly localIpv4NetworkCidr!: pulumi.Output<string>;
    public readonly localIpv6NetworkCidr!: pulumi.Output<string>;
    public readonly outsideIpAddressType!: pulumi.Output<string>;
    public readonly remoteIpv4NetworkCidr!: pulumi.Output<string>;
    public readonly remoteIpv6NetworkCidr!: pulumi.Output<string>;
    public /*out*/ readonly routes!: pulumi.Output<outputs.ec2.VpnConnectionRoute[]>;
    public readonly staticRoutesOnly!: pulumi.Output<boolean>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly transitGatewayAttachmentId!: pulumi.Output<string>;
    public readonly transitGatewayId!: pulumi.Output<string | undefined>;
    public readonly transportTransitGatewayAttachmentId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly tunnel1Address!: pulumi.Output<string>;
    public /*out*/ readonly tunnel1BgpAsn!: pulumi.Output<string>;
    public /*out*/ readonly tunnel1BgpHoldtime!: pulumi.Output<number>;
    public /*out*/ readonly tunnel1CgwInsideAddress!: pulumi.Output<string>;
    public readonly tunnel1DpdTimeoutAction!: pulumi.Output<string | undefined>;
    public readonly tunnel1DpdTimeoutSeconds!: pulumi.Output<number | undefined>;
    public readonly tunnel1IkeVersions!: pulumi.Output<string[] | undefined>;
    public readonly tunnel1InsideCidr!: pulumi.Output<string>;
    public readonly tunnel1InsideIpv6Cidr!: pulumi.Output<string>;
    public readonly tunnel1LogOptions!: pulumi.Output<outputs.ec2.VpnConnectionTunnel1LogOptions>;
    public readonly tunnel1Phase1DhGroupNumbers!: pulumi.Output<number[] | undefined>;
    public readonly tunnel1Phase1EncryptionAlgorithms!: pulumi.Output<string[] | undefined>;
    public readonly tunnel1Phase1IntegrityAlgorithms!: pulumi.Output<string[] | undefined>;
    public readonly tunnel1Phase1LifetimeSeconds!: pulumi.Output<number | undefined>;
    public readonly tunnel1Phase2DhGroupNumbers!: pulumi.Output<number[] | undefined>;
    public readonly tunnel1Phase2EncryptionAlgorithms!: pulumi.Output<string[] | undefined>;
    public readonly tunnel1Phase2IntegrityAlgorithms!: pulumi.Output<string[] | undefined>;
    public readonly tunnel1Phase2LifetimeSeconds!: pulumi.Output<number | undefined>;
    public readonly tunnel1PresharedKey!: pulumi.Output<string>;
    public readonly tunnel1RekeyFuzzPercentage!: pulumi.Output<number | undefined>;
    public readonly tunnel1RekeyMarginTimeSeconds!: pulumi.Output<number | undefined>;
    public readonly tunnel1ReplayWindowSize!: pulumi.Output<number | undefined>;
    public readonly tunnel1StartupAction!: pulumi.Output<string | undefined>;
    public /*out*/ readonly tunnel1VgwInsideAddress!: pulumi.Output<string>;
    public /*out*/ readonly tunnel2Address!: pulumi.Output<string>;
    public /*out*/ readonly tunnel2BgpAsn!: pulumi.Output<string>;
    public /*out*/ readonly tunnel2BgpHoldtime!: pulumi.Output<number>;
    public /*out*/ readonly tunnel2CgwInsideAddress!: pulumi.Output<string>;
    public readonly tunnel2DpdTimeoutAction!: pulumi.Output<string | undefined>;
    public readonly tunnel2DpdTimeoutSeconds!: pulumi.Output<number | undefined>;
    public readonly tunnel2IkeVersions!: pulumi.Output<string[] | undefined>;
    public readonly tunnel2InsideCidr!: pulumi.Output<string>;
    public readonly tunnel2InsideIpv6Cidr!: pulumi.Output<string>;
    public readonly tunnel2LogOptions!: pulumi.Output<outputs.ec2.VpnConnectionTunnel2LogOptions>;
    public readonly tunnel2Phase1DhGroupNumbers!: pulumi.Output<number[] | undefined>;
    public readonly tunnel2Phase1EncryptionAlgorithms!: pulumi.Output<string[] | undefined>;
    public readonly tunnel2Phase1IntegrityAlgorithms!: pulumi.Output<string[] | undefined>;
    public readonly tunnel2Phase1LifetimeSeconds!: pulumi.Output<number | undefined>;
    public readonly tunnel2Phase2DhGroupNumbers!: pulumi.Output<number[] | undefined>;
    public readonly tunnel2Phase2EncryptionAlgorithms!: pulumi.Output<string[] | undefined>;
    public readonly tunnel2Phase2IntegrityAlgorithms!: pulumi.Output<string[] | undefined>;
    public readonly tunnel2Phase2LifetimeSeconds!: pulumi.Output<number | undefined>;
    public readonly tunnel2PresharedKey!: pulumi.Output<string>;
    public readonly tunnel2RekeyFuzzPercentage!: pulumi.Output<number | undefined>;
    public readonly tunnel2RekeyMarginTimeSeconds!: pulumi.Output<number | undefined>;
    public readonly tunnel2ReplayWindowSize!: pulumi.Output<number | undefined>;
    public readonly tunnel2StartupAction!: pulumi.Output<string | undefined>;
    public /*out*/ readonly tunnel2VgwInsideAddress!: pulumi.Output<string>;
    public readonly tunnelInsideIpVersion!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly vgwTelemetries!: pulumi.Output<outputs.ec2.VpnConnectionVgwTelemetry[]>;
    public readonly vpnGatewayId!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnConnectionArgs | VpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnConnectionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["coreNetworkArn"] = state ? state.coreNetworkArn : undefined;
            resourceInputs["coreNetworkAttachmentArn"] = state ? state.coreNetworkAttachmentArn : undefined;
            resourceInputs["customerGatewayConfiguration"] = state ? state.customerGatewayConfiguration : undefined;
            resourceInputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            resourceInputs["enableAcceleration"] = state ? state.enableAcceleration : undefined;
            resourceInputs["localIpv4NetworkCidr"] = state ? state.localIpv4NetworkCidr : undefined;
            resourceInputs["localIpv6NetworkCidr"] = state ? state.localIpv6NetworkCidr : undefined;
            resourceInputs["outsideIpAddressType"] = state ? state.outsideIpAddressType : undefined;
            resourceInputs["remoteIpv4NetworkCidr"] = state ? state.remoteIpv4NetworkCidr : undefined;
            resourceInputs["remoteIpv6NetworkCidr"] = state ? state.remoteIpv6NetworkCidr : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["staticRoutesOnly"] = state ? state.staticRoutesOnly : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["transitGatewayAttachmentId"] = state ? state.transitGatewayAttachmentId : undefined;
            resourceInputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
            resourceInputs["transportTransitGatewayAttachmentId"] = state ? state.transportTransitGatewayAttachmentId : undefined;
            resourceInputs["tunnel1Address"] = state ? state.tunnel1Address : undefined;
            resourceInputs["tunnel1BgpAsn"] = state ? state.tunnel1BgpAsn : undefined;
            resourceInputs["tunnel1BgpHoldtime"] = state ? state.tunnel1BgpHoldtime : undefined;
            resourceInputs["tunnel1CgwInsideAddress"] = state ? state.tunnel1CgwInsideAddress : undefined;
            resourceInputs["tunnel1DpdTimeoutAction"] = state ? state.tunnel1DpdTimeoutAction : undefined;
            resourceInputs["tunnel1DpdTimeoutSeconds"] = state ? state.tunnel1DpdTimeoutSeconds : undefined;
            resourceInputs["tunnel1IkeVersions"] = state ? state.tunnel1IkeVersions : undefined;
            resourceInputs["tunnel1InsideCidr"] = state ? state.tunnel1InsideCidr : undefined;
            resourceInputs["tunnel1InsideIpv6Cidr"] = state ? state.tunnel1InsideIpv6Cidr : undefined;
            resourceInputs["tunnel1LogOptions"] = state ? state.tunnel1LogOptions : undefined;
            resourceInputs["tunnel1Phase1DhGroupNumbers"] = state ? state.tunnel1Phase1DhGroupNumbers : undefined;
            resourceInputs["tunnel1Phase1EncryptionAlgorithms"] = state ? state.tunnel1Phase1EncryptionAlgorithms : undefined;
            resourceInputs["tunnel1Phase1IntegrityAlgorithms"] = state ? state.tunnel1Phase1IntegrityAlgorithms : undefined;
            resourceInputs["tunnel1Phase1LifetimeSeconds"] = state ? state.tunnel1Phase1LifetimeSeconds : undefined;
            resourceInputs["tunnel1Phase2DhGroupNumbers"] = state ? state.tunnel1Phase2DhGroupNumbers : undefined;
            resourceInputs["tunnel1Phase2EncryptionAlgorithms"] = state ? state.tunnel1Phase2EncryptionAlgorithms : undefined;
            resourceInputs["tunnel1Phase2IntegrityAlgorithms"] = state ? state.tunnel1Phase2IntegrityAlgorithms : undefined;
            resourceInputs["tunnel1Phase2LifetimeSeconds"] = state ? state.tunnel1Phase2LifetimeSeconds : undefined;
            resourceInputs["tunnel1PresharedKey"] = state ? state.tunnel1PresharedKey : undefined;
            resourceInputs["tunnel1RekeyFuzzPercentage"] = state ? state.tunnel1RekeyFuzzPercentage : undefined;
            resourceInputs["tunnel1RekeyMarginTimeSeconds"] = state ? state.tunnel1RekeyMarginTimeSeconds : undefined;
            resourceInputs["tunnel1ReplayWindowSize"] = state ? state.tunnel1ReplayWindowSize : undefined;
            resourceInputs["tunnel1StartupAction"] = state ? state.tunnel1StartupAction : undefined;
            resourceInputs["tunnel1VgwInsideAddress"] = state ? state.tunnel1VgwInsideAddress : undefined;
            resourceInputs["tunnel2Address"] = state ? state.tunnel2Address : undefined;
            resourceInputs["tunnel2BgpAsn"] = state ? state.tunnel2BgpAsn : undefined;
            resourceInputs["tunnel2BgpHoldtime"] = state ? state.tunnel2BgpHoldtime : undefined;
            resourceInputs["tunnel2CgwInsideAddress"] = state ? state.tunnel2CgwInsideAddress : undefined;
            resourceInputs["tunnel2DpdTimeoutAction"] = state ? state.tunnel2DpdTimeoutAction : undefined;
            resourceInputs["tunnel2DpdTimeoutSeconds"] = state ? state.tunnel2DpdTimeoutSeconds : undefined;
            resourceInputs["tunnel2IkeVersions"] = state ? state.tunnel2IkeVersions : undefined;
            resourceInputs["tunnel2InsideCidr"] = state ? state.tunnel2InsideCidr : undefined;
            resourceInputs["tunnel2InsideIpv6Cidr"] = state ? state.tunnel2InsideIpv6Cidr : undefined;
            resourceInputs["tunnel2LogOptions"] = state ? state.tunnel2LogOptions : undefined;
            resourceInputs["tunnel2Phase1DhGroupNumbers"] = state ? state.tunnel2Phase1DhGroupNumbers : undefined;
            resourceInputs["tunnel2Phase1EncryptionAlgorithms"] = state ? state.tunnel2Phase1EncryptionAlgorithms : undefined;
            resourceInputs["tunnel2Phase1IntegrityAlgorithms"] = state ? state.tunnel2Phase1IntegrityAlgorithms : undefined;
            resourceInputs["tunnel2Phase1LifetimeSeconds"] = state ? state.tunnel2Phase1LifetimeSeconds : undefined;
            resourceInputs["tunnel2Phase2DhGroupNumbers"] = state ? state.tunnel2Phase2DhGroupNumbers : undefined;
            resourceInputs["tunnel2Phase2EncryptionAlgorithms"] = state ? state.tunnel2Phase2EncryptionAlgorithms : undefined;
            resourceInputs["tunnel2Phase2IntegrityAlgorithms"] = state ? state.tunnel2Phase2IntegrityAlgorithms : undefined;
            resourceInputs["tunnel2Phase2LifetimeSeconds"] = state ? state.tunnel2Phase2LifetimeSeconds : undefined;
            resourceInputs["tunnel2PresharedKey"] = state ? state.tunnel2PresharedKey : undefined;
            resourceInputs["tunnel2RekeyFuzzPercentage"] = state ? state.tunnel2RekeyFuzzPercentage : undefined;
            resourceInputs["tunnel2RekeyMarginTimeSeconds"] = state ? state.tunnel2RekeyMarginTimeSeconds : undefined;
            resourceInputs["tunnel2ReplayWindowSize"] = state ? state.tunnel2ReplayWindowSize : undefined;
            resourceInputs["tunnel2StartupAction"] = state ? state.tunnel2StartupAction : undefined;
            resourceInputs["tunnel2VgwInsideAddress"] = state ? state.tunnel2VgwInsideAddress : undefined;
            resourceInputs["tunnelInsideIpVersion"] = state ? state.tunnelInsideIpVersion : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vgwTelemetries"] = state ? state.vgwTelemetries : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as VpnConnectionArgs | undefined;
            if ((!args || args.customerGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerGatewayId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            resourceInputs["enableAcceleration"] = args ? args.enableAcceleration : undefined;
            resourceInputs["localIpv4NetworkCidr"] = args ? args.localIpv4NetworkCidr : undefined;
            resourceInputs["localIpv6NetworkCidr"] = args ? args.localIpv6NetworkCidr : undefined;
            resourceInputs["outsideIpAddressType"] = args ? args.outsideIpAddressType : undefined;
            resourceInputs["remoteIpv4NetworkCidr"] = args ? args.remoteIpv4NetworkCidr : undefined;
            resourceInputs["remoteIpv6NetworkCidr"] = args ? args.remoteIpv6NetworkCidr : undefined;
            resourceInputs["staticRoutesOnly"] = args ? args.staticRoutesOnly : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            resourceInputs["transportTransitGatewayAttachmentId"] = args ? args.transportTransitGatewayAttachmentId : undefined;
            resourceInputs["tunnel1DpdTimeoutAction"] = args ? args.tunnel1DpdTimeoutAction : undefined;
            resourceInputs["tunnel1DpdTimeoutSeconds"] = args ? args.tunnel1DpdTimeoutSeconds : undefined;
            resourceInputs["tunnel1IkeVersions"] = args ? args.tunnel1IkeVersions : undefined;
            resourceInputs["tunnel1InsideCidr"] = args ? args.tunnel1InsideCidr : undefined;
            resourceInputs["tunnel1InsideIpv6Cidr"] = args ? args.tunnel1InsideIpv6Cidr : undefined;
            resourceInputs["tunnel1LogOptions"] = args ? args.tunnel1LogOptions : undefined;
            resourceInputs["tunnel1Phase1DhGroupNumbers"] = args ? args.tunnel1Phase1DhGroupNumbers : undefined;
            resourceInputs["tunnel1Phase1EncryptionAlgorithms"] = args ? args.tunnel1Phase1EncryptionAlgorithms : undefined;
            resourceInputs["tunnel1Phase1IntegrityAlgorithms"] = args ? args.tunnel1Phase1IntegrityAlgorithms : undefined;
            resourceInputs["tunnel1Phase1LifetimeSeconds"] = args ? args.tunnel1Phase1LifetimeSeconds : undefined;
            resourceInputs["tunnel1Phase2DhGroupNumbers"] = args ? args.tunnel1Phase2DhGroupNumbers : undefined;
            resourceInputs["tunnel1Phase2EncryptionAlgorithms"] = args ? args.tunnel1Phase2EncryptionAlgorithms : undefined;
            resourceInputs["tunnel1Phase2IntegrityAlgorithms"] = args ? args.tunnel1Phase2IntegrityAlgorithms : undefined;
            resourceInputs["tunnel1Phase2LifetimeSeconds"] = args ? args.tunnel1Phase2LifetimeSeconds : undefined;
            resourceInputs["tunnel1PresharedKey"] = args?.tunnel1PresharedKey ? pulumi.secret(args.tunnel1PresharedKey) : undefined;
            resourceInputs["tunnel1RekeyFuzzPercentage"] = args ? args.tunnel1RekeyFuzzPercentage : undefined;
            resourceInputs["tunnel1RekeyMarginTimeSeconds"] = args ? args.tunnel1RekeyMarginTimeSeconds : undefined;
            resourceInputs["tunnel1ReplayWindowSize"] = args ? args.tunnel1ReplayWindowSize : undefined;
            resourceInputs["tunnel1StartupAction"] = args ? args.tunnel1StartupAction : undefined;
            resourceInputs["tunnel2DpdTimeoutAction"] = args ? args.tunnel2DpdTimeoutAction : undefined;
            resourceInputs["tunnel2DpdTimeoutSeconds"] = args ? args.tunnel2DpdTimeoutSeconds : undefined;
            resourceInputs["tunnel2IkeVersions"] = args ? args.tunnel2IkeVersions : undefined;
            resourceInputs["tunnel2InsideCidr"] = args ? args.tunnel2InsideCidr : undefined;
            resourceInputs["tunnel2InsideIpv6Cidr"] = args ? args.tunnel2InsideIpv6Cidr : undefined;
            resourceInputs["tunnel2LogOptions"] = args ? args.tunnel2LogOptions : undefined;
            resourceInputs["tunnel2Phase1DhGroupNumbers"] = args ? args.tunnel2Phase1DhGroupNumbers : undefined;
            resourceInputs["tunnel2Phase1EncryptionAlgorithms"] = args ? args.tunnel2Phase1EncryptionAlgorithms : undefined;
            resourceInputs["tunnel2Phase1IntegrityAlgorithms"] = args ? args.tunnel2Phase1IntegrityAlgorithms : undefined;
            resourceInputs["tunnel2Phase1LifetimeSeconds"] = args ? args.tunnel2Phase1LifetimeSeconds : undefined;
            resourceInputs["tunnel2Phase2DhGroupNumbers"] = args ? args.tunnel2Phase2DhGroupNumbers : undefined;
            resourceInputs["tunnel2Phase2EncryptionAlgorithms"] = args ? args.tunnel2Phase2EncryptionAlgorithms : undefined;
            resourceInputs["tunnel2Phase2IntegrityAlgorithms"] = args ? args.tunnel2Phase2IntegrityAlgorithms : undefined;
            resourceInputs["tunnel2Phase2LifetimeSeconds"] = args ? args.tunnel2Phase2LifetimeSeconds : undefined;
            resourceInputs["tunnel2PresharedKey"] = args?.tunnel2PresharedKey ? pulumi.secret(args.tunnel2PresharedKey) : undefined;
            resourceInputs["tunnel2RekeyFuzzPercentage"] = args ? args.tunnel2RekeyFuzzPercentage : undefined;
            resourceInputs["tunnel2RekeyMarginTimeSeconds"] = args ? args.tunnel2RekeyMarginTimeSeconds : undefined;
            resourceInputs["tunnel2ReplayWindowSize"] = args ? args.tunnel2ReplayWindowSize : undefined;
            resourceInputs["tunnel2StartupAction"] = args ? args.tunnel2StartupAction : undefined;
            resourceInputs["tunnelInsideIpVersion"] = args ? args.tunnelInsideIpVersion : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["coreNetworkArn"] = undefined /*out*/;
            resourceInputs["coreNetworkAttachmentArn"] = undefined /*out*/;
            resourceInputs["customerGatewayConfiguration"] = undefined /*out*/;
            resourceInputs["routes"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["transitGatewayAttachmentId"] = undefined /*out*/;
            resourceInputs["tunnel1Address"] = undefined /*out*/;
            resourceInputs["tunnel1BgpAsn"] = undefined /*out*/;
            resourceInputs["tunnel1BgpHoldtime"] = undefined /*out*/;
            resourceInputs["tunnel1CgwInsideAddress"] = undefined /*out*/;
            resourceInputs["tunnel1VgwInsideAddress"] = undefined /*out*/;
            resourceInputs["tunnel2Address"] = undefined /*out*/;
            resourceInputs["tunnel2BgpAsn"] = undefined /*out*/;
            resourceInputs["tunnel2BgpHoldtime"] = undefined /*out*/;
            resourceInputs["tunnel2CgwInsideAddress"] = undefined /*out*/;
            resourceInputs["tunnel2VgwInsideAddress"] = undefined /*out*/;
            resourceInputs["vgwTelemetries"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["customerGatewayConfiguration", "tunnel1PresharedKey", "tunnel2PresharedKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpnConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnConnection resources.
 */
export interface VpnConnectionState {
    arn?: pulumi.Input<string>;
    coreNetworkArn?: pulumi.Input<string>;
    coreNetworkAttachmentArn?: pulumi.Input<string>;
    customerGatewayConfiguration?: pulumi.Input<string>;
    customerGatewayId?: pulumi.Input<string>;
    enableAcceleration?: pulumi.Input<boolean>;
    localIpv4NetworkCidr?: pulumi.Input<string>;
    localIpv6NetworkCidr?: pulumi.Input<string>;
    outsideIpAddressType?: pulumi.Input<string>;
    remoteIpv4NetworkCidr?: pulumi.Input<string>;
    remoteIpv6NetworkCidr?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.ec2.VpnConnectionRoute>[]>;
    staticRoutesOnly?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitGatewayAttachmentId?: pulumi.Input<string>;
    transitGatewayId?: pulumi.Input<string>;
    transportTransitGatewayAttachmentId?: pulumi.Input<string>;
    tunnel1Address?: pulumi.Input<string>;
    tunnel1BgpAsn?: pulumi.Input<string>;
    tunnel1BgpHoldtime?: pulumi.Input<number>;
    tunnel1CgwInsideAddress?: pulumi.Input<string>;
    tunnel1DpdTimeoutAction?: pulumi.Input<string>;
    tunnel1DpdTimeoutSeconds?: pulumi.Input<number>;
    tunnel1IkeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1InsideCidr?: pulumi.Input<string>;
    tunnel1InsideIpv6Cidr?: pulumi.Input<string>;
    tunnel1LogOptions?: pulumi.Input<inputs.ec2.VpnConnectionTunnel1LogOptions>;
    tunnel1Phase1DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    tunnel1Phase1EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1Phase1IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1Phase1LifetimeSeconds?: pulumi.Input<number>;
    tunnel1Phase2DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    tunnel1Phase2EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1Phase2IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1Phase2LifetimeSeconds?: pulumi.Input<number>;
    tunnel1PresharedKey?: pulumi.Input<string>;
    tunnel1RekeyFuzzPercentage?: pulumi.Input<number>;
    tunnel1RekeyMarginTimeSeconds?: pulumi.Input<number>;
    tunnel1ReplayWindowSize?: pulumi.Input<number>;
    tunnel1StartupAction?: pulumi.Input<string>;
    tunnel1VgwInsideAddress?: pulumi.Input<string>;
    tunnel2Address?: pulumi.Input<string>;
    tunnel2BgpAsn?: pulumi.Input<string>;
    tunnel2BgpHoldtime?: pulumi.Input<number>;
    tunnel2CgwInsideAddress?: pulumi.Input<string>;
    tunnel2DpdTimeoutAction?: pulumi.Input<string>;
    tunnel2DpdTimeoutSeconds?: pulumi.Input<number>;
    tunnel2IkeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2InsideCidr?: pulumi.Input<string>;
    tunnel2InsideIpv6Cidr?: pulumi.Input<string>;
    tunnel2LogOptions?: pulumi.Input<inputs.ec2.VpnConnectionTunnel2LogOptions>;
    tunnel2Phase1DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    tunnel2Phase1EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2Phase1IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2Phase1LifetimeSeconds?: pulumi.Input<number>;
    tunnel2Phase2DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    tunnel2Phase2EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2Phase2IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2Phase2LifetimeSeconds?: pulumi.Input<number>;
    tunnel2PresharedKey?: pulumi.Input<string>;
    tunnel2RekeyFuzzPercentage?: pulumi.Input<number>;
    tunnel2RekeyMarginTimeSeconds?: pulumi.Input<number>;
    tunnel2ReplayWindowSize?: pulumi.Input<number>;
    tunnel2StartupAction?: pulumi.Input<string>;
    tunnel2VgwInsideAddress?: pulumi.Input<string>;
    tunnelInsideIpVersion?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vgwTelemetries?: pulumi.Input<pulumi.Input<inputs.ec2.VpnConnectionVgwTelemetry>[]>;
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnConnection resource.
 */
export interface VpnConnectionArgs {
    customerGatewayId: pulumi.Input<string>;
    enableAcceleration?: pulumi.Input<boolean>;
    localIpv4NetworkCidr?: pulumi.Input<string>;
    localIpv6NetworkCidr?: pulumi.Input<string>;
    outsideIpAddressType?: pulumi.Input<string>;
    remoteIpv4NetworkCidr?: pulumi.Input<string>;
    remoteIpv6NetworkCidr?: pulumi.Input<string>;
    staticRoutesOnly?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitGatewayId?: pulumi.Input<string>;
    transportTransitGatewayAttachmentId?: pulumi.Input<string>;
    tunnel1DpdTimeoutAction?: pulumi.Input<string>;
    tunnel1DpdTimeoutSeconds?: pulumi.Input<number>;
    tunnel1IkeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1InsideCidr?: pulumi.Input<string>;
    tunnel1InsideIpv6Cidr?: pulumi.Input<string>;
    tunnel1LogOptions?: pulumi.Input<inputs.ec2.VpnConnectionTunnel1LogOptions>;
    tunnel1Phase1DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    tunnel1Phase1EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1Phase1IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1Phase1LifetimeSeconds?: pulumi.Input<number>;
    tunnel1Phase2DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    tunnel1Phase2EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1Phase2IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel1Phase2LifetimeSeconds?: pulumi.Input<number>;
    tunnel1PresharedKey?: pulumi.Input<string>;
    tunnel1RekeyFuzzPercentage?: pulumi.Input<number>;
    tunnel1RekeyMarginTimeSeconds?: pulumi.Input<number>;
    tunnel1ReplayWindowSize?: pulumi.Input<number>;
    tunnel1StartupAction?: pulumi.Input<string>;
    tunnel2DpdTimeoutAction?: pulumi.Input<string>;
    tunnel2DpdTimeoutSeconds?: pulumi.Input<number>;
    tunnel2IkeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2InsideCidr?: pulumi.Input<string>;
    tunnel2InsideIpv6Cidr?: pulumi.Input<string>;
    tunnel2LogOptions?: pulumi.Input<inputs.ec2.VpnConnectionTunnel2LogOptions>;
    tunnel2Phase1DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    tunnel2Phase1EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2Phase1IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2Phase1LifetimeSeconds?: pulumi.Input<number>;
    tunnel2Phase2DhGroupNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    tunnel2Phase2EncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2Phase2IntegrityAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    tunnel2Phase2LifetimeSeconds?: pulumi.Input<number>;
    tunnel2PresharedKey?: pulumi.Input<string>;
    tunnel2RekeyFuzzPercentage?: pulumi.Input<number>;
    tunnel2RekeyMarginTimeSeconds?: pulumi.Input<number>;
    tunnel2ReplayWindowSize?: pulumi.Input<number>;
    tunnel2StartupAction?: pulumi.Input<string>;
    tunnelInsideIpVersion?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vpnGatewayId?: pulumi.Input<string>;
}
