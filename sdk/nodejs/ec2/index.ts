// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AmiArgs, AmiState } from "./ami";
export type Ami = import("./ami").Ami;
export const Ami: typeof import("./ami").Ami = null as any;
utilities.lazyLoad(exports, ["Ami"], () => require("./ami"));

export { AmiCopyArgs, AmiCopyState } from "./amiCopy";
export type AmiCopy = import("./amiCopy").AmiCopy;
export const AmiCopy: typeof import("./amiCopy").AmiCopy = null as any;
utilities.lazyLoad(exports, ["AmiCopy"], () => require("./amiCopy"));

export { AmiFromInstanceArgs, AmiFromInstanceState } from "./amiFromInstance";
export type AmiFromInstance = import("./amiFromInstance").AmiFromInstance;
export const AmiFromInstance: typeof import("./amiFromInstance").AmiFromInstance = null as any;
utilities.lazyLoad(exports, ["AmiFromInstance"], () => require("./amiFromInstance"));

export { AmiLaunchPermissionArgs, AmiLaunchPermissionState } from "./amiLaunchPermission";
export type AmiLaunchPermission = import("./amiLaunchPermission").AmiLaunchPermission;
export const AmiLaunchPermission: typeof import("./amiLaunchPermission").AmiLaunchPermission = null as any;
utilities.lazyLoad(exports, ["AmiLaunchPermission"], () => require("./amiLaunchPermission"));

export { AvailabilityZoneGroupArgs, AvailabilityZoneGroupState } from "./availabilityZoneGroup";
export type AvailabilityZoneGroup = import("./availabilityZoneGroup").AvailabilityZoneGroup;
export const AvailabilityZoneGroup: typeof import("./availabilityZoneGroup").AvailabilityZoneGroup = null as any;
utilities.lazyLoad(exports, ["AvailabilityZoneGroup"], () => require("./availabilityZoneGroup"));

export { CapacityReservationArgs, CapacityReservationState } from "./capacityReservation";
export type CapacityReservation = import("./capacityReservation").CapacityReservation;
export const CapacityReservation: typeof import("./capacityReservation").CapacityReservation = null as any;
utilities.lazyLoad(exports, ["CapacityReservation"], () => require("./capacityReservation"));

export { CarrierGatewayArgs, CarrierGatewayState } from "./carrierGateway";
export type CarrierGateway = import("./carrierGateway").CarrierGateway;
export const CarrierGateway: typeof import("./carrierGateway").CarrierGateway = null as any;
utilities.lazyLoad(exports, ["CarrierGateway"], () => require("./carrierGateway"));

export { CustomerGatewayArgs, CustomerGatewayState } from "./customerGateway";
export type CustomerGateway = import("./customerGateway").CustomerGateway;
export const CustomerGateway: typeof import("./customerGateway").CustomerGateway = null as any;
utilities.lazyLoad(exports, ["CustomerGateway"], () => require("./customerGateway"));

export { DedicatedHostArgs, DedicatedHostState } from "./dedicatedHost";
export type DedicatedHost = import("./dedicatedHost").DedicatedHost;
export const DedicatedHost: typeof import("./dedicatedHost").DedicatedHost = null as any;
utilities.lazyLoad(exports, ["DedicatedHost"], () => require("./dedicatedHost"));

export { DefaultNetworkAclArgs, DefaultNetworkAclState } from "./defaultNetworkAcl";
export type DefaultNetworkAcl = import("./defaultNetworkAcl").DefaultNetworkAcl;
export const DefaultNetworkAcl: typeof import("./defaultNetworkAcl").DefaultNetworkAcl = null as any;
utilities.lazyLoad(exports, ["DefaultNetworkAcl"], () => require("./defaultNetworkAcl"));

export { DefaultRouteTableArgs, DefaultRouteTableState } from "./defaultRouteTable";
export type DefaultRouteTable = import("./defaultRouteTable").DefaultRouteTable;
export const DefaultRouteTable: typeof import("./defaultRouteTable").DefaultRouteTable = null as any;
utilities.lazyLoad(exports, ["DefaultRouteTable"], () => require("./defaultRouteTable"));

export { DefaultSecurityGroupArgs, DefaultSecurityGroupState } from "./defaultSecurityGroup";
export type DefaultSecurityGroup = import("./defaultSecurityGroup").DefaultSecurityGroup;
export const DefaultSecurityGroup: typeof import("./defaultSecurityGroup").DefaultSecurityGroup = null as any;
utilities.lazyLoad(exports, ["DefaultSecurityGroup"], () => require("./defaultSecurityGroup"));

export { DefaultSubnetArgs, DefaultSubnetState } from "./defaultSubnet";
export type DefaultSubnet = import("./defaultSubnet").DefaultSubnet;
export const DefaultSubnet: typeof import("./defaultSubnet").DefaultSubnet = null as any;
utilities.lazyLoad(exports, ["DefaultSubnet"], () => require("./defaultSubnet"));

export { DefaultVpcArgs, DefaultVpcState } from "./defaultVpc";
export type DefaultVpc = import("./defaultVpc").DefaultVpc;
export const DefaultVpc: typeof import("./defaultVpc").DefaultVpc = null as any;
utilities.lazyLoad(exports, ["DefaultVpc"], () => require("./defaultVpc"));

export { DefaultVpcDhcpOptionsArgs, DefaultVpcDhcpOptionsState } from "./defaultVpcDhcpOptions";
export type DefaultVpcDhcpOptions = import("./defaultVpcDhcpOptions").DefaultVpcDhcpOptions;
export const DefaultVpcDhcpOptions: typeof import("./defaultVpcDhcpOptions").DefaultVpcDhcpOptions = null as any;
utilities.lazyLoad(exports, ["DefaultVpcDhcpOptions"], () => require("./defaultVpcDhcpOptions"));

export { EgressOnlyInternetGatewayArgs, EgressOnlyInternetGatewayState } from "./egressOnlyInternetGateway";
export type EgressOnlyInternetGateway = import("./egressOnlyInternetGateway").EgressOnlyInternetGateway;
export const EgressOnlyInternetGateway: typeof import("./egressOnlyInternetGateway").EgressOnlyInternetGateway = null as any;
utilities.lazyLoad(exports, ["EgressOnlyInternetGateway"], () => require("./egressOnlyInternetGateway"));

export { EipArgs, EipState } from "./eip";
export type Eip = import("./eip").Eip;
export const Eip: typeof import("./eip").Eip = null as any;
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));

export { EipAssociationArgs, EipAssociationState } from "./eipAssociation";
export type EipAssociation = import("./eipAssociation").EipAssociation;
export const EipAssociation: typeof import("./eipAssociation").EipAssociation = null as any;
utilities.lazyLoad(exports, ["EipAssociation"], () => require("./eipAssociation"));

export { FleetArgs, FleetState } from "./fleet";
export type Fleet = import("./fleet").Fleet;
export const Fleet: typeof import("./fleet").Fleet = null as any;
utilities.lazyLoad(exports, ["Fleet"], () => require("./fleet"));

export { FlowLogArgs, FlowLogState } from "./flowLog";
export type FlowLog = import("./flowLog").FlowLog;
export const FlowLog: typeof import("./flowLog").FlowLog = null as any;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));

export { GetAmiArgs, GetAmiResult, GetAmiOutputArgs } from "./getAmi";
export const getAmi: typeof import("./getAmi").getAmi = null as any;
export const getAmiOutput: typeof import("./getAmi").getAmiOutput = null as any;
utilities.lazyLoad(exports, ["getAmi","getAmiOutput"], () => require("./getAmi"));

export { GetAmiIdsArgs, GetAmiIdsResult, GetAmiIdsOutputArgs } from "./getAmiIds";
export const getAmiIds: typeof import("./getAmiIds").getAmiIds = null as any;
export const getAmiIdsOutput: typeof import("./getAmiIds").getAmiIdsOutput = null as any;
utilities.lazyLoad(exports, ["getAmiIds","getAmiIdsOutput"], () => require("./getAmiIds"));

export { GetCoipPoolArgs, GetCoipPoolResult, GetCoipPoolOutputArgs } from "./getCoipPool";
export const getCoipPool: typeof import("./getCoipPool").getCoipPool = null as any;
export const getCoipPoolOutput: typeof import("./getCoipPool").getCoipPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCoipPool","getCoipPoolOutput"], () => require("./getCoipPool"));

export { GetCoipPoolsArgs, GetCoipPoolsResult, GetCoipPoolsOutputArgs } from "./getCoipPools";
export const getCoipPools: typeof import("./getCoipPools").getCoipPools = null as any;
export const getCoipPoolsOutput: typeof import("./getCoipPools").getCoipPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getCoipPools","getCoipPoolsOutput"], () => require("./getCoipPools"));

export { GetCustomerGatewayArgs, GetCustomerGatewayResult, GetCustomerGatewayOutputArgs } from "./getCustomerGateway";
export const getCustomerGateway: typeof import("./getCustomerGateway").getCustomerGateway = null as any;
export const getCustomerGatewayOutput: typeof import("./getCustomerGateway").getCustomerGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerGateway","getCustomerGatewayOutput"], () => require("./getCustomerGateway"));

export { GetDedicatedHostArgs, GetDedicatedHostResult, GetDedicatedHostOutputArgs } from "./getDedicatedHost";
export const getDedicatedHost: typeof import("./getDedicatedHost").getDedicatedHost = null as any;
export const getDedicatedHostOutput: typeof import("./getDedicatedHost").getDedicatedHostOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedHost","getDedicatedHostOutput"], () => require("./getDedicatedHost"));

export { GetEipsArgs, GetEipsResult, GetEipsOutputArgs } from "./getEips";
export const getEips: typeof import("./getEips").getEips = null as any;
export const getEipsOutput: typeof import("./getEips").getEipsOutput = null as any;
utilities.lazyLoad(exports, ["getEips","getEipsOutput"], () => require("./getEips"));

export { GetElasticIpArgs, GetElasticIpResult, GetElasticIpOutputArgs } from "./getElasticIp";
export const getElasticIp: typeof import("./getElasticIp").getElasticIp = null as any;
export const getElasticIpOutput: typeof import("./getElasticIp").getElasticIpOutput = null as any;
utilities.lazyLoad(exports, ["getElasticIp","getElasticIpOutput"], () => require("./getElasticIp"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstanceTypeArgs, GetInstanceTypeResult, GetInstanceTypeOutputArgs } from "./getInstanceType";
export const getInstanceType: typeof import("./getInstanceType").getInstanceType = null as any;
export const getInstanceTypeOutput: typeof import("./getInstanceType").getInstanceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceType","getInstanceTypeOutput"], () => require("./getInstanceType"));

export { GetInstanceTypeOfferingArgs, GetInstanceTypeOfferingResult, GetInstanceTypeOfferingOutputArgs } from "./getInstanceTypeOffering";
export const getInstanceTypeOffering: typeof import("./getInstanceTypeOffering").getInstanceTypeOffering = null as any;
export const getInstanceTypeOfferingOutput: typeof import("./getInstanceTypeOffering").getInstanceTypeOfferingOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypeOffering","getInstanceTypeOfferingOutput"], () => require("./getInstanceTypeOffering"));

export { GetInstanceTypeOfferingsArgs, GetInstanceTypeOfferingsResult, GetInstanceTypeOfferingsOutputArgs } from "./getInstanceTypeOfferings";
export const getInstanceTypeOfferings: typeof import("./getInstanceTypeOfferings").getInstanceTypeOfferings = null as any;
export const getInstanceTypeOfferingsOutput: typeof import("./getInstanceTypeOfferings").getInstanceTypeOfferingsOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypeOfferings","getInstanceTypeOfferingsOutput"], () => require("./getInstanceTypeOfferings"));

export { GetInstanceTypesArgs, GetInstanceTypesResult, GetInstanceTypesOutputArgs } from "./getInstanceTypes";
export const getInstanceTypes: typeof import("./getInstanceTypes").getInstanceTypes = null as any;
export const getInstanceTypesOutput: typeof import("./getInstanceTypes").getInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypes","getInstanceTypesOutput"], () => require("./getInstanceTypes"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetInternetGatewayArgs, GetInternetGatewayResult, GetInternetGatewayOutputArgs } from "./getInternetGateway";
export const getInternetGateway: typeof import("./getInternetGateway").getInternetGateway = null as any;
export const getInternetGatewayOutput: typeof import("./getInternetGateway").getInternetGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getInternetGateway","getInternetGatewayOutput"], () => require("./getInternetGateway"));

export { GetIpamPreviewNextCidrArgs, GetIpamPreviewNextCidrResult, GetIpamPreviewNextCidrOutputArgs } from "./getIpamPreviewNextCidr";
export const getIpamPreviewNextCidr: typeof import("./getIpamPreviewNextCidr").getIpamPreviewNextCidr = null as any;
export const getIpamPreviewNextCidrOutput: typeof import("./getIpamPreviewNextCidr").getIpamPreviewNextCidrOutput = null as any;
utilities.lazyLoad(exports, ["getIpamPreviewNextCidr","getIpamPreviewNextCidrOutput"], () => require("./getIpamPreviewNextCidr"));

export { GetKeyPairArgs, GetKeyPairResult, GetKeyPairOutputArgs } from "./getKeyPair";
export const getKeyPair: typeof import("./getKeyPair").getKeyPair = null as any;
export const getKeyPairOutput: typeof import("./getKeyPair").getKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPair","getKeyPairOutput"], () => require("./getKeyPair"));

export { GetLaunchConfigurationArgs, GetLaunchConfigurationResult, GetLaunchConfigurationOutputArgs } from "./getLaunchConfiguration";
export const getLaunchConfiguration: typeof import("./getLaunchConfiguration").getLaunchConfiguration = null as any;
export const getLaunchConfigurationOutput: typeof import("./getLaunchConfiguration").getLaunchConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchConfiguration","getLaunchConfigurationOutput"], () => require("./getLaunchConfiguration"));

export { GetLaunchTemplateArgs, GetLaunchTemplateResult, GetLaunchTemplateOutputArgs } from "./getLaunchTemplate";
export const getLaunchTemplate: typeof import("./getLaunchTemplate").getLaunchTemplate = null as any;
export const getLaunchTemplateOutput: typeof import("./getLaunchTemplate").getLaunchTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchTemplate","getLaunchTemplateOutput"], () => require("./getLaunchTemplate"));

export { GetLocalGatewayArgs, GetLocalGatewayResult, GetLocalGatewayOutputArgs } from "./getLocalGateway";
export const getLocalGateway: typeof import("./getLocalGateway").getLocalGateway = null as any;
export const getLocalGatewayOutput: typeof import("./getLocalGateway").getLocalGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGateway","getLocalGatewayOutput"], () => require("./getLocalGateway"));

export { GetLocalGatewayRouteTableArgs, GetLocalGatewayRouteTableResult, GetLocalGatewayRouteTableOutputArgs } from "./getLocalGatewayRouteTable";
export const getLocalGatewayRouteTable: typeof import("./getLocalGatewayRouteTable").getLocalGatewayRouteTable = null as any;
export const getLocalGatewayRouteTableOutput: typeof import("./getLocalGatewayRouteTable").getLocalGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTable","getLocalGatewayRouteTableOutput"], () => require("./getLocalGatewayRouteTable"));

export { GetLocalGatewayRouteTablesArgs, GetLocalGatewayRouteTablesResult, GetLocalGatewayRouteTablesOutputArgs } from "./getLocalGatewayRouteTables";
export const getLocalGatewayRouteTables: typeof import("./getLocalGatewayRouteTables").getLocalGatewayRouteTables = null as any;
export const getLocalGatewayRouteTablesOutput: typeof import("./getLocalGatewayRouteTables").getLocalGatewayRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTables","getLocalGatewayRouteTablesOutput"], () => require("./getLocalGatewayRouteTables"));

export { GetLocalGatewayVirtualInterfaceArgs, GetLocalGatewayVirtualInterfaceResult, GetLocalGatewayVirtualInterfaceOutputArgs } from "./getLocalGatewayVirtualInterface";
export const getLocalGatewayVirtualInterface: typeof import("./getLocalGatewayVirtualInterface").getLocalGatewayVirtualInterface = null as any;
export const getLocalGatewayVirtualInterfaceOutput: typeof import("./getLocalGatewayVirtualInterface").getLocalGatewayVirtualInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayVirtualInterface","getLocalGatewayVirtualInterfaceOutput"], () => require("./getLocalGatewayVirtualInterface"));

export { GetLocalGatewayVirtualInterfaceGroupArgs, GetLocalGatewayVirtualInterfaceGroupResult, GetLocalGatewayVirtualInterfaceGroupOutputArgs } from "./getLocalGatewayVirtualInterfaceGroup";
export const getLocalGatewayVirtualInterfaceGroup: typeof import("./getLocalGatewayVirtualInterfaceGroup").getLocalGatewayVirtualInterfaceGroup = null as any;
export const getLocalGatewayVirtualInterfaceGroupOutput: typeof import("./getLocalGatewayVirtualInterfaceGroup").getLocalGatewayVirtualInterfaceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayVirtualInterfaceGroup","getLocalGatewayVirtualInterfaceGroupOutput"], () => require("./getLocalGatewayVirtualInterfaceGroup"));

export { GetLocalGatewayVirtualInterfaceGroupsArgs, GetLocalGatewayVirtualInterfaceGroupsResult, GetLocalGatewayVirtualInterfaceGroupsOutputArgs } from "./getLocalGatewayVirtualInterfaceGroups";
export const getLocalGatewayVirtualInterfaceGroups: typeof import("./getLocalGatewayVirtualInterfaceGroups").getLocalGatewayVirtualInterfaceGroups = null as any;
export const getLocalGatewayVirtualInterfaceGroupsOutput: typeof import("./getLocalGatewayVirtualInterfaceGroups").getLocalGatewayVirtualInterfaceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayVirtualInterfaceGroups","getLocalGatewayVirtualInterfaceGroupsOutput"], () => require("./getLocalGatewayVirtualInterfaceGroups"));

export { GetLocalGatewaysArgs, GetLocalGatewaysResult, GetLocalGatewaysOutputArgs } from "./getLocalGateways";
export const getLocalGateways: typeof import("./getLocalGateways").getLocalGateways = null as any;
export const getLocalGatewaysOutput: typeof import("./getLocalGateways").getLocalGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGateways","getLocalGatewaysOutput"], () => require("./getLocalGateways"));

export { GetManagedPrefixListArgs, GetManagedPrefixListResult, GetManagedPrefixListOutputArgs } from "./getManagedPrefixList";
export const getManagedPrefixList: typeof import("./getManagedPrefixList").getManagedPrefixList = null as any;
export const getManagedPrefixListOutput: typeof import("./getManagedPrefixList").getManagedPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getManagedPrefixList","getManagedPrefixListOutput"], () => require("./getManagedPrefixList"));

export { GetManagedPrefixListsArgs, GetManagedPrefixListsResult, GetManagedPrefixListsOutputArgs } from "./getManagedPrefixLists";
export const getManagedPrefixLists: typeof import("./getManagedPrefixLists").getManagedPrefixLists = null as any;
export const getManagedPrefixListsOutput: typeof import("./getManagedPrefixLists").getManagedPrefixListsOutput = null as any;
utilities.lazyLoad(exports, ["getManagedPrefixLists","getManagedPrefixListsOutput"], () => require("./getManagedPrefixLists"));

export { GetNatGatewayArgs, GetNatGatewayResult, GetNatGatewayOutputArgs } from "./getNatGateway";
export const getNatGateway: typeof import("./getNatGateway").getNatGateway = null as any;
export const getNatGatewayOutput: typeof import("./getNatGateway").getNatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateway","getNatGatewayOutput"], () => require("./getNatGateway"));

export { GetNatGatewaysArgs, GetNatGatewaysResult, GetNatGatewaysOutputArgs } from "./getNatGateways";
export const getNatGateways: typeof import("./getNatGateways").getNatGateways = null as any;
export const getNatGatewaysOutput: typeof import("./getNatGateways").getNatGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateways","getNatGatewaysOutput"], () => require("./getNatGateways"));

export { GetNetworkAclsArgs, GetNetworkAclsResult, GetNetworkAclsOutputArgs } from "./getNetworkAcls";
export const getNetworkAcls: typeof import("./getNetworkAcls").getNetworkAcls = null as any;
export const getNetworkAclsOutput: typeof import("./getNetworkAcls").getNetworkAclsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAcls","getNetworkAclsOutput"], () => require("./getNetworkAcls"));

export { GetNetworkInsightsAnalysisArgs, GetNetworkInsightsAnalysisResult, GetNetworkInsightsAnalysisOutputArgs } from "./getNetworkInsightsAnalysis";
export const getNetworkInsightsAnalysis: typeof import("./getNetworkInsightsAnalysis").getNetworkInsightsAnalysis = null as any;
export const getNetworkInsightsAnalysisOutput: typeof import("./getNetworkInsightsAnalysis").getNetworkInsightsAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInsightsAnalysis","getNetworkInsightsAnalysisOutput"], () => require("./getNetworkInsightsAnalysis"));

export { GetNetworkInsightsPathArgs, GetNetworkInsightsPathResult, GetNetworkInsightsPathOutputArgs } from "./getNetworkInsightsPath";
export const getNetworkInsightsPath: typeof import("./getNetworkInsightsPath").getNetworkInsightsPath = null as any;
export const getNetworkInsightsPathOutput: typeof import("./getNetworkInsightsPath").getNetworkInsightsPathOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInsightsPath","getNetworkInsightsPathOutput"], () => require("./getNetworkInsightsPath"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkInterfacesArgs, GetNetworkInterfacesResult, GetNetworkInterfacesOutputArgs } from "./getNetworkInterfaces";
export const getNetworkInterfaces: typeof import("./getNetworkInterfaces").getNetworkInterfaces = null as any;
export const getNetworkInterfacesOutput: typeof import("./getNetworkInterfaces").getNetworkInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfaces","getNetworkInterfacesOutput"], () => require("./getNetworkInterfaces"));

export { GetPrefixListArgs, GetPrefixListResult, GetPrefixListOutputArgs } from "./getPrefixList";
export const getPrefixList: typeof import("./getPrefixList").getPrefixList = null as any;
export const getPrefixListOutput: typeof import("./getPrefixList").getPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPrefixList","getPrefixListOutput"], () => require("./getPrefixList"));

export { GetRouteArgs, GetRouteResult, GetRouteOutputArgs } from "./getRoute";
export const getRoute: typeof import("./getRoute").getRoute = null as any;
export const getRouteOutput: typeof import("./getRoute").getRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRoute","getRouteOutput"], () => require("./getRoute"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetRouteTablesArgs, GetRouteTablesResult, GetRouteTablesOutputArgs } from "./getRouteTables";
export const getRouteTables: typeof import("./getRouteTables").getRouteTables = null as any;
export const getRouteTablesOutput: typeof import("./getRouteTables").getRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTables","getRouteTablesOutput"], () => require("./getRouteTables"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetSecurityGroupsArgs, GetSecurityGroupsResult, GetSecurityGroupsOutputArgs } from "./getSecurityGroups";
export const getSecurityGroups: typeof import("./getSecurityGroups").getSecurityGroups = null as any;
export const getSecurityGroupsOutput: typeof import("./getSecurityGroups").getSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroups","getSecurityGroupsOutput"], () => require("./getSecurityGroups"));

export { GetSerialConsoleAccessResult } from "./getSerialConsoleAccess";
export const getSerialConsoleAccess: typeof import("./getSerialConsoleAccess").getSerialConsoleAccess = null as any;
utilities.lazyLoad(exports, ["getSerialConsoleAccess"], () => require("./getSerialConsoleAccess"));

export { GetSpotPriceArgs, GetSpotPriceResult, GetSpotPriceOutputArgs } from "./getSpotPrice";
export const getSpotPrice: typeof import("./getSpotPrice").getSpotPrice = null as any;
export const getSpotPriceOutput: typeof import("./getSpotPrice").getSpotPriceOutput = null as any;
utilities.lazyLoad(exports, ["getSpotPrice","getSpotPriceOutput"], () => require("./getSpotPrice"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubnetIdsArgs, GetSubnetIdsResult, GetSubnetIdsOutputArgs } from "./getSubnetIds";
export const getSubnetIds: typeof import("./getSubnetIds").getSubnetIds = null as any;
export const getSubnetIdsOutput: typeof import("./getSubnetIds").getSubnetIdsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetIds","getSubnetIdsOutput"], () => require("./getSubnetIds"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetTransitGatewayRouteTablesArgs, GetTransitGatewayRouteTablesResult, GetTransitGatewayRouteTablesOutputArgs } from "./getTransitGatewayRouteTables";
export const getTransitGatewayRouteTables: typeof import("./getTransitGatewayRouteTables").getTransitGatewayRouteTables = null as any;
export const getTransitGatewayRouteTablesOutput: typeof import("./getTransitGatewayRouteTables").getTransitGatewayRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayRouteTables","getTransitGatewayRouteTablesOutput"], () => require("./getTransitGatewayRouteTables"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcDhcpOptionsArgs, GetVpcDhcpOptionsResult, GetVpcDhcpOptionsOutputArgs } from "./getVpcDhcpOptions";
export const getVpcDhcpOptions: typeof import("./getVpcDhcpOptions").getVpcDhcpOptions = null as any;
export const getVpcDhcpOptionsOutput: typeof import("./getVpcDhcpOptions").getVpcDhcpOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcDhcpOptions","getVpcDhcpOptionsOutput"], () => require("./getVpcDhcpOptions"));

export { GetVpcEndpointArgs, GetVpcEndpointResult, GetVpcEndpointOutputArgs } from "./getVpcEndpoint";
export const getVpcEndpoint: typeof import("./getVpcEndpoint").getVpcEndpoint = null as any;
export const getVpcEndpointOutput: typeof import("./getVpcEndpoint").getVpcEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getVpcEndpoint","getVpcEndpointOutput"], () => require("./getVpcEndpoint"));

export { GetVpcEndpointServiceArgs, GetVpcEndpointServiceResult, GetVpcEndpointServiceOutputArgs } from "./getVpcEndpointService";
export const getVpcEndpointService: typeof import("./getVpcEndpointService").getVpcEndpointService = null as any;
export const getVpcEndpointServiceOutput: typeof import("./getVpcEndpointService").getVpcEndpointServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpcEndpointService","getVpcEndpointServiceOutput"], () => require("./getVpcEndpointService"));

export { GetVpcIamPoolArgs, GetVpcIamPoolResult, GetVpcIamPoolOutputArgs } from "./getVpcIamPool";
export const getVpcIamPool: typeof import("./getVpcIamPool").getVpcIamPool = null as any;
export const getVpcIamPoolOutput: typeof import("./getVpcIamPool").getVpcIamPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIamPool","getVpcIamPoolOutput"], () => require("./getVpcIamPool"));

export { GetVpcIamPoolCidrsArgs, GetVpcIamPoolCidrsResult, GetVpcIamPoolCidrsOutputArgs } from "./getVpcIamPoolCidrs";
export const getVpcIamPoolCidrs: typeof import("./getVpcIamPoolCidrs").getVpcIamPoolCidrs = null as any;
export const getVpcIamPoolCidrsOutput: typeof import("./getVpcIamPoolCidrs").getVpcIamPoolCidrsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIamPoolCidrs","getVpcIamPoolCidrsOutput"], () => require("./getVpcIamPoolCidrs"));

export { GetVpcIamPoolsArgs, GetVpcIamPoolsResult, GetVpcIamPoolsOutputArgs } from "./getVpcIamPools";
export const getVpcIamPools: typeof import("./getVpcIamPools").getVpcIamPools = null as any;
export const getVpcIamPoolsOutput: typeof import("./getVpcIamPools").getVpcIamPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIamPools","getVpcIamPoolsOutput"], () => require("./getVpcIamPools"));

export { GetVpcPeeringConnectionArgs, GetVpcPeeringConnectionResult, GetVpcPeeringConnectionOutputArgs } from "./getVpcPeeringConnection";
export const getVpcPeeringConnection: typeof import("./getVpcPeeringConnection").getVpcPeeringConnection = null as any;
export const getVpcPeeringConnectionOutput: typeof import("./getVpcPeeringConnection").getVpcPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeeringConnection","getVpcPeeringConnectionOutput"], () => require("./getVpcPeeringConnection"));

export { GetVpcPeeringConnectionsArgs, GetVpcPeeringConnectionsResult, GetVpcPeeringConnectionsOutputArgs } from "./getVpcPeeringConnections";
export const getVpcPeeringConnections: typeof import("./getVpcPeeringConnections").getVpcPeeringConnections = null as any;
export const getVpcPeeringConnectionsOutput: typeof import("./getVpcPeeringConnections").getVpcPeeringConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeeringConnections","getVpcPeeringConnectionsOutput"], () => require("./getVpcPeeringConnections"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { GetVpnGatewayArgs, GetVpnGatewayResult, GetVpnGatewayOutputArgs } from "./getVpnGateway";
export const getVpnGateway: typeof import("./getVpnGateway").getVpnGateway = null as any;
export const getVpnGatewayOutput: typeof import("./getVpnGateway").getVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateway","getVpnGatewayOutput"], () => require("./getVpnGateway"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export * from "./instancePlatform";
export * from "./instanceType";
export { InternetGatewayArgs, InternetGatewayState } from "./internetGateway";
export type InternetGateway = import("./internetGateway").InternetGateway;
export const InternetGateway: typeof import("./internetGateway").InternetGateway = null as any;
utilities.lazyLoad(exports, ["InternetGateway"], () => require("./internetGateway"));

export { InternetGatewayAttachmentArgs, InternetGatewayAttachmentState } from "./internetGatewayAttachment";
export type InternetGatewayAttachment = import("./internetGatewayAttachment").InternetGatewayAttachment;
export const InternetGatewayAttachment: typeof import("./internetGatewayAttachment").InternetGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["InternetGatewayAttachment"], () => require("./internetGatewayAttachment"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { LaunchConfigurationArgs, LaunchConfigurationState } from "./launchConfiguration";
export type LaunchConfiguration = import("./launchConfiguration").LaunchConfiguration;
export const LaunchConfiguration: typeof import("./launchConfiguration").LaunchConfiguration = null as any;
utilities.lazyLoad(exports, ["LaunchConfiguration"], () => require("./launchConfiguration"));

export { LaunchTemplateArgs, LaunchTemplateState } from "./launchTemplate";
export type LaunchTemplate = import("./launchTemplate").LaunchTemplate;
export const LaunchTemplate: typeof import("./launchTemplate").LaunchTemplate = null as any;
utilities.lazyLoad(exports, ["LaunchTemplate"], () => require("./launchTemplate"));

export { LocalGatewayRouteArgs, LocalGatewayRouteState } from "./localGatewayRoute";
export type LocalGatewayRoute = import("./localGatewayRoute").LocalGatewayRoute;
export const LocalGatewayRoute: typeof import("./localGatewayRoute").LocalGatewayRoute = null as any;
utilities.lazyLoad(exports, ["LocalGatewayRoute"], () => require("./localGatewayRoute"));

export { LocalGatewayRouteTableVpcAssociationArgs, LocalGatewayRouteTableVpcAssociationState } from "./localGatewayRouteTableVpcAssociation";
export type LocalGatewayRouteTableVpcAssociation = import("./localGatewayRouteTableVpcAssociation").LocalGatewayRouteTableVpcAssociation;
export const LocalGatewayRouteTableVpcAssociation: typeof import("./localGatewayRouteTableVpcAssociation").LocalGatewayRouteTableVpcAssociation = null as any;
utilities.lazyLoad(exports, ["LocalGatewayRouteTableVpcAssociation"], () => require("./localGatewayRouteTableVpcAssociation"));

export { MainRouteTableAssociationArgs, MainRouteTableAssociationState } from "./mainRouteTableAssociation";
export type MainRouteTableAssociation = import("./mainRouteTableAssociation").MainRouteTableAssociation;
export const MainRouteTableAssociation: typeof import("./mainRouteTableAssociation").MainRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["MainRouteTableAssociation"], () => require("./mainRouteTableAssociation"));

export { ManagedPrefixListArgs, ManagedPrefixListState } from "./managedPrefixList";
export type ManagedPrefixList = import("./managedPrefixList").ManagedPrefixList;
export const ManagedPrefixList: typeof import("./managedPrefixList").ManagedPrefixList = null as any;
utilities.lazyLoad(exports, ["ManagedPrefixList"], () => require("./managedPrefixList"));

export { ManagedPrefixListEntryArgs, ManagedPrefixListEntryState } from "./managedPrefixListEntry";
export type ManagedPrefixListEntry = import("./managedPrefixListEntry").ManagedPrefixListEntry;
export const ManagedPrefixListEntry: typeof import("./managedPrefixListEntry").ManagedPrefixListEntry = null as any;
utilities.lazyLoad(exports, ["ManagedPrefixListEntry"], () => require("./managedPrefixListEntry"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NetworkAclArgs, NetworkAclState } from "./networkAcl";
export type NetworkAcl = import("./networkAcl").NetworkAcl;
export const NetworkAcl: typeof import("./networkAcl").NetworkAcl = null as any;
utilities.lazyLoad(exports, ["NetworkAcl"], () => require("./networkAcl"));

export { NetworkAclAssociationArgs, NetworkAclAssociationState } from "./networkAclAssociation";
export type NetworkAclAssociation = import("./networkAclAssociation").NetworkAclAssociation;
export const NetworkAclAssociation: typeof import("./networkAclAssociation").NetworkAclAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkAclAssociation"], () => require("./networkAclAssociation"));

export { NetworkAclRuleArgs, NetworkAclRuleState } from "./networkAclRule";
export type NetworkAclRule = import("./networkAclRule").NetworkAclRule;
export const NetworkAclRule: typeof import("./networkAclRule").NetworkAclRule = null as any;
utilities.lazyLoad(exports, ["NetworkAclRule"], () => require("./networkAclRule"));

export { NetworkInsightsAnalysisArgs, NetworkInsightsAnalysisState } from "./networkInsightsAnalysis";
export type NetworkInsightsAnalysis = import("./networkInsightsAnalysis").NetworkInsightsAnalysis;
export const NetworkInsightsAnalysis: typeof import("./networkInsightsAnalysis").NetworkInsightsAnalysis = null as any;
utilities.lazyLoad(exports, ["NetworkInsightsAnalysis"], () => require("./networkInsightsAnalysis"));

export { NetworkInsightsPathArgs, NetworkInsightsPathState } from "./networkInsightsPath";
export type NetworkInsightsPath = import("./networkInsightsPath").NetworkInsightsPath;
export const NetworkInsightsPath: typeof import("./networkInsightsPath").NetworkInsightsPath = null as any;
utilities.lazyLoad(exports, ["NetworkInsightsPath"], () => require("./networkInsightsPath"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkInterfaceAttachmentArgs, NetworkInterfaceAttachmentState } from "./networkInterfaceAttachment";
export type NetworkInterfaceAttachment = import("./networkInterfaceAttachment").NetworkInterfaceAttachment;
export const NetworkInterfaceAttachment: typeof import("./networkInterfaceAttachment").NetworkInterfaceAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceAttachment"], () => require("./networkInterfaceAttachment"));

export { NetworkInterfaceSecurityGroupAttachmentArgs, NetworkInterfaceSecurityGroupAttachmentState } from "./networkInterfaceSecurityGroupAttachment";
export type NetworkInterfaceSecurityGroupAttachment = import("./networkInterfaceSecurityGroupAttachment").NetworkInterfaceSecurityGroupAttachment;
export const NetworkInterfaceSecurityGroupAttachment: typeof import("./networkInterfaceSecurityGroupAttachment").NetworkInterfaceSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceSecurityGroupAttachment"], () => require("./networkInterfaceSecurityGroupAttachment"));

export { PeeringConnectionOptionsArgs, PeeringConnectionOptionsState } from "./peeringConnectionOptions";
export type PeeringConnectionOptions = import("./peeringConnectionOptions").PeeringConnectionOptions;
export const PeeringConnectionOptions: typeof import("./peeringConnectionOptions").PeeringConnectionOptions = null as any;
utilities.lazyLoad(exports, ["PeeringConnectionOptions"], () => require("./peeringConnectionOptions"));

export { PlacementGroupArgs, PlacementGroupState } from "./placementGroup";
export type PlacementGroup = import("./placementGroup").PlacementGroup;
export const PlacementGroup: typeof import("./placementGroup").PlacementGroup = null as any;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));

export * from "./placementStrategy";
export * from "./protocolType";
export { ProxyProtocolPolicyArgs, ProxyProtocolPolicyState } from "./proxyProtocolPolicy";
export type ProxyProtocolPolicy = import("./proxyProtocolPolicy").ProxyProtocolPolicy;
export const ProxyProtocolPolicy: typeof import("./proxyProtocolPolicy").ProxyProtocolPolicy = null as any;
utilities.lazyLoad(exports, ["ProxyProtocolPolicy"], () => require("./proxyProtocolPolicy"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableAssociationArgs, RouteTableAssociationState } from "./routeTableAssociation";
export type RouteTableAssociation = import("./routeTableAssociation").RouteTableAssociation;
export const RouteTableAssociation: typeof import("./routeTableAssociation").RouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["RouteTableAssociation"], () => require("./routeTableAssociation"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupAssociationArgs, SecurityGroupAssociationState } from "./securityGroupAssociation";
export type SecurityGroupAssociation = import("./securityGroupAssociation").SecurityGroupAssociation;
export const SecurityGroupAssociation: typeof import("./securityGroupAssociation").SecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["SecurityGroupAssociation"], () => require("./securityGroupAssociation"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { SerialConsoleAccessArgs, SerialConsoleAccessState } from "./serialConsoleAccess";
export type SerialConsoleAccess = import("./serialConsoleAccess").SerialConsoleAccess;
export const SerialConsoleAccess: typeof import("./serialConsoleAccess").SerialConsoleAccess = null as any;
utilities.lazyLoad(exports, ["SerialConsoleAccess"], () => require("./serialConsoleAccess"));

export { SnapshotCreateVolumePermissionArgs, SnapshotCreateVolumePermissionState } from "./snapshotCreateVolumePermission";
export type SnapshotCreateVolumePermission = import("./snapshotCreateVolumePermission").SnapshotCreateVolumePermission;
export const SnapshotCreateVolumePermission: typeof import("./snapshotCreateVolumePermission").SnapshotCreateVolumePermission = null as any;
utilities.lazyLoad(exports, ["SnapshotCreateVolumePermission"], () => require("./snapshotCreateVolumePermission"));

export { SpotDatafeedSubscriptionArgs, SpotDatafeedSubscriptionState } from "./spotDatafeedSubscription";
export type SpotDatafeedSubscription = import("./spotDatafeedSubscription").SpotDatafeedSubscription;
export const SpotDatafeedSubscription: typeof import("./spotDatafeedSubscription").SpotDatafeedSubscription = null as any;
utilities.lazyLoad(exports, ["SpotDatafeedSubscription"], () => require("./spotDatafeedSubscription"));

export { SpotFleetRequestArgs, SpotFleetRequestState } from "./spotFleetRequest";
export type SpotFleetRequest = import("./spotFleetRequest").SpotFleetRequest;
export const SpotFleetRequest: typeof import("./spotFleetRequest").SpotFleetRequest = null as any;
utilities.lazyLoad(exports, ["SpotFleetRequest"], () => require("./spotFleetRequest"));

export { SpotInstanceRequestArgs, SpotInstanceRequestState } from "./spotInstanceRequest";
export type SpotInstanceRequest = import("./spotInstanceRequest").SpotInstanceRequest;
export const SpotInstanceRequest: typeof import("./spotInstanceRequest").SpotInstanceRequest = null as any;
utilities.lazyLoad(exports, ["SpotInstanceRequest"], () => require("./spotInstanceRequest"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { SubnetCidrReservationArgs, SubnetCidrReservationState } from "./subnetCidrReservation";
export type SubnetCidrReservation = import("./subnetCidrReservation").SubnetCidrReservation;
export const SubnetCidrReservation: typeof import("./subnetCidrReservation").SubnetCidrReservation = null as any;
utilities.lazyLoad(exports, ["SubnetCidrReservation"], () => require("./subnetCidrReservation"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export * from "./tenancy";
export { TrafficMirrorFilterArgs, TrafficMirrorFilterState } from "./trafficMirrorFilter";
export type TrafficMirrorFilter = import("./trafficMirrorFilter").TrafficMirrorFilter;
export const TrafficMirrorFilter: typeof import("./trafficMirrorFilter").TrafficMirrorFilter = null as any;
utilities.lazyLoad(exports, ["TrafficMirrorFilter"], () => require("./trafficMirrorFilter"));

export { TrafficMirrorFilterRuleArgs, TrafficMirrorFilterRuleState } from "./trafficMirrorFilterRule";
export type TrafficMirrorFilterRule = import("./trafficMirrorFilterRule").TrafficMirrorFilterRule;
export const TrafficMirrorFilterRule: typeof import("./trafficMirrorFilterRule").TrafficMirrorFilterRule = null as any;
utilities.lazyLoad(exports, ["TrafficMirrorFilterRule"], () => require("./trafficMirrorFilterRule"));

export { TrafficMirrorSessionArgs, TrafficMirrorSessionState } from "./trafficMirrorSession";
export type TrafficMirrorSession = import("./trafficMirrorSession").TrafficMirrorSession;
export const TrafficMirrorSession: typeof import("./trafficMirrorSession").TrafficMirrorSession = null as any;
utilities.lazyLoad(exports, ["TrafficMirrorSession"], () => require("./trafficMirrorSession"));

export { TrafficMirrorTargetArgs, TrafficMirrorTargetState } from "./trafficMirrorTarget";
export type TrafficMirrorTarget = import("./trafficMirrorTarget").TrafficMirrorTarget;
export const TrafficMirrorTarget: typeof import("./trafficMirrorTarget").TrafficMirrorTarget = null as any;
utilities.lazyLoad(exports, ["TrafficMirrorTarget"], () => require("./trafficMirrorTarget"));

export { TransitGatewayPeeringAttachmentAccepterArgs, TransitGatewayPeeringAttachmentAccepterState } from "./transitGatewayPeeringAttachmentAccepter";
export type TransitGatewayPeeringAttachmentAccepter = import("./transitGatewayPeeringAttachmentAccepter").TransitGatewayPeeringAttachmentAccepter;
export const TransitGatewayPeeringAttachmentAccepter: typeof import("./transitGatewayPeeringAttachmentAccepter").TransitGatewayPeeringAttachmentAccepter = null as any;
utilities.lazyLoad(exports, ["TransitGatewayPeeringAttachmentAccepter"], () => require("./transitGatewayPeeringAttachmentAccepter"));

export { VolumeAttachmentArgs, VolumeAttachmentState } from "./volumeAttachment";
export type VolumeAttachment = import("./volumeAttachment").VolumeAttachment;
export const VolumeAttachment: typeof import("./volumeAttachment").VolumeAttachment = null as any;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcDhcpOptionsArgs, VpcDhcpOptionsState } from "./vpcDhcpOptions";
export type VpcDhcpOptions = import("./vpcDhcpOptions").VpcDhcpOptions;
export const VpcDhcpOptions: typeof import("./vpcDhcpOptions").VpcDhcpOptions = null as any;
utilities.lazyLoad(exports, ["VpcDhcpOptions"], () => require("./vpcDhcpOptions"));

export { VpcDhcpOptionsAssociationArgs, VpcDhcpOptionsAssociationState } from "./vpcDhcpOptionsAssociation";
export type VpcDhcpOptionsAssociation = import("./vpcDhcpOptionsAssociation").VpcDhcpOptionsAssociation;
export const VpcDhcpOptionsAssociation: typeof import("./vpcDhcpOptionsAssociation").VpcDhcpOptionsAssociation = null as any;
utilities.lazyLoad(exports, ["VpcDhcpOptionsAssociation"], () => require("./vpcDhcpOptionsAssociation"));

export { VpcEndpointArgs, VpcEndpointState } from "./vpcEndpoint";
export type VpcEndpoint = import("./vpcEndpoint").VpcEndpoint;
export const VpcEndpoint: typeof import("./vpcEndpoint").VpcEndpoint = null as any;
utilities.lazyLoad(exports, ["VpcEndpoint"], () => require("./vpcEndpoint"));

export { VpcEndpointConnectionAccepterArgs, VpcEndpointConnectionAccepterState } from "./vpcEndpointConnectionAccepter";
export type VpcEndpointConnectionAccepter = import("./vpcEndpointConnectionAccepter").VpcEndpointConnectionAccepter;
export const VpcEndpointConnectionAccepter: typeof import("./vpcEndpointConnectionAccepter").VpcEndpointConnectionAccepter = null as any;
utilities.lazyLoad(exports, ["VpcEndpointConnectionAccepter"], () => require("./vpcEndpointConnectionAccepter"));

export { VpcEndpointConnectionNotificationArgs, VpcEndpointConnectionNotificationState } from "./vpcEndpointConnectionNotification";
export type VpcEndpointConnectionNotification = import("./vpcEndpointConnectionNotification").VpcEndpointConnectionNotification;
export const VpcEndpointConnectionNotification: typeof import("./vpcEndpointConnectionNotification").VpcEndpointConnectionNotification = null as any;
utilities.lazyLoad(exports, ["VpcEndpointConnectionNotification"], () => require("./vpcEndpointConnectionNotification"));

export { VpcEndpointPolicyArgs, VpcEndpointPolicyState } from "./vpcEndpointPolicy";
export type VpcEndpointPolicy = import("./vpcEndpointPolicy").VpcEndpointPolicy;
export const VpcEndpointPolicy: typeof import("./vpcEndpointPolicy").VpcEndpointPolicy = null as any;
utilities.lazyLoad(exports, ["VpcEndpointPolicy"], () => require("./vpcEndpointPolicy"));

export { VpcEndpointRouteTableAssociationArgs, VpcEndpointRouteTableAssociationState } from "./vpcEndpointRouteTableAssociation";
export type VpcEndpointRouteTableAssociation = import("./vpcEndpointRouteTableAssociation").VpcEndpointRouteTableAssociation;
export const VpcEndpointRouteTableAssociation: typeof import("./vpcEndpointRouteTableAssociation").VpcEndpointRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["VpcEndpointRouteTableAssociation"], () => require("./vpcEndpointRouteTableAssociation"));

export { VpcEndpointServiceArgs, VpcEndpointServiceState } from "./vpcEndpointService";
export type VpcEndpointService = import("./vpcEndpointService").VpcEndpointService;
export const VpcEndpointService: typeof import("./vpcEndpointService").VpcEndpointService = null as any;
utilities.lazyLoad(exports, ["VpcEndpointService"], () => require("./vpcEndpointService"));

export { VpcEndpointServiceAllowedPrincipleArgs, VpcEndpointServiceAllowedPrincipleState } from "./vpcEndpointServiceAllowedPrinciple";
export type VpcEndpointServiceAllowedPrinciple = import("./vpcEndpointServiceAllowedPrinciple").VpcEndpointServiceAllowedPrinciple;
export const VpcEndpointServiceAllowedPrinciple: typeof import("./vpcEndpointServiceAllowedPrinciple").VpcEndpointServiceAllowedPrinciple = null as any;
utilities.lazyLoad(exports, ["VpcEndpointServiceAllowedPrinciple"], () => require("./vpcEndpointServiceAllowedPrinciple"));

export { VpcEndpointSubnetAssociationArgs, VpcEndpointSubnetAssociationState } from "./vpcEndpointSubnetAssociation";
export type VpcEndpointSubnetAssociation = import("./vpcEndpointSubnetAssociation").VpcEndpointSubnetAssociation;
export const VpcEndpointSubnetAssociation: typeof import("./vpcEndpointSubnetAssociation").VpcEndpointSubnetAssociation = null as any;
utilities.lazyLoad(exports, ["VpcEndpointSubnetAssociation"], () => require("./vpcEndpointSubnetAssociation"));

export { VpcIpamArgs, VpcIpamState } from "./vpcIpam";
export type VpcIpam = import("./vpcIpam").VpcIpam;
export const VpcIpam: typeof import("./vpcIpam").VpcIpam = null as any;
utilities.lazyLoad(exports, ["VpcIpam"], () => require("./vpcIpam"));

export { VpcIpamOrganizationAdminAccountArgs, VpcIpamOrganizationAdminAccountState } from "./vpcIpamOrganizationAdminAccount";
export type VpcIpamOrganizationAdminAccount = import("./vpcIpamOrganizationAdminAccount").VpcIpamOrganizationAdminAccount;
export const VpcIpamOrganizationAdminAccount: typeof import("./vpcIpamOrganizationAdminAccount").VpcIpamOrganizationAdminAccount = null as any;
utilities.lazyLoad(exports, ["VpcIpamOrganizationAdminAccount"], () => require("./vpcIpamOrganizationAdminAccount"));

export { VpcIpamPoolArgs, VpcIpamPoolState } from "./vpcIpamPool";
export type VpcIpamPool = import("./vpcIpamPool").VpcIpamPool;
export const VpcIpamPool: typeof import("./vpcIpamPool").VpcIpamPool = null as any;
utilities.lazyLoad(exports, ["VpcIpamPool"], () => require("./vpcIpamPool"));

export { VpcIpamPoolCidrArgs, VpcIpamPoolCidrState } from "./vpcIpamPoolCidr";
export type VpcIpamPoolCidr = import("./vpcIpamPoolCidr").VpcIpamPoolCidr;
export const VpcIpamPoolCidr: typeof import("./vpcIpamPoolCidr").VpcIpamPoolCidr = null as any;
utilities.lazyLoad(exports, ["VpcIpamPoolCidr"], () => require("./vpcIpamPoolCidr"));

export { VpcIpamPoolCidrAllocationArgs, VpcIpamPoolCidrAllocationState } from "./vpcIpamPoolCidrAllocation";
export type VpcIpamPoolCidrAllocation = import("./vpcIpamPoolCidrAllocation").VpcIpamPoolCidrAllocation;
export const VpcIpamPoolCidrAllocation: typeof import("./vpcIpamPoolCidrAllocation").VpcIpamPoolCidrAllocation = null as any;
utilities.lazyLoad(exports, ["VpcIpamPoolCidrAllocation"], () => require("./vpcIpamPoolCidrAllocation"));

export { VpcIpamPreviewNextCidrArgs, VpcIpamPreviewNextCidrState } from "./vpcIpamPreviewNextCidr";
export type VpcIpamPreviewNextCidr = import("./vpcIpamPreviewNextCidr").VpcIpamPreviewNextCidr;
export const VpcIpamPreviewNextCidr: typeof import("./vpcIpamPreviewNextCidr").VpcIpamPreviewNextCidr = null as any;
utilities.lazyLoad(exports, ["VpcIpamPreviewNextCidr"], () => require("./vpcIpamPreviewNextCidr"));

export { VpcIpamScopeArgs, VpcIpamScopeState } from "./vpcIpamScope";
export type VpcIpamScope = import("./vpcIpamScope").VpcIpamScope;
export const VpcIpamScope: typeof import("./vpcIpamScope").VpcIpamScope = null as any;
utilities.lazyLoad(exports, ["VpcIpamScope"], () => require("./vpcIpamScope"));

export { VpcIpv4CidrBlockAssociationArgs, VpcIpv4CidrBlockAssociationState } from "./vpcIpv4CidrBlockAssociation";
export type VpcIpv4CidrBlockAssociation = import("./vpcIpv4CidrBlockAssociation").VpcIpv4CidrBlockAssociation;
export const VpcIpv4CidrBlockAssociation: typeof import("./vpcIpv4CidrBlockAssociation").VpcIpv4CidrBlockAssociation = null as any;
utilities.lazyLoad(exports, ["VpcIpv4CidrBlockAssociation"], () => require("./vpcIpv4CidrBlockAssociation"));

export { VpcIpv6CidrBlockAssociationArgs, VpcIpv6CidrBlockAssociationState } from "./vpcIpv6CidrBlockAssociation";
export type VpcIpv6CidrBlockAssociation = import("./vpcIpv6CidrBlockAssociation").VpcIpv6CidrBlockAssociation;
export const VpcIpv6CidrBlockAssociation: typeof import("./vpcIpv6CidrBlockAssociation").VpcIpv6CidrBlockAssociation = null as any;
utilities.lazyLoad(exports, ["VpcIpv6CidrBlockAssociation"], () => require("./vpcIpv6CidrBlockAssociation"));

export { VpcPeeringConnectionArgs, VpcPeeringConnectionState } from "./vpcPeeringConnection";
export type VpcPeeringConnection = import("./vpcPeeringConnection").VpcPeeringConnection;
export const VpcPeeringConnection: typeof import("./vpcPeeringConnection").VpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["VpcPeeringConnection"], () => require("./vpcPeeringConnection"));

export { VpcPeeringConnectionAccepterArgs, VpcPeeringConnectionAccepterState } from "./vpcPeeringConnectionAccepter";
export type VpcPeeringConnectionAccepter = import("./vpcPeeringConnectionAccepter").VpcPeeringConnectionAccepter;
export const VpcPeeringConnectionAccepter: typeof import("./vpcPeeringConnectionAccepter").VpcPeeringConnectionAccepter = null as any;
utilities.lazyLoad(exports, ["VpcPeeringConnectionAccepter"], () => require("./vpcPeeringConnectionAccepter"));

export { VpnConnectionArgs, VpnConnectionState } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));

export { VpnConnectionRouteArgs, VpnConnectionRouteState } from "./vpnConnectionRoute";
export type VpnConnectionRoute = import("./vpnConnectionRoute").VpnConnectionRoute;
export const VpnConnectionRoute: typeof import("./vpnConnectionRoute").VpnConnectionRoute = null as any;
utilities.lazyLoad(exports, ["VpnConnectionRoute"], () => require("./vpnConnectionRoute"));

export { VpnGatewayArgs, VpnGatewayState } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));

export { VpnGatewayAttachmentArgs, VpnGatewayAttachmentState } from "./vpnGatewayAttachment";
export type VpnGatewayAttachment = import("./vpnGatewayAttachment").VpnGatewayAttachment;
export const VpnGatewayAttachment: typeof import("./vpnGatewayAttachment").VpnGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["VpnGatewayAttachment"], () => require("./vpnGatewayAttachment"));

export { VpnGatewayRoutePropagationArgs, VpnGatewayRoutePropagationState } from "./vpnGatewayRoutePropagation";
export type VpnGatewayRoutePropagation = import("./vpnGatewayRoutePropagation").VpnGatewayRoutePropagation;
export const VpnGatewayRoutePropagation: typeof import("./vpnGatewayRoutePropagation").VpnGatewayRoutePropagation = null as any;
utilities.lazyLoad(exports, ["VpnGatewayRoutePropagation"], () => require("./vpnGatewayRoutePropagation"));


// Export enums:
export * from "../types/enums/ec2";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:ec2/ami:Ami":
                return new Ami(name, <any>undefined, { urn })
            case "aws:ec2/amiCopy:AmiCopy":
                return new AmiCopy(name, <any>undefined, { urn })
            case "aws:ec2/amiFromInstance:AmiFromInstance":
                return new AmiFromInstance(name, <any>undefined, { urn })
            case "aws:ec2/amiLaunchPermission:AmiLaunchPermission":
                return new AmiLaunchPermission(name, <any>undefined, { urn })
            case "aws:ec2/availabilityZoneGroup:AvailabilityZoneGroup":
                return new AvailabilityZoneGroup(name, <any>undefined, { urn })
            case "aws:ec2/capacityReservation:CapacityReservation":
                return new CapacityReservation(name, <any>undefined, { urn })
            case "aws:ec2/carrierGateway:CarrierGateway":
                return new CarrierGateway(name, <any>undefined, { urn })
            case "aws:ec2/customerGateway:CustomerGateway":
                return new CustomerGateway(name, <any>undefined, { urn })
            case "aws:ec2/dedicatedHost:DedicatedHost":
                return new DedicatedHost(name, <any>undefined, { urn })
            case "aws:ec2/defaultNetworkAcl:DefaultNetworkAcl":
                return new DefaultNetworkAcl(name, <any>undefined, { urn })
            case "aws:ec2/defaultRouteTable:DefaultRouteTable":
                return new DefaultRouteTable(name, <any>undefined, { urn })
            case "aws:ec2/defaultSecurityGroup:DefaultSecurityGroup":
                return new DefaultSecurityGroup(name, <any>undefined, { urn })
            case "aws:ec2/defaultSubnet:DefaultSubnet":
                return new DefaultSubnet(name, <any>undefined, { urn })
            case "aws:ec2/defaultVpc:DefaultVpc":
                return new DefaultVpc(name, <any>undefined, { urn })
            case "aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions":
                return new DefaultVpcDhcpOptions(name, <any>undefined, { urn })
            case "aws:ec2/egressOnlyInternetGateway:EgressOnlyInternetGateway":
                return new EgressOnlyInternetGateway(name, <any>undefined, { urn })
            case "aws:ec2/eip:Eip":
                return new Eip(name, <any>undefined, { urn })
            case "aws:ec2/eipAssociation:EipAssociation":
                return new EipAssociation(name, <any>undefined, { urn })
            case "aws:ec2/fleet:Fleet":
                return new Fleet(name, <any>undefined, { urn })
            case "aws:ec2/flowLog:FlowLog":
                return new FlowLog(name, <any>undefined, { urn })
            case "aws:ec2/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws:ec2/internetGateway:InternetGateway":
                return new InternetGateway(name, <any>undefined, { urn })
            case "aws:ec2/internetGatewayAttachment:InternetGatewayAttachment":
                return new InternetGatewayAttachment(name, <any>undefined, { urn })
            case "aws:ec2/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "aws:ec2/launchConfiguration:LaunchConfiguration":
                return new LaunchConfiguration(name, <any>undefined, { urn })
            case "aws:ec2/launchTemplate:LaunchTemplate":
                return new LaunchTemplate(name, <any>undefined, { urn })
            case "aws:ec2/localGatewayRoute:LocalGatewayRoute":
                return new LocalGatewayRoute(name, <any>undefined, { urn })
            case "aws:ec2/localGatewayRouteTableVpcAssociation:LocalGatewayRouteTableVpcAssociation":
                return new LocalGatewayRouteTableVpcAssociation(name, <any>undefined, { urn })
            case "aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation":
                return new MainRouteTableAssociation(name, <any>undefined, { urn })
            case "aws:ec2/managedPrefixList:ManagedPrefixList":
                return new ManagedPrefixList(name, <any>undefined, { urn })
            case "aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry":
                return new ManagedPrefixListEntry(name, <any>undefined, { urn })
            case "aws:ec2/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "aws:ec2/networkAcl:NetworkAcl":
                return new NetworkAcl(name, <any>undefined, { urn })
            case "aws:ec2/networkAclAssociation:NetworkAclAssociation":
                return new NetworkAclAssociation(name, <any>undefined, { urn })
            case "aws:ec2/networkAclRule:NetworkAclRule":
                return new NetworkAclRule(name, <any>undefined, { urn })
            case "aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis":
                return new NetworkInsightsAnalysis(name, <any>undefined, { urn })
            case "aws:ec2/networkInsightsPath:NetworkInsightsPath":
                return new NetworkInsightsPath(name, <any>undefined, { urn })
            case "aws:ec2/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment":
                return new NetworkInterfaceAttachment(name, <any>undefined, { urn })
            case "aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment":
                return new NetworkInterfaceSecurityGroupAttachment(name, <any>undefined, { urn })
            case "aws:ec2/peeringConnectionOptions:PeeringConnectionOptions":
                return new PeeringConnectionOptions(name, <any>undefined, { urn })
            case "aws:ec2/placementGroup:PlacementGroup":
                return new PlacementGroup(name, <any>undefined, { urn })
            case "aws:ec2/proxyProtocolPolicy:ProxyProtocolPolicy":
                return new ProxyProtocolPolicy(name, <any>undefined, { urn })
            case "aws:ec2/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "aws:ec2/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "aws:ec2/routeTableAssociation:RouteTableAssociation":
                return new RouteTableAssociation(name, <any>undefined, { urn })
            case "aws:ec2/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "aws:ec2/securityGroupAssociation:SecurityGroupAssociation":
                return new SecurityGroupAssociation(name, <any>undefined, { urn })
            case "aws:ec2/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "aws:ec2/serialConsoleAccess:SerialConsoleAccess":
                return new SerialConsoleAccess(name, <any>undefined, { urn })
            case "aws:ec2/snapshotCreateVolumePermission:SnapshotCreateVolumePermission":
                return new SnapshotCreateVolumePermission(name, <any>undefined, { urn })
            case "aws:ec2/spotDatafeedSubscription:SpotDatafeedSubscription":
                return new SpotDatafeedSubscription(name, <any>undefined, { urn })
            case "aws:ec2/spotFleetRequest:SpotFleetRequest":
                return new SpotFleetRequest(name, <any>undefined, { urn })
            case "aws:ec2/spotInstanceRequest:SpotInstanceRequest":
                return new SpotInstanceRequest(name, <any>undefined, { urn })
            case "aws:ec2/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "aws:ec2/subnetCidrReservation:SubnetCidrReservation":
                return new SubnetCidrReservation(name, <any>undefined, { urn })
            case "aws:ec2/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "aws:ec2/trafficMirrorFilter:TrafficMirrorFilter":
                return new TrafficMirrorFilter(name, <any>undefined, { urn })
            case "aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule":
                return new TrafficMirrorFilterRule(name, <any>undefined, { urn })
            case "aws:ec2/trafficMirrorSession:TrafficMirrorSession":
                return new TrafficMirrorSession(name, <any>undefined, { urn })
            case "aws:ec2/trafficMirrorTarget:TrafficMirrorTarget":
                return new TrafficMirrorTarget(name, <any>undefined, { urn })
            case "aws:ec2/transitGatewayPeeringAttachmentAccepter:TransitGatewayPeeringAttachmentAccepter":
                return new TransitGatewayPeeringAttachmentAccepter(name, <any>undefined, { urn })
            case "aws:ec2/volumeAttachment:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            case "aws:ec2/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "aws:ec2/vpcDhcpOptions:VpcDhcpOptions":
                return new VpcDhcpOptions(name, <any>undefined, { urn })
            case "aws:ec2/vpcDhcpOptionsAssociation:VpcDhcpOptionsAssociation":
                return new VpcDhcpOptionsAssociation(name, <any>undefined, { urn })
            case "aws:ec2/vpcEndpoint:VpcEndpoint":
                return new VpcEndpoint(name, <any>undefined, { urn })
            case "aws:ec2/vpcEndpointConnectionAccepter:VpcEndpointConnectionAccepter":
                return new VpcEndpointConnectionAccepter(name, <any>undefined, { urn })
            case "aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification":
                return new VpcEndpointConnectionNotification(name, <any>undefined, { urn })
            case "aws:ec2/vpcEndpointPolicy:VpcEndpointPolicy":
                return new VpcEndpointPolicy(name, <any>undefined, { urn })
            case "aws:ec2/vpcEndpointRouteTableAssociation:VpcEndpointRouteTableAssociation":
                return new VpcEndpointRouteTableAssociation(name, <any>undefined, { urn })
            case "aws:ec2/vpcEndpointService:VpcEndpointService":
                return new VpcEndpointService(name, <any>undefined, { urn })
            case "aws:ec2/vpcEndpointServiceAllowedPrinciple:VpcEndpointServiceAllowedPrinciple":
                return new VpcEndpointServiceAllowedPrinciple(name, <any>undefined, { urn })
            case "aws:ec2/vpcEndpointSubnetAssociation:VpcEndpointSubnetAssociation":
                return new VpcEndpointSubnetAssociation(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpam:VpcIpam":
                return new VpcIpam(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpamOrganizationAdminAccount:VpcIpamOrganizationAdminAccount":
                return new VpcIpamOrganizationAdminAccount(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpamPool:VpcIpamPool":
                return new VpcIpamPool(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr":
                return new VpcIpamPoolCidr(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation":
                return new VpcIpamPoolCidrAllocation(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpamPreviewNextCidr:VpcIpamPreviewNextCidr":
                return new VpcIpamPreviewNextCidr(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpamScope:VpcIpamScope":
                return new VpcIpamScope(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation":
                return new VpcIpv4CidrBlockAssociation(name, <any>undefined, { urn })
            case "aws:ec2/vpcIpv6CidrBlockAssociation:VpcIpv6CidrBlockAssociation":
                return new VpcIpv6CidrBlockAssociation(name, <any>undefined, { urn })
            case "aws:ec2/vpcPeeringConnection:VpcPeeringConnection":
                return new VpcPeeringConnection(name, <any>undefined, { urn })
            case "aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter":
                return new VpcPeeringConnectionAccepter(name, <any>undefined, { urn })
            case "aws:ec2/vpnConnection:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "aws:ec2/vpnConnectionRoute:VpnConnectionRoute":
                return new VpnConnectionRoute(name, <any>undefined, { urn })
            case "aws:ec2/vpnGateway:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment":
                return new VpnGatewayAttachment(name, <any>undefined, { urn })
            case "aws:ec2/vpnGatewayRoutePropagation:VpnGatewayRoutePropagation":
                return new VpnGatewayRoutePropagation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ec2/ami", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/amiCopy", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/amiFromInstance", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/amiLaunchPermission", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/availabilityZoneGroup", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/capacityReservation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/carrierGateway", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/customerGateway", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/dedicatedHost", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/defaultNetworkAcl", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/defaultRouteTable", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/defaultSecurityGroup", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/defaultSubnet", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/defaultVpc", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/defaultVpcDhcpOptions", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/egressOnlyInternetGateway", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/eip", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/eipAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/fleet", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/flowLog", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/instance", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/internetGateway", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/internetGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/keyPair", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/launchConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/launchTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/localGatewayRoute", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/localGatewayRouteTableVpcAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/mainRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/managedPrefixList", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/managedPrefixListEntry", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/natGateway", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/networkAcl", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/networkAclAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/networkAclRule", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/networkInsightsAnalysis", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/networkInsightsPath", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterface", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterfaceAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterfaceSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/peeringConnectionOptions", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/placementGroup", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/proxyProtocolPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/route", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/routeTable", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/routeTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/securityGroup", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/securityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/serialConsoleAccess", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/snapshotCreateVolumePermission", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/spotDatafeedSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/spotFleetRequest", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/spotInstanceRequest", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/subnet", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/subnetCidrReservation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/tag", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorFilter", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorFilterRule", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorSession", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorTarget", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/transitGatewayPeeringAttachmentAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/volumeAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpc", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcDhcpOptions", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcDhcpOptionsAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointConnectionNotification", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointService", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointServiceAllowedPrinciple", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointSubnetAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpam", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamOrganizationAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamPool", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamPoolCidr", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamPoolCidrAllocation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamPreviewNextCidr", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpamScope", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpv4CidrBlockAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpv6CidrBlockAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcPeeringConnection", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpcPeeringConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpnConnection", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpnConnectionRoute", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGateway", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGatewayRoutePropagation", _module)
