// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * `aws.ec2.Route` provides details about a specific Route.
 *
 * This resource can prove useful when finding the resource associated with a CIDR. For example, finding the peering connection associated with a CIDR value.
 *
 * ## Example Usage
 *
 * The following example shows how one might use a CIDR value to find a network interface id and use this to create a data source of that network interface.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const subnetId = config.requireObject("subnetId");
 * const selected = aws.ec2.getRouteTable({
 *     subnetId: subnetId,
 * });
 * const route = aws.ec2.getRoute({
 *     routeTableId: aws_route_table.selected.id,
 *     destinationCidrBlock: "10.0.1.0/24",
 * });
 * const interface = route.then(route => aws.ec2.getNetworkInterface({
 *     id: route.networkInterfaceId,
 * }));
 * ```
 */
export function getRoute(args: GetRouteArgs, opts?: pulumi.InvokeOptions): Promise<GetRouteResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aws:ec2/getRoute:getRoute", {
        "carrierGatewayId": args.carrierGatewayId,
        "destinationCidrBlock": args.destinationCidrBlock,
        "destinationIpv6CidrBlock": args.destinationIpv6CidrBlock,
        "destinationPrefixListId": args.destinationPrefixListId,
        "egressOnlyGatewayId": args.egressOnlyGatewayId,
        "gatewayId": args.gatewayId,
        "instanceId": args.instanceId,
        "localGatewayId": args.localGatewayId,
        "natGatewayId": args.natGatewayId,
        "networkInterfaceId": args.networkInterfaceId,
        "routeTableId": args.routeTableId,
        "transitGatewayId": args.transitGatewayId,
        "vpcPeeringConnectionId": args.vpcPeeringConnectionId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRoute.
 */
export interface GetRouteArgs {
    /**
     * EC2 Carrier Gateway ID of the Route belonging to the Route Table.
     */
    carrierGatewayId?: string;
    /**
     * CIDR block of the Route belonging to the Route Table.
     */
    destinationCidrBlock?: string;
    /**
     * IPv6 CIDR block of the Route belonging to the Route Table.
     */
    destinationIpv6CidrBlock?: string;
    /**
     * The ID of a managed prefix list destination of the Route belonging to the Route Table.
     */
    destinationPrefixListId?: string;
    /**
     * Egress Only Gateway ID of the Route belonging to the Route Table.
     */
    egressOnlyGatewayId?: string;
    /**
     * Gateway ID of the Route belonging to the Route Table.
     */
    gatewayId?: string;
    /**
     * Instance ID of the Route belonging to the Route Table.
     */
    instanceId?: string;
    /**
     * Local Gateway ID of the Route belonging to the Route Table.
     */
    localGatewayId?: string;
    /**
     * NAT Gateway ID of the Route belonging to the Route Table.
     */
    natGatewayId?: string;
    /**
     * Network Interface ID of the Route belonging to the Route Table.
     */
    networkInterfaceId?: string;
    /**
     * The ID of the specific Route Table containing the Route entry.
     */
    routeTableId: string;
    /**
     * EC2 Transit Gateway ID of the Route belonging to the Route Table.
     */
    transitGatewayId?: string;
    /**
     * VPC Peering Connection ID of the Route belonging to the Route Table.
     */
    vpcPeeringConnectionId?: string;
}

/**
 * A collection of values returned by getRoute.
 */
export interface GetRouteResult {
    readonly carrierGatewayId: string;
    readonly destinationCidrBlock: string;
    readonly destinationIpv6CidrBlock: string;
    readonly destinationPrefixListId: string;
    readonly egressOnlyGatewayId: string;
    readonly gatewayId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly localGatewayId: string;
    readonly natGatewayId: string;
    readonly networkInterfaceId: string;
    readonly routeTableId: string;
    readonly transitGatewayId: string;
    readonly vpcPeeringConnectionId: string;
}
