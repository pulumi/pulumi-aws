// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage a [default AWS VPC subnet](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html#default-vpc-basics) in the current region.
 *
 * The `aws.ec2.DefaultSubnet` behaves differently from normal resources, in that this provider does not _create_ this resource but instead "adopts" it into management.
 *
 * The `aws.ec2.DefaultSubnet` resource allows you to manage a region's default VPC subnet but this provider cannot destroy it. Removing this resource from your configuration will remove it from your statefile and the provider management.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const defaultAz1 = new aws.ec2.DefaultSubnet("default_az1", {
 *     availabilityZone: "us-west-2a",
 *     tags: {
 *         Name: "Default subnet for us-west-2a",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Subnets can be imported using the `subnet id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/defaultSubnet:DefaultSubnet public_subnet subnet-9d4a7b6c
 * ```
 */
export class DefaultSubnet extends pulumi.CustomResource {
    /**
     * Get an existing DefaultSubnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultSubnetState, opts?: pulumi.CustomResourceOptions): DefaultSubnet {
        return new DefaultSubnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/defaultSubnet:DefaultSubnet';

    /**
     * Returns true if the given object is an instance of DefaultSubnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultSubnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultSubnet.__pulumiType;
    }

    /**
     * ARN for the subnet.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Whether IPv6 addresses are assigned on creation.
     * * `availabilityZoneId`- AZ ID of the subnet.
     */
    public /*out*/ readonly assignIpv6AddressOnCreation!: pulumi.Output<boolean>;
    /**
     * AZ for the subnet.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly availabilityZoneId!: pulumi.Output<string>;
    /**
     * CIDR block for the subnet.
     */
    public /*out*/ readonly cidrBlock!: pulumi.Output<string>;
    public readonly customerOwnedIpv4Pool!: pulumi.Output<string | undefined>;
    public readonly enableDns64!: pulumi.Output<boolean | undefined>;
    public readonly enableResourceNameDnsARecordOnLaunch!: pulumi.Output<boolean | undefined>;
    public readonly enableResourceNameDnsAaaaRecordOnLaunch!: pulumi.Output<boolean | undefined>;
    /**
     * IPv6 CIDR block.
     */
    public /*out*/ readonly ipv6CidrBlock!: pulumi.Output<string>;
    public /*out*/ readonly ipv6CidrBlockAssociationId!: pulumi.Output<string>;
    public readonly ipv6Native!: pulumi.Output<boolean | undefined>;
    public readonly mapCustomerOwnedIpOnLaunch!: pulumi.Output<boolean | undefined>;
    /**
     * Whether instances launched into the subnet should be assigned a public IP address.
     */
    public readonly mapPublicIpOnLaunch!: pulumi.Output<boolean>;
    public readonly outpostArn!: pulumi.Output<string | undefined>;
    /**
     * ID of the AWS account that owns the subnet.
     */
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public readonly privateDnsHostnameTypeOnLaunch!: pulumi.Output<string>;
    /**
     * Map of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * VPC ID.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a DefaultSubnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultSubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultSubnetArgs | DefaultSubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultSubnetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["assignIpv6AddressOnCreation"] = state ? state.assignIpv6AddressOnCreation : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["availabilityZoneId"] = state ? state.availabilityZoneId : undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["customerOwnedIpv4Pool"] = state ? state.customerOwnedIpv4Pool : undefined;
            resourceInputs["enableDns64"] = state ? state.enableDns64 : undefined;
            resourceInputs["enableResourceNameDnsARecordOnLaunch"] = state ? state.enableResourceNameDnsARecordOnLaunch : undefined;
            resourceInputs["enableResourceNameDnsAaaaRecordOnLaunch"] = state ? state.enableResourceNameDnsAaaaRecordOnLaunch : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["ipv6CidrBlockAssociationId"] = state ? state.ipv6CidrBlockAssociationId : undefined;
            resourceInputs["ipv6Native"] = state ? state.ipv6Native : undefined;
            resourceInputs["mapCustomerOwnedIpOnLaunch"] = state ? state.mapCustomerOwnedIpOnLaunch : undefined;
            resourceInputs["mapPublicIpOnLaunch"] = state ? state.mapPublicIpOnLaunch : undefined;
            resourceInputs["outpostArn"] = state ? state.outpostArn : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["privateDnsHostnameTypeOnLaunch"] = state ? state.privateDnsHostnameTypeOnLaunch : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as DefaultSubnetArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["customerOwnedIpv4Pool"] = args ? args.customerOwnedIpv4Pool : undefined;
            resourceInputs["enableDns64"] = args ? args.enableDns64 : undefined;
            resourceInputs["enableResourceNameDnsARecordOnLaunch"] = args ? args.enableResourceNameDnsARecordOnLaunch : undefined;
            resourceInputs["enableResourceNameDnsAaaaRecordOnLaunch"] = args ? args.enableResourceNameDnsAaaaRecordOnLaunch : undefined;
            resourceInputs["ipv6Native"] = args ? args.ipv6Native : undefined;
            resourceInputs["mapCustomerOwnedIpOnLaunch"] = args ? args.mapCustomerOwnedIpOnLaunch : undefined;
            resourceInputs["mapPublicIpOnLaunch"] = args ? args.mapPublicIpOnLaunch : undefined;
            resourceInputs["outpostArn"] = args ? args.outpostArn : undefined;
            resourceInputs["privateDnsHostnameTypeOnLaunch"] = args ? args.privateDnsHostnameTypeOnLaunch : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["assignIpv6AddressOnCreation"] = undefined /*out*/;
            resourceInputs["availabilityZoneId"] = undefined /*out*/;
            resourceInputs["cidrBlock"] = undefined /*out*/;
            resourceInputs["ipv6CidrBlock"] = undefined /*out*/;
            resourceInputs["ipv6CidrBlockAssociationId"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultSubnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultSubnet resources.
 */
export interface DefaultSubnetState {
    /**
     * ARN for the subnet.
     */
    arn?: pulumi.Input<string>;
    /**
     * Whether IPv6 addresses are assigned on creation.
     * * `availabilityZoneId`- AZ ID of the subnet.
     */
    assignIpv6AddressOnCreation?: pulumi.Input<boolean>;
    /**
     * AZ for the subnet.
     */
    availabilityZone?: pulumi.Input<string>;
    availabilityZoneId?: pulumi.Input<string>;
    /**
     * CIDR block for the subnet.
     */
    cidrBlock?: pulumi.Input<string>;
    customerOwnedIpv4Pool?: pulumi.Input<string>;
    enableDns64?: pulumi.Input<boolean>;
    enableResourceNameDnsARecordOnLaunch?: pulumi.Input<boolean>;
    enableResourceNameDnsAaaaRecordOnLaunch?: pulumi.Input<boolean>;
    /**
     * IPv6 CIDR block.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    ipv6CidrBlockAssociationId?: pulumi.Input<string>;
    ipv6Native?: pulumi.Input<boolean>;
    mapCustomerOwnedIpOnLaunch?: pulumi.Input<boolean>;
    /**
     * Whether instances launched into the subnet should be assigned a public IP address.
     */
    mapPublicIpOnLaunch?: pulumi.Input<boolean>;
    outpostArn?: pulumi.Input<string>;
    /**
     * ID of the AWS account that owns the subnet.
     */
    ownerId?: pulumi.Input<string>;
    privateDnsHostnameTypeOnLaunch?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC ID.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultSubnet resource.
 */
export interface DefaultSubnetArgs {
    /**
     * AZ for the subnet.
     */
    availabilityZone: pulumi.Input<string>;
    customerOwnedIpv4Pool?: pulumi.Input<string>;
    enableDns64?: pulumi.Input<boolean>;
    enableResourceNameDnsARecordOnLaunch?: pulumi.Input<boolean>;
    enableResourceNameDnsAaaaRecordOnLaunch?: pulumi.Input<boolean>;
    ipv6Native?: pulumi.Input<boolean>;
    mapCustomerOwnedIpOnLaunch?: pulumi.Input<boolean>;
    /**
     * Whether instances launched into the subnet should be assigned a public IP address.
     */
    mapPublicIpOnLaunch?: pulumi.Input<boolean>;
    outpostArn?: pulumi.Input<string>;
    privateDnsHostnameTypeOnLaunch?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
