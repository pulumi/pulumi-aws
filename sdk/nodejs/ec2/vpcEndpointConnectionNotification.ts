// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a VPC Endpoint connection notification resource.
 * Connection notifications notify subscribers of VPC Endpoint events.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const topicPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["vpce.amazonaws.com"],
 *         }],
 *         actions: ["SNS:Publish"],
 *         resources: ["arn:aws:sns:*:*:vpce-notification-topic"],
 *     }],
 * });
 * const topicTopic = new aws.sns.Topic("topicTopic", {policy: topicPolicyDocument.then(topicPolicyDocument => topicPolicyDocument.json)});
 * const fooVpcEndpointService = new aws.ec2.VpcEndpointService("fooVpcEndpointService", {
 *     acceptanceRequired: false,
 *     networkLoadBalancerArns: [aws_lb.test.arn],
 * });
 * const fooVpcEndpointConnectionNotification = new aws.ec2.VpcEndpointConnectionNotification("fooVpcEndpointConnectionNotification", {
 *     vpcEndpointServiceId: fooVpcEndpointService.id,
 *     connectionNotificationArn: topicTopic.arn,
 *     connectionEvents: [
 *         "Accept",
 *         "Reject",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_vpc_endpoint_connection_notification.foo
 *
 *  id = "vpce-nfn-09e6ed3b4efba2263" } Using `pulumi import`, import VPC Endpoint connection notifications using the VPC endpoint connection notification `id`. For exampleconsole % pulumi import aws_vpc_endpoint_connection_notification.foo vpce-nfn-09e6ed3b4efba2263
 */
export class VpcEndpointConnectionNotification extends pulumi.CustomResource {
    /**
     * Get an existing VpcEndpointConnectionNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcEndpointConnectionNotificationState, opts?: pulumi.CustomResourceOptions): VpcEndpointConnectionNotification {
        return new VpcEndpointConnectionNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification';

    /**
     * Returns true if the given object is an instance of VpcEndpointConnectionNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcEndpointConnectionNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpointConnectionNotification.__pulumiType;
    }

    /**
     * One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
     *
     * > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
     */
    public readonly connectionEvents!: pulumi.Output<string[]>;
    /**
     * The ARN of the SNS topic for the notifications.
     */
    public readonly connectionNotificationArn!: pulumi.Output<string>;
    /**
     * The type of notification.
     */
    public /*out*/ readonly notificationType!: pulumi.Output<string>;
    /**
     * The state of the notification.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The ID of the VPC Endpoint to receive notifications for.
     */
    public readonly vpcEndpointId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the VPC Endpoint Service to receive notifications for.
     */
    public readonly vpcEndpointServiceId!: pulumi.Output<string | undefined>;

    /**
     * Create a VpcEndpointConnectionNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcEndpointConnectionNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcEndpointConnectionNotificationArgs | VpcEndpointConnectionNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcEndpointConnectionNotificationState | undefined;
            resourceInputs["connectionEvents"] = state ? state.connectionEvents : undefined;
            resourceInputs["connectionNotificationArn"] = state ? state.connectionNotificationArn : undefined;
            resourceInputs["notificationType"] = state ? state.notificationType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vpcEndpointId"] = state ? state.vpcEndpointId : undefined;
            resourceInputs["vpcEndpointServiceId"] = state ? state.vpcEndpointServiceId : undefined;
        } else {
            const args = argsOrState as VpcEndpointConnectionNotificationArgs | undefined;
            if ((!args || args.connectionEvents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionEvents'");
            }
            if ((!args || args.connectionNotificationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionNotificationArn'");
            }
            resourceInputs["connectionEvents"] = args ? args.connectionEvents : undefined;
            resourceInputs["connectionNotificationArn"] = args ? args.connectionNotificationArn : undefined;
            resourceInputs["vpcEndpointId"] = args ? args.vpcEndpointId : undefined;
            resourceInputs["vpcEndpointServiceId"] = args ? args.vpcEndpointServiceId : undefined;
            resourceInputs["notificationType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcEndpointConnectionNotification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcEndpointConnectionNotification resources.
 */
export interface VpcEndpointConnectionNotificationState {
    /**
     * One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
     *
     * > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
     */
    connectionEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the SNS topic for the notifications.
     */
    connectionNotificationArn?: pulumi.Input<string>;
    /**
     * The type of notification.
     */
    notificationType?: pulumi.Input<string>;
    /**
     * The state of the notification.
     */
    state?: pulumi.Input<string>;
    /**
     * The ID of the VPC Endpoint to receive notifications for.
     */
    vpcEndpointId?: pulumi.Input<string>;
    /**
     * The ID of the VPC Endpoint Service to receive notifications for.
     */
    vpcEndpointServiceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcEndpointConnectionNotification resource.
 */
export interface VpcEndpointConnectionNotificationArgs {
    /**
     * One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
     *
     * > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
     */
    connectionEvents: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the SNS topic for the notifications.
     */
    connectionNotificationArn: pulumi.Input<string>;
    /**
     * The ID of the VPC Endpoint to receive notifications for.
     */
    vpcEndpointId?: pulumi.Input<string>;
    /**
     * The ID of the VPC Endpoint Service to receive notifications for.
     */
    vpcEndpointServiceId?: pulumi.Input<string>;
}
