// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyState, opts?: pulumi.CustomResourceOptions): Key {
        return new Key(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:kms/key:Key';

    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Key {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly bypassPolicyLockoutSafetyCheck!: pulumi.Output<boolean | undefined>;
    public readonly customKeyStoreId!: pulumi.Output<string | undefined>;
    public readonly customerMasterKeySpec!: pulumi.Output<string | undefined>;
    public readonly deletionWindowInDays!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly enableKeyRotation!: pulumi.Output<boolean | undefined>;
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly keyId!: pulumi.Output<string>;
    public readonly keyUsage!: pulumi.Output<string | undefined>;
    public readonly multiRegion!: pulumi.Output<boolean>;
    public readonly policy!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyArgs | KeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = state ? state.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["customKeyStoreId"] = state ? state.customKeyStoreId : undefined;
            resourceInputs["customerMasterKeySpec"] = state ? state.customerMasterKeySpec : undefined;
            resourceInputs["deletionWindowInDays"] = state ? state.deletionWindowInDays : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableKeyRotation"] = state ? state.enableKeyRotation : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyUsage"] = state ? state.keyUsage : undefined;
            resourceInputs["multiRegion"] = state ? state.multiRegion : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as KeyArgs | undefined;
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = args ? args.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["customKeyStoreId"] = args ? args.customKeyStoreId : undefined;
            resourceInputs["customerMasterKeySpec"] = args ? args.customerMasterKeySpec : undefined;
            resourceInputs["deletionWindowInDays"] = args ? args.deletionWindowInDays : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableKeyRotation"] = args ? args.enableKeyRotation : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["keyUsage"] = args ? args.keyUsage : undefined;
            resourceInputs["multiRegion"] = args ? args.multiRegion : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Key.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Key resources.
 */
export interface KeyState {
    arn?: pulumi.Input<string>;
    bypassPolicyLockoutSafetyCheck?: pulumi.Input<boolean>;
    customKeyStoreId?: pulumi.Input<string>;
    customerMasterKeySpec?: pulumi.Input<string>;
    deletionWindowInDays?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    enableKeyRotation?: pulumi.Input<boolean>;
    isEnabled?: pulumi.Input<boolean>;
    keyId?: pulumi.Input<string>;
    keyUsage?: pulumi.Input<string>;
    multiRegion?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    bypassPolicyLockoutSafetyCheck?: pulumi.Input<boolean>;
    customKeyStoreId?: pulumi.Input<string>;
    customerMasterKeySpec?: pulumi.Input<string>;
    deletionWindowInDays?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    enableKeyRotation?: pulumi.Input<boolean>;
    isEnabled?: pulumi.Input<boolean>;
    keyUsage?: pulumi.Input<string>;
    multiRegion?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
