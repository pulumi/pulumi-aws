// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AliasArgs, AliasState } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;

export { CiphertextArgs, CiphertextState } from "./ciphertext";
export type Ciphertext = import("./ciphertext").Ciphertext;
export const Ciphertext: typeof import("./ciphertext").Ciphertext = null as any;

export { ExternalKeyArgs, ExternalKeyState } from "./externalKey";
export type ExternalKey = import("./externalKey").ExternalKey;
export const ExternalKey: typeof import("./externalKey").ExternalKey = null as any;

export { GetAliasArgs, GetAliasResult, GetAliasOutputArgs } from "./getAlias";
export const getAlias: typeof import("./getAlias").getAlias = null as any;
export const getAliasOutput: typeof import("./getAlias").getAliasOutput = null as any;

export { GetCipherTextArgs, GetCipherTextResult, GetCipherTextOutputArgs } from "./getCipherText";
export const getCipherText: typeof import("./getCipherText").getCipherText = null as any;
export const getCipherTextOutput: typeof import("./getCipherText").getCipherTextOutput = null as any;

export { GetKeyArgs, GetKeyResult, GetKeyOutputArgs } from "./getKey";
export const getKey: typeof import("./getKey").getKey = null as any;
export const getKeyOutput: typeof import("./getKey").getKeyOutput = null as any;

export { GetPublicKeyArgs, GetPublicKeyResult, GetPublicKeyOutputArgs } from "./getPublicKey";
export const getPublicKey: typeof import("./getPublicKey").getPublicKey = null as any;
export const getPublicKeyOutput: typeof import("./getPublicKey").getPublicKeyOutput = null as any;

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;

export { GetSecretsArgs, GetSecretsResult, GetSecretsOutputArgs } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;

export { GrantArgs, GrantState } from "./grant";
export type Grant = import("./grant").Grant;
export const Grant: typeof import("./grant").Grant = null as any;

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;

export { ReplicaExternalKeyArgs, ReplicaExternalKeyState } from "./replicaExternalKey";
export type ReplicaExternalKey = import("./replicaExternalKey").ReplicaExternalKey;
export const ReplicaExternalKey: typeof import("./replicaExternalKey").ReplicaExternalKey = null as any;

export { ReplicaKeyArgs, ReplicaKeyState } from "./replicaKey";
export type ReplicaKey = import("./replicaKey").ReplicaKey;
export const ReplicaKey: typeof import("./replicaKey").ReplicaKey = null as any;

utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));
utilities.lazyLoad(exports, ["Ciphertext"], () => require("./ciphertext"));
utilities.lazyLoad(exports, ["ExternalKey"], () => require("./externalKey"));
utilities.lazyLoad(exports, ["getAlias","getAliasOutput"], () => require("./getAlias"));
utilities.lazyLoad(exports, ["getCipherText","getCipherTextOutput"], () => require("./getCipherText"));
utilities.lazyLoad(exports, ["getKey","getKeyOutput"], () => require("./getKey"));
utilities.lazyLoad(exports, ["getPublicKey","getPublicKeyOutput"], () => require("./getPublicKey"));
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));
utilities.lazyLoad(exports, ["Grant"], () => require("./grant"));
utilities.lazyLoad(exports, ["Key"], () => require("./key"));
utilities.lazyLoad(exports, ["ReplicaExternalKey"], () => require("./replicaExternalKey"));
utilities.lazyLoad(exports, ["ReplicaKey"], () => require("./replicaKey"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:kms/alias:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "aws:kms/ciphertext:Ciphertext":
                return new Ciphertext(name, <any>undefined, { urn })
            case "aws:kms/externalKey:ExternalKey":
                return new ExternalKey(name, <any>undefined, { urn })
            case "aws:kms/grant:Grant":
                return new Grant(name, <any>undefined, { urn })
            case "aws:kms/key:Key":
                return new Key(name, <any>undefined, { urn })
            case "aws:kms/replicaExternalKey:ReplicaExternalKey":
                return new ReplicaExternalKey(name, <any>undefined, { urn })
            case "aws:kms/replicaKey:ReplicaKey":
                return new ReplicaKey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "kms/alias", _module)
pulumi.runtime.registerResourceModule("aws", "kms/ciphertext", _module)
pulumi.runtime.registerResourceModule("aws", "kms/externalKey", _module)
pulumi.runtime.registerResourceModule("aws", "kms/grant", _module)
pulumi.runtime.registerResourceModule("aws", "kms/key", _module)
pulumi.runtime.registerResourceModule("aws", "kms/replicaExternalKey", _module)
pulumi.runtime.registerResourceModule("aws", "kms/replicaKey", _module)
