// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Kendra Thesaurus.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kendra.Thesaurus("example", {
 *     indexId: aws_kendra_index.example.id,
 *     roleArn: aws_iam_role.example.arn,
 *     sourceS3Path: {
 *         bucket: aws_s3_bucket.example.id,
 *         key: aws_s3_object.example.key,
 *     },
 *     tags: {
 *         Name: "Example Kendra Thesaurus",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_kendra_thesaurus.example
 *
 *  id = "thesaurus-123456780/idx-8012925589" } Using `pulumi import`, import `aws_kendra_thesaurus` using the unique identifiers of the thesaurus and index separated by a slash (`/`). For exampleconsole % pulumi import aws_kendra_thesaurus.example thesaurus-123456780/idx-8012925589
 */
export class Thesaurus extends pulumi.CustomResource {
    /**
     * Get an existing Thesaurus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThesaurusState, opts?: pulumi.CustomResourceOptions): Thesaurus {
        return new Thesaurus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:kendra/thesaurus:Thesaurus';

    /**
     * Returns true if the given object is an instance of Thesaurus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Thesaurus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Thesaurus.__pulumiType;
    }

    /**
     * ARN of the thesaurus.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The description for a thesaurus.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the index for a thesaurus.
     */
    public readonly indexId!: pulumi.Output<string>;
    /**
     * The name for the thesaurus.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The S3 path where your thesaurus file sits in S3. Detailed below.
     *
     * The `sourceS3Path` configuration block supports the following arguments:
     */
    public readonly sourceS3Path!: pulumi.Output<outputs.kendra.ThesaurusSourceS3Path>;
    /**
     * The current status of the thesaurus.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly thesaurusId!: pulumi.Output<string>;

    /**
     * Create a Thesaurus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThesaurusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThesaurusArgs | ThesaurusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThesaurusState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["sourceS3Path"] = state ? state.sourceS3Path : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["thesaurusId"] = state ? state.thesaurusId : undefined;
        } else {
            const args = argsOrState as ThesaurusArgs | undefined;
            if ((!args || args.indexId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexId'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.sourceS3Path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceS3Path'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexId"] = args ? args.indexId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["sourceS3Path"] = args ? args.sourceS3Path : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["thesaurusId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Thesaurus.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Thesaurus resources.
 */
export interface ThesaurusState {
    /**
     * ARN of the thesaurus.
     */
    arn?: pulumi.Input<string>;
    /**
     * The description for a thesaurus.
     */
    description?: pulumi.Input<string>;
    /**
     * The identifier of the index for a thesaurus.
     */
    indexId?: pulumi.Input<string>;
    /**
     * The name for the thesaurus.
     */
    name?: pulumi.Input<string>;
    /**
     * The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The S3 path where your thesaurus file sits in S3. Detailed below.
     *
     * The `sourceS3Path` configuration block supports the following arguments:
     */
    sourceS3Path?: pulumi.Input<inputs.kendra.ThesaurusSourceS3Path>;
    /**
     * The current status of the thesaurus.
     */
    status?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    thesaurusId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Thesaurus resource.
 */
export interface ThesaurusArgs {
    /**
     * The description for a thesaurus.
     */
    description?: pulumi.Input<string>;
    /**
     * The identifier of the index for a thesaurus.
     */
    indexId: pulumi.Input<string>;
    /**
     * The name for the thesaurus.
     */
    name?: pulumi.Input<string>;
    /**
     * The IAM (Identity and Access Management) role used to access the thesaurus file in S3.
     */
    roleArn: pulumi.Input<string>;
    /**
     * The S3 path where your thesaurus file sits in S3. Detailed below.
     *
     * The `sourceS3Path` configuration block supports the following arguments:
     */
    sourceS3Path: pulumi.Input<inputs.kendra.ThesaurusSourceS3Path>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
