// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DataSourceArgs, DataSourceState } from "./dataSource";
export type DataSource = import("./dataSource").DataSource;
export const DataSource: typeof import("./dataSource").DataSource = null as any;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));

export { ExperienceArgs, ExperienceState } from "./experience";
export type Experience = import("./experience").Experience;
export const Experience: typeof import("./experience").Experience = null as any;
utilities.lazyLoad(exports, ["Experience"], () => require("./experience"));

export { FaqArgs, FaqState } from "./faq";
export type Faq = import("./faq").Faq;
export const Faq: typeof import("./faq").Faq = null as any;
utilities.lazyLoad(exports, ["Faq"], () => require("./faq"));

export { GetExperienceArgs, GetExperienceResult, GetExperienceOutputArgs } from "./getExperience";
export const getExperience: typeof import("./getExperience").getExperience = null as any;
export const getExperienceOutput: typeof import("./getExperience").getExperienceOutput = null as any;
utilities.lazyLoad(exports, ["getExperience","getExperienceOutput"], () => require("./getExperience"));

export { GetFaqArgs, GetFaqResult, GetFaqOutputArgs } from "./getFaq";
export const getFaq: typeof import("./getFaq").getFaq = null as any;
export const getFaqOutput: typeof import("./getFaq").getFaqOutput = null as any;
utilities.lazyLoad(exports, ["getFaq","getFaqOutput"], () => require("./getFaq"));

export { GetIndexArgs, GetIndexResult, GetIndexOutputArgs } from "./getIndex";
export const getIndex: typeof import("./getIndex").getIndex = null as any;
export const getIndexOutput: typeof import("./getIndex").getIndexOutput = null as any;
utilities.lazyLoad(exports, ["getIndex","getIndexOutput"], () => require("./getIndex"));

export { GetQuerySuggestionsBlockListArgs, GetQuerySuggestionsBlockListResult, GetQuerySuggestionsBlockListOutputArgs } from "./getQuerySuggestionsBlockList";
export const getQuerySuggestionsBlockList: typeof import("./getQuerySuggestionsBlockList").getQuerySuggestionsBlockList = null as any;
export const getQuerySuggestionsBlockListOutput: typeof import("./getQuerySuggestionsBlockList").getQuerySuggestionsBlockListOutput = null as any;
utilities.lazyLoad(exports, ["getQuerySuggestionsBlockList","getQuerySuggestionsBlockListOutput"], () => require("./getQuerySuggestionsBlockList"));

export { GetThesaurusArgs, GetThesaurusResult, GetThesaurusOutputArgs } from "./getThesaurus";
export const getThesaurus: typeof import("./getThesaurus").getThesaurus = null as any;
export const getThesaurusOutput: typeof import("./getThesaurus").getThesaurusOutput = null as any;
utilities.lazyLoad(exports, ["getThesaurus","getThesaurusOutput"], () => require("./getThesaurus"));

export { IndexArgs, IndexState } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { QuerySuggestionsBlockListArgs, QuerySuggestionsBlockListState } from "./querySuggestionsBlockList";
export type QuerySuggestionsBlockList = import("./querySuggestionsBlockList").QuerySuggestionsBlockList;
export const QuerySuggestionsBlockList: typeof import("./querySuggestionsBlockList").QuerySuggestionsBlockList = null as any;
utilities.lazyLoad(exports, ["QuerySuggestionsBlockList"], () => require("./querySuggestionsBlockList"));

export { ThesaurusArgs, ThesaurusState } from "./thesaurus";
export type Thesaurus = import("./thesaurus").Thesaurus;
export const Thesaurus: typeof import("./thesaurus").Thesaurus = null as any;
utilities.lazyLoad(exports, ["Thesaurus"], () => require("./thesaurus"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:kendra/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "aws:kendra/experience:Experience":
                return new Experience(name, <any>undefined, { urn })
            case "aws:kendra/faq:Faq":
                return new Faq(name, <any>undefined, { urn })
            case "aws:kendra/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList":
                return new QuerySuggestionsBlockList(name, <any>undefined, { urn })
            case "aws:kendra/thesaurus:Thesaurus":
                return new Thesaurus(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "kendra/dataSource", _module)
pulumi.runtime.registerResourceModule("aws", "kendra/experience", _module)
pulumi.runtime.registerResourceModule("aws", "kendra/faq", _module)
pulumi.runtime.registerResourceModule("aws", "kendra/index", _module)
pulumi.runtime.registerResourceModule("aws", "kendra/querySuggestionsBlockList", _module)
pulumi.runtime.registerResourceModule("aws", "kendra/thesaurus", _module)
