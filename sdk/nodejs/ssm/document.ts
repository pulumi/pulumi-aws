// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Document extends pulumi.CustomResource {
    /**
     * Get an existing Document resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DocumentState, opts?: pulumi.CustomResourceOptions): Document {
        return new Document(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:ssm/document:Document';

    /**
     * Returns true if the given object is an instance of Document.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Document {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Document.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly attachmentsSources!: pulumi.Output<outputs.ssm.DocumentAttachmentsSource[] | undefined>;
    public readonly content!: pulumi.Output<string>;
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public /*out*/ readonly defaultVersion!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public readonly documentFormat!: pulumi.Output<string | undefined>;
    public readonly documentType!: pulumi.Output<string>;
    public /*out*/ readonly documentVersion!: pulumi.Output<string>;
    public /*out*/ readonly hash!: pulumi.Output<string>;
    public /*out*/ readonly hashType!: pulumi.Output<string>;
    public /*out*/ readonly latestVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public /*out*/ readonly parameters!: pulumi.Output<outputs.ssm.DocumentParameter[]>;
    public readonly permissions!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly platformTypes!: pulumi.Output<string[]>;
    public /*out*/ readonly schemaVersion!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly targetType!: pulumi.Output<string | undefined>;
    public readonly versionName!: pulumi.Output<string | undefined>;

    /**
     * Create a Document resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DocumentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DocumentArgs | DocumentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DocumentState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["attachmentsSources"] = state ? state.attachmentsSources : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["defaultVersion"] = state ? state.defaultVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["documentFormat"] = state ? state.documentFormat : undefined;
            resourceInputs["documentType"] = state ? state.documentType : undefined;
            resourceInputs["documentVersion"] = state ? state.documentVersion : undefined;
            resourceInputs["hash"] = state ? state.hash : undefined;
            resourceInputs["hashType"] = state ? state.hashType : undefined;
            resourceInputs["latestVersion"] = state ? state.latestVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["platformTypes"] = state ? state.platformTypes : undefined;
            resourceInputs["schemaVersion"] = state ? state.schemaVersion : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["versionName"] = state ? state.versionName : undefined;
        } else {
            const args = argsOrState as DocumentArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.documentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'documentType'");
            }
            resourceInputs["attachmentsSources"] = args ? args.attachmentsSources : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["documentFormat"] = args ? args.documentFormat : undefined;
            resourceInputs["documentType"] = args ? args.documentType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["versionName"] = args ? args.versionName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["defaultVersion"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["documentVersion"] = undefined /*out*/;
            resourceInputs["hash"] = undefined /*out*/;
            resourceInputs["hashType"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["platformTypes"] = undefined /*out*/;
            resourceInputs["schemaVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Document.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Document resources.
 */
export interface DocumentState {
    arn?: pulumi.Input<string>;
    attachmentsSources?: pulumi.Input<pulumi.Input<inputs.ssm.DocumentAttachmentsSource>[]>;
    content?: pulumi.Input<string>;
    createdDate?: pulumi.Input<string>;
    defaultVersion?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    documentFormat?: pulumi.Input<string>;
    documentType?: pulumi.Input<string>;
    documentVersion?: pulumi.Input<string>;
    hash?: pulumi.Input<string>;
    hashType?: pulumi.Input<string>;
    latestVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ssm.DocumentParameter>[]>;
    permissions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    platformTypes?: pulumi.Input<pulumi.Input<string>[]>;
    schemaVersion?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetType?: pulumi.Input<string>;
    versionName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Document resource.
 */
export interface DocumentArgs {
    attachmentsSources?: pulumi.Input<pulumi.Input<inputs.ssm.DocumentAttachmentsSource>[]>;
    content: pulumi.Input<string>;
    documentFormat?: pulumi.Input<string>;
    documentType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permissions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetType?: pulumi.Input<string>;
    versionName?: pulumi.Input<string>;
}
