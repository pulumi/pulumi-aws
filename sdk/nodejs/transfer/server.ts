// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:transfer/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly certificate!: pulumi.Output<string | undefined>;
    public readonly directoryId!: pulumi.Output<string | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly endpointDetails!: pulumi.Output<outputs.transfer.ServerEndpointDetails | undefined>;
    public readonly endpointType!: pulumi.Output<string | undefined>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly function!: pulumi.Output<string | undefined>;
    public readonly hostKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hostKeyFingerprint!: pulumi.Output<string>;
    public readonly identityProviderType!: pulumi.Output<string | undefined>;
    public readonly invocationRole!: pulumi.Output<string | undefined>;
    public readonly loggingRole!: pulumi.Output<string | undefined>;
    public readonly postAuthenticationLoginBanner!: pulumi.Output<string | undefined>;
    public readonly preAuthenticationLoginBanner!: pulumi.Output<string | undefined>;
    public readonly protocols!: pulumi.Output<string[]>;
    public readonly securityPolicyName!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly url!: pulumi.Output<string | undefined>;
    public readonly workflowDetails!: pulumi.Output<outputs.transfer.ServerWorkflowDetails | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["endpointDetails"] = state ? state.endpointDetails : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["function"] = state ? state.function : undefined;
            resourceInputs["hostKey"] = state ? state.hostKey : undefined;
            resourceInputs["hostKeyFingerprint"] = state ? state.hostKeyFingerprint : undefined;
            resourceInputs["identityProviderType"] = state ? state.identityProviderType : undefined;
            resourceInputs["invocationRole"] = state ? state.invocationRole : undefined;
            resourceInputs["loggingRole"] = state ? state.loggingRole : undefined;
            resourceInputs["postAuthenticationLoginBanner"] = state ? state.postAuthenticationLoginBanner : undefined;
            resourceInputs["preAuthenticationLoginBanner"] = state ? state.preAuthenticationLoginBanner : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["securityPolicyName"] = state ? state.securityPolicyName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["workflowDetails"] = state ? state.workflowDetails : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["endpointDetails"] = args ? args.endpointDetails : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["hostKey"] = args?.hostKey ? pulumi.secret(args.hostKey) : undefined;
            resourceInputs["identityProviderType"] = args ? args.identityProviderType : undefined;
            resourceInputs["invocationRole"] = args ? args.invocationRole : undefined;
            resourceInputs["loggingRole"] = args ? args.loggingRole : undefined;
            resourceInputs["postAuthenticationLoginBanner"] = args?.postAuthenticationLoginBanner ? pulumi.secret(args.postAuthenticationLoginBanner) : undefined;
            resourceInputs["preAuthenticationLoginBanner"] = args?.preAuthenticationLoginBanner ? pulumi.secret(args.preAuthenticationLoginBanner) : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["securityPolicyName"] = args ? args.securityPolicyName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["workflowDetails"] = args ? args.workflowDetails : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["hostKeyFingerprint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["hostKey", "postAuthenticationLoginBanner", "preAuthenticationLoginBanner"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    arn?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    directoryId?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    endpointDetails?: pulumi.Input<inputs.transfer.ServerEndpointDetails>;
    endpointType?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    function?: pulumi.Input<string>;
    hostKey?: pulumi.Input<string>;
    hostKeyFingerprint?: pulumi.Input<string>;
    identityProviderType?: pulumi.Input<string>;
    invocationRole?: pulumi.Input<string>;
    loggingRole?: pulumi.Input<string>;
    postAuthenticationLoginBanner?: pulumi.Input<string>;
    preAuthenticationLoginBanner?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    securityPolicyName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    url?: pulumi.Input<string>;
    workflowDetails?: pulumi.Input<inputs.transfer.ServerWorkflowDetails>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    certificate?: pulumi.Input<string>;
    directoryId?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    endpointDetails?: pulumi.Input<inputs.transfer.ServerEndpointDetails>;
    endpointType?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    function?: pulumi.Input<string>;
    hostKey?: pulumi.Input<string>;
    identityProviderType?: pulumi.Input<string>;
    invocationRole?: pulumi.Input<string>;
    loggingRole?: pulumi.Input<string>;
    postAuthenticationLoginBanner?: pulumi.Input<string>;
    preAuthenticationLoginBanner?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    securityPolicyName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    url?: pulumi.Input<string>;
    workflowDetails?: pulumi.Input<inputs.transfer.ServerWorkflowDetails>;
}
