// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessArgs, AccessState } from "./access";
export type Access = import("./access").Access;
export const Access: typeof import("./access").Access = null as any;
utilities.lazyLoad(exports, ["Access"], () => require("./access"));

export { AgreementArgs, AgreementState } from "./agreement";
export type Agreement = import("./agreement").Agreement;
export const Agreement: typeof import("./agreement").Agreement = null as any;
utilities.lazyLoad(exports, ["Agreement"], () => require("./agreement"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { ConnectorArgs, ConnectorState } from "./connector";
export type Connector = import("./connector").Connector;
export const Connector: typeof import("./connector").Connector = null as any;
utilities.lazyLoad(exports, ["Connector"], () => require("./connector"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:transfer/access:Access":
                return new Access(name, <any>undefined, { urn })
            case "aws:transfer/agreement:Agreement":
                return new Agreement(name, <any>undefined, { urn })
            case "aws:transfer/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "aws:transfer/connector:Connector":
                return new Connector(name, <any>undefined, { urn })
            case "aws:transfer/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "aws:transfer/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "aws:transfer/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "aws:transfer/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "aws:transfer/user:User":
                return new User(name, <any>undefined, { urn })
            case "aws:transfer/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "transfer/access", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/agreement", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/certificate", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/connector", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/profile", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/server", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/sshKey", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/tag", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/user", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/workflow", _module)
