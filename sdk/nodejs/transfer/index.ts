// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessArgs, AccessState } from "./access";
export type Access = import("./access").Access;
export const Access: typeof import("./access").Access = null as any;

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;

utilities.lazyLoad(exports, ["Access"], () => require("./access"));
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));
utilities.lazyLoad(exports, ["Server"], () => require("./server"));
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));
utilities.lazyLoad(exports, ["User"], () => require("./user"));
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:transfer/access:Access":
                return new Access(name, <any>undefined, { urn })
            case "aws:transfer/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "aws:transfer/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "aws:transfer/user:User":
                return new User(name, <any>undefined, { urn })
            case "aws:transfer/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "transfer/access", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/server", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/sshKey", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/user", _module)
pulumi.runtime.registerResourceModule("aws", "transfer/workflow", _module)
