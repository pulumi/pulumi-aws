// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a AWS Transfer AS2 Connector resource.
 *
 * ## Example Usage
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.transfer.Connector("example", {
 *     accessRole: aws_iam_role.test.arn,
 *     as2Config: {
 *         compression: "DISABLED",
 *         encryptionAlgorithm: "AWS128_CBC",
 *         messageSubject: "For Connector",
 *         localProfileId: aws_transfer_profile.local.profile_id,
 *         mdnResponse: "NONE",
 *         mdnSigningAlgorithm: "NONE",
 *         partnerProfileId: aws_transfer_profile.partner.profile_id,
 *         signingAlgorithm: "NONE",
 *     },
 *     url: "http://www.test.com",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Transfer AS2 Connector using the `connector_id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:transfer/connector:Connector example c-4221a88afd5f4362a
 * ```
 */
export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorState, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:transfer/connector:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }

    /**
     * The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
     */
    public readonly accessRole!: pulumi.Output<string>;
    /**
     * The ARN of the connector.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The parameters to configure for the connector object. Fields documented below.
     */
    public readonly as2Config!: pulumi.Output<outputs.transfer.ConnectorAs2Config>;
    /**
     * The unique identifier for the AS2 profile.
     */
    public /*out*/ readonly connectorId!: pulumi.Output<string>;
    /**
     * The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
     */
    public readonly loggingRole!: pulumi.Output<string | undefined>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The URL of the partners AS2 endpoint.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorArgs | ConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorState | undefined;
            resourceInputs["accessRole"] = state ? state.accessRole : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["as2Config"] = state ? state.as2Config : undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["loggingRole"] = state ? state.loggingRole : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ConnectorArgs | undefined;
            if ((!args || args.accessRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessRole'");
            }
            if ((!args || args.as2Config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'as2Config'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["accessRole"] = args ? args.accessRole : undefined;
            resourceInputs["as2Config"] = args ? args.as2Config : undefined;
            resourceInputs["loggingRole"] = args ? args.loggingRole : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["connectorId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connector resources.
 */
export interface ConnectorState {
    /**
     * The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
     */
    accessRole?: pulumi.Input<string>;
    /**
     * The ARN of the connector.
     */
    arn?: pulumi.Input<string>;
    /**
     * The parameters to configure for the connector object. Fields documented below.
     */
    as2Config?: pulumi.Input<inputs.transfer.ConnectorAs2Config>;
    /**
     * The unique identifier for the AS2 profile.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
     */
    loggingRole?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The URL of the partners AS2 endpoint.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    /**
     * The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
     */
    accessRole: pulumi.Input<string>;
    /**
     * The parameters to configure for the connector object. Fields documented below.
     */
    as2Config: pulumi.Input<inputs.transfer.ConnectorAs2Config>;
    /**
     * The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
     */
    loggingRole?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The URL of the partners AS2 endpoint.
     */
    url: pulumi.Input<string>;
}
