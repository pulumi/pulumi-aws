// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Attaches a resource based policy to a private CA.
 *
 * ## Example Usage
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const examplePolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [
 *         {
 *             sid: "1",
 *             effect: "Allow",
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: [data.aws_caller_identity.current.account_id],
 *             }],
 *             actions: [
 *                 "acm-pca:DescribeCertificateAuthority",
 *                 "acm-pca:GetCertificate",
 *                 "acm-pca:GetCertificateAuthorityCertificate",
 *                 "acm-pca:ListPermissions",
 *                 "acm-pca:ListTags",
 *             ],
 *             resources: [aws_acmpca_certificate_authority.example.arn],
 *         },
 *         {
 *             sid: "2",
 *             effect: Allow,
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: [data.aws_caller_identity.current.account_id],
 *             }],
 *             actions: ["acm-pca:IssueCertificate"],
 *             resources: [aws_acmpca_certificate_authority.example.arn],
 *             conditions: [{
 *                 test: "StringEquals",
 *                 variable: "acm-pca:TemplateArn",
 *                 values: ["arn:aws:acm-pca:::template/EndEntityCertificate/V1"],
 *             }],
 *         },
 *     ],
 * });
 * const examplePolicy = new aws.acmpca.Policy("examplePolicy", {
 *     resourceArn: aws_acmpca_certificate_authority.example.arn,
 *     policy: examplePolicyDocument.then(examplePolicyDocument => examplePolicyDocument.json),
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_acmpca_policy.example
 *
 *  id = "arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012" } Using `pulumi import`, import `aws_acmpca_policy` using the `resource_arn` value. For exampleconsole % pulumi import aws_acmpca_policy.example arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:acmpca/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * JSON-formatted IAM policy to attach to the specified private CA resource.
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * ARN of the private CA to associate with the policy.
     */
    public readonly resourceArn!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["resourceArn"] = state ? state.resourceArn : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.resourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceArn'");
            }
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["resourceArn"] = args ? args.resourceArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * JSON-formatted IAM policy to attach to the specified private CA resource.
     */
    policy?: pulumi.Input<string>;
    /**
     * ARN of the private CA to associate with the policy.
     */
    resourceArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * JSON-formatted IAM policy to attach to the specified private CA resource.
     */
    policy: pulumi.Input<string>;
    /**
     * ARN of the private CA to associate with the policy.
     */
    resourceArn: pulumi.Input<string>;
}
