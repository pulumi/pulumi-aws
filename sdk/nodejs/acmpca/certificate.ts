// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a resource to issue a certificate using AWS Certificate Manager Private Certificate Authority (ACM PCA).
 *
 * Certificates created using `aws.acmpca.Certificate` are not eligible for automatic renewal,
 * and must be replaced instead.
 * To issue a renewable certificate using an ACM PCA, create a `aws.acm.Certificate`
 * with the parameter `certificateAuthorityArn`.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ## Import
 *
 * ### Identity Schema
 *
 * #### Required
 *
 * - `arn` (String) Amazon Resource Name (ARN) of the ACM PCA certificate.
 *
 * Using `pulumi import`, import ACM PCA Certificates using their ARN. For example:
 *
 * console
 *
 * % pulumi import aws_acmpca_certificate.cert arn:aws:acm-pca:eu-west-1:675225743824:certificate-authority/08319ede-83g9-1400-8f21-c7d12b2b6edb/certificate/a4e9c2aa4bcfab625g1b9136464cd3a
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:acmpca/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
     */
    declare public readonly apiPassthrough: pulumi.Output<string | undefined>;
    /**
     * ARN of the certificate.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * PEM-encoded certificate value.
     */
    declare public /*out*/ readonly certificate: pulumi.Output<string>;
    /**
     * ARN of the certificate authority.
     */
    declare public readonly certificateAuthorityArn: pulumi.Output<string>;
    /**
     * PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
     */
    declare public /*out*/ readonly certificateChain: pulumi.Output<string>;
    /**
     * Certificate Signing Request in PEM format.
     */
    declare public readonly certificateSigningRequest: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
     */
    declare public readonly signingAlgorithm: pulumi.Output<string>;
    /**
     * Template to use when issuing a certificate.
     * See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
     */
    declare public readonly templateArn: pulumi.Output<string | undefined>;
    /**
     * Configures end of the validity period for the certificate. See validity block below.
     */
    declare public readonly validity: pulumi.Output<outputs.acmpca.CertificateValidity>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["apiPassthrough"] = state?.apiPassthrough;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["certificateAuthorityArn"] = state?.certificateAuthorityArn;
            resourceInputs["certificateChain"] = state?.certificateChain;
            resourceInputs["certificateSigningRequest"] = state?.certificateSigningRequest;
            resourceInputs["region"] = state?.region;
            resourceInputs["signingAlgorithm"] = state?.signingAlgorithm;
            resourceInputs["templateArn"] = state?.templateArn;
            resourceInputs["validity"] = state?.validity;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if (args?.certificateAuthorityArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityArn'");
            }
            if (args?.certificateSigningRequest === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificateSigningRequest'");
            }
            if (args?.signingAlgorithm === undefined && !opts.urn) {
                throw new Error("Missing required property 'signingAlgorithm'");
            }
            if (args?.validity === undefined && !opts.urn) {
                throw new Error("Missing required property 'validity'");
            }
            resourceInputs["apiPassthrough"] = args?.apiPassthrough;
            resourceInputs["certificateAuthorityArn"] = args?.certificateAuthorityArn;
            resourceInputs["certificateSigningRequest"] = args?.certificateSigningRequest;
            resourceInputs["region"] = args?.region;
            resourceInputs["signingAlgorithm"] = args?.signingAlgorithm;
            resourceInputs["templateArn"] = args?.templateArn;
            resourceInputs["validity"] = args?.validity;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["certificateChain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
     */
    apiPassthrough?: pulumi.Input<string>;
    /**
     * ARN of the certificate.
     */
    arn?: pulumi.Input<string>;
    /**
     * PEM-encoded certificate value.
     */
    certificate?: pulumi.Input<string>;
    /**
     * ARN of the certificate authority.
     */
    certificateAuthorityArn?: pulumi.Input<string>;
    /**
     * PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * Certificate Signing Request in PEM format.
     */
    certificateSigningRequest?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
     */
    signingAlgorithm?: pulumi.Input<string>;
    /**
     * Template to use when issuing a certificate.
     * See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
     */
    templateArn?: pulumi.Input<string>;
    /**
     * Configures end of the validity period for the certificate. See validity block below.
     */
    validity?: pulumi.Input<inputs.acmpca.CertificateValidity>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
     */
    apiPassthrough?: pulumi.Input<string>;
    /**
     * ARN of the certificate authority.
     */
    certificateAuthorityArn: pulumi.Input<string>;
    /**
     * Certificate Signing Request in PEM format.
     */
    certificateSigningRequest: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
     */
    signingAlgorithm: pulumi.Input<string>;
    /**
     * Template to use when issuing a certificate.
     * See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
     */
    templateArn?: pulumi.Input<string>;
    /**
     * Configures end of the validity period for the certificate. See validity block below.
     */
    validity: pulumi.Input<inputs.acmpca.CertificateValidity>;
}
