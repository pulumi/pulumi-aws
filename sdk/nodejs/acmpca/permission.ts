// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage an AWS Certificate Manager Private Certificate Authorities Permission.
 * Currently, this is only required in order to allow the ACM service to automatically renew certificates issued by a PCA.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleCertificateAuthority = new aws.acmpca.CertificateAuthority("exampleCertificateAuthority", {certificateAuthorityConfiguration: {
 *     keyAlgorithm: "RSA_4096",
 *     signingAlgorithm: "SHA512WITHRSA",
 *     subject: {
 *         commonName: "example.com",
 *     },
 * }});
 * const examplePermission = new aws.acmpca.Permission("examplePermission", {
 *     certificateAuthorityArn: exampleCertificateAuthority.arn,
 *     actions: [
 *         "IssueCertificate",
 *         "GetCertificate",
 *         "ListPermissions",
 *     ],
 *     principal: "acm.amazonaws.com",
 * });
 * ```
 */
export class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionState, opts?: pulumi.CustomResourceOptions): Permission {
        return new Permission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:acmpca/permission:Permission';

    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }

    /**
     * Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
     */
    public readonly actions!: pulumi.Output<string[]>;
    /**
     * ARN of the CA that grants the permissions.
     */
    public readonly certificateAuthorityArn!: pulumi.Output<string>;
    /**
     * IAM policy that is associated with the permission.
     */
    public /*out*/ readonly policy!: pulumi.Output<string>;
    /**
     * AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
     */
    public readonly principal!: pulumi.Output<string>;
    /**
     * ID of the calling account
     */
    public readonly sourceAccount!: pulumi.Output<string>;

    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionArgs | PermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["certificateAuthorityArn"] = state ? state.certificateAuthorityArn : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["sourceAccount"] = state ? state.sourceAccount : undefined;
        } else {
            const args = argsOrState as PermissionArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.certificateAuthorityArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityArn'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["certificateAuthorityArn"] = args ? args.certificateAuthorityArn : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["sourceAccount"] = args ? args.sourceAccount : undefined;
            resourceInputs["policy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Permission resources.
 */
export interface PermissionState {
    /**
     * Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
     */
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ARN of the CA that grants the permissions.
     */
    certificateAuthorityArn?: pulumi.Input<string>;
    /**
     * IAM policy that is associated with the permission.
     */
    policy?: pulumi.Input<string>;
    /**
     * AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
     */
    principal?: pulumi.Input<string>;
    /**
     * ID of the calling account
     */
    sourceAccount?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    /**
     * Actions that the specified AWS service principal can use. These include `IssueCertificate`, `GetCertificate`, and `ListPermissions`. Note that in order for ACM to automatically rotate certificates issued by a PCA, it must be granted permission on all 3 actions, as per the example above.
     */
    actions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ARN of the CA that grants the permissions.
     */
    certificateAuthorityArn: pulumi.Input<string>;
    /**
     * AWS service or identity that receives the permission. At this time, the only valid principal is `acm.amazonaws.com`.
     */
    principal: pulumi.Input<string>;
    /**
     * ID of the calling account
     */
    sourceAccount?: pulumi.Input<string>;
}
