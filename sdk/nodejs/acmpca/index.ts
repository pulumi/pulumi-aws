// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateAuthorityArgs, CertificateAuthorityState } from "./certificateAuthority";
export type CertificateAuthority = import("./certificateAuthority").CertificateAuthority;
export const CertificateAuthority: typeof import("./certificateAuthority").CertificateAuthority = null as any;
utilities.lazyLoad(exports, ["CertificateAuthority"], () => require("./certificateAuthority"));

export { CertificateAuthorityCertificateArgs, CertificateAuthorityCertificateState } from "./certificateAuthorityCertificate";
export type CertificateAuthorityCertificate = import("./certificateAuthorityCertificate").CertificateAuthorityCertificate;
export const CertificateAuthorityCertificate: typeof import("./certificateAuthorityCertificate").CertificateAuthorityCertificate = null as any;
utilities.lazyLoad(exports, ["CertificateAuthorityCertificate"], () => require("./certificateAuthorityCertificate"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCertificateAuthorityArgs, GetCertificateAuthorityResult, GetCertificateAuthorityOutputArgs } from "./getCertificateAuthority";
export const getCertificateAuthority: typeof import("./getCertificateAuthority").getCertificateAuthority = null as any;
export const getCertificateAuthorityOutput: typeof import("./getCertificateAuthority").getCertificateAuthorityOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateAuthority","getCertificateAuthorityOutput"], () => require("./getCertificateAuthority"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:acmpca/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "aws:acmpca/certificateAuthority:CertificateAuthority":
                return new CertificateAuthority(name, <any>undefined, { urn })
            case "aws:acmpca/certificateAuthorityCertificate:CertificateAuthorityCertificate":
                return new CertificateAuthorityCertificate(name, <any>undefined, { urn })
            case "aws:acmpca/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "aws:acmpca/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "acmpca/certificate", _module)
pulumi.runtime.registerResourceModule("aws", "acmpca/certificateAuthority", _module)
pulumi.runtime.registerResourceModule("aws", "acmpca/certificateAuthorityCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "acmpca/permission", _module)
pulumi.runtime.registerResourceModule("aws", "acmpca/policy", _module)
