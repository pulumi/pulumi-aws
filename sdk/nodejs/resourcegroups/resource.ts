// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Resource Groups Resource.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleDedicatedHost = new aws.ec2.DedicatedHost("exampleDedicatedHost", {
 *     instanceFamily: "t3",
 *     availabilityZone: "us-east-1a",
 *     hostRecovery: "off",
 *     autoPlacement: "on",
 * });
 * const exampleGroup = new aws.resourcegroups.Group("exampleGroup", {});
 * const exampleResource = new aws.resourcegroups.Resource("exampleResource", {
 *     groupArn: exampleGroup.arn,
 *     resourceArn: exampleDedicatedHost.arn,
 * });
 * ```
 */
export class Resource extends pulumi.CustomResource {
    /**
     * Get an existing Resource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceState, opts?: pulumi.CustomResourceOptions): Resource {
        return new Resource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:resourcegroups/resource:Resource';

    /**
     * Returns true if the given object is an instance of Resource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resource.__pulumiType;
    }

    /**
     * The name or the ARN of the resource group to add resources to.
     *
     * The following arguments are optional:
     */
    public readonly groupArn!: pulumi.Output<string>;
    /**
     * The ARN of the resource to be added to the group.
     */
    public readonly resourceArn!: pulumi.Output<string>;
    /**
     * The resource type of a resource, such as `AWS::EC2::Instance`.
     */
    public /*out*/ readonly resourceType!: pulumi.Output<string>;

    /**
     * Create a Resource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceArgs | ResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceState | undefined;
            resourceInputs["groupArn"] = state ? state.groupArn : undefined;
            resourceInputs["resourceArn"] = state ? state.resourceArn : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
        } else {
            const args = argsOrState as ResourceArgs | undefined;
            if ((!args || args.groupArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupArn'");
            }
            if ((!args || args.resourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceArn'");
            }
            resourceInputs["groupArn"] = args ? args.groupArn : undefined;
            resourceInputs["resourceArn"] = args ? args.resourceArn : undefined;
            resourceInputs["resourceType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Resource resources.
 */
export interface ResourceState {
    /**
     * The name or the ARN of the resource group to add resources to.
     *
     * The following arguments are optional:
     */
    groupArn?: pulumi.Input<string>;
    /**
     * The ARN of the resource to be added to the group.
     */
    resourceArn?: pulumi.Input<string>;
    /**
     * The resource type of a resource, such as `AWS::EC2::Instance`.
     */
    resourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Resource resource.
 */
export interface ResourceArgs {
    /**
     * The name or the ARN of the resource group to add resources to.
     *
     * The following arguments are optional:
     */
    groupArn: pulumi.Input<string>;
    /**
     * The ARN of the resource to be added to the group.
     */
    resourceArn: pulumi.Input<string>;
}
