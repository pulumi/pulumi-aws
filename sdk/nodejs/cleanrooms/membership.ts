// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a AWS Clean Rooms membership. Memberships are used to join a Clean Rooms collaboration by the invited member.
 *
 * ## Example Usage
 *
 * ### Membership with tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testMembership = new aws.cleanrooms.Membership("test_membership", {
 *     collaborationId: "1234abcd-12ab-34cd-56ef-1234567890ab",
 *     queryLogStatus: "DISABLED",
 *     defaultResultConfiguration: {
 *         roleArn: "arn:aws:iam::123456789012:role/role-name",
 *         outputConfiguration: {
 *             s3: {
 *                 bucket: "test-bucket",
 *                 resultFormat: "PARQUET",
 *                 keyPrefix: "test-prefix",
 *             },
 *         },
 *     },
 *     tags: {
 *         Project: "Terraform",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_cleanrooms_membership` using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:cleanrooms/membership:Membership membership 1234abcd-12ab-34cd-56ef-1234567890ab
 * ```
 */
export class Membership extends pulumi.CustomResource {
    /**
     * Get an existing Membership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MembershipState, opts?: pulumi.CustomResourceOptions): Membership {
        return new Membership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cleanrooms/membership:Membership';

    /**
     * Returns true if the given object is an instance of Membership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Membership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Membership.__pulumiType;
    }

    /**
     * The ARN of the membership.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ARN of the joined collaboration.
     */
    public /*out*/ readonly collaborationArn!: pulumi.Output<string>;
    /**
     * The account ID of the collaboration's creator.
     */
    public /*out*/ readonly collaborationCreatorAccountId!: pulumi.Output<string>;
    /**
     * The display name of the collaboration's creator.
     */
    public /*out*/ readonly collaborationCreatorDisplayName!: pulumi.Output<string>;
    /**
     * The ID of the collaboration to which the member was invited.
     */
    public readonly collaborationId!: pulumi.Output<string>;
    /**
     * The name of the joined collaboration.
     */
    public /*out*/ readonly collaborationName!: pulumi.Output<string>;
    /**
     * The date and time the membership was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The default configuration for a query result.
     */
    public readonly defaultResultConfiguration!: pulumi.Output<outputs.cleanrooms.MembershipDefaultResultConfiguration | undefined>;
    /**
     * The list of abilities for the invited member.
     */
    public /*out*/ readonly memberAbilities!: pulumi.Output<string[]>;
    public readonly paymentConfiguration!: pulumi.Output<outputs.cleanrooms.MembershipPaymentConfiguration | undefined>;
    /**
     * An indicator as to whether query logging has been enabled or disabled for the membership.
     */
    public readonly queryLogStatus!: pulumi.Output<string>;
    /**
     * The status of the membership.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Key value pairs which tag the membership.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The date and time the membership was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Membership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MembershipArgs | MembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MembershipState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["collaborationArn"] = state ? state.collaborationArn : undefined;
            resourceInputs["collaborationCreatorAccountId"] = state ? state.collaborationCreatorAccountId : undefined;
            resourceInputs["collaborationCreatorDisplayName"] = state ? state.collaborationCreatorDisplayName : undefined;
            resourceInputs["collaborationId"] = state ? state.collaborationId : undefined;
            resourceInputs["collaborationName"] = state ? state.collaborationName : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["defaultResultConfiguration"] = state ? state.defaultResultConfiguration : undefined;
            resourceInputs["memberAbilities"] = state ? state.memberAbilities : undefined;
            resourceInputs["paymentConfiguration"] = state ? state.paymentConfiguration : undefined;
            resourceInputs["queryLogStatus"] = state ? state.queryLogStatus : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as MembershipArgs | undefined;
            if ((!args || args.collaborationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collaborationId'");
            }
            if ((!args || args.queryLogStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryLogStatus'");
            }
            resourceInputs["collaborationId"] = args ? args.collaborationId : undefined;
            resourceInputs["defaultResultConfiguration"] = args ? args.defaultResultConfiguration : undefined;
            resourceInputs["paymentConfiguration"] = args ? args.paymentConfiguration : undefined;
            resourceInputs["queryLogStatus"] = args ? args.queryLogStatus : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["collaborationArn"] = undefined /*out*/;
            resourceInputs["collaborationCreatorAccountId"] = undefined /*out*/;
            resourceInputs["collaborationCreatorDisplayName"] = undefined /*out*/;
            resourceInputs["collaborationName"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["memberAbilities"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Membership.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Membership resources.
 */
export interface MembershipState {
    /**
     * The ARN of the membership.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ARN of the joined collaboration.
     */
    collaborationArn?: pulumi.Input<string>;
    /**
     * The account ID of the collaboration's creator.
     */
    collaborationCreatorAccountId?: pulumi.Input<string>;
    /**
     * The display name of the collaboration's creator.
     */
    collaborationCreatorDisplayName?: pulumi.Input<string>;
    /**
     * The ID of the collaboration to which the member was invited.
     */
    collaborationId?: pulumi.Input<string>;
    /**
     * The name of the joined collaboration.
     */
    collaborationName?: pulumi.Input<string>;
    /**
     * The date and time the membership was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The default configuration for a query result.
     */
    defaultResultConfiguration?: pulumi.Input<inputs.cleanrooms.MembershipDefaultResultConfiguration>;
    /**
     * The list of abilities for the invited member.
     */
    memberAbilities?: pulumi.Input<pulumi.Input<string>[]>;
    paymentConfiguration?: pulumi.Input<inputs.cleanrooms.MembershipPaymentConfiguration>;
    /**
     * An indicator as to whether query logging has been enabled or disabled for the membership.
     */
    queryLogStatus?: pulumi.Input<string>;
    /**
     * The status of the membership.
     */
    status?: pulumi.Input<string>;
    /**
     * Key value pairs which tag the membership.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The date and time the membership was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Membership resource.
 */
export interface MembershipArgs {
    /**
     * The ID of the collaboration to which the member was invited.
     */
    collaborationId: pulumi.Input<string>;
    /**
     * The default configuration for a query result.
     */
    defaultResultConfiguration?: pulumi.Input<inputs.cleanrooms.MembershipDefaultResultConfiguration>;
    paymentConfiguration?: pulumi.Input<inputs.cleanrooms.MembershipPaymentConfiguration>;
    /**
     * An indicator as to whether query logging has been enabled or disabled for the membership.
     */
    queryLogStatus: pulumi.Input<string>;
    /**
     * Key value pairs which tag the membership.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
