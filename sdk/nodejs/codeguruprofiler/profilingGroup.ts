// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS CodeGuru Profiler Profiling Group.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.codeguruprofiler.ProfilingGroup("example", {
 *     agentOrchestrationConfig: {
 *         profilingEnabled: true,
 *     },
 *     computePlatform: "Default",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import CodeGuru Profiler Profiling Group using the `id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:codeguruprofiler/profilingGroup:ProfilingGroup example profiling_group-name-12345678
 * ```
 */
export class ProfilingGroup extends pulumi.CustomResource {
    /**
     * Get an existing ProfilingGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfilingGroupState, opts?: pulumi.CustomResourceOptions): ProfilingGroup {
        return new ProfilingGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:codeguruprofiler/profilingGroup:ProfilingGroup';

    /**
     * Returns true if the given object is an instance of ProfilingGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfilingGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfilingGroup.__pulumiType;
    }

    /**
     * Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
     */
    public readonly agentOrchestrationConfig!: pulumi.Output<outputs.codeguruprofiler.ProfilingGroupAgentOrchestrationConfig | undefined>;
    /**
     * ARN of the profiling group.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Compute platform of the profiling group.
     */
    public readonly computePlatform!: pulumi.Output<string>;
    /**
     * Name of the profiling group.
     *
     * The following arguments are optional:
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ProfilingGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProfilingGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfilingGroupArgs | ProfilingGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfilingGroupState | undefined;
            resourceInputs["agentOrchestrationConfig"] = state ? state.agentOrchestrationConfig : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["computePlatform"] = state ? state.computePlatform : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ProfilingGroupArgs | undefined;
            resourceInputs["agentOrchestrationConfig"] = args ? args.agentOrchestrationConfig : undefined;
            resourceInputs["computePlatform"] = args ? args.computePlatform : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProfilingGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProfilingGroup resources.
 */
export interface ProfilingGroupState {
    /**
     * Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
     */
    agentOrchestrationConfig?: pulumi.Input<inputs.codeguruprofiler.ProfilingGroupAgentOrchestrationConfig>;
    /**
     * ARN of the profiling group.
     */
    arn?: pulumi.Input<string>;
    /**
     * Compute platform of the profiling group.
     */
    computePlatform?: pulumi.Input<string>;
    /**
     * Name of the profiling group.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ProfilingGroup resource.
 */
export interface ProfilingGroupArgs {
    /**
     * Specifies whether profiling is enabled or disabled for the created profiling. See Agent Orchestration Config for more details.
     */
    agentOrchestrationConfig?: pulumi.Input<inputs.codeguruprofiler.ProfilingGroupAgentOrchestrationConfig>;
    /**
     * Compute platform of the profiling group.
     */
    computePlatform?: pulumi.Input<string>;
    /**
     * Name of the profiling group.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
