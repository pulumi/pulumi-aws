// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Rekognition Stream Processor.
 *
 * > This resource must be configured specifically for your use case, and not all options are compatible with one another. See [Stream Processor API documentation](https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateStreamProcessor.html#rekognition-CreateStreamProcessor-request-Input) for configuration information.
 *
 * > Stream Processors configured for Face Recognition cannot have _any_ properties updated after the fact, and it will result in an AWS API error.
 *
 * ## Example Usage
 *
 * ### Label Detection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.Bucket("example", {bucket: "example-bucket"});
 * const exampleTopic = new aws.sns.Topic("example", {name: "example-topic"});
 * const exampleVideoStream = new aws.kinesis.VideoStream("example", {
 *     name: "example-kinesis-input",
 *     dataRetentionInHours: 1,
 *     deviceName: "kinesis-video-device-name",
 *     mediaType: "video/h264",
 * });
 * const exampleRole = new aws.iam.Role("example", {
 *     name: "example-role",
 *     inlinePolicies: [{
 *         name: "Rekognition-Access",
 *         policy: pulumi.jsonStringify({
 *             Version: "2012-10-17",
 *             Statement: [
 *                 {
 *                     Action: ["s3:PutObject"],
 *                     Effect: "Allow",
 *                     Resource: [pulumi.interpolate`${example.arn}/*`],
 *                 },
 *                 {
 *                     Action: ["sns:Publish"],
 *                     Effect: "Allow",
 *                     Resource: [exampleTopic.arn],
 *                 },
 *                 {
 *                     Action: [
 *                         "kinesis:Get*",
 *                         "kinesis:DescribeStreamSummary",
 *                     ],
 *                     Effect: "Allow",
 *                     Resource: [exampleVideoStream.arn],
 *                 },
 *             ],
 *         }),
 *     }],
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Action: "sts:AssumeRole",
 *             Effect: "Allow",
 *             Principal: {
 *                 Service: "rekognition.amazonaws.com",
 *             },
 *         }],
 *     }),
 * });
 * const exampleStreamProcessor = new aws.rekognition.StreamProcessor("example", {
 *     roleArn: exampleRole.arn,
 *     name: "example-processor",
 *     dataSharingPreference: {
 *         optIn: false,
 *     },
 *     output: {
 *         s3Destination: {
 *             bucket: example.bucket,
 *         },
 *     },
 *     settings: {
 *         connectedHome: {
 *             labels: [
 *                 "PERSON",
 *                 "PET",
 *             ],
 *         },
 *     },
 *     input: {
 *         kinesisVideoStream: {
 *             arn: exampleVideoStream.arn,
 *         },
 *     },
 *     notificationChannel: {
 *         snsTopicArn: exampleTopic.arn,
 *     },
 * });
 * ```
 *
 * ### Face Detection Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kinesis.VideoStream("example", {
 *     name: "example-kinesis-input",
 *     dataRetentionInHours: 1,
 *     deviceName: "kinesis-video-device-name",
 *     mediaType: "video/h264",
 * });
 * const exampleStream = new aws.kinesis.Stream("example", {
 *     name: "pulumi-kinesis-example",
 *     shardCount: 1,
 * });
 * const exampleRole = new aws.iam.Role("example", {
 *     name: "example-role",
 *     inlinePolicies: [{
 *         name: "Rekognition-Access",
 *         policy: pulumi.jsonStringify({
 *             Version: "2012-10-17",
 *             Statement: [
 *                 {
 *                     Action: [
 *                         "kinesis:Get*",
 *                         "kinesis:DescribeStreamSummary",
 *                     ],
 *                     Effect: "Allow",
 *                     Resource: [example.arn],
 *                 },
 *                 {
 *                     Action: ["kinesis:PutRecord"],
 *                     Effect: "Allow",
 *                     Resource: [exampleStream.arn],
 *                 },
 *             ],
 *         }),
 *     }],
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Action: "sts:AssumeRole",
 *             Effect: "Allow",
 *             Principal: {
 *                 Service: "rekognition.amazonaws.com",
 *             },
 *         }],
 *     }),
 * });
 * const exampleCollection = new aws.rekognition.Collection("example", {collectionId: "example-collection"});
 * const exampleStreamProcessor = new aws.rekognition.StreamProcessor("example", {
 *     roleArn: exampleRole.arn,
 *     name: "example-processor",
 *     dataSharingPreference: {
 *         optIn: false,
 *     },
 *     regionsOfInterests: [{
 *         polygons: [
 *             {
 *                 x: 0.5,
 *                 y: 0.5,
 *             },
 *             {
 *                 x: 0.5,
 *                 y: 0.5,
 *             },
 *             {
 *                 x: 0.5,
 *                 y: 0.5,
 *             },
 *         ],
 *     }],
 *     input: {
 *         kinesisVideoStream: {
 *             arn: example.arn,
 *         },
 *     },
 *     output: {
 *         kinesisDataStream: {
 *             arn: exampleStream.arn,
 *         },
 *     },
 *     settings: {
 *         faceSearch: {
 *             collectionId: exampleCollection.id,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Rekognition Stream Processor using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:rekognition/streamProcessor:StreamProcessor example my-stream
 * ```
 */
export class StreamProcessor extends pulumi.CustomResource {
    /**
     * Get an existing StreamProcessor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamProcessorState, opts?: pulumi.CustomResourceOptions): StreamProcessor {
        return new StreamProcessor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:rekognition/streamProcessor:StreamProcessor';

    /**
     * Returns true if the given object is an instance of StreamProcessor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamProcessor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamProcessor.__pulumiType;
    }

    /**
     * ARN of the Stream Processor.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * See `dataSharingPreference`.
     */
    declare public readonly dataSharingPreference: pulumi.Output<outputs.rekognition.StreamProcessorDataSharingPreference | undefined>;
    /**
     * Input video stream. See `input`.
     */
    declare public readonly input: pulumi.Output<outputs.rekognition.StreamProcessorInput | undefined>;
    /**
     * Optional parameter for label detection stream processors.
     */
    declare public readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * The name of the Stream Processor.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notificationChannel`.
     */
    declare public readonly notificationChannel: pulumi.Output<outputs.rekognition.StreamProcessorNotificationChannel | undefined>;
    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     */
    declare public readonly output: pulumi.Output<outputs.rekognition.StreamProcessorOutput | undefined>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regionsOfInterest`.
     */
    declare public readonly regionsOfInterests: pulumi.Output<outputs.rekognition.StreamProcessorRegionsOfInterest[] | undefined>;
    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     */
    declare public readonly roleArn: pulumi.Output<string>;
    /**
     * Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     *
     * The following arguments are optional:
     */
    declare public readonly settings: pulumi.Output<outputs.rekognition.StreamProcessorSettings | undefined>;
    /**
     * (**Deprecated**) ARN of the Stream Processor.
     * Use `arn` instead.
     *
     * @deprecated Use 'arn' instead. This attribute will be removed in a future version of the provider.
     */
    declare public /*out*/ readonly streamProcessorArn: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    declare public readonly timeouts: pulumi.Output<outputs.rekognition.StreamProcessorTimeouts | undefined>;

    /**
     * Create a StreamProcessor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamProcessorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamProcessorArgs | StreamProcessorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamProcessorState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["dataSharingPreference"] = state?.dataSharingPreference;
            resourceInputs["input"] = state?.input;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["name"] = state?.name;
            resourceInputs["notificationChannel"] = state?.notificationChannel;
            resourceInputs["output"] = state?.output;
            resourceInputs["region"] = state?.region;
            resourceInputs["regionsOfInterests"] = state?.regionsOfInterests;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["streamProcessorArn"] = state?.streamProcessorArn;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as StreamProcessorArgs | undefined;
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["dataSharingPreference"] = args?.dataSharingPreference;
            resourceInputs["input"] = args?.input;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["name"] = args?.name;
            resourceInputs["notificationChannel"] = args?.notificationChannel;
            resourceInputs["output"] = args?.output;
            resourceInputs["region"] = args?.region;
            resourceInputs["regionsOfInterests"] = args?.regionsOfInterests;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["streamProcessorArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamProcessor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamProcessor resources.
 */
export interface StreamProcessorState {
    /**
     * ARN of the Stream Processor.
     */
    arn?: pulumi.Input<string>;
    /**
     * See `dataSharingPreference`.
     */
    dataSharingPreference?: pulumi.Input<inputs.rekognition.StreamProcessorDataSharingPreference>;
    /**
     * Input video stream. See `input`.
     */
    input?: pulumi.Input<inputs.rekognition.StreamProcessorInput>;
    /**
     * Optional parameter for label detection stream processors.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the Stream Processor.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notificationChannel`.
     */
    notificationChannel?: pulumi.Input<inputs.rekognition.StreamProcessorNotificationChannel>;
    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     */
    output?: pulumi.Input<inputs.rekognition.StreamProcessorOutput>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regionsOfInterest`.
     */
    regionsOfInterests?: pulumi.Input<pulumi.Input<inputs.rekognition.StreamProcessorRegionsOfInterest>[]>;
    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     *
     * The following arguments are optional:
     */
    settings?: pulumi.Input<inputs.rekognition.StreamProcessorSettings>;
    /**
     * (**Deprecated**) ARN of the Stream Processor.
     * Use `arn` instead.
     *
     * @deprecated Use 'arn' instead. This attribute will be removed in a future version of the provider.
     */
    streamProcessorArn?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.rekognition.StreamProcessorTimeouts>;
}

/**
 * The set of arguments for constructing a StreamProcessor resource.
 */
export interface StreamProcessorArgs {
    /**
     * See `dataSharingPreference`.
     */
    dataSharingPreference?: pulumi.Input<inputs.rekognition.StreamProcessorDataSharingPreference>;
    /**
     * Input video stream. See `input`.
     */
    input?: pulumi.Input<inputs.rekognition.StreamProcessorInput>;
    /**
     * Optional parameter for label detection stream processors.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the Stream Processor.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See `notificationChannel`.
     */
    notificationChannel?: pulumi.Input<inputs.rekognition.StreamProcessorNotificationChannel>;
    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See `output`.
     */
    output?: pulumi.Input<inputs.rekognition.StreamProcessorOutput>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies locations in the frames where Amazon Rekognition checks for objects or people. See `regionsOfInterest`.
     */
    regionsOfInterests?: pulumi.Input<pulumi.Input<inputs.rekognition.StreamProcessorRegionsOfInterest>[]>;
    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
     */
    roleArn: pulumi.Input<string>;
    /**
     * Input parameters used in a streaming video analyzed by a stream processor. See `settings`.
     *
     * The following arguments are optional:
     */
    settings?: pulumi.Input<inputs.rekognition.StreamProcessorSettings>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.rekognition.StreamProcessorTimeouts>;
}
