// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Data source for managing an AWS AppStream 2.0 Image.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.appstream.getImage({
 *     name: "AppStream-WinServer2019-06-17-2024",
 *     type: "PUBLIC",
 *     mostRecent: true,
 * });
 * ```
 */
export function getImage(args?: GetImageArgs, opts?: pulumi.InvokeOptions): Promise<GetImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:appstream/getImage:getImage", {
        "arn": args.arn,
        "mostRecent": args.mostRecent,
        "name": args.name,
        "nameRegex": args.nameRegex,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageArgs {
    /**
     * Arn of the image being searched for. Cannot be used with nameRegex or name.
     */
    arn?: string;
    /**
     * Boolean that if it is set to true and there are multiple images returned the most recent will be returned. If it is set to false and there are multiple images return the datasource will error.
     */
    mostRecent?: boolean;
    /**
     * Name of the image being searched for. Cannot be used with nameRegex or arn.
     */
    name?: string;
    /**
     * Regular expression name of the image being searched for. Cannot be used with arn or name.
     */
    nameRegex?: string;
    /**
     * The type of image which must be (PUBLIC, PRIVATE, or SHARED).
     */
    type?: string;
}

/**
 * A collection of values returned by getImage.
 */
export interface GetImageResult {
    readonly applications: outputs.appstream.GetImageApplication[];
    /**
     * Version of the AppStream 2.0 agent to use for instances that are launched from this image. Has a maximum length of 100 characters.
     */
    readonly appstreamAgentVersion: string;
    /**
     * ARN of the image.
     */
    readonly arn: string;
    /**
     * ARN of the image from which the image was created.
     */
    readonly baseImageArn: string;
    /**
     * Time at which this image was created.
     */
    readonly createdTime: string;
    /**
     * Description of image.
     */
    readonly description: string;
    /**
     * Image name to display.
     */
    readonly displayName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the image builder that was used to created the private image. If the image is sharedthen the value is null.
     */
    readonly imageBuilderName: string;
    /**
     * Boolean to indicate whether an image builder can be launched from this image.
     * * `image error` - Resource error object that describes the error containing the following:
     */
    readonly imageBuilderSupported: boolean;
    /**
     * List of strings describing the image permissions containing the following:
     */
    readonly imagePermissions: outputs.appstream.GetImageImagePermission[];
    readonly mostRecent?: boolean;
    readonly name: string;
    readonly nameRegex?: string;
    /**
     * Operating system platform of the image. Values will be from: WINDOWS | WINDOWS_SERVER_2016 | WINDOWS_SERVER_2019 | WINDOWS_SERVER_2022 | AMAZON_LINUX2
     */
    readonly platform: string;
    readonly publicBaseImageReleasedDate: string;
    /**
     * Current state of image. Image starts in PENDING state which changes to AVAILABLE if creation passes and FAILED if it fails. Values will be from: PENDING | AVAILABLE | FAILED | COPYING | DELETING | CREATING | IMPORTING.
     */
    readonly state: string;
    readonly stateChangeReasons: outputs.appstream.GetImageStateChangeReason[];
    readonly type?: string;
}
/**
 * Data source for managing an AWS AppStream 2.0 Image.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = aws.appstream.getImage({
 *     name: "AppStream-WinServer2019-06-17-2024",
 *     type: "PUBLIC",
 *     mostRecent: true,
 * });
 * ```
 */
export function getImageOutput(args?: GetImageOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws:appstream/getImage:getImage", {
        "arn": args.arn,
        "mostRecent": args.mostRecent,
        "name": args.name,
        "nameRegex": args.nameRegex,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageOutputArgs {
    /**
     * Arn of the image being searched for. Cannot be used with nameRegex or name.
     */
    arn?: pulumi.Input<string>;
    /**
     * Boolean that if it is set to true and there are multiple images returned the most recent will be returned. If it is set to false and there are multiple images return the datasource will error.
     */
    mostRecent?: pulumi.Input<boolean>;
    /**
     * Name of the image being searched for. Cannot be used with nameRegex or arn.
     */
    name?: pulumi.Input<string>;
    /**
     * Regular expression name of the image being searched for. Cannot be used with arn or name.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * The type of image which must be (PUBLIC, PRIVATE, or SHARED).
     */
    type?: pulumi.Input<string>;
}
