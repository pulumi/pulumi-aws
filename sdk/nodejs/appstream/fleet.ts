// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an AppStream fleet.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testFleet = new aws.appstream.Fleet("test_fleet", {
 *     name: "test-fleet",
 *     computeCapacity: {
 *         desiredInstances: 1,
 *     },
 *     description: "test fleet",
 *     idleDisconnectTimeoutInSeconds: 60,
 *     displayName: "test-fleet",
 *     enableDefaultInternetAccess: false,
 *     fleetType: "ON_DEMAND",
 *     imageName: "Amazon-AppStream2-Sample-Image-03-11-2023",
 *     instanceType: "stream.standard.large",
 *     maxUserDurationInSeconds: 600,
 *     vpcConfig: {
 *         subnetIds: ["subnet-06e9b13400c225127"],
 *     },
 *     tags: {
 *         TagName: "tag-value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_appstream_fleet` using the id. For example:
 *
 * ```sh
 * $ pulumi import aws:appstream/fleet:Fleet example fleetNameExample
 * ```
 */
export class Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FleetState, opts?: pulumi.CustomResourceOptions): Fleet {
        return new Fleet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appstream/fleet:Fleet';

    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fleet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fleet.__pulumiType;
    }

    /**
     * ARN of the appstream fleet.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Configuration block for the desired capacity of the fleet. See below.
     */
    declare public readonly computeCapacity: pulumi.Output<outputs.appstream.FleetComputeCapacity>;
    /**
     * Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * Description to display.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect.
     */
    declare public readonly disconnectTimeoutInSeconds: pulumi.Output<number>;
    /**
     * Human-readable friendly name for the AppStream fleet.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
     */
    declare public readonly domainJoinInfo: pulumi.Output<outputs.appstream.FleetDomainJoinInfo>;
    /**
     * Enables or disables default internet access for the fleet.
     */
    declare public readonly enableDefaultInternetAccess: pulumi.Output<boolean>;
    /**
     * Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
     */
    declare public readonly fleetType: pulumi.Output<string>;
    /**
     * ARN of the IAM role to apply to the fleet.
     */
    declare public readonly iamRoleArn: pulumi.Output<string>;
    /**
     * Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins. Defaults to `0`. Valid value is between `60` and `3600 `seconds.
     */
    declare public readonly idleDisconnectTimeoutInSeconds: pulumi.Output<number | undefined>;
    /**
     * ARN of the public, private, or shared image to use.
     */
    declare public readonly imageArn: pulumi.Output<string>;
    /**
     * Name of the image used to create the fleet.
     */
    declare public readonly imageName: pulumi.Output<string>;
    /**
     * Instance type to use when launching fleet instances.
     */
    declare public readonly instanceType: pulumi.Output<string>;
    /**
     * The maximum number of user sessions on an instance. This only applies to multi-session fleets.
     */
    declare public readonly maxSessionsPerInstance: pulumi.Output<number | undefined>;
    /**
     * Maximum amount of time that a streaming session can remain active, in seconds.
     */
    declare public readonly maxUserDurationInSeconds: pulumi.Output<number>;
    /**
     * Unique name for the fleet.
     *
     * The following arguments are optional:
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
     */
    declare public readonly streamView: pulumi.Output<string>;
    /**
     * Map of tags to attach to AppStream instances.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    /**
     * Configuration block for the VPC configuration for the image builder. See below.
     */
    declare public readonly vpcConfig: pulumi.Output<outputs.appstream.FleetVpcConfig>;

    /**
     * Create a Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FleetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FleetArgs | FleetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FleetState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["computeCapacity"] = state?.computeCapacity;
            resourceInputs["createdTime"] = state?.createdTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["disconnectTimeoutInSeconds"] = state?.disconnectTimeoutInSeconds;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["domainJoinInfo"] = state?.domainJoinInfo;
            resourceInputs["enableDefaultInternetAccess"] = state?.enableDefaultInternetAccess;
            resourceInputs["fleetType"] = state?.fleetType;
            resourceInputs["iamRoleArn"] = state?.iamRoleArn;
            resourceInputs["idleDisconnectTimeoutInSeconds"] = state?.idleDisconnectTimeoutInSeconds;
            resourceInputs["imageArn"] = state?.imageArn;
            resourceInputs["imageName"] = state?.imageName;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["maxSessionsPerInstance"] = state?.maxSessionsPerInstance;
            resourceInputs["maxUserDurationInSeconds"] = state?.maxUserDurationInSeconds;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["state"] = state?.state;
            resourceInputs["streamView"] = state?.streamView;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["vpcConfig"] = state?.vpcConfig;
        } else {
            const args = argsOrState as FleetArgs | undefined;
            if (args?.computeCapacity === undefined && !opts.urn) {
                throw new Error("Missing required property 'computeCapacity'");
            }
            if (args?.instanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            resourceInputs["computeCapacity"] = args?.computeCapacity;
            resourceInputs["description"] = args?.description;
            resourceInputs["disconnectTimeoutInSeconds"] = args?.disconnectTimeoutInSeconds;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["domainJoinInfo"] = args?.domainJoinInfo;
            resourceInputs["enableDefaultInternetAccess"] = args?.enableDefaultInternetAccess;
            resourceInputs["fleetType"] = args?.fleetType;
            resourceInputs["iamRoleArn"] = args?.iamRoleArn;
            resourceInputs["idleDisconnectTimeoutInSeconds"] = args?.idleDisconnectTimeoutInSeconds;
            resourceInputs["imageArn"] = args?.imageArn;
            resourceInputs["imageName"] = args?.imageName;
            resourceInputs["instanceType"] = args?.instanceType;
            resourceInputs["maxSessionsPerInstance"] = args?.maxSessionsPerInstance;
            resourceInputs["maxUserDurationInSeconds"] = args?.maxUserDurationInSeconds;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["streamView"] = args?.streamView;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcConfig"] = args?.vpcConfig;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fleet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Fleet resources.
 */
export interface FleetState {
    /**
     * ARN of the appstream fleet.
     */
    arn?: pulumi.Input<string>;
    /**
     * Configuration block for the desired capacity of the fleet. See below.
     */
    computeCapacity?: pulumi.Input<inputs.appstream.FleetComputeCapacity>;
    /**
     * Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * Description to display.
     */
    description?: pulumi.Input<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect.
     */
    disconnectTimeoutInSeconds?: pulumi.Input<number>;
    /**
     * Human-readable friendly name for the AppStream fleet.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
     */
    domainJoinInfo?: pulumi.Input<inputs.appstream.FleetDomainJoinInfo>;
    /**
     * Enables or disables default internet access for the fleet.
     */
    enableDefaultInternetAccess?: pulumi.Input<boolean>;
    /**
     * Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
     */
    fleetType?: pulumi.Input<string>;
    /**
     * ARN of the IAM role to apply to the fleet.
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins. Defaults to `0`. Valid value is between `60` and `3600 `seconds.
     */
    idleDisconnectTimeoutInSeconds?: pulumi.Input<number>;
    /**
     * ARN of the public, private, or shared image to use.
     */
    imageArn?: pulumi.Input<string>;
    /**
     * Name of the image used to create the fleet.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Instance type to use when launching fleet instances.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The maximum number of user sessions on an instance. This only applies to multi-session fleets.
     */
    maxSessionsPerInstance?: pulumi.Input<number>;
    /**
     * Maximum amount of time that a streaming session can remain active, in seconds.
     */
    maxUserDurationInSeconds?: pulumi.Input<number>;
    /**
     * Unique name for the fleet.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
     */
    state?: pulumi.Input<string>;
    /**
     * AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
     */
    streamView?: pulumi.Input<string>;
    /**
     * Map of tags to attach to AppStream instances.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration block for the VPC configuration for the image builder. See below.
     */
    vpcConfig?: pulumi.Input<inputs.appstream.FleetVpcConfig>;
}

/**
 * The set of arguments for constructing a Fleet resource.
 */
export interface FleetArgs {
    /**
     * Configuration block for the desired capacity of the fleet. See below.
     */
    computeCapacity: pulumi.Input<inputs.appstream.FleetComputeCapacity>;
    /**
     * Description to display.
     */
    description?: pulumi.Input<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect.
     */
    disconnectTimeoutInSeconds?: pulumi.Input<number>;
    /**
     * Human-readable friendly name for the AppStream fleet.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
     */
    domainJoinInfo?: pulumi.Input<inputs.appstream.FleetDomainJoinInfo>;
    /**
     * Enables or disables default internet access for the fleet.
     */
    enableDefaultInternetAccess?: pulumi.Input<boolean>;
    /**
     * Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
     */
    fleetType?: pulumi.Input<string>;
    /**
     * ARN of the IAM role to apply to the fleet.
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins. Defaults to `0`. Valid value is between `60` and `3600 `seconds.
     */
    idleDisconnectTimeoutInSeconds?: pulumi.Input<number>;
    /**
     * ARN of the public, private, or shared image to use.
     */
    imageArn?: pulumi.Input<string>;
    /**
     * Name of the image used to create the fleet.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Instance type to use when launching fleet instances.
     */
    instanceType: pulumi.Input<string>;
    /**
     * The maximum number of user sessions on an instance. This only applies to multi-session fleets.
     */
    maxSessionsPerInstance?: pulumi.Input<number>;
    /**
     * Maximum amount of time that a streaming session can remain active, in seconds.
     */
    maxUserDurationInSeconds?: pulumi.Input<number>;
    /**
     * Unique name for the fleet.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
     */
    streamView?: pulumi.Input<string>;
    /**
     * Map of tags to attach to AppStream instances.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration block for the VPC configuration for the image builder. See below.
     */
    vpcConfig?: pulumi.Input<inputs.appstream.FleetVpcConfig>;
}
